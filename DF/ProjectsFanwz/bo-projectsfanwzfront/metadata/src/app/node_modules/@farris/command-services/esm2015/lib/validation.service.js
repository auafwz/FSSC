// tslint:disable: max-line-length
import { Injectable } from '@angular/core';
import { Repository, FrameContext, PARENT_CLASS, ChangeType } from '@farris/devkit';
import { tap, switchMap } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { zip } from 'rxjs/observable/zip';
import { empty } from 'rxjs/observable/empty';
import { of } from 'rxjs/observable/of';
import { VerifyDetailService } from '@farris/ui-verify-detail';
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class ValidationService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.validationResults = new Subject();
        this.validationAllResult = new Subject();
    }
    /**
     * 验证表单内的所有表单
     */
    validate() {
        this.repository.getList().subscribe((result) => {
            for (const entity of result) {
                entity.validate().subscribe((result) => {
                    if (!result.isValid) {
                        alert(result.message);
                        this.validationResults.next(result);
                    }
                });
            }
        });
        return this.validationResults;
    }
    /**
     * 校验当前行
     */
    validateCurrentRow() {
        // 组合表单只校验当前按钮所在的表单
        const primaryValue = this.frameContext.bindingData.list.currentId;
        const entities = [this.repository.entityCollection.getEntityById(primaryValue)];
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        if (namespace) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        rootViewModel.verifyInformations = [];
        let formValid = true;
        let entityValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 验证所有实体
        const observableList = entities.map((entity) => {
            const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);
            return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);
        });
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            if (isValidated && formValid) {
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    }
    /**
     * 调用表单和实体上的验证规则, 通过后调用回调cb
     */
    validateAll() {
        // 组合表单只校验当前按钮所在的表单
        const entities = this.repository.entityCollection.getAllEntities();
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let formValid = true;
        let entityValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 触发所有实体的validate事件
        const isMultiEntityValiate = entities.length > 0;
        // 验证所有实体
        const observableList = entities.map((entity, index) => entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            // 因为校验累加的缘故，导致之前的校验信息一直存在，只能通过校验结果来确定是否还有错误信息
            if (isValidated && formValid) {
                verifyInformations = rootViewModel.verifyInformations = [];
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            if (isValidated && formValid) {
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    }
    collectValidationErrors(rootViewModel, errors, namespace, filter = true) {
        if (filter) {
            rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
        }
        errors.forEach((validationError) => {
            if (validationError.children && validationError.children.length) {
                this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);
            }
            let id = '';
            const findId = (target) => {
                if (target && target.data && target.data.id) {
                    id = target.data.id;
                    return;
                }
                else if (target[PARENT_CLASS]) {
                    findId(target[PARENT_CLASS]);
                }
            };
            findId(validationError.target);
            if (validationError.constraints) {
                const validationResultTypes = Object.keys(validationError.constraints);
                if (validationResultTypes.length) {
                    const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;
                    let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);
                    index = index === -1 ? 0 : index + offset;
                    rootViewModel.verifyInformations.splice(index, 0, {
                        id: id,
                        namespace,
                        targetField: validationError.field,
                        index: validationError.index,
                        title: validationError.propertyName,
                        msg: validationError.constraints[validationResultTypes[0]],
                        frameContext: validationError.frameContext,
                        fullPath: validationError.fullPath,
                        type: validationResultTypes[0] === 'required' ? 'empty' : 'error'
                    });
                }
            }
        });
    }
    /**
     * 重置校验信息（仅当前表单）
     */
    resetValidation() {
        const isDialog = this.isInDialog();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isDialog) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let verifyInformations = rootViewModel.verifyInformations;
        if (verifyInformations.length) {
            const namespace = this.frameContext.namespace;
            if (namespace !== null) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
            }
            rootViewModel.verifyInformations = verifyInformations;
            //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);
        }
        rootViewModel.verifycationChanged.next(verifyInformations);
        return of(null);
    }
    /**
     * 是否在弹窗内部
     */
    isInDialog() {
        return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;
    }
    /**
     * 拥有独自的校验提示服务
     */
    hasOwnVerifyDetailService() {
        return this.frameContext.injector.get(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get(VerifyDetailService, null);
        ;
    }
}
ValidationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidationService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext }
];
export { ValidationService };
//# sourceMappingURL=data:application/json;base64,