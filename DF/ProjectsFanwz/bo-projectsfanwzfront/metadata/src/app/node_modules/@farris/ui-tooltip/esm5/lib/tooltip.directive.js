/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { TooltipComponent } from './tooltip-component/tooltip.component';
var FarrisTooltipDirective = /** @class */ (function () {
    function FarrisTooltipDirective(el, render, viewContainerRef, resolver) {
        this.el = el;
        this.render = render;
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.tooltipEnable = true;
        /* 提示文本 */
        this.text = '';
        // 提示框样式
        this.tipCls = '';
        // 提示框宽度
        this.tipWidth = '';
        /* 位置 */
        this.placement = 'top';
        this.triggerMode = 'hover';
        this.showTip = true;
        // 是否绑定了事件
        this.hasBindEvent = false;
        /* 生成提示组件 */
        this.componentFactory = this.resolver.resolveComponentFactory(TooltipComponent);
    }
    Object.defineProperty(FarrisTooltipDirective.prototype, "enableTooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tooltipEnable;
        },
        // 5月7日追加这种写法，控制禁用、启用
        // 原来的时候value是空字符串
        set: 
        // 5月7日追加这种写法，控制禁用、启用
        // 原来的时候value是空字符串
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value == 'string' && value == '') {
                this.enableOrDisable(true);
            }
            else {
                this.enableOrDisable(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTooltipDirective.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this.triggerMode;
        },
        /* 触发方式 */
        set: /* 触发方式 */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                if (value !== this.triggerMode) {
                    this.triggerMode = value;
                    this.unbindEvent();
                    this.bindEvent();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTooltipDirective.prototype, "disable", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.tooltipEnable;
        },
        /* 禁用---跟其他控件的属性容易冲突，逐渐废弃。
        * 比如按钮可以设置禁用不触发点击，但想给出点击提示，这样就冲突了
        */
        set: /* 禁用---跟其他控件的属性容易冲突，逐渐废弃。
          * 比如按钮可以设置禁用不触发点击，但想给出点击提示，这样就冲突了
          */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableOrDisable(!value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.bindEvent();
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unbindEvent();
        this.removeTooltip();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisTooltipDirective.prototype.enableOrDisable = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.tooltipEnable = value;
        if (this.tooltipEnable) {
            this.bindEvent();
        }
        else {
            this.unbindEvent();
        }
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.bindEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.tooltipEnable) {
            return;
        }
        // 是否已绑定事件
        if (this.hasBindEvent) {
            return;
        }
        if (this.trigger === 'click') {
            // 鼠标点击
            this.clickEvent = this.render.listen(this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.appendTooltip();
                _this.clickOutEvent = _this.render.listen(document, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.removeTooltip();
                    _this.clickOutEvent();
                }));
            }));
        }
        else if (this.trigger === 'focus') {
            // 聚焦
            // @Todo 需要把input等组件和普通组件分开
            this.focusDownEvent = this.render.listen(this.el.nativeElement, 'mousedown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                _this.appendTooltip();
            }));
            this.focusUpEvent = this.render.listen(this.el.nativeElement, 'mouseup', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.removeTooltip();
            }));
        }
        else {
            // 鼠标移动上去
            this.mouseenterEvent = this.render.listen(this.el.nativeElement, 'mouseenter', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.appendTooltip();
            }));
            this.mouseleaveEvent = this.render.listen(this.el.nativeElement, 'mouseleave', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.removeTooltip();
            }));
        }
        this.hasBindEvent = true;
    };
    /* 解绑事件 */
    /* 解绑事件 */
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.unbindEvent = /* 解绑事件 */
    /**
     * @return {?}
     */
    function () {
        // 鼠标移上去
        if (this.mouseenterEvent) {
            this.mouseenterEvent();
        }
        if (this.mouseleaveEvent) {
            this.mouseleaveEvent();
        }
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.clickOutEvent) {
            this.clickOutEvent();
        }
        if (this.focusDownEvent) {
            this.focusDownEvent();
        }
        if (this.focusUpEvent) {
            this.focusUpEvent();
        }
        this.hasBindEvent = false;
    };
    /* body  移除tooltip */
    /* body  移除tooltip */
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.removeTooltip = /* body  移除tooltip */
    /**
     * @return {?}
     */
    function () {
        if (this.tooltip) {
            this.render.removeChild(document.body, this.tooltip.el.nativeElement);
            this._componentRef.changeDetectorRef.markForCheck();
            this._componentRef.changeDetectorRef.detectChanges();
            this._componentRef.destroy();
            this.viewContainerRef.clear();
            this.tooltip = null;
            this._componentRef = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.appendTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.showTip)
            return;
        this.generateTooltip();
        this.updateViewProps(this.placement, this.content, this.el.nativeElement.getBoundingClientRect());
    };
    /* 更新tooltip组件属性 */
    /* 更新tooltip组件属性 */
    /**
     * @private
     * @param {?} placement
     * @param {?} content
     * @param {?} hostBoundingClientRect
     * @return {?}
     */
    FarrisTooltipDirective.prototype.updateViewProps = /* 更新tooltip组件属性 */
    /**
     * @private
     * @param {?} placement
     * @param {?} content
     * @param {?} hostBoundingClientRect
     * @return {?}
     */
    function (placement, content, hostBoundingClientRect) {
        this.tooltip.placement = placement;
        this.tooltip.content = content;
        this.tooltip.hostBoundingClientRect = hostBoundingClientRect;
        this.tooltip.tipCls = this.tipCls;
        this.tooltip.tipWidth = this.tipWidth;
        this._componentRef.changeDetectorRef.markForCheck();
        this._componentRef.changeDetectorRef.detectChanges();
    };
    /* 构造tooltip结构 */
    /* 构造tooltip结构 */
    /**
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.generateTooltip = /* 构造tooltip结构 */
    /**
     * @private
     * @return {?}
     */
    function () {
        this._componentRef = this.viewContainerRef.createComponent(this.componentFactory);
        this.tooltip = this._componentRef.instance;
        // 父元素中移除  添加到body中
        this.render.removeChild(this.render.parentNode(this.el.nativeElement), this.tooltip.el.nativeElement);
        this.render.appendChild(document.body, this.tooltip.el.nativeElement);
    };
    FarrisTooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisTooltip]'
                },] }
    ];
    /** @nocollapse */
    FarrisTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    FarrisTooltipDirective.propDecorators = {
        enableTooltip: [{ type: Input, args: ['farrisTooltip',] }],
        text: [{ type: Input }],
        tipCls: [{ type: Input }],
        tipWidth: [{ type: Input }],
        placement: [{ type: Input }],
        trigger: [{ type: Input }],
        disable: [{ type: Input }],
        showTip: [{ type: Input }],
        content: [{ type: Input }]
    };
    return FarrisTooltipDirective;
}());
export { FarrisTooltipDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.tooltipEnable;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype._componentRef;
    /** @type {?} */
    FarrisTooltipDirective.prototype.text;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tipCls;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tipWidth;
    /** @type {?} */
    FarrisTooltipDirective.prototype.placement;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.triggerMode;
    /** @type {?} */
    FarrisTooltipDirective.prototype.showTip;
    /** @type {?} */
    FarrisTooltipDirective.prototype.content;
    /** @type {?} */
    FarrisTooltipDirective.prototype.mouseenterEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.mouseleaveEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.clickEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.clickOutEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.focusDownEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.focusUpEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.docBody;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.hasBindEvent;
    /** @type {?} */
    FarrisTooltipDirective.prototype.componentFactory;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tooltipRef;
    /** @type {?} */
    FarrisTooltipDirective.prototype.tooltip;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    FarrisTooltipDirective.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,