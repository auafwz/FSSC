import { Injectable, ElementRef } from '@angular/core';
import { StateMachine } from '@farris/devkit';
// tslint:disable: max-line-length
/**
 * 状态机服务
 * @scope FrameComponent
 */
var StateMachineService = /** @class */ (function () {
    function StateMachineService(stateMachine) {
        var _this = this;
        this.stateMachine = stateMachine;
        this._clsDefaultName = 'f-form-state-default';
        this._initLoad = true;
        if (this.stateMachine.initialState.name === 'init') {
            window.setTimeout(function () {
                _this.initFormState();
            }, 0);
        }
    }
    StateMachineService.prototype.transit = function (action) {
        if (action && typeof this.stateMachine[action] === 'function') {
            this.stateMachine[action]();
            this._currentFrameContext = this['context'] && this['context']['frameContext'];
            if (this._initLoad) {
                this.initFormState();
                this._initLoad = false;
            }
            if (!this._currentFrameContext) {
                return;
            }
            var currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);
            if (!!currentRootFrameContext) {
                this.toggleFormState(action, currentRootFrameContext);
            }
        }
    };
    StateMachineService.prototype.getCurrentRootFrameContext = function (currentFrameContext) {
        var currentRootFrameContext;
        this.getAllRootFrameContext().forEach(function (rootFc) {
            if (currentFrameContext.namespace === rootFc.namespace) {
                currentRootFrameContext = rootFc;
            }
        });
        return currentRootFrameContext;
    };
    StateMachineService.prototype.getFrameContextManagerMap = function () {
        if (this.stateMachine && this.stateMachine.frameContext) {
            var appContext = this.stateMachine.frameContext.appContext;
            if (appContext) {
                var frameContextManager = appContext.frameContextManager;
                return frameContextManager.getFrameContextMap();
            }
        }
        return null;
        // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();
    };
    StateMachineService.prototype.getAllRootFrameContext = function () {
        var rootFrameContextArr = [];
        this.getFrameContextManagerMap().forEach(function (item) {
            if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {
                rootFrameContextArr.push(item);
            }
        });
        return rootFrameContextArr;
    };
    StateMachineService.prototype.initFormState = function () {
        var _this = this;
        if (!this.getFrameContextManagerMap()) {
            return;
        }
        this.getAllRootFrameContext().forEach(function (rootFc) {
            var rootComponent = rootFc.injector.get(ElementRef, null) || null;
            if (!rootComponent || !rootComponent.nativeElement) {
                return;
            }
            if (!rootComponent.nativeElement.className.includes(_this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {
                _this.addCssClass(rootComponent, _this._clsDefaultName);
            }
        });
    };
    StateMachineService.prototype.toggleFormState = function (action, frameContext) {
        var _this = this;
        var rootComponent = frameContext.injector.get(ElementRef, null) || null;
        if (!rootComponent || !rootComponent.nativeElement || !action) {
            return;
        }
        action = action.toLowerCase();
        if (action && ['create', 'edit'].includes(action)) {
            if (action === 'create') {
                this.addCssClass(rootComponent, 'f-form-state-create');
            }
            else if (action === 'edit') {
                this.addCssClass(rootComponent, 'f-form-state-edit');
            }
            this.removeCssClass(rootComponent, this._clsDefaultName);
        }
        else {
            ['f-form-state-create', 'f-form-state-edit'].forEach(function (item) { return _this.removeCssClass(rootComponent, item); });
            this.addCssClass(rootComponent, this._clsDefaultName);
        }
    };
    StateMachineService.prototype.addCssClass = function (elementRef, className) {
        if (!elementRef || !className || !elementRef.nativeElement) {
            return;
        }
        var originalClassName = elementRef.nativeElement.className || '';
        if (!originalClassName.includes(className)) {
            elementRef.nativeElement.className = originalClassName + " " + className;
        }
    };
    StateMachineService.prototype.removeCssClass = function (elementRef, className) {
        if (!elementRef || !className || !elementRef.nativeElement) {
            return;
        }
        var originalClassName = elementRef.nativeElement.className || '';
        if (originalClassName.includes(className)) {
            elementRef.nativeElement.className = originalClassName.split(' ').filter(function (p) { return p && p !== className; }).join(' ');
        }
    };
    StateMachineService.prototype.getFormRootComponent = function () {
        if (this.stateMachine && this.stateMachine.frameContext) {
            var viewContext = this.stateMachine.frameContext;
            if (viewContext) {
                var virtualRootContext = viewContext.getVirtualRootFrameContext();
                if (virtualRootContext) {
                    var injector = virtualRootContext.injector;
                    if (typeof injector.get === 'function') {
                        return injector.get(ElementRef, null);
                    }
                }
            }
        }
        return null;
        // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;
    };
    StateMachineService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    StateMachineService.ctorParameters = function () { return [
        { type: StateMachine }
    ]; };
    return StateMachineService;
}());
export { StateMachineService };
//# sourceMappingURL=data:application/json;base64,