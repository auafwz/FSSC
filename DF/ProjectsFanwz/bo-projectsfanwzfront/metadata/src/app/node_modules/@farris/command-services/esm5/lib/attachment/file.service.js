import { Injectable, Optional } from '@angular/core';
import { forkJoin, Subject } from 'rxjs';
import { FrameContext, BindingPathConverter } from '@farris/devkit';
import { FormNotifyService } from '../form-notify.service';
import { AttachmentDataService } from './attachment-data.service';
import { LanguageService } from '../languag.service';
import { EntityService } from '../entity-services/index';
import { ListDataService, SubListDataService } from '../data-services/index';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { debounceTime, tap } from 'rxjs/operators';
/**
 * 附件上传
 * @summary
 * fileExtend：命名文件上传或预览组件传递过来的数据；
 * fileExtendFieldPath：命名附件UDT的字段路径；
 * attachmentInfo：命名附件UDT所需的信息；
 */
var FileService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function FileService(frameContext, attachDataService, entityService, subListDataService, notifyService, languageService, listDataService, formLoadingService) {
        var _this = this;
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.subListDataService = subListDataService;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.listDataService = listDataService;
        this.formLoadingService = formLoadingService;
        this.subject = new Subject();
        this.subject.pipe(debounceTime(500)).subscribe(function (data) {
            _this.process(data.fileInfoFieldPath, data.configs);
        });
        this.attachmentInfos = [];
    }
    // #region 上传文件
    /**
     * 批量添加附件行
     */
    FileService.prototype.addFileRows = function (fileInfoFieldPath) {
        var attachmentInfos = this.getAttachmentInfosToAddFromContext();
        if (attachmentInfos.length === 0) {
            this.notifyService.info('请先上传附件');
        }
        return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);
    };
    /**
     * 批量添加带附件类型的附件行
     * @param fileInfoFieldPath 附件udt字段
     * @param configs 附件扩展信息配置
     * @description configs配置如{"billId":"{UISTATE~/root/billId}","rowId":"{UISTATE~/root/rowId}","attachmentType":"xueli"}
     */
    FileService.prototype.addFileRowsWithConfigs = function (fileInfoFieldPath, configs) {
        var attachmentInfos = this.getAttachmentInfosToAddFromContext();
        if (attachmentInfos.length === 0) {
            this.notifyService.info('请先上传附件');
        }
        // let mapFields = null;
        // if (typeof configs === 'string') {
        //   // 去掉首尾空格
        //   configs = configs.trim();
        // }
        // if (configs.startsWith('{') && configs.endsWith('}')) {
        //   try {
        //     mapFields = JSON.parse(configs);
        //   } catch {
        //     throw new Error('附件扩展信息配置不是合法的json字符串。');
        //   }
        // } else {
        //   throw new Error('附件扩展信息配置不是合法的json字符串。');
        // }
        this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);
        this.subject.next({ fileInfoFieldPath: fileInfoFieldPath, configs: configs });
        //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);
    };
    FileService.prototype.process = function (fileInfoFieldPath, configs) {
        var _this = this;
        if (this.attachmentInfos && this.attachmentInfos.length > 0) {
            var attachmentInfos_1 = this.attachmentInfos.concat([]);
            var mapFields = null;
            if (typeof configs === 'string') {
                // 去掉首尾空格
                configs = configs.trim();
            }
            if (configs.startsWith('{') && configs.endsWith('}')) {
                try {
                    mapFields = JSON.parse(configs);
                }
                catch (_a) {
                    throw new Error('附件扩展信息配置不是合法的json字符串。');
                }
            }
            else {
                throw new Error('附件扩展信息配置不是合法的json字符串。');
            }
            this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos_1, mapFields).pipe(tap(function () {
                _this.attachmentInfos = _this.attachmentInfos.filter(function (item) { return !attachmentInfos_1.find(function (attachmentInfo) { return attachmentInfo.attachmentId === item.attachmentId; }); });
                if (_this.attachmentInfos.length > 0) {
                    _this.process(fileInfoFieldPath, configs);
                }
            })).subscribe();
        }
    };
    /**
     * 获取要添加的附件信息数组
     */
    FileService.prototype.getAttachmentInfosToAddFromContext = function () {
        var fileExtends = this.getFileExtendsFromContext();
        var attachmentInfos = this.convertToAttachmentInfos(fileExtends);
        return attachmentInfos;
    };
    /**
     * 将附件上传组件返回的附件信息转换为服务器端需要的格式
     */
    FileService.prototype.convertToAttachmentInfos = function (fileExtends) {
        if (!fileExtends) {
            return [];
        }
        var attachmentInfos = [];
        fileExtends.forEach(function (fUploadOutPut) {
            var attachmentInfo = {
                attachmentId: fUploadOutPut.extend.metadataId,
                fileName: fUploadOutPut.extend.fileName,
            };
            attachmentInfos.push(attachmentInfo);
        });
        return attachmentInfos;
    };
    // #endregion
    // #region 删除文件
    /**
     * 删除附件行
     */
    FileService.prototype.removeFileRows = function (fileInfoFieldPath) {
        var _this = this;
        var dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);
        if (dataIds.length === 0) {
            this.notifyService.info('请选择要删除的附件');
        }
        var isSublist = fileInfoFieldPath.split('/').filter(function (p) { return p; }).length >= 2;
        var removeObservables = [];
        if (isSublist) {
            dataIds.forEach(function (dataId) {
                var removeObservable;
                removeObservable = _this.subListDataService.removeWithoutConfirm(dataId);
                removeObservables.push(removeObservable);
            });
            return forkJoin(removeObservables);
        }
        else {
            return this.listDataService.removeRows(dataIds, false, null, false);
        }
    };
    /**
     * 获取要删除的数据
     */
    FileService.prototype.getDataIdsToRemoveFromContext = function (fileExtendFieldPath) {
        var _this = this;
        // 从上下文中获取要处理的附件信息数组
        var fileExtends = this.getFileExtendsFromContext();
        // 将附件数组转换为对应的数据id
        var dataIds = [];
        fileExtends.forEach(function (fileExtend) {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            var fileId = fileExtend.extend.metadataId;
            var dataId = _this.convertFileIdToDataId(fileId, fileExtendFieldPath);
            dataIds.push(dataId);
        });
        return dataIds;
    };
    /**
     * 根据路径获取附件字段值数组
     * @param fieldPath 字段路径
     */
    FileService.prototype.convertFileIdToDataId = function (fileId, fileExtendFieldPath) {
        // 解析路径
        var fileBindingPath = BindingPathConverter.toBindingPathArray(fileExtendFieldPath);
        var fileFieldName = fileBindingPath.pop();
        var fileListBindingPath = fileBindingPath;
        // 获取附件id数组
        var entityListData = this.entityService.getEntityListData(fileListBindingPath);
        var targetEntityData = entityListData.find(function (entityData) {
            if (entityData[fileFieldName]) {
                var attachmentId = entityData[fileFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        });
        return targetEntityData.id;
    };
    // #endregion
    // #region 其他工具方法
    /**
     * 从上下文中获取要处理的附件信息数组
     * @summary
     * 为了统一单个和多个附件的处理方式，统一包装为数组
     */
    FileService.prototype.getFileExtendsFromContext = function () {
        var commandContext = this['context'];
        var eventParam = commandContext.eventParam;
        if (!eventParam) {
            return [];
        }
        var fileExtends;
        if (Array.isArray(eventParam) === false) {
            fileExtends = [eventParam];
        }
        else {
            fileExtends = eventParam.concat([]);
        }
        return fileExtends;
    };
    FileService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FileService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: AttachmentDataService },
        { type: EntityService },
        { type: SubListDataService },
        { type: FormNotifyService },
        { type: LanguageService },
        { type: ListDataService },
        { type: FormLoadingService, decorators: [{ type: Optional }] }
    ]; };
    return FileService;
}());
export { FileService };
//# sourceMappingURL=data:application/json;base64,