/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2019-03-05 19:55:44
 * @Last Modified by: Witt
 * @Last Modified time: 2019-03-13 20:35:29
 */
import { format } from 'date-fns';
import { AppContext, FrameContext } from '@farris/devkit';
import { ChangeDetailType } from './types';
import { BefChangeUtil } from './bef_change_util';
import { Injector, Optional } from '@angular/core';
/**
 * Be变量管理器
 */
var BefVariableManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefVariableManager(appContext, ngVariables, injector) {
        var _this = this;
        this.appContext = appContext;
        this.ngVariables = ngVariables;
        this.injector = injector;
        this.ngVariableMap = new Map();
        this.innerValueMap = new Map();
        // 重新组织变量元数据
        Object.keys(ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 获取变更集
     */
    /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.handleChangeDetail = /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        var _this = this;
        /** @type {?} */
        var changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} varName
         * @return {?}
         */
        function (varName) {
            // 变量元数据
            /** @type {?} */
            var ngVariable = _this.ngVariableMap.get(varName);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            var mapping = ngVariable.mapping;
            // 更新UIState变更
            /** @type {?} */
            var newValue = changeInfo[varName];
            /** @type {?} */
            var oldValue = _this.innerValueMap.get(varName);
            if (oldValue === newValue) {
                return;
            }
            // 更新值
            _this.setValueToUIState(mapping, newValue);
            _this.innerValueMap.set(varName, newValue);
        }));
    };
    /**
     * Build ChangeDetail instance for all variables.
     */
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    BefVariableManager.prototype.buildChangeDetail = /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            /** @type {?} */
            var oldValue = _this.innerValueMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                // 不清除变更，请求成功后清除变更
                // this.innerValueMap.set(varName, newValue);
                _this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    };
    /**
     * Clear variable values cached in the innerValueMap property.
     */
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    BefVariableManager.prototype.reset = /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    function () {
        this.innerValueMap.clear();
    };
    /**
     * 清空vo变量变更集
     */
    /**
     * 清空vo变量变更集
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.clearChanges = /**
     * 清空vo变量变更集
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        var _this = this;
        if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {
            return;
        }
        Object.keys(changeDetail.ChangeInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var ngVariable = _this.ngVariableMap.get(key);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            var mapping = ngVariable.mapping;
            /** @type {?} */
            var newValue = _this.getValueFromUIState(mapping);
            _this.innerValueMap.set(key, newValue);
        }));
    };
    /**
     * Append changed variable to ChangeDetail instance.
     */
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    BefVariableManager.prototype.appendToChangeInfo = /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    function (changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            var udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    };
    /**
     * 从UIState上获取值
     */
    /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    BefVariableManager.prototype.getValueFromUIState = /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    function (mapping) {
        /** @type {?} */
        var uiState = this.getRootUIState();
        // 计算value
        /** @type {?} */
        var mappingArray = mapping.split('.');
        /** @type {?} */
        var value = mappingArray.reduce((/**
         * @param {?} accumulator
         * @param {?} currentValue
         * @return {?}
         */
        function (accumulator, currentValue) {
            return accumulator ? accumulator[currentValue] : null;
        }), uiState);
        if (value instanceof Date) {
            return format(value, 'yyyy-MM-dd HH:mm:ss');
        }
        return value;
    };
    /**
     * 获取根组件上的UIState
     */
    /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    BefVariableManager.prototype.getRootUIState = /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();
        if (this.injector) {
            /** @type {?} */
            var frameContext = this.injector.get(FrameContext, null);
            if (frameContext) {
                /** @type {?} */
                var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
                rootFrameContext = virtualRootFrameContext || rootFrameContext;
            }
        }
        if (!rootFrameContext) {
            return;
        }
        return rootFrameContext.uiState;
    };
    /**
     * 值比较
     * @todo 临时采用这种方式
     */
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    BefVariableManager.prototype.isValueEqual = /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    function (srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    };
    /**
     * Check if the object is a plain object
     */
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    BefVariableManager.prototype.isUdtVariable = /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    };
    /**
     * 设置值到UIState
     * @todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     */
    /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    BefVariableManager.prototype.setValueToUIState = /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    function (mapping, value) {
        /** @type {?} */
        var uiState = this.getRootUIState();
        uiState[mapping] = value;
    };
    /** @nocollapse */
    BefVariableManager.ctorParameters = function () { return [
        { type: AppContext },
        { type: undefined },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return BefVariableManager;
}());
if (false) {
    /**
     * 变量元数据
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariableMap;
    /**
     * 设置值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.innerValueMap;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.appContext;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariables;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.injector;
}
export { BefVariableManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX3ZhcmlhYmxlX21hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2JlZi8iLCJzb3VyY2VzIjpbImxpYi9iZWZfdmFyaWFibGVfbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQU1BLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQVcsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQWdCLE1BQU0sU0FBUyxDQUFDO0FBRXpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQU1uRDtJQVlFOztPQUVHO0lBQ0gsNEJBQW9CLFVBQXNCLEVBQVUsV0FBZ0IsRUFBc0IsUUFBa0I7UUFBNUcsaUJBU0M7UUFUbUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFLO1FBQXNCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFFMUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBc0IsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFlLENBQUM7UUFFNUMsWUFBWTtRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsUUFBZ0I7WUFDaEQsS0FBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSwrQ0FBa0I7Ozs7O0lBQXpCLFVBQTBCLFlBQTBCO1FBQXBELGlCQXFCQzs7WUFwQk8sVUFBVSxHQUFHLFlBQVksQ0FB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QUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IFdpdHRcclxuICogQERhdGU6IDIwMTktMDMtMDUgMTk6NTU6NDRcclxuICogQExhc3QgTW9kaWZpZWQgYnk6IFdpdHRcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOS0wMy0xMyAyMDozNToyOVxyXG4gKi9cclxuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgeyBBcHBDb250ZXh0LCBGcmFtZUNvbnRleHQsIFVJU3RhdGUgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IENoYW5nZURldGFpbFR5cGUsIENoYW5nZURldGFpbCB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBOZ1ZhcmlhYmxlIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcclxuaW1wb3J0IHsgQmVmQ2hhbmdlVXRpbCB9IGZyb20gJy4vYmVmX2NoYW5nZV91dGlsJztcclxuaW1wb3J0IHsgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEJl5Y+Y6YeP566h55CG5ZmoXHJcbiAqL1xyXG5jbGFzcyBCZWZWYXJpYWJsZU1hbmFnZXIge1xyXG5cclxuICAvKipcclxuICAgKiDlj5jph4/lhYPmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIG5nVmFyaWFibGVNYXA6IE1hcDxzdHJpbmcsIE5nVmFyaWFibGU+O1xyXG5cclxuICAvKipcclxuICAgKiDorr7nva7lgLxcclxuICAgKi9cclxuICBwcml2YXRlIGlubmVyVmFsdWVNYXA6IE1hcDxzdHJpbmcsIGFueT47XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ29udGV4dDogQXBwQ29udGV4dCwgcHJpdmF0ZSBuZ1ZhcmlhYmxlczogYW55LCBAT3B0aW9uYWwoKSBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG5cclxuICAgIHRoaXMubmdWYXJpYWJsZU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBOZ1ZhcmlhYmxlPigpO1xyXG4gICAgdGhpcy5pbm5lclZhbHVlTWFwID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuXHJcbiAgICAvLyDph43mlrDnu4Tnu4flj5jph4/lhYPmlbDmja5cclxuICAgIE9iamVjdC5rZXlzKG5nVmFyaWFibGVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHRoaXMubmdWYXJpYWJsZU1hcC5zZXQocHJvcE5hbWUsIG5nVmFyaWFibGVzW3Byb3BOYW1lXSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWPmOabtOmbhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYW5kbGVDaGFuZ2VEZXRhaWwoY2hhbmdlRGV0YWlsOiBDaGFuZ2VEZXRhaWwpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNoYW5nZUluZm8gPSBjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mbztcclxuICAgIE9iamVjdC5rZXlzKGNoYW5nZUluZm8pLmZvckVhY2goKHZhck5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAvLyDlj5jph4/lhYPmlbDmja5cclxuICAgICAgY29uc3QgbmdWYXJpYWJsZSA9IHRoaXMubmdWYXJpYWJsZU1hcC5nZXQodmFyTmFtZSk7XHJcbiAgICAgIGlmICghbmdWYXJpYWJsZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBtYXBwaW5nID0gbmdWYXJpYWJsZS5tYXBwaW5nO1xyXG5cclxuICAgICAgLy8g5pu05pawVUlTdGF0ZeWPmOabtFxyXG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGNoYW5nZUluZm9bdmFyTmFtZV07XHJcbiAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5pbm5lclZhbHVlTWFwLmdldCh2YXJOYW1lKTtcclxuXHJcbiAgICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgLy8g5pu05paw5YC8XHJcbiAgICAgIHRoaXMuc2V0VmFsdWVUb1VJU3RhdGUobWFwcGluZywgbmV3VmFsdWUpO1xyXG4gICAgICB0aGlzLmlubmVyVmFsdWVNYXAuc2V0KHZhck5hbWUsIG5ld1ZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQnVpbGQgQ2hhbmdlRGV0YWlsIGluc3RhbmNlIGZvciBhbGwgdmFyaWFibGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBidWlsZENoYW5nZURldGFpbCgpOiBDaGFuZ2VEZXRhaWwge1xyXG4gICAgY29uc3QgY2hhbmdlRGV0YWlsID0gQmVmQ2hhbmdlVXRpbC5jcmVhdGVFbXB0eShDaGFuZ2VEZXRhaWxUeXBlLk1vZGlmeSk7XHJcbiAgICB0aGlzLm5nVmFyaWFibGVNYXAuZm9yRWFjaCgobmdWYXJpYWJsZTogTmdWYXJpYWJsZSwgdmFyTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1hcHBpbmcgPSBuZ1ZhcmlhYmxlLm1hcHBpbmc7XHJcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5nZXRWYWx1ZUZyb21VSVN0YXRlKG1hcHBpbmcpO1xyXG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuaW5uZXJWYWx1ZU1hcC5nZXQodmFyTmFtZSk7XHJcbiAgICAgIGlmICh0aGlzLmlzVmFsdWVFcXVhbChuZXdWYWx1ZSwgb2xkVmFsdWUpID09PSBmYWxzZSkge1xyXG4gICAgICAgIC8vIOS4jea4hemZpOWPmOabtO+8jOivt+axguaIkOWKn+WQjua4hemZpOWPmOabtFxyXG4gICAgICAgIC8vIHRoaXMuaW5uZXJWYWx1ZU1hcC5zZXQodmFyTmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgICAgIHRoaXMuYXBwZW5kVG9DaGFuZ2VJbmZvKGNoYW5nZURldGFpbCwgdmFyTmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoT2JqZWN0LmtleXMoY2hhbmdlRGV0YWlsLkNoYW5nZUluZm8pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hhbmdlRGV0YWlsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYXIgdmFyaWFibGUgdmFsdWVzIGNhY2hlZCBpbiB0aGUgaW5uZXJWYWx1ZU1hcCBwcm9wZXJ0eS5cclxuICAgKi9cclxuICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICB0aGlzLmlubmVyVmFsdWVNYXAuY2xlYXIoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5riF56m6dm/lj5jph4/lj5jmm7Tpm4ZcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXJDaGFuZ2VzKGNoYW5nZURldGFpbDogQ2hhbmdlRGV0YWlsKSB7XHJcbiAgICBpZiAoIWNoYW5nZURldGFpbCB8fCBPYmplY3Qua2V5cyhjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mbykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIE9iamVjdC5rZXlzKGNoYW5nZURldGFpbC5DaGFuZ2VJbmZvKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ1ZhcmlhYmxlOiBOZ1ZhcmlhYmxlID0gdGhpcy5uZ1ZhcmlhYmxlTWFwLmdldChrZXkpO1xyXG4gICAgICBpZiAoIW5nVmFyaWFibGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgbWFwcGluZyA9IG5nVmFyaWFibGUubWFwcGluZztcclxuICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmdldFZhbHVlRnJvbVVJU3RhdGUobWFwcGluZyk7XHJcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZU1hcC5zZXQoa2V5LCBuZXdWYWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogQXBwZW5kIGNoYW5nZWQgdmFyaWFibGUgdG8gQ2hhbmdlRGV0YWlsIGluc3RhbmNlLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXBwZW5kVG9DaGFuZ2VJbmZvKGNoYW5nZURldGFpbDogQ2hhbmdlRGV0YWlsLCB2YXJOYW1lOiBzdHJpbmcsIHZhclZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmlzVWR0VmFyaWFibGUodmFyVmFsdWUpID09PSB0cnVlKSB7XHJcbiAgICAgIGNvbnN0IHVkdFZhckNoYW5nZURldGFpbCA9IEJlZkNoYW5nZVV0aWwuY3JlYXRlRW1wdHkoQ2hhbmdlRGV0YWlsVHlwZS5Nb2RpZnkpO1xyXG4gICAgICB1ZHRWYXJDaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mbyA9IHZhclZhbHVlO1xyXG4gICAgICBjaGFuZ2VEZXRhaWwuQ2hhbmdlSW5mb1t2YXJOYW1lXSA9IHVkdFZhckNoYW5nZURldGFpbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNoYW5nZURldGFpbC5DaGFuZ2VJbmZvW3Zhck5hbWVdID0gdmFyVmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDku45VSVN0YXRl5LiK6I635Y+W5YC8XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZUZyb21VSVN0YXRlKG1hcHBpbmc6IHN0cmluZyk6IGFueSB7XHJcbiAgICBjb25zdCB1aVN0YXRlID0gdGhpcy5nZXRSb290VUlTdGF0ZSgpO1xyXG5cclxuICAgIC8vIOiuoeeul3ZhbHVlXHJcbiAgICBjb25zdCBtYXBwaW5nQXJyYXkgPSBtYXBwaW5nLnNwbGl0KCcuJyk7XHJcbiAgICBjb25zdCB2YWx1ZSA9IG1hcHBpbmdBcnJheS5yZWR1Y2UoKGFjY3VtdWxhdG9yOiBhbnksIGN1cnJlbnRWYWx1ZTogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvciA/IGFjY3VtdWxhdG9yW2N1cnJlbnRWYWx1ZV0gOiBudWxsO1xyXG4gICAgfSwgdWlTdGF0ZSk7XHJcblxyXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICByZXR1cm4gZm9ybWF0KHZhbHVlLCAneXl5eS1NTS1kZCBISDptbTpzcycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5qC557uE5Lu25LiK55qEVUlTdGF0ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0Um9vdFVJU3RhdGUoKTogVUlTdGF0ZSB7XHJcblxyXG4gICAgbGV0IHJvb3RGcmFtZUNvbnRleHQgPSB0aGlzLmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRSb290RnJhbWVDb250ZXh0KCk7XHJcbiAgICBpZiAodGhpcy5pbmplY3Rvcikge1xyXG4gICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxGcmFtZUNvbnRleHQ+KEZyYW1lQ29udGV4dCwgbnVsbCk7XHJcbiAgICAgIGlmIChmcmFtZUNvbnRleHQpIHtcclxuICAgICAgICBjb25zdCB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dCA9IGZyYW1lQ29udGV4dC5nZXRWaXJ0dWFsUm9vdEZyYW1lQ29udGV4dCgpO1xyXG4gICAgICAgIHJvb3RGcmFtZUNvbnRleHQgPSB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dCB8fCByb290RnJhbWVDb250ZXh0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXJvb3RGcmFtZUNvbnRleHQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJvb3RGcmFtZUNvbnRleHQudWlTdGF0ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWAvOavlOi+g1xyXG4gICAqIEB0b2RvIOS4tOaXtumHh+eUqOi/meenjeaWueW8j1xyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNWYWx1ZUVxdWFsKHNyY1ZhbHVlOiBhbnksIGRzdFZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzcmNWYWx1ZSkgPT09IEpTT04uc3RyaW5naWZ5KGRzdFZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHRoZSBvYmplY3QgaXMgYSBwbGFpbiBvYmplY3RcclxuICAgKi9cclxuICBwcml2YXRlIGlzVWR0VmFyaWFibGUob2JqOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBvYmogJiYgb2JqLmNvbnN0cnVjdG9yICYmXHJcbiAgICAgIG9iai50b1N0cmluZygpID09PSAnW29iamVjdCBPYmplY3RdJyAmJlxyXG4gICAgICBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572u5YC85YiwVUlTdGF0ZVxyXG4gICAqIEB0b2Rv77yaXHJcbiAgICogMeOAgeacjeWKoeWZqOerr+S4jeaUr+aMge+8m1xyXG4gICAqIDLjgIHml6XmnJ/nsbvlnovlpITnkIbmlrnmoYjlvoXlrprjgIJcclxuICAgKi9cclxuICBwcml2YXRlIHNldFZhbHVlVG9VSVN0YXRlKG1hcHBpbmc6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgY29uc3QgdWlTdGF0ZSA9IHRoaXMuZ2V0Um9vdFVJU3RhdGUoKTtcclxuICAgIHVpU3RhdGVbbWFwcGluZ10gPSB2YWx1ZTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQmVmVmFyaWFibGVNYW5hZ2VyIH07XHJcbiJdfQ==