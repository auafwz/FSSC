/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-31 09:11:02
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, ViewContainerRef, Injector, Inject, forwardRef, Renderer2 } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ColumnFormatService } from '@farris/ui-common/column';
import { Utils } from '../../utils/utils';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridRowDirective } from './datagrid-row.directive';
import { GridCellEditorDirective } from '../editors/cell-editor.directive';
import { DatagridService } from '../../services/datagrid.service';
import { SafePipe } from './../../utils/safe.pipe';
import { TR_PREFIX } from '../../types/constant';
// <ng-container *ngIf="!isEditing && !column.template">
//     <ng-container *ngIf="column.formatter">
//         <span *ngIf="cellFormatterIsFn" [innerHtml]=" column | formatCellData: rowData | safe: 'html'"></span>
//         <span *ngIf="!cellFormatterIsFn">{{  column | formatCellData: rowData }}</span>
//     </ng-container>
//     <span *ngIf="!column.formatter" [class.grid-cell-nowrap]="dg.nowrap" [class.grid-cell-wrap]="!dg.nowrap">{{  column | formatCellData: rowData }}</span>
// </ng-container>
// <span *ngIf="!isEditing && !column.template" cell-content [class.grid-cell-nowrap]="dg.nowrap" [class.grid-cell-wrap]="!dg.nowrap"
//     [rowData]="rowData" [column]="column" [nowrap]="dg.nowrap"></span>
var DatagridCellComponent = /** @class */ (function () {
    function DatagridCellComponent(dg, dr, el, cd, injector, colFormatSer, domSanitizer) {
        var _this = this;
        this.dg = dg;
        this.dr = dr;
        this.el = el;
        this.cd = cd;
        this.injector = injector;
        this.colFormatSer = colFormatSer;
        this.domSanitizer = domSanitizer;
        this.cls = '';
        this.lastColumn = false;
        // @ViewChild('celltip') celltip: DatagridCellTooltipDirective;
        this._isEditing = false;
        this.controlHeight = 'auto';
        this.isSelected = false;
        this._cellEditorTemplate = null;
        this.cellClick = new EventEmitter();
        this.cellDblClick = new EventEmitter();
        this.cellContext = {};
        this.cellStyler = {};
        this.safePipe = null;
        this.ro = null;
        this.canEdit = (/**
         * @return {?}
         */
        function () { return _this.dg.editable && _this.dg.editMode === 'cell' && _this.column.editor; });
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.safePipe = new SafePipe(this.domSanitizer);
        this.render = this.injector.get(Renderer2);
        // this.cellSubscription = this.dfs.currentCell$.pipe(
        //     filter((cell: CellInfo) => {
        //         return cell && this.column.editor && cell.rowIndex === this.rowIndex && cell.field === this.column.field;
        //     })
        // ).subscribe((cell: CellInfo) => {
        //     if (cell && this.column.editor) {
        //         this.isEditing = cell.isEditing;
        //         cell.cellRef = this;
        //         cell.column = this.column;
        //         if (!this.cd['destroyed']) {
        //             this.cd.detectChanges();
        //         }
        //     }
        // });
    }
    Object.defineProperty(DatagridCellComponent.prototype, "isEditing", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isEditing;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            if (this._isEditing === v) {
                return;
            }
            this._isEditing = v;
            if (v) {
                if (!this.dr.form || !Object.keys(this.dr.form.controls).length) {
                    this.dr.initFormControl();
                }
                if (this.column.editorTemplate && this.column.editorTemplate.elementRef) {
                    this.cellContext.formGroup = this.dr.form;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.el) {
                            /** @type {?} */
                            var input = _this.el.nativeElement.querySelector('input,textarea');
                            if (input) {
                                input.focus();
                            }
                        }
                    }), 10);
                }
            }
            if (this.column.editor && this.column.editor.type === 'textarea') {
                if (!this.dg.nowrap) {
                    this.controlHeight = this.dr.el.nativeElement.offsetHeight;
                }
            }
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "cellEditorTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._cellEditorTemplate;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._cellEditorTemplate = v;
            if (v) {
                this.dg.dgs.cellEditorCreated.emit({ editorRef: null, column: this.column, cellEditorRef: null, templateRef: v });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.rowData && this.column && this.column.field) {
                return Utils.getValue(this.column.field, this.rowData);
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "formControl", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.cellEditor) {
                return this.cellEditor.componentRef.instance.formControl;
            }
            else if (this.column.editorTemplate) {
                return this.dr.form.get(this.column.field);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "verticalAlign", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var va = 'center';
            switch (this.column.valign) {
                case 'top':
                    va = 'flex-start';
                    break;
                case 'bottom':
                    va = 'flex-end';
                    break;
                default:
                    va = 'center';
                    break;
            }
            return va;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "horizontalAlign", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ha = 'flex-start';
            if (this.column.align === 'right') {
                ha = 'flex-end';
            }
            else if (this.column.align === 'center') {
                ha = 'center';
            }
            return ha;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "cellStyle", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var h = this.dg.nowrap ? '' : '100%';
            /** @type {?} */
            var w = this.lastColumn ? (this.column.width - 6) + 'px' : '100%';
            /** @type {?} */
            var style = {
                // height: h,
                width: w
            };
            if (!this.isEditing) {
                return Object.assign(style, {
                    'align-items': this.verticalAlign,
                    'justify-content': this.horizontalAlign
                });
            }
            else {
                return Object.assign(style, {
                    'justify-content': this.horizontalAlign
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "cellFormatterIsFn", {
        get: /**
         * @return {?}
         */
        function () {
            return typeof this.column.formatter === 'function' || this.column.formatter.type === 'boolean';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initCellTemplateContext();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridCellComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.initCellTemplateContext();
            this.buildCustomCellStyle();
            if (this.formControl) {
                /** @type {?} */
                var val = Utils.getValue(this.column.field, this.rowData);
                this.formControl.setValue(val);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellComponent.prototype.initCellTemplateContext = /**
     * @private
     * @return {?}
     */
    function () {
        this.cellContext = {
            field: this.column.field,
            rowIndex: this.rowIndex,
            rowData: this.rowData,
            column: this.column,
            instance: this,
            formGroup: this.dr.form,
            tools: {
                utils: this.dg.commonUtils,
                format: this.dg.colFormatSer,
                number: this.dg.colFormatSer['numberhelper'],
                date: this.dg.colFormatSer['datehelper']
            },
        };
    };
    /**
     * @return {?}
     */
    DatagridCellComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.buildCustomCellStyle();
    };
    /**
     * @return {?}
     */
    DatagridCellComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cellSubscription) {
            this.cellSubscription.unsubscribe();
            this.cellSubscription = null;
        }
        if (this.rowUpdateSubscription) {
            this.rowUpdateSubscription.unsubscribe();
            this.rowUpdateSubscription = null;
        }
    };
    /**
     * @private
     * @param {?=} rowData
     * @return {?}
     */
    DatagridCellComponent.prototype.buildCustomCellStyle = /**
     * @private
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData === void 0) { rowData = null; }
        /** @type {?} */
        var td = this.el.nativeElement.parentNode;
        if (!td.id) {
            td.id = TR_PREFIX + this.dr.rowId + '_' + this.rowIndex + '-' + this.column.field;
        }
        td.id = td.id.replace(/\./g, '_');
        if (this.column.styler) {
            /** @type {?} */
            var _rd = rowData || this.rowData;
            /** @type {?} */
            var cs = this.column.styler(_rd[this.column.field], _rd, this.rowIndex);
            if (cs && Object.keys(cs).length) {
                this.dg.renderCustomStyle(cs, td);
            }
        }
        else {
            this.dg.dgs.removeCssRule('#' + td.id);
        }
    };
    /**
     * @param {?=} val
     * @return {?}
     */
    DatagridCellComponent.prototype.updateValue = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        var _this = this;
        var _a;
        if (this.dr.form) {
            // this.rowData = Object.assign(this.rowData, this.dr.form.value);
            Utils.setValue(this.column.field, val, this.rowData);
            // this.rowData = {...this.rowData};
            /** @type {?} */
            var rowid_1 = this.rowData[this.dg.idField];
            /** @type {?} */
            var item = this.dg.data.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.dg.idField] === rowid_1; }));
            if (item) {
                Utils.setValue(this.column.field, val, item);
            }
            this.dfs.updateCheckedData(rowid_1, (_a = {}, _a[this.column.field] = val, _a));
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        }
    };
    DatagridCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-body-cell',
                    template: "\n    <div\n     [attr.cell-tooltip]=\"column.showTips && !isEditing\" [attr.tipMode]=\" column.tipMode || 'auto'\"\n     [attr.message]=\"column | tipmsg: rowData\"  [attr.position]=\" column?.tipOptions?.position || 'top-left'\"\n     [attr.tipWidth]=\"column?.tipOptions?.width\" [attr.tipHeight]=\"column?.tipOptions?.height\"\n     class=\"f-datagrid-cell-content\" #cellContainer\n     [ngStyle]=\"cellStyle\"\n    >\n        <ng-container *ngIf=\"!isEditing && !column.template\">\n            <ng-container *ngIf=\"column.formatter\">\n                <span class=\"cell-text-box\" *ngIf=\"cellFormatterIsFn\" [innerHtml]=\" column | formatCellData: rowData | safe: 'html'\"></span>\n                <span class=\"cell-text-box\" *ngIf=\"!cellFormatterIsFn\">{{  column | formatCellData: rowData }}</span>\n            </ng-container>\n            <span *ngIf=\"!column.formatter\" class=\"cell-text-box\" [class.grid-cell-nowrap]=\"dg.nowrap\" [class.grid-cell-wrap]=\"!dg.nowrap\">{{  column | formatCellData: rowData }}</span>\n        </ng-container>\n\n        <ng-container #cellTemplate *ngIf=\"!isEditing && column.template\" [ngTemplateOutlet]=\"column.template\" [ngTemplateOutletContext]=\"{$implicit: cellContext}\"></ng-container>\n        <ng-container #cellEditorTemplate *ngIf=\"isEditing && column.editorTemplate\" [ngTemplateOutlet]=\"column.editorTemplate\" [ngTemplateOutletContext]=\"{$implicit: cellContext}\"></ng-container>\n        <ng-container #editorTemplate *ngIf=\"isEditing && !column.editorTemplate\" cell-editor [height]=\"controlHeight\" [rowData]=\"rowData\" [value]=\"value\" [column]=\"column\" [group]=\"dr.form\"></ng-container>\n    </div>\n    ",
                    changeDetection: ChangeDetectionStrategy.Default
                }] }
    ];
    /** @nocollapse */
    DatagridCellComponent.ctorParameters = function () { return [
        { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridComponent; })),] }] },
        { type: DatagridRowDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridRowDirective; })),] }] },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: Injector },
        { type: ColumnFormatService },
        { type: DomSanitizer }
    ]; };
    DatagridCellComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        cls: [{ type: Input }],
        column: [{ type: Input }],
        rowData: [{ type: Input }],
        rowIndex: [{ type: Input }],
        lastColumn: [{ type: Input }],
        isEditing: [{ type: Input }],
        isSelected: [{ type: Input }],
        cellContainer: [{ type: ViewChild, args: ['cellContainer',] }],
        cellTemplateVcr: [{ type: ViewChild, args: ['cellTemplate', { read: ViewContainerRef },] }],
        cellEditorTemplate: [{ type: ViewChild, args: ['cellEditorTemplate', { read: ViewContainerRef },] }],
        cellEditor: [{ type: ViewChild, args: [GridCellEditorDirective,] }],
        cellClick: [{ type: Output }],
        cellDblClick: [{ type: Output }]
    };
    return DatagridCellComponent;
}());
export { DatagridCellComponent };
if (false) {
    /** @type {?} */
    DatagridCellComponent.prototype.width;
    /** @type {?} */
    DatagridCellComponent.prototype.height;
    /** @type {?} */
    DatagridCellComponent.prototype.cls;
    /** @type {?} */
    DatagridCellComponent.prototype.column;
    /** @type {?} */
    DatagridCellComponent.prototype.rowData;
    /** @type {?} */
    DatagridCellComponent.prototype.rowIndex;
    /** @type {?} */
    DatagridCellComponent.prototype.lastColumn;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype._isEditing;
    /** @type {?} */
    DatagridCellComponent.prototype.controlHeight;
    /** @type {?} */
    DatagridCellComponent.prototype.isSelected;
    /** @type {?} */
    DatagridCellComponent.prototype.cellContainer;
    /** @type {?} */
    DatagridCellComponent.prototype.cellTemplateVcr;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype._cellEditorTemplate;
    /** @type {?} */
    DatagridCellComponent.prototype.cellEditor;
    /** @type {?} */
    DatagridCellComponent.prototype.cellClick;
    /** @type {?} */
    DatagridCellComponent.prototype.cellDblClick;
    /** @type {?} */
    DatagridCellComponent.prototype.cellContext;
    /** @type {?} */
    DatagridCellComponent.prototype.cellStyler;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.cellSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.rowUpdateSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.safePipe;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.ro;
    /** @type {?} */
    DatagridCellComponent.prototype.canEdit;
    /** @type {?} */
    DatagridCellComponent.prototype.dg;
    /** @type {?} */
    DatagridCellComponent.prototype.dr;
    /** @type {?} */
    DatagridCellComponent.prototype.el;
    /** @type {?} */
    DatagridCellComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.injector;
    /** @type {?} */
    DatagridCellComponent.prototype.colFormatSer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,