/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { FarrisContextMenuComponent } from './context-menu.component';
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
export class FarrisContextMenuService {
    /**
     * @param {?} cfr
     * @param {?} injector
     */
    constructor(cfr, injector) {
        this.cfr = cfr;
        this.injector = injector;
        this.overlayEle = null;
        this.contextMenuDom = null;
        this.contextMenuRefs = {};
        this.activeDom = null;
        this.showContextMenu = new Subject();
    }
    /**
     * @private
     * @param {?=} cls
     * @param {?=} opts
     * @return {?}
     */
    createOverlay(cls, opts) {
        /** @type {?} */
        let overlayEle = document.querySelector('.f-context-menu-overlay');
        if (!overlayEle) {
            overlayEle = document.createElement('div');
            overlayEle.classList.add('f-context-menu-overlay', cls);
            document.body.appendChild(overlayEle);
            if (opts.highlight) {
                this.activeDom = document.createElement('div');
                this.activeDom.classList.add('f-context-target-focus');
                overlayEle.appendChild(this.activeDom);
            }
            overlayEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (((/** @type {?} */ (e.target))).className.indexOf('f-context-menu-overlay') > -1) {
                    this.hide();
                }
            }));
            overlayEle.addEventListener('contextmenu', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.hide();
            }));
        }
        return overlayEle;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    show(options) {
        const { menuItems, event, id, activeDom, context, menuClass, target, activeWidth } = options;
        /** @type {?} */
        let cmpRef = null;
        if (!this.contextMenuRefs) {
            this.contextMenuRefs = {};
        }
        if (!this.contextMenuRefs[id]) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(FarrisContextMenuComponent);
            cmpRef = cmpFactory.create(this.injector);
            cmpRef.instance.menuItems = menuItems;
            cmpRef.instance.id = id;
            cmpRef.instance.left = event.pageX;
            cmpRef.instance.top = event.pageY;
            this.contextMenuDom = activeDom;
            this.contextMenuRefs[cmpRef.instance.id] = cmpRef;
        }
        else {
            cmpRef = this.contextMenuRefs[id];
        }
        cmpRef.instance.context = context;
        this.overlayEle = this.createOverlay(menuClass, options);
        this.overlayEle.appendChild(cmpRef.location.nativeElement);
        if (this.activeDom) {
            // const w = target.offsetWidth > this.contextMenuDom.offsetWidth ? this.contextMenuDom.offsetWidth : target.offsetWidth;
            /** @type {?} */
            const w = activeWidth || this.contextMenuDom.offsetWidth;
            this.activeDom.style.width = w + 'px';
            this.activeDom.style.height = this.contextMenuDom.offsetHeight + 'px';
            this.activeDom.style.left = target.getBoundingClientRect().left + 'px';
            this.activeDom.style.top = this.contextMenuDom.getBoundingClientRect().top + 'px';
            this.activeDom.style.display = 'block';
        }
        cmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        const menuPanelDom = cmpRef.instance.menuPanel.nativeElement;
        /** @type {?} */
        const menuPanelHeight = menuPanelDom.offsetHeight;
        if (window.innerHeight - event.pageY < menuPanelHeight) {
            cmpRef.instance.top = event.pageY - menuPanelHeight;
        }
        if (window.innerWidth - event.pageX < menuPanelDom.offsetWidth) {
            cmpRef.instance.left = event.pageX - menuPanelDom.offsetWidth;
        }
        cmpRef.changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.overlayEle) {
            this.overlayEle.style.display = 'none';
            if (this.contextMenuRefs) {
                for (const key of Object.keys(this.contextMenuRefs)) {
                    this.contextMenuRefs[key].hostView.destroy();
                }
                this.contextMenuRefs = null;
            }
            // 移除DOM 样式
            if (this.contextMenuDom) {
                this.contextMenuDom.className = this.contextMenuDom.className.replace('f-context-menu-active', '');
            }
            this.overlayEle.remove();
            this.overlayEle = null;
        }
    }
}
FarrisContextMenuService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FarrisContextMenuService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.overlayEle;
    /** @type {?} */
    FarrisContextMenuService.prototype.contextMenuDom;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.contextMenuRefs;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.activeDom;
    /** @type {?} */
    FarrisContextMenuService.prototype.showContextMenu;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,