/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, Input, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { LocaleService } from '@farris/ui-locale';
import { EventManager } from '@angular/platform-browser';
export class TextareaWordcountDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} injector
     */
    constructor(el, render, injector) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.useWordCount = true;
        /**
         * 统计字数的方式； surplus 剩余可输入字数; length: 当前已输入字数；
         *
         * 默认为 surplus
         */
        this.countType = 'surplus';
        this.onlyShowInDialog = false;
        this.wordCountElement = null;
        // 当前字数
        this.currentLengthElement = null;
        this.onInput = null;
        this.eventManager = this.injector.get(EventManager);
        this.localeSer = this.injector.get(LocaleService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngControl = this.injector.get(NgControl, null);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initWordCount();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.useWordCount && !changes.useWordCount.isFirstChange()) {
            if (this.useWordCount) {
                this.initWordCount();
            }
            else {
                this.destroy();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        if (this.onInput) {
            this.onInput();
        }
        if (this.wordCountElement) {
            this.wordCountElement.remove();
        }
    }
    /**
     * @return {?}
     */
    initWordCount() {
        if (this.useWordCount && !this.onlyShowInDialog) {
            this.createWordCountElement();
        }
    }
    /**
     * @private
     * @return {?}
     */
    createWordCountID() {
        /** @type {?} */
        const tagName = this.el.nativeElement.tagName;
        if (this.ngControl) {
            /** @type {?} */
            const ctrlName = this.ngControl.name;
            return `${tagName}_WORDCOUNT_${ctrlName}`;
        }
        else {
            if (this.el.nativeElement.id) {
                return `${tagName}_WORDCOUNT_${this.el.nativeElement.id}`;
            }
        }
        return '';
    }
    /**
     * @private
     * @return {?}
     */
    createWordCountElement() {
        /** @type {?} */
        const max = this.el.nativeElement.maxLength;
        if (!max || max < 0) {
            console.info('未设置最大字符数，计数功能失效。');
            return;
        }
        /** @type {?} */
        const wordCountSPAN = this.render.createElement('span');
        wordCountSPAN.className = 'textarea-wordcount';
        /** @type {?} */
        const id = this.createWordCountID();
        if (id) {
            wordCountSPAN.id = id;
        }
        this.render.setStyle(wordCountSPAN, 'position', 'absolute');
        this.render.setStyle(wordCountSPAN, 'bottom', '10px');
        this.render.setStyle(wordCountSPAN, 'right', '20px');
        this.render.setStyle(wordCountSPAN, 'cursor', 'pointer');
        this.el.nativeElement.after(wordCountSPAN);
        this.wordCountElement = wordCountSPAN;
        /** @type {?} */
        const currentLengthSPAN = this.render.createElement('span');
        wordCountSPAN.appendChild(currentLengthSPAN);
        this.currentLengthElement = currentLengthSPAN;
        currentLengthSPAN.after(` / ${max}`);
        this.updateWordsCount();
        this.onInput = this.render.listen(this.el.nativeElement, 'input', (/**
         * @return {?}
         */
        () => {
            // value.replace(/\n|\r/gi, '') // 移除换行符
            this.updateWordsCount();
        }));
    }
    /**
     * @return {?}
     */
    updateWordsCount() {
        /** @type {?} */
        const max = this.el.nativeElement.maxLength;
        /** @type {?} */
        const val = this.countType === 'surplus' ? max - this.el.nativeElement.value.length : this.el.nativeElement.value.length;
        /** @type {?} */
        const tip = 'messager.prompt.tips.' + this.countType;
        this.currentLengthElement.innerText = val;
        this.wordCountElement.title = this.localeSer.getValue(tip).replace('{0}', val);
    }
}
TextareaWordcountDirective.decorators = [
    { type: Directive, args: [{
                selector: '[word-count]',
                exportAs: 'WordCountRef'
            },] }
];
/** @nocollapse */
TextareaWordcountDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
TextareaWordcountDirective.propDecorators = {
    useWordCount: [{ type: Input, args: ['word-count',] }],
    countType: [{ type: Input }],
    onlyShowInDialog: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextareaWordcountDirective.prototype.useWordCount;
    /**
     * 统计字数的方式； surplus 剩余可输入字数; length: 当前已输入字数；
     *
     * 默认为 surplus
     * @type {?}
     */
    TextareaWordcountDirective.prototype.countType;
    /** @type {?} */
    TextareaWordcountDirective.prototype.onlyShowInDialog;
    /** @type {?} */
    TextareaWordcountDirective.prototype.wordCountElement;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.currentLengthElement;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.onInput;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,