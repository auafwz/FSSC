{"version":3,"file":"farris-external-integration.js.map","sources":["ng://@farris/external-integration/lib/component/external-integration/external-integration-service.ts","ng://@farris/external-integration/lib/component/external-integration/external-integration.component.ts","ng://@farris/external-integration/lib/component/external-integration/grid-external-integration.component.ts","ng://@farris/external-integration/lib/directives/ext-integration-data-mapping.directive.ts","ng://@farris/external-integration/lib/external-integration.module.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable, Output, EventEmitter } from \"@angular/core\";\r\nimport { VariableParseService, ViewModel } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class ExternalIntegrationService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private variableParseService: VariableParseService,\r\n    private vm: ViewModel\r\n  ) {}\r\n  @Output() sapData = new EventEmitter();\r\n\r\n  sapUrl =\r\n    \"http://\" +\r\n    location.host +\r\n    \"/api/runtime/icc/v1.0/externalServiceOpenApi/invokeService\";\r\n\r\n  /**\r\n   * 调用外部服务\r\n   */\r\n  queryExtIntegrationService(externalParams, serviceCode) {\r\n    let req = this.assembleSapRequest(externalParams, serviceCode);\r\n    this.http.post(this.sapUrl, req).subscribe(\r\n      response => {\r\n        let respObj = Object.create(response);\r\n        if (!respObj || !respObj.success) {\r\n          return;\r\n        }\r\n        let resp = Object.create(respObj);\r\n        let sapData = resp.data;\r\n        this.sapData.emit(sapData);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        this.sapData.emit({});\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 组装sap api入参\r\n   */\r\n  private assembleSapRequest(externalParams, serviceCode) {\r\n    const params = JSON.parse(JSON.stringify(externalParams));\r\n    let requestParam = {\r\n      code: serviceCode,\r\n      params: this.variableParseService.parse(params, this.vm.frameContext),\r\n    };\r\n    return requestParam;\r\n  }\r\n}\r\n","import {\n  AfterViewInit,\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Injector,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewContainerRef\n} from \"@angular/core\";\nimport { DialogComponent } from \"@farris/ui-dialog\";\nimport { VariableParseService, ViewModel } from \"@farris/devkit\";\nimport { ExternalIntegrationService } from \"./external-integration-service\";\nimport { DatagridComponent } from \"@farris/ui-datagrid\";\nimport {\n  ControlValueAccessor,\n  NgControl,\n  NG_VALUE_ACCESSOR\n} from \"@angular/forms\";\nimport { TableColumn, TableInfo } from \"./external-integration-displaytype\";\nimport { Observable, of } from \"rxjs\";\nimport { ListViewComponent } from \"@farris/ui-list-view\";\n\n@Component({\n  selector: \"web-external-integration\",\n  templateUrl: \"./external-integration.component.html\",\n  styleUrls: [\"./external-integration.component.scss\"],\n  providers: [\n    ExternalIntegrationService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ExternalIntegrationComponent),\n      multi: true\n    }\n  ]\n})\nexport class ExternalIntegrationComponent\n  implements OnInit, OnChanges, AfterViewInit, OnDestroy, ControlValueAccessor {\n  /** 模态框宽 */\n  @Input() width: number = 960;\n  /** 模态框高 */\n  @Input() height: number = 577;\n  /** 服务名 */\n  @Input(\"serviceCode\") serviceCode: string;\n  /** 外部服务请求入参,表达式 */\n  @Input(\"externalParams\") externalParams: any;\n  /** form:主表回填形式,grid：子表回填形式 */\n  @Input(\"mappingType\") mappingType: string;\n  /** 映射关系 */\n  @Input(\"mapFields\") myField: any;\n  @Input() fieldText: string = \"\";\n  /** sap出参表信息描述 */\n  @Input(\"extTableSchemas\") extTableSchemas: any;\n\n  @Input() placeholder = \"请选择\";\n  // 是否只读\n  @Input() readonly = false;\n  // 请求前事件\n  @Input() beforeSapSrvc: Observable<any>;\n\n  /** 内容中留白边距 */\n  containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };\n  /** 自定义数据 */\n  @Input() customData: any;\n  /** 指令回填sap数据 */\n  @Output() selectSapData = new EventEmitter();\n  @Output() afterOnblur = new EventEmitter();\n  @ViewChild(\"dialog\") dialog: DialogComponent;\n  @ViewChild(\"input\") input: ElementRef<any>;\n  @ViewChild(\"girdView\", { read: ViewContainerRef }) girdView: ViewContainerRef;\n  @ViewChild(\"farrisListView\") farrisListView: ListViewComponent;\n  componentRef: ComponentRef<DatagridComponent>;\n\n  /** 多表数据集合 */\n  tableData: TableInfo[] = [];\n  /** 模态框导航栏当前选中项 */\n  currentLink: any = {};\n  /** 模态框确定按钮是否可用 */\n  ensureFlag: boolean = true;\n\n  ngControl: NgControl;\n\n  containerStyle = {\n    marginLeft: this.containerMargin.left + \"px\",\n    marginRight: this.containerMargin.right + \"px\",\n    marginTop: this.containerMargin.top + \"px\",\n    marginBottom: this.containerMargin.bottom + \"px\"\n  };\n\n  constructor(\n    @Optional() private vm: ViewModel,\n    public el: ElementRef,\n    private extIntgrtnSrvc: ExternalIntegrationService,\n    private variableParseService: VariableParseService,\n    private resolver: ComponentFactoryResolver,\n    private inj: Injector\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {}\n\n  fieldTextChange() {\n    const pathArr = this.getBindingPathArray();\n    this.vm.bindingData.setValue(\n      pathArr.concat(this.ngControl.name),\n      this.fieldText,\n      true,\n      true\n    );\n  }\n\n  ngAfterViewInit(): void {}\n  ngOnDestroy(): void {}\n  writeValue(obj: any): void {\n    this.fieldText = obj;\n  }\n  registerOnChange(fn: any): void {}\n  registerOnTouched(fn: any): void {}\n  setDisabledState?(isDisabled: boolean): void {}\n\n  ngOnInit() {\n    this.ngControl = this.inj.get(NgControl);\n    // 卡片绑定onblur事件，表格再grid-external-integration中绑定onblur事件\n    if (this.mappingType != \"grid\") {\n      this.input.nativeElement.onblur = () => {\n        this.callSapService();\n      };\n    }\n\n    this.extIntgrtnSrvc.sapData.subscribe((data: any) => {\n      this.sapDataHandle(data);\n    });\n  }\n\n  /**\n   * 打开模态框\n   * @returns\n   */\n  showDialog(): any {\n    this.farrisListView.listClick.emit({\n      data: [this.tableData[0]],\n      index: 0,\n      checkChangeEvent: false\n    });\n    this.farrisListView.clickItem = this.tableData[0];\n    this.dialog.show();\n    return false;\n  }\n\n  /**\n   * 调用sap外部服务，出参在ngOninit监听\n   */\n  callSapService() {\n    this.fieldTextChange();\n    this.extIntgrtnSrvc.queryExtIntegrationService(\n      this.externalParams,\n      this.serviceCode\n    );\n  }\n\n  /**\n   * 处理sap出参\n   * @param data sap出参\n   */\n  sapDataHandle(data) {\n    if (!data) {\n      return;\n    }\n    let tableNameList = Object.keys(data);\n    let mapTableList = this.getTableListFromMapFields();\n    // 取交集\n    tableNameList = tableNameList.filter(item => {\n      return mapTableList.indexOf(item) != -1;\n    });\n    // 多表场景\n    if (tableNameList.length > 1) {\n      // 校验是否弹出模态框\n      let openDialogFlag = this.checkMultiTableData(data, tableNameList);\n      if (openDialogFlag == \"open\") {\n        // 组装模态框数据\n        this.assembleTableData(data);\n        this.showDialog();\n      } else if (openDialogFlag == \"backfill\") {\n        // 多表，每个表只有一条数据\n        let backfillData: any = {};\n        tableNameList.forEach(tableName => {\n          Object.assign(\n            backfillData,\n            this.assembleSapData(tableName, data[tableName][0])\n          );\n        });\n        this.sendSapData(backfillData);\n      } else {\n        // 多表无数据\n        this.sendSapData();\n      }\n    } else if (tableNameList.length == 1) {\n      let tableName = tableNameList[0];\n      let sapDataLength = (data[tableName] || []).length;\n      if (sapDataLength > 0) {\n        if (sapDataLength == 1) {\n          // 一个表只有一条数据\n          let sapData = this.assembleSapData(tableName, data[tableName][0]);\n          this.sendSapData(sapData);\n        } else if (sapDataLength > 1) {\n          // 一个表有多条数据\n          this.assembleTableData(data);\n          this.showDialog();\n          return;\n        }\n      }\n    } else {\n      // 处理查询异常，editor没有endPending\n      this.sendSapData();\n    }\n  }\n\n  checkMultiTableData(data, tableNameList) {\n    let openDialogFlag = \"\";\n    for (let index = 0; index < tableNameList.length; index++) {\n      let tableName = tableNameList[index];\n      if (data[tableName].length > 1) {\n        openDialogFlag = \"open\";\n        break;\n      } else if (data[tableName].length == 0 && openDialogFlag != \"backfill\") {\n        openDialogFlag = \"none\";\n        continue;\n      }\n      openDialogFlag = \"backfill\";\n    }\n    return openDialogFlag;\n  }\n\n  /**\n   * 组装模态框数据\n   * @param data sap出参\n   */\n  assembleTableData(data) {\n    let tableNameList = Object.keys(data);\n    let mapTableList = this.getTableListFromMapFields();\n    // 取交集\n    mapTableList = mapTableList.filter(item => {\n      return tableNameList.indexOf(item) != -1;\n    });\n    if (mapTableList.length > 0) {\n      // 遍历sap映射表，组装表及对应数据\n      mapTableList.forEach(mapTable => {\n        // 组装模态框中单表数据\n        let tableInfo = this.assembleTableInfo(mapTable, data);\n        if (\n          tableInfo &&\n          Object.keys(tableInfo).length > 0 &&\n          (tableInfo.data || []).length > 0\n        ) {\n          this.tableData.push(tableInfo);\n        }\n      });\n    }\n  }\n\n  getTableListFromMapFields() {\n    // 获取需要回填的表\n    let mapKeyList = Object.keys(this.myField);\n    // 定义sap映射表集合\n    let mapTableList = [];\n    (mapKeyList || []).forEach(mapKey => {\n      // 在映射关系中获取sap出参中的表集合\n      mapTableList.push(mapKey.split(\".\")[0]);\n    });\n    // 去重\n    mapTableList = Array.from(new Set(mapTableList));\n    return mapTableList;\n  }\n\n  /**\n   * 组装模态框中单表数据\n   * @param mapTable 表名\n   * @param data sap出参\n   * @returns 模态框单表数据对象\n   */\n  assembleTableInfo(mapTable, data) {\n    // 模态框单表数据对象\n    let tableInfo: TableInfo = {\n\n    };\n    // 表头集合\n    let tableColumnList = [];\n    // 遍历sap出参表信息，获取表头中文、表名\n    (this.extTableSchemas || []).forEach(tableSchema => {\n      if (tableSchema.code == mapTable) {\n        tableInfo.name = tableSchema.name;\n        // 模拟主键，保证farris-grid组件【单选】功能正常\n        let idColumn: TableColumn = {};\n        idColumn.field = \"id\";\n        idColumn.title = \"序号\";\n        tableColumnList.push(idColumn);\n        // 组装表头\n        tableSchema.columns.forEach(column => {\n          let tableColumn: TableColumn = {};\n          tableColumn.field = column.code;\n          tableColumn.title = column.name;\n          tableColumnList.push(tableColumn);\n        });\n        tableInfo.columns = tableColumnList;\n        tableInfo.code = mapTable;\n        // 给表数据增加模拟主键\n        (data[mapTable] || []).forEach((item, index) => {\n          item[\"id\"] = index + 1;\n        });\n        tableInfo.data = data[mapTable];\n      }\n    });\n    return tableInfo;\n  }\n\n  /**\n   * 导航栏点击事件\n   * @param event 导航栏信息\n   * @returns\n   */\n  listClick(event) {\n    let clickData = event.data;\n    if (event.data.disable) {\n      return false;\n    } else {\n      if (typeof this.currentLink[\"data\"] !== \"undefined\") {\n        if (clickData[0].code === this.currentLink[\"data\"][0].code) {\n          return false;\n        } else {\n          this.currentLink = event;\n        }\n      } else {\n        this.currentLink = event;\n      }\n    }\n  }\n\n  /**\n   * 模态框，确定，取消按钮\n   * @param flag ensure:确定按钮，cancel：取消按钮\n   */\n\n  confirm(flag) {\n    // 点击确定按钮\n    if (flag == \"ensure\") {\n      let sapData: any = {};\n      // 遍历模态框表数据，组装回填数据\n      for (let index = 0; index < this.tableData.length; index++) {\n        let tableInfo = this.tableData[index];\n        Object.assign(\n          sapData,\n          this.assembleSapData(tableInfo.code, tableInfo.selectedData.data)\n        );\n      }\n      this.sendSapData(sapData);\n    }\n    // 清空模态框数据\n    this.tableData = [];\n    // 关闭模态框\n    this.dialog.close();\n  }\n\n  beforeClose = () => {\n    this.tableData = [];\n    this.ensureFlag = true;\n    this.sendSapData();\n    return of(true);\n  };\n\n  /**\n   * 选中一行事件\n   * @param selectedRow 选中行数据\n   * @param tableName 当前表格对应表名\n   */\n  selectRowChange(selectedRow, tableName) {\n    this.tableData.forEach(tableInfo => {\n      if (tableInfo.code == tableName) {\n        tableInfo.selectedData = selectedRow;\n      }\n    });\n    this.setEnsureButtonFlag();\n  }\n\n  /**\n   * 取消一行事件\n   * @param selectedRow 被取消行数据\n   * @param tableName 当前表格对应表名\n   */\n  unSelect(selectedRow, tableName) {\n    this.tableData.forEach(tableInfo => {\n      if (tableInfo.code == tableName) {\n        tableInfo.selectedData = null;\n        tableInfo.selectedValue = \"\";\n      }\n    });\n    selectedRow = null;\n    this.setEnsureButtonFlag();\n  }\n\n  /**\n   * 设置模态框确定按钮是否可用\n   */\n  setEnsureButtonFlag() {\n    let flag = false;\n    for (let index = 0; index < this.tableData.length; index++) {\n      let tableInfo = this.tableData[index];\n      if (!tableInfo.selectedData) {\n        flag = true;\n        break;\n      }\n    }\n    this.ensureFlag = flag;\n  }\n\n  /**\n   * 组装sap回填数据\n   * @param tableName 表名\n   * @param tableData 表数据\n   * @returns (表名.表字段名:表数据):Object\n   */\n  assembleSapData(tableName, tableData) {\n    if (!tableName || !tableData) {\n      return;\n    }\n    // sap回填数据\n    let sapData: any = {};\n    // 表字段名集合\n    let tableDataItemKeys = Object.keys(tableData);\n    for (let index = 0; index < tableDataItemKeys.length; index++) {\n      let itemKey = tableDataItemKeys[index];\n      // sap回填数据key= 表名.表字段名\n      let key = tableName + \".\" + itemKey;\n      sapData[key] = tableData[itemKey];\n    }\n    return sapData;\n  }\n\n  /**\n   * 回填sap数据\n   * @param sapData 将要回填的sap数据\n   */\n  private sendSapData(sapData?) {\n    if (sapData) {\n      this.selectSapData.emit(sapData);\n    }\n    // 子表关闭editor状态\n    if (this.mappingType == \"grid\") {\n      this.afterOnblur.emit();\n    }\n  }\n\n  private getBindingPathArray(): any[] {\n    const path = this.vm.bindingPath;\n    if (path) {\n      return path.split(\"/\").filter(n => n !== \"\");\n    }\n    return [];\n  }\n}\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Injector,\r\n  OnInit,\r\n  Renderer2,\r\n  ViewChild,\r\n} from \"@angular/core\";\r\nimport { RuntimeStateService } from \"@farris/ui-common\";\r\nimport { GRID_EDITORS } from \"@farris/ui-datagrid\";\r\nimport { DatagridBaseEditorDirective } from \"@farris/ui-datagrid-editors\";\r\nimport { ExternalIntegrationComponent } from \"./external-integration.component\";\r\n\r\nconst ExtIntgrtnDefautOption = {\r\n  readonly: false, // 是否只读\r\n  placeholder: \"请选择\",\r\n  viewType: \"tag\"\r\n};\r\n\r\n@Component({\r\n  selector: \"grid-external-integration\",\r\n  template: `\r\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n      <web-external-integration\r\n        #extIntgrtn\r\n        style=\"width: 100%\"\r\n        extIntegration-dataMapping\r\n        [placeholder]=\"options.placeholder\"\r\n        [readonly]=\"options.readonly\"\r\n        [mapFields]=\"options.mapFields\"\r\n        [serviceCode] = \"options.serviceCode\"\r\n        [externalParams] = \"options.externalParams\"\r\n        [extTableSchemas] = \"options.extTableSchemas\"\r\n        [formControlName]=\"column.field\"\r\n        [mappingType] = \"'grid'\"\r\n        \r\n      ></web-external-integration>\r\n    </div>\r\n  `,\r\n})\r\nexport class DatagridExtIntgrtnComponent extends DatagridBaseEditorDirective\r\n  implements OnInit, AfterViewInit {\r\n  @ViewChild(\"extIntgrtn\") instance: ExternalIntegrationComponent;\r\n  \r\n  stopPropagation = false;\r\n  constructor(\r\n    render: Renderer2,\r\n    el: ElementRef,\r\n    private rts: RuntimeStateService,\r\n    injector: Injector\r\n  ) {\r\n    super(render, el, injector);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.inputElement = this.instance.input.nativeElement;\r\n    this.options = Object.assign({}, ExtIntgrtnDefautOption, this.options);\r\n    this.column.editor.options.onBlur = (e) => {\r\n      e.editorRef.startPending();\r\n      e.editorRef.formControl.setValue(this.instance.fieldText);\r\n      this.instance.callSapService();\r\n      this.instance.afterOnblur.subscribe(() => {\r\n        e.editorRef.endPending();\r\n      })\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n\r\n}\r\n\r\nexport const ExtIntgrtnDataGridEditorProvider = {\r\n  provide: GRID_EDITORS,\r\n  useValue: { name: \"external-integration\", value: DatagridExtIntgrtnComponent },\r\n  multi: true\r\n};\r\n","import {\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  Optional,\r\n  Output\r\n} from \"@angular/core\";\r\nimport {  ViewModel } from \"@farris/devkit\";\r\nimport { ExternalIntegrationComponent } from \"../../lib/component/external-integration/external-integration.component\";\r\n@Directive({\r\n  selector: \"[extIntegration-dataMapping]\",\r\n  \r\n})\r\nexport class ExtIntegrationDataMappingDirective {\r\n  @Input(\"mapFields\") myField: any;\r\n  @Output() showModal = new EventEmitter();\r\n  constructor(\r\n    @Optional() private vm: ViewModel,\r\n    private extIntegrationComponent: ExternalIntegrationComponent\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.extIntegrationComponent.selectSapData.subscribe((data:any) => {\r\n      this.mappingData(data, this.myField);\r\n    })\r\n  }\r\n\r\n  \r\n  /**\r\n   * 字段映射\r\n   * @param sapData sap返回信息\r\n   * @param mappingField 映射关系\r\n   */\r\n  mappingData(sapData, mappingField) {\r\n    let helpFields = Object.keys(mappingField);\r\n    helpFields.forEach((fieldName: any) => {\r\n      let pathArr = this.getBindingPathArray();\r\n      // 获取字段值\r\n      let val: any;\r\n      if (sapData) {\r\n        val = sapData[fieldName];\r\n      }\r\n      this.vm.bindingData.setValue(\r\n        pathArr.concat(mappingField[fieldName]),\r\n        val,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n  }\r\n\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.vm.bindingPath;\r\n    if (path) {\r\n      return path.split(\"/\").filter((n) => n !== \"\");\r\n    }\r\n    return [];\r\n  }\r\n\r\n  \r\n}\r\n","import {\r\n  ComponentRef,\r\n  ElementRef,\r\n  NgModule,\r\n  ViewContainerRef\r\n} from \"@angular/core\";\r\nimport { ExtIntegrationDataMappingDirective } from \"./directives/ext-integration-data-mapping.directive\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { DialogService, FarrisDialogModule } from \"@farris/ui-dialog\";\r\nimport { BsModalService, ModalDirective, ModalModule } from \"@farris/ui-modal\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { LocaleModule } from \"@farris/ui-locale\";\r\nimport { PerfectScrollbarModule } from \"@farris/ui-perfect-scrollbar\";\r\nimport { TreeModule } from \"@farris/ui-tree\";\r\nimport { FarrisTabsModule } from \"@farris/ui-tabs\";\r\nimport { FarrisCommonModule } from \"@farris/ui-common\";\r\nimport { FarrisFormsModule } from \"@farris/ui-forms\";\r\nimport { ExternalIntegrationComponent } from \"./component/external-integration/external-integration.component\";\r\nimport { TextModule } from \"@farris/ui-text\";\r\nimport { MessagerModule } from \"@farris/ui-messager\";\r\nimport { NotifyModule } from \"@farris/ui-notify\";\r\nimport { LayoutModule } from \"@farris/ui-layout\";\r\nimport { DatagridComponent, DatagridModule } from '@farris/ui-datagrid';\r\nimport { DatagridExtIntgrtnComponent  } from \"./component/external-integration/grid-external-integration.component\";\r\nimport { InputGroupModule } from \"@farris/ui-input-group\";\r\nimport { FormMessageModule } from '@farris/ui-forms/validation-message';\r\nimport { ListNavModule } from '@farris/ui-list-nav';\r\nimport { ListViewModule } from '@farris/ui-list-view'\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ExtIntegrationDataMappingDirective,\r\n    ExternalIntegrationComponent,\r\n    DatagridExtIntgrtnComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ListViewModule,\r\n    RouterModule,\r\n    ListNavModule,\r\n    InputGroupModule,\r\n    TextModule,\r\n    HttpClientModule,\r\n    FormMessageModule,\r\n    PerfectScrollbarModule,\r\n    TreeModule,\r\n    FarrisTabsModule,\r\n    FarrisFormsModule,\r\n    FormsModule,\r\n    FarrisCommonModule.forRoot(),\r\n    FarrisDialogModule.forRoot(),\r\n    MessagerModule.forRoot(),\r\n    NotifyModule.forRoot(),\r\n    LayoutModule,\r\n    LocaleModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    DatagridModule\r\n  ],\r\n  providers: [ BsModalService, DialogService ],\r\n  entryComponents: [DatagridExtIntgrtnComponent, DatagridComponent],\r\n  exports: [\r\n    ExtIntegrationDataMappingDirective,\r\n    ExternalIntegrationComponent,\r\n    DatagridExtIntgrtnComponent\r\n  ]\r\n})\r\nexport class ExternalIntegrationModule {}\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
