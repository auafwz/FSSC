/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
var DateComponent = /** @class */ (function () {
    function DateComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(DateComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // console.log(this.showType);
        this.initDate();
        if (this.item) {
            /** @type {?} */
            var type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.date = '';
        }));
    };
    /**
     * @return {?}
     */
    DateComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.initDate();
    };
    /**
     * @return {?}
     */
    DateComponent.prototype.initDate = /**
     * @return {?}
     */
    function () {
        // if(this.item && this.item.value.value){
        //     //this.time = this.getDate((this.item.value as DateValue).value);
        //     this.time = (this.item.value as DateValue).value;
        // }
        if (this.item && this.item.value
            && ((/** @type {?} */ (this.item.value))).value) {
            this.date = this.item.value.getOriginalValue();
        }
        else {
            this.date = undefined;
        }
        /** @type {?} */
        var format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
        this.returnFormat = format;
        this.dateFormat = this.item.control.format ? this.item.control.format : format;
        // console.log('格式',this.dateFormat);
    };
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    DateComponent.prototype.onDateChange = 
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log(event);
        if (event) {
            ((/** @type {?} */ (this.item.value))).value = event.returnFormatted;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
            // this.item.value = new DateValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(event);
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    DateComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    DateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-date',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-datepicker [(ngModel)]=\"date\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [editable]=\"false\" [dateFormat]=\"dateFormat\" [readonly]=\"disabled\" (valueChange)=\"onDateChange($event)\" [showType]=\"showType\" [placeholder]=\"placeholder\"></farris-datepicker>\r\n    <!-- <farris-datepicker [ngModel]=\"date\"  (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    DateComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    DateComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        showType: [{ type: Input }],
        searchHandle: [{ type: Output }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return DateComponent;
}());
export { DateComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    DateComponent.prototype.item;
    /** @type {?} */
    DateComponent.prototype.autoLabel;
    /** @type {?} */
    DateComponent.prototype.disabled;
    /** @type {?} */
    DateComponent.prototype.showType;
    /** @type {?} */
    DateComponent.prototype.searchHandle;
    /** @type {?} */
    DateComponent.prototype.date;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    DateComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    DateComponent.prototype.showlabel;
    /** @type {?} */
    DateComponent.prototype.placeholder;
    /** @type {?} */
    DateComponent.prototype.dateFormat;
    /** @type {?} */
    DateComponent.prototype.returnFormat;
    /**
     * @type {?}
     * @private
     */
    DateComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,