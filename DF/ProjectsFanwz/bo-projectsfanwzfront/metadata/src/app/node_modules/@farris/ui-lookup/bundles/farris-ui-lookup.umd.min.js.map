{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-lookup/lib/lookup-displaytype.ts","ng://@farris/ui-lookup/lib/lookup.component.ts","ng://@farris/ui-lookup/lib/lookup-grid-options.ts","ng://@farris/ui-lookup/lib/http/ILookupHttpService.ts","ng://@farris/ui-lookup/lib/lookup-defaut-mapping.ts","ng://@farris/ui-lookup/lib/utils.ts","ng://@farris/ui-lookup/lib/lookup-presonalConfig.service.ts","ng://@farris/ui-lookup/lib/services/util.service.ts","ng://@farris/ui-lookup/lib/services/treenode.helper.ts","ng://@farris/ui-lookup/lib/services/favorite-helper.ts","ng://@farris/ui-lookup/lib/services/selection-manager.ts","ng://@farris/ui-lookup/lib/services/bind-datatable-event.ts","ng://@farris/ui-lookup/lib/services/on-text-change.ts","ng://@farris/ui-lookup/lib/services/bind-treetable-event.ts","ng://@farris/ui-lookup/lib/services/multi-selection.manager.ts","ng://@farris/ui-lookup/lib/services/http-manager.ts","ng://@farris/ui-lookup/lib/lookup-left.component.ts","ng://@farris/ui-lookup/lib/services/lookup-component.manager.ts","ng://@farris/ui-lookup/lib/services/dialog-mangager.ts","ng://@farris/ui-lookup/lib/services/lookup-selection.service.ts","ng://@farris/ui-lookup/lib/lookup-grid.component.ts","ng://@farris/ui-lookup/lib/lookup-tabs.component.ts","ng://@farris/ui-lookup/lib/lookup-tip.directive.ts","ng://@farris/ui-lookup/lib/lookup.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","FAVORITE_FIELD_NAME","List","TreeList","NavList","NavTreeList","LOOKUPINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LookupComponent","multi","defineProperty","content","dialog","dialogCreated","_isShow","val","changeDetector","detectChanges","ngControl","valid","ngOnInit","initEvents","injector","get","NgControl","ngOnDestroy","lookupUnsubscribe","ngAfterViewChecked","_this","closed","subscribe","isShow","dictPicking","of","showDialog","dictPicked","closeDialog","beforeOpen","beforeClose","dialogHeight","defaultDialogSize","height","dialogWidth","width","disabled","readonly","ngZone","runOutsideAngular","setTimeout","show","close","dictPickedSubscription","unsubscribe","dictPickingSubscription","dialogCreatedSubscription","onResizing","pos","resizing","emit","size","onResized","resized","onMaxDialog","dialogMaxed","writeValue","obj","displayText","displayValue","originalText","registerOnChange","fn","onModelChange","registerOnTouched","onModelTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","Injector","ElementRef","ChangeDetectorRef","HostBinding","Input","Output","ViewChild","el","hostCls","title","buttonAlign","showButtons","showCloseButton","showMaxButton","resizable","draggable","editable","dialogOpened","EventEmitter","dialogClosed","Subject","NgZone","DisplayInfo","lookupGridDefaults","singleSelect","showFilterBar","pagination","pageIndex","pageSize","pageList","displayInfoDefault","favorites","okText","cancelText","allColumns","ServerSideToken","InjectionToken","LookupDefaultMapping","Injectable","CommonUtils","utils","lookupFieldMap","helpData","mapFields","dataObj","keys","forEach","f","map","h","getValue","join","split","ff","field","trim","setValue","LookupUtils","setActiveLookupInstance","lookupIns","rts","setLookupInstance","pendingStart","updateFormState","lookup","pending","document","body","style","pendingEnd","createFilterCondition","filterField","lbracket","rbracket","relation","FilterRelation","Or","compare","Compare","Like","mergeCondition","condition","fields","searchData","cloneDeep","filterConditions","sortConditions","_a","_b","_c","searchConditions","lastSearchConditions","Empty","And","searchCondition","canSelectable","makeTreeWithParentID","data","parentId","parentIdField","idField","nodes","Map","result","unattached","node","children","selectable","parent","parents","id","set","PID","parent_1","pid","makeTree","treeInfo","treeInfoField","dataField","layerField","pathField","pathCode","parentPathCode","substr","parent_2","RuntimeStateService","PersonalConfigService","_key","buildKey","controlID","_newKey","str","pathArr","prefix","location","hash","pathname","idService","encrypt","initPersonalConf","getPersonalData","key","personalConfigKey","conf","localStorage","getItem","personalConf","JSON","parse","_updatePersonalConfig","removeItem","savePersonalConfig","getQuickSelected","localeId","qs","quickSelected","items","getDialogSize","updatePersonalConfig","cfg","setItem","stringify","getActiveTabIndex","tabName","tabIndex","updateQueckSelected","selectedRow","quickItems","selectedIndex_1","element","index","item","filter","v","unshift","_qs","newData","per","flag","favorite","isArray","zh-CHS","selected","IdService","selectItemObser$","displayType","UtilService","instance","TreeNodeHelper","getTreeInfo","treeNode","treeInfoDataField_1","toLowerCase","find","console","getTreeNodeLayer","updateTreeNodeExpanded","treeNodes","expandLevel","flatAllNodes","treeData2Flat","tn","expanded","shoudExpand","isSelectNodeParent","leaf","level","parentIds","arr","parentID","_parents","rowNode","nodeLayer","navSelectedIds","allParentIds","includes","getLeafNode","flatTreeNodes","reduce","c","FavoriteHelper","getFavoriteColumns","gridOptions","columns","rtn","formatter","FavoriteIcon","initPersonalInfo","personalConfigService","nativeElement","controlId","log","pcstr","getPersonalConfigKey","textField","listenPersonalConfigHandler","_this_1","name","k","initFavoriteComponentEvent","cmpRef","LookupGridDisplayType","fdt_1","remoteSort","lookupSelectionSer","clearSelections","updateSelections","unSelectRow","unSelect","checkAll","cellClick","col","event","stopPropagation","target","contains","row","dt","componentRef","loadData","total","favoriteItems","updateFavoriteData","FavoriteAction","rowDblClick","rowData","selectItem","ftt","nodeSelected","nodeUnChecked","nodeChecked","multiSelMgr","_this_2","every","hasFinish","dblClick","okButton","click","getFavoritData","favData","localService","getFavoritIds","_loadFavoriteData","fdt","favoritesComponentRef","loadFavoriteDatatable","cd","markForCheck","closeLoading","loadFavoritesData","res","favoriteDataFrom","TreeTableComponent","bindFavTreetable","loadFavoriteForTreeTable","undefined","favoriteColumns","selectionMgr","selectCurrentValue","allColumnsTitle","favids","findIndex","onlySelectLeaf","checkOnSelect","selectOnCheck","showCheckbox","enableCascade","ttEventMgr","cascadeValueChanged","cascadeStatus","cascadeCheck","cascadeDown","cascadeUp","initFavoriteTreeData","layerType","lookupUtils","parentField","checkNodeCanBeSelect","expandAll","updateFavoritesStatus","useFavorite","favIds","_this_3","each","_data","_updateFavorites","action","localeID","newVal","favoriteItems$","httpMgr","submitFavoriteData","ftt_1","showLoading","getData","favoriteIds","resData","_items","favoriteColumnFormatter","isTree","rn","findRowNode","SelectionManager","destroy","getBindingData","jsonData","ins","bindingData","formDirective","form","getObject","toJSON","initDisplayValue","targetField","indexOf","_clearSelections","getDataCmpInstance","cmpRefInstance","clearAll","cdRef","destroyed","dtBody","selectedRowIndex","selections","selectedIds","enableToSelect","selectedRows","getSelections","selected4Treetable","selected4Datatable","ref","activeTab","lookupCmpMgr","getComponentInstance","serializedValue","values","isSelected","checkRow","valueArr","selectNode","checkedNodes","selectNodes","getSelectedIds","multipleChoiceSeparator","showSelected","rows","DataTableEventManager","onSearch","$event","pageInfo","search","uri","searching","pipe","catchError","err","_ERROR_","tap","Error","_loadData","messagerService","warning","mustWriteSomething","self","favHelper","loadDataTableData","bindDataTableEvent","checkedChange","isCheck","pageChanged","pagerChanged","buildQueryParams","pageSizeChanged","_searchState","faction","columnSorted","sort","sortName","sortOrder","param","fieldPath","clearSearchValue","checkSearchResult","searchOnServer","setModelValue","runDictPickedEvent","onTextChanged","isTextChange","nosearch","originalEvent","getFormState","switchMap","pr","customData","SHOWDIALOG","MESSAGE","message","notifyService","rowdata","leafNode","treeNodeHelper","bind","Message","inputGroup","textbox","render2","listen","enterHandle","keydownHandle","code","selectionStart","shortcutKey","open","preventDefault","TreeTableEventManager","searchTreeData","tt","checkNodes_1","expandFirstNode_1","_nodes","resize","IS_SEARCH_RESULT","getChildren","parentPath","parentLayer","category","searchValue","enableFullTree","loadTreeDataType","searchField","helpId","http","bindTreetableEvent","_searchTreeData","searchparam","remoteSearch","isLoadAllTreeData","loadDataType","dblClickExpand","searchFields","virtualized","allData","showCheckAll","enableFindText","unSelectNode","remove","pathcode","unselectByPathcode","loadAllData","clientSort","sortName_1","_sortName","expand","isGetAllChidlNodes","propagateSelectionDown","isChecked","selectItems","expandTreeNode","parentIdOrPath","appendChildren","addtional","instanceTyp","MultiSelectionManager","onSelectedTableCellClick","rid","unCheckedNode","_tt","unCheckRow","_dt","initSelectedColumns","selectedColumns","favcol","select","clear","save","loadSelections","DefaultUserConfig","LookupHttpManager","disablePagination","type","params","searchParam","isDoublleList","navigationFilter","idValue","relationFilter","sfield","selectedInfo","beUri","allSearchFields","isUsePagination","_uri","context","_searchResult","params1","parentsIds","getSelecedItems","selIds","getPersonalConfig","defaultConf","_conf","req","isTabChanged","ucs","textValue","lookupRequest","usePersionalConf","_originalPersonalConfig","reSize","_sids","msg","addFavoriteSuccess","delFavoriteSuccess","configData","configkey1","configkey2","configkey3","textvalue","savingFaoriteData","success","LookupLeftComponent","createComponent","dtFac","isTreeList","cfr","resolveComponentFactory","DataTableComponent","navOptions","lookupCmp","leftPanelWidth","cmpContainer","maxSize","fill","enablePager","update","selectLeftDataTableRow","selectFirstInNav","initDataTable","loadTableData","dataTableReLoad","initTreeTable","nodeUnSelect","fixedHeader","selectFirstNode","loadTreeData","onNodeExpanded","ComponentFactoryResolver","read","ViewContainerRef","unselected","LookupComponentManager","multiSelectDT","leftRef","leftComponentRef","createComponentWithServerData","valueField","createContent","createFavoriteComponent","resizeComponent","favoritesOptions","createFavoritesContent","opts","getComponentType","centerContainer","contentContainer","fit","favoritesContainer","dialogMgr","getHeight","createLeftComponent","ops","leftContainer","navLookupDialogMinWidth","resizeCmp","leftPanel","debounceTime","getNavigationFilter","loadDataWhenOpen","navRow","navigationOptions","relations","result_1","groupField","rf","fieldName","helpField","fieldValue","LookupDialogManager","lookupInit","_loadDataWhenOpen","_navSelectedId","_selectFirstInNav","enableGetAllChildNodes","keyDownHandler","focus","onDialogCreated","dlg","dialogOpenedSubscription","dialogClosedSubscription","registerDialogEvent","isRecordSize","dlgSize","canOpenDialog","isReady","contentHeight","containerMargin","bottom","top","getMainGridSize","left","right","opened","querySelector","customDisplayType","initData","subscriptions","lookupinitializationSubject","registerShortcutKey","leftPanelResize$","dlgContainerDom","eventManager","addEventListener","moveUp","moveDown","searchFocus","confirm","nextPager","prevPager","collapse","onKeydownEvent","ctrlKey","isNextPager","paginationKeyDownHandler","datatableRef","newPageNum","Math","ceil","onPageChange","LookupSelectionService","initFavoriteItems","state","selecteditems","state$","checked","ids2_1","BehaviorSubject","selected$","quickItems$","_super","LOOKUPGRID_VALUE_ACCESSOR","LookupGridComponent","__extends","__","constructor","create","tslib_1.__extends","_displayType","toUpperCase","align","_gridOptions","resizableColumns","hover","useTip","checkGridOptions","displayInfo","mustChoosAdatarow","useExtendInfo","updateExtendInfo","ngOnChanges","changes","ngAfterViewInit","viewType","registerMouseEventForTagView","tagboxHeight","tagbox","tbh","maxTagboxHeight","setStyle","farrisInstances","add","createInstance","MessagerService","loadingService","LoadingService","NotifyService","utilService","LocaleService","dtEventMgr","_size","warn","beforeSelectData","modalContent","loading","container","delay","getSearchColumns","resdata","cols","sf","label","initOptions","obser","setLookupTitleText","navigation","customNavFormatter","rowStyler","cellStyler","_nav_treeinfo_loadtype","customFormatter","showGetAllChildrenCheckbox","observer","selectedItems","toggleExpand","hasError","vals","restData","rebindEvent","loadTreeTableData","loadFavData","setTreeInfo","treeData","scrollToY","updateDataTable","loadSuccess","_treeInfo","_osl","tt_1","isLoadAll","keepSelect","isAllTreeData","onChanges","valueChanged","textChanged","onClear","extendInfo","mappingFn","defaultMapping","clearValue","okHandler","bsdResult","_beforeSelectDataCallBack","getParentPathCode","maxLayer","x","max","_rows","patchCode","_rows2","canSelect","selectedRows$","allitems","ids","from","Set","a","updateControlValue","setDisplayText","updateBindData","selectedData","activeElement","blur","helpFields","bindingData_1","formField","getExtendInfoFields","isHelpData","extInfoFields","tipFieldArr","tf","mapKey","onUpdateExtendInfo","extInfoFormatter","tipString","getExtendInfoText","extendInfoFields_1","itemData","tipString_1","tfv","getDisplayText","df","displayFields","txtArr","displayTextSeparator","displayFormatter","tree","datatable","focusToInput","zone","cancelSelect","cancelHandler","onTabChange","_firstChange","y","scrollY","enableClear","onTagboxMouseEnter","onTagboxMouseLeave","toggleClearIcon","clearIcon","display","showTagboxClearButton","onRemoveSelectItem","txt","textArray","displayTextList","removedIndex","splice","updateOtherFieldDataWhenTagremoved","tagRemoved","textFieldIndex","bindingData_2","bindingPath","pathArr_1","fieldPaths","valArr","onAllChildNodesClick","ShortcutsService","encapsulation","ViewEncapsulation","None","exportAs","Renderer2","shortcuts","groupIcon","placeholder","textAlign","enableTitle","containerStyle","marginLeft","marginRight","marginTop","marginBottom","tabChangeSubscription","currentSelectedItems","EventManager","FarrisComponentInstanceService","LookupTabsComponent","isFirstChange","initInkBarPos","currentValue","navClickHandle","tabChange","which","enableFav","enableSelected","dataListNavRef","offsetWidth","favoriteNavRef","selectedNavRef","inkBarRef","animations","trigger","transition","opacity","animate","selectedTotal","render","LookupTipDirective","tipText","enableTip","inputRef","iconMouseEnter","creatPanel","iconMouseLeave","isInTipPanel","removePanel","clickHandle","getQuickSelectedByLocaleId","localeid","tipPanel","setPosition","ul","renderer","createElement","li","innerHTML","setProperty","appendChild","header","addClass","leaveEvent","enterEvent","clickEvent","nodeName","removeChild","getBoundingClientRect","Number","keyArr","shift","Directive","InputGroupComponent","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","FarrisDialogModule","MessagerModule","NotifyModule","LoadingModule","InputGroupModule","LayoutModule","DataTableModule","TreeTableModule","LocaleModule","exports","declarations","entryComponents","LookupModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\r\n/** æ¶èåå­æ®µåç§° */\r\nexport const FAVORITE_FIELD_NAME = '__favorite__';\r\nexport const INPUT_GROUP_ICON = '<i class=\"f-icon f-icon-lookup\"></i>';\r\n\r\n// è·åç»ä»¶å®ä¾çç±»å\r\nexport type ComponentInstanceType = 'datatable'| 'treetable' | 'fav' | 'selected' | 'leftTree' | 'leftDataTable';\r\n\r\nexport enum LookupGridDisplayType {\r\n    List = 'LIST',\r\n    TreeList = 'TREELIST',\r\n    NavList = 'NAVLIST',\r\n    NavTreeList = 'NAVTREELIST'\r\n}\r\n\r\n/** æ¶èç¸å³å¾æ  */\r\nexport enum FavoriteIcon {\r\n    /** å·²æ¶è */\r\n    yes = '<span class=\"f-icon f-icon-star f-lookup-favorite\" style=\"line-height: 29px;\"></span>',\r\n    /** æªæ¶è */\r\n    no = '<span class=\"f-icon f-icon-star-outline f-lookup-favorite\" style=\"line-height: 29px;\"></span>',\r\n    /** ç§»é¤æ¶è */\r\n    delete = '<span class=\"f-icon f-icon-apply-format f-lookup-unfavorite\" style=\"line-height: 29px;\"></span>',\r\n    /** ç§»é¤å·²éè®°å½ */\r\n    remove = '<span class=\"f-icon f-icon-apply-format f-lookup-unfavorite\" style=\"line-height: 29px;\"></span>'\r\n}\r\n\r\n/** æ¶èç¸å³å¨ä½ */\r\nexport enum FavoriteAction {\r\n    /** æ·»å æ¶è */\r\n    add = 'append item to favorite.',\r\n    /** ç§»é¤æ¶è */\r\n    delete = 'remove favorite.'\r\n}\r\n\r\nexport interface ExtInfoFormatterParam {\r\n    [key: string]: any;\r\n    bindingData?: any;\r\n    instance?: any;\r\n}\r\n\r\nexport type ExtInfoFormatterFn = (param: ExtInfoFormatterParam) => string;\r\nexport type ExtInfoFormatter = string | ExtInfoFormatterFn;\r\n\r\nexport interface CustomDataFormatter {\r\n    [fieldName: string]: any ;\r\n    rowStyler?: any;\r\n    cellStyler?: any;\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-15 15:24:24\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-30 14:01:34\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { Subscription, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    Component, Input, Output, EventEmitter, TemplateRef,\r\n    ViewChild, Injector, forwardRef, OnInit, ElementRef, ChangeDetectorRef,\r\n    AfterViewChecked, HostBinding, NgZone, OnDestroy\r\n} from '@angular/core';\r\nimport {\r\n    NG_VALUE_ACCESSOR,\r\n    ControlValueAccessor,\r\n    NgControl\r\n} from '@angular/forms';\r\n\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { IResizeEvent } from '@farris/ui-draggable';\r\n\r\nimport { PickingResult, PickedResult } from './lookup-grid-options';\r\n\r\nexport const LOOKUPINPUT_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farris-lookup',\r\n    template: `\r\n        <div\r\n            class=\"lookupbox input-group\"\r\n            [ngClass]=\"{\r\n                'f-state-disabled': disabled,\r\n                'f-state-readonly': readonly,\r\n                'f-state-editable': !editable\r\n            }\"\r\n        >\r\n            <input\r\n                class=\"form-control\"\r\n                [value]=\"displayText\"\r\n                [disabled]=\"disabled\"\r\n                [readonly]=\"!editable || readonly\"\r\n            />\r\n            <div class=\"input-group-append\">\r\n                <span class=\"f-select input-group-text\" (click)=\"showDialog()\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <farris-dialog\r\n            #dialog\r\n            *ngIf=\"isShow\"\r\n            [title]=\"title\"\r\n            [beforeOpen]=\"beforeOpen\"\r\n            [beforeClose]=\"beforeClose\"\r\n            [width]=\"dialogWidth\"\r\n            [height]=\"dialogHeight\"\r\n            [showButtons]=\"showButtons\"\r\n            [showMaxButton]=\"showMaxButton\"\r\n            [buttons]=\"buttonsRef || defaultButtonRef\"\r\n            [buttonAlign]=\"buttonAlign\"\r\n            (maxed)=\"onMaxDialog($event)\"\r\n            (resized)=\"onResized($event)\"\r\n            (resizing)=\"onResizing($event)\"\r\n        >\r\n            <ng-content></ng-content>\r\n\r\n            <ng-template #defaultButtonRef>\r\n                <div style=\"width: 100%;\">\r\n                    <button class=\"btn btn-primary btn-lg\">Ok</button>\r\n                    <button\r\n                        class=\"btn btn-secondary btn-lg\"\r\n                        (click)=\"closeDialog()\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </ng-template>\r\n        </farris-dialog>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            :host-context(.ng-invalid) .form-control {\r\n                border-color: #ff0303;\r\n            }\r\n        `\r\n    ],\r\n    providers: [LOOKUPINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class LookupComponent\r\n    implements OnInit, ControlValueAccessor, AfterViewChecked, OnDestroy {\r\n    @HostBinding('class') hostCls = 'f-cmp-inputgroup';\r\n\r\n    /** çªå£å®½åº¦ */\r\n    @Input() dialogWidth: number;\r\n    /** çªå£é«åº¦ */\r\n    @Input() dialogHeight: number;\r\n    /** çªå£æ é¢ãé»è®¤å¼ï¼æ­¤å¤æ¾ç¤ºå¸®å©æ é¢ */\r\n    @Input() title = '';\r\n    /** æé®å¯¹é½æ¹å¼ */\r\n    @Input() buttonAlign = 'right';\r\n    /** æé®æ¨¡æ¿ */\r\n    @Input() buttonsRef: TemplateRef<any>;\r\n    /** æ¯å¦æ¾ç¤ºæé® */\r\n    @Input() showButtons = true;\r\n    /** æ¾ç¤ºå³é­æé® */\r\n    @Input() showCloseButton = true;\r\n    /** æ¾ç¤ºæå¤§åæé® */\r\n    @Input() showMaxButton = true;\r\n    /** åè®¸ææ½å°ºå¯¸ */\r\n    @Input() resizable = true;\r\n    /** åè®¸æå¨çªå£ */\r\n    @Input() draggable = true;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ææ¬æ¡ */\r\n    @Input() editable = true;\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** å­æ®µæ å°, { å¸®å©æ°æ®å­æ®µï¼è¡¨åå­æ®µ } */\r\n    @Input() mapFields: { [sourceField: string]: string };\r\n    /** å¼å­æ®µ */\r\n    @Input() valueField: string;\r\n    /** ææ¬å­æ®µ */\r\n    @Input() textField: string;\r\n    @Input() displayText = '';\r\n\r\n    /** è¿è¡æ¶ä¸ä¸æèªå®ä¹å¯¹è±¡ */\r\n    @Input() context: any;\r\n\r\n    /** çªå£æå¼åäºä»¶ */\r\n    @Input() beforeOpen: () => Observable<boolean>;\r\n    /** çªå£å³é­åäºä»¶ */\r\n    @Input() beforeClose: () => Observable<boolean>;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicking: (emptyObj?: {}) => Observable<PickingResult>;\r\n    dictPickingSubscription: Subscription;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicked: (rowData: any) => Observable<PickedResult>;\r\n    dictPickedSubscription: Subscription;\r\n\r\n    /** çªå£æå¼å */\r\n    @Output() dialogOpened = new EventEmitter();\r\n    /** çªå£å³é­å */\r\n    @Output() dialogClosed = new EventEmitter();\r\n    /** çªå£æå¤§å */\r\n    @Output() dialogMaxed = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸è¿è¡æ¶ */\r\n    @Output() resizing = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸ç»æ */\r\n    @Output() resized = new EventEmitter();\r\n    /** å¸®å©çªå£é»è®¤å°ºå¯¸ */\r\n    private defaultDialogSize = { width: 550, height: 570 };\r\n\r\n    dialogCreated = new Subject<DialogComponent>();\r\n    dialogCreatedSubscription: Subscription;\r\n    dialog: DialogComponent;\r\n    @ViewChild('dialog') set content(content: DialogComponent) {\r\n        this.dialog = content;\r\n        if (content) {\r\n            this.dialogCreated.next(this.dialog);\r\n        }\r\n    }\r\n\r\n    private _isShow = false;\r\n    get isShow() {\r\n        return this._isShow;\r\n    }\r\n    set isShow(val) {\r\n        this._isShow = val;\r\n        if (!this.changeDetector['destroyed']) {\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngControl: any;\r\n\r\n    displayValue = '';\r\n    originalText = '';\r\n\r\n    get invalid() {\r\n        return this.ngControl.valid;\r\n    }\r\n\r\n    private ngZone: NgZone;\r\n\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n    constructor(\r\n        public injector: Injector,\r\n        public el: ElementRef,\r\n        public changeDetector?: ChangeDetectorRef\r\n    ) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n        // if (!this.personalConfigService) {\r\n        //     const idServ = this.injector.get(IdService);\r\n        //     this.personalConfigService = new PersonalConfigService(idServ);\r\n        // }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initEvents();\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.lookupUnsubscribe();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.dialog) {\r\n            this.dialog.closed.subscribe(() => {\r\n                this.isShow = false;\r\n                this.dialog = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    initEvents() {\r\n        if (!this.dictPicking) {\r\n            this.dictPicking = () => of({ showDialog: true });\r\n        }\r\n        if (!this.dictPicked) {\r\n            this.dictPicked = () => of({ closeDialog: true });\r\n        }\r\n        if (!this.beforeOpen) {\r\n            this.beforeOpen = () => of(true);\r\n        }\r\n        if (!this.beforeClose) {\r\n            this.beforeClose = () => of(true);\r\n        }\r\n\r\n        if (!this.dialogHeight) {\r\n            this.dialogHeight = this.defaultDialogSize.height;\r\n        }\r\n\r\n        if (!this.dialogWidth) {\r\n            this.dialogWidth = this.defaultDialogSize.width;\r\n        }\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n        this.dictPicking().subscribe((val: PickingResult) => {\r\n            if (val.showDialog === false) {\r\n                return;\r\n            }\r\n\r\n            this.isShow = true;\r\n            // this.changeDetector.detectChanges();\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => this.dialog.show());\r\n            });\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.isShow = false;\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n    }\r\n\r\n\r\n    private lookupUnsubscribe() {\r\n        if (this.dictPickedSubscription) {\r\n            this.dictPickedSubscription.unsubscribe();\r\n        }\r\n        if (this.dictPickingSubscription) {\r\n            this.dictPickingSubscription.unsubscribe();\r\n        }\r\n        if (this.dialogCreatedSubscription) {\r\n            this.dialogCreatedSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n    }\r\n    onResized(pos: IResizeEvent) {\r\n        this.resized.emit(pos.size);\r\n    }\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj) {\r\n            this.displayText = obj;\r\n            this.displayValue = obj;\r\n            this.originalText = this.displayText;\r\n        } else {\r\n            this.displayText = '';\r\n            this.displayValue = '';\r\n            this.originalText = '';\r\n        }\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-07-10 11:44:49\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:54\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { DataColumn } from '@farris/ui-common/column';\r\n\r\nexport type ONLY_SELECT_LEAF = 'default' | 'yes' | 'no';\r\nexport type LOAD_DATA_TYPE = 'all' | 'fav' | 'list' | 'nav' | 'search' | 'children'\r\n                            | 'textchange' | 'sort' | 'navsearch' | 'selected' | 'allChildren';\r\n\r\nexport interface TreeInfo {\r\n    /** æ°æ®å è½½æ¹å¼ï¼ all, async */\r\n    loadDataType?: 'all' | 'async';\r\n    /** åå±æ¹å¼ï¼ pathcode, parentId */\r\n    layerType?: string;\r\n    /** æ°æ®ä¸­å¸¦æåçº§ä¿¡æ¯çå­æ®µ */\r\n    dataField?: string;\r\n    /** ç¶IDå­æ®µ */\r\n    parentField?: string;\r\n    /** åçº§ç å­æ®µ */\r\n    pathField?: string;\r\n    /** çº§æ°å­æ®µ */\r\n    layerField?: string;\r\n    /** æ¯å¦æç»å­æ®µ */\r\n    isDetailField?: string;\r\n    /**\r\n     * åªåè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯è®¾ç½®ï¼å¦æå¡å¨æªè®¾ç½®ï¼åè½å  `no`\r\n     * - `yes`: æå¡å¨ç«¯è®¾ç½®å¤±æãä»åè®¸éæ©å¶å­èç¹ã\r\n     * - `no`:  æå¡å¨ç«¯è®¾ç½®å¤±æãææèç¹åå¯éæ©ã\r\n     */\r\n    onlySelectLeaf?: boolean | ONLY_SELECT_LEAF;\r\n    /** æ ç»ææ°æ®æ¯å¦å·²åå§åå®æ */\r\n    treeDataIsInit?: boolean;\r\n}\r\n\r\nexport interface LookupGridResult {\r\n    /** åä¿¡æ¯ */\r\n    columns?: DataColumn[];\r\n    /** æ°æ®åè¡¨ */\r\n    items?: any[];\r\n    /** æ¥è¯¢å­æ®µ */\r\n    searchFields?: { label: string, value: string }[];\r\n    /** åé¡µä¿¡æ¯ */\r\n    pageInfo?: { pageIndex: number, pageSize: number, pageList?: number[], enablePager: boolean };\r\n    /** æ»è®°å½æ° */\r\n    total?: number;\r\n    /** åºå¼ */\r\n    mapFields?: { desgine: string, runtime: string }[];\r\n    /** æ åçº§ä¿¡æ¯ */\r\n    treeInfo?: TreeInfo;\r\n    displayType?: string;\r\n    displayInfo?: DisplayInfo;\r\n    title?: string;\r\n    navigation?: NavigationOptions;\r\n    valueField?: string;\r\n    textField?: string;\r\n    idField?: string;\r\n    /** å·²éæ©æ°æ®åè¡¨ */\r\n    selectedItems?: any;\r\n    /** æ¶èæ°æ® */\r\n    favoriteItems?: any[];\r\n}\r\n\r\n/** ä¸ªæ§åæ°æ® */\r\nexport interface PersonalConfig {\r\n    tabIndex?: string;\r\n    favorite?: {\r\n        [lang: string]: any[];\r\n    };\r\n    quickSelected?: {\r\n        [lang: string]: any[];\r\n    };\r\n    size?: any;\r\n    selections?: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface NavigationOptions extends LookupGridResult {\r\n    [key: string]: any;\r\n    displayType: 'List' | 'TreeList';\r\n    width: number;\r\n    idField?: string;\r\n    relations?: { groupField: string, helpField: string }[];\r\n    hover?: boolean;\r\n}\r\n\r\nexport interface LookupGridOptions extends LookupGridResult {\r\n    singleSelect?: boolean;\r\n    idField?: string;\r\n    uri?: string; // å¯ä»¥ä¸ºåæ°æ®IDãwebapi å°å\r\n    showFilterBar?: boolean;\r\n    pagination?: boolean;\r\n    pageIndex?: number;\r\n    pageSize?: number;\r\n    pageList?: number[];\r\n    total?: number;\r\n    width?: number;\r\n    height?: number;\r\n    hover?: boolean;\r\n}\r\n\r\nexport class DisplayInfo {\r\n    title?: string;\r\n    favorites?: string;\r\n    okText?: string;\r\n    cancelText?: string;\r\n    allColumns?: string;\r\n}\r\n\r\nexport const lookupGridDefaults: LookupGridOptions = {\r\n    singleSelect: true,\r\n    showFilterBar: true,\r\n    pagination: true,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    pageList: [10, 20, 30, 50, 100]\r\n};\r\n\r\nexport const displayInfoDefault = {\r\n    title: 'æ­¤å¤æ¾ç¤ºæ é¢',\r\n    favorites: 'æ¶èå¤¹',\r\n    okText: 'ç¡®å®',\r\n    cancelText: 'åæ¶',\r\n    allColumns: 'ææå'\r\n};\r\n\r\n/** å¸®å©åäºä»¶è¿åç±»å */\r\nexport interface PickingResult {\r\n    /** true: ç»§ç»­æå¼å¸®å©ï¼false: ä¸æå¼å¸®å©çªå£ */\r\n    showDialog: boolean;\r\n    /** æºå¸¦çä¸äºèªå®ä¹æ°æ®ï¼ç±ä¸å¡å¨æå¡å¨ç«¯å¸®å©åäºä»¶ä¸­å¤ç */\r\n    data?: any;\r\n    message?: any;\r\n}\r\n\r\nexport interface PickedResult {\r\n    closeDialog: boolean;\r\n    message?: any;\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:07\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-08-15 14:11:43\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LOOKUP_HTTP_PARAMS } from './RemoteParams';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\n\r\nexport interface ILookupHttpService {\r\n    context?: any;\r\n    /**\r\n     * æ ¹æ®æå®çå¸®å©åæ°æ®IDåç¸å³åæ°è·åæ°æ®\r\n     * @param uri å¸®å©åæ°æ®ID or Rest API\r\n     * @param data æå¡å¨ç«¯æ¥æ¶åæ° key/value\r\n     */\r\n    getData(uri: string, params?: LOOKUP_HTTP_PARAMS): Observable<LookupGridResult>;\r\n}\r\nexport const ServerSideToken = new InjectionToken<ILookupHttpService>('Lookup Grid HTTP service');\r\n","import { Injectable } from '@angular/core';\r\nimport { trim } from 'lodash-es';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n\r\n@Injectable()\r\nexport class LookupDefaultMapping {\r\n\r\n    constructor(private utils: CommonUtils) {}\r\n\r\n    lookupFieldMap = (helpData, mapFields, dataObj) => {\r\n        if (mapFields) {\r\n            const helpFields = Object.keys(mapFields);\r\n            helpFields.forEach( (f: any) => {\r\n                let val = '';\r\n                if (helpData) {\r\n                    if (helpData instanceof Array) {\r\n                        val = helpData.map( (h: any) => {\r\n                            return this.utils.getValue(f, h);\r\n                        }).join(',');\r\n                    } else {\r\n                        val = this.utils.getValue(f, helpData);\r\n                    }\r\n\r\n                }\r\n\r\n                mapFields[f].split(',').forEach( (ff: any) => {\r\n                    const field = trim(ff);\r\n                    this.utils.setValue(dataObj, field, val);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { CommonUtils, RuntimeStateService } from '@farris/ui-common';\r\nimport { FilterRelation, FilterCondition, Compare, EntityFilter } from '@farris/ui-common/types';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { TreeInfo } from './lookup-grid-options';\r\n\r\n@Injectable()\r\nexport class LookupUtils {\r\n\r\n    constructor(private utils: CommonUtils, private rts: RuntimeStateService, private ngZone: NgZone) { }\r\n\r\n    setActiveLookupInstance(lookupIns: any) {\r\n        if (this.rts) {\r\n            this.rts.setLookupInstance(lookupIns);\r\n        }\r\n    }\r\n\r\n    pendingStart() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: true\r\n                }\r\n            });\r\n\r\n            // ç¦ç¨é¡µé¢çææé¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = 'none';\r\n        }\r\n    }\r\n\r\n    pendingEnd() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: false\r\n                }\r\n            });\r\n\r\n            // æ¿æ´»é¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = '';\r\n        }\r\n    }\r\n\r\n\r\n    private createFilterCondition(field: string, value: string) {\r\n        return {\r\n            filterField: field,\r\n            value,\r\n            lbracket: '',\r\n            rbracket: '',\r\n            relation: FilterRelation.Or,\r\n            compare: Compare.Like\r\n        };\r\n    }\r\n\r\n    mergeCondition(condition: EntityFilter, fields: string[], searchData: { field: string, value: string }) {\r\n        if (!condition) {\r\n            condition = {\r\n                pagination: {\r\n                    pageIndex: 1,\r\n                    pageSize: 20\r\n                },\r\n                filterConditions: [],\r\n                sortConditions: []\r\n            };\r\n        } else {\r\n            condition = cloneDeep(condition);\r\n        }\r\n\r\n        const { field = '*', value = '' } = { ...searchData };\r\n\r\n        if (value) {\r\n            if (field === '*') {\r\n                if (fields && fields.length) {\r\n                    const searchConditions: FilterCondition[] = fields.map((f: string) => {\r\n                        return this.createFilterCondition(f, value);\r\n                    });\r\n\r\n                    if (searchConditions.length) {\r\n                        searchConditions[0].lbracket = '(';\r\n                        const lastSearchConditions = searchConditions[searchConditions.length - 1];\r\n                        lastSearchConditions.rbracket = ')';\r\n                        lastSearchConditions.relation = FilterRelation.Empty;\r\n                    }\r\n\r\n                    if (condition.filterConditions && condition.filterConditions.length) {\r\n                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                        condition.filterConditions = condition.filterConditions.concat(searchConditions);\r\n                    } else {\r\n                        condition.filterConditions = searchConditions;\r\n                    }\r\n                }\r\n            } else {\r\n                const searchCondition = this.createFilterCondition(field, value);\r\n                searchCondition.relation = FilterRelation.Empty;\r\n                if (condition.filterConditions && condition.filterConditions.length) {\r\n                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                    condition.filterConditions.push(searchCondition);\r\n                } else {\r\n                    condition.filterConditions = [searchCondition];\r\n                }\r\n            }\r\n        }\r\n\r\n        return condition;\r\n    }\r\n\r\n    private canSelectable(n: any) {\r\n        if (n.hasOwnProperty('farris_selectable')) {\r\n            return !!n['farris_selectable'];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** å°æ°æ®è½¬æ å½¢ç»æ */\r\n    makeTreeWithParentID(data: any[], parentId, parentIdField = 'parentId', idField = 'id') {\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t),\r\n                parent: null,\r\n                parents: []\r\n            };\r\n            const id = t[idField];\r\n            nodes.set(id, node);\r\n            const PID = this.utils.getValue(parentIdField, t);\r\n            if (PID === parentId) {\r\n                result.push(node);\r\n            } else {\r\n                const parent = nodes.get(PID);\r\n                if (parent) {\r\n                    node.parent = PID;\r\n                    node.parents = [...parent.parents, PID];\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n        unattached.forEach(n => {\r\n            const pid = this.utils.getValue(parentIdField, n.data);\r\n            const parent = nodes.get(pid);\r\n            if (parent) {\r\n                n.parent = pid;\r\n                n.parents = [...parent.parents, pid];\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    makeTree(data, treeInfo: TreeInfo) {\r\n        const treeInfoField = treeInfo.dataField;\r\n        const layerField = treeInfo.layerField;\r\n        const pathField = treeInfo.pathField;\r\n\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t)\r\n            };\r\n            const pathCode = t[treeInfoField][pathField];\r\n            nodes.set(pathCode, node);\r\n\r\n            if (t[treeInfoField][layerField] === 1) {\r\n                result.push(node);\r\n            } else {\r\n                const parentPathCode = pathCode.substr(0, pathCode.length - 4);\r\n                const parent = nodes.get(parentPathCode);\r\n                if (parent) {\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        unattached.forEach(n => {\r\n            const pathCode = n.data[treeInfoField][pathField];\r\n            const parent = nodes.get(pathCode.substr(0, pathCode.length - 4));\r\n            if (parent) {\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { Subject } from 'rxjs';\r\nimport { PersonalConfig } from './lookup-grid-options';\r\n\r\n\r\n@Injectable()\r\nexport class PersonalConfigService {\r\n    // ä¸ªæ§åéç½®\r\n    personalConf: PersonalConfig;\r\n\r\n    selectItemObser$ = new Subject();\r\n\r\n    displayType = 'LIST';\r\n\r\n    singleSelect = true;\r\n    idField: string;\r\n    textField: string;\r\n    mapFields: any;\r\n\r\n    // ä¸ªæ§åéç½®KEY\r\n    private _key = '';\r\n    _newKey = '';\r\n    get personalConfigKey() {\r\n        return this._key;\r\n    }\r\n    set personalConfigKey(val) {\r\n        if (val) {\r\n            this._key = this.buildKey(val);\r\n            if (this.controlID) {\r\n                this._newKey = this.buildKey(this.controlID + '_' + val);\r\n            } else {\r\n                this._newKey = this._key;\r\n            }\r\n        } else {\r\n            this._newKey = this.buildKey(this.controlID);\r\n        }\r\n    }\r\n\r\n    // ç»ä»¶ID\r\n    controlID = '';\r\n\r\n    constructor(private idService: IdService) {}\r\n\r\n    private buildKey(str) {\r\n        let prefix = '';\r\n        if (location.hash) {\r\n            const pathArr = location.hash.split('?');\r\n            prefix = pathArr ? pathArr[0] : '';\r\n        } else {\r\n            const pathArr  = location.pathname.split('/');\r\n            prefix = pathArr ? pathArr[pathArr.length - 1] : '';\r\n        }\r\n        return this.idService.encrypt(prefix + str);\r\n    }\r\n\r\n    initPersonalConf(obj) {\r\n        Object.assign(this, obj);\r\n    }\r\n\r\n    getPersonalData(key?: string): PersonalConfig {\r\n        if (key) {\r\n            this._key = key;\r\n        }\r\n\r\n        if (this.personalConfigKey) {\r\n            const conf = localStorage.getItem(this.personalConfigKey);\r\n\r\n            if (conf && conf !== 'undefined' && conf !== 'null') {\r\n                this.personalConf = conf ? JSON.parse(conf) : {};\r\n                this._updatePersonalConfig(this.personalConf);\r\n\r\n                if (this.controlID) {\r\n                    if (this._key !== this._newKey) {\r\n                        localStorage.removeItem(this._key);\r\n                    }\r\n                    this.savePersonalConfig(this.personalConf);\r\n                }\r\n\r\n                return this.personalConf;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getQuickSelected(localeId?: string): any {\r\n        const d = this.getPersonalData();\r\n        const qs =  d ? d.quickSelected : null;\r\n\r\n        if (localeId) {\r\n            if (qs) {\r\n                const items = qs[localeId];\r\n                if (items && items.length) {\r\n                    return items;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        return qs;\r\n    }\r\n\r\n    getDialogSize() {\r\n        const d = this.getPersonalData();\r\n        return d ? d.size : null;\r\n    }\r\n\r\n    updatePersonalConfig(cfg: Partial<PersonalConfig>) {\r\n        const data = Object.assign(this.personalConf || {}, cfg);\r\n        this.savePersonalConfig(data);\r\n    }\r\n\r\n    savePersonalConfig(data: PersonalConfig) {\r\n        if (this._newKey) {\r\n            localStorage.setItem(this._newKey, JSON.stringify(data));\r\n            this.personalConf = data;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getActiveTabIndex(tabName?: string) {\r\n        const d = this.getPersonalData();\r\n        if (!tabName) {\r\n            return d && d.tabIndex ? d.tabIndex  : 'datalist';\r\n        }\r\n        return tabName;\r\n    }\r\n\r\n    updateQueckSelected(selectedRow: any, localeId: string) {\r\n        const quickItems = this.getQuickSelected(localeId);\r\n\r\n        if (quickItems && quickItems.length) {\r\n            const selectedIndex = [];\r\n            quickItems.forEach((element, index) => {\r\n                if (this.singleSelect) {\r\n                    if (element && selectedRow && element[this.idField] === selectedRow[this.idField]) {\r\n                        selectedIndex.push(index);\r\n                    }\r\n                } else {\r\n                    if (selectedRow) {\r\n                        selectedRow.forEach(item => {\r\n                            if (element && element[this.idField] === item[this.idField]) {\r\n                                selectedIndex.push(index);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            selectedIndex.forEach(index => {\r\n                quickItems[index] = null;\r\n            });\r\n\r\n            this.personalConf.quickSelected[localeId] =\r\n                this.personalConf.quickSelected[localeId].filter(v => v !== null);\r\n            if (this.singleSelect) {\r\n                this.personalConf.quickSelected[localeId].unshift(selectedRow);\r\n            } else {\r\n                if (selectedRow) {\r\n                    selectedRow.forEach(element => {\r\n                        this.personalConf.quickSelected[localeId].unshift(element);\r\n                    });\r\n                }\r\n            }\r\n            this.personalConf.quickSelected[localeId].length =\r\n                this.personalConf.quickSelected[localeId].length > 5 ?\r\n                    5 : this.personalConf.quickSelected[localeId].length;\r\n        } else {\r\n            const _qs = this.personalConf.quickSelected || {};\r\n            let newData;\r\n            if (this.singleSelect) {\r\n                newData = Object.assign(_qs, { [localeId]: [selectedRow] });\r\n            } else {\r\n                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;\r\n                newData = Object.assign(_qs, { [localeId]: selectedRow });\r\n            }\r\n            this.personalConf.quickSelected = newData;\r\n        }\r\n\r\n        this.savePersonalConfig(this.personalConf);\r\n    }\r\n\r\n    /**\r\n     *  æ´æ°æ°æ®ç»æï¼ç°æä¸ªæ§åæ°æ®åè½¬ä¸º ä¸­æç¯å¢ä¸æ°æ®ï¼\r\n     */\r\n    _updatePersonalConfig(per: PersonalConfig) {\r\n        if (per) {\r\n            let flag = false;\r\n            // æ´æ°æ¶èæ°æ®\r\n            if (per.favorite && Array.isArray(per.favorite)) {\r\n                per.favorite = { 'zh-CHS': [...per.favorite] };\r\n                delete per.favorite;\r\n\r\n                flag = true;\r\n            }\r\n            // æ´æ°å¿«æ·å½å¥æ°æ®\r\n            if (per.selected) {\r\n                if (Array.isArray(per.selected)) {\r\n                    per.quickSelected = { 'zh-CHS': [...per.selected] };\r\n                }\r\n                delete per.selected;\r\n                flag = true;\r\n            }\r\n\r\n            if (flag) {\r\n                this.savePersonalConfig(per);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\n\r\nexport class UtilService {\r\n\r\n    constructor(public instance: LookupGridComponent) { }\r\n\r\n\r\n}\r\n","import { TreeNode } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { TreeInfo } from '../lookup-grid-options';\r\n\r\nexport class TreeNodeHelper {\r\n    treeInfo: TreeInfo;\r\n    flatAllNodes = [];\r\n    constructor(private instance: LookupGridComponent) { }\r\n\r\n    getTreeInfo(treeNode: TreeNode) {\r\n        if (treeNode.data[this.treeInfo.dataField]) {\r\n            return treeNode.data[this.treeInfo.dataField];\r\n        }\r\n\r\n        const data = treeNode.data;\r\n        if (data && this.treeInfo.dataField) {\r\n\r\n            const treeInfoDataField = this.treeInfo.dataField.toLowerCase();\r\n            const dataField = Object.keys(treeNode.data).find(n => {\r\n                return n.toLowerCase() === treeInfoDataField;\r\n            });\r\n            if (dataField) {\r\n                return data[dataField];\r\n            } else {\r\n                console.error(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`);\r\n            }\r\n        } else {\r\n            console.error(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`);\r\n        }\r\n    }\r\n\r\n    getTreeNodeLayer(treeNode: TreeNode) {\r\n        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];\r\n    }\r\n    /** æ´æ°èç¹çå±å¼ç¶æã æ ¹æ®ç»ä»¶ä¸­ expandLevel çå¼å³å®\r\n     * -1ï¼ä¸å±å¼ï¼0ï¼å¨é¨å±å¼ï¼>0 å±å¼å°æå®çº§æ°\r\n     */\r\n    updateTreeNodeExpanded(treeNodes: TreeNode[], treeInfo: TreeInfo = null) {\r\n        if (treeInfo) {\r\n            this.treeInfo = treeInfo;\r\n        } else {\r\n            this.treeInfo = this.instance.treeInfo;\r\n        }\r\n        const expandLevel = this.instance.expandLevel;\r\n        if (expandLevel === -1) {\r\n            return;\r\n        }\r\n        if (!this.flatAllNodes.length) {\r\n            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);\r\n        }\r\n\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            tn.expanded = this.shoudExpand(expandLevel, this.getTreeNodeLayer(tn));\r\n            if (this.isSelectNodeParent(tn)) {\r\n                tn.expanded = true;\r\n            }\r\n            if (tn.children && tn.children.length) {\r\n                this.updateTreeNodeExpanded(tn.children, treeInfo);\r\n            } else {\r\n                tn.leaf = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private treeData2Flat(parent, nodes, level, parentIds) {\r\n        const idField = this.instance.idField;\r\n        let arr = [];\r\n        if (nodes && nodes.length) {\r\n\r\n            nodes.forEach((node, index) => {\r\n                // node.parent = parent;\r\n\r\n                let parents = [];\r\n                if (parent) {\r\n                    const parentID = parent.data[idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                }\r\n                const rowNode = {\r\n                    id: node.data[idField],\r\n                    node,\r\n                    level,\r\n                    parents,\r\n                };\r\n                arr.push(rowNode);\r\n                arr = arr.concat(this.treeData2Flat(node, node.children, level + 1, parents));\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    private shoudExpand(expandLevel: number, nodeLayer: number) {\r\n        if (expandLevel === -1) {\r\n            // -1 ä¸ºä¸å±å¼\r\n            return false;\r\n        } else if (expandLevel === 0) {\r\n            // 0 ä¸ºå¨é¨å±å¼\r\n            return true;\r\n        } else {\r\n            // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n            return nodeLayer <= expandLevel;\r\n        }\r\n    }\r\n\r\n    private isSelectNodeParent(treeNode) {\r\n        if (this.instance.navSelectedIds) {\r\n            const allParentIds: string[] = this.flatAllNodes.find(f => f.id === this.instance.navSelectedIds).parents;\r\n            if (allParentIds && allParentIds.length) {\r\n                return allParentIds.includes(treeNode.id);\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getLeafNode(treeNode: TreeNode) {\r\n        if (treeNode && (!treeNode.children || !treeNode.children.length)) {\r\n            return treeNode;\r\n        } else {\r\n            if (treeNode.children.length === 1) {\r\n                return this.getLeafNode(treeNode.children[0]);\r\n            } else {\r\n                return treeNode.children;\r\n            }\r\n        }\r\n    }\r\n\r\n    flatTreeNodes(items, result = []) {\r\n        items = items || [];\r\n        return  items.reduce((c, n) => {\r\n            c.push(n);\r\n            if (n.children && n.children.length) {\r\n                this.flatTreeNodes(n.children, c);\r\n            }\r\n            return c;\r\n        }, result);\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { UserFavoriteData } from '../http/RemoteParams';\r\nimport { FavoriteAction, FavoriteIcon, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class FavoriteHelper {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    constructor(private instance: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.instance.lookupSelectionSer;\r\n    }\r\n\r\n    getFavoriteColumns(): any[] {\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn = Object.assign({}, item);\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = () => FavoriteIcon.delete;\r\n            }\r\n            return rtn;\r\n        });\r\n        return columns;\r\n    }\r\n\r\n    favoriteColumnFormatter = (v: any, data: any  ) => {\r\n        const f =  v ? FavoriteIcon.yes : FavoriteIcon.no;\r\n        if (this.instance.isTree()) {\r\n            const id = data[this.instance.idField];\r\n            if (id) {\r\n                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                const rn = tt.findRowNode(id);\r\n                if (rn) {\r\n                    if (rn.node.selectable) {\r\n                        return f;\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return f;\r\n    }\r\n\r\n    initPersonalInfo() {\r\n        if (this.instance.personalConfigService) {\r\n            const controlID = this.instance.el.nativeElement.id || this.instance.controlId;\r\n            if (!controlID) {\r\n                console.log('LookupGrid - æªè®¾ç½®ç»ä»¶id, æ¶èåè½å°ä¸è½æ­£å¸¸ï¼è¯·è®¾ç½®ç»ä»¶id.');\r\n            }\r\n            const pcstr = this.getPersonalConfigKey(controlID);\r\n            this.instance.personalConfigService.controlID = controlID;\r\n            this.instance.personalConfigService.personalConfigKey = pcstr;\r\n\r\n            const conf = {\r\n                displayType: this.instance.displayType,\r\n                singleSelect: this.instance.singleSelect,\r\n                idField: this.instance.idField,\r\n                textField: this.instance.textField,\r\n                mapFields: Object.assign({}, this.instance.mapFields || {})\r\n            };\r\n\r\n            this.instance.personalConfigService.initPersonalConf(conf);\r\n\r\n            // ä¸ªæ§åéç½®çè®¢éäºä»¶å¤ç\r\n            this.listenPersonalConfigHandler();\r\n        }\r\n    }\r\n\r\n    private getPersonalConfigKey(controlID) {\r\n        // return this.instance.ngControl && this.instance.ngControl.name ? this.instance.ngControl.name : this.instance.mapFields\r\n        //     ? this.instance.mapFields[this.instance.textField]\r\n        //     : '';\r\n\r\n        if (this.instance.ngControl) {\r\n            if (this.instance.ngControl.name) {\r\n                return this.instance.ngControl.name;\r\n            } else {\r\n                if (this.instance.mapFields && this.instance.mapFields.length) {\r\n                    return Object.keys(this.instance.mapFields).map(k => {\r\n                        return this.instance.mapFields[k];\r\n                    }).join('_');\r\n                } else {\r\n                    return this.instance.textField;\r\n                }\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * çå¬æ¶èTABé¡µä¸­ç¸å³äºä»¶ï¼\r\n     * æ°æ®éä¸­ï¼åæ¶éä¸­ï¼ç§»é¤æ¶èï¼åå»äºä»¶\r\n     */\r\n    initFavoriteComponentEvent(cmpRef: ComponentRef<any>) {\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = cmpRef.instance as DataTableComponent;\r\n                fdt.remoteSort = false;\r\n                fdt.selectedRow.subscribe(e => {\r\n                    if (this.instance.singleSelect) {\r\n                        this.lookupSelectionSer.clearSelections();\r\n                    }\r\n                    this.lookupSelectionSer.updateSelections(e.data);\r\n                });\r\n                fdt.unSelectRow.subscribe(e => {\r\n                    this.lookupSelectionSer.unSelect(e.data[this.instance.idField]);\r\n                });\r\n\r\n                if (!fdt.singleSelect) {\r\n                    fdt.checkAll.subscribe(e => {\r\n                        this.lookupSelectionSer.updateSelections(fdt.data, e);\r\n                    });\r\n                }\r\n\r\n                fdt.cellClick.subscribe((e: any) => {\r\n                    if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                        e.event.stopPropagation();\r\n                        // tslint:disable-next-line: no-string-literal\r\n                        const classList = e.event.target['classList'];\r\n                        if (classList.contains('f-lookup-unfavorite')) {\r\n                            if (this.instance.items) {\r\n                                this.instance.items.forEach(item => {\r\n                                    if (item[this.instance.idField] === e.row[this.instance.idField]) {\r\n                                        item[FAVORITE_FIELD_NAME] = false;\r\n                                    }\r\n                                });\r\n\r\n                                const dt = this.instance.componentRef.instance as DataTableComponent;\r\n                                if (dt) {\r\n                                    dt.loadData({\r\n                                        pageSize: this.instance.gridOptions.pageSize,\r\n                                        pageIndex: this.instance.gridOptions.pageIndex,\r\n                                        total: this.instance.gridOptions.total,\r\n                                        data: this.instance.gridOptions.items\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            this.instance.favoriteItems =\r\n                                this.instance.favoriteItems.filter(n => n[this.instance.idField] !== e.row[this.instance.idField]);\r\n\r\n                            this.lookupSelectionSer.updateFavoriteData(e.row, FavoriteAction.delete);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // åå»äºä»¶\r\n                fdt.rowDblClick.subscribe((rowData: any) => {\r\n                    if (this.instance.gridOptions.singleSelect) {\r\n                        this.instance.selectItem(rowData);\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (cmpRef) {\r\n                    const ftt = cmpRef.instance as TreeTableComponent;\r\n                    ftt.remoteSort = false;\r\n                    ftt.nodeSelected.subscribe(e => {\r\n                        if (this.instance.singleSelect) {\r\n                            this.lookupSelectionSer.clearSelections();\r\n                        }\r\n                        this.lookupSelectionSer.updateSelections(e.node.data);\r\n                    });\r\n                    ftt.nodeUnChecked.subscribe(e => {\r\n                        if (e && e.node && e.node.data && e.node.data.id) {\r\n                            // const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                            // tt.unSelectNode(e.node.data.id);\r\n                            this.lookupSelectionSer.unSelect(e.node.data.id);\r\n                        }\r\n                    });\r\n\r\n                    ftt.nodeChecked.subscribe( e => {\r\n                        if (!this.instance.singleSelect) {\r\n                            if (e.nodes && e.nodes.length) {\r\n                                this.instance.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                            } else {\r\n                                if (Array.isArray(e.node)) {\r\n                                    this.instance.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                                } else {\r\n                                    this.instance.multiSelMgr.updateSelections([e.node.data]);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.cellClick.subscribe(row => {\r\n                        if (row.col.field === FAVORITE_FIELD_NAME) {\r\n                            row.event.stopPropagation();\r\n                            const classList = row.event.target['classList'];\r\n                            if (classList.contains('f-lookup-unfavorite')) {\r\n                                const _this = this.instance;\r\n                                (function every(items) {\r\n                                    let hasFinish = false;\r\n                                    items.forEach(item => {\r\n                                        if (hasFinish) {\r\n                                            return;\r\n                                        }\r\n                                        if (item.data[_this.idField] === row.node[_this.idField]) {\r\n                                            item.data[FAVORITE_FIELD_NAME] = false;\r\n                                            hasFinish = true;\r\n                                        } else if (item.children && item.children.length > 0) {\r\n                                            every(item.children);\r\n                                        }\r\n                                    });\r\n                                })(this.instance.items);\r\n                                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                                tt.loadData(this.instance.items);\r\n\r\n                                this.lookupSelectionSer.updateFavoriteData(row.node.data, FavoriteAction.delete);\r\n                            }\r\n                        }\r\n                    });\r\n                    ftt.dblClick.subscribe((treeNode: TreeNode) => {\r\n                        if (this.instance.gridOptions.singleSelect && treeNode.selectable) {\r\n                            if (this.instance.okButton) {\r\n                                this.instance.okButton.nativeElement.click();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getFavoritData() {\r\n        if (this.instance.personalConf) {\r\n            const favData = this.instance.personalConf.favorite;\r\n            const _data = (favData && favData[this.instance.localService.localeId]) ? favData[this.instance.localService.localeId] : [];\r\n            return _data;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getFavoritIds() {\r\n        return this.getFavoritData();\r\n    }\r\n\r\n    _loadFavoriteData(data = null) {\r\n        const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n        this.loadFavoriteDatatable(fdt, data);\r\n        fdt.cd.markForCheck();\r\n        this.instance.closeLoading();\r\n    }\r\n\r\n    // å è½½æ¶ègridæ°æ®\r\n    loadFavoritesData(res = null) {\r\n        const favIds = this.getFavoritIds();\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                if (this.instance.favoriteDataFrom === 'locale') {\r\n                    if (res) {\r\n                        this._loadFavoriteData(res.items);\r\n                    } else {\r\n                        // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                        //     if (resData) {\r\n                        //         this._loadFavoriteData(resData.items);\r\n                        //     }\r\n                        //     this.instance.closeLoading();\r\n                        // });\r\n                    }\r\n                } else {\r\n                    const favData = this.getFavoritData();\r\n                    this.loadFavoriteDatatable(fdt, res ? res.items : favData);\r\n                }\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (this.instance.favoritesComponentRef && this.instance.favoritesComponentRef.instance instanceof TreeTableComponent) {\r\n                    const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                    this.bindFavTreetable(ftt);\r\n\r\n                    if (this.instance.favoriteDataFrom === 'locale') {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items || [], ftt);\r\n                        } else {\r\n                            // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                            //     if (resData) {\r\n                            //         const items = resData.items;\r\n                            //         this.loadFavoriteForTreeTable(items, ftt);\r\n                            //     }\r\n                            //     this.instance.closeLoading();\r\n                            // });\r\n                        }\r\n                    } else {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items, ftt);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadFavoriteDatatable(fdt: DataTableComponent, data?: any) {\r\n        if (data !== undefined) {\r\n            this.instance.favoriteItems = data;\r\n        }\r\n\r\n        if (fdt.columns && !fdt.columns.length) {\r\n            fdt.columns = this.instance.favoriteColumns;\r\n        }\r\n\r\n        fdt.loadData({\r\n            total: 0,\r\n            pageSize: 20,\r\n            pageIndex: 1,\r\n            data: this.instance.favoriteItems\r\n        });\r\n\r\n\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n        fdt.cd.detectChanges();\r\n    }\r\n\r\n\r\n    private bindFavTreetable(ftt: TreeTableComponent) {\r\n        ftt.allColumnsTitle = this.instance.allColumnsTitle;\r\n        ftt.idField = this.instance.idField;\r\n\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn: any = { ...item };\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = (v: any, data: any): any => {\r\n                    const favids = this.getFavoritIds();\r\n                    if (favids && favids.length) {\r\n                        const index = favids.findIndex(el => el === data[this.instance.idField]);\r\n                        if (index >= 0) {\r\n                            return FavoriteIcon.delete;\r\n                        }\r\n                    }\r\n                    return '';\r\n                };\r\n            }\r\n            return rtn;\r\n        });\r\n        this.instance.favoriteColumns = columns;\r\n        ftt.columns = columns;\r\n\r\n\r\n        if (this.instance.gridOptions.treeInfo) {\r\n            ftt.onlySelectLeaf = this.instance.gridOptions.treeInfo.onlySelectLeaf;\r\n        }\r\n\r\n        if (!ftt.singleSelect) {\r\n            ftt.checkOnSelect = true;\r\n            ftt.selectOnCheck = true;\r\n            ftt.showCheckbox = true;\r\n\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.instance.enableCascade) {\r\n                this.instance.ttEventMgr.cascadeValueChanged(this.instance.cascadeStatus);\r\n            } else {\r\n                ftt.cascadeCheck = false;\r\n                ftt.cascadeDown = false;\r\n                ftt.cascadeUp = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    initFavoriteTreeData(items) {\r\n        const treeInfo = this.instance.gridOptions.treeInfo;\r\n\r\n        if (treeInfo && !treeInfo['treeDataIsInit']) {\r\n            if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                items = this.instance.lookupUtils.makeTree(items, treeInfo);\r\n            } else {\r\n                items = this.instance.lookupUtils.makeTreeWithParentID(\r\n                    items,\r\n                    '',\r\n                    `${treeInfo.dataField}.${treeInfo.parentField}`,\r\n                    this.instance.idField\r\n                );\r\n            }\r\n        }\r\n        return this.instance.checkNodeCanBeSelect(items, true);\r\n    }\r\n\r\n    loadFavoriteForTreeTable(items, ftt: any) {\r\n        items = this.initFavoriteTreeData(items);\r\n        this.instance.favoriteItems = items;\r\n        ftt.loadData(items);\r\n        ftt.expandAll();\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n\r\n        return items;\r\n    }\r\n\r\n    // æ´æ°åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n    updateFavoritesStatus(data: any[]) {\r\n\r\n        if (!data || !this.instance.useFavorite) {\r\n            return;\r\n        }\r\n\r\n        const favIds = this.getFavoritIds();\r\n\r\n        if (favIds && favIds.length) {\r\n            // å¤çæ°æ®åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n            if (this.instance.displayType !== LookupGridDisplayType.TreeList) {\r\n                data.map(item => {\r\n                    if (favIds && favIds.length && favIds.find(v => v === item[this.instance.idField])) {\r\n                        item[FAVORITE_FIELD_NAME] = true;\r\n                    }\r\n                });\r\n            } else {\r\n                const _this = this.instance;\r\n                (function each(_data) {\r\n                    _data.forEach(item => {\r\n                        if (favIds && favIds.length && favIds.find(v => v === item.data[_this.idField])) {\r\n                            item.data[FAVORITE_FIELD_NAME] = true;\r\n                        }\r\n                        if (item.children && item.children.length > 0) {\r\n                            each(item.children);\r\n                        }\r\n                    });\r\n                })(data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _updateFavorites(value: any, action) {\r\n        const localeID = this.instance.localService.localeId;\r\n        this.instance.personalConf.favorite = this.instance.personalConf.favorite || {};\r\n        const items = value.filter(n => !n['_addtional_']);\r\n        const newVal = items.map(n => n[this.instance.idField]).filter(n => n !== null && n !== undefined);\r\n        // const favIds = this.instance.personalConf.favorite[localeID] || [];\r\n        this.instance.personalConf.favorite[localeID] = newVal;\r\n        return newVal;\r\n    }\r\n\r\n    // æ¶èæ°æ®ç®¡ç\r\n    private listenPersonalConfigHandler() {\r\n        this.lookupSelectionSer.favoriteItems$.subscribe(n => {\r\n            if (!this.instance.favoritesComponentRef) {\r\n                return;\r\n            }\r\n\r\n            const { items, action } = n;\r\n            const favids = this._updateFavorites(items, action);\r\n\r\n            this.instance.httpMgr.submitFavoriteData(action);\r\n\r\n            if (this.instance.displayType === LookupGridDisplayType.List || this.instance.displayType.includes('NAV')) {\r\n                const dt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                this.loadFavoriteDatatable(dt, items);\r\n            } else if (this.instance.displayType === LookupGridDisplayType.TreeList) {\r\n                const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                // const favids = items.map(d => d.id);\r\n                this.instance.showLoading();\r\n                this.instance.httpMgr.getData({ favoriteIds: favids }, 'fav').subscribe(resData => {\r\n                    if (resData) {\r\n                        const _items = resData.items;\r\n                        this.loadFavoriteForTreeTable(_items, ftt);\r\n                    } else {\r\n                        this.instance.favoriteItems = [];\r\n                        ftt.loadData([]);\r\n                    }\r\n                    this.instance.closeLoading();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\n\r\nexport class SelectionManager {\r\n    constructor(private ins: LookupGridComponent) {\r\n\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    getBindingData() {\r\n        let jsonData = this.ins.bindingData;\r\n        if (\r\n            this.ins.ngControl &&\r\n            this.ins.ngControl.formDirective &&\r\n            this.ins.ngControl.formDirective.form &&\r\n            this.ins.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ins.ngControl.formDirective.form.bindingData;\r\n            jsonData = bindingData;\r\n\r\n            if (bindingData.getObject) {\r\n                jsonData = bindingData.getObject().toJSON();\r\n            }\r\n        }\r\n        return jsonData;\r\n    }\r\n\r\n    initDisplayValue() {\r\n        const jsonData = this.getBindingData();\r\n        if (jsonData && this.ins.mapFields) {\r\n            const idField = this.ins.idField;\r\n            let targetField = this.ins.mapFields[idField];\r\n\r\n            if (targetField) {\r\n                if (targetField.indexOf(',') > -1 ) {\r\n                    targetField = targetField.split(',')[0];\r\n                }\r\n\r\n                const val = this.ins.utils.getValue(targetField, jsonData);\r\n                if (val) {\r\n                    this.ins.displayValue = val;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _clearSelections() {\r\n        const { cmpRefInstance: t } = this.getDataCmpInstance();\r\n        if (t) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                t.clearAll(false);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                t.dtBody.selectedRowIndex = -1;\r\n                t.dtBody.selections = undefined;\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¸®å©çªå£æå¼åï¼æ ¹æ® displayValue éä¸­æ°æ®\r\n     */\r\n    selectCurrentValue(selectedIds = []) {\r\n\r\n        if (!this.ins.enableToSelect) {\r\n            return;\r\n        }\r\n\r\n\r\n        const { cmpRefInstance: t, items } = this.getDataCmpInstance();\r\n        if (!t || !items || !items.length) {\r\n            return;\r\n        }\r\n\r\n        this._clearSelections();\r\n\r\n        if (!selectedIds || !selectedIds.length) {\r\n            const selectedRows = this.ins.lookupSelectionSer.getSelections();\r\n            if (selectedRows.length) {\r\n                selectedIds = selectedRows.map(n => n[this.ins.idField]);\r\n            }\r\n        }\r\n\r\n        // const _ids = this.getSelectedIds();\r\n        // selectedIds = selectedIds.concat(_ids);\r\n        // selectedIds = Array.from(new Set(selectedIds));\r\n\r\n        if (selectedIds && selectedIds.length) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                this.selected4Treetable(t, selectedIds);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                this.selected4Datatable(t, items, selectedIds);\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDataCmpInstance() {\r\n        let ref = null;\r\n        let items = null;\r\n        if (this.ins.activeTab === 'datalist') {\r\n            if (this.ins.isTree()) {\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');\r\n                items = (ref as TreeTableComponent).serializedValue;\r\n            } else {\r\n                items = this.ins.items;\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance();\r\n            }\r\n        } else if (this.ins.activeTab === 'favorite') {\r\n            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');\r\n            items = this.ins.favoriteItems;\r\n        }\r\n        return { cmpRefInstance: ref, items };\r\n    }\r\n\r\n    private selected4Datatable(t: any, items: any, values: any) {\r\n        if (this.ins.singleSelect) {\r\n            items.forEach((item, index) => {\r\n                if (item[this.ins.idField] === values[0]) {\r\n                    if (!t.dtBody.isSelected(item)) {\r\n                        t.dtBody.selectedRowIndex = -1;\r\n                        t.dtBody.selectedRow('', index, item);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // const values = this.getSelectedIds();\r\n            values.forEach(id => {\r\n                const r = items.find(n => n[this.ins.idField] == id);\r\n                if (r) {\r\n                    t.checkRow(id);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private selected4Treetable(t: any, valueArr: any) {\r\n        if (this.ins.singleSelect) {\r\n            t.selectNode(valueArr[0], false, false);\r\n        } else {\r\n            // const valueArr = this.getSelectedIds();\r\n            t.checkedNodes(valueArr, false, false);\r\n            t.selectNodes(valueArr);\r\n        }\r\n    }\r\n\r\n    getSelectedIds() {\r\n        let values = [];\r\n        const s = this.ins.multipleChoiceSeparator; // å¤éåéç¬¦\r\n        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {\r\n            values = this.ins.displayValue.split(s);\r\n        } else {\r\n            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {\r\n                values = [this.ins.displayValue];\r\n            }\r\n        }\r\n\r\n        // å¯ç¨æ¾ç¤ºå¤éåè¡¨\r\n        if (this.ins.showSelected) {\r\n            const rows = this.ins.lookupSelectionSer.getSelections();\r\n            if (rows && rows.length) {\r\n                values = rows.map(n => n[this.ins.idField]);\r\n            } else {\r\n                values = [];\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { DataTableComponent } from '@farris/ui-datatable';\r\nimport { of } from 'rxjs';\r\nimport { catchError, take, tap } from 'rxjs/operators';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class DataTableEventManager {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    onSearch($event: { field: string; value: string } = { field: '*', value: '' }) {\r\n        if ($event && $event.field !== '*' && !$event.value) {\r\n            this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            return;\r\n        }\r\n\r\n        const p = {\r\n            pageInfo: { pageIndex: 1, pageSize: this.ins.gridOptions.pageSize },\r\n            search: $event\r\n        };\r\n        if (this.ins.uri) {\r\n            if (!this.ins.searching) {\r\n                this.ins.searching = true;\r\n                this.ins.httpMgr.getData(p, 'list').pipe(\r\n                    catchError(err => {\r\n                        this.ins.searching = false;\r\n                        return of({ \"_ERROR_\": err });\r\n                    }),\r\n                    tap(() => {\r\n                        this.ins.searching = false;\r\n                    })\r\n                ).subscribe(\r\n                    data => {\r\n                        this.ins.searching = false;\r\n                        this.ins.closeLoading();\r\n                        if (!data['_ERROR_']) {\r\n                            this._loadData(data);\r\n                        } else {\r\n                            throw new Error(data['_ERROR_']);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            this.ins.search.emit(p);\r\n        }\r\n    }\r\n\r\n    private _loadData(data: LookupGridResult) {\r\n        const self = this.ins;\r\n        self.closeLoading();\r\n        self.favHelper.updateFavoritesStatus(data.items);\r\n        self.loadDataTableData(data);\r\n        // éä¸­æ°æ®\r\n        this.ins.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    bindDataTableEvent() {\r\n        const self = this.ins;\r\n        const dt = self.componentRef.instance as DataTableComponent;\r\n\r\n        dt.selectedRow.subscribe((e: any) => {\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: true });\r\n            this.lookupSelectionSer.updateSelections([e.data]);\r\n            dt.cd.detectChanges();\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(e => {\r\n            this.lookupSelectionSer.unSelect(e.data[self.idField]);\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: false });\r\n        });\r\n\r\n        dt.checkAll.subscribe((e: boolean) => {\r\n            this.lookupSelectionSer.updateSelections(dt.data, e);\r\n            this.ins.checkedChange.emit({ data: dt.data, isCheck: e });\r\n        });\r\n\r\n        dt.pageChanged.subscribe((e: any) => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe((data: LookupGridResult) => {\r\n                    this._loadData(data);\r\n                });\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe(e => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe(\r\n                    data => {\r\n                        this._loadData(data);\r\n                    },\r\n                    err => {\r\n                        self.closeLoading();\r\n                    }\r\n                );\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.search.subscribe((e: any) => {\r\n            self._searchState = e;\r\n            this.onSearch(e);\r\n        });\r\n        // åå»äºä»¶\r\n        dt.rowDblClick.subscribe((rowData: any) => {\r\n            if (self.gridOptions.singleSelect) {\r\n                // this.lookupSelectionSer.updateSelections([rowData]);\r\n                self.selectItem(rowData);\r\n            }\r\n        });\r\n\r\n        // æ¶èäºä»¶\r\n        dt.cellClick.subscribe((e: any) => {\r\n            if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                e.event.stopPropagation();\r\n                const classList = e.event.target['classList'];\r\n                if (classList.contains('f-lookup-favorite')) {\r\n                    self.items.forEach(item => {\r\n                        const id = self.utils.getValue(self.idField, item);\r\n                        if (id === self.utils.getValue(self.idField, e.row)) {\r\n                            item[FAVORITE_FIELD_NAME] = !item[FAVORITE_FIELD_NAME];\r\n                        }\r\n                    });\r\n                    dt.loadData({\r\n                        pageSize: self.gridOptions.pageSize,\r\n                        pageIndex: self.gridOptions.pageIndex,\r\n                        total: self.gridOptions.total,\r\n                        data: self.gridOptions.items\r\n                    });\r\n\r\n                    // æ´æ°æ¶èæ°æ®\r\n                    const faction = e.row[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete;\r\n\r\n                    if (faction ===  FavoriteAction.add) {\r\n                        this.ins.favoriteItems = [...this.ins.favoriteItems, e.row];\r\n                    } else {\r\n                        this.ins.favoriteItems = this.ins.favoriteItems.filter(n => {\r\n                            return self.utils.getValue(self.idField, n) !== self.utils.getValue(self.idField, e.row);\r\n                        });\r\n                    }\r\n\r\n                    this.lookupSelectionSer.updateFavoriteData(e.row, faction);\r\n                }\r\n            }\r\n        });\r\n\r\n        dt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any }) => {\r\n\r\n            if (!this.ins.remoteSort) {\r\n                return;\r\n            }\r\n\r\n            const { sortName, sortOrder } = { ...sort };\r\n\r\n            const col = this.ins.columns.find(n => n.field === sortName);\r\n\r\n            const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n            const param = {\r\n                sortName: _sortName,\r\n                sortOrder,\r\n                search: self._searchState,\r\n                pageInfo: {\r\n                    pageSize: self.pageSize,\r\n                    pageIndex: 1\r\n                }\r\n            };\r\n\r\n            self.httpMgr.getData(param, 'search').subscribe(d => {\r\n                self.loadDataTableData(d);\r\n                self.closeLoading();\r\n            });\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe(() => {\r\n            self._searchState = null;\r\n            this.onSearch();\r\n        });\r\n    }\r\n}\r\n\r\n","import { EMPTY, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { LookupGridResult, PickingResult } from '../lookup-grid-options';\r\n\r\n\r\n\r\n /** æ£æ¥å¸®å©è¾å¥æ¡å¼åååè¿åçæ¥è¯¢ç»æ */\r\nfunction checkSearchResult(data = null) {\r\n    if (this.searchOnServer) {\r\n        // this._searchResult = data;\r\n        // this.showDialog();\r\n        this.isShow = true;\r\n    } else {\r\n        this.setModelValue(this.displayText);\r\n        this.runDictPickedEvent(null);\r\n    }\r\n}\r\n\r\nexport function onTextChanged() {\r\n\r\n    const self = this;\r\n\r\n    const isPending = () => {\r\n        return this.lookupUtils.rts.getFormState('lookup.pending');\r\n    };\r\n\r\n    const searchData = (e) => {\r\n        if (this.isTextChange && this.displayText && (!this.nosearch || e.originalEvent) && !isPending()) {\r\n            this.lookupUtils.pendingStart();\r\n\r\n            this.dictPickingSubscription = this.dictPicking({\r\n                instance: this\r\n            }).pipe(\r\n                switchMap((pr: PickingResult) => {\r\n                    let o = true;\r\n                    if (pr === undefined || pr === null) {\r\n                        o = true;\r\n                    }\r\n\r\n                    if (typeof pr === 'boolean') {\r\n                        o = pr;\r\n                    }\r\n\r\n                    if (typeof pr === 'object') {\r\n                        if (pr.showDialog === undefined) {\r\n                            o = true;\r\n                        } else {\r\n                            o = pr.showDialog;\r\n                        }\r\n\r\n                        if (pr.data) {\r\n                            /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                            this.customData = pr.data;\r\n                        }\r\n                    }\r\n\r\n                    if (o) {\r\n                        return this.httpMgr.getData(\r\n                            {\r\n                                search: {\r\n                                    field: '*',\r\n                                    value: this.displayText\r\n                                }\r\n                            },\r\n                            'search'\r\n                        );\r\n                    } else {\r\n                        return of({ SHOWDIALOG: o, MESSAGE:  pr.message || '' });\r\n                    }\r\n                })\r\n            ).subscribe(\r\n                (data: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    if (data.hasOwnProperty('SHOWDIALOG')) {\r\n                        if (data.SHOWDIALOG && data.MESSAGE) {\r\n                            this.notifyService.warning(data.MESSAGE);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (data.items && data.items.length === 1) {\r\n                        let rowdata = data.items[0];\r\n                        if (this.isTree()) {\r\n                            const leafNode = this.treeNodeHelper.getLeafNode(rowdata);\r\n                            if (Array.isArray(leafNode)) {\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            } else {\r\n                                rowdata = leafNode.data;\r\n                            }\r\n                        }\r\n                        if (!this.singleSelect) {\r\n                            rowdata = [ rowdata ];\r\n                        }\r\n                        this.selectItem(rowdata);\r\n                    } else {\r\n                        checkSearchResult.bind(self, data)();\r\n                    }\r\n                }, (err: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    this.messagerService.error(err ? err.Message : err);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    let inputBlurHandler = null;\r\n\r\n    if (this.inputGroup && this.inputGroup.textbox && !this.nosearch) {\r\n        this.lookupUtils.setActiveLookupInstance(this);\r\n        inputBlurHandler = this.render2.listen(this.inputGroup.textbox.nativeElement, 'blur', searchData );\r\n    }\r\n\r\n    if (this.inputGroup) {\r\n        this.inputGroup.enterHandle.subscribe( searchData);\r\n\r\n        this.inputGroup.keydownHandle.subscribe((e: any) => {\r\n            let canOpen = false;\r\n            if (e.code === 'ArrowRight') {\r\n                if (this.editable) {\r\n                    canOpen = !e.target.value || e.target.selectionStart === e.target.value.length;\r\n                } else {\r\n                    canOpen = true;\r\n                }\r\n            } else {\r\n                canOpen = e.code === this.shortcutKey.open;\r\n            }\r\n            if (canOpen) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                this.showDialog();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { take, tap, catchError } from 'rxjs/operators';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\n\r\nexport class TreeTableEventManager {\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    /**\r\n     * æ è¯å½åæ°æ®æ¯å¦æ¥è¯¢ç»æ\r\n     */\r\n    private IS_SEARCH_RESULT = false;\r\n\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    searchTreeData(search: { field: string; value: string }) {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        // å¤æ­uri ååºsearch.emit();\r\n        if (this.ins.searching) {\r\n            return;\r\n        } else {\r\n            this.ins.searching = true;\r\n        }\r\n        return this.ins.httpMgr.getData({ search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(\r\n            tap(() => {\r\n                this.ins.searching = false;\r\n            }),\r\n            catchError((err) => {\r\n                this.ins.searching = false;\r\n                return of(err);\r\n            })\r\n        ).subscribe(resData => {\r\n            if (resData) {\r\n                this.ins.items = resData.items;\r\n                this.ins.closeLoading();\r\n                tt.clearAll();\r\n\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (!treeInfo['treeDataIsInit']) {\r\n                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                        this.ins.items = this.ins.lookupUtils.makeTree(this.ins.items, treeInfo);\r\n                    } else {\r\n                        this.ins.items = this.ins.lookupUtils.makeTreeWithParentID(\r\n                            this.ins.items,\r\n                            '',\r\n                            `${treeInfo.dataField}.${treeInfo.parentField}`,\r\n                            this.ins.idField\r\n                        );\r\n                    }\r\n                }\r\n\r\n\r\n                const checkNodes = (nodes): TreeNode[] => {\r\n                    if (nodes && nodes.length) {\r\n                        return nodes.map((node: TreeNode) => {\r\n                            if (node.hasOwnProperty('addtional')) {\r\n                                node.selectable = !node['addtional'];\r\n                            }\r\n\r\n                            if (node.children && node.children.length) {\r\n                                checkNodes(node.children);\r\n                            }\r\n                            return node;\r\n                        });\r\n                    }\r\n                    return nodes;\r\n                };\r\n\r\n                const expandFirstNode = (nodes): TreeNode[] => {\r\n                    if (nodes && nodes.length) {\r\n                        return nodes.map((node: TreeNode) => {\r\n                            if (node.children && node.children.length) {\r\n                                node.expanded = true;\r\n                                expandFirstNode(node.children);\r\n                            }\r\n                            return node;\r\n                        });\r\n                    }\r\n                    return nodes;\r\n                };\r\n\r\n                const _nodes = checkNodes(this.ins.items);\r\n                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {\r\n                    _nodes[0].expanded = true;\r\n                    _nodes[0].children = expandFirstNode(_nodes[0].children);\r\n                }\r\n                this.ins.items = _nodes;\r\n\r\n\r\n                // å è½½æ¶èæ°æ®\r\n                if (this.ins.useFavorite) {\r\n                    // æ´æ°æ°æ®çæ¶èç¶æ\r\n                    this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                }\r\n\r\n                tt.loadData(this.ins.items);\r\n                // // å±å¼æ¥è¯¢ç»æã\r\n                // if (search.value && this.ins.items.length) {\r\n                //     tt.toggleExpand(this.ins.items[0], true);\r\n                // }\r\n                tt.resize();\r\n\r\n                this.IS_SEARCH_RESULT = true;\r\n\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n\r\n            this.ins.search.emit(search);\r\n        });\r\n    }\r\n\r\n    private getChildren(\r\n        parentPath,\r\n        parentLayer,\r\n        searchData: { searchField: string; searchValue: string }\r\n    ): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const search = { parentLayer, category: 'children', ...searchData };\r\n        if (this.ins.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n\r\n        if (this.IS_SEARCH_RESULT) {\r\n            param.enableFullTree = false;\r\n            param.loadTreeDataType = 'layerload';\r\n            search.searchValue = '';\r\n            search.searchField = '*';\r\n            param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n\r\n        return this.ins.http.getData(uri, param);\r\n    }\r\n\r\n\r\n    bindTreetableEvent() {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const _searchTreeData = (searchparam: any) => {\r\n            if (this.ins.remoteSearch) {\r\n                this.ins._searchState = searchparam;\r\n                this.searchTreeData(searchparam);\r\n            } else {\r\n                // TODO: å¨é¨å è½½ï¼åç«¯æç´¢ éè¦å®å\r\n                // if (this.ins.loadTreeDataType === 'loadall' && tt.searchHandle) {\r\n                //     tt.searchHandle.search(searchparam.field, searchparam.value, 'client');\r\n                // }\r\n                this.ins.search.emit(searchparam);\r\n            }\r\n        };\r\n\r\n        const isLoadAllTreeData = () => {\r\n            if (this.ins.loadTreeDataType === 'default') {\r\n                return tt.loadDataType === 'all';\r\n            } else {\r\n                return this.ins.loadTreeDataType === 'loadall';\r\n            }\r\n        };\r\n\r\n        const isAsyncLoadTreeData = () => {\r\n            if (this.ins.loadTreeDataType === 'default') {\r\n                return tt.loadDataType === 'async';\r\n            } else {\r\n                return this.ins.loadTreeDataType === 'layerload';\r\n            }\r\n        };\r\n\r\n\r\n        tt.dblClickExpand = !this.ins.singleSelect; // ç¦ç¨åå»å±å¼èç¹\r\n\r\n        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;\r\n        tt.idField = this.ins.idField;\r\n        tt.columns = this.ins.columns;\r\n        tt.searchFields = this.ins.gridOptions.searchFields;\r\n        if (this.ins.treeInfo) {\r\n            tt.loadDataType = this.ins.treeInfo.loadDataType;\r\n            tt.virtualized = true;\r\n            this.ins.allData = cloneDeep(this.ins.items);\r\n        }\r\n\r\n        if (this.ins.gridOptions.treeInfo) {\r\n            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;\r\n            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;\r\n        }\r\n\r\n        if (!tt.singleSelect) {\r\n            tt.checkOnSelect = true;\r\n            tt.selectOnCheck = true;\r\n            tt.showCheckbox = true;\r\n            tt.showCheckAll =  this.ins.showCheckAll;\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.ins.enableCascade) {\r\n                this.cascadeValueChanged(this.ins.cascadeStatus);\r\n            } else {\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n            }\r\n        }\r\n\r\n        tt.enableFindText = this.ins.enableFindText;\r\n        // tt.findField = this.textField;\r\n        tt.nodeSelected.subscribe((e: any) => {\r\n            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {\r\n            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;\r\n            //     ftt.clearSelections();\r\n            // }\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.lookupSelectionSer.updateSelections([e.node.data]);\r\n            this.ins.checkedChange.emit({ data: [e.node.data] , isCheck: true  });\r\n        });\r\n\r\n        tt.nodeChecked.subscribe( e => {\r\n            if (!this.ins.singleSelect) {\r\n                let data = null;\r\n                if (e.nodes && e.nodes.length) {\r\n                    data = e.nodes.map(n => n.data);\r\n                    // this.ins.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                } else {\r\n                    if (Array.isArray(e.node)) {\r\n                        data = e.node.map(n => n.data);\r\n                        // this.ins.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                    } else {\r\n                        data = [e.node.data];\r\n                        // this.ins.multiSelMgr.updateSelections([e.node.data]);\r\n                    }\r\n                }\r\n                this.ins.multiSelMgr.updateSelections(data);\r\n                this.ins.checkedChange.emit({ data, isCheck: true  });\r\n            }\r\n        });\r\n\r\n        tt.nodeUnChecked.subscribe((e: any) => {\r\n            if (e && e.node) {\r\n                if (!this.ins.singleSelect) {\r\n                    this.ins.multiSelMgr.remove(e.node.id);\r\n\r\n                    // åå±å è½½ï¼å¤éï¼åå«ä¸çº§æ¶ï¼åæ¶å¾é éè¦å°å½åèç¹çææå­çº§æ°æ®ä¹è¦åæ¶éæ©ï¼å³ä»å·²éè®°å½ä¸­ç§»é¤\r\n                    if (tt.loadDataType !== 'all' && this.ins.treeInfo.layerType === 'pathcode' &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down')) {\r\n                        if (e.node.children && e.node.children.length) {\r\n                            const nodes = e.node.children.map(n => n.data);\r\n                            this.ins.lookupSelectionSer.updateSelections(nodes, false);\r\n                        } else {\r\n                            const pathcode = e.node.data[this.ins.treeInfo.dataField][this.ins.treeInfo.pathField];\r\n                            this.ins.lookupSelectionSer.unselectByPathcode(pathcode);\r\n                        }\r\n                    }\r\n\r\n                    if (e.nodes && e.nodes.length) {\r\n                        this.ins.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        this.ins.checkedChange.emit({ data: e.nodes.map(n => n.data), isCheck: false });\r\n                    } else {\r\n                        this.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });\r\n                    }\r\n                } else {\r\n                    const ftt = this.ins.favoritesComponentRef && (this.ins.favoritesComponentRef.instance as TreeTableComponent);\r\n                    if (ftt && ftt.findRowNode(e.node.id)) {\r\n                        ftt.unSelectNode(e.node.id);\r\n                    }\r\n\r\n                    this.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.search.subscribe(searchparam => {\r\n            if (searchparam.field !== '*' && !searchparam.value) {\r\n                this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            } else {\r\n                _searchTreeData(searchparam);\r\n            }\r\n        });\r\n\r\n        tt.cellClick.subscribe((e: any) => {\r\n            if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                e.event.stopPropagation();\r\n                // tslint:disable-next-line: no-string-literal\r\n                const classList = e.event.target['classList'];\r\n                if (classList.contains('f-lookup-favorite')) {\r\n                    // classList.toggle('f-icon-star');\r\n                    // classList.toggle('f-icon-star-outline');\r\n                    const _this = this.ins;\r\n\r\n                    (function each(arr) {\r\n                        if (arr) {\r\n                            arr.forEach(item => {\r\n                                const id = _this.utils.getValue(_this.idField, item.data);\r\n                                if (id === e.node.id) {\r\n                                    item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];\r\n                                    return true;\r\n                                } else if (item.children && item.children.length > 0) {\r\n                                    return each(item.children);\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                    })(this.ins.items);\r\n                    tt.loadData(this.ins.items);\r\n\r\n                    // æ´æ°æ¶èæ°æ®\r\n                    this.lookupSelectionSer.updateFavoriteData( e.node.data,\r\n                        e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.dblClick.subscribe((treeNode: TreeNode) => {\r\n            if (this.ins.gridOptions.singleSelect && treeNode.selectable) {\r\n                if (this.ins.okButton) {\r\n                    // this.lookupSelectionSer.select(treeNode.data);\r\n                    // this.ins.okButton.nativeElement.click();\r\n                    this.ins.selectItem(treeNode.data);\r\n                }\r\n            }\r\n        });\r\n        const loadAllData = isLoadAllTreeData();\r\n        tt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any; }) => {\r\n            if (isLoadAllTreeData()) {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = { ...sort };\r\n\r\n                const col = this.ins.columns.find(n => n.field === sortName);\r\n                const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n                const param = Object.assign({ sortName: _sortName, sortOrder }, { search: this.ins._searchState });\r\n                this.ins.httpMgr.getData(param, 'search').subscribe(d => {\r\n                    this.ins.items = d.items;\r\n                    this.ins.closeLoading();\r\n                    tt.clearAll();\r\n                    const items = this.ins.checkNodeCanBeSelect(d.items, false);\r\n                    tt.loadData(items);\r\n                    tt.resize();\r\n                });\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe(() => {\r\n            this.ins._searchState = null;\r\n            this.IS_SEARCH_RESULT = false;\r\n            const _items = this.ins.checkNodeCanBeSelect(this.ins.allData, loadAllData);\r\n            if (!_items || !_items.length) {\r\n                _searchTreeData({ field: '*', value: '' });\r\n            } else {\r\n                this.ins.items = _items;\r\n                this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                tt.loadData(_items);\r\n            }\r\n        });\r\n\r\n        tt.expand.subscribe((tn: TreeNode) => {\r\n            if (tn.leaf) {\r\n                return;\r\n            }\r\n            if (!tn.children || !tn.children.length) {\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (isAsyncLoadTreeData() || this.IS_SEARCH_RESULT ) {\r\n                    let parentPath = '';\r\n                    let parentLayer = -1;\r\n                    const { field = '*', value = '' } = {\r\n                        ...tt.searchData\r\n                    };\r\n\r\n                    tn['showLoading'] = true;\r\n                    tt.detectChanges();\r\n                    if (treeInfo.layerType === 'parentId') {\r\n                        // ç¶IDå è½½æ¹å¼\r\n                        parentPath = tn['id'];\r\n                    } else {\r\n                        const treeInfoField = treeInfo.dataField;\r\n                        if (treeInfoField) {\r\n                            parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                            parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                        } else {\r\n                            console.log('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                        }\r\n                    }\r\n\r\n                    if (!this.ins.uri) {\r\n                        this.ins.expandTreeNode.emit({\r\n                            instance: tt, node: tn,\r\n                            parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n                    this.getChildren(parentPath, parentLayer, {\r\n                        searchField: field === '*' ? '*' : field,\r\n                        searchValue: value\r\n                    }).subscribe(data => {\r\n                        if (tt) {\r\n                            if (tn && data.items && data.items.length) {\r\n                                if (this.ins.useFavorite) {\r\n                                    // æ´æ°å­èç¹æ¶èç¶æ\r\n                                    this.ins.favHelper.updateFavoritesStatus(data.items);\r\n                                }\r\n\r\n                                const nodes = this.ins.checkNodeCanBeSelect(data.items, false);\r\n\r\n                                tt.appendChildren(nodes, tn);\r\n\r\n                                if (tt.loadDataType !== 'all' && !this.ins.singleSelect && this.ins.isGetAllChidlNodes &&\r\n                                    (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') ) {\r\n                                    const rn = tt.findRowNode(tn.id);\r\n                                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n\r\n                                    // æ´æ°éä¸­è®°å½ç¼å­\r\n                                    const _items = data.items.filter(n => !n.addtional);\r\n                                    if (_items && _items.length) {\r\n                                        this.ins.lookupSelectionSer.updateSelections(_items.map(n => n.data), rn.isChecked);\r\n                                    }\r\n                                }\r\n                            }\r\n                            tn['showLoading'] = false;\r\n                            tt.detectChanges();\r\n                            this.ins.selectionMgr.selectCurrentValue();\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                if (!this.ins.singleSelect && this.ins.enableCascade &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') && this.ins.isGetAllChidlNodes ) {\r\n                    const rn = tt.findRowNode(tn.id);\r\n                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n                    const selectItems = tn.children.filter(n => n.selectable).map(n => n.data);\r\n                    this.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);\r\n                }\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        if (loadAllData && this.ins.items) {\r\n            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);\r\n        }\r\n        return loadAllData;\r\n    }\r\n\r\n    cascadeValueChanged($event) {\r\n        const val = $event;\r\n        // const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';\r\n        const tt = this.ins.lookupCmpMgr.getComponentInstance(instanceTyp) as TreeTableComponent;\r\n\r\n        if (!tt) {\r\n            return;\r\n        }\r\n\r\n        switch (val) {\r\n            case 'enable':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n            case 'disable':\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            case 'up':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeUp = true;\r\n                tt.cascadeDown = false;\r\n                break;\r\n            case 'down':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            default:\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n        }\r\n\r\n        this.ins.cascadeStatus = val || 'enable';\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { FavoriteIcon, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\n\r\nexport class MultiSelectionManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    onSelectedTableCellClick(e: any) {\r\n        if (e.col.field === FAVORITE_FIELD_NAME) {\r\n            e.event.stopPropagation();\r\n            const classList = e.event.target['classList'];\r\n            if (classList.contains('f-lookup-unfavorite')) {\r\n                const rid =  e.row[this.ins.idField];\r\n                this.ins.lookupSelectionSer.unSelect(rid);\r\n                // åæ¶éä¸­ ä¸»åè¡¨ æ¶èåè¡¨ ä¸­çæ°æ®\r\n                if (this.ins.isTree()) {\r\n                    const tt = this.ins.lookupCmpMgr.getComponentInstance('treetable') as TreeTableComponent;\r\n                    tt.unCheckedNode(rid);\r\n                    tt.unSelectNode(rid);\r\n\r\n                    if (this.ins.useFavorite) {\r\n                        const _tt = this.ins.lookupCmpMgr.getComponentInstance('fav') as TreeTableComponent;\r\n                        if (_tt.data && _tt.data.length && _tt.findRowNode(rid)) {\r\n                            _tt.unCheckedNode(rid);\r\n                            _tt.unSelectNode(rid);\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    const dt = this.ins.lookupCmpMgr.getComponentInstance() as DataTableComponent;\r\n                    dt.unCheckRow(rid);\r\n                    if (this.ins.useFavorite) {\r\n                        const _dt = this.ins.lookupCmpMgr.getComponentInstance('fav') as DataTableComponent;\r\n                        if (_dt.data && _dt.data.length) {\r\n                            _dt.unCheckRow(rid);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // åå§åå·²éæ°æ®åä¿¡æ¯\r\n    initSelectedColumns() {\r\n        let selectedColumns = [];\r\n        if (this.ins.showSelected && !this.ins.singleSelect) {\r\n            selectedColumns = cloneDeep(this.ins.gridOptions.columns);\r\n            const favcol = selectedColumns.find(n => n.field === FAVORITE_FIELD_NAME);\r\n            if (favcol) {\r\n                favcol.formatter = () => {\r\n                    return FavoriteIcon.remove;\r\n                };\r\n            } else {\r\n                selectedColumns = selectedColumns.concat([\r\n                    { field: FAVORITE_FIELD_NAME, width: 80, formatter: () => {\r\n                            return FavoriteIcon.remove;\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n        }\r\n\r\n        return selectedColumns;\r\n    }\r\n\r\n    updateSelections(data) {\r\n        if (Array.isArray(data)) {\r\n            this.ins.lookupSelectionSer.updateSelections(data, true);\r\n        } else {\r\n            this.ins.lookupSelectionSer.select(data);\r\n        }\r\n    }\r\n\r\n    remove(id: any) {\r\n        if (id) {\r\n            this.ins.lookupSelectionSer.unSelect(id);\r\n        }\r\n    }\r\n\r\n\r\n    clear() {\r\n        this.ins.lookupSelectionSer.clearSelections();\r\n    }\r\n\r\n    save(rows: any) {\r\n        if (this.ins.showSelected) {\r\n            this.ins.personalConf.selections = rows;\r\n            this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf);\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        let items = this.ins.personalConf ? (this.ins.personalConf.selections || []) : [];\r\n        if (!items.length) {\r\n            items = this.ins.lookupSelectionSer.getSelections();\r\n        }\r\n        this.ins.lookupSelectionSer.loadSelections(items);\r\n    }\r\n}\r\n","import { RemoteParams, SearchParam, UserFavoriteData } from '../http/RemoteParams';\r\nimport { LOAD_DATA_TYPE } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { FavoriteAction, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { Observable, of, forkJoin } from 'rxjs';\r\nimport { map, switchMap, tap, debounceTime } from 'rxjs/operators';\r\n\r\n// å¸®å©é»è®¤ä¸ªæ§åæ°æ®\r\nconst DefaultUserConfig = {\r\n    tabIndex: 'datalist',\r\n    favorite: null,\r\n    size: null\r\n};\r\nexport class LookupHttpManager {\r\n    // æ¯æ¬¡å¸®å©æå¼åï¼æ´æ°æ­¤å¼ï¼åä¸ºä¸ªæ§åæ°æ®çåå§å¼ï¼\r\n    // å³é­çªå£æ¶ï¼ä¸æ­¤è¿è¡å¯¹æ¯ãå¦æä¸æ ·ï¼åä¸ä¿å­ï¼\r\n    private _originalPersonalConfig = DefaultUserConfig;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n\r\n    private disablePagination() {\r\n        return {\r\n            pageIndex: 1,\r\n            pageSize: 500\r\n        };\r\n    }\r\n\r\n    /** æé æ¥è¯¢åæ° */\r\n    buildQueryParams(event?: any, type: LOAD_DATA_TYPE = 'all') {\r\n        const params: RemoteParams = {};\r\n\r\n        if (this.ins.condition) {\r\n            params.condition = cloneDeep(this.ins.condition);\r\n        }\r\n\r\n        const searchParam: SearchParam = { category: type };\r\n        if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {\r\n\r\n            if (this.ins.navigationFilter.idValue && type !== 'textchange') {\r\n                params.relationFilter = [...this.ins.navigationFilter.idValue];\r\n            }\r\n        }\r\n        if (event) {\r\n\r\n            if (type === 'fav' || type === 'selected') {\r\n                event.pageInfo = this.disablePagination();\r\n            }\r\n\r\n\r\n            if (event.pageInfo) {\r\n                params.pageIndex = event.pageInfo.pageIndex;\r\n                params.pageSize = event.pageInfo.pageSize;\r\n            }\r\n\r\n            if (event.search) {\r\n                let sfield = event.search.field;\r\n                if (sfield && sfield === '*') {\r\n                    sfield = '*';\r\n                }\r\n\r\n                searchParam.searchField = sfield;\r\n                searchParam.searchValue = event.search.value;\r\n            }\r\n\r\n            if (event.sortName) {\r\n                searchParam.sortName = event.sortName;\r\n            }\r\n            if (event.sortOrder) {\r\n                searchParam.sortOrder = event.sortOrder;\r\n            }\r\n        }\r\n\r\n        if (type === 'fav' && event.favoriteIds) {\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {\r\n            params.enableFullTree = this.ins.enableFullTree;\r\n        }\r\n\r\n        // æ¥è¯¢æ¶ä¸æé å®æ´æ \r\n        if (type === 'textchange') {\r\n            params.enableFullTree = false;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            searchParam.category = 'fav';\r\n            params.enableFullTree = false;\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        params.searchValue = JSON.stringify(searchParam);\r\n        params.loadTreeDataType = this.ins.loadTreeDataType;\r\n\r\n        params.customData = this.ins.customData;\r\n\r\n        if (this.ins.helpId) {\r\n            params.helpId = this.ins.helpId;\r\n        }\r\n\r\n        if (event.selectedInfo) {\r\n            params.selectedInfo = event.selectedInfo;\r\n        }\r\n\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n    getData(event?: any, type: LOAD_DATA_TYPE = 'all'): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const params = this.buildQueryParams(event, type);\r\n\r\n        if (uri || this.ins.beUri) {\r\n            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {\r\n                const allSearchFields = this.ins.columns.map(col => col.searchField).filter(f => f);\r\n                if (!params.condition) {\r\n                    params.condition = {};\r\n                }\r\n\r\n                if (!this.ins.isTree() && this.ins.pagination) {\r\n                    const { pageSize = this.ins.pageSize || 20, pageIndex } = { ...params };\r\n                    params.condition.pagination = { pageSize, pageIndex };\r\n                } else {\r\n                    params.condition.pagination = { isUsePagination: false };\r\n                }\r\n                const searchParam = JSON.parse(params.searchValue);\r\n                if (searchParam.searchValue) {\r\n                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {\r\n                        field: searchParam.searchField,\r\n                        value: searchParam.searchValue\r\n                    });\r\n                }\r\n            }\r\n\r\n            const _uri = this.ins.beUri || uri;\r\n\r\n            if (this.ins.http) {\r\n                this.ins.http.context = this.ins.context;\r\n            }\r\n            if (this.ins._searchResult) {\r\n                return of(this.ins._searchResult);\r\n            }\r\n\r\n            if (type !== 'allChildren') {\r\n                return this.ins.http.getData(_uri, params);\r\n            } else {\r\n                const params1 = {\r\n                    searchValue: JSON.stringify({ category: type }),\r\n                    parentsIds: event.parentsIds,\r\n                    customData: params.customData,\r\n                    helpId: params.helpId\r\n                };\r\n                return this.ins.http.getData(_uri, params1);\r\n            }\r\n        } else {\r\n            return of(false);\r\n        }\r\n    }\r\n\r\n    // getFavoriteData(params) {\r\n    //     return this.getData(params, 'fav');\r\n    // }\r\n\r\n    getSelecedItems(selIds: any[]) {\r\n        return this.getData({ favoriteIds: selIds }, 'selected');\r\n    }\r\n\r\n    getPersonalConfig() {\r\n        const defaultConf = cloneDeep(DefaultUserConfig);\r\n        const key = this.ins.personalConfigService._newKey;\r\n        let _conf = this.ins.personalConfigService.getPersonalData(key);\r\n\r\n        if (!_conf || !Object.keys(_conf).length) {\r\n            _conf = defaultConf;\r\n        }\r\n        const req = of(_conf);\r\n\r\n        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {\r\n            return req;\r\n        }\r\n\r\n        if (this.ins.http && this.ins.http['getUserSettings']) {\r\n            return this.ins.http['getUserSettings'](key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs) {\r\n                        return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;\r\n                    }\r\n                    return defaultConf;\r\n                })\r\n            );\r\n        } else {\r\n            return req;\r\n        }\r\n    }\r\n\r\n    lookupRequest(event?: any, type: LOAD_DATA_TYPE = 'all') {\r\n        if (!this.ins.usePersionalConf) {\r\n            return this.getData(event, type);\r\n        }\r\n\r\n        const req = this.getPersonalConfig();\r\n\r\n        return req.pipe(\r\n            tap((c: any) => {\r\n                this.ins.personalConf = c;\r\n                this.ins.personalConfigService.savePersonalConfig(c);\r\n                if (!this.ins.isTabChanged) {\r\n                    this._originalPersonalConfig = cloneDeep(c);\r\n                }\r\n            }),\r\n            switchMap((c: any) => {\r\n                const { tabIndex, favorite, size } = c;\r\n\r\n                if (!this.ins.isTabChanged) {\r\n                    this.ins.activeTab = tabIndex || 'datalist';\r\n                }\r\n\r\n                if (size) {\r\n                    this.ins.dialogWidth = size.width;\r\n                    this.ins.dialogHeight = size.height;\r\n                    this.ins.dialog.reSize({ width: size.width, height: size.height });\r\n                }\r\n\r\n                if (this.ins.activeTab === 'datalist') {\r\n                    return this.getData(event, type);\r\n                } else if (this.ins.activeTab === 'favorite') {\r\n                    const favIds = favorite ? favorite[this.ins.localService.localeId] : [];\r\n                    if (!favIds || !favIds.length) {\r\n                        return this.getData(event, type).pipe(\r\n                            map(r => {\r\n                                if (r) {\r\n                                    r.items = [];\r\n                                }\r\n                                return r;\r\n                            })\r\n                        );\r\n                    }\r\n\r\n                    const _fids = favIds.filter(n => n);\r\n                    event.favoriteIds = favIds;\r\n                    return this.getData(event, 'fav');\r\n                } else if (this.ins.activeTab === 'selected') {\r\n                    const selIds = this.ins.displayValue ? this.ins.displayValue.split(',') : [];\r\n                    const _sids = selIds.filter(n => n);\r\n                    return this.getSelecedItems(_sids);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // ä¿å­ä¸ªæ§åæ°æ®\r\n    submitFavoriteData(action: any | FavoriteAction) {\r\n        // å¦ææ°æ®ä¸é»è®¤çæ°æ®ä¸è³åä¸ä¿å­ã\r\n        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {\r\n            return;\r\n        }\r\n\r\n        let msg = '';\r\n        if (action === FavoriteAction.add) {\r\n            msg = this.ins.addFavoriteSuccess;\r\n        } else if (action === FavoriteAction.delete) {\r\n            msg = this.ins.delFavoriteSuccess;\r\n        }\r\n\r\n        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});\r\n\r\n        if (this.ins.favoriteDataFrom !== 'locale') {\r\n            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);\r\n\r\n            const configData: UserFavoriteData = {\r\n                configkey1: this.ins.personalConfigService.personalConfigKey,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: JSON.stringify(this.ins.personalConf)\r\n            };\r\n\r\n            if (this.ins.http && this.ins.http['saveUserSettings']) {\r\n                this.ins.savingFaoriteData = true;\r\n                this.ins.showLoading();\r\n                return this.ins.http['saveUserSettings'](configData).subscribe((r) => {\r\n                    this.ins.savingFaoriteData = false;\r\n                    this.ins.closeLoading();\r\n                    if (msg) {\r\n                        this.ins.notifyService.success(msg);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (msg) {\r\n                this.ins.notifyService.success(msg);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n* @Author: ç¯çç§æ(Lucas Huang)\r\n* @Date: 2018-12-14 14:40:48\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:29\r\n* @Company: Inspur\r\n* @Version: v0.0.1\r\n*/\r\n\r\nimport { Component, OnInit, ViewChild, ViewContainerRef, EventEmitter, Output,\r\n    ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, Injector, ReflectiveInjector\r\n} from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\n\r\nimport { LookupGridOptions, LookupGridResult } from './lookup-grid-options';\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\n\r\n@Component({\r\n    selector: 'lookup-left',\r\n    templateUrl: './lookup-left.component.html'\r\n})\r\n\r\nexport class LookupLeftComponent implements OnInit {\r\n\r\n    cmpRef: ComponentRef<any>;\r\n    navOptions: LookupGridOptions;\r\n    lookupCmp: LookupGridComponent;\r\n\r\n\r\n    @ViewChild('container', {read: ViewContainerRef}) cmpContainer: ViewContainerRef;\r\n    @Output() selected = new EventEmitter<{ data: any}>();\r\n    @Output() unselected = new EventEmitter();\r\n    @Output() search = new EventEmitter<{ field: string, value: string }>();\r\n    @Output() pageChanged = new EventEmitter<{ pageInfo: {pageIndex: number, pageSize: number}, search: {field: string, value: string} }>();\r\n\r\n    private _searchState = null;\r\n    private allData = null;\r\n\r\n    constructor(private cfr: ComponentFactoryResolver, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    createComponent(): Observable<any> {\r\n        let dtFac = null;\r\n        if (!this.isTreeList()) {\r\n            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);\r\n        } else {\r\n            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);\r\n        }\r\n        this.navOptions['keepSelect'] = false;\r\n        // å·¦ä¾§æ¥è¯¢è¿æ»¤æ¡ï¼éèæï¼\r\n        this.navOptions['showFilterBar'] = true;\r\n        // if (this.navOptions.width) {\r\n        //     this.navOptions.width = this.navOptions.width - 2;\r\n        // }\r\n\r\n        this.navOptions.width = this.lookupCmp.leftPanelWidth - 2;\r\n\r\n        // const injector: Injector = ReflectiveInjector.resolveAndCreate([\r\n        //     { provide: DataTableService, useFactory: () => { new DataTableService()}}\r\n        // ]);\r\n\r\n        this.cmpRef = this.cmpContainer.createComponent(dtFac);\r\n\r\n        if (!this.isTreeList()) {\r\n            this.navOptions['fill'] = true;\r\n            this.cmpRef.instance.maxSize = 5;\r\n            this.cmpRef.instance.fill = true;\r\n        } else {\r\n            this.navOptions['fit'] = true;\r\n        }\r\n        // this.cmpRef.instance.fit = true;\r\n\r\n        if (this.navOptions.pageInfo) {\r\n            if (this.navOptions.pageInfo.pageList) {\r\n                this.navOptions.pageList = this.navOptions.pageInfo.pageList;\r\n            }\r\n            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;\r\n            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;\r\n            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;\r\n        } else {\r\n            this.navOptions.pagination = false;\r\n        }\r\n\r\n        Object.assign(this.cmpRef.instance, this.navOptions);\r\n\r\n        this.loadData();\r\n        return of(this.cmpRef);\r\n    }\r\n\r\n    update() {\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    resize(size?: {width: number, height: number}) {\r\n        if (size) {\r\n            size.width = size.width - 2;\r\n            // if (this.cmpRef.instance instanceof TreeTableComponent) {\r\n            //     size.height += 46;\r\n            // }\r\n            this.cmpRef.instance.resize(size);\r\n        }\r\n    }\r\n\r\n    isTreeList() {\r\n        return this.navOptions.displayType.toLowerCase() === 'treelist';\r\n    }\r\n\r\n    private selectLeftDataTableRow(items: any, dt: DataTableComponent) {\r\n        if (items && items.length) {\r\n            let item = null;\r\n            if (this.lookupCmp.navSelectedIds) {\r\n                item = items.find(n => n[dt.idField] == this.lookupCmp.navSelectedIds);\r\n            } else {\r\n                if (this.lookupCmp.selectFirstInNav) {\r\n                    item = items[0];\r\n                }\r\n            }\r\n\r\n            if (item) {\r\n                dt.dtBody.selectedRowIndex = -1;\r\n                dt.dtBody.selectedRow('', 0, item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private closeLoading() {\r\n        this.lookupCmp.closeLoading();\r\n    }\r\n\r\n    private initDataTable(dt: DataTableComponent) {\r\n        dt.loadData({\r\n            pageSize: this.navOptions.pageSize,\r\n            pageIndex: this.navOptions.pageIndex,\r\n            total: this.navOptions.total,\r\n            data: this.navOptions.items,\r\n        });\r\n\r\n        dt.resize({ width: 320, height: this.navOptions.height});\r\n        // è¡éä¸­\r\n        dt.selectedRow.subscribe(d => {\r\n            this.selected.emit({ data: d.data });\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        const p = { pageInfo: { pageIndex: 1, pageSize: this.navOptions.pageSize }, search: '' };\r\n\r\n\r\n        const loadTableData = {\r\n            next: (data: LookupGridResult) => {\r\n                this.closeLoading();\r\n                dataTableReLoad(data);\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n        // æ¥è¯¢\r\n        dt.search.subscribe( searchData => {\r\n            this._searchState = searchData;\r\n            this.search.emit(searchData);\r\n            p.search = searchData;\r\n            p.pageInfo.pageSize = dt.pageSize;\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        const dataTableReLoad = (data) => {\r\n            dt.loadData({\r\n                pageSize: data.pageInfo.pageSize,\r\n                pageIndex: data.pageInfo.pageIndex,\r\n                total: data.total,\r\n                data: data.items,\r\n            });\r\n\r\n            this.selectLeftDataTableRow(data.items, dt);\r\n            dt.cd.markForCheck();\r\n        };\r\n\r\n        // åé¡µ\r\n        dt.pageChanged.subscribe(d => {\r\n            this.pageChanged.emit(d);\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe((e) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            const { sortName, sortOrder } = {...sort};\r\n            this.lookupCmp.navigationFilter = null;\r\n            const param = Object.assign({ sortName, sortOrder }, this._searchState);\r\n            this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n        });\r\n\r\n        this.selectLeftDataTableRow(this.navOptions.items, dt);\r\n    }\r\n\r\n    private initTreeTable(tt: TreeTableComponent) {\r\n        tt.virtualized = true;\r\n        tt.nodeSelected.subscribe(d => {\r\n            this.selected.emit({data: d.node.data});\r\n        });\r\n\r\n        tt.nodeUnSelect.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        tt.fixedHeader = true;\r\n\r\n        // tt.fit = true;\r\n        this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);\r\n\r\n        tt.loadDataType = this.navOptions.treeInfo.loadDataType;\r\n        // æ£æ¥å®æ´æ è¿æ»¤æ¡ä»¶ By Lucas 20200302\r\n        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');\r\n        tt.loadData(this.navOptions.items);\r\n\r\n        if (this.lookupCmp.navSelectedIds) {\r\n            tt.selectNode(this.lookupCmp.navSelectedIds);\r\n        } else if (this.lookupCmp.selectFirstInNav) {\r\n            tt.selectFirstNode();\r\n        }\r\n\r\n        this.allData = this.navOptions.items;\r\n\r\n        const loadTreeData = {\r\n            next: (resData: any) => {\r\n                this.closeLoading();\r\n                tt.clearAll();\r\n                const items = this.lookupCmp.checkNodeCanBeSelect(resData.items, this.navOptions.treeInfo.loadDataType === 'all');\r\n                tt.loadData(items);\r\n                tt.resize();\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n\r\n        tt.search.subscribe(search => {\r\n            this._searchState = search;\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData({ search }, 'navsearch').subscribe(loadTreeData);\r\n        });\r\n\r\n        tt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            if (tt.loadDataType === 'all') {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = {...sort};\r\n\r\n                const param = Object.assign({ sortName, sortOrder }, this._searchState);\r\n                this.lookupCmp.httpMgr.getData(param, 'nav').subscribe(loadTreeData);\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n            tt.loadData(this.allData);\r\n        });\r\n\r\n\r\n        tt.expand.subscribe((tn: any) => {\r\n            this.onNodeExpanded(tn, tt);\r\n        });\r\n    }\r\n\r\n\r\n    private onNodeExpanded(tn: any, tt) {\r\n        if (tn.leaf) {\r\n            return;\r\n        }\r\n        if (!tn.children || !tn.children.length) {\r\n            const treeInfo = this.navOptions.treeInfo;\r\n            if (this.navOptions.treeInfo.loadDataType === 'async') {\r\n                let parentPath = '';\r\n                let parentLayer = -1;\r\n                const { field = '*', value = '' } = {\r\n                    ...tt.searchData\r\n                };\r\n\r\n                tn['showLoading'] = true;\r\n                tt.detectChanges();\r\n                if (treeInfo.layerType === 'parentId') {\r\n                    // ç¶IDå è½½æ¹å¼\r\n                    parentPath = tn['id'];\r\n                } else {\r\n                    const treeInfoField = treeInfo.dataField;\r\n                    if (treeInfoField) {\r\n                        parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                        parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                    } else {\r\n                        console.log('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                    }\r\n                }\r\n\r\n                if (!this.lookupCmp.uri) {\r\n                    this.lookupCmp.expandTreeNode.emit({\r\n                        instance: tt, node: tn,\r\n                        parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                    });\r\n\r\n                    return;\r\n                }\r\n                this.getChildren(\r\n                    parentPath, parentLayer, {searchField: field === '*' ? '*' : field, searchValue: value}, tt\r\n                ).subscribe(data => {\r\n                    if (tt) {\r\n                        if (tn && data.items && data.items.length) {\r\n                            tt.appendChildren(data.items, tn);\r\n                        }\r\n                        tn['showLoading'] = false;\r\n                        tt.detectChanges();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getChildren( parentPath, parentLayer, searchData: { searchField: string; searchValue: string }, tt ): Observable<any> {\r\n        const uri = this.lookupCmp.gridOptions.uri;\r\n        const search = { parentLayer, category: 'nav', ...searchData };\r\n        if (this.navOptions.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.lookupCmp.customData,\r\n            enableFullTree: false,\r\n            loadTreeDataType: 'layerload'\r\n        };\r\n\r\n        if (this.lookupCmp.helpId) {\r\n            param['helpId'] = this.lookupCmp.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n\r\n        return this.lookupCmp.http.getData(uri , param);\r\n    }\r\n\r\n\r\n    loadData() {\r\n        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;\r\n        if (!this.isTreeList()) {\r\n            const dt = this.cmpRef.instance as DataTableComponent;\r\n            this.initDataTable(dt);\r\n        } else {\r\n            const tt = this.cmpRef.instance as TreeTableComponent;\r\n            this.initTreeTable(tt);\r\n        }\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { ComponentInstanceType } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupLeftComponent } from '../lookup-left.component';\r\n\r\n\r\nexport class LookupComponentManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    getComponentInstance(type: ComponentInstanceType = 'datatable') {\r\n        if (!this.ins.componentRef || !this.ins.componentRef.instance) {\r\n            return null;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            return this.ins.multiSelectDT;\r\n        }\r\n\r\n        let ins = this.ins.componentRef.instance;\r\n\r\n        if (type === 'leftDataTable' || type === 'leftTree') {\r\n            const leftRef = this.ins.leftComponentRef;\r\n            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {\r\n                return null;\r\n            }\r\n            ins = this.ins.leftComponentRef.instance.cmpRef.instance;\r\n        }\r\n\r\n        if (type === 'fav') {\r\n            ins = this.ins.favoritesComponentRef.instance;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'leftDataTable':\r\n            case 'fav':\r\n            case 'datatable':\r\n                return ins as DataTableComponent;\r\n            case 'leftTree':\r\n            case 'treetable':\r\n                return ins as TreeTableComponent;\r\n            default:\r\n                if (this.ins.isTree()) {\r\n                    return ins as TreeTableComponent;\r\n                }\r\n                return ins as DataTableComponent;\r\n        }\r\n    }\r\n\r\n    createComponentWithServerData(data: any) {\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n        this.ins.idField = data.idField || this.ins.idField;\r\n        this.ins.textField = data.textField || this.ins.textField;\r\n        this.ins.valueField = data.valueField || this.ins.valueField;\r\n\r\n        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';\r\n        this.ins.componentRef = this.createContent(this.ins.gridOptions);\r\n        this.createFavoriteComponent();\r\n\r\n        this.resizeComponent();\r\n    }\r\n\r\n\r\n    createFavoriteComponent() {\r\n        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {\r\n            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();\r\n            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {\r\n                showFilterBar: false,\r\n                pagination: false,\r\n                columns: this.ins.favoriteColumns || []\r\n            });\r\n            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);\r\n\r\n            this.resizeComponent('fav');\r\n        }\r\n    }\r\n\r\n\r\n    createContent(opts: any): ComponentRef<any> {\r\n\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const dtFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef = null;\r\n        if (this.ins.isDoublleList()) {\r\n            cmpRef = this.ins.centerContainer.createComponent(dtFac);\r\n        } else {\r\n            cmpRef = this.ins.contentContainer.createComponent(dtFac);\r\n        }\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n\r\n        Object.assign(cmpRef.instance, opts, { allColumnsTitle: this.ins.allColumnsTitle });\r\n\r\n        this.ins.componentRef = cmpRef;\r\n        this.resizeComponent();\r\n        return cmpRef;\r\n    }\r\n\r\n    // åå»ºæ¶èCMP\r\n    createFavoritesContent(opts: any): ComponentRef<any> {\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const dtFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef = null;\r\n        cmpRef = this.ins.favoritesContainer.createComponent(dtFac);\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n\r\n        Object.assign(cmpRef.instance, opts, {\r\n            width: this.ins.dialog.size.width - 20,\r\n            height: this.ins.dialogMgr.getHeight()\r\n        });\r\n\r\n\r\n        // è®¢éæ¶èå¤¹åè¡¨ä¸­ç»ä»¶çç¸å³äºä»¶\r\n        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);\r\n\r\n        return cmpRef;\r\n    }\r\n\r\n    resizeComponent(type: ComponentInstanceType = 'datatable') {\r\n        const size = {\r\n            width: this.ins.dialog.size.width - 20,\r\n            height: this.ins.dialogMgr.getHeight()\r\n        };\r\n\r\n        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {\r\n            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - 27;\r\n        }\r\n\r\n        this.getComponentInstance(type).resize(size);\r\n    }\r\n\r\n    /** åå»ºå·¦ä¾§ç»ä»¶ */\r\n    createLeftComponent(ops: any) {\r\n        let dtFac = null;\r\n        if (this.ins.isDoublleList()) {\r\n            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);\r\n        }\r\n        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);\r\n        ops.height = this.ins.dialogMgr.getHeight();\r\n\r\n        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {\r\n            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;\r\n            this.ins.dialog.reSize({ width: this.ins.dialogWidth });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        if (ops.width !== this.ins.leftPanel.width) {\r\n            // é»è®¤ 1 : 2\r\n            this.ins.leftPanel.resize({\r\n                width: this.ins.leftPanel.width,\r\n                height: ops.height\r\n            });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        // this.resizeComponent();\r\n\r\n        this.ins.leftComponentRef.instance.lookupCmp = this.ins;\r\n        this.ins.leftComponentRef.instance.navOptions = ops;\r\n\r\n\r\n        this.ins.leftComponentRef.instance.selected\r\n            .pipe(\r\n                debounceTime(100),\r\n                switchMap((d: any) => {\r\n                    if (d && d.data) {\r\n                        this.ins.navigationFilter = {\r\n                            selected: d.data,\r\n                            idValue: this.getNavigationFilter(d.data),\r\n                            searchField: '',\r\n                            searchValue: ''\r\n                        };\r\n                    } else {\r\n                        this.ins.navigationFilter = undefined;\r\n                    }\r\n                    // å è½½å³ä¾§æ°æ®\r\n                    const p = {\r\n                        pageInfo: {\r\n                            pageIndex: this.ins.gridOptions.pageIndex,\r\n                            pageSize: this.ins.gridOptions.pageSize\r\n                        }\r\n                    };\r\n                    Object.assign(p, { search: this.ins._searchState });\r\n                    return this.ins.httpMgr.getData(p, 'list');\r\n                })\r\n            )\r\n            .subscribe(res => {\r\n                this.ins.closeLoading();\r\n                this.ins.loadDataWhenOpen = true;\r\n\r\n                if (this.ins.useFavorite && !this.ins.isTree()) {\r\n                    this.ins.favHelper.updateFavoritesStatus(res.items);\r\n                }\r\n\r\n                this.ins.loadDataTableData(res);\r\n                setTimeout(() => {\r\n                    // éä¸­æ°æ®\r\n                    this.ins.selectionMgr.selectCurrentValue();\r\n                    this.ins.changeDetector.detectChanges();\r\n                });\r\n            });\r\n\r\n        return this.ins.leftComponentRef.instance.createComponent();\r\n    }\r\n\r\n    // è·åå³èæ°æ®, å³ä¾§æ°æ®ä¸­ å³èåå­æ®µçå¼\r\n    private getNavigationFilter(navRow: any) {\r\n        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {\r\n            const result = [];\r\n            this.ins.navigationOptions.relations.forEach(r => {\r\n                const k = r.groupField;\r\n                const dField = r.helpField;\r\n                const rf = { fieldName: dField, fieldValue: '' };\r\n                rf.fieldValue = k.split('.').reduce((o, c) => {\r\n                    return o[c];\r\n                }, navRow);\r\n\r\n                result.push(rf);\r\n            });\r\n            return result;\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport class LookupDialogManager {\r\n\r\n    private lookupInit: Subscription = null;\r\n    private _loadDataWhenOpen = true;\r\n    private _navSelectedId = '';\r\n    private _selectFirstInNav = false;\r\n\r\n    private keyDownHandler = null;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n    // å¸®å©çªå£å³é­ååä¸äºæ¸çå·¥ä½\r\n    dialogClosed() {\r\n        if (this.ins.displayText !== this.ins.originalText && !this.ins.nosearch) {\r\n            this.ins.displayText = this.ins.originalText;\r\n            this.ins.setModelValue(this.ins.displayText);\r\n        }\r\n\r\n        if (this.ins.componentRef) {\r\n            this.ins.componentRef.destroy();\r\n            this.ins.componentRef = null;\r\n        }\r\n\r\n        if (this.ins.favoritesComponentRef) {\r\n            this.ins.favoritesComponentRef.destroy();\r\n            this.ins.favoritesComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.contentContainer) {\r\n            this.ins.contentContainer.clear();\r\n        }\r\n\r\n        if (this.ins.centerContainer) {\r\n            this.ins.centerContainer.clear();\r\n        }\r\n\r\n        if (this.ins.leftComponentRef) {\r\n            this.ins.leftComponentRef.destroy();\r\n            this.ins.leftComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.leftContainer) {\r\n            this.ins.leftContainer.clear();\r\n        }\r\n\r\n\r\n        this.ins.isShow = false;\r\n        this.ins.isTextChange = false;\r\n        if (this.ins.dialog) {\r\n            this.ins.content = null;\r\n        }\r\n\r\n        this.ins.navigationFilter = null;\r\n\r\n        this.ins.lookupUtils.pendingEnd();\r\n\r\n        if (this.ins.helpId) {\r\n            this.ins.displayType = '';\r\n        }\r\n\r\n        if (this.lookupInit) {\r\n            this.lookupInit.unsubscribe();\r\n            this.lookupInit = null;\r\n        }\r\n\r\n        // this.ins.items = [];\r\n        this.ins.favoriteItems = [];\r\n        this.ins.isTabChanged = false;\r\n\r\n        if (this.ins.uri) {\r\n            this.ins.items = [];\r\n        }\r\n        this.ins._searchState = null;\r\n\r\n\r\n        this.ins.pageIndex = 1;\r\n\r\n        this.ins.loadDataWhenOpen = this._loadDataWhenOpen;\r\n        this.ins.navSelectedIds = this._navSelectedId;\r\n        this.ins.selectFirstInNav = this._selectFirstInNav;\r\n\r\n        this.ins.isGetAllChidlNodes = false;\r\n\r\n        this.ins.enableGetAllChildNodes = true;\r\n\r\n        // ä¿å­ä¸ªæ§åæ°æ®\r\n        if (this.ins.usePersionalConf && this.ins.favoriteDataFrom !== 'locale') {\r\n            this.ins.httpMgr.submitFavoriteData('dialog closed event.');\r\n        }\r\n\r\n        if (this.keyDownHandler) {\r\n            this.keyDownHandler();\r\n            this.keyDownHandler = null;\r\n        }\r\n        if (this.ins.inputGroup) {\r\n            this.ins.inputGroup.focus();\r\n        }\r\n        this.ins.dialogClosed.emit();\r\n    }\r\n\r\n    onDialogCreated() {\r\n        this._loadDataWhenOpen = this.ins.loadDataWhenOpen;\r\n        this._navSelectedId = this.ins.navSelectedIds;\r\n        this._selectFirstInNav = this.ins.selectFirstInNav;\r\n\r\n        this.ins.dialogCreatedSubscription = this.ins.dialogCreated.subscribe(dlg => {\r\n            if (dlg) {\r\n                if (this.ins.dialogOpenedSubscription) {\r\n                    this.ins.dialogOpenedSubscription.unsubscribe();\r\n                }\r\n                if (this.ins.dialogClosedSubscription) {\r\n                    this.ins.dialogClosedSubscription.unsubscribe();\r\n                }\r\n                this.registerDialogEvent();\r\n                if (this.ins.isRecordSize) {\r\n                    const dlgSize = this.ins.personalConfigService.getDialogSize();\r\n                    if (dlgSize) {\r\n                        const { width, height } = dlgSize;\r\n                        this.ins.dialogWidth = width ? width : this.ins.dialogWidth;\r\n                        this.ins.dialogHeight = height ? height : this.ins.dialogHeight;\r\n                        // 20200908 æ´æ°ç°çªå£çå°ºå¯¸ by Lucas\r\n                        dlg.width = this.ins.dialogWidth;\r\n                        dlg.height = this.ins.dialogHeight;\r\n                    }\r\n                }\r\n                dlg.show();\r\n            }\r\n        });\r\n    }\r\n\r\n    canOpenDialog(pr: PickingResult | any) {\r\n        let o = true;\r\n        if (pr === undefined || pr === null || pr === '') {\r\n            o = true;\r\n        }\r\n\r\n        if (typeof pr === 'boolean') {\r\n            o = pr;\r\n        }\r\n\r\n        if (typeof pr === 'object') {\r\n            if (pr.showDialog === undefined) {\r\n                o = true;\r\n            } else {\r\n                o = pr.showDialog;\r\n            }\r\n\r\n            if (pr.hasOwnProperty('data')) {\r\n                /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                this.ins.customData = pr.data;\r\n            }\r\n            this.ins.selectedIds = pr.selectedIds || null;\r\n\r\n            if (pr.message) {\r\n                this.ins.notifyService.warning(pr.message);\r\n            }\r\n        }\r\n\r\n\r\n        this.ins.isReady = false;\r\n\r\n        this.ins.isShow = o;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.ins.dialog.size.contentHeight -\r\n                this.ins.containerMargin.bottom -\r\n                this.ins.containerMargin.top -\r\n                (this.ins.useFavorite ? 40 : 0);\r\n    }\r\n\r\n\r\n    private getMainGridSize() {\r\n        if (this.ins.isDoublleList()) {\r\n            return {\r\n                width: this.ins.dialog.size.width - this.ins.leftPanel.width - 27,\r\n                height: this.getHeight()\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: this.ins.dialog.size.width - this.ins.containerMargin.left - this.ins.containerMargin.right,\r\n            height: this.getHeight()\r\n        };\r\n    }\r\n\r\n    /** æ³¨åå¼¹åºçªå£çäºä»¶ */\r\n    private registerDialogEvent() {\r\n        this.ins.dialogOpenedSubscription = this.ins.dialog.opened.subscribe(() => {\r\n            this.ins.gridOptions = Object.assign(this.ins.gridOptions, this.getMainGridSize());\r\n            this.ins.dialog.el.nativeElement.querySelector('.ps-content').style.height = '100%';\r\n\r\n            if (this.ins.displayType && this.ins.customDisplayType) {\r\n                this.ins.componentRef = this.ins.lookupCmpMgr.createContent(this.ins.gridOptions);\r\n                this.ins.lookupCmpMgr.createFavoriteComponent();\r\n            }\r\n\r\n            this.ins.initData();\r\n\r\n            // ä¿®æ¹å¸®å©çªå£çç¶æ\r\n            this.ins.lookupUtils.pendingEnd();\r\n            this.ins.dialogOpened.emit();\r\n        });\r\n\r\n        this.ins.subscriptions.push(this.ins.dialogOpenedSubscription);\r\n\r\n        this.lookupInit = this.ins.lookupinitializationSubject.subscribe(() => {\r\n            this.ins.loadDataWhenOpen = true;\r\n            // æ³¨åå¿«æ·é®\r\n            this.registerShortcutKey();\r\n            // çå¬å·¦ä¾§å°ºå¯¸ååäºä»¶\r\n            if (this.ins.leftPanel) {\r\n                const leftPanelResize$ = this.ins.leftPanel.resizing.subscribe((s: any) => {\r\n                    this.ins.componentRef.instance.resize({\r\n                        width: this.ins.dialog.size.width - s.size.width - 27,\r\n                        height: this.getHeight()\r\n                    });\r\n                    this.ins.leftComponentRef.instance.resize(s.size);\r\n                });\r\n\r\n                this.ins.subscriptions.push(leftPanelResize$);\r\n            }\r\n        });\r\n\r\n        this.ins.dialogClosedSubscription = this.ins.dialog.closed.subscribe(() => {\r\n            // è¾å¥æ¡åååï¼å¼¹åºçªå£æªéæ©æ°æ®å³é­çªå£æ¶ï¼è¿ååå§å¼\r\n            this.ins.dialogMgr.dialogClosed();\r\n        });\r\n\r\n        this.ins.subscriptions.push(this.ins.dialogClosedSubscription);\r\n    }\r\n\r\n    private registerShortcutKey() {\r\n        // åè½¦ï¼ä¸ç¡®å®æé®å¤çé»è¾ä¸è³ã\r\n        const dlgContainerDom = this.ins.dialog.el.nativeElement.querySelector('.farris-modal');\r\n\r\n        if (dlgContainerDom && this.ins.shortcutKey && !this.keyDownHandler) {\r\n            this.keyDownHandler = this.ins.eventManager.addEventListener(dlgContainerDom, 'keydown', (e: KeyboardEvent) => {\r\n                e.stopPropagation();\r\n                const { moveUp, moveDown, searchFocus, confirm, nextPager, prevPager, expand, collapse } = this.ins.shortcutKey;\r\n                const arrowKey = [moveUp, moveDown, expand, collapse];\r\n                if (arrowKey.includes(e.code)) {\r\n                    this.ins.componentRef.instance.onKeydownEvent(e);\r\n                } else if (e.key === confirm) {\r\n                    if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    this.ins.okButton.nativeElement.click();\r\n                } else if (e.code === searchFocus) { // å¸®å©çªå£æ¥è¯¢è¾å¥æ¡ç¦ç¹\r\n                    e.preventDefault();\r\n                    this.ins.componentRef.instance.inputGroup.focus();\r\n                } else if (!this.ins.isTree() && (e.code === nextPager || e.code === prevPager )) {  // åé¡µ\r\n                    const isNextPager = e.code === nextPager;\r\n                    this.paginationKeyDownHandler(isNextPager);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private paginationKeyDownHandler(next = true) {\r\n        const datatableRef = this.ins.componentRef.instance;\r\n        const {pageIndex, pageSize, total} = datatableRef;\r\n        const pagerCount = Math.ceil(total / pageSize);\r\n\r\n        let newPageNum = pageIndex;\r\n        if (next) {\r\n            newPageNum = newPageNum + 1;\r\n        } else {\r\n            newPageNum = newPageNum - 1;\r\n        }\r\n\r\n        if (newPageNum > pagerCount || newPageNum < 1) {\r\n            newPageNum = pageIndex;\r\n        }\r\n\r\n        this.ins.componentRef.instance.onPageChange({ pageSize, pageIndex: newPageNum });\r\n    }\r\n\r\n}\r\n\r\n","import { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FavoriteAction } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport interface SelectionState {\r\n    selecteditems: any[];\r\n    favoriteItems: any[];\r\n    quickItems: any[];\r\n}\r\n\r\nexport class LookupSelectionService {\r\n\r\n    private state: SelectionState = {\r\n        selecteditems: [],\r\n        favoriteItems: [],\r\n        quickItems: []\r\n    };\r\n\r\n    state$: BehaviorSubject<SelectionState> = new BehaviorSubject(this.state);\r\n\r\n    selected$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.selecteditems))\r\n    );\r\n\r\n    favoriteItems$: BehaviorSubject<any> = new BehaviorSubject({items: this.state.favoriteItems, action: null });\r\n\r\n    quickItems$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.quickItems))\r\n    );\r\n\r\n    private get idField() {\r\n        return this.ins.idField;\r\n    }\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n    }\r\n\r\n    initFavoriteItems(items: any[]) {\r\n        this.state.favoriteItems = items || [];\r\n    }\r\n\r\n\r\n    //#region æ¶èæ°æ®\r\n\r\n    updateFavoriteData(data: any, action: FavoriteAction) {\r\n\r\n        if (this.ins.savingFaoriteData) {\r\n            // console.log('%cå¤ªè°ç®äºå§ï¼', 'color: white');\r\n            return;\r\n        }\r\n\r\n        if (action === FavoriteAction.add) {\r\n            this.state.favoriteItems = this.state.favoriteItems.concat([data]);\r\n        } else {\r\n            this.state.favoriteItems = this.state.favoriteItems.filter(n => n[this.idField] !== data[this.idField]);\r\n        }\r\n\r\n        this.favoriteItems$.next({ items: this.state.favoriteItems, action });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region å¤éæ°æ®\r\n\r\n    loadSelections( data: []) {\r\n        this.state.selecteditems = [...data];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    getSelections() {\r\n        return [...this.state.selecteditems];\r\n    }\r\n\r\n    select(item: any) {\r\n        if (item) {\r\n            this.state.selecteditems = [...this.state.selecteditems, item];\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    unselectByPathcode(pathcode: string) {\r\n        const { dataField, pathField } = this.ins.treeInfo;\r\n        this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n            return n[dataField][pathField] && n[dataField][pathField].indexOf(pathcode) !== 0;\r\n        });\r\n    }\r\n\r\n    updateSelections(data: any, checked = true) {\r\n\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n\r\n        const items = [ ...data ];\r\n        const idField = this.idField;\r\n        if (checked) {\r\n            if (this.state.selecteditems && !this.state.selecteditems.length) {\r\n                this.state.selecteditems = items;\r\n            } else {\r\n                const ids = items.map(n => n[idField]);\r\n                ids.forEach((n, i) => {\r\n                    if (!this.state.selecteditems.find(r => r[idField] == n)) {\r\n                        this.state.selecteditems.push(items[i]);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (data) {\r\n                const ids2 = data.map(n => n[idField]);\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return ids2.indexOf(n[idField]) === -1;\r\n                });\r\n            }\r\n        }\r\n\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    unSelect(id: any) {\r\n        if (id) {\r\n            if (Array.isArray(id)) {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return id.indexOf(n[this.idField]) === -1;\r\n                });\r\n            } else {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => n[this.idField] != id);\r\n            }\r\n\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    clearSelections() {\r\n        this.state.selecteditems = [];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n","/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n* @Date: 2018-11-23 11:23:12\r\n* @LastEditors: ç¯çç§æ(Lucas Huang)\r\n* @LastEditTime: 2020-10-20 20:18:26\r\n* @Company: Inspur\r\n* @Version: v0.3.x\r\n*/\r\n\r\nimport {\r\n    Component, Input, ViewChild, OnChanges, SimpleChanges, EventEmitter, OnInit, Injector,\r\n    ComponentFactoryResolver, Output, ChangeDetectorRef, ViewEncapsulation, AfterViewInit,\r\n    ViewContainerRef, forwardRef, ComponentRef, Type, ElementRef, NgZone, Renderer2, OnDestroy, HostListener\r\n} from '@angular/core';\r\n\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, Subscription, of, Subject, BehaviorSubject } from 'rxjs';\r\n\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { IResizeEvent } from '@farris/ui-draggable';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { LoadingService, LoadingComponent } from '@farris/ui-loading';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { LayoutPanelComponent } from '@farris/ui-layout';\r\nimport { CommonUtils, FarrisComponentInstanceService } from '@farris/ui-common';\r\nimport { EntityFilter } from '@farris/ui-common/types';\r\nimport { ShortcutsService } from '@farris/ui-shortcuts';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { NotifyService } from '@farris/ui-notify';\r\n\r\nimport { FAVORITE_FIELD_NAME, INPUT_GROUP_ICON, LookupGridDisplayType, ExtInfoFormatter, CustomDataFormatter } from './lookup-displaytype';\r\nimport { LookupComponent } from './lookup.component';\r\nimport {\r\n    LookupGridOptions, lookupGridDefaults, LookupGridResult, NavigationOptions, DisplayInfo,\r\n    displayInfoDefault, PickingResult, TreeInfo, LOAD_DATA_TYPE, ONLY_SELECT_LEAF, PersonalConfig\r\n} from './lookup-grid-options';\r\nimport { ILookupHttpService, ServerSideToken } from './http/ILookupHttpService';\r\nimport { NavigationFilter } from './http/RemoteParams';\r\nimport { LookupLeftComponent } from './lookup-left.component';\r\nimport { LookupDefaultMapping } from './lookup-defaut-mapping';\r\nimport { LookupUtils } from './utils';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\nimport {\r\n    UtilService, TreeNodeHelper, FavoriteHelper, SelectionManager, DataTableEventManager, TreeTableEventManager,\r\n    MultiSelectionManager, LookupHttpManager, LookupComponentManager, LookupDialogManager, onTextChanged, LookupSelectionService\r\n} from './services';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\n\r\nimport { EventManager } from '@angular/platform-browser';\r\n\r\nexport const LOOKUPGRID_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupGridComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farris-lookup-grid',\r\n    templateUrl: './lookup-grid.component.html',\r\n    styleUrls: ['./lookup-grid.component.scss'],\r\n    providers: [LOOKUPGRID_VALUE_ACCESSOR, ShortcutsService, LookupDefaultMapping, LookupUtils, PersonalConfigService],\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: 'lookup'\r\n})\r\nexport class LookupGridComponent extends LookupComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n    groupIcon = INPUT_GROUP_ICON;\r\n    _displayType = '';\r\n\r\n    /** ä½¿ç¨è¡¨åè®¾è®¡å¨ä¸­çæ¾ç¤ºç±»åãå¦åä½¿ç¨åæ°æ®è®¾ç½®çæ¾ç¤ºç±»åã é»è®¤ï¼false */\r\n    @Input() customDisplayType = false;\r\n    @Input() viewType: 'text' | 'tag' = 'text';\r\n    @Input()\r\n    get displayType() {\r\n        return this._displayType;\r\n    }\r\n    set displayType(val: string) {\r\n        if (val) {\r\n            const types = Object.values(LookupGridDisplayType);\r\n            const i = types.findIndex(n => n === val.toUpperCase());\r\n            if (i > -1) {\r\n                const keys = Object.keys(LookupGridDisplayType);\r\n                this._displayType = LookupGridDisplayType[keys[i]];\r\n            }\r\n        } else {\r\n            this._displayType = val;\r\n        }\r\n    }\r\n    /** å¯ç¨æ¸ç©ºæé® */\r\n    @Input() enableClear = true;\r\n    /** æå¡å¨ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n\r\n    @Input() condition: EntityFilter;\r\n\r\n    /** æ è¡¨æ¾ç¤ºå¨éå¤éæ¡ã é»è®¤ä¸æ¾ç¤º */\r\n    @Input() showCheckAll = false;\r\n\r\n    /** æ¯å¦å¯ç¨å¤é */\r\n    @Input() singleSelect = true;\r\n    /** å¤éåéç¬¦ */\r\n    @Input() multipleChoiceSeparator = ',';\r\n    /** ä¸»é®å­æ®µ */\r\n    @Input() idField?: string;\r\n    /** å¯ä»¥ä¸ºåæ°æ®IDãwebapiURL */\r\n    @Input() uri?: string;\r\n    /**\r\n     * BE REST RUI\r\n     * - æ­¤å¤è®¾ç½®å uri å¤±æ\r\n     */\r\n    @Input() beUri = '';\r\n    /**\r\n     * æ¾ç¤ºè¿æ»¤å·¥å·æ¡\r\n     */\r\n    @Input() showFilterBar = true;\r\n    /** æ¯å¦å¯ç¨åé¡µ */\r\n    @Input() pagination = true;\r\n    /** å½åé¡µç´¢å¼ï¼ä» 0å¼å§ */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** å¯ç¨åé¡µè®°å½æ°åè¡¨ */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n    /** å¯æå¨å */\r\n    // @Input() resizableColumns = true;\r\n    /** æ¾ç¤ºåä¿¡æ¯ */\r\n    @Input() columns: any[] = [];\r\n\r\n    /** å¸®å©æ¥è¯¢æ¯å¦ä¸ºè¿ç«¯æ¥è¯¢ */\r\n    @Input() remoteSearch = true;\r\n\r\n    /** ææ¬åååï¼è¿è¡æå¡å¨ç«¯æ¥è¯¢ */\r\n    @Input() searchOnServer = true;\r\n    /** ä¸è¿è¡æå¡å¨æ¥è¯¢ï¼æå¥ç®å¥ */\r\n    @Input() nosearch = false;\r\n\r\n    /**\r\n     * åè®¸è¾å¥çå­ç¬¦æå¤§é¿åº¦ã\r\n     * ä»»æè¾å¥æ¶ï¼æ­¤å±æ§ææ\r\n     */\r\n    @Input() maxLength;\r\n\r\n    @Input() mappingFn: (rowData, mapFields, bindingData?: any) => void;\r\n    /** æ°æ®åè¡¨ */\r\n    @Input() items: any;\r\n    // æ¶èåè¡¨\r\n    @Input() favoriteItems: any[] = [];\r\n    /** èªå®ä¹æ°æ® */\r\n    @Input() customData: any;\r\n\r\n    /** ç»å®å¼æå¨çå¯¹è±¡ */\r\n    @Input() bindingData: {};\r\n\r\n    @Input() treeInfo: TreeInfo;\r\n    /** æ¯å¦å¯ç¨çº§èéæ©æ§å¶éé¡¹ */\r\n    @Input() enableCascade = false;\r\n    /** çº§èæ§å¶é»è®¤å¼ï¼ enable, up, down, disable */\r\n    @Input() cascadeStatus: 'enable' | 'up' | 'down' | 'disable' = 'enable';\r\n\r\n    @Input() placeholder = '';\r\n\r\n    /** æ¾ç¤ºå·²éè®°å½åè¡¨ã é»è®¤ä¸º false ä¸æ¾ç¤º */\r\n    @Input() showSelected = false;\r\n\r\n    /** åºç¨æ¶èå¤¹ */\r\n    @Input() useFavorite = false;\r\n    /** æ¶èæ°æ®æ¥èªäºï¼ locale: æ¬å°å­å¨ï¼ remote: æå¡å¨ç«¯å­å¨ */\r\n    @Input() favoriteDataFrom: 'locale' | 'remote' = 'remote';\r\n    /** ä½¿ç¨æç¤º,å¿«æ·éæ© */\r\n    @Input() useTip = false;\r\n    /** è®°å½çªå£å¤§å° */\r\n    @Input() isRecordSize = false;\r\n\r\n    /** å¿«ééæ© */\r\n    @Input() userId: string;\r\n\r\n    // æ¯å¦å¯ç¨éä¸­valueå¼å¯¹åºçè¡æ°æ®\r\n    @Input() enableToSelect = true;\r\n\r\n    @Input() enableFindText = false;\r\n    /** -1: ä¸å±å¼ï¼ 0: å¨é¨å±å¼ï¼>0: å±å¼å°æå®çº§æ° */\r\n    @Input() expandLevel = -1;\r\n    /** æ å½¢å¸®å©æ°æ®å è½½æ¹å¼ï¼ default: åç½®åæ°ï¼ loadall: å è½½ææ layerloadï¼åå±å è½½ */\r\n    @Input() loadTreeDataType: 'default' | 'loadall' | 'layerload' = 'default';\r\n\r\n    /** çªå£æå¼åç«å³å è½½æ°æ®ï¼é»è®¤ä¸º true */\r\n    @Input() loadDataWhenOpen = true;\r\n\r\n    /**\r\n     * å¯¼èªåè¡¨ï¼æ åè¡¨å¨å¸®å©æå¼åéä¸­çæ°æ®;\r\n     * è®¾ç½®åï¼`selectFirstInNav` å¤±æï¼\r\n     */\r\n    @Input() navSelectedIds = '';\r\n\r\n    /**\r\n     * å¯¼èªå¸®å©ï¼éä¸­ç¬¬1æ¡æ°æ®ï¼é»è®¤ä¸º false;\r\n     * æ³¨æï¼å½`navSelectedIds`ä¸ä¸ºç©ºæ¶ï¼æ­¤å±æ§å¤±æã\r\n     */\r\n    @Input() selectFirstInNav = false;\r\n\r\n\r\n    /** å¯ç¨æé å®æ´æ è¿æ»¤ */\r\n    @Input() enableFullTree = true;\r\n\r\n    /** æ¾ç¤ºææ¬èªå®ä¹å½æ° */\r\n    @Input() displayFormatter: (value: string, data: any, instance: any) => string = undefined;\r\n    /** æ¾ç¤ºææ¬å­æ®µéåï¼ä»¥ è±æ éå·éå¼ */\r\n    @Input() displayFields = '';\r\n    @Input() displayTextSeparator = '_';\r\n\r\n    /**\r\n     * å¸®å©åæ°æ®IDï¼ä¸ä¸ºç©ºæ¶è°ç¨æå®çURI\r\n     * /api/runtime/bcc/v1.0/help/data/{helpId}\r\n     */\r\n    @Input() helpId = '';\r\n    /** ææ¬å¯¹é½æ¹å¼ï¼ left | center | right; é»è®¤ left */\r\n    @Input() textAlign = 'left';\r\n\r\n    /** é¼ æ æ»è¿è¾å¥æ¡æ¶æ¾ç¤ºè¾å¥æ¡åçææ¬ä¿¡æ¯ */\r\n    @Input() enableTitle = true;\r\n    @Input() useExtendInfo = false;\r\n    @Input() extInfoFields = '';\r\n    @Input() extInfoFormatter: ExtInfoFormatter;\r\n    @Input() extendInfo = '';\r\n    /** IDE è®¾è®¡å¨èªå®ä¹æ ¼å¼å 2103 */\r\n    @Input() customFormatter: CustomDataFormatter = null;\r\n    @Input() customNavFormatter: CustomDataFormatter = null;\r\n\r\n    /** èªå®ä¹ç¡®å®äºä»¶ */\r\n    @Input() okHandler = null;\r\n    /** èªå®ä¹åæ¶äºä»¶ */\r\n    @Input() cancelHandler = null;\r\n\r\n    @Input() tagboxHeight = 'auto';\r\n    @Input() maxTagboxHeight;\r\n\r\n    /** å¯ç¨è·åææå­çº§æ°æ®çåè½ */\r\n    @Input() enableGetAllChildNodes = true;\r\n\r\n    @Input() shortcutKey = {\r\n        /** æå¼å¸®å©çªå£ */\r\n        open: 'ArrowRight',\r\n        /** ç¡®è®¤éæ©æ°æ® */\r\n        confirm: 'Enter',\r\n        /** æç´¢æ¡ç¦ç¹ */\r\n        searchFocus: 'F3',\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveUp: 'ArrowUp',\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveDown: 'ArrowDown',\r\n        /** å±å¼èç¹ */\r\n        expand: 'ArrowRight',\r\n        /** æå èç¹ */\r\n        collapse: 'ArrowLeft',\r\n        /** ä¸ä¸é¡µ */\r\n        nextPager: 'PageDown',\r\n        /** ä¸ä¸é¡µ */\r\n        prevPager: 'PageUp'\r\n    };\r\n\r\n    /** æ°æ®éæ©åï¼å¼æ å°åè§¦å\r\n     * è¿å Observable\r\n     *      canSelect: <boolean>  æ¯å¦åè®¸éæ©\r\n     *      message: <string> ä¸åè®¸éæ©æ¶çæç¤ºä¿¡æ¯\r\n     */\r\n    @Input() beforeSelectData: (p: { instance: any; data: any }) => Observable<{ canSelect: boolean, message: string } | boolean>;\r\n\r\n    @Output() selectedData = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n    @Output() search = new EventEmitter();\r\n    // å¸®å©ææ¬æ¡ä¸­å¼ååäºä»¶\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() loadSuccess = new EventEmitter();\r\n\r\n    @Output() pagerChanged = new EventEmitter();\r\n\r\n    @Output() expandTreeNode = new EventEmitter();\r\n    @Output() textChanged = new EventEmitter();\r\n\r\n    @Output() checkedChange = new EventEmitter<{ data: any, isCheck: boolean }>();\r\n\r\n    @Output() tagRemoved = new EventEmitter();\r\n\r\n    /** åå®¹ä¸­çç½è¾¹è· */\r\n    containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };\r\n\r\n    containerStyle = {\r\n        marginLeft: this.containerMargin.left + 'px',\r\n        marginRight: this.containerMargin.right + 'px',\r\n        marginTop: this.containerMargin.top + 'px',\r\n        marginBottom: this.containerMargin.bottom + 'px'\r\n    };\r\n\r\n    _gridOptions: LookupGridOptions = lookupGridDefaults;\r\n\r\n    get gridOptions() {\r\n        if (this.useFavorite && this.columns && this.columns.length > 0 && !this.columns.find(item => item.field === FAVORITE_FIELD_NAME)) {\r\n            this.columns.push({\r\n                field: FAVORITE_FIELD_NAME, title: '', width: 40, align: 'center',\r\n                formatter: this.favHelper.favoriteColumnFormatter\r\n            });\r\n        }\r\n        this._gridOptions = Object.assign(this._gridOptions, {\r\n            singleSelect: this.singleSelect,\r\n            idField: this.idField,\r\n            uri: this.uri,\r\n            showFilterBar: this.showFilterBar,\r\n            pagination: this.pagination,\r\n            pageIndex: this.pageIndex,\r\n            pageSize: this.pageSize,\r\n            pageList: this.pageList,\r\n            total: this.total,\r\n            items: this.items,\r\n            columns: this.columns,\r\n            resizableColumns: true,\r\n            fixedHeader: true,\r\n            hover: true,\r\n            treeInfo: this.treeInfo\r\n        });\r\n\r\n        return this._gridOptions;\r\n    }\r\n    @Input() set gridOptions(opts) {\r\n        this._gridOptions = Object.assign({}, this._gridOptions, opts);\r\n        this.selectedColumns = this.multiSelMgr.initSelectedColumns();\r\n    }\r\n\r\n    @ViewChild('contentContainer', { read: ViewContainerRef }) contentContainer: ViewContainerRef;\r\n    @ViewChild('favoritesContainer', { read: ViewContainerRef }) favoritesContainer: ViewContainerRef;\r\n    @ViewChild('leftContainer', { read: ViewContainerRef }) leftContainer: ViewContainerRef;\r\n    @ViewChild('centerContainer', { read: ViewContainerRef }) centerContainer: ViewContainerRef;\r\n    @ViewChild('multiSelectDT') multiSelectDT: DataTableComponent;\r\n    @ViewChild('inputgroup') inputGroup: InputGroupComponent;\r\n    @ViewChild('leftPanel') leftPanel: LayoutPanelComponent;\r\n    @ViewChild('tagbox') tagbox: ElementRef;\r\n\r\n    @ViewChild('okbtn') okButton: ElementRef;\r\n\r\n    componentRef: ComponentRef<any>;\r\n    leftComponentRef: ComponentRef<LookupLeftComponent>;\r\n    favoritesComponentRef: ComponentRef<any>;\r\n\r\n    public http: ILookupHttpService;\r\n    public messagerService: MessagerService;\r\n    public loadingService: LoadingService;\r\n    loading: LoadingComponent;\r\n    // dataFieldMaps: any;\r\n    navigationOptions: NavigationOptions;\r\n\r\n    // å¯¼èªå¸®å©å·¦åå®½åº¦\r\n    leftPanelWidth = 320;\r\n    // å¯¼èªå¸®å©çªå£æå°å®½åº¦\r\n    navLookupDialogMinWidth = 960;\r\n\r\n    navigationFilter: NavigationFilter = null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    dialogOpenedSubscription: Subscription;\r\n    dialogClosedSubscription: Subscription;\r\n\r\n    isTextChange = false;\r\n    isTabChanged = false;\r\n\r\n    displayInfo: DisplayInfo = Object.assign({}, displayInfoDefault);\r\n\r\n    tabChangeSubscription = null;\r\n    // æå­è¡ç¹å»æ°æ®  ç¨äºæ¶è\r\n    personalConf: PersonalConfig = {};\r\n    favoriteColumns: any[] = [];\r\n    /** ä¸´æ¶æ¥è¯¢åæ° */\r\n    _searchState = null;\r\n    allData: any = [];\r\n    get selections() {\r\n        const selectItems = this.lookupSelectionSer.getSelections();\r\n        if (this.singleSelect) {\r\n            return selectItems[0];\r\n        } else {\r\n            return selectItems;\r\n        }\r\n    }\r\n    get usePersionalConf() {\r\n        return this.useFavorite || this.useTip || this.isRecordSize;\r\n    }\r\n\r\n    get displayTextList() {\r\n        if (this.displayText) {\r\n            return this.displayText.split(this.multipleChoiceSeparator);\r\n        }\r\n        return [];\r\n    }\r\n\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n    public utilService: UtilService;\r\n    public treeNodeHelper: TreeNodeHelper;\r\n    public localService: LocaleService;\r\n    public notifyService: NotifyService;\r\n    allColumnsTitle = 'ææå';\r\n    mustWriteSomething = 'è¯·è¾å¥å³é®å­åæ¥è¯¢ã';\r\n    mustChoosAdatarow = 'è¯·éæ©ä¸æ¡è®°å½ï¼';\r\n    addFavoriteSuccess = 'æ¶èæåã';\r\n    delFavoriteSuccess = 'ç§»é¤æ¶èæåã';\r\n\r\n    searching = false;\r\n    /** ä¸´æ¶å­å¨æ¥è¯¢ç»æé */\r\n    _searchResult = null;\r\n\r\n    lookupinitializationSubject = new Subject();\r\n\r\n    /** å¤éæ¶ï¼éä¸­çæ°æ® */\r\n    currentSelectedItems: Observable<any> = of([]);\r\n    /** å·²éæ°æ®åä¿¡æ¯ */\r\n    selectedColumns = [];\r\n    activeTab: string | 'datalist' | 'favorite' | 'selected' = 'datalist';\r\n\r\n    favHelper: FavoriteHelper = null;\r\n    ttEventMgr: TreeTableEventManager = null;\r\n    multiSelMgr: MultiSelectionManager = null;\r\n    httpMgr: LookupHttpManager = null;\r\n    lookupCmpMgr: LookupComponentManager = null;\r\n    dialogMgr: LookupDialogManager = null;\r\n    selectionMgr: SelectionManager = null;\r\n    dtEventMgr: DataTableEventManager = null;\r\n\r\n    lookupSelectionSer: LookupSelectionService = null;\r\n\r\n    controlId = '';\r\n    savingFaoriteData = false;\r\n    isReady = false;\r\n    showTagboxClearButton = false;\r\n    hasError = false;\r\n\r\n    isGetAllChidlNodes = false;\r\n    eventManager: EventManager;\r\n    /** éä¸­è®°å½IDï¼èªå®ä¹å¸®å©åæ°æ¶ä½¿ç¨ */\r\n    selectedIds = [];\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    constructor(\r\n        public injector: Injector, public cfr: ComponentFactoryResolver,\r\n        public el: ElementRef, public utils: CommonUtils,\r\n        private defaultMapping: LookupDefaultMapping, public changeDetector: ChangeDetectorRef,\r\n        public shortcuts: ShortcutsService, public lookupUtils: LookupUtils,\r\n        private zone: NgZone, private render2: Renderer2\r\n    ) {\r\n        super(injector, el, changeDetector);\r\n        this.createInstance();\r\n        this.currentSelectedItems = this.lookupSelectionSer.selected$;\r\n        this.eventManager = this.injector.get(EventManager);\r\n        this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.checkGridOptions();\r\n        this.displayInfo.title = this.title;\r\n        /** ä¼ éä¸ä¸æ */\r\n        if (this.http) {\r\n            this.http.context = this.context;\r\n        }\r\n\r\n        this.allColumnsTitle = this.localService.getValue('lookup.allColumns');\r\n        this.mustWriteSomething = this.localService.getValue('lookup.mustWriteSomething');\r\n        this.mustChoosAdatarow = this.localService.getValue('lookup.mustChoosAdatarow');\r\n        this.addFavoriteSuccess = this.localService.getValue('lookup.favoriteInfo.addFav') || this.addFavoriteSuccess;\r\n        this.delFavoriteSuccess = this.localService.getValue('lookup.favoriteInfo.cancelFav') || this.delFavoriteSuccess;\r\n\r\n        this.dialogMgr.onDialogCreated();\r\n        // åå§åä¸ªæ§åéç½®\r\n        if (this.usePersionalConf) {\r\n            this.favHelper.initPersonalInfo();\r\n        }\r\n\r\n        if (this.useExtendInfo) {\r\n            const jsonData = this.selectionMgr.getBindingData();\r\n            this.updateExtendInfo(jsonData, false);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this.subscriptions.forEach(n => {\r\n            if (n) {\r\n                n.unsubscribe();\r\n                n = null;\r\n            }\r\n        });\r\n\r\n        if (this.selectionMgr) {\r\n            this.selectionMgr.destroy();\r\n        }\r\n\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) { }\r\n\r\n    ngAfterViewInit() {\r\n        onTextChanged.bind(this)();\r\n\r\n        if (this.viewType === 'text') {\r\n            // this.shortcuts.add({\r\n            //     key: 'F2',\r\n            //     target: this.inputGroup.textbox.nativeElement,\r\n            //     command: () => {\r\n            //         this.showDialog();\r\n            //     }\r\n            // });\r\n            this.render2.listen(this.inputGroup.textbox.nativeElement, 'keydown.F2', this.showDialog.bind(this));\r\n        } else {\r\n            this.registerMouseEventForTagView();\r\n\r\n            if (this.tagboxHeight) {\r\n                const el = this.tagbox.nativeElement.querySelector('.multi-more');\r\n                let tbh = this.tagboxHeight;\r\n                if (tbh !== 'auto') {\r\n                    tbh += 'px';\r\n\r\n                    if (this.maxTagboxHeight) {\r\n                        this.render2.setStyle(el, 'maxHeight', `${this.maxTagboxHeight}px`);\r\n                    }\r\n                }\r\n\r\n                this.render2.setStyle(el, 'height', tbh);\r\n            }\r\n        }\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n    }\r\n\r\n    private createInstance() {\r\n        this.http = this.injector.get(ServerSideToken, null);\r\n        this.messagerService = this.injector.get(MessagerService);\r\n        this.loadingService = this.injector.get(LoadingService);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n\r\n        this.lookupSelectionSer = new LookupSelectionService(this);\r\n\r\n        this.utilService = new UtilService(this);\r\n        this.localService = this.injector.get(LocaleService);\r\n        this.treeNodeHelper = new TreeNodeHelper(this);\r\n\r\n        this.favHelper = new FavoriteHelper(this);\r\n        this.ttEventMgr = new TreeTableEventManager(this);\r\n        this.multiSelMgr = new MultiSelectionManager(this);\r\n        this.httpMgr = new LookupHttpManager(this);\r\n        this.lookupCmpMgr = new LookupComponentManager(this);\r\n        this.dialogMgr = new LookupDialogManager(this);\r\n        this.selectionMgr = new SelectionManager(this);\r\n        this.dtEventMgr = new DataTableEventManager(this);\r\n\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n\r\n        this.selectionMgr.initDisplayValue();\r\n        this.dictPickingSubscription = this.dictPicking({\r\n            instance: this\r\n        }).subscribe((pr: PickingResult) => {\r\n            this.dialogMgr.canOpenDialog(pr);\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    /** å¤æ­æ¯å¦ä¸ºååè¡¨å¸®å© */\r\n    isDoublleList() {\r\n        return (\r\n            this.displayType === LookupGridDisplayType.NavList || this.displayType === LookupGridDisplayType.NavTreeList\r\n        );\r\n    }\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºä¸ºæ å¸®å© */\r\n    isTree() {\r\n        return this.displayType.toUpperCase() === LookupGridDisplayType.TreeList;\r\n    }\r\n\r\n    onResized(e: any) {\r\n        this.resizeCmp(e.size);\r\n        this.resized.emit(e.size);\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n        this.resizeCmp(pos.size);\r\n        if (this.isDoublleList() && this.leftComponentRef) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight()\r\n            });\r\n        }\r\n    }\r\n\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.resizeCmp(pos.size);\r\n        if (this.leftPanel) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight()\r\n            });\r\n        }\r\n\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    resizeCmp(size?: any) {\r\n        if (!this.componentRef || !this.componentRef.instance) {\r\n            return;\r\n        }\r\n\r\n        if (!size) {\r\n            size = this.dialog.size;\r\n        }\r\n        const _size = {\r\n            width: size.width - this.containerMargin.left - this.containerMargin.right,\r\n            height: this.dialogMgr.getHeight()\r\n        };\r\n\r\n        if (this.useFavorite && this.favoritesComponentRef) {\r\n            this.favoritesComponentRef.instance.resize(_size);\r\n        }\r\n        if (this.isRecordSize) {\r\n            this.personalConf.size = this.dialog.size;\r\n            this.personalConfigService.updatePersonalConfig({ size: this.dialog.size });\r\n        }\r\n        if (this.isDoublleList()) {\r\n            _size.width = size.width - this.leftPanel.width - 27;\r\n        }\r\n\r\n        this.componentRef.instance.resize(_size);\r\n    }\r\n\r\n    private checkGridOptions() {\r\n        if (!this.gridOptions.idField) {\r\n            console.warn('æªè®¾ç½®ä¸»é®å­æ®µ idField');\r\n        }\r\n\r\n        if (!this.beforeSelectData) {\r\n            this.beforeSelectData = () => {\r\n                return of(true);\r\n            };\r\n        }\r\n    }\r\n\r\n    getComponentType(): Type<any> {\r\n        if (!this.displayType) {\r\n            this.displayType = 'LIST';\r\n        }\r\n        switch (this.displayType) {\r\n            case LookupGridDisplayType.List:\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n                return DataTableComponent;\r\n            case LookupGridDisplayType.TreeList:\r\n                return TreeTableComponent;\r\n        }\r\n    }\r\n\r\n    showLoading(msg = '') {\r\n        if (this.dialog && this.dialog.modalContent && !this.loading) {\r\n            const opts = {\r\n                container: this.dialog.modalContent,\r\n                delay: 200,\r\n            };\r\n\r\n            if (msg) {\r\n                opts['message'] = msg;\r\n            }\r\n\r\n            this.loading = this.loadingService.show(opts);\r\n        } else {\r\n            this.loading = this.loadingService.show();\r\n        }\r\n    }\r\n\r\n    closeLoading() {\r\n        if (this.loading) {\r\n            this.loading.close();\r\n            this.loading = null;\r\n        }\r\n\r\n        this.loadingService.clearAll();\r\n    }\r\n\r\n    getSearchColumns(resdata: any) {\r\n        const cols = resdata.columns || this.columns;\r\n        if (resdata.searchFields) {\r\n            return resdata.searchFields.map(sf => {\r\n                const c = cols.find(col => col.field.toLowerCase() === sf.value.toLowerCase());\r\n                if (c) {\r\n                    sf.label = c.title;\r\n                }\r\n                return sf;\r\n            });\r\n        } else if (cols) {\r\n            return cols.filter(c => c.searchField).map(col => {\r\n                return {\r\n                    label: col.title,\r\n                    value: col.field\r\n                };\r\n            });\r\n        }\r\n        return [];\r\n    }\r\n\r\n\r\n    private initOptions(resData: LookupGridResult) {\r\n        let obser = of(true);\r\n        this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n        if (resData) {\r\n            if (resData.columns && resData.columns.length) {\r\n                this.columns = resData.columns;\r\n            }\r\n\r\n            this.setLookupTitleText(resData);\r\n\r\n            if (this.isDoublleList() && this.dialogWidth < this.navLookupDialogMinWidth && !this.isRecordSize) {\r\n                this.dialogWidth = this.navLookupDialogMinWidth;\r\n                this.dialog.reSize({ width: this.dialogWidth });\r\n            }\r\n\r\n            if (!this.customDisplayType) {\r\n                this.displayType = resData.displayType || this.displayType || 'LIST';\r\n                this.changeDetector.detectChanges();\r\n                this.lookupCmpMgr.createComponentWithServerData(resData);\r\n            }\r\n\r\n            if (this.isDoublleList() && resData.navigation && !this.leftComponentRef) {\r\n                this.navigationOptions = resData.navigation;\r\n                this.navigationOptions.hover = true;\r\n                this.navigationOptions.searchFields = this.getSearchColumns(this.navigationOptions);\r\n                // update columns formatter\r\n                if (this.customNavFormatter) {\r\n                    this.navigationOptions.columns.forEach(col => {\r\n                        if (this.customNavFormatter[col.field]) {\r\n                            col.formatter = this.customNavFormatter[col.field];\r\n                        }\r\n                    });\r\n\r\n                    this.navigationOptions['rowStyler'] = this.customNavFormatter.rowStyler;\r\n                    this.navigationOptions['cellStyler'] = this.customNavFormatter.cellStyler;\r\n\r\n                }\r\n                // 20210926 æ å¯¼èªå¸®å©ä¸­ å·¦ä¾§æ æ¯æåå±å è½½\r\n                if (this.displayType === LookupGridDisplayType.NavTreeList) {\r\n                    let _nav_treeinfo_loadtype = this.navigationOptions.treeInfo.loadDataType;\r\n                    if (this.loadTreeDataType !== 'default') {\r\n                        _nav_treeinfo_loadtype = this.loadTreeDataType === 'loadall' ? 'all' : 'async';\r\n                    }\r\n                    this.navigationOptions.treeInfo.loadDataType = _nav_treeinfo_loadtype;\r\n                }\r\n\r\n                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);\r\n            }\r\n        } else {\r\n            this.lookupCmpMgr.createContent(this.gridOptions);\r\n            this.lookupCmpMgr.createFavoriteComponent();\r\n        }\r\n\r\n        if (this.isTextChange) {\r\n            this.componentRef.instance.searchData.value = this.displayText;\r\n        }\r\n\r\n        // update columns formatter\r\n        if (this.customFormatter) {\r\n            this.columns.forEach(col => {\r\n                if (this.customFormatter[col.field]) {\r\n                    col.formatter = this.customFormatter[col.field];\r\n                }\r\n            });\r\n\r\n            if (this.customFormatter.rowStyler) {\r\n                this.componentRef.instance.rowStyler = this.customFormatter.rowStyler;\r\n            }\r\n\r\n            if (this.customFormatter.cellStyler) {\r\n                this.componentRef.instance.cellStyler = this.customFormatter.cellStyler;\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n        return obser;\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®å¸®å©çªå£æ é¢\r\n     */\r\n    private setLookupTitleText(resData: LookupGridResult) {\r\n        if (resData.displayInfo) {\r\n            this.displayInfo = resData.displayInfo;\r\n        }\r\n\r\n        // å¦æèªå®ä¹æ é¢ï¼å°ä»¥æ­¤æ é¢ä¸ºåãå¦åå è½½æå¡å¨ç«¯è¿åçæ°æ®\r\n        if (this.title && this.title !== 'æ­¤å¤æ¾ç¤ºå¸®å©æ é¢') {\r\n            this.displayInfo.title = this.title;\r\n        }\r\n\r\n        if (this.displayInfo && resData.title) {\r\n            if (!this.displayInfo.title) {\r\n                this.displayInfo.title = resData.title;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showGetAllChildrenCheckbox() {\r\n        if (this.isTree() && this.treeInfo) {\r\n            this.enableGetAllChildNodes = this.treeInfo.loadDataType !== 'all' && this.treeInfo.layerType === 'pathcode';\r\n        } else {\r\n            this.enableGetAllChildNodes = false;\r\n        }\r\n    }\r\n\r\n    initData() {\r\n        const observer = {\r\n            next: (data: LookupGridResult) => {\r\n                // æå¡å¨ç«¯åçéè¯¯ï¼è¿åNULL æ¶ï¼ç´æ¥å³é­çªå£\r\n                if (data === null) {\r\n                    this.isShow = false;\r\n                    if (this.dialog) {\r\n                        this.dialog.close();\r\n                    }\r\n                    return;\r\n                }\r\n                this.initOptions(data).subscribe(() => {\r\n                    this.selectedColumns = this.multiSelMgr.initSelectedColumns();\r\n                    this.favoriteColumns = this.favHelper.getFavoriteColumns();\r\n\r\n                    if (this.usePersionalConf) {\r\n                        if (!this.personalConfigService.getPersonalData()) {\r\n                            this.personalConfigService.savePersonalConfig(this.personalConf);\r\n                        }\r\n                    }\r\n                    if (!this.isTabChanged) {\r\n                        this.lookupSelectionSer.loadSelections(data.selectedItems || []);\r\n                    }\r\n\r\n                    if (this.isDoublleList()) {\r\n                        // å¯¼èªå¸®å©æ¶ï¼è®¾ç½®å·¦ä¾§éä¸­æ°æ®æ¶ï¼ä¸å è½½ä¸»æ°æ®åè¡¨ã\r\n                        if (this.navSelectedIds || this.selectFirstInNav) {\r\n                            this.loadDataWhenOpen = false;\r\n                        }\r\n                    }\r\n\r\n                    this.loadData(data);\r\n\r\n                    if (this.isTree()) {\r\n\r\n                        if (this.activeTab === 'datalist') {\r\n                            const tt = this.componentRef.instance as TreeTableComponent;\r\n                            if (tt.loadDataType === 'all' && tt.searchData.value) {\r\n                                if (this.items && this.items.length) {\r\n                                    tt.toggleExpand(this.items[0], true);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.showGetAllChildrenCheckbox();\r\n                    }\r\n                    this.isTextChange = false;\r\n                    this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                    this.closeLoading();\r\n                    // this.isReady$.next(true);\r\n                    this.isReady = true;\r\n                    this.changeDetector.detectChanges();\r\n                    this.lookupinitializationSubject.next();\r\n                });\r\n            },\r\n            error: (err: any) => {\r\n                // this.isReady$.next(true);\r\n                this.closeLoading();\r\n                this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                this.isTextChange = false;\r\n\r\n                this.hasError = true;\r\n                this.changeDetector.detectChanges();\r\n                if (typeof err === 'string') {\r\n                    this.messagerService.error(err);\r\n                } else {\r\n                    if (err) {\r\n                        if (err.Message) {\r\n                            this.messagerService.error(err.Message);\r\n                        } else {\r\n                            if (err.error) {\r\n                                this.messagerService.error(err.error.Message);\r\n                            } else {\r\n                                this.messagerService.error('åºç¨æå¡å¨éè¯¯,è¯·èç³»ç³»ç»ç®¡çåï¼');\r\n                            }\r\n                        }\r\n                    }\r\n                    console.log(err);\r\n                }\r\n            }\r\n        };\r\n\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.pageSize || 20,\r\n                pageIndex: 1\r\n            }\r\n        };\r\n        const t: LOAD_DATA_TYPE = 'all';\r\n        if (this.isTextChange) {\r\n            p = {\r\n                search: {\r\n                    field: '*',\r\n                    value: this.displayText\r\n                }\r\n            };\r\n        }\r\n\r\n        if (!this.isTabChanged && this.enableToSelect) {\r\n            const vals = this.selectionMgr.getSelectedIds();\r\n            if (vals && vals.length) {\r\n                p['selectedInfo'] = {\r\n                    selected: true,\r\n                    selectedIds: vals\r\n                };\r\n            } else {\r\n                if (this['selectedIds']) {\r\n                    p['selectedInfo'] = {\r\n                        selected: true,\r\n                        selectedIds: this['selectedIds']\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.showLoading();\r\n        this.hasError = false;\r\n        this.httpMgr.lookupRequest(p, t).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                if (restData) {\r\n                    restData.selectedItems = restData['selectedData'] || [];\r\n                } else {\r\n                    if (restData && typeof restData === 'object') {\r\n                        restData.selectedItems = [];\r\n                    }\r\n                }\r\n                return restData;\r\n            })\r\n        ).subscribe(observer);\r\n\r\n    }\r\n\r\n    loadData(resData?: LookupGridResult, rebindEvent = true) {\r\n        if (this.activeTab === 'datalist') {\r\n\r\n            if (this.useFavorite && !this.isTree()) {\r\n                this.favHelper.updateFavoritesStatus(resData.items);\r\n            }\r\n\r\n            switch (this.displayType) {\r\n                case LookupGridDisplayType.NavList:\r\n                case LookupGridDisplayType.NavTreeList:\r\n                case LookupGridDisplayType.List:\r\n                    this.loadDataTableData(resData);\r\n                    if (rebindEvent) {\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                    break;\r\n                case LookupGridDisplayType.TreeList:\r\n                    this.loadTreeTableData(resData, rebindEvent);\r\n                    break;\r\n            }\r\n        } else if (this.activeTab === 'favorite') {\r\n            this.loadFavData(resData);\r\n        }\r\n\r\n        // éä¸­æ°æ®\r\n        this.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    private loadFavData(result: LookupGridResult) {\r\n        // å è½½æ¶èæ°æ®\r\n        if (this.useFavorite) {\r\n            if (this.isTree) {\r\n                this.setTreeInfo(result);\r\n            }\r\n\r\n            if (this.isTree()) {\r\n                const treeNodes = this.favHelper.initFavoriteTreeData(result.items);\r\n                const treeData = this.treeNodeHelper.flatTreeNodes(treeNodes).map(n => {\r\n                    n.data['_addtional_'] = n['addtional'];\r\n                    return n.data;\r\n                });\r\n                this.lookupSelectionSer.initFavoriteItems(treeData);\r\n\r\n                setTimeout(() => {\r\n                    this.favoritesComponentRef.instance.scrollToY(1);\r\n                });\r\n\r\n            } else {\r\n                this.lookupSelectionSer.initFavoriteItems(result.items);\r\n            }\r\n\r\n            this.favHelper.loadFavoritesData(result);\r\n\r\n        }\r\n    }\r\n\r\n    loadDataTableData(resData?: LookupGridResult) {\r\n        if (resData) {\r\n            if (this.gridOptions) {\r\n                this.items = resData.items;\r\n                this.total = resData.total || resData.items.length;\r\n\r\n                if (resData.pageInfo) {\r\n                    if (resData.pageInfo.pageList && (!this.pageList || !this.pageList.length)) {\r\n                        this.pageList = resData.pageInfo.pageList;\r\n                    }\r\n                    this.pagination = resData.pageInfo.enablePager;\r\n                    this.pageIndex = resData.pageInfo.pageIndex;\r\n                    this.pageSize = resData.pageInfo.pageSize;\r\n                } else {\r\n                    this.pagination = false;\r\n                }\r\n            } else {\r\n                this.gridOptions = resData as LookupGridOptions;\r\n            }\r\n        }\r\n\r\n        this.updateDataTable(this.gridOptions);\r\n    }\r\n\r\n    private updateDataTable(opts: any) {\r\n        if (opts) {\r\n            const dt = this.componentRef.instance as DataTableComponent;\r\n\r\n            if (!dt.columns || dt.columns.length === 0) {\r\n                dt.columns = this.gridOptions.columns;\r\n            }\r\n\r\n            dt.allColumnsTitle = this.allColumnsTitle;\r\n            dt.searchFields = opts.searchFields;\r\n            dt.pagination = opts.pagination;\r\n            dt.pageList = this.pageList;\r\n            dt.remoteSort = this.remoteSort;\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                dt.loadData({\r\n                    pageSize: opts.pageSize,\r\n                    pageIndex: this.gridOptions.pageIndex,\r\n                    total: this.gridOptions.total,\r\n                    data: this.gridOptions.items\r\n                });\r\n                dt.cd.markForCheck();\r\n            }\r\n            this.loadSuccess.emit();\r\n        }\r\n    }\r\n\r\n    private setTreeInfo(resData) {\r\n        if (!resData) { return; }\r\n\r\n        let _treeInfo = null;\r\n        if (resData.treeInfo) {\r\n            const onlySelectLeaf = resData.treeInfo.onlySelectLeaf;\r\n            let _osl: ONLY_SELECT_LEAF = 'no';\r\n            if (onlySelectLeaf !== undefined) {\r\n                _osl = onlySelectLeaf ? 'yes' : 'no';\r\n            }\r\n            _treeInfo = { ...resData.treeInfo, onlySelectLeaf: _osl };\r\n        }\r\n\r\n        if (this.gridOptions.treeInfo) {\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (treeInfo) {\r\n\r\n                if (treeInfo.onlySelectLeaf === undefined || treeInfo.onlySelectLeaf === null) {\r\n                    treeInfo.onlySelectLeaf = 'no';\r\n                }\r\n\r\n                if (typeof treeInfo.onlySelectLeaf === 'boolean') {\r\n                    treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? 'yes' : 'no';\r\n                }\r\n\r\n                // 20210902\r\n                if (this.loadTreeDataType === 'default') {\r\n                    treeInfo.loadDataType = _treeInfo.loadDataType;\r\n                } else {\r\n                    treeInfo.loadDataType = this.loadTreeDataType === 'loadall' ? 'all' : 'async';\r\n                }\r\n\r\n                if (treeInfo.onlySelectLeaf !== 'default') {\r\n                    _treeInfo = Object.assign(_treeInfo, treeInfo);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.treeInfo = _treeInfo;\r\n    }\r\n\r\n    private loadTreeTableData(resData?: LookupGridResult, rebindEvent = true) {\r\n        const items = resData ? resData.items : this.gridOptions.items;\r\n        this.items = items;\r\n        if (resData) {\r\n            this.setTreeInfo(resData);\r\n\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (!treeInfo['treeDataIsInit']) {\r\n                if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                    this.items = this.lookupUtils.makeTree(this.items, treeInfo);\r\n                } else {\r\n                    this.items = this.lookupUtils.makeTreeWithParentID(\r\n                        this.items,\r\n                        '',\r\n                        `${treeInfo.dataField}.${treeInfo.parentField}`,\r\n                        this.idField\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.componentRef.instance instanceof TreeTableComponent) {\r\n            const tt = this.componentRef.instance as TreeTableComponent;\r\n            if (this.treeInfo) {\r\n                tt.loadDataType = this.treeInfo.loadDataType;\r\n            }\r\n            const isLoadAllTreeData = () => {\r\n                if (this.loadTreeDataType === 'default') {\r\n                    return tt.loadDataType === 'all';\r\n                } else {\r\n                    return this.loadTreeDataType === 'loadall';\r\n                }\r\n            };\r\n\r\n            if (rebindEvent) {\r\n                this.ttEventMgr.bindTreetableEvent();\r\n            }\r\n            const isLoadAll = isLoadAllTreeData();\r\n\r\n            /** å®æ´æ èç¹æ£æ¥ By Lucas 20200302 */\r\n            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);\r\n            tt.keepSelect = true;\r\n\r\n            if (this.useFavorite) {\r\n                this.favHelper.updateFavoritesStatus(this.items);\r\n            }\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                tt.loadData(this.items);\r\n            }\r\n            tt.resize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¨æå®æ´æ ä¸­ï¼æé¨åèç¹å ä¸ºæ¡ä»¶è¢«è¿æ»¤ï¼ä¸ºæ¾ç¤ºå®æ´æ ï¼\r\n     * è¿äºèç¹å¨è¿è¡æ¶æ¯ä¸åè®¸è¢«éä¸­ç, è¿åæ°çèç¹æ°ç»\r\n     * By Lucas 20200302\r\n     */\r\n    checkNodeCanBeSelect(nodes, isAllTreeData = false): TreeNode[] {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty('addtional')) {\r\n                    node.selectable = !node['addtional'];\r\n                }\r\n\r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeCanBeSelect(node.children, isAllTreeData);\r\n                } else {\r\n                    if (isAllTreeData) {\r\n                        node.leaf = true;\r\n                    }\r\n                }\r\n\r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    onChanges(val) {\r\n        if (!val) {\r\n            this.onClear();\r\n        } else {\r\n            this.displayText = val;\r\n            this.isTextChange = true;\r\n            if (this.nosearch) {\r\n                this.setModelValue(val);\r\n            }\r\n\r\n            this.onModelTouched(val);\r\n            this.valueChanged.emit(val);\r\n            this.textChanged.emit(val);\r\n        }\r\n    }\r\n\r\n    onClear(emit = true) {\r\n        this.isTextChange = false;\r\n        this.displayText = '';\r\n        this.displayValue = '';\r\n        this.originalText = '';\r\n        this.extendInfo = '';\r\n        this.setModelValue('');\r\n        if (this.mappingFn) {\r\n            this.mappingFn(null, this.mapFields);\r\n        } else {\r\n            if (this.mapFields) {\r\n                const bindingData = this.selectionMgr.getBindingData();\r\n                if (bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(null, this.mapFields, bindingData);\r\n                }\r\n            }\r\n        }\r\n        this.multiSelMgr.clear();\r\n        if (emit) {\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    clearValue(emit = true) {\r\n        this.onClear(emit);\r\n    }\r\n\r\n    selectItem(rowData?: any) {\r\n        let selectedRow = null;\r\n        if (rowData) {\r\n            selectedRow = rowData;\r\n        } else {\r\n            selectedRow = this.selections;\r\n\r\n            if (!selectedRow) {\r\n                selectedRow = null;\r\n            } else {\r\n                if (Array.isArray(selectedRow) && !selectedRow.length) {\r\n                    selectedRow = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        // å¦æå®ä¹èªå®ä¹å¤çç¡®å®äºä»¶ï¼åç±èªå®ä¹äºä»¶å¤çåé¢çé»è¾\r\n        if (this.okHandler) {\r\n            this.okHandler({ data: selectedRow, instance: this });\r\n        } else {\r\n\r\n            if (this.beforeSelectData) {\r\n                const bsdResult = this.beforeSelectData({ instance: this, data: selectedRow });\r\n                if (bsdResult && bsdResult.subscribe) {\r\n                    bsdResult.subscribe(\r\n                        (e: any) => {\r\n                            this._beforeSelectDataCallBack(e, selectedRow);\r\n                        }\r\n                    );\r\n                } else {\r\n                    console.error('å¸®å©æ°æ®éä¸­åäºä»¶æªè¿åå¼æè¿åç±»åéObservable, è¯·æ£æ¥');\r\n                }\r\n            } else {\r\n                this._beforeSelectDataCallBack(true, selectedRow);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private getParentPathCode(rows) {\r\n        const maxBy = (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));\r\n\r\n        const { dataField, pathField, layerField } = this.treeInfo;\r\n        const maxLayer = maxBy(rows, x => x[dataField][layerField]);\r\n\r\n        for (let i = 1; i <= maxLayer; i++) {\r\n            const _rows = rows.filter(n => n[dataField][layerField] === i);\r\n            if (_rows && _rows.length && _rows.length < rows.length) {\r\n                _rows.forEach(r => {\r\n                    const patchCode = r[dataField][pathField];\r\n                    const _rows2 = rows.filter(n => n[dataField][pathField] !== patchCode && n[dataField][pathField].indexOf(patchCode) === 0);\r\n                    if (_rows2 && _rows2.length) {\r\n                        rows = rows.filter(n => n[dataField][pathField] !== patchCode);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    private _beforeSelectDataCallBack(e, selectedRow) {\r\n        let canSelect = e;\r\n        let message = '';\r\n        if (typeof e === 'boolean') {\r\n            canSelect = e;\r\n        } else {\r\n            if (typeof e === 'object') {\r\n                canSelect = e.canSelect;\r\n                message = e.message;\r\n            } else {\r\n                canSelect = false;\r\n            }\r\n        }\r\n\r\n        if (!selectedRow) {\r\n            message = this.mustChoosAdatarow;\r\n            canSelect = false;\r\n        }\r\n\r\n        if (canSelect) {\r\n            let selectedRows$ = of(selectedRow);\r\n            // å¤é æ å¸®å© å¼æ­¥å è½½ åçº§ç  å¼å¯åæ­¥éæ© æåå«ä¸çº§\r\n            if (!this.singleSelect && this.enableCascade && this.isTree() &&\r\n                this.treeInfo.loadDataType !== 'all' && this.treeInfo.layerType === 'pathcode' &&\r\n                this.isGetAllChidlNodes) {\r\n                // const parentsIds = selectedRow.map(n => n[this.treeInfo.dataField][this.treeInfo.pathField]);\r\n\r\n                let parentsIds = this.getParentPathCode(selectedRow);\r\n                if (parentsIds && parentsIds.length) {\r\n                    parentsIds = parentsIds.map(n => n[this.treeInfo.dataField][this.treeInfo.pathField]);\r\n                    this.showLoading();\r\n                    selectedRows$ = this.httpMgr.getData({ parentsIds }, 'allChildren').pipe(\r\n                        map((r: LookupGridResult) => {\r\n                            const items = r.items ? r.items.map(d => d.data) : [];\r\n                            const allitems = [...selectedRow, ...items];\r\n                            let ids = allitems.map(n => n[this.idField]);\r\n                            ids = Array.from(new Set(ids));\r\n                            return ids.map(n => allitems.find(a => a[this.idField] === n));\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n\r\n            selectedRows$.subscribe((rows) => {\r\n                this.closeLoading();\r\n                this.updateControlValue(rows);\r\n                if (!this.useTip || !rows) {\r\n                    return;\r\n                }\r\n                if (this.useTip) {\r\n                    this.personalConfigService.updateQueckSelected(rows, this.localService.localeId);\r\n                }\r\n            });\r\n        } else {\r\n            if (message) {\r\n                if (this.notifyService) {\r\n                    this.notifyService.warning(message);\r\n                } else {\r\n                    this.messagerService.warning(message, '', true, () => {\r\n                        this.dialog.el.nativeElement.click();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateControlValue(selectedRow) {\r\n        if (selectedRow) {\r\n            this.setDisplayText(selectedRow);\r\n            if (this.mappingFn) {\r\n                this.mappingFn(selectedRow, this.mapFields, this.bindingData);\r\n            } else {\r\n                if (this.mapFields && this.bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(selectedRow, this.mapFields, this.bindingData);\r\n                }\r\n            }\r\n            this.setModelValue(this.displayText);\r\n            if (this['inDatagrid'] && selectedRow) {\r\n                const selectItems = Array.isArray(selectedRow) ? selectedRow : [selectedRow];\r\n                this.updateBindData(selectItems);\r\n            }\r\n            this.selectedData.emit(selectedRow);\r\n            this.runDictPickedEvent(selectedRow);\r\n            this.isTextChange = false;\r\n        } else {\r\n            if (document.activeElement) {\r\n                (document.activeElement as HTMLButtonElement).blur();\r\n            }\r\n            this.messagerService.warning(this.mustChoosAdatarow);\r\n        }\r\n    }\r\n\r\n    private updateBindData(selectedRow) {\r\n        if (!this.mapFields) {\r\n            return;\r\n        }\r\n\r\n        const helpFields = Object.keys(this.mapFields);\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n\r\n            if (bindingData) {\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n                        const val = selectedRow.map(r => {\r\n                            return this.utils.getValue(helpField, r);\r\n                        }).join(this.multipleChoiceSeparator);\r\n                        this.utils.setValue(bindingData, formField, val);\r\n                    });\r\n                });\r\n            }\r\n\r\n            // if (bindingData.setValue) {\r\n            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n            //     let pathArr: string[] = [];\r\n            //     if (bindingPath) {\r\n            //         pathArr = bindingPath.split('/').filter(n => n !== '');\r\n            //     }\r\n\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const fieldPaths = pathArr.concat(formField.split('.'));\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);\r\n            //         });\r\n            //     });\r\n            // }\r\n        } else {\r\n            // if (this.bindingData) {\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             this.utils.setValue(this.bindingData, formField, val);\r\n            //         });\r\n            //     });\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    private getExtendInfoFields(isHelpData = true) {\r\n        if (!this.extInfoFields) {\r\n            console.warn(`æªè®¾ç½®æ©å±å­æ®µã`);\r\n            return [];\r\n        }\r\n        const tipFieldArr = this.extInfoFields.split(',');\r\n\r\n        if (isHelpData) {\r\n            let extendInfoFields = [];\r\n            extendInfoFields = tipFieldArr.map(tf => {\r\n                const mapKey = Object.keys(this.mapFields).find(k => {\r\n                    return this.mapFields[k] === tf;\r\n                });\r\n\r\n                if (mapKey) {\r\n                    return mapKey;\r\n                } else {\r\n                    console.warn(`å¨å¸®å©æ å°å­æ®µä¸­æªæ¾å°${tf}`);\r\n                    return '';\r\n                }\r\n            });\r\n            return extendInfoFields;\r\n        }\r\n\r\n        return tipFieldArr;\r\n    }\r\n\r\n    onUpdateExtendInfo() {\r\n        const jsonData = this.selectionMgr.getBindingData();\r\n        this.updateExtendInfo(jsonData, false);\r\n    }\r\n\r\n    // éä¸­å¸®å©æ°æ®åï¼æ´æ°æ©å±ä¿¡æ¯\r\n    private updateExtendInfo(data: any, isHelpData = true) {\r\n        if (data) {\r\n            if (this.extInfoFormatter) {\r\n                if (Array.isArray(data)) {\r\n                    const tipString = data.map(n => {\r\n                        return this.getExtendInfoText(n);\r\n                    });\r\n                    this.extendInfo = tipString.join('ï¼');\r\n                } else {\r\n                    this.extendInfo = this.getExtendInfoText(data);\r\n                }\r\n            } else {\r\n                const extendInfoFields = this.getExtendInfoFields(isHelpData);\r\n                if (extendInfoFields && extendInfoFields.length) {\r\n                    if (Array.isArray(data)) {\r\n                        const tipString = data.map(n => {\r\n                            return this.getExtendInfoText(n, extendInfoFields);\r\n                        });\r\n                        this.extendInfo = tipString.join('ï¼');\r\n                    } else {\r\n                        this.extendInfo = this.getExtendInfoText(data, extendInfoFields);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoText(itemData, fields = null) {\r\n        if (typeof this.extInfoFormatter === 'function') {\r\n            return this.extInfoFormatter({ bindingData: itemData, instance: this });\r\n        } else {\r\n            const tipString = [];\r\n            const tipValues = fields.map(t => {\r\n                const tfv = this.utils.getValue(t, itemData);\r\n                tipString.push(tfv);\r\n                return { [t]: tfv };\r\n            });\r\n            return tipString.join(' ');\r\n        }\r\n    }\r\n\r\n    private getDisplayText(rows: any) {\r\n        const df = this.displayFields ? this.displayFields.split(',') : [this.textField];\r\n        const txtArr = rows.map(r => {\r\n            const t = [];\r\n            df.forEach(n => {\r\n                t.push(this.utils.getValue(n, r));\r\n            });\r\n            return t.join(this.displayTextSeparator);\r\n        });\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            return txtArr.join('');\r\n        } else {\r\n            if (this.displayFields) {\r\n                return txtArr.map(t => '[' + t + ']').join(',');\r\n            } else {\r\n                return txtArr.join(',');\r\n            }\r\n        }\r\n    }\r\n\r\n    private setDisplayText(selectedRow: any) {\r\n        this.originalText = this.displayText;\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            if (this.displayFormatter) {\r\n                this.displayText = this.utils.getValue(this.textField, selectedRow);\r\n                if (!this.isTree()) {\r\n                    this.displayText = this.displayFormatter(this.displayText, [selectedRow],\r\n                        { lookup: this, datatable: this.componentRef.instance as DataTableComponent });\r\n                } else {\r\n                    const tt = this.componentRef.instance as TreeTableComponent;\r\n                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], { lookup: this, tree: tt });\r\n                }\r\n            } else {\r\n                this.displayText = this.getDisplayText([selectedRow]);\r\n            }\r\n            this.displayValue = selectedRow[this.valueField];\r\n        } else {\r\n            if (selectedRow.length) {\r\n                if (this.displayFormatter) {\r\n                    this.displayText = selectedRow.map(r => {\r\n                        return this.utils.getValue(this.textField, r);\r\n                    }).join(this.multipleChoiceSeparator);\r\n                    if (!this.isTree()) {\r\n                        this.displayText = this.displayFormatter(this.displayText, selectedRow,\r\n                            { lookup: this, datatable: this.componentRef.instance as DataTableComponent });\r\n                    } else {\r\n                        const tt = this.componentRef.instance as TreeTableComponent;\r\n                        this.displayText = this.displayFormatter(this.displayText, selectedRow, { lookup: this, tree: tt });\r\n                    }\r\n                } else {\r\n                    this.displayText = this.getDisplayText(selectedRow);\r\n                }\r\n\r\n                this.displayValue = selectedRow.map(r => {\r\n                    return this.utils.getValue(this.valueField, r);\r\n                }).join(this.multipleChoiceSeparator);\r\n            }\r\n        }\r\n        this.originalText = this.displayText;\r\n    }\r\n\r\n    runDictPickedEvent(rowData: any) {\r\n        if (this.dictPicked) {\r\n            if (this.okButton) {\r\n                this.okButton.nativeElement.disabled = true;\r\n            }\r\n            this.dictPickedSubscription = this.dictPicked(rowData).subscribe((v: any) => {\r\n                if (this.okButton) {\r\n                    this.okButton.nativeElement.disabled = false;\r\n                }\r\n                if (typeof v === 'boolean') {\r\n                    if (v) {\r\n                        this.closeDialog(rowData);\r\n                    }\r\n                } else if (typeof v === 'object' && v.closeDialog !== undefined && !v.closeDialog) {\r\n                    if (v.message) {\r\n                        this.messagerService.warning(v.message);\r\n                    } else {\r\n                        this.closeDialog(rowData);\r\n                    }\r\n                } else {\r\n                    this.closeDialog(rowData);\r\n                }\r\n            });\r\n        } else {\r\n            this.closeDialog(rowData);\r\n        }\r\n    }\r\n\r\n    private focusToInput(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                if (this.inputGroup && this.inputGroup.textbox) {\r\n                    this.inputGroup.textbox.nativeElement.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    closeDialog(rowData = null) {\r\n        this.isShow = false;\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n\r\n        if (rowData) {\r\n            this.multiSelMgr.save(rowData);\r\n        }\r\n\r\n        this.focusToInput();\r\n    }\r\n\r\n    cancelSelect() {\r\n        this.closeDialog();\r\n        this.isTextChange = false;\r\n        if (!this.nosearch) {\r\n            this.displayText = this.originalText;\r\n            this.setModelValue(this.displayText);\r\n        }\r\n\r\n        if (this.cancelHandler) {\r\n            this.cancelHandler(this);\r\n        }\r\n    }\r\n\r\n    setModelValue(v) {\r\n        if (this.onModelChange) {\r\n            this.onModelChange(v);\r\n            this.valueChanged.emit(v);\r\n        }\r\n    }\r\n\r\n    // æ°æ®åè¡¨ï¼æ¶èï¼ å·²éæ°æ® tab é¡µåæ¢\r\n    onTabChange(e: any) {\r\n        this.activeTab = e.tabIndex;\r\n        this.personalConf.tabIndex = this.activeTab;\r\n        const _firstChange = this.isTabChanged;\r\n        this.isTabChanged = true;\r\n        this.personalConfigService.updatePersonalConfig({ tabIndex: e.tabIndex });\r\n\r\n        if (this.activeTab === 'datalist') {\r\n\r\n            if (this.isDoublleList() && !this.leftComponentRef) {\r\n                if (this.navigationOptions) {\r\n                    this.lookupCmpMgr.createLeftComponent(this.navigationOptions);\r\n                } else {\r\n                    this.initData();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this.items || !this.items.length) {\r\n                this.initData();\r\n            } else {\r\n                if (!_firstChange) {\r\n                    if (this.isTree()) {\r\n                        this.loadTreeTableData();\r\n                    } else {\r\n                        this.loadDataTableData();\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                }\r\n                // this.selectionMgr.selectCurrentValue();\r\n            }\r\n            this.showGetAllChildrenCheckbox();\r\n        } else {\r\n            if (this.activeTab === 'favorite') {\r\n                if (this.isTree()) {\r\n                    this.initData();\r\n                } else {\r\n                    if (!this.favoriteItems || !this.favoriteItems.length ||\r\n                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length) {\r\n                        this.initData();\r\n                    } else if (!_firstChange) {\r\n                        this.favHelper._loadFavoriteData(this.favoriteItems);\r\n                        // this.selectionMgr.selectCurrentValue();\r\n                    }\r\n                    //  else {\r\n                    //     this.selectionMgr.selectCurrentValue();\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n        setTimeout(() => {\r\n            this.resizeCmp();\r\n            if (this.isTree()) {\r\n                const y = this.componentRef.instance.state.scrollY;\r\n                this.componentRef.instance.scrollToY(y, 0);\r\n\r\n                if (this.enableCascade) {\r\n                    this.ttEventMgr.cascadeValueChanged(this.cascadeStatus);\r\n                }\r\n\r\n                this.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    //#region  Tag View ----------------------------------------------------------------------\r\n    private registerMouseEventForTagView() {\r\n        if (this.enableClear) {\r\n            this.tagbox.nativeElement.addEventListener(\r\n                'mouseenter',\r\n                this.onTagboxMouseEnter.bind(this)\r\n            );\r\n            this.tagbox.nativeElement.addEventListener(\r\n                'mouseleave',\r\n                this.onTagboxMouseLeave.bind(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? '' : 'none';\r\n        const clearIcon = event.target.querySelector('.input-group-clear');\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseEnter(event) {\r\n        if (this.displayText && this.enableClear) {\r\n            if (!this.readonly && !this.disabled) {\r\n                this.showTagboxClearButton = true;\r\n            }\r\n        }\r\n        if (this.showTagboxClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseLeave(event) {\r\n        this.toggleClearIcon(event);\r\n    }\r\n\r\n    onRemoveSelectItem($event, txt) {\r\n        // console.log($event, txt);\r\n        $event.stopPropagation();\r\n        const textArray = Array.from(this.displayTextList);\r\n        const removedIndex = this.displayTextList.indexOf(txt);\r\n        textArray.splice(removedIndex, 1);\r\n        this.displayText = textArray.join(this.multipleChoiceSeparator);\r\n        this.setModelValue(this.displayText);\r\n\r\n        if (this.displayValue) {\r\n            const vals = this.displayValue.split(this.multipleChoiceSeparator);\r\n            vals.splice(removedIndex, 1);\r\n            this.displayValue = vals.join(this.multipleChoiceSeparator);\r\n        }\r\n\r\n        if (this.mapFields) {\r\n            this.updateOtherFieldDataWhenTagremoved(removedIndex);\r\n        }\r\n\r\n        this.tagRemoved.emit({ removedIndex, instance: this });\r\n    }\r\n\r\n    private updateOtherFieldDataWhenTagremoved(removedIndex) {\r\n\r\n        const helpFields = Object.keys(this.mapFields);\r\n        const textFieldIndex = helpFields.indexOf(this.textField);\r\n\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n            if (bindingData.setValue) {\r\n                const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n                let pathArr: string[] = [];\r\n                if (bindingPath) {\r\n                    pathArr = bindingPath.split('/').filter(n => n !== '');\r\n                }\r\n\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n                        const fieldPaths = pathArr.concat(formField.split('.'));\r\n                        const val = bindingData.getValue(fieldPaths);\r\n                        const valArr = val.split(this.multipleChoiceSeparator);\r\n                        valArr.splice(removedIndex, 1);\r\n                        const newVal = valArr.join(this.multipleChoiceSeparator);\r\n                        bindingData.setValue(pathArr.concat(fieldPaths), newVal, true, true);\r\n                    });\r\n                });\r\n            }\r\n        } else {\r\n            if (this.bindingData) {\r\n                if (textFieldIndex > -1) {\r\n                    helpFields.splice(textFieldIndex, 1);\r\n                }\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n                        const val = this.utils.getValue(formField, this.bindingData);\r\n                        const valArr = val.split(this.multipleChoiceSeparator);\r\n                        valArr.splice(removedIndex, 1);\r\n                        const newVal = valArr.join(this.multipleChoiceSeparator);\r\n                        this.utils.setValue(this.bindingData, formField, newVal);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    onAllChildNodesClick($event: any) {\r\n        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;\r\n    }\r\n}\r\n","import {\r\n    Component, OnInit, ElementRef, AfterViewInit, OnChanges,\r\n    Output, EventEmitter, ViewChild, Injector, Renderer2, Input, SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\n\r\n@Component({\r\n    selector: 'lookup-tabs',\r\n    templateUrl: './lookup-tabs.component.html',\r\n    styleUrls: ['./lookup-tabs.component.scss'],\r\n    animations: [\r\n        trigger('flyInOut', [\r\n            transition(':enter', [style({ opacity: 0 }), animate('.3s', style({ opacity: 1 }))]),\r\n            transition(':leave', [animate('.3s', style({ opacity: 0 }))])\r\n        ])\r\n    ]\r\n})\r\nexport class LookupTabsComponent implements OnInit, OnChanges, AfterViewInit {\r\n\r\n    @Input() enableFav = false;\r\n    @Input() enableSelected = false;\r\n    @Input() selectedTotal = 0;\r\n    @Input() activeTab = 'datalist';\r\n\r\n    @Output() tabChange = new EventEmitter<any>();\r\n\r\n    @ViewChild('inkBar') inkBarRef: ElementRef;\r\n    @ViewChild('dataListNav') dataListNavRef: ElementRef;\r\n    @ViewChild('favoriteNav') favoriteNavRef: ElementRef;\r\n    @ViewChild('selectedNav') selectedNavRef: ElementRef;\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n\r\n    private render: Renderer2 = null;\r\n    private el: ElementRef = null;\r\n    constructor(public injector: Injector) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.render = this.injector.get(Renderer2);\r\n        this.el = this.injector.get(ElementRef);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.activeTab && !changes.activeTab.isFirstChange()) {\r\n            this.initInkBarPos(changes.activeTab.currentValue);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.initInkBarPos(this.activeTab);\r\n        }, 300);\r\n    }\r\n\r\n    navClickHandle(e: Event, v: string) {\r\n        e.stopPropagation();\r\n        this.activeTab = v;\r\n        // this.personalConfigService.personalConfObser$.next({tabIndex: v});\r\n        this.tabChange.emit({ event: e, tabIndex: v });\r\n        this.initInkBarPos(v);\r\n    }\r\n\r\n    initInkBarPos(which: string) {\r\n        if (!this.enableFav && !this.enableSelected) {\r\n            return;\r\n        }\r\n\r\n        let width = this.dataListNavRef.nativeElement.offsetWidth;\r\n        let left = 0;\r\n        if (which !== 'datalist') {\r\n            left = this.dataListNavRef.nativeElement.offsetWidth;\r\n        }\r\n        if (which === 'favorite') {\r\n            width = this.favoriteNavRef.nativeElement.offsetWidth;\r\n        } else if (which === 'selected') {\r\n            if (this.favoriteNavRef) {\r\n                left += this.favoriteNavRef.nativeElement.offsetWidth;\r\n            }\r\n\r\n            if (this.selectedNavRef) {\r\n                width = this.selectedNavRef.nativeElement.offsetWidth;\r\n            } else {\r\n                this.activeTab = 'datalist';\r\n            }\r\n        }\r\n\r\n        this.inkBarRef.nativeElement.style = `width: ${width}px; transform: translate3d(${left}px, 0px, 0px);`;\r\n    }\r\n    ngOnInit(): void {\r\n        // this.showWhich = this.personalConfigService.getActiveTabIndex();\r\n    }\r\n\r\n}\r\n","import { Directive, OnInit, AfterViewInit, Renderer2, Injector, Input} from '@angular/core';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\nimport { delay } from 'rxjs/operators';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Directive({\r\n    selector: '[lookup-tip]'\r\n})\r\nexport class LookupTipDirective implements OnInit, AfterViewInit {\r\n    @Input('lookup-tip') enableTip = false;\r\n    private tipPanel: Element;\r\n    private leaveEvent: any;\r\n    private enterEvent: any;\r\n    private clickEvent: any;\r\n    private isInTipPanel = false;\r\n    private selected: any[];\r\n    private personalConfigService: PersonalConfigService;\r\n    public localService: LocaleService;\r\n    private tipText = 'æ¨è¦æ¾çæ¯ä¸æ¯è¿äºï¼';\r\n    constructor(\r\n        private inputRef: InputGroupComponent,\r\n        private renderer: Renderer2,\r\n        public injector: Injector\r\n    ) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.localService = this.injector.get(LocaleService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.tipText = this.localService.getValue('lookup.tipText');\r\n        this.enableTip = false; // å æ°æ®æéé®é¢ï¼æ­¤åè½æå±è½ tfs: 403924\r\n        if (this.enableTip) {\r\n            this.inputRef.iconMouseEnter.subscribe(e => {\r\n                this.creatPanel();\r\n            });\r\n            this.inputRef.iconMouseLeave.pipe(delay(200)).subscribe(e => {\r\n                if (!this.isInTipPanel) {\r\n                    this.removePanel();\r\n                }\r\n            });\r\n            this.inputRef.clickHandle.subscribe(e => {\r\n                this.removePanel();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void { }\r\n\r\n    // è·åå¿«æ·è¾å¥æ°æ®\r\n    private getQuickSelectedByLocaleId() {\r\n        const localeid = this.localService.localeId;\r\n        const personalConf = this.personalConfigService.getPersonalData();\r\n        if (personalConf && personalConf.quickSelected) {\r\n            const items = personalConf.quickSelected[localeid];\r\n            if (items && items.length) {\r\n                return items;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    creatPanel() {\r\n        this.selected = this.getQuickSelectedByLocaleId();\r\n        if (this.tipPanel || !this.selected || (this.selected && this.selected.length === 0)) {\r\n            return;\r\n        }\r\n        const pos = this.setPosition();\r\n        const ul = this.renderer.createElement('ul');\r\n        const path = this.personalConfigService.textField.split('.');\r\n        this.selected.forEach((item, index) => {\r\n            const li = this.renderer.createElement('li');\r\n            li.innerHTML = this.find(item, this.personalConfigService.textField);\r\n            this.renderer.setProperty(li, 'id', index);\r\n            this.renderer.appendChild(ul, li);\r\n        });\r\n        const header = this.renderer.createElement('div');\r\n        this.renderer.addClass(header, 'lookup-tip-header');\r\n        header.innerHTML = this.tipText;\r\n        this.tipPanel = this.renderer.createElement('div');\r\n        this.renderer.appendChild(this.tipPanel, header);\r\n        this.renderer.appendChild(this.tipPanel, ul);\r\n        this.renderer.addClass(this.tipPanel, 'lookup-tip');\r\n        this.renderer.setStyle(this.tipPanel, 'top', pos.top);\r\n        this.renderer.setStyle(this.tipPanel, 'left', pos.left);\r\n        this.renderer.setStyle(this.tipPanel, 'width', pos.width);\r\n        this.renderer.appendChild(document.body, this.tipPanel);\r\n        this.leaveEvent = this.renderer.listen(this.tipPanel, 'mouseleave', () => {\r\n            this.removePanel();\r\n        });\r\n        this.enterEvent = this.renderer.listen(this.tipPanel, 'mouseenter', () => {\r\n            this.isInTipPanel = true;\r\n        });\r\n        this.clickEvent = this.renderer.listen(this.tipPanel, 'click', (e) => {\r\n            if (e.target.nodeName === 'LI') {\r\n                this.selectItem(e.target.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    removePanel() {\r\n        if (document.body.contains(this.tipPanel)) {\r\n            this.renderer.removeChild(document.body, this.tipPanel);\r\n            this.tipPanel = null;\r\n            this.isInTipPanel = false;\r\n            this.leaveEvent();\r\n            this.enterEvent();\r\n            this.clickEvent();\r\n        }\r\n    }\r\n\r\n    setPosition() {\r\n        const { left, top, width, height } = this.inputRef.inputGroup.nativeElement.getBoundingClientRect();\r\n        return {\r\n            left: left + 'px',\r\n            top: top + height + 'px',\r\n            width: width + 'px'\r\n        };\r\n    }\r\n\r\n    selectItem(val) {\r\n        const item = this.selected.find((el, index) => Number(val) === index);\r\n        this.removePanel();\r\n        if (this.personalConfigService.singleSelect) {\r\n            this.personalConfigService.selectItemObser$.next(item);\r\n        } else {\r\n            this.personalConfigService.selectItemObser$.next([item]);\r\n        }\r\n    }\r\n\r\n    find(obj, keys) {\r\n        const keyArr = keys.split('.');\r\n        const key = keyArr[0];\r\n        const target = obj[key];\r\n        if (target instanceof Object) {\r\n            keyArr.shift();\r\n            return this.find(target, keyArr.join('.'));\r\n        } else {\r\n            return target;\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2018-12-04 10:43:42\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-26 13:33:30\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { LayoutModule } from '@farris/ui-layout';\r\nimport { LocaleModule} from '@farris/ui-locale';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { DataTableModule, DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableModule, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\n\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\nimport { LookupComponent } from './lookup.component';\r\nimport { LookupLeftComponent } from './lookup-left.component';\r\nimport { LookupTabsComponent } from './lookup-tabs.component';\r\nimport { LookupTipDirective } from './lookup-tip.directive';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        FarrisDialogModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        NotifyModule.forRoot(),\r\n        LoadingModule.forRoot({delay: 1000}),\r\n        InputGroupModule,\r\n        LayoutModule,\r\n        DataTableModule,\r\n        TreeTableModule,\r\n        LocaleModule.forRoot()\r\n    ],\r\n    exports: [LookupGridComponent, LookupComponent],\r\n    declarations: [LookupGridComponent, LookupComponent, LookupLeftComponent, LookupTabsComponent, LookupTipDirective],\r\n    providers: [],\r\n    entryComponents: [DataTableComponent, TreeTableComponent, LookupLeftComponent, LookupTabsComponent]\r\n})\r\nexport class LookupModule {}\r\n"]}