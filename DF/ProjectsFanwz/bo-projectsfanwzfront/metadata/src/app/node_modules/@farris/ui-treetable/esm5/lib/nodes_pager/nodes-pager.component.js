/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TreeTableComponent } from './../treetable.component';
import { Component, Input, Injector, ChangeDetectorRef, EventEmitter, Output } from '@angular/core';
import { filter } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
var TreetableNodesPagerComponent = /** @class */ (function () {
    function TreetableNodesPagerComponent(tt, cd, injector) {
        var _this = this;
        this.tt = tt;
        this.cd = cd;
        this.injector = injector;
        this.pageChange = new EventEmitter();
        this.showPager = new BehaviorSubject(false);
        this.pagerInfo = null;
        if (this.tt) {
            this.tt.expand.pipe(filter((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                return node.id === _this.context.node.id && node.pagination && node.children.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return !n.__childs_loading__; })).length;
            }))).subscribe((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                _this.pagerInfo = tslib_1.__assign({}, node.pagination);
                _this.showPager.next(true);
            }));
            this.tt.appendNew.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var node = e.parent;
                if (node.id === _this.context.node.id && node.pagination) {
                    _this.pagerInfo = tslib_1.__assign({}, node.pagination);
                    _this.showPager.next(true);
                }
            }));
            this.tt.collapse.subscribe((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.id === _this.context.node.id) {
                    _this.showPager.next(false);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setPagerInfo();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.context && !changes.context.isFirstChange()) {
            this.setPagerInfo();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.setPagerInfo = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.context) {
            var node = this.context.node;
            if (node && node.pagination) {
                this.pagerInfo = tslib_1.__assign({}, node.pagination);
                this.showPager.next(node.expanded && node.pagination);
            }
        }
    };
    /**
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.getPagerCount = /**
     * @return {?}
     */
    function () {
        var _a = this.pagerInfo, pageSize = _a.pageSize, total = _a.total;
        if (!total) {
            return 0;
        }
        else {
            return Math.ceil(total / pageSize);
        }
    };
    /**
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.isFirstPager = /**
     * @return {?}
     */
    function () {
        return this.pagerInfo.pageIndex === 1;
    };
    /**
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.isLastPager = /**
     * @return {?}
     */
    function () {
        return this.pagerInfo.pageIndex === this.getPagerCount();
    };
    /**
     * Go to the previous page
     */
    /**
     * Go to the previous page
     * @param {?} $event
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.previous = /**
     * Go to the previous page
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.setCurrent(this.pagerInfo.pageIndex - 1, this.pagerInfo.pageSize);
    };
    /**
     * Go to the next page
     */
    /**
     * Go to the next page
     * @param {?} $event
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.next = /**
     * Go to the next page
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.setCurrent(this.pagerInfo.pageIndex + 1, this.pagerInfo.pageSize);
    };
    /**
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    TreetableNodesPagerComponent.prototype.setCurrent = /**
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    function (page, pageSize, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.pageChange.emit({ pageIndex: page, pageSize: pageSize, node: this.context.node, context: this.context });
    };
    TreetableNodesPagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nodes-pager',
                    template: "\r\n<div style=\"padding: 3px 0;\" *ngIf=\"showPager | async\">\r\n    <ul class=\"treetable-nodes-pagerbar d-flex\">\r\n        <li class=\"pageinfo\">{{ pagerInfo.pageIndex }} / {{ getPagerCount() }}</li>\r\n        <li class=\"pager-btn prev\" [class.disabled]=\"isFirstPager()\" (click)=\"previous($event)\" title=\"{{ 'pagination.previous'|locale: '\u4E0A\u4E00\u9875' }}\">\r\n            <span class=\"f-icon f-icon-arrow-chevron-left\"></span>\r\n        </li>\r\n        <li class=\"pager-btn next\"  [class.disabled]=\"isLastPager()\" (click)=\"next($event)\" title=\"{{ 'pagination.next'|locale: '\u4E0B\u4E00\u9875' }}\">\r\n            <span class=\"f-icon f-icon-arrow-chevron-right\"></span>\r\n        </li>\r\n    </ul>\r\n\r\n</div>",
                    styles: ["\n        .treetable-nodes-pagerbar { height: 22px; line-height: 22px; list-style: none}\n        .treetable-nodes-pagerbar li { float: left; box-sizing: border-box; }\n        .treetable-nodes-pagerbar .pager-btn {\n            width: 22px;\n            height: 22px;\n            text-align: center;\n            border: 1px solid #ccc;\n            background: rgb(248 249 250);\n            cursor: pointer;\n        }\n        .treetable-nodes-pagerbar .pager-btn:hover {\n            background: white;\n        }\n        .treetable-nodes-pagerbar .pageinfo {padding: 0 5px; font-weight: 400;}\n        .treetable-nodes-pagerbar .prev {}\n        .treetable-nodes-pagerbar .next {\n            border-left: 0;\n        }\n\n        .pager-btn.disabled{\n            color: rgb(204 204 204);\n            pointer-events: none;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    TreetableNodesPagerComponent.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    TreetableNodesPagerComponent.propDecorators = {
        context: [{ type: Input }],
        pageChange: [{ type: Output }]
    };
    return TreetableNodesPagerComponent;
}());
export { TreetableNodesPagerComponent };
if (false) {
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.context;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.pageChange;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.showPager;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.pagerInfo;
    /**
     * @type {?}
     * @private
     */
    TreetableNodesPagerComponent.prototype.tt;
    /**
     * @type {?}
     * @private
     */
    TreetableNodesPagerComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    TreetableNodesPagerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,