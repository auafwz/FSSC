/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2020-03-03 16:46:39
 */
import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HttpHeaderUtil } from '../utils/index';
import { HttpService } from '../http_service';
import { AppContext } from '@farris/devkit';
/**
 * BefSession处理策略类
 * @abstract
 */
var /**
 * BefSession处理策略类
 * @abstract
 */
BefSessionHandlingStrategy = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefSessionHandlingStrategy(storageStrategy, frmSessionService) {
        this.storageStrategy = storageStrategy;
        this.frmSessionService = frmSessionService;
    }
    /**
     * 框架SessionId（用户的或者功能菜单的）
     */
    /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrmSessionId = /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        return this.frmSessionService.getCurrentSessionId(runtimeContext);
    };
    Object.defineProperty(BefSessionHandlingStrategy.prototype, "frmSessionId", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.frmSessionService.getCurrentSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取框架SessionId
     */
    /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrameworkSessionId = /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        return this.getFrmSessionId(runtimeContext);
    };
    /**
     * 从缓存中获取BeSession
     */
    /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionIdFromStorage = /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionStorageKey = this.getSessionStorageKey(runtimeContext);
        /** @type {?} */
        var beSessionId = this.storageStrategy.getItem(sessionStorageKey);
        return beSessionId;
    };
    return BefSessionHandlingStrategy;
}());
if (false) {
    /**
     * 存储策略
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.storageStrategy;
    /**
     * 框架Session服务
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.frmSessionService;
    /**
     * 获取SessionId
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionId = function () { };
    /**
     * @abstract
     * @param {?} sessionId
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.setSessionId = function (sessionId) { };
    /**
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.clearSessionId = function () { };
    /**
     * @abstract
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.extendRequestHeaders = function (headers, runtimeContext) { };
    /**
     * @abstract
     * @param {?} headers
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.handleReponseHeaders = function (headers) { };
    /**
     * @abstract
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionStorageKey = function (runtimeContext) { };
}
/**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
var /**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
BefSeparatedSessionHandlingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BefSeparatedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUri, injector) {
        var _this = _super.call(this, storageStrategy, frmSessionService) || this;
        _this.beSessionUri = beBaseUri;
        _this.httpClient = httpClient;
        _this.httpService = new HttpService(_this.httpClient);
        _this.injector = injector;
        return _this;
    }
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            return of(beSessionId);
        }
        return this.createSession();
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        // this.storageStrategy.removeItem(sessionKey);
        this.storageStrategy.clear(this.frmSessionId, sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.extendRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage(runtimeContext);
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);
        }
        // const appContext = this.injector.get<AppContext>(AppContext, null);
        //if (appContext) {
        // const appId = appContext.ApplicationId;
        headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);
        // }
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        console.log(headers);
    };
    /**
     * 创建BeSessionId
     */
    /**
     * 创建BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.createSession = /**
     * 创建BeSessionId
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = {
            responseType: 'text'
        };
        if (!!this.frmSessionId) {
            /** @type {?} */
            var appContext = this.injector.get(AppContext, null);
            params.headers = new HttpHeaders({ SessionId: this.frmSessionId });
            params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);
            //if (appContext) {
            // const appId = appContext.ApplicationId;
            params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);
            //}
            params.headers = HttpHeaderUtil.toJson(params.headers);
        }
        return this.httpService.request('POST', this.beSessionUri, params).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        function (beSessionId) {
            _this.setSessionId(beSessionId);
        })));
    };
    /**
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.extendHttpHeader = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        /** @type {?} */
        var sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return sessionId + "_" + this.beSessionUri;
    };
    return BefSeparatedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.injector;
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.beSessionUri;
    /**
     * httpClient
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.httpService;
}
var BefUnifiedSessionHandlingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BefUnifiedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, beBaseUri, injector) {
        var _this = _super.call(this, storageStrategy, frmSessionService) || this;
        _this.beSessionUri = beBaseUri;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        var sessionId = this.storageStrategy.getItem(sessionKey);
        return of(sessionId);
        // return of(null);
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.removeItem(sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.extendRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage(runtimeContext);
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        /** @type {?} */
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            /** @type {?} */
            var token = appContext.Token;
            headers = HttpHeaderUtil.appendFuncInstId(headers, token);
        }
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        console.log(headers);
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @summary
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (runtimeContext) {
        // const isDebug = false;
        // if (isDebug) {
        //   return `${this.frmSessionId}_${this.beSessionUri}`;
        // } else {
        //   return this.frmSessionId;
        // }
        /** @type {?} */
        var sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return sessionId + "_" + this.beSessionUri;
    };
    return BefUnifiedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
if (false) {
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @private
     */
    BefUnifiedSessionHandlingStrategy.prototype.beSessionUri;
    /**
     * @type {?}
     * @private
     */
    BefUnifiedSessionHandlingStrategy.prototype.injector;
}
export { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,