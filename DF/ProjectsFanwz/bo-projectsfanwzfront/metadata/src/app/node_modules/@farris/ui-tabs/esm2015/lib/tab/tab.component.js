/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ChangeDetectorRef, Compiler, ComponentFactoryResolver, Renderer2, ElementRef, ContentChild, Optional, Type, NgModuleFactory } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FarrisTabsComponent } from '../tabs/tabs.component';
import { FarrisTabsExtendDirective } from './extend.directive';
export class FarrisTabComponent {
    /**
     * @param {?} cp
     * @param {?} componentFactoryResolver
     * @param {?} render
     * @param {?} el
     * @param {?} cef
     * @param {?} scrollTabs
     */
    constructor(cp, componentFactoryResolver, render, el, cef, scrollTabs) {
        this.cp = cp;
        this.componentFactoryResolver = componentFactoryResolver;
        this.render = render;
        this.el = el;
        this.cef = cef;
        this.scrollTabs = scrollTabs;
        this.tabWidth = -1;
        // 追加自定义的样式
        this.titleCustomCls = '';
        // selected 是否选中
        // tslint:disable-next-line:no-inferrable-types
        this.selected = false;
        // appDiv: T;
        this.showStates = new BehaviorSubject(true);
        // 兼容旧表单
        this.activeState = new BehaviorSubject(false);
        this._show = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set show(value) {
        this.showStates.next(value);
        this._show = value;
    }
    /**
     * @return {?}
     */
    get show() {
        return this._show;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _active(value) {
        this._activeForOld = value;
        this.activeState.next(value);
    }
    /**
     * @return {?}
     */
    get _active() {
        return this._activeForOld;
    }
    // 无用代码
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * 内容是否激活
     * @return {?}
     */
    ngOnInit() {
        this.scrollTabs.tabs.push(this);
        if (!this.scrollTabs.activeId) {
            this.scrollTabs.tabs[0]._active = true;
        }
        else {
            this.scrollTabs.load();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 为了兼容弄旧表单，不兼容HostBinding, 通过追加class的方式实现
        /** @type {?} */
        const nEl = this.el.nativeElement;
        this.activeState.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.render.addClass(nEl, 'farris-tabs-body');
            if (data) {
                this.render.addClass(nEl, 'f-tab-active');
                this.render.removeClass(nEl, 'f-tab-d-none');
            }
            else {
                this.render.addClass(nEl, 'f-tab-d-none');
                this.render.removeClass(nEl, 'f-tab-active');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @return {?}
     */
    loadComponent() {
    }
}
FarrisTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-tab',
                template: "<!-- \u5F02\u6B65\u83B7\u53D6\u7EC4\u4EF6 -->\r\n<ng-template [ngTemplateOutlet]=\"contentTempl\"></ng-template>\r\n<ng-container>\r\n    <ng-container *ngComponentOutlet=\"asyncComponent;ngModuleFactory:asyncModule\">\r\n    </ng-container>\r\n</ng-container>\r\n\r\n"
            }] }
];
/** @nocollapse */
FarrisTabComponent.ctorParameters = () => [
    { type: Compiler },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: FarrisTabsComponent, decorators: [{ type: Optional }] }
];
FarrisTabComponent.propDecorators = {
    tabWidth: [{ type: Input, args: ['width',] }],
    show: [{ type: Input }],
    asyncComponent: [{ type: Input }],
    asyncModule: [{ type: Input }],
    id: [{ type: Input }],
    titleCustomCls: [{ type: Input }],
    title: [{ type: Input }],
    disabled: [{ type: Input }],
    removeable: [{ type: Input }],
    toolbar: [{ type: Input }],
    contentTempl: [{ type: ContentChild, args: ['content',] }],
    farrisTabsExtendDirective: [{ type: ContentChild, args: [FarrisTabsExtendDirective,] }]
};
if (false) {
    /** @type {?} */
    FarrisTabComponent.prototype.setIntervalTab;
    /** @type {?} */
    FarrisTabComponent.prototype.tabWidth;
    /** @type {?} */
    FarrisTabComponent.prototype.asyncComponent;
    /** @type {?} */
    FarrisTabComponent.prototype.asyncModule;
    /** @type {?} */
    FarrisTabComponent.prototype.id;
    /** @type {?} */
    FarrisTabComponent.prototype.titleCustomCls;
    /** @type {?} */
    FarrisTabComponent.prototype.titleOverflow;
    /** @type {?} */
    FarrisTabComponent.prototype.title;
    /** @type {?} */
    FarrisTabComponent.prototype.selected;
    /** @type {?} */
    FarrisTabComponent.prototype.disabled;
    /** @type {?} */
    FarrisTabComponent.prototype.removeable;
    /** @type {?} */
    FarrisTabComponent.prototype.toolbar;
    /** @type {?} */
    FarrisTabComponent.prototype.contentTempl;
    /** @type {?} */
    FarrisTabComponent.prototype.farrisTabsExtendDirective;
    /** @type {?} */
    FarrisTabComponent.prototype.showStates;
    /** @type {?} */
    FarrisTabComponent.prototype.activeState;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype._activeForOld;
    /** @type {?} */
    FarrisTabComponent.prototype.view;
    /** @type {?} */
    FarrisTabComponent.prototype.tempDirective;
    /** @type {?} */
    FarrisTabComponent.prototype.popupFlag;
    /** @type {?} */
    FarrisTabComponent.prototype._show;
    /** @type {?} */
    FarrisTabComponent.prototype.headingRef;
    /** @type {?} */
    FarrisTabComponent.prototype.compOrHtml;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.cp;
    /** @type {?} */
    FarrisTabComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.cef;
    /** @type {?} */
    FarrisTabComponent.prototype.scrollTabs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdGFicy8iLCJzb3VyY2VzIjpbImxpYi90YWIvdGFiLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFDMUQsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFDL0MsWUFBWSxFQUEyQyxRQUFRLEVBQUUsSUFBSSxFQUNyRSxlQUFlLEVBRWxCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFNL0QsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7Ozs7O0lBMEQzQixZQUFvQixFQUFZLEVBQVMsd0JBQWtELEVBQVUsTUFBaUIsRUFDMUcsRUFBYyxFQUFVLEdBQXNCLEVBQXFCLFVBQStCO1FBRDFGLE9BQUUsR0FBRixFQUFFLENBQVU7UUFBUyw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUMxRyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFBcUIsZUFBVSxHQUFWLFVBQVUsQ0FBcUI7UUFyRDlGLGFBQVEsR0FBVyxDQUFDLENBQUMsQ0FBQzs7UUFZN0IsbUJBQWMsR0FBRyxFQUFFLENBQUM7OztRQU83QixhQUFRLEdBQVksS0FBSyxDQUFDOztRQVcxQixlQUFVLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7O1FBR3ZDLGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFZekMsVUFBSyxHQUFZLElB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QUEyQjs7SUFRM0Isa0NBQXVCOztJQUN2QiwyQ0FBbUI7O0lBQ25CLHVDQUFtQjs7SUFDbkIsbUNBQXNCOztJQUt0Qix3Q0FBNkI7O0lBQzdCLHdDQUFnQjs7Ozs7SUFDSixnQ0FBb0I7O0lBQUUsc0RBQXlEOzs7OztJQUFFLG9DQUF5Qjs7Ozs7SUFDbEgsZ0NBQXNCOzs7OztJQUFFLGlDQUE4Qjs7SUFBRSx3Q0FBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIENoYW5nZURldGVjdG9yUmVmLCBDb21waWxlcixcclxuICAgIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLFxyXG4gICAgQ29udGVudENoaWxkLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIFZpZXdDb250YWluZXJSZWYsIE9wdGlvbmFsLCBUeXBlLFxyXG4gICAgTmdNb2R1bGVGYWN0b3J5LFxyXG4gICAgQWZ0ZXJWaWV3Q2hlY2tlZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRmFycmlzVGFic0NvbXBvbmVudCB9IGZyb20gJy4uL3RhYnMvdGFicy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGYXJyaXNUYWJzRXh0ZW5kRGlyZWN0aXZlIH0gZnJvbSAnLi9leHRlbmQuZGlyZWN0aXZlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtdGFiJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi90YWIuY29tcG9uZW50Lmh0bWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNUYWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQge1xyXG4gICAgLy8gdGFic+S5n+WPr+iDveS9nOS4uuafkOS4qmZsZXjlrrnlmajnmoTpobnnm64gIOWboOatpOimgeiuvue9rmZsZXjlsZ7mgKdcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbmZlcnJhYmxlLXR5cGVzXHJcbiAgICAvLyDmr4/kuIDkuKrmoIfnrb7pobXlj6/orr7nva7lrr3luqZcclxuICAgIHNldEludGVydmFsVGFiOiBhbnk7XHJcbiAgICBcclxuICAgIEBJbnB1dCgnd2lkdGgnKSB0YWJXaWR0aDogbnVtYmVyID0gLTE7XHJcbiAgICBASW5wdXQoKSBzZXQgc2hvdyh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuc2hvd1N0YXRlcy5uZXh0KHZhbHVlKTtcclxuICAgICAgICB0aGlzLl9zaG93ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgc2hvdygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaG93O1xyXG4gICAgfVxyXG4gICAgQElucHV0KCkgYXN5bmNDb21wb25lbnQ6IFR5cGU8YW55PjtcclxuICAgIEBJbnB1dCgpIGFzeW5jTW9kdWxlOiBOZ01vZHVsZUZhY3Rvcnk8YW55PjtcclxuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmc7XHJcbiAgICAvLyDov73liqDoh6rlrprkuYnnmoTmoLflvI9cclxuICAgIEBJbnB1dCgpIHRpdGxlQ3VzdG9tQ2xzID0gJyc7XHJcbiAgICAvLyDmoIforrDmlofmnKzmmK/lkKbotoXlh7pcclxuICAgIHRpdGxlT3ZlcmZsb3c6ZmFsc2U7XHJcbiAgICAvLyB0YWIg5qCH6aKYXHJcbiAgICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG4gICAgLy8gc2VsZWN0ZWQg5piv5ZCm6YCJ5LitXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5mZXJyYWJsZS10eXBlc1xyXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8vIGRpc2FibGVkIOaYr+WQpuemgeatoueCueWHu1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvLyDmmK/lkKblj6/np7vlh7pcclxuICAgIEBJbnB1dCgpIHJlbW92ZWFibGU6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSB0b29sYmFyOiBhbnk7XHJcbiAgICAvLyBASW5wdXQoKSBjb250ZW50OiBzdHJpbmcgfCBUeXBlPGFueT47XHJcbiAgICAvLyDorr7nva7plJrngrlcclxuICAgIEBDb250ZW50Q2hpbGQoJ2NvbnRlbnQnKSBjb250ZW50VGVtcGw6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBAQ29udGVudENoaWxkKEZhcnJpc1RhYnNFeHRlbmREaXJlY3RpdmUpIGZhcnJpc1RhYnNFeHRlbmREaXJlY3RpdmU6IGFueTtcclxuICAgIC8vIGFwcERpdjogVDtcclxuICAgIHNob3dTdGF0ZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRydWUpO1xyXG5cclxuICAgIC8vIOWFvOWuueaXp+ihqOWNlVxyXG4gICAgYWN0aXZlU3RhdGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcclxuICAgIHByaXZhdGUgX2FjdGl2ZUZvck9sZDogYW55O1xyXG4gICAgc2V0IF9hY3RpdmUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUZvck9sZCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlU3RhdGUubmV4dCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgX2FjdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlRm9yT2xkO1xyXG4gICAgfVxyXG4gICAgdmlldzogVmlld0NvbnRhaW5lclJlZjtcclxuICAgIHRlbXBEaXJlY3RpdmU6IGFueTtcclxuICAgIHBvcHVwRmxhZzogYm9vbGVhbjtcclxuICAgIF9zaG93OiBib29sZWFuID0gdHJ1ZTtcclxuICAgIC8vIOaXoOeUqOS7o+eggVxyXG4gICAgZ2V0IGFjdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xyXG4gICAgfVxyXG4gICAgaGVhZGluZ1JlZjogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGNvbXBPckh0bWw6IGFueTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3A6IENvbXBpbGVyLCBwdWJsaWMgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZWY6IENoYW5nZURldGVjdG9yUmVmLCBAT3B0aW9uYWwoKSBwdWJsaWMgc2Nyb2xsVGFiczogRmFycmlzVGFic0NvbXBvbmVudCkge1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlhoXlrrnmmK/lkKbmv4DmtLtcclxuICAgICAqL1xyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxUYWJzLnRhYnMucHVzaCh0aGlzKTtcclxuICAgICAgICBpZiAoIXRoaXMuc2Nyb2xsVGFicy5hY3RpdmVJZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRhYnMudGFic1swXS5fYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRhYnMubG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyDkuLrkuoblhbzlrrnlvITml6fooajljZXvvIzkuI3lhbzlrrlIb3N0QmluZGluZywg6YCa6L+H6L+95YqgY2xhc3PnmoTmlrnlvI/lrp7njrBcclxuICAgICAgICBjb25zdCBuRWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVTdGF0ZS5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKG5FbCwgJ2ZhcnJpcy10YWJzLWJvZHknKTtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKG5FbCwgJ2YtdGFiLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3MobkVsLCAnZi10YWItZC1ub25lJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyhuRWwsICdmLXRhYi1kLW5vbmUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKG5FbCwgJ2YtdGFiLWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XHJcblxyXG4gICAgfVxyXG4gICAgbG9hZENvbXBvbmVudCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==