import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { FieldMetadataUtil } from '@farris/devkit';
/**
 * 父子树仓库
 */
var ParentTreeRepository = /** @class */ (function () {
    function ParentTreeRepository() {
    }
    /**
     * 添加兄弟节点
     */
    ParentTreeRepository.prototype.addSibling = function (repository, id) {
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addSiblingUri = baseUri + "/service/parenthierarchycreatesibling";
        var body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    };
    /**
     * 添加兄弟节点
     */
    ParentTreeRepository.prototype.addChild = function (repository, parentId) {
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addChildUri = baseUri + "/service/parenthierarchycreatechildlayer";
        var body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    };
    /**
     * 添加子表兄弟节点
     */
    ParentTreeRepository.prototype.addSubSibling = function (repository, nodes, ids) {
        var _this = this;
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addSubSiblingUri = baseUri + "/service/childnodeparenthierarchycreatesibling";
        var body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var path = _this.getPaths(nodes, ids);
            var entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    };
    /**
     * 添加子表子节点
     */
    ParentTreeRepository.prototype.addSubChild = function (repository, nodes, ids) {
        var _this = this;
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var addSubChildUri = baseUri + "/service/childnodeparenthierarchycreatechildlayer";
        var body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map(function (responseInfo) {
            var paths = _this.getPaths(nodes, ids);
            var entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);
            return entity;
        }));
    };
    ParentTreeRepository.prototype.getPaths = function (nodes, ids) {
        var paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (var i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + ("/" + ids[i]);
                    paths = paths + ("/" + nodes[i] + "s");
                }
            }
        }
        return paths;
    };
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    ParentTreeRepository.prototype.loadByParentId = function (repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow, pagination, frameContext, reload) {
        var _this = this;
        if (frozenCurrentRow === void 0) { frozenCurrentRow = false; }
        if (reload === void 0) { reload = false; }
        var localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        var restService = repository.restService;
        var parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        var originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        var filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        var isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        var entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        var requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map(function (responseInfo) {
            var paginationInfo = _this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set("_NODE_" + parentId + "_PAGINATION_INFO_", paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            _this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            var listData = responseInfo.returnValue.result;
            var entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    };
    // tslint:disable-next-line: max-line-length
    ParentTreeRepository.prototype.loadFullTree = function (repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        var _this = this;
        var restService = repository.restService;
        var baseUri = restService.baseUri;
        var queryUrl = baseUri + "/service/parentidfulltreequery";
        var parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        var entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        var body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType: fullTreeType,
            loadType: loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap(function (responseInfo) {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                var frameContext = context.frameContext;
                var virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    var list = responseInfo.returnValue.result;
                    var selectedRowId_1 = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    var leafNodeInfo = list.find(function (item) { return item[repository.primaryKey] === selectedRowId_1; });
                    var hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    var ids = _this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId_1);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId_1);
                }
            }
        }), map(function (responseInfo) {
            var frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            _this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            var listData = responseInfo.returnValue.result;
            var entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    };
    /**
     * 插入对父节点的过滤
     */
    ParentTreeRepository.prototype.buildFiltersWithParent = function (originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        var relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        var parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        var parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';
        var parentFilterArray = [
            {
                "FilterField": originalHierarchyInfoKey + ".Layer",
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        if (parentElement) {
            parentFilterArray.push({
                "FilterField": originalHierarchyInfoKey + ".ParentElement",
                "Value": parentElement,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 0
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    };
    ParentTreeRepository.prototype.buildEntityFilter = function (filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter) {
            filter = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].Relation = 0;
        }
        var entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    };
    /**
     * 清空后代实体
     * @description parentHierarchyInfo中layer为要清空后代节点的layer，但里面的parentElement不是父级的id，而是要清空后代节点的id
     */
    ParentTreeRepository.prototype.clearDescendantEntities = function (repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow) {
        if (frozenCurrentRow === void 0) { frozenCurrentRow = false; }
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        var nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);
        if (frozenCurrentRow) {
            repository.entityCollection.removeEntities(function (entity) {
                var id = entity[entity.primaryKey];
                return nodes.includes(id);
            });
        }
        else {
            repository.entityCollection.removeData(function (entity) {
                var id = entity[entity.primaryKey];
                return nodes.includes(id);
            });
        }
    };
    /**
     * 获取某个节点的所有子节点
     * @param repository repository
     * @param hierarchyInfokey hierarchyInfokey
     * @param parentHierarchyInfo parentHierarchyInfo
     */
    ParentTreeRepository.prototype.getChildNodes = function (repository, hierarchyInfokey, parentHierarchyInfo) {
        var _this = this;
        var fparentElement = parentHierarchyInfo.id;
        var flayer = parentHierarchyInfo.layer;
        var nodes = [];
        repository.entityCollection.getAllEntities().forEach(function (entity) {
            var hierarchyInfo = entity[hierarchyInfokey];
            var parentElement = hierarchyInfo.parentElement;
            var layer = hierarchyInfo.layer;
            var result = layer >= (flayer + 1) && parentElement === fparentElement;
            if (result) {
                var id = entity[entity.primaryKey];
                nodes.push(id);
                var childHierarchyInfo = _this.getHierarchyInfoById(repository, hierarchyInfokey, id);
                var childs = _this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);
                if (childs && childs.length > 0) {
                    nodes = nodes.concat(childs);
                }
            }
        });
        return nodes;
    };
    /**
     * 获取实体的分级信息
     */
    ParentTreeRepository.prototype.getHierarchyInfoById = function (repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        var entity = repository.entityCollection.getEntityById(id);
        var hierarchyInfoEntity = entity[hierarchyInfokey];
        var result = hierarchyInfoEntity.toJSON();
        result['id'] = id;
        return result;
    };
    ParentTreeRepository.prototype.getHierarchyInfo = function (entity, hierarchyInfokey) {
        return entity[hierarchyInfokey];
    };
    /**
     * 获取分级码的原始的字段名
     */
    ParentTreeRepository.prototype.getOriginalHierarchyInfoKey = function (repository, hierarchyInfokey) {
        var ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        var hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    };
    ParentTreeRepository.prototype.getPaginationInfo = function (responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    };
    ParentTreeRepository.prototype.findParent = function (hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(function (item) {
            var currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;
        });
    };
    ParentTreeRepository.prototype.getAllParentIds = function (hierarchyInfo, list, hierarchyInfoKey, repository) {
        var item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        var ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    };
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    ParentTreeRepository.prototype.getChildren = function (repository, hierarchyInfoKey, id) {
        var _this = this;
        var hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        var layer = hierarchyInfo.layer;
        var parentElement = hierarchyInfo.parentElement;
        var entities = repository.entityCollection.getEntities(function (entity) {
            var hierarchyInfo = _this.getHierarchyInfo(entity, hierarchyInfoKey);
            var matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    };
    return ParentTreeRepository;
}());
export { ParentTreeRepository };
//# sourceMappingURL=data:application/json;base64,