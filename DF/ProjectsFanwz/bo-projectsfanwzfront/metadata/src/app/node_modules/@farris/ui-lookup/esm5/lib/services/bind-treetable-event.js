/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';
import { cloneDeep } from 'lodash-es';
import { of } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
var TreeTableEventManager = /** @class */ (function () {
    function TreeTableEventManager(ins) {
        this.ins = ins;
        /**
         * 标识当前数据是否查询结果
         */
        this.IS_SEARCH_RESULT = false;
        this.lookupSelectionSer = this.ins.lookupSelectionSer;
    }
    /**
     * @param {?} search
     * @return {?}
     */
    TreeTableEventManager.prototype.searchTreeData = /**
     * @param {?} search
     * @return {?}
     */
    function (search) {
        var _this_1 = this;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        // 判断uri 发出search.emit();
        if (this.ins.searching) {
            return;
        }
        else {
            this.ins.searching = true;
        }
        return this.ins.httpMgr.getData({ search: search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(tap((/**
         * @return {?}
         */
        function () {
            _this_1.ins.searching = false;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this_1.ins.searching = false;
            return of(err);
        }))).subscribe((/**
         * @param {?} resData
         * @return {?}
         */
        function (resData) {
            if (resData) {
                _this_1.ins.items = resData.items;
                _this_1.ins.closeLoading();
                tt.clearAll();
                /** @type {?} */
                var treeInfo = _this_1.ins.gridOptions.treeInfo;
                if (!treeInfo['treeDataIsInit']) {
                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {
                        _this_1.ins.items = _this_1.ins.lookupUtils.makeTree(_this_1.ins.items, treeInfo);
                    }
                    else {
                        _this_1.ins.items = _this_1.ins.lookupUtils.makeTreeWithParentID(_this_1.ins.items, '', treeInfo.dataField + "." + treeInfo.parentField, _this_1.ins.idField);
                    }
                }
                /** @type {?} */
                var checkNodes_1 = (/**
                 * @param {?} nodes
                 * @return {?}
                 */
                function (nodes) {
                    if (nodes && nodes.length) {
                        return nodes.map((/**
                         * @param {?} node
                         * @return {?}
                         */
                        function (node) {
                            if (node.hasOwnProperty('addtional')) {
                                node.selectable = !node['addtional'];
                            }
                            if (node.children && node.children.length) {
                                checkNodes_1(node.children);
                            }
                            return node;
                        }));
                    }
                    return nodes;
                });
                /** @type {?} */
                var expandFirstNode_1 = (/**
                 * @param {?} nodes
                 * @return {?}
                 */
                function (nodes) {
                    if (nodes && nodes.length) {
                        return nodes.map((/**
                         * @param {?} node
                         * @return {?}
                         */
                        function (node) {
                            if (node.children && node.children.length) {
                                node.expanded = true;
                                expandFirstNode_1(node.children);
                            }
                            return node;
                        }));
                    }
                    return nodes;
                });
                /** @type {?} */
                var _nodes = checkNodes_1(_this_1.ins.items);
                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {
                    _nodes[0].expanded = true;
                    _nodes[0].children = expandFirstNode_1(_nodes[0].children);
                }
                _this_1.ins.items = _nodes;
                // 加载收藏数据
                if (_this_1.ins.useFavorite) {
                    // 更新数据的收藏状态
                    _this_1.ins.favHelper.updateFavoritesStatus(_this_1.ins.items);
                }
                tt.loadData(_this_1.ins.items);
                // // 展开查询结果。
                // if (search.value && this.ins.items.length) {
                //     tt.toggleExpand(this.ins.items[0], true);
                // }
                tt.resize();
                _this_1.IS_SEARCH_RESULT = true;
                _this_1.ins.selectionMgr.selectCurrentValue();
            }
            _this_1.ins.search.emit(search);
        }));
    };
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    TreeTableEventManager.prototype.getChildren = /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    function (parentPath, parentLayer, searchData) {
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        /** @type {?} */
        var search = tslib_1.__assign({ parentLayer: parentLayer, category: 'children' }, searchData);
        if (this.ins.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        var param = {
            searchValue: JSON.stringify(search),
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        if (this.IS_SEARCH_RESULT) {
            param.enableFullTree = false;
            param.loadTreeDataType = 'layerload';
            search.searchValue = '';
            search.searchField = '*';
            param.searchValue = JSON.stringify(search);
        }
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        return this.ins.http.getData(uri, param);
    };
    /**
     * @return {?}
     */
    TreeTableEventManager.prototype.bindTreetableEvent = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        /** @type {?} */
        var _searchTreeData = (/**
         * @param {?} searchparam
         * @return {?}
         */
        function (searchparam) {
            if (_this_1.ins.remoteSearch) {
                _this_1.ins._searchState = searchparam;
                _this_1.searchTreeData(searchparam);
            }
            else {
                // TODO: 全部加载，前端搜索 需要完善
                // if (this.ins.loadTreeDataType === 'loadall' && tt.searchHandle) {
                //     tt.searchHandle.search(searchparam.field, searchparam.value, 'client');
                // }
                _this_1.ins.search.emit(searchparam);
            }
        });
        /** @type {?} */
        var isLoadAllTreeData = (/**
         * @return {?}
         */
        function () {
            if (_this_1.ins.loadTreeDataType === 'default') {
                return tt.loadDataType === 'all';
            }
            else {
                return _this_1.ins.loadTreeDataType === 'loadall';
            }
        });
        /** @type {?} */
        var isAsyncLoadTreeData = (/**
         * @return {?}
         */
        function () {
            if (_this_1.ins.loadTreeDataType === 'default') {
                return tt.loadDataType === 'async';
            }
            else {
                return _this_1.ins.loadTreeDataType === 'layerload';
            }
        });
        tt.dblClickExpand = !this.ins.singleSelect; // 禁用双击展开节点
        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;
        tt.idField = this.ins.idField;
        tt.columns = this.ins.columns;
        tt.searchFields = this.ins.gridOptions.searchFields;
        if (this.ins.treeInfo) {
            tt.loadDataType = this.ins.treeInfo.loadDataType;
            tt.virtualized = true;
            this.ins.allData = cloneDeep(this.ins.items);
        }
        if (this.ins.gridOptions.treeInfo) {
            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;
            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;
        }
        if (!tt.singleSelect) {
            tt.checkOnSelect = true;
            tt.selectOnCheck = true;
            tt.showCheckbox = true;
            tt.showCheckAll = this.ins.showCheckAll;
            // 启用多选后，同时启用级联选择
            if (this.ins.enableCascade) {
                this.cascadeValueChanged(this.ins.cascadeStatus);
            }
            else {
                tt.cascadeCheck = false;
                tt.cascadeDown = false;
                tt.cascadeUp = false;
            }
        }
        tt.enableFindText = this.ins.enableFindText;
        // tt.findField = this.textField;
        tt.nodeSelected.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {
            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;
            //     ftt.clearSelections();
            // }
            if (_this_1.ins.singleSelect) {
                _this_1.lookupSelectionSer.clearSelections();
            }
            _this_1.lookupSelectionSer.updateSelections([e.node.data]);
            _this_1.ins.checkedChange.emit({ data: [e.node.data], isCheck: true });
        }));
        tt.nodeChecked.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this_1.ins.singleSelect) {
                /** @type {?} */
                var data = null;
                if (e.nodes && e.nodes.length) {
                    data = e.nodes.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                    // this.ins.multiSelMgr.updateSelections(e.nodes.map(n => n.data));
                }
                else {
                    if (Array.isArray(e.node)) {
                        data = e.node.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.data; }));
                        // this.ins.multiSelMgr.updateSelections(e.node.map(n => n.data));
                    }
                    else {
                        data = [e.node.data];
                        // this.ins.multiSelMgr.updateSelections([e.node.data]);
                    }
                }
                _this_1.ins.multiSelMgr.updateSelections(data);
                _this_1.ins.checkedChange.emit({ data: data, isCheck: true });
            }
        }));
        tt.nodeUnChecked.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e && e.node) {
                if (!_this_1.ins.singleSelect) {
                    _this_1.ins.multiSelMgr.remove(e.node.id);
                    // 分层加载，多选，包含下级时，取消勾选 需要将当前节点的所有子级数据也要取消选择，即从已选记录中移除
                    if (tt.loadDataType !== 'all' && _this_1.ins.treeInfo.layerType === 'pathcode' &&
                        (_this_1.ins.cascadeStatus === 'enable' || _this_1.ins.cascadeStatus === 'down')) {
                        if (e.node.children && e.node.children.length) {
                            /** @type {?} */
                            var nodes = e.node.children.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.data; }));
                            _this_1.ins.lookupSelectionSer.updateSelections(nodes, false);
                        }
                        else {
                            /** @type {?} */
                            var pathcode = e.node.data[_this_1.ins.treeInfo.dataField][_this_1.ins.treeInfo.pathField];
                            _this_1.ins.lookupSelectionSer.unselectByPathcode(pathcode);
                        }
                    }
                    if (e.nodes && e.nodes.length) {
                        _this_1.ins.multiSelMgr.remove(e.nodes.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.id; })));
                        _this_1.ins.checkedChange.emit({ data: e.nodes.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.data; })), isCheck: false });
                    }
                    else {
                        _this_1.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });
                    }
                }
                else {
                    /** @type {?} */
                    var ftt = _this_1.ins.favoritesComponentRef && ((/** @type {?} */ (_this_1.ins.favoritesComponentRef.instance)));
                    if (ftt && ftt.findRowNode(e.node.id)) {
                        ftt.unSelectNode(e.node.id);
                    }
                    _this_1.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });
                }
            }
        }));
        tt.search.subscribe((/**
         * @param {?} searchparam
         * @return {?}
         */
        function (searchparam) {
            if (searchparam.field !== '*' && !searchparam.value) {
                _this_1.ins.messagerService.warning(_this_1.ins.mustWriteSomething);
            }
            else {
                _searchTreeData(searchparam);
            }
        }));
        tt.cellClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.col.field === FAVORITE_FIELD_NAME) {
                e.event.stopPropagation();
                // tslint:disable-next-line: no-string-literal
                /** @type {?} */
                var classList = e.event.target['classList'];
                if (classList.contains('f-lookup-favorite')) {
                    // classList.toggle('f-icon-star');
                    // classList.toggle('f-icon-star-outline');
                    /** @type {?} */
                    var _this_2 = _this_1.ins;
                    ((/**
                     * @param {?} arr
                     * @return {?}
                     */
                    function each(arr) {
                        if (arr) {
                            arr.forEach((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                /** @type {?} */
                                var id = _this_2.utils.getValue(_this_2.idField, item.data);
                                if (id === e.node.id) {
                                    item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];
                                    return true;
                                }
                                else if (item.children && item.children.length > 0) {
                                    return each(item.children);
                                }
                                else {
                                    return false;
                                }
                            }));
                        }
                    }))(_this_1.ins.items);
                    tt.loadData(_this_1.ins.items);
                    // 更新收藏数据
                    _this_1.lookupSelectionSer.updateFavoriteData(e.node.data, e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);
                }
            }
        }));
        tt.dblClick.subscribe((/**
         * @param {?} treeNode
         * @return {?}
         */
        function (treeNode) {
            if (_this_1.ins.gridOptions.singleSelect && treeNode.selectable) {
                if (_this_1.ins.okButton) {
                    // this.lookupSelectionSer.select(treeNode.data);
                    // this.ins.okButton.nativeElement.click();
                    _this_1.ins.selectItem(treeNode.data);
                }
            }
        }));
        /** @type {?} */
        var loadAllData = isLoadAllTreeData();
        tt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            if (isLoadAllTreeData()) {
                tt.clientSort();
            }
            else {
                var _a = tslib_1.__assign({}, sort), sortName_1 = _a.sortName, sortOrder = _a.sortOrder;
                /** @type {?} */
                var col = _this_1.ins.columns.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === sortName_1; }));
                /** @type {?} */
                var _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName_1;
                /** @type {?} */
                var param = Object.assign({ sortName: _sortName, sortOrder: sortOrder }, { search: _this_1.ins._searchState });
                _this_1.ins.httpMgr.getData(param, 'search').subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this_1.ins.items = d.items;
                    _this_1.ins.closeLoading();
                    tt.clearAll();
                    /** @type {?} */
                    var items = _this_1.ins.checkNodeCanBeSelect(d.items, false);
                    tt.loadData(items);
                    tt.resize();
                }));
            }
        }));
        tt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            _this_1.ins._searchState = null;
            _this_1.IS_SEARCH_RESULT = false;
            /** @type {?} */
            var _items = _this_1.ins.checkNodeCanBeSelect(_this_1.ins.allData, loadAllData);
            if (!_items || !_items.length) {
                _searchTreeData({ field: '*', value: '' });
            }
            else {
                _this_1.ins.items = _items;
                _this_1.ins.favHelper.updateFavoritesStatus(_this_1.ins.items);
                tt.loadData(_items);
            }
        }));
        tt.expand.subscribe((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            if (tn.leaf) {
                return;
            }
            if (!tn.children || !tn.children.length) {
                /** @type {?} */
                var treeInfo = _this_1.ins.gridOptions.treeInfo;
                if (isAsyncLoadTreeData() || _this_1.IS_SEARCH_RESULT) {
                    /** @type {?} */
                    var parentPath = '';
                    /** @type {?} */
                    var parentLayer = -1;
                    var _a = tslib_1.__assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
                    tn['showLoading'] = true;
                    tt.detectChanges();
                    if (treeInfo.layerType === 'parentId') {
                        // 父ID加载方式
                        parentPath = tn['id'];
                    }
                    else {
                        /** @type {?} */
                        var treeInfoField = treeInfo.dataField;
                        if (treeInfoField) {
                            parentPath = tn.data[treeInfoField][treeInfo.pathField];
                            parentLayer = tn.data[treeInfoField][treeInfo.layerField];
                        }
                        else {
                            console.log('未找到分级信息。');
                        }
                    }
                    if (!_this_1.ins.uri) {
                        _this_1.ins.expandTreeNode.emit({
                            instance: tt, node: tn,
                            parentIdOrPath: parentPath, parentLayer: parentLayer, search: { value: value, field: field }
                        });
                        return;
                    }
                    _this_1.getChildren(parentPath, parentLayer, {
                        searchField: field === '*' ? '*' : field,
                        searchValue: value
                    }).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (tt) {
                            if (tn && data.items && data.items.length) {
                                if (_this_1.ins.useFavorite) {
                                    // 更新子节点收藏状态
                                    _this_1.ins.favHelper.updateFavoritesStatus(data.items);
                                }
                                /** @type {?} */
                                var nodes = _this_1.ins.checkNodeCanBeSelect(data.items, false);
                                tt.appendChildren(nodes, tn);
                                if (tt.loadDataType !== 'all' && !_this_1.ins.singleSelect && _this_1.ins.isGetAllChidlNodes &&
                                    (_this_1.ins.cascadeStatus === 'enable' || _this_1.ins.cascadeStatus === 'down')) {
                                    /** @type {?} */
                                    var rn = tt.findRowNode(tn.id);
                                    tt.propagateSelectionDown(rn, rn.isChecked);
                                    // 更新选中记录缓存
                                    /** @type {?} */
                                    var _items = data.items.filter((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    function (n) { return !n.addtional; }));
                                    if (_items && _items.length) {
                                        _this_1.ins.lookupSelectionSer.updateSelections(_items.map((/**
                                         * @param {?} n
                                         * @return {?}
                                         */
                                        function (n) { return n.data; })), rn.isChecked);
                                    }
                                }
                            }
                            tn['showLoading'] = false;
                            tt.detectChanges();
                            _this_1.ins.selectionMgr.selectCurrentValue();
                        }
                    }));
                }
            }
            else {
                if (!_this_1.ins.singleSelect && _this_1.ins.enableCascade &&
                    (_this_1.ins.cascadeStatus === 'enable' || _this_1.ins.cascadeStatus === 'down') && _this_1.ins.isGetAllChidlNodes) {
                    /** @type {?} */
                    var rn = tt.findRowNode(tn.id);
                    tt.propagateSelectionDown(rn, rn.isChecked);
                    /** @type {?} */
                    var selectItems = tn.children.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.selectable; })).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                    _this_1.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);
                }
                _this_1.ins.selectionMgr.selectCurrentValue();
            }
        }));
        if (loadAllData && this.ins.items) {
            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);
        }
        return loadAllData;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableEventManager.prototype.cascadeValueChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var val = $event;
        // const tt = this.ins.componentRef.instance as TreeTableComponent;
        /** @type {?} */
        var instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance(instanceTyp)));
        if (!tt) {
            return;
        }
        switch (val) {
            case 'enable':
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = true;
                break;
            case 'disable':
                tt.cascadeCheck = false;
                tt.cascadeDown = false;
                tt.cascadeUp = false;
                break;
            case 'up':
                tt.cascadeCheck = true;
                tt.cascadeUp = true;
                tt.cascadeDown = false;
                break;
            case 'down':
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = false;
                break;
            default:
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = true;
                break;
        }
        this.ins.cascadeStatus = val || 'enable';
    };
    return TreeTableEventManager;
}());
export { TreeTableEventManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype.lookupSelectionSer;
    /**
     * 标识当前数据是否查询结果
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype.IS_SEARCH_RESULT;
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,