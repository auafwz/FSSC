import { Injectable, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { BefRepositoryUtil } from '@farris/bef';
import { of, empty, EMPTY, from, Subject } from 'rxjs';
import { tap, switchMap, concatMap, last } from 'rxjs/operators';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { LanguageService } from '../languag.service';
import { FormNotifyService } from '../form-notify.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { EditStateUtil } from './utils/index';
import { FormNotifyStrategyService } from '../form-notify-strategy.service';
import { RuntimeFrameworkService } from '../rtf-service';
import { WEB_FORM_ROUTE_PARAMS_KEY } from '../types';
import { CommandService } from '../command-service';
import { ValidationService } from '../validation.service';
// tslint:disable: no-string-literal
// tslint:disable: max-line-length
/**
 * 卡片仓库服务
 */
var CardDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CardDataService(formMessageService, frameContext, loadingService, formNotifyService, languageService, formErrorService, runtimeFrameworkService, commandService) {
        this.formMessageService = formMessageService;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.commandService = commandService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
    }
    /**
     * 加载数据
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    CardDataService.prototype.load = function (id) {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        this.frameContext.appContext.params.set("retrieveing", true);
        this.frameContext.appContext.params.delete('queryChild');
        var get$ = this.repository.getById(id);
        return get$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 加载前
     * @param id id
     * @param transitionActionParamName 状态迁移动作参数编号
     * @returns
     */
    CardDataService.prototype.onLoading = function (transitionActionParamName) {
        var _this = this;
        var tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;
        if (!tabId) {
            return;
        }
        var skip = true;
        var listening = this.frameContext.appContext.params.get(tabId) || false;
        transitionActionParamName = transitionActionParamName || 'transitionAction';
        if (!listening) {
            this.frameContext.appContext.params.set(tabId, true);
            this.runtimeFrameworkService.getEntityParam(tabId, function (options) {
                if (skip) {
                    skip = false;
                    return;
                }
                var params = _this.parseParams(options);
                if (params && params.sync) {
                    var action_1 = params.action;
                    var id = params.id;
                    var ngCommand = _this.frameContext && _this.frameContext.viewModel && _this.frameContext.viewModel.metadatas && _this.frameContext.viewModel.metadatas[action_1];
                    var actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;
                    var formPrimaryValue = _this.frameContext.bindingData.list.currentId;
                    var formState = _this.frameContext.stateMachine.context.state;
                    var state = null;
                    var stateName = void 0;
                    if (!actionName) {
                        // 可能是用户自己配置的命令，没有状态机切换，此时不再判断状态机
                        state = formState;
                    }
                    else {
                        var ngAction = _this.frameContext && _this.frameContext.stateMachine && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas.actions && _this.frameContext.stateMachine.metadatas.actions[actionName];
                        state = ngAction && ngAction.transitTo || formState;
                        stateName = _this.frameContext && _this.frameContext.stateMachine && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas && _this.frameContext.stateMachine.metadatas.states[state] && _this.frameContext.stateMachine.metadatas.states[state].name || _this.languageService.defaultStateName;
                        if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {
                            var key = stateName.replace('{{', '').replace('}}', '');
                            stateName = _this.frameContext.translate.transform(key, null);
                        }
                    }
                    var primaryValueChanged = formPrimaryValue !== id;
                    var stateChanged = formState !== state;
                    if (primaryValueChanged && stateChanged) {
                        // 均发生变化
                        var message = _this.languageService.dataAndStateChanged.replace(/\$1/g, stateName);
                        _this.showLoadingConfirm(message).pipe(switchMap(function () {
                            return _this.resetForm(action_1);
                        })).subscribe();
                    }
                    else if (primaryValueChanged) {
                        // 主键发生变化
                        _this.showLoadingConfirm(_this.languageService.dataChanged).pipe(switchMap(function () {
                            return _this.resetForm(action_1);
                        })).subscribe();
                    }
                    else if (stateChanged) {
                        // 状态发生变化
                        var message = _this.languageService.stateChanged.replace(/\$1/g, stateName);
                        _this.showLoadingConfirm(message).pipe(switchMap(function () {
                            return _this.resetForm(action_1);
                        })).subscribe();
                    }
                    else {
                        // 数据及状态均未发生变化
                        return of(true);
                    }
                }
            }, false);
        }
    };
    /**
     * 新增
     */
    CardDataService.prototype.add = function () {
        var _this = this;
        var lastModifiedId = this.bindingData.list.currentId;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var create$ = this.repository.create();
        return create$.pipe(tap(function () {
            EditStateUtil.setEditState(_this.frameContext, lastModifiedId);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        }));
    };
    /**
     * 级联新增
     */
    CardDataService.prototype.cascadeAdd = function () {
        var _this = this;
        var subject = new Subject();
        // 找到所有viewmodel,拿到了所有的frameContext，可能有组合表单的
        var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        // 找到当前frameContext的公共namespace
        var currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;
        // 拿到当前命令所在frame的表单的所有frameContext
        var currentFormFrameContexts = frameContexts.filter(function (context) { return context.namespace === currentNamespace; }) || [];
        var bindingPaths = [];
        if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {
            // 找到所有下级frameContext
            var childFrameContexts = currentFormFrameContexts.filter(function (context) { return context.viewModel.bindingPath && context.viewModel.bindingPath !== '/'; });
            if (childFrameContexts && childFrameContexts.length > 0) {
                var childBindingPaths = childFrameContexts.map(function (context) { return context.viewModel.bindingPath; });
                if (childBindingPaths && childBindingPaths.length > 0) {
                    bindingPaths = childBindingPaths.map(function (path) { return path.split('/').filter(function (p) { return p; }); }).sort(function (a, b) { return a.length - b.length; });
                }
            }
        }
        this.loadingService.show();
        this.repository.create().pipe(switchMap(function (entity) {
            var rid = entity.primaryValue;
            if (bindingPaths && bindingPaths.length > 0) {
                return from(bindingPaths).pipe(concatMap(function (bindingPath) {
                    var fpath = _this.getPath(_this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);
                    return _this.repository.appendByPath(fpath);
                }));
            }
            else {
                return of(entity);
            }
        })).pipe(last()).subscribe(function () {
            _this.loadingService.hide();
            subject.next();
        }, function (error) {
            _this.loadingService.hide();
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        });
        return subject;
    };
    /**
     * 编辑（更新数据并标记编辑状态）
     */
    CardDataService.prototype.edit = function (id) {
        var _this = this;
        var update$ = this.update();
        return update$.pipe(tap(function () {
            var currentId = _this.bindingData.list.currentId;
            EditStateUtil.setEditState(_this.frameContext, currentId);
        }));
    };
    /**
     * 更新
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    CardDataService.prototype.update = function (id) {
        var _this = this;
        // 获取id
        id = this.bindingData.list.currentId;
        if (!id) {
            return empty();
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var update$ = this.repository.updateById(id);
        this.frameContext.appContext.params.set("retrieveing", true);
        return update$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.updateFailed, error);
        }));
    };
    CardDataService.prototype.updateWithoutEmpty = function () {
        // 获取id
        var id = this.bindingData.list.currentId;
        if (!id) {
            return of(null);
        }
        else {
            return this.update();
        }
    };
    CardDataService.prototype.updateWithNotify = function () {
        // 获取id
        var id = this.bindingData.list.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        else {
            return this.update();
        }
    };
    /**
     * 加载卡片数据（分页加载子表数据）
     * @deprecated 方法已废弃，请勿使用
     */
    CardDataService.prototype.loadPaged = function (filter, sort) {
        var _this = this;
        // 获取id
        var id = this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // this.frameContext.root.params.set('updateWithPaging', true);
        var update$ = of(null); //this.repository.updateEntityById(id, true);
        return update$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.updateFailed, error);
        }));
    };
    /**
     * 保存
     */
    CardDataService.prototype.save = function (successMsg) {
        var _this = this;
        // 获取当前行
        var id = this.bindingData.list.currentId;
        if (!id) {
            return of(false);
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var update$ = this.repository.updateChangesById(id);
        var save$ = this.repository.applyChangesById(id);
        var result$ = update$.pipe(
        // update$ => save$
        switchMap(function (updateResult) {
            if (updateResult === false) {
                return of(false);
            }
            else {
                return save$;
            }
        }), 
        // 隐藏loading
        tap(function () {
            // 取消新增状态
            EditStateUtil.setEditState(_this.frameContext, id);
            _this.loadingService.hideDelayLoading(loadingTimerId);
            // this.formNotifyService.info(this.languageService.saveSuccess);
            if (successMsg && successMsg.trim()) {
                var showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        var options = JSON.parse(successMsg);
                        if (options && options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                FormNotifyStrategyService.success(_this.formNotifyService, _this.languageService.saveSuccess);
            }
            // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.saveFailed, error);
        }));
        return result$;
    };
    // #region 取消相关方法
    /**
     * 取消（默认取消）
     */
    CardDataService.prototype.cancel = function () {
        return this.cancelWithCheck();
    };
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    CardDataService.prototype.revert = function (options) {
        return this.cancelWithoutCheck(options);
    };
    /**
     * 取消（取消前检查未保存的变更）
     * @summary
     * 1、用户误操作：只需要做个提示就可以了；
     * 2、用户有意取消：点击取消就是要放弃所有变更，这时候询问人家是否要保存或者提示存在变更有点多此一举，确认一把即可。
     * 3、用户误操作：没有变更的情况下直接给取消了，用户会产生恐慌，因为用户有时候并不确定是否有变更，应该也确认一把。
     * @todo
     * 1、由于产品部很多代码误用了该方法，依赖了没有变更的时候直接取消，现在弹窗确认框来，不太合适；
     * 2、产品部需要用cancelWithoutCheck方法代替，目前先给兼容着，待删除。
     */
    CardDataService.prototype.cancelWithCheck = function () {
        var _this = this;
        // @todel
        var hasUnSavedChanges = BefRepositoryUtil.isExistUnsaveData(this.repository);
        if (!hasUnSavedChanges) {
            return this.cancelChanges();
        }
        // 确认是否取消
        var confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);
        var result$ = confirm$.pipe(switchMap(function (ifCancel) {
            if (ifCancel === false) {
                return EMPTY;
            }
            return _this.cancelChanges();
        }));
        return result$;
    };
    /**
     * 取消（直接取消，不执行检查）
     */
    CardDataService.prototype.cancelWithoutCheck = function (options) {
        return this.cancelChanges(options);
    };
    /**
     * 取消
     */
    CardDataService.prototype.cancelChanges = function (options) {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var cancel$ = this.repository.cancelChanges(options);
        return cancel$.pipe(tap(function () {
            EditStateUtil.setEditState(_this.frameContext, '');
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.cancelFailed, error);
        }));
    };
    // #endregion
    /**
     * 重新加载（仅供卡片取消后重新加载数据，其他场景请勿使用）
     */
    CardDataService.prototype.reload = function () {
        var isAdd = EditStateUtil.getAddState(this.frameContext);
        var id;
        if (isAdd === true) {
            id = EditStateUtil.getLastModifiedId(this.frameContext);
        }
        else {
            id = this.bindingData.list.currentId;
        }
        if (!id) {
            this.repository.entityCollection.loadEntities([]);
            return;
        }
        return this.load(id);
    };
    CardDataService.prototype.getPath = function (viewModel, bindingPath, rid) {
        var path = '/' + rid;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    CardDataService.prototype.resetForm = function (action) {
        var _this = this;
        var validationService = this.frameContext.injector.get(ValidationService, null);
        return this.frameContext.repository.cancelChanges().pipe(switchMap(function () { return _this.commandService.execute(action).pipe(switchMap(function () {
            return validationService && validationService.resetValidation() || of(null);
        })); }));
    };
    CardDataService.prototype.parseParams = function (options) {
        if (options && Object.prototype.toString.call(options) === "[object Map]" /* map */) {
            var params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);
            if (params && typeof params === 'string') {
                params = decodeURIComponent(params);
                if (params.startsWith('{') && params.endsWith('}')) {
                    params = JSON.parse(params);
                }
                return {
                    action: params.action,
                    id: params.idToView || params.idToEdit || params.id,
                    sync: params.sync || false
                };
            }
        }
        return null;
    };
    CardDataService.prototype.showLoadingConfirm = function (message) {
        return this.formMessageService.confirm(message).pipe(switchMap(function (result) {
            if (result === true) {
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    };
    CardDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CardDataService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: FrameContext },
        { type: FormLoadingService },
        { type: FormNotifyService },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: FormErrorService },
        { type: RuntimeFrameworkService },
        { type: CommandService }
    ]; };
    return CardDataService;
}());
export { CardDataService };
//# sourceMappingURL=data:application/json;base64,