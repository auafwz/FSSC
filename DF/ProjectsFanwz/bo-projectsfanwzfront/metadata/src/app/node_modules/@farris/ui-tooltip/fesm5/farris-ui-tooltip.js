import { Subject } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';
import { Injectable, RendererFactory2, NgZone, Directive, Input, ElementRef, Renderer2, ViewContainerRef, ComponentFactoryResolver, NgModule, Pipe, SecurityContext, Component, TemplateRef, ViewChild, ViewEncapsulation, defineInjectable, inject } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AttentionService = /** @class */ (function () {
    function AttentionService(renderFac, ngZone) {
        this.ngZone = ngZone;
        this.renderer = renderFac.createRenderer(null, null);
    }
    /**
     * @param {?} els
     * @param {?=} timer
     * @return {?}
     */
    AttentionService.prototype.catchAttention = /**
     * @param {?} els
     * @param {?=} timer
     * @return {?}
     */
    function (els, timer) {
        var _this = this;
        if (timer === void 0) { timer = 600; }
        if (els && els.length > 0) {
            /** @type {?} */
            var attentionEls_1 = [];
            for (var k = 0; k < els.length; k++) {
                /** @type {?} */
                var attentionEl;
                if (typeof els[k].idOrEl == 'string') {
                    attentionEl = document.getElementById(els[k].idOrEl);
                }
                else {
                    attentionEl = els[k].idOrEl;
                }
                if (attentionEl) {
                    attentionEls_1.push(attentionEl);
                    this.renderer.addClass(attentionEl, 'f-catch-attention-debounce');
                }
            }
            // 移除class
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    for (var m = 0; m < attentionEls_1.length; m++) {
                        _this.renderer.removeClass(attentionEls_1[m], 'f-catch-attention-debounce');
                    }
                }), timer);
            }));
        }
    };
    /**
     * @return {?}
     */
    AttentionService.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    AttentionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AttentionService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: NgZone }
    ]; };
    /** @nocollapse */ AttentionService.ngInjectableDef = defineInjectable({ factory: function AttentionService_Factory() { return new AttentionService(inject(RendererFactory2), inject(NgZone)); }, token: AttentionService, providedIn: "root" });
    return AttentionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TooltipService = /** @class */ (function () {
    function TooltipService() {
        /* tooltip位置 */
        this.placement$ = new Subject();
        /* tooltip控制显示 */
        this.show$ = new Subject();
        /* 计算位置 */
        this.calPosition$ = new Subject();
    }
    /**
     * @return {?}
     */
    TooltipService.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    TooltipService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TooltipService.ctorParameters = function () { return []; };
    /** @nocollapse */ TooltipService.ngInjectableDef = defineInjectable({ factory: function TooltipService_Factory() { return new TooltipService(); }, token: TooltipService, providedIn: "root" });
    return TooltipService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TooltipComponent = /** @class */ (function () {
    function TooltipComponent(el, render) {
        this.el = el;
        this.render = render;
        this.contentIsString = true;
        this._tipWidth = '';
        this._tipCls = '';
        /* 位置 */
        this.placement = 'top';
        /* 位置样式 */
        this.positionStyle = {};
    }
    Object.defineProperty(TooltipComponent.prototype, "content", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nfContent;
        },
        /* 普通文本内容 */
        set: /* 普通文本内容 */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.contentIsString = false;
                this.contentViewf.createEmbeddedView(value);
            }
            else {
                this.contentIsString = true;
                this.nfContent = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipComponent.prototype, "tipWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tipWidth;
        },
        /**因为表单生成没有排除factory,不能使用模板 */
        set: /**
         * 因为表单生成没有排除factory,不能使用模板
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._tipWidth) {
                if (value) {
                    this.render.setStyle(this.innerNode.nativeElement, 'width', value);
                    this.render.setStyle(this.innerNode.nativeElement, 'max-width', 'none');
                }
                else {
                    this.render.removeStyle(this.innerNode.nativeElement, 'width');
                    this.render.removeStyle(this.innerNode.nativeElement, 'max-width');
                }
                this._tipWidth = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipComponent.prototype, "tipCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tipCls;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._tipCls) {
                //移除旧样式
                this._tipCls && this.render.removeClass(this.el.nativeElement, this._tipCls);
                //追加新样式
                value && this.render.addClass(this.el.nativeElement, value);
                this._tipCls = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TooltipComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TooltipComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.hostBoundingClientRect) {
            this.judgeWidth();
            this.calculatePosition(this.hostBoundingClientRect);
        }
    };
    /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     */
    /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     * @return {?}
     */
    TooltipComponent.prototype.judgeWidth = /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     * @return {?}
     */
    function () {
        if (this.innerNode.nativeElement.scrollHeight > this.innerNode.nativeElement.clientHeight) {
            this.render.addClass(this.innerNode.nativeElement, 'tooltip-inner-lg');
        }
    };
    /* 计算tooltip最新位置 */
    /* 计算tooltip最新位置 */
    /**
     * @param {?} hostPosition
     * @return {?}
     */
    TooltipComponent.prototype.calculatePosition = /* 计算tooltip最新位置 */
    /**
     * @param {?} hostPosition
     * @return {?}
     */
    function (hostPosition) {
        /** @type {?} */
        var top = 0;
        /** @type {?} */
        var left = 0;
        /** @type {?} */
        var tooltipSize = this.tooltipNode.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var arrowSize = this.arrowNode.nativeElement.getBoundingClientRect();
        if (this.placement === 'top') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
        }
        else if (this.placement === 'left') {
            top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
            left = hostPosition.left - tooltipSize.width - 2;
        }
        else if (this.placement === 'right') {
            top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
            left = hostPosition.right + 2;
        }
        else if (this.placement === 'bottom') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
        }
        else if (this.placement === 'top-left') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.left;
            this.arrowNode.nativeElement.style.left = '10%';
        }
        else if (this.placement === 'top-right') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.right - tooltipSize.width;
            this.arrowNode.nativeElement.style.right = '10%';
        }
        else if (this.placement === 'right-top') {
            top = hostPosition.top;
            left = hostPosition.right + 2;
            this.arrowNode.nativeElement.style.top = '10%';
        }
        else if (this.placement === 'right-bottom') {
            top = hostPosition.bottom - tooltipSize.height;
            left = hostPosition.right + 2;
            this.arrowNode.nativeElement.style.bottom = '10%';
        }
        else if (this.placement === 'bottom-left') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.left;
            this.arrowNode.nativeElement.style.left = '10%';
        }
        else if (this.placement === 'bottom-right') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.right - tooltipSize.width;
            this.arrowNode.nativeElement.style.right = '10%';
        }
        else if (this.placement === 'left-top') {
            top = hostPosition.top;
            left = hostPosition.left - tooltipSize.width - 2;
            this.arrowNode.nativeElement.style.top = '10%';
        }
        else if (this.placement === 'left-bottom') {
            top = hostPosition.bottom - tooltipSize.height;
            left = hostPosition.left - tooltipSize.width - 2;
            this.arrowNode.nativeElement.style.bottom = '10%';
        }
        this.tooltipNode.nativeElement.style.top = top + 'px';
        this.tooltipNode.nativeElement.style.left = left + 'px';
    };
    /*
    *12个位置名解析
    * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
    */
    /*
        *12个位置名解析
        * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
        */
    /**
     * @return {?}
     */
    TooltipComponent.prototype.offsetDirection = /*
        *12个位置名解析
        * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
        */
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var placement = this.placement;
        if (placement.indexOf('-') !== -1) {
            /** @type {?} */
            var index = placement.indexOf('-');
            return placement.substring(0, index);
        }
        return placement;
    };
    TooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-tooltip',
                    template: "<div #tooltipEle [class]=\"('bs-tooltip-'+offsetDirection())+' tooltip show'\">\r\n    <div #arrowEle class=\"arrow\"></div>\r\n    <div #innerEle class=\"tooltip-inner\">\r\n        <div #contentViewf class=\"tooltip-tmpl\">\r\n            <div *ngIf=\"contentIsString\" class=\"tooltip-text\" [innerHtml]=\"nfContent|tooltipHtml\"></div>\r\n            <ng-container *ngIf=\"!contentIsString\"> {{nfContent}}</ng-container>\r\n        </div>       \r\n    </div>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".bs-tooltip-bottom .arrow,.bs-tooltip-top .arrow{left:50%}.bs-tooltip-left .arrow,.bs-tooltip-right .arrow{top:25%}"]
                }] }
    ];
    /** @nocollapse */
    TooltipComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TooltipComponent.propDecorators = {
        contentViewf: [{ type: ViewChild, args: ['contentViewf', { read: ViewContainerRef },] }],
        tooltipNode: [{ type: ViewChild, args: ['tooltipEle', { read: ElementRef },] }],
        arrowNode: [{ type: ViewChild, args: ['arrowEle', { read: ElementRef },] }],
        innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
        content: [{ type: Input }],
        tipWidth: [{ type: Input }],
        tipCls: [{ type: Input }],
        placement: [{ type: Input }]
    };
    return TooltipComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisTooltipDirective = /** @class */ (function () {
    function FarrisTooltipDirective(el, render, viewContainerRef, resolver) {
        this.el = el;
        this.render = render;
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.tooltipEnable = true;
        /* 提示文本 */
        this.text = '';
        // 提示框样式
        this.tipCls = '';
        // 提示框宽度
        this.tipWidth = '';
        /* 位置 */
        this.placement = 'top';
        this.triggerMode = 'hover';
        this.showTip = true;
        // 是否绑定了事件
        this.hasBindEvent = false;
        /* 生成提示组件 */
        this.componentFactory = this.resolver.resolveComponentFactory(TooltipComponent);
    }
    Object.defineProperty(FarrisTooltipDirective.prototype, "enableTooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tooltipEnable;
        },
        // 5月7日追加这种写法，控制禁用、启用
        // 原来的时候value是空字符串
        set: 
        // 5月7日追加这种写法，控制禁用、启用
        // 原来的时候value是空字符串
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value == 'string' && value == '') {
                this.enableOrDisable(true);
            }
            else {
                this.enableOrDisable(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTooltipDirective.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this.triggerMode;
        },
        /* 触发方式 */
        set: /* 触发方式 */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                if (value !== this.triggerMode) {
                    this.triggerMode = value;
                    this.unbindEvent();
                    this.bindEvent();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTooltipDirective.prototype, "disable", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.tooltipEnable;
        },
        /* 禁用---跟其他控件的属性容易冲突，逐渐废弃。
        * 比如按钮可以设置禁用不触发点击，但想给出点击提示，这样就冲突了
        */
        set: /* 禁用---跟其他控件的属性容易冲突，逐渐废弃。
          * 比如按钮可以设置禁用不触发点击，但想给出点击提示，这样就冲突了
          */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.enableOrDisable(!value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.bindEvent();
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unbindEvent();
        this.removeTooltip();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisTooltipDirective.prototype.enableOrDisable = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.tooltipEnable = value;
        if (this.tooltipEnable) {
            this.bindEvent();
        }
        else {
            this.unbindEvent();
        }
    };
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.bindEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.tooltipEnable) {
            return;
        }
        // 是否已绑定事件
        if (this.hasBindEvent) {
            return;
        }
        if (this.trigger === 'click') {
            // 鼠标点击
            this.clickEvent = this.render.listen(this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.appendTooltip();
                _this.clickOutEvent = _this.render.listen(document, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.removeTooltip();
                    _this.clickOutEvent();
                }));
            }));
        }
        else if (this.trigger === 'focus') {
            // 聚焦
            // @Todo 需要把input等组件和普通组件分开
            this.focusDownEvent = this.render.listen(this.el.nativeElement, 'mousedown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                _this.appendTooltip();
            }));
            this.focusUpEvent = this.render.listen(this.el.nativeElement, 'mouseup', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.removeTooltip();
            }));
        }
        else {
            // 鼠标移动上去
            this.mouseenterEvent = this.render.listen(this.el.nativeElement, 'mouseenter', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.appendTooltip();
            }));
            this.mouseleaveEvent = this.render.listen(this.el.nativeElement, 'mouseleave', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                _this.removeTooltip();
            }));
        }
        this.hasBindEvent = true;
    };
    /* 解绑事件 */
    /* 解绑事件 */
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.unbindEvent = /* 解绑事件 */
    /**
     * @return {?}
     */
    function () {
        // 鼠标移上去
        if (this.mouseenterEvent) {
            this.mouseenterEvent();
        }
        if (this.mouseleaveEvent) {
            this.mouseleaveEvent();
        }
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.clickOutEvent) {
            this.clickOutEvent();
        }
        if (this.focusDownEvent) {
            this.focusDownEvent();
        }
        if (this.focusUpEvent) {
            this.focusUpEvent();
        }
        this.hasBindEvent = false;
    };
    /* body  移除tooltip */
    /* body  移除tooltip */
    /**
     * @return {?}
     */
    FarrisTooltipDirective.prototype.removeTooltip = /* body  移除tooltip */
    /**
     * @return {?}
     */
    function () {
        if (this.tooltip) {
            this.render.removeChild(document.body, this.tooltip.el.nativeElement);
            this._componentRef.changeDetectorRef.markForCheck();
            this._componentRef.changeDetectorRef.detectChanges();
            this._componentRef.destroy();
            this.viewContainerRef.clear();
            this.tooltip = null;
            this._componentRef = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.appendTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.showTip)
            return;
        this.generateTooltip();
        this.updateViewProps(this.placement, this.content, this.el.nativeElement.getBoundingClientRect());
    };
    /* 更新tooltip组件属性 */
    /* 更新tooltip组件属性 */
    /**
     * @private
     * @param {?} placement
     * @param {?} content
     * @param {?} hostBoundingClientRect
     * @return {?}
     */
    FarrisTooltipDirective.prototype.updateViewProps = /* 更新tooltip组件属性 */
    /**
     * @private
     * @param {?} placement
     * @param {?} content
     * @param {?} hostBoundingClientRect
     * @return {?}
     */
    function (placement, content, hostBoundingClientRect) {
        this.tooltip.placement = placement;
        this.tooltip.content = content;
        this.tooltip.hostBoundingClientRect = hostBoundingClientRect;
        this.tooltip.tipCls = this.tipCls;
        this.tooltip.tipWidth = this.tipWidth;
        this._componentRef.changeDetectorRef.markForCheck();
        this._componentRef.changeDetectorRef.detectChanges();
    };
    /* 构造tooltip结构 */
    /* 构造tooltip结构 */
    /**
     * @private
     * @return {?}
     */
    FarrisTooltipDirective.prototype.generateTooltip = /* 构造tooltip结构 */
    /**
     * @private
     * @return {?}
     */
    function () {
        this._componentRef = this.viewContainerRef.createComponent(this.componentFactory);
        this.tooltip = this._componentRef.instance;
        // 父元素中移除  添加到body中
        this.render.removeChild(this.render.parentNode(this.el.nativeElement), this.tooltip.el.nativeElement);
        this.render.appendChild(document.body, this.tooltip.el.nativeElement);
    };
    FarrisTooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisTooltip]'
                },] }
    ];
    /** @nocollapse */
    FarrisTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    FarrisTooltipDirective.propDecorators = {
        enableTooltip: [{ type: Input, args: ['farrisTooltip',] }],
        text: [{ type: Input }],
        tipCls: [{ type: Input }],
        tipWidth: [{ type: Input }],
        placement: [{ type: Input }],
        trigger: [{ type: Input }],
        disable: [{ type: Input }],
        showTip: [{ type: Input }],
        content: [{ type: Input }]
    };
    return FarrisTooltipDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FInputTipsDirective = /** @class */ (function () {
    function FInputTipsDirective(el, ngzone, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.render = render;
        this.cloneEl = null;
        this.tipsText = "";
        this._enableTips = true;
    }
    Object.defineProperty(FInputTipsDirective.prototype, "enableTips", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableTips;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._enableTips !== value) {
                this._enableTips = value;
                this.changeEventBind();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    FInputTipsDirective.prototype.createCloneEl = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.el.nativeElement) {
            return;
        }
        /** @type {?} */
        var global = {
            cloneCSSProperties: [
                'line-height', 'letter-spacing',
                'font-size', 'font-family', 'font-style', 'font-weight', 'border',
                'padding', 'height'
            ]
        };
        /** @type {?} */
        var el$ = window.getComputedStyle(this.el.nativeElement);
        this.cloneEl = this.render.createElement('span');
        this.cloneEl['innerText'] = el$['value'];
        global.cloneCSSProperties.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            _this.cloneEl.style[item] = el$.getPropertyValue(item);
        }));
        this.render.addClass(this.cloneEl, 'f-dir-hidden-el');
        this.render.appendChild(document.body, this.cloneEl);
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.changeEventBind();
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.changeEventBind = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.enableTips) {
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.mouseEnterListener = _this.onMouseEnterHandler.bind(_this);
                _this.el.nativeElement.addEventListener('mouseenter', _this.mouseEnterListener);
                _this.mouseLeaveListener = _this.onMouseLeaveHandler.bind(_this);
                _this.el.nativeElement.addEventListener('mouseleave', _this.mouseLeaveListener);
            }));
        }
        else {
            if (this.mouseEnterListener) {
                this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);
                this.mouseEnterListener = null;
                this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);
                this.mouseLeaveListener = null;
            }
        }
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cloneEl) {
            this.render.removeChild(document.body, this.cloneEl);
        }
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.onMouseEnterHandler = /**
     * @return {?}
     */
    function () {
        this.changeTitle();
    };
    /**
     * @return {?}
     */
    FInputTipsDirective.prototype.onMouseLeaveHandler = /**
     * @return {?}
     */
    function () {
        // 移除提示
        this.render.setAttribute(this.el.nativeElement, 'title', '');
    };
    /**
     * @private
     * @return {?}
     */
    FInputTipsDirective.prototype.changeTitle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.cloneEl) {
            this.createCloneEl();
        }
        this.tipsText = this.el.nativeElement['value'];
        this.cloneEl['innerText'] = this.tipsText;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.cloneEl.getBoundingClientRect().width > _this.el.nativeElement.getBoundingClientRect().width) {
                    _this.render.setAttribute(_this.el.nativeElement, "title", _this.tipsText);
                }
                else {
                    _this.onMouseLeaveHandler();
                }
            }), 0);
        }));
    };
    FInputTipsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[f-input-tips]'
                },] }
    ];
    /** @nocollapse */
    FInputTipsDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    FInputTipsDirective.propDecorators = {
        enableTips: [{ type: Input, args: ['f-input-tips',] }]
    };
    return FInputTipsDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://angular.io/guide/security
var tooltipHtmlPipe = /** @class */ (function () {
    function tooltipHtmlPipe(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    tooltipHtmlPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this._sanitizer.sanitize(SecurityContext.HTML, this._sanitizer.bypassSecurityTrustHtml(value));
    };
    tooltipHtmlPipe.decorators = [
        { type: Pipe, args: [{ name: 'tooltipHtml' },] }
    ];
    /** @nocollapse */
    tooltipHtmlPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return tooltipHtmlPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisTooltipModule = /** @class */ (function () {
    function FarrisTooltipModule() {
    }
    FarrisTooltipModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FarrisTooltipDirective, TooltipComponent, FInputTipsDirective, tooltipHtmlPipe],
                    imports: [CommonModule],
                    providers: [AttentionService],
                    entryComponents: [TooltipComponent],
                    exports: [FarrisTooltipDirective, TooltipComponent, FInputTipsDirective]
                },] }
    ];
    return FarrisTooltipModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AttentionService, TooltipService, FarrisTooltipDirective, FInputTipsDirective, tooltipHtmlPipe, TooltipComponent, FarrisTooltipModule };

//# sourceMappingURL=farris-ui-tooltip.js.map