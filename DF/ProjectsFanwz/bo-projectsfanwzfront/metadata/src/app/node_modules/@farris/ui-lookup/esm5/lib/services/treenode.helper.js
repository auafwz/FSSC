/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeNodeHelper = /** @class */ (function () {
    function TreeNodeHelper(instance) {
        this.instance = instance;
        this.flatAllNodes = [];
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.getTreeInfo = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        if (treeNode.data[this.treeInfo.dataField]) {
            return treeNode.data[this.treeInfo.dataField];
        }
        /** @type {?} */
        var data = treeNode.data;
        if (data && this.treeInfo.dataField) {
            /** @type {?} */
            var treeInfoDataField_1 = this.treeInfo.dataField.toLowerCase();
            /** @type {?} */
            var dataField = Object.keys(treeNode.data).find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.toLowerCase() === treeInfoDataField_1;
            }));
            if (dataField) {
                return data[dataField];
            }
            else {
                console.error("\u672A\u627E\u5230\u6811\u5F62\u4FE1\u606F\u6570\u636E\u5B57\u6BB5\u3010" + this.treeInfo.dataField + "\u3011");
            }
        }
        else {
            console.error("\u672A\u627E\u5230\u6811\u5F62\u4FE1\u606F\u6570\u636E\u5B57\u6BB5\u3010" + this.treeInfo.dataField + "\u3011");
        }
    };
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.getTreeNodeLayer = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];
    };
    /** 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     */
    /**
     * 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     * @param {?} treeNodes
     * @param {?=} treeInfo
     * @return {?}
     */
    TreeNodeHelper.prototype.updateTreeNodeExpanded = /**
     * 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     * @param {?} treeNodes
     * @param {?=} treeInfo
     * @return {?}
     */
    function (treeNodes, treeInfo) {
        var _this = this;
        if (treeInfo === void 0) { treeInfo = null; }
        if (treeInfo) {
            this.treeInfo = treeInfo;
        }
        else {
            this.treeInfo = this.instance.treeInfo;
        }
        /** @type {?} */
        var expandLevel = this.instance.expandLevel;
        if (expandLevel === -1) {
            return;
        }
        if (!this.flatAllNodes.length) {
            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);
        }
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            tn.expanded = _this.shoudExpand(expandLevel, _this.getTreeNodeLayer(tn));
            if (_this.isSelectNodeParent(tn)) {
                tn.expanded = true;
            }
            if (tn.children && tn.children.length) {
                _this.updateTreeNodeExpanded(tn.children, treeInfo);
            }
            else {
                tn.leaf = true;
            }
        }));
    };
    /**
     * @private
     * @param {?} parent
     * @param {?} nodes
     * @param {?} level
     * @param {?} parentIds
     * @return {?}
     */
    TreeNodeHelper.prototype.treeData2Flat = /**
     * @private
     * @param {?} parent
     * @param {?} nodes
     * @param {?} level
     * @param {?} parentIds
     * @return {?}
     */
    function (parent, nodes, level, parentIds) {
        var _this = this;
        /** @type {?} */
        var idField = this.instance.idField;
        /** @type {?} */
        var arr = [];
        if (nodes && nodes.length) {
            nodes.forEach((/**
             * @param {?} node
             * @param {?} index
             * @return {?}
             */
            function (node, index) {
                // node.parent = parent;
                // node.parent = parent;
                /** @type {?} */
                var parents = [];
                if (parent) {
                    /** @type {?} */
                    var parentID = parent.data[idField];
                    /** @type {?} */
                    var _parents = parentIds || [];
                    parents = parents.concat(_parents.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n; })));
                    parents.push(parentID);
                }
                /** @type {?} */
                var rowNode = {
                    id: node.data[idField],
                    node: node,
                    level: level,
                    parents: parents,
                };
                arr.push(rowNode);
                arr = arr.concat(_this.treeData2Flat(node, node.children, level + 1, parents));
            }));
        }
        return arr;
    };
    /**
     * @private
     * @param {?} expandLevel
     * @param {?} nodeLayer
     * @return {?}
     */
    TreeNodeHelper.prototype.shoudExpand = /**
     * @private
     * @param {?} expandLevel
     * @param {?} nodeLayer
     * @return {?}
     */
    function (expandLevel, nodeLayer) {
        if (expandLevel === -1) {
            // -1 为不展开
            return false;
        }
        else if (expandLevel === 0) {
            // 0 为全部展开
            return true;
        }
        else {
            // 没有启用分层加载，通过展开层级确定是否展开该节点
            return nodeLayer <= expandLevel;
        }
    };
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.isSelectNodeParent = /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        var _this = this;
        if (this.instance.navSelectedIds) {
            /** @type {?} */
            var allParentIds = this.flatAllNodes.find((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.id === _this.instance.navSelectedIds; })).parents;
            if (allParentIds && allParentIds.length) {
                return allParentIds.includes(treeNode.id);
            }
            return false;
        }
        return false;
    };
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.getLeafNode = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        if (treeNode && (!treeNode.children || !treeNode.children.length)) {
            return treeNode;
        }
        else {
            if (treeNode.children.length === 1) {
                return this.getLeafNode(treeNode.children[0]);
            }
            else {
                return treeNode.children;
            }
        }
    };
    /**
     * @param {?} items
     * @param {?=} result
     * @return {?}
     */
    TreeNodeHelper.prototype.flatTreeNodes = /**
     * @param {?} items
     * @param {?=} result
     * @return {?}
     */
    function (items, result) {
        var _this = this;
        if (result === void 0) { result = []; }
        items = items || [];
        return items.reduce((/**
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        function (c, n) {
            c.push(n);
            if (n.children && n.children.length) {
                _this.flatTreeNodes(n.children, c);
            }
            return c;
        }), result);
    };
    return TreeNodeHelper;
}());
export { TreeNodeHelper };
if (false) {
    /** @type {?} */
    TreeNodeHelper.prototype.treeInfo;
    /** @type {?} */
    TreeNodeHelper.prototype.flatAllNodes;
    /**
     * @type {?}
     * @private
     */
    TreeNodeHelper.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,