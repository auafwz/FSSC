import { Injectable, Optional } from '@angular/core';
import { empty } from 'rxjs';
import { FormMessageService } from './form-message.service';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
/**
 * 数据检查服务
 */
var DataCheckService = /** @class */ (function () {
    function DataCheckService(messageService, formNotifyService, languageService) {
        this.messageService = messageService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 编辑前检查
     */
    DataCheckService.prototype.checkBeforeEdit = function (idToEdit) {
        var ifSkipCheck = this.ifSkipCheck(idToEdit);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToEdit) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });
        return empty();
    };
    /**
     * 查看前检查
     */
    DataCheckService.prototype.checkBeforeView = function (idToView) {
        var ifSkipCheck = this.ifSkipCheck(idToView);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToView) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });
        return empty();
    };
    /**
     * 老表单跳过检查
     * @todo：待删除，兼容老表单
     */
    DataCheckService.prototype.ifSkipCheck = function (id) {
        var context = this['context'];
        var params = context.command.params;
        // 表单没有重新保存过的情况
        if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {
            return true;
        }
        // 保存过但没有填参数的情况
        // @todo: 会漏掉空串的情况，目前主键解析的返回值是undefined，暂不考虑空串场景
        if (id === '') {
            return true;
        }
        return false;
    };
    DataCheckService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataCheckService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: FormNotifyService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return DataCheckService;
}());
export { DataCheckService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jaGVjay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtY2hlY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsS0FBSyxFQUFNLE1BQU0sTUFBTSxDQUFDO0FBRTdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDs7R0FFRztBQUNIO0lBR0UsMEJBQ1UsY0FBa0MsRUFDbEMsaUJBQW9DLEVBQ3hCLGVBQWdDO1FBRjVDLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3hCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLDBDQUFlLEdBQXRCLFVBQXVCLFFBQWdCO1FBRXJDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RixPQUFPLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7T0FFRztJQUNJLDBDQUFlLEdBQXRCLFVBQXVCLFFBQWdCO1FBQ3JDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RixPQUFPLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxzQ0FBVyxHQUFsQixVQUFtQixFQUFVO1FBQzNCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQW1CLENBQUM7UUFDbEQsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFdEMsZUFBZTtRQUNmLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDOUYsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELGVBQWU7UUFDZixnREFBZ0Q7UUFDaEQsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Z0JBcEVGLFVBQVU7Ozs7Z0JBUEYsa0JBQWtCO2dCQUNsQixpQkFBaUI7Z0JBQ2pCLGVBQWUsdUJBV25CLFFBQVE7O0lBK0RiLHVCQUFDO0NBQUEsQUFyRUQsSUFxRUM7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIGVtcHR5LCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDb21tYW5kQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRm9ybU1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1Ob3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIOaVsOaNruajgOafpeacjeWKoVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBEYXRhQ2hlY2tTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VTZXJ2aWNlOiBGb3JtTWVzc2FnZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZvcm1Ob3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgKSB7XHJcbiAgICBpZiAoIXRoaXMubGFuZ3VhZ2VTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnvJbovpHliY3mo4Dmn6VcclxuICAgKi9cclxuICBwdWJsaWMgY2hlY2tCZWZvcmVFZGl0KGlkVG9FZGl0OiBzdHJpbmcpOiBhbnkge1xyXG5cclxuICAgIGNvbnN0IGlmU2tpcENoZWNrID0gdGhpcy5pZlNraXBDaGVjayhpZFRvRWRpdCk7XHJcbiAgICBpZiAoaWZTa2lwQ2hlY2sgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlkVG9FZGl0KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3RFZGl0RGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICByZXR1cm4gZW1wdHkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOafpeeci+WJjeajgOafpVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjaGVja0JlZm9yZVZpZXcoaWRUb1ZpZXc6IHN0cmluZyk6IGFueSB7XHJcbiAgICBjb25zdCBpZlNraXBDaGVjayA9IHRoaXMuaWZTa2lwQ2hlY2soaWRUb1ZpZXcpO1xyXG4gICAgaWYgKGlmU2tpcENoZWNrID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpZFRvVmlldykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0Vmlld0RhdGEsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDogIHooajljZXot7Pov4fmo4Dmn6VcclxuICAgKiBAdG9kb++8muW+heWIoOmZpO+8jOWFvOWuueiAgeihqOWNlVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZlNraXBDaGVjayhpZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpc1snY29udGV4dCddIGFzIENvbW1hbmRDb250ZXh0O1xyXG4gICAgY29uc3QgcGFyYW1zID0gY29udGV4dC5jb21tYW5kLnBhcmFtcztcclxuXHJcbiAgICAvLyDooajljZXmsqHmnInph43mlrDkv53lrZjov4fnmoTmg4XlhrVcclxuICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2lkVG9FZGl0JykgPT09IGZhbHNlICYmIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnaWRUb1ZpZXcnKSA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5L+d5a2Y6L+H5L2G5rKh5pyJ5aGr5Y+C5pWw55qE5oOF5Ya1XHJcbiAgICAvLyBAdG9kbzog5Lya5ryP5o6J56m65Liy55qE5oOF5Ya177yM55uu5YmN5Li76ZSu6Kej5p6Q55qE6L+U5Zue5YC85pivdW5kZWZpbmVk77yM5pqC5LiN6ICD6JmR56m65Liy5Zy65pmvXHJcbiAgICBpZiAoaWQgPT09ICcnKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IERhdGFDaGVja1NlcnZpY2UgfTtcclxuIl19