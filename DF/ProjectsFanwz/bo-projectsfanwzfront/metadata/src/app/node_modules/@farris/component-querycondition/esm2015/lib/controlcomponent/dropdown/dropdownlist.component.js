/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/dropdown/dropdownlist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
import { DropDownListValue } from '../../entity/conditionvalue/dropdownlistvalue';
export class DropDownListComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        //下拉列表数据源
        this.dropDownListDataSource = new Array();
        //下拉列表控件内显示文本
        this.selectedItemId = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        /** @type {?} */
        const initialValue = (/** @type {?} */ (this.item.value));
        initialValue.key && (this.selectedItemId = initialValue.key);
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.selectedItemId = ((/** @type {?} */ (this.item.value))).key;
            }
        }
    }
    /**
     * @return {?}
     */
    getDataSource() {
        this.dropDownListDataSource = ((/** @type {?} */ (this.item.control))).enumValues;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    selectChange(selected) {
        this.item.value = new DropDownListValue({
            value: selected['selections'],
            key: selected['value']
        });
        this.conditionChange.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        this.item.value = new DropDownListValue();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
DropDownListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-dropdownlist',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n    <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n      <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n      <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n    </label>\r\n    <div class=\"farris-input-wrap\">\r\n    <farris-combo-list \r\n        [(ngModel)]=\"selectedItemId\"\r\n        [idField]=\"'value'\"\r\n        [textField]=\"'name'\"\r\n        [editable]=\"false\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [multiSelect]=\"item.control.multiSelect\"\r\n        [placeholder]=\"placeholder\"\r\n        [panelHeight]=\"item.control.panelHeight ? item.control.panelHeight : 'auto'\"\r\n        (valueChange)=\"selectChange($event)\"\r\n        (clear)=\"onClear($event)\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"item.readonly\">\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
DropDownListComponent.ctorParameters = () => [
    { type: SolutionService }
];
DropDownListComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    DropDownListComponent.prototype.item;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    DropDownListComponent.prototype.changeFields;
    /** @type {?} */
    DropDownListComponent.prototype.conditionChange;
    /** @type {?} */
    DropDownListComponent.prototype.dropDownListDataSource;
    /** @type {?} */
    DropDownListComponent.prototype.selectedItemId;
    /** @type {?} */
    DropDownListComponent.prototype.testId;
    /** @type {?} */
    DropDownListComponent.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    DropDownListComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd25saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2NvbnRyb2xjb21wb25lbnQvZHJvcGRvd24vZHJvcGRvd25saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixZQUFZLEVBQUUsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQVF6RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFPbEYsTUFBTSxPQUFPLHFCQUFxQjs7OztJQXNCOUIsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCOzs7O1FBYjNDLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUVmLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7UUFHaEUsMkJBQXNCLEdBQWUsSUFBSSxLQUFLLEVBQU8sQ0FBQzs7UUFFdEQsbUJBQWMsR0FBUSxFQUFFLENBQUM7SUFNOEIsQ0FBQzs7OztJQUV4RCxRQUFRO1FBQ0osSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDOztjQUNmLFlBQVksR0FBRyxtQkFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBcUI7UUFDekQsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNHLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7a0JBQ2xHLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUk7Ozs7WUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQztZQUNqRyxJQUFHLFFBQVEsRUFBQztnQkFDUixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQXFCLENBQUMsQ0FBQyxHQUFHLENBQUM7YUFDcEU7U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1QsSUFBSSxDQUFDLHNCQUFzQixHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQXVCLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDeEYsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsUUFBYTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGlCQUFpQixDQUFDO1lBQ3BDLEtBQUssRUFBRyxRQUFRLENBQUMsWUFBWSxDQUFDO1lBQzlCLEdBQUcsRUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQzNCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsS0FBVTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVELHFCQUFxQixDQUFDLEtBQW9CO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7WUFqRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLDJtQ0FBNEM7YUFDL0M7Ozs7WUFQUSxlQUFlOzs7bUJBYW5CLEtBQUs7MkJBS0wsS0FBSzs4QkFFTCxNQUFNLFNBQUMsaUJBQWlCOzs7Ozs7O0lBUHpCLHFDQUFtQjs7Ozs7SUFLbkIsNkNBQTBDOztJQUUxQyxnREFBZ0U7O0lBR2hFLHVEQUFzRDs7SUFFdEQsK0NBQXlCOztJQUV6Qix1Q0FBZTs7SUFFZiw0Q0FBb0I7Ozs7O0lBRVIsZ0RBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUnO1xyXG5pbXBvcnQgeyBEcm9wRG93bkxpc3RDb250cm9sIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlL2Ryb3Bkb3dubGlzdC9kcm9wZG93bmxpc3Rjb250cm9sJztcclxuaW1wb3J0IHsgRW51bVR5cGUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2VudW10eXBlJztcclxuaW1wb3J0IHsgRW51bUludGVnZXJWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb250cm9sdHlwZS9kcm9wZG93bmxpc3QvaW50ZWdlcmVudW12YWx1ZSc7XHJcbmltcG9ydCB7IEVudW1TdHJpbmdWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb250cm9sdHlwZS9kcm9wZG93bmxpc3Qvc3RyaW5nZW51bXZhbHVlJztcclxuaW1wb3J0IHsgRW51bUJvb2xWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb250cm9sdHlwZS9kcm9wZG93bmxpc3QvYm9vbGVudW12YWx1ZSc7XHJcbmltcG9ydCB7IFNvbHV0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IElWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9pdmFsdWUnO1xyXG5pbXBvcnQgeyBEcm9wRG93bkxpc3RWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9kcm9wZG93bmxpc3R2YWx1ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLXNvbHV0aW9uLWRyb3Bkb3dubGlzdCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZHJvcGRvd25saXN0LmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wRG93bkxpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICAvKipcclxuICAgICAqIFF1ZXJ5Q29uZGl0aW9u57G75Z6LXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGl0ZW06IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOafkOS4quWtl+auteWPkeeUn+WAvOWPmOWMluS6i+S7tuaXtu+8jOmcgOimgeWQjOatpea4heepuueahOWtl+aute+8jOWPr+iDveS4jeaYr+W9k+WJjeWtl+autVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBjaGFuZ2VGaWVsZHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuXHJcbiAgICBAT3V0cHV0KCdjb25kaXRpb25DaGFuZ2UnKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgLy/kuIvmi4nliJfooajmlbDmja7mupBcclxuICAgIGRyb3BEb3duTGlzdERhdGFTb3VyY2U6IEFycmF5PGFueT4gPSBuZXcgQXJyYXk8YW55PigpO1xyXG4gICAgLy/kuIvmi4nliJfooajmjqfku7blhoXmmL7npLrmlofmnKxcclxuICAgIHNlbGVjdGVkSXRlbUlkOiBhbnkgPSAnJztcclxuICAgIC8v57uE5Lu2aWRcclxuICAgIHRlc3RJZDogc3RyaW5nO1xyXG4gICAgLy/ml6fnu5PmnoTkuK1wbGFjZWhvbGRlcuWxnuaAp+WcqGl0ZW0uY29udHJvbOWGhVxyXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvbHV0aW9uU2VydmljZTogU29sdXRpb25TZXJ2aWNlKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YVNvdXJjZSgpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZSBhcyBEcm9wRG93bkxpc3RWYWx1ZTtcclxuICAgICAgICBpbml0aWFsVmFsdWUua2V5ICYmICh0aGlzLnNlbGVjdGVkSXRlbUlkID0gaW5pdGlhbFZhbHVlLmtleSk7XHJcbiAgICAgICAgdGhpcy50ZXN0SWQgPSB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRHdWlkKCk7XHJcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9ICh0aGlzLml0ZW0ucGxhY2VIb2xkZXIpID8gKHRoaXMuaXRlbS5wbGFjZUhvbGRlcikgOiAodGhpcy5pdGVtLmNvbnRyb2wucGxhY2Vob2xkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdldERhdGFTb3VyY2UoKTtcclxuICAgICAgICBpZihjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXSAmJiBjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5jdXJyZW50VmFsdWUgJiYgIWNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ2hhbmdlID0gY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uY3VycmVudFZhbHVlLnNvbWUoZmllbGQgPT4gZmllbGQgPT0gdGhpcy5pdGVtLmZpZWxkQ29kZSk7XHJcbiAgICAgICAgICAgIGlmKGlzQ2hhbmdlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtSWQgPSAodGhpcy5pdGVtLnZhbHVlIGFzIERyb3BEb3duTGlzdFZhbHVlKS5rZXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YVNvdXJjZSgpIHtcclxuICAgICAgICB0aGlzLmRyb3BEb3duTGlzdERhdGFTb3VyY2UgPSAodGhpcy5pdGVtLmNvbnRyb2wgYXMgRHJvcERvd25MaXN0Q29udHJvbCkuZW51bVZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RDaGFuZ2Uoc2VsZWN0ZWQ6IGFueSl7XHJcbiAgICAgICAgdGhpcy5pdGVtLnZhbHVlID0gbmV3IERyb3BEb3duTGlzdFZhbHVlKHtcclxuICAgICAgICAgICAgdmFsdWUgOiBzZWxlY3RlZFsnc2VsZWN0aW9ucyddLFxyXG4gICAgICAgICAgICBrZXkgOiAgc2VsZWN0ZWRbJ3ZhbHVlJ11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGVhcihldmVudDogYW55KXtcclxuICAgICAgICB0aGlzLml0ZW0udmFsdWUgPSBuZXcgRHJvcERvd25MaXN0VmFsdWUoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQ6UXVlcnlDb25kaXRpb24pe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQpO1xyXG4gICAgfVxyXG59Il19