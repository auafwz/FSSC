/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/inputgroupvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { cloneDeep } from 'lodash-es';
export class InputGroupValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.value = data.value;
        this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return item[arg] ? this.getPropValue(item[arg], args) : '';
        }
        return item[args[0]];
    }
}
if (false) {
    /** @type {?} */
    InputGroupValue.prototype.value;
    /** @type {?} */
    InputGroupValue.prototype.textValue;
    /** @type {?} */
    InputGroupValue.prototype.textField;
    /** @type {?} */
    InputGroupValue.prototype.isInputText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cHZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2lucHV0Z3JvdXB2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE1BQU0sT0FBTyxlQUFlOzs7O0lBRXhCLGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsZ0JBQWdCOztjQUNOLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O2NBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0IsQ0FBQzs7OztJQVdELFlBQVksT0FLUixFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUM7UUFDL0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzdELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsV0FBbUI7O2NBQ3RCLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Y0FDN0IsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFDaEYsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdELENBQUM7Ozs7OztJQUVELFlBQVksQ0FBQyxJQUFTLEVBQUUsSUFBbUI7UUFDdkMsSUFBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQzs7a0JBQ1QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDOUQ7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0o7OztJQWpDRyxnQ0FBYTs7SUFFYixvQ0FBa0I7O0lBRWxCLG9DQUFrQjs7SUFFbEIsc0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwVmFsdWUgaW1wbGVtZW50cyBJVmFsdWUge1xyXG5cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuSW5wdXRHcm91cDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMudGV4dEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGl0ZW0gPT4gdGhpcy5nZXRQcm9wVmFsdWUoaXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRleHRBcnIgJiYgdGV4dEFyci5sZW5ndGggPyB0ZXh0QXJyLmpvaW4oJywnKTogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy50ZXh0RmllbGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5pc0lucHV0VGV4dCA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy50ZXh0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy/pgJrov4flvLnnqpfov5Tlm57nmoToi6XlubLkuKrlgLzlr7nosaHmnoTmiJDnmoTmlbDnu4RcclxuICAgIHZhbHVlOiBhbnlbXTtcclxuICAgIC8v5o6n5Lu25YaF5pi+56S655qE5YC8XHJcbiAgICB0ZXh0VmFsdWU6IHN0cmluZztcclxuICAgIC8v5by556qX5qih5byP5LiL77yM5Y+W5YiX6KGo5Lit5ZOq5Liq5a2X5q6155qE5YC85pig5bCE5Yiw5b2T5YmN5a2X5q61XHJcbiAgICB0ZXh0RmllbGQ6IHN0cmluZztcclxuICAgIC8v5piv5ZCm5piv5omL5Yqo6L6T5YWl55qE5YC8XHJcbiAgICBpc0lucHV0VGV4dDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiB7XHJcbiAgICAgICAgdmFsdWU6IGFueSxcclxuICAgICAgICB0ZXh0VmFsdWU6IHN0cmluZyxcclxuICAgICAgICB0ZXh0RmllbGQ6IHN0cmluZyxcclxuICAgICAgICBpc0lucHV0VGV4dDogYm9vbGVhblxyXG4gICAgfSA9IHt2YWx1ZTogW10sIHRleHRWYWx1ZTogdW5kZWZpbmVkLCB0ZXh0RmllbGQ6IHVuZGVmaW5lZCwgaXNJbnB1dFRleHQ6IHVuZGVmaW5lZH0pe1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgIHRoaXMudGV4dFZhbHVlID0gZGF0YS50ZXh0VmFsdWUgPyBkYXRhLnRleHRWYWx1ZS50cmltKCkgOiAnJztcclxuICAgICAgICB0aGlzLnRleHRGaWVsZCA9IGRhdGEudGV4dEZpZWxkO1xyXG4gICAgICAgIHRoaXMuaXNJbnB1dFRleHQgPSBkYXRhLmlzSW5wdXRUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRleHRWYWx1ZSh0YXJnZXRGaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGFyZ2V0RmllbGQuc3BsaXQoJy4nKTtcclxuICAgICAgICBjb25zdCB0ZXh0QXJyID0gdGhpcy52YWx1ZS5tYXAoaXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShpdGVtLCBjbG9uZURlZXAoYXJncykpKTtcclxuICAgICAgICByZXR1cm4gdGV4dEFyciAmJiB0ZXh0QXJyLmxlbmd0aCA/IHRleHRBcnIuam9pbignLCcpOiAnJztcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9wVmFsdWUoaXRlbTogYW55LCBhcmdzOiBBcnJheTxzdHJpbmc+KTogYW55e1xyXG4gICAgICAgIGlmKGFyZ3MubGVuZ3RoID4gMSl7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1bYXJnXSA/IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW1bYXJnXSwgYXJncykgOiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1bYXJnc1swXV07XHJcbiAgICB9XHJcbn0iXX0=