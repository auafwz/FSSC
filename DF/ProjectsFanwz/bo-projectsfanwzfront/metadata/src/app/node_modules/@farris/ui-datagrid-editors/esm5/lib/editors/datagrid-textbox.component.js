/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 11:10:33
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:19:18
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { InputDefaultOptions } from '../editor-default-options';
var DatagridTextboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridTextboxComponent, _super);
    function DatagridTextboxComponent(render, el, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.inputType = 'text';
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridTextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, InputDefaultOptions, this.options);
        this.inputElement = this.instance.nativeElement;
        if (this.options.isPassword) {
            this.inputType = 'password';
        }
        else {
            this.inputType = 'text';
        }
    };
    DatagridTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-textbox',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <input #input [attr.type]=\"inputType\" class=\"form-control \"\n            [attr.placeholder]=\"options?.placeholder\" [formControlName]=\"column.field\"  maxlength=\"{{options?.maxLength}}\">\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTextboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridTextboxComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['input',] }]
    };
    return DatagridTextboxComponent;
}(DatagridBaseEditorDirective));
export { DatagridTextboxComponent };
if (false) {
    /** @type {?} */
    DatagridTextboxComponent.prototype.instance;
    /** @type {?} */
    DatagridTextboxComponent.prototype.inputType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtdGV4dGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC10ZXh0Ym94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFhLFNBQVMsRUFBUyxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEgsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFaEU7SUFTOEMsb0RBQTJCO0lBSXJFLGtDQUFZLE1BQWlCLEVBQUUsRUFBYyxFQUFFLFFBQWtCO1FBQWpFLFlBQ0ksa0JBQU0sTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FDOUI7UUFIRCxlQUFTLEdBQUcsTUFBTSxDQUFDOztJQUduQixDQUFDOzs7O0lBRUQsMkNBQVE7OztJQUFSO1FBQ0ksaUJBQU0sUUFBUSxXQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUNoRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO1NBQy9CO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztTQUMzQjtJQUNMLENBQUM7O2dCQTFCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtvQkFDL0IsUUFBUSxFQUFFLHVUQUtUO2lCQUNKOzs7O2dCQVoyQixTQUFTO2dCQUFFLFVBQVU7Z0JBQStCLFFBQVE7OzsyQkFjbkYsU0FBUyxTQUFDLE9BQU87O0lBaUJ0QiwrQkFBQztDQUFBLEFBM0JELENBUzhDLDJCQUEyQixHQWtCeEU7U0FsQlksd0JBQXdCOzs7SUFDakMsNENBQXlDOztJQUV6Qyw2Q0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTEyIDExOjEwOjMzXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTE0IDEzOjE5OjE4XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIFZpZXdDaGlsZCwgSW5wdXQsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IElucHV0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdncmlkLWVkaXRvci10ZXh0Ym94JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgICA8aW5wdXQgI2lucHV0IFthdHRyLnR5cGVdPVwiaW5wdXRUeXBlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgXCJcclxuICAgICAgICAgICAgW2F0dHIucGxhY2Vob2xkZXJdPVwib3B0aW9ucz8ucGxhY2Vob2xkZXJcIiBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiICBtYXhsZW5ndGg9XCJ7e29wdGlvbnM/Lm1heExlbmd0aH19XCI+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFRleHRib3hDb21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBAVmlld0NoaWxkKCdpbnB1dCcpIGluc3RhbmNlOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIGlucHV0VHlwZSA9ICd0ZXh0JztcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgSW5wdXREZWZhdWx0T3B0aW9ucywgdGhpcy5vcHRpb25zKTtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlzUGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dFR5cGUgPSAncGFzc3dvcmQnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUeXBlID0gJ3RleHQnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=