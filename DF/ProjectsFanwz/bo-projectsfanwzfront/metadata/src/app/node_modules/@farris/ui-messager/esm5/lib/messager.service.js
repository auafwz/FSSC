/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.15
 * @Date: 2019-04-02 11:48:08
 * @LastEditTime: 2019-10-26 16:38:34
 */
import { Injectable, Injector, NgZone } from '@angular/core';
import { Subject, of } from 'rxjs';
import { BsModalService } from '@farris/ui-modal';
import { MessagerDefaultConfig, MESSAGER_DEFAULT_CONFIG } from './messager.config';
import { MessagerComponent } from './messager.component';
import { LocaleService } from '@farris/ui-locale';
var MessagerService = /** @class */ (function () {
    function MessagerService(bsModalService, injector) {
        this.bsModalService = bsModalService;
        this.injector = injector;
        this.version = '0.0.15';
        this.currentId = -1;
        this.modals = [];
        this.defaultMessagerConfig = null;
        /** @type {?} */
        var config = this.injector.get(MESSAGER_DEFAULT_CONFIG) || MessagerDefaultConfig;
        this.defaultMessagerConfig = Object.assign({}, MessagerDefaultConfig, config);
        this.ngZone = this.injector.get(NgZone);
        this.localeService = this.injector.get(LocaleService);
    }
    Object.defineProperty(MessagerService.prototype, "okText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.ok');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "cancelText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.cancel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "yesText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.yes');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "noText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.no');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "titleText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.title');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "errorTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.errorTitle');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} str
     * @return {?}
     */
    MessagerService.prototype.escapeHtml = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
    };
    /**
     * 显示信息提示框
     * @param msgtype 消息类别
     * @param message 提示消息一
     * @param opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param submsg 提示消息二级
     */
    /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    MessagerService.prototype.show = /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    function (msgtype, message, opts, submsg) {
        var _this = this;
        if (submsg === void 0) { submsg = ''; }
        if (document.activeElement) {
            ((/** @type {?} */ (document.activeElement))).blur();
        }
        /** @type {?} */
        var modalHeight = 180;
        /** @type {?} */
        var defaultOpts = {
            safeHtml: true,
            title: this.titleText,
            width: 390,
            height: modalHeight,
            showButtons: false,
            showMaxButton: false,
            resizable: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    _this.close();
                })
            },
            class: 'modal-message ' + (msgtype ? 'modal-message-type-' + msgtype : ''),
            showHeader: false,
        };
        defaultOpts = Object.assign({}, this.defaultMessagerConfig, defaultOpts);
        /** @type {?} */
        var extendOpts = {};
        switch (msgtype) {
            case 'prompt':
                // 弹出对话类型
                extendOpts = { showHeader: true, modalHeight: 260 };
                break;
            case 'error':
                // 错误
                extendOpts = { title: this.errorTitle, width: 446, showHeader: true, showMaxButton: true, fitContent: true };
                break;
            case 'exception':
                extendOpts = { safeHtml: false, title: this.errorTitle, width: 446, showHeader: true, fitContent: true };
                break;
            default:
                // 默认其他
                extendOpts = { width: submsg ? 446 : 390, fitContent: true };
        }
        Object.assign(defaultOpts, extendOpts);
        if (opts) {
            Object.assign(defaultOpts, opts);
        }
        if (message && defaultOpts.safeHtml) {
            message = this.escapeHtml(message);
        }
        Object.assign(defaultOpts.initialState, {
            type: msgtype,
            message: message,
            msg: submsg,
            exception: opts && opts['exception'] ? opts['exception'] : null,
            showLines: opts && opts['showLines'] ? opts['showLines'] : 3
        });
        if (defaultOpts['buttons'] && defaultOpts['buttons'].length) {
            if (!defaultOpts.initialState['buttons'] || !defaultOpts.initialState['buttons'].length) {
                defaultOpts.initialState['buttons'] = defaultOpts['buttons'];
            }
        }
        /** @type {?} */
        var _modal = this.bsModalService.show(MessagerComponent, defaultOpts);
        // _modal.content.buttons = defaultOpts['buttons'] || [];
        this.confirmSubject = new Subject();
        if (this.modals.length > 0) {
            /** @type {?} */
            var modalContainerComponent = _modal.dialog;
            modalContainerComponent.instance.isShown = true;
            modalContainerComponent.instance.moveTo(15 * this.modals.length, 15 * this.modals.length);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            // 第1个按钮获取焦点
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var btns = _modal.dialog.location.nativeElement.querySelectorAll('.modal-footer button');
                if (btns.length) {
                    btns.item(0)['focus']();
                }
            }));
        }));
        this.msgMgr(_modal);
        return _modal;
    };
    /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    MessagerService.prototype.msgMgr = /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    function (ref) {
        var _this = this;
        /** @type {?} */
        var id = this.bsModalService.getModalsCount() + 1000;
        if (this.modals.length === 0) {
            this.modals.push({ id: id, ref: ref });
        }
        else {
            if (!this.getModalById(id)) {
                this.modals.push({ id: id, ref: ref });
            }
            else {
                this.getModalById(id).ref = ref;
            }
        }
        /** @type {?} */
        var cmp = this.getModalCmp();
        cmp.closed.subscribe((/**
         * @param {?} level
         * @return {?}
         */
        function (level) {
            _this.removeMessager(id);
            _this.confirmSubject.unsubscribe();
        }));
        this.currentId = id;
    };
    /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.info = /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, callback, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var infoDlg = this.show('info', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    infoDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return infoDlg;
    };
    /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.question = /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, okCallback, cancelCallback, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var questionDlg = this.show('question', message, {
            initialState: {
                okText: this.yesText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    questionDlg.close();
                    if (okCallback) {
                        okCallback();
                    }
                }),
                cancelText: this.noText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    questionDlg.close();
                    if (cancelCallback) {
                        cancelCallback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return questionDlg;
    };
    /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.question2 = /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (messager, btns, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        return this.show('question', messager, {
            initialState: {
                buttons: btns
            },
            fitContent: fitContent
        }, msg);
    };
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param title 标题
     * @param msg 信息
     * @param fitContent 自适应内容
     */
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    MessagerService.prototype.prompt = /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    function (title, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var promptSubject = new Subject();
        /** @type {?} */
        var dlg = this.show('prompt', msg, {
            title: title,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var mc = (/** @type {?} */ (dlg.content));
                    dlg.close();
                    promptSubject.next(mc.promptText.nativeElement.value);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    dlg.close();
                    promptSubject.next(false);
                })
            },
            fitContent: fitContent,
            closed: (/**
             * @return {?}
             */
            function () {
                promptSubject.unsubscribe();
            })
        }, msg);
        return promptSubject;
    };
    /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    MessagerService.prototype.prompt2 = /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    function (title, msg, opts) {
        var _this = this;
        /** @type {?} */
        var promptSubject = new Subject();
        if (!opts) {
            opts = {
                showOkButton: true,
                showCloseButton: true,
                showFontSize: false,
                fontSize: 18,
                readonly: false,
                saveSize: false
            };
        }
        /** @type {?} */
        var _dialogOpts = {
            title: title,
            initialState: {
                showOkButton: opts.showOkButton === undefined ? true : opts.showOkButton,
                showCloseButton: opts.showCloseButton === undefined ? true : opts.showCloseButton,
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var mc = (/** @type {?} */ (dlg.content));
                    dlg.close();
                    promptSubject.next(mc.promptText.nativeElement.value);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    dlg.close();
                    promptSubject.next(false);
                }),
                showFontSize: opts.showFontSize,
                fontSize: opts.fontSize || 18,
                enableWordCount: !!opts.enableWordCount,
                countType: opts.countType || 'length',
                maxLength: opts.maxLength
            },
            fitContent: false,
            showMaxButton: true,
            resizable: true,
            class: '',
            closed: (/**
             * @return {?}
             */
            function () {
                promptSubject.unsubscribe();
            }),
            opened: (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var textareaEle = dlg.content.promptText.nativeElement;
                    textareaEle.closest('section').style.padding = '15px';
                    textareaEle.style.resize = 'none';
                    textareaEle.style.height = '100%';
                    if (opts.readonly) {
                        textareaEle.readOnly = true;
                    }
                }));
            }),
            beforeClose: (/**
             * @param {?} modalRef
             * @return {?}
             */
            function (modalRef) {
                if (opts.saveSize) {
                    /** @type {?} */
                    var data = { fontSize: dlg.content.fontSize, width: modalRef.config.width, height: modalRef.config.height };
                    _this.saveTextAreaSizeInfo(data);
                }
                return of(true);
            })
        };
        /** @type {?} */
        var dialogOpts = _dialogOpts;
        if (opts) {
            dialogOpts = Object.assign(dialogOpts, opts);
        }
        /** @type {?} */
        var dlg = this.show('prompt', msg, dialogOpts, msg);
        return promptSubject;
    };
    /**
     * @return {?}
     */
    MessagerService.prototype.getKeyString = /**
     * @return {?}
     */
    function () {
        // 一台终端共用一个配置
        // 保留最后一次的设置，
        // 保存窗口大小，字体大小
        return 'IGIX-FARRIS-UI-TEXTAREA-ZOOM-SETTINGS';
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    MessagerService.prototype.saveTextAreaSizeInfo = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (window.localStorage) {
            /** @type {?} */
            var key = this.getKeyString();
            localStorage.setItem(key, JSON.stringify(data));
        }
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.confirm = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var confirmSubject = new Subject();
        /** @type {?} */
        var confirmDlg = this.show('question', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    confirmDlg.close();
                    confirmSubject.next(true);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    confirmDlg.close();
                    confirmSubject.next(false);
                })
            },
            fitContent: fitContent,
            closed: (/**
             * @return {?}
             */
            function () {
                confirmSubject.unsubscribe();
            })
        }, msg);
        return confirmSubject.asObservable();
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.success = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var successDlg = this.show('success', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    successDlg.close();
                })
            },
            fitContent: fitContent
        }, msg);
        return successDlg;
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.error = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var errorDlg = this.show('error', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    errorDlg.close();
                })
            },
            fitContent: fitContent
        }, msg);
        return errorDlg;
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.warning = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    function (message, msg, fitContent, callback) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var warningDlg = this.show('warning', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    warningDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return warningDlg;
    };
    /**
     * @private
     * @return {?}
     */
    MessagerService.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.modals.length) {
            /** @type {?} */
            var msgbox = this.getModalById(this.currentId);
            if (msgbox) {
                msgbox.ref.close();
            }
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    MessagerService.prototype.getModalById = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.modals.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id === id; }));
    };
    /**
     * @private
     * @return {?}
     */
    MessagerService.prototype.getModalCmp = /**
     * @private
     * @return {?}
     */
    function () {
        return this.bsModalService.getCurrentModalContainer().instance;
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    MessagerService.prototype.removeMessager = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.modals = this.modals.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id !== id; }));
        if (!this.modals.length) {
            this.currentId = -1;
        }
        else {
            this.currentId = this.modals[this.modals.length - 1].id;
        }
    };
    MessagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MessagerService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: Injector }
    ]; };
    return MessagerService;
}());
export { MessagerService };
if (false) {
    /** @type {?} */
    MessagerService.prototype.version;
    /** @type {?} */
    MessagerService.prototype.currentId;
    /** @type {?} */
    MessagerService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.defaultMessagerConfig;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.confirmSubject;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.bsModalService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbWVzc2FnZXIvIiwic291cmNlcyI6WyJsaWIvbWVzc2FnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFVQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBNEIsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RSxPQUFPLEVBQWtCLHFCQUFxQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSWxEO0lBWUkseUJBQW9CLGNBQThCLEVBQVUsUUFBa0I7UUFBMUQsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVY5RSxZQUFPLEdBQUcsUUFBUSxDQUFDO1FBQ25CLGNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNmLFdBQU0sR0FBc0MsRUFBRSxDQUFDO1FBQ3ZDLDBCQUFxQixHQUFtQixJQUFJLENBQUM7O1lBUTNDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLHFCQUFxQjtRQUNsRixJQUFJLENBQUMscUJBQXFCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMs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QU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBZCxDQUFjLEVBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVPLHFDQUFXOzs7O0lBQW5CO1FBQ0ksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLHdCQUF3QixFQUFFLENBQUMsUUFBUSxDQUFDO0lBQ25FLENBQUM7Ozs7OztJQUVPLHdDQUFjOzs7OztJQUF0QixVQUF1QixFQUFFO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBWCxDQUFXLEVBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMzRDtJQUNMLENBQUM7O2dCQTNhSixVQUFVOzs7O2dCQVBGLGNBQWM7Z0JBRkYsUUFBUTs7SUFxYjdCLHNCQUFDO0NBQUEsQUE1YUQsSUE0YUM7U0EzYVksZUFBZTs7O0lBQ3hCLGtDQUFtQjs7SUFDbkIsb0NBQWU7O0lBQ2YsaUNBQStDOzs7OztJQUMvQyxnREFBcUQ7Ozs7O0lBRXJELHlDQUF1Qjs7Ozs7SUFDdkIsaUNBQXVCOzs7OztJQUV2Qix3Q0FBcUM7Ozs7O0lBRXpCLHlDQUFzQzs7Ozs7SUFBRSxtQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xNVxyXG4gKiBARGF0ZTogMjAxOS0wNC0wMiAxMTo0ODowOFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTI2IDE2OjM4OjM0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSwgQnNNb2RhbFJlZiwgRGlhbG9nQnV0dG9uIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyQ29uZmlnLCBNZXNzYWdlckRlZmF1bHRDb25maWcsIE1FU1NBR0VSX0RFRkFVTFRfQ09ORklHIH0gZnJvbSAnLi9tZXNzYWdlci5jb25maWcnO1xyXG5pbXBvcnQgeyBNZXNzYWdlckNvbXBvbmVudCB9IGZyb20gJy4vbWVzc2FnZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgdW5lc2NhcGVJZGVudGlmaWVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VyU2VydmljZSB7XHJcbiAgICB2ZXJzaW9uID0gJzAuMC4xNSc7XHJcbiAgICBjdXJyZW50SWQgPSAtMTtcclxuICAgIG1vZGFsczogeyBpZDogbnVtYmVyOyByZWY6IEJzTW9kYWxSZWYgfVtdID0gW107XHJcbiAgICBwcml2YXRlIGRlZmF1bHRNZXNzYWdlckNvbmZpZzogTWVzc2FnZXJDb25maWcgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgY29uZmlybVN1YmplY3Q7XHJcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lO1xyXG5cclxuICAgIHByaXZhdGUgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJzTW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmluamVjdG9yLmdldChNRVNTQUdFUl9ERUZBVUxUX0NPTkZJRykgfHwgTWVzc2FnZXJEZWZhdWx0Q29uZmlnO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdE1lc3NhZ2VyQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgTWVzc2FnZXJEZWZhdWx0Q29uZmlnLCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMubmdab25lID0gdGhpcy5pbmplY3Rvci5nZXQoTmdab25lKTtcclxuICAgICAgICB0aGlzLmxvY2FsZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGVTZXJ2aWNlKTtcclxuICAgIH1cclxuICAgIGdldCBva1RleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnbWVzc2FnZXIub2snKTtcclxuICAgIH1cclxuICAgIGdldCBjYW5jZWxUZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ21lc3NhZ2VyLmNhbmNlbCcpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHllc1RleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnbWVzc2FnZXIueWVzJyk7XHJcbiAgICB9XHJcbiAgICBnZXQgbm9UZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ21lc3NhZ2VyLm5vJyk7XHJcbiAgICB9XHJcbiAgICBnZXQgdGl0bGVUZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ21lc3NhZ2VyLnRpdGxlJyk7XHJcbiAgICB9XHJcbiAgICBnZXQgZXJyb3JUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdtZXNzYWdlci5lcnJvclRpdGxlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZXNjYXBlSHRtbChzdHIpIHtcclxuICAgICAgICBpZiAoc3RyID09PSBudWxsIHx8IHN0ciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0clxyXG4gICAgICAgICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXCIvZywgJyZxdW90OycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCcvZywgJyYjMzk7JylcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnJiN4MkY7Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmL7npLrkv6Hmga/mj5DnpLrmoYZcclxuICAgICAqIEBwYXJhbSBtc2d0eXBlIOa2iOaBr+exu+WIq1xyXG4gICAgICogQHBhcmFtIG1lc3NhZ2Ug5o+Q56S65raI5oGv5LiAXHJcbiAgICAgKiBAcGFyYW0gb3B0cyDlj4LmlbAg5o+Q5L6b5bGe5oCnIGZpdENvbnRlbnQ6dHJ1ZeaUr+aMgeiHquWKqOmAguW6lOWuveW6plxyXG4gICAgICogQHBhcmFtIHN1Ym1zZyDmj5DnpLrmtojmga/kuoznuqdcclxuICAgICAqL1xyXG4gICAgc2hvdyhtc2d0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgb3B0cz86IHt9LCBzdWJtc2cgPSAnJykge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50IGFzIGFueSkuYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2RhbEhlaWdodCA9IDE4MDtcclxuICAgICAgICBsZXQgZGVmYXVsdE9wdHMgPSB7XHJcbiAgICAgICAgICAgIHNhZmVIdG1sOiB0cnVlLFxyXG4gICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZVRleHQsXHJcbiAgICAgICAgICAgIHdpZHRoOiAzOTAsXHJcbiAgICAgICAgICAgIGhlaWdodDogbW9kYWxIZWlnaHQsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgIG9rSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjbGFzczogJ21vZGFsLW1lc3NhZ2UgJyArIChtc2d0eXBlID8gJ21vZGFsLW1lc3NhZ2UtdHlwZS0nICsgbXNndHlwZSA6ICcnKSxcclxuICAgICAgICAgICAgc2hvd0hlYWRlcjogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBkZWZhdWx0T3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdE1lc3NhZ2VyQ29uZmlnLCBkZWZhdWx0T3B0cyk7XHJcbiAgICAgICAgbGV0IGV4dGVuZE9wdHMgPSB7fTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChtc2d0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Byb21wdCc6XHJcbiAgICAgICAgICAgICAgICAvLyDlvLnlh7rlr7nor53nsbvlnotcclxuICAgICAgICAgICAgICAgIGV4dGVuZE9wdHMgPSB7IHNob3dIZWFkZXI6IHRydWUsIG1vZGFsSGVpZ2h0OiAyNjAgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XHJcbiAgICAgICAgICAgICAgICAvLyDplJnor69cclxuICAgICAgICAgICAgICAgIGV4dGVuZE9wdHMgPSB7IHRpdGxlOiB0aGlzLmVycm9yVGl0bGUsIHdpZHRoOiA0NDYsIHNob3dIZWFkZXI6IHRydWUsIHNob3dNYXhCdXR0b246IHRydWUsIGZpdENvbnRlbnQ6IHRydWUgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdleGNlcHRpb24nOlxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kT3B0cyA9IHsgc2FmZUh0bWw6IGZhbHNlLCB0aXRsZTogdGhpcy5lcnJvclRpdGxlLCB3aWR0aDogNDQ2LCBzaG93SGVhZGVyOiB0cnVlLCBmaXRDb250ZW50OiB0cnVlIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIC8vIOm7mOiupOWFtuS7llxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kT3B0cyA9IHsgd2lkdGg6IHN1Ym1zZyA/IDQ0NiA6IDM5MCwgZml0Q29udGVudDogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRzLCBleHRlbmRPcHRzKTtcclxuICAgICAgICBpZiAob3B0cykge1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRzLCBvcHRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChtZXNzYWdlICYmIGRlZmF1bHRPcHRzLnNhZmVIdG1sKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0aGlzLmVzY2FwZUh0bWwobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRzLmluaXRpYWxTdGF0ZSwge1xyXG4gICAgICAgICAgICB0eXBlOiBtc2d0eXBlLFxyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICBtc2c6IHN1Ym1zZyxcclxuICAgICAgICAgICAgZXhjZXB0aW9uOiBvcHRzICYmIG9wdHNbJ2V4Y2VwdGlvbiddID8gb3B0c1snZXhjZXB0aW9uJ10gOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93TGluZXM6IG9wdHMgJiYgb3B0c1snc2hvd0xpbmVzJ10gPyBvcHRzWydzaG93TGluZXMnXSA6IDNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGRlZmF1bHRPcHRzWydidXR0b25zJ10gJiYgZGVmYXVsdE9wdHNbJ2J1dHRvbnMnXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKCFkZWZhdWx0T3B0cy5pbml0aWFsU3RhdGVbJ2J1dHRvbnMnXSB8fCAhZGVmYXVsdE9wdHMuaW5pdGlhbFN0YXRlWydidXR0b25zJ10ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0T3B0cy5pbml0aWFsU3RhdGVbJ2J1dHRvbnMnXSA9IGRlZmF1bHRPcHRzWydidXR0b25zJ107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgX21vZGFsID0gdGhpcy5ic01vZGFsU2VydmljZS5zaG93KE1lc3NhZ2VyQ29tcG9uZW50LCBkZWZhdWx0T3B0cyk7XHJcbiAgICAgICAgLy8gX21vZGFsLmNvbnRlbnQuYnV0dG9ucyA9IGRlZmF1bHRPcHRzWydidXR0b25zJ10gfHwgW107XHJcbiAgICAgICAgdGhpcy5jb25maXJtU3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcbiAgICAgICAgaWYgKHRoaXMubW9kYWxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kYWxDb250YWluZXJDb21wb25lbnQgPSBfbW9kYWwuZGlhbG9nO1xyXG4gICAgICAgICAgICBtb2RhbENvbnRhaW5lckNvbXBvbmVudC5pbnN0YW5jZS5pc1Nob3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgbW9kYWxDb250YWluZXJDb21wb25lbnQuaW5zdGFuY2UubW92ZVRvKFxyXG4gICAgICAgICAgICAgICAgMTUgKiB0aGlzLm1vZGFscy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAxNSAqIHRoaXMubW9kYWxzLmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDnrKwx5Liq5oyJ6ZKu6I635Y+W54Sm54K5XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnRucyA9IF9tb2RhbC5kaWFsb2cubG9jYXRpb24ubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kYWwtZm9vdGVyIGJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ0bnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRucy5pdGVtKDApWydmb2N1cyddKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1zZ01ncihfbW9kYWwpO1xyXG4gICAgICAgIHJldHVybiBfbW9kYWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtc2dNZ3IocmVmOiBCc01vZGFsUmVmKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmJzTW9kYWxTZXJ2aWNlLmdldE1vZGFsc0NvdW50KCkgKyAxMDAwO1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGFscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RhbHMucHVzaCh7IGlkLCByZWYgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdldE1vZGFsQnlJZChpZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kYWxzLnB1c2goeyBpZCwgcmVmIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRNb2RhbEJ5SWQoaWQpLnJlZiA9IHJlZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY21wID0gdGhpcy5nZXRNb2RhbENtcCgpO1xyXG5cclxuICAgICAgICBjbXAuY2xvc2VkLnN1YnNjcmliZSgobGV2ZWw6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU1lc3NhZ2VyKGlkKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maXJtU3ViamVjdC51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRJZCA9IGlkO1xyXG4gICAgfVxyXG5cclxuICAgIGluZm8obWVzc2FnZTogc3RyaW5nLCBjYWxsYmFjaz86ICgpID0+IHZvaWQsIG1zZz86IHN0cmluZywgZml0Q29udGVudCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCBpbmZvRGxnID0gdGhpcy5zaG93KCdpbmZvJywgbWVzc2FnZSwge1xyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy5va1RleHQsXHJcbiAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm9EbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpdENvbnRlbnRcclxuICAgICAgICB9LCBtc2cpO1xyXG4gICAgICAgIHJldHVybiBpbmZvRGxnO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXN0aW9uKG1lc3NhZ2U6IHN0cmluZywgb2tDYWxsYmFjazogKCkgPT4gdm9pZCwgY2FuY2VsQ2FsbGJhY2s/OiAoKSA9PiB2b2lkLCBtc2c/OiBzdHJpbmcsIGZpdENvbnRlbnQgPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgcXVlc3Rpb25EbGcgPSB0aGlzLnNob3coJ3F1ZXN0aW9uJywgbWVzc2FnZSwge1xyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy55ZXNUZXh0LFxyXG4gICAgICAgICAgICAgICAgb2tIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbkRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChva0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsVGV4dDogdGhpcy5ub1RleHQsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbkRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5jZWxDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZml0Q29udGVudFxyXG4gICAgICAgIH0sIG1zZyk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9uRGxnO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXN0aW9uMihtZXNzYWdlcjogc3RyaW5nLCBidG5zOiBEaWFsb2dCdXR0b25bXSwgbXNnPzogc3RyaW5nLCBmaXRDb250ZW50ID0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNob3coJ3F1ZXN0aW9uJywgbWVzc2FnZXIsIHtcclxuICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zOiBidG5zXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpdENvbnRlbnRcclxuICAgICAgICB9LCBtc2cpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAyMDIw5bm0M+aciDfml6Xlm6DkuLp0ZXh0YXJlYemrmOW6puWcqOS4jeWQjOa1j+iniOWZqOS4i+S4jeS4gOagt++8jOWbuuWumumrmOW6puWPr+iDveS8muWHuueOsOa7muWKqOadoVxyXG4gICAgICogQHBhcmFtIHRpdGxlIOagh+mimFxyXG4gICAgICogQHBhcmFtIG1zZyDkv6Hmga9cclxuICAgICAqIEBwYXJhbSBmaXRDb250ZW50IOiHqumAguW6lOWGheWuuVxyXG4gICAgICovXHJcbiAgICBwcm9tcHQodGl0bGU6IHN0cmluZywgbXNnPzogc3RyaW5nLCBmaXRDb250ZW50ID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHByb21wdFN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgICAgIGNvbnN0IGRsZyA9IHRoaXMuc2hvdygncHJvbXB0JywgbXNnLCB7XHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy5va1RleHQsXHJcbiAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1jID0gZGxnLmNvbnRlbnQgYXMgTWVzc2FnZXJDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0U3ViamVjdC5uZXh0KG1jLnByb21wdFRleHQubmF0aXZlRWxlbWVudC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsVGV4dDogdGhpcy5jYW5jZWxUZXh0LFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0U3ViamVjdC5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZml0Q29udGVudCxcclxuICAgICAgICAgICAgY2xvc2VkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9tcHRTdWJqZWN0LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBtc2cpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvbXB0U3ViamVjdDtcclxuICAgIH1cclxuXHJcbiAgICBwcm9tcHQyKHRpdGxlOiBzdHJpbmcsIG1zZz86IHN0cmluZywgb3B0cz86IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHByb21wdFN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICAgICAgICBpZiAoIW9wdHMpIHtcclxuICAgICAgICAgICAgb3B0cyA9IHtcclxuICAgICAgICAgICAgICAgIHNob3dPa0J1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNob3dDbG9zZUJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNob3dGb250U2l6ZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMTgsXHJcbiAgICAgICAgICAgICAgICByZWFkb25seTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzYXZlU2l6ZTogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IF9kaWFsb2dPcHRzID0ge1xyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93T2tCdXR0b246IG9wdHMuc2hvd09rQnV0dG9uID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5zaG93T2tCdXR0b24sXHJcbiAgICAgICAgICAgICAgICBzaG93Q2xvc2VCdXR0b246IG9wdHMuc2hvd0Nsb3NlQnV0dG9uID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5zaG93Q2xvc2VCdXR0b24sXHJcbiAgICAgICAgICAgICAgICBva1RleHQ6IHRoaXMub2tUZXh0LFxyXG4gICAgICAgICAgICAgICAgb2tIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYyA9IGRsZy5jb250ZW50IGFzIE1lc3NhZ2VyQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QubmV4dChtYy5wcm9tcHRUZXh0Lm5hdGl2ZUVsZW1lbnQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ6IHRoaXMuY2FuY2VsVGV4dCxcclxuICAgICAgICAgICAgICAgIGNhbmNlbEhhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2hvd0ZvbnRTaXplOiBvcHRzLnNob3dGb250U2l6ZSxcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBvcHRzLmZvbnRTaXplIHx8IDE4LFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlV29yZENvdW50OiAhIW9wdHMuZW5hYmxlV29yZENvdW50LFxyXG4gICAgICAgICAgICAgICAgY291bnRUeXBlOiBvcHRzLmNvdW50VHlwZSB8fCAnbGVuZ3RoJyxcclxuICAgICAgICAgICAgICAgIG1heExlbmd0aDogb3B0cy5tYXhMZW5ndGhcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZml0Q29udGVudDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNob3dNYXhCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY2xhc3M6ICcnLFxyXG4gICAgICAgICAgICBjbG9zZWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHByb21wdFN1YmplY3QudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3BlbmVkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0YXJlYUVsZSA9IGRsZy5jb250ZW50LnByb21wdFRleHQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYUVsZS5jbG9zZXN0KCdzZWN0aW9uJykuc3R5bGUucGFkZGluZyA9ICcxNXB4JztcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYUVsZS5zdHlsZS5yZXNpemUgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWFFbGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZWFkb25seSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYUVsZS5yZWFkT25seSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJlZm9yZUNsb3NlOiAobW9kYWxSZWY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuc2F2ZVNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0geyBmb250U2l6ZTogZGxnLmNvbnRlbnQuZm9udFNpemUsIHdpZHRoOiBtb2RhbFJlZi5jb25maWcud2lkdGgsIGhlaWdodDogbW9kYWxSZWYuY29uZmlnLmhlaWdodCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVRleHRBcmVhU2l6ZUluZm8oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBkaWFsb2dPcHRzID0gX2RpYWxvZ09wdHM7XHJcbiAgICAgICAgaWYgKG9wdHMpIHtcclxuICAgICAgICAgICAgZGlhbG9nT3B0cyA9IE9iamVjdC5hc3NpZ24oZGlhbG9nT3B0cywgb3B0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkbGcgPSB0aGlzLnNob3coJ3Byb21wdCcsIG1zZywgZGlhbG9nT3B0cywgbXNnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb21wdFN1YmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0S2V5U3RyaW5nKCkge1xyXG4gICAgICAgIC8vIOS4gOWPsOe7iOerr+WFseeUqOS4gOS4qumFjee9rlxyXG4gICAgICAgIC8vIOS/neeVmeacgOWQjuS4gOasoeeahOiuvue9ru+8jFxyXG4gICAgICAgIC8vIOS/neWtmOeql+WPo+Wkp+Wwj++8jOWtl+S9k+Wkp+Wwj1xyXG4gICAgICAgIHJldHVybiAnSUdJWC1GQVJSSVMtVUktVEVYVEFSRUEtWk9PTS1TRVRUSU5HUyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzYXZlVGV4dEFyZWFTaXplSW5mbyhkYXRhKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXlTdHJpbmcoKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbmZpcm0obWVzc2FnZTogc3RyaW5nLCBtc2c/OiBzdHJpbmcsIGZpdENvbnRlbnQgPSB0cnVlKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCBjb25maXJtU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICAgICAgY29uc3QgY29uZmlybURsZyA9IHRoaXMuc2hvdygncXVlc3Rpb24nLCBtZXNzYWdlLCB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgb2tUZXh0OiB0aGlzLm9rVGV4dCxcclxuICAgICAgICAgICAgICAgIG9rSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybURsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1TdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsVGV4dDogdGhpcy5jYW5jZWxUZXh0LFxyXG4gICAgICAgICAgICAgICAgY2FuY2VsSGFuZGxlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybURsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1TdWJqZWN0Lm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaXRDb250ZW50LFxyXG4gICAgICAgICAgICBjbG9zZWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1TdWJqZWN0LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBtc2cpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29uZmlybVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VjY2VzcyhtZXNzYWdlOiBzdHJpbmcsIG1zZz86IHN0cmluZywgZml0Q29udGVudCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCBzdWNjZXNzRGxnID0gdGhpcy5zaG93KCdzdWNjZXNzJywgbWVzc2FnZSwge1xyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy5va1RleHQsXHJcbiAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NEbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZml0Q29udGVudFxyXG4gICAgICAgIH0sIG1zZyk7XHJcblxyXG4gICAgICAgIHJldHVybiBzdWNjZXNzRGxnO1xyXG4gICAgfVxyXG5cclxuICAgIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgbXNnPzogc3RyaW5nLCBmaXRDb250ZW50ID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRGxnID0gdGhpcy5zaG93KCdlcnJvcicsIG1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgICAgICAgICBva1RleHQ6IHRoaXMub2tUZXh0LFxyXG4gICAgICAgICAgICAgICAgb2tIYW5kbGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvckRsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaXRDb250ZW50XHJcbiAgICAgICAgfSwgbXNnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVycm9yRGxnO1xyXG4gICAgfVxyXG5cclxuICAgIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nLCBtc2c/OiBzdHJpbmcsIGZpdENvbnRlbnQgPSB0cnVlLCBjYWxsYmFjazogKCkgPT4gdm9pZCA9IG51bGwpIHtcclxuICAgICAgICBjb25zdCB3YXJuaW5nRGxnID0gdGhpcy5zaG93KCd3YXJuaW5nJywgbWVzc2FnZSwge1xyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIG9rVGV4dDogdGhpcy5va1RleHQsXHJcbiAgICAgICAgICAgICAgICBva0hhbmRsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdEbGcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpdENvbnRlbnRcclxuICAgICAgICB9LCBtc2cpO1xyXG4gICAgICAgIHJldHVybiB3YXJuaW5nRGxnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGNsb3NlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGFscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgbXNnYm94ID0gdGhpcy5nZXRNb2RhbEJ5SWQodGhpcy5jdXJyZW50SWQpO1xyXG4gICAgICAgICAgICBpZiAobXNnYm94KSB7XHJcbiAgICAgICAgICAgICAgICBtc2dib3gucmVmLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRNb2RhbEJ5SWQoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZGFscy5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TW9kYWxDbXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnNNb2RhbFNlcnZpY2UuZ2V0Q3VycmVudE1vZGFsQ29udGFpbmVyKCkuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW1vdmVNZXNzYWdlcihpZCkge1xyXG4gICAgICAgIHRoaXMubW9kYWxzID0gdGhpcy5tb2RhbHMuZmlsdGVyKG4gPT4gbi5pZCAhPT0gaWQpO1xyXG4gICAgICAgIGlmICghdGhpcy5tb2RhbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudElkID0gLTE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SWQgPSB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXS5pZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19