/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, NgZone, Renderer2, HostListener } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { TR_PREFIX } from '../../types/constant';
export class DatagridRowDblClickDirective {
    // private documentRowDblclickEvent: any = null;
    // private _mouseenter = null;
    // private _mouseleave = null;
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} render
     * @param {?} dg
     */
    constructor(el, injector, ngZone, render, dg) {
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.render = render;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // if (this.ngZone) {
        //     this.ngZone.runOutsideAngular( () => {
        //         // this.render.listen(this.el.nativeElement, 'mouseenter', this.onMouseEnter.bind(this));
        //         // this.render.listen(this.el.nativeElement, 'mouseleave', this.onMouseLeave.bind(this));
        //         this._mouseenter = Utils.on(this.el.nativeElement, 'mouseenter', this.onMouseEnter.bind(this), { target: '.f-datagrid-body-row', options: { capture: true }});
        //         this._mouseleave = Utils.on(this.el.nativeElement, 'mouseleave', this.onMouseLeave.bind(this), { target: '.f-datagrid-body-row', options: { capture: true }});
        //     });
        // }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // if (this._mouseenter) {
        //     this._mouseenter();
        // }
        // if (this._mouseleave) {
        //     this._mouseleave();
        // }
    }
    // onMouseEnter($event: MouseEvent) {
    //     this.bindRowDblClickEvent();
    // }
    // onMouseLeave($event: MouseEvent) {
    //     this.unbindRowDblclickEvent();
    // }
    // private bindRowDblClickEvent() {
    //     if (!this.documentRowDblclickEvent) {
    //         this.unbindRowDblclickEvent();
    //         this.ngZone.runOutsideAngular(() => {
    //             this.documentRowDblclickEvent = this.render.listen(this.el.nativeElement, 'dblclick', this.dblclickRowEvent.bind(this));
    //         });
    //     }
    // }
    // private unbindRowDblclickEvent() {
    //     if (this.documentRowDblclickEvent) {
    //         this.documentRowDblclickEvent();
    //         this.documentRowDblclickEvent = null;
    //     }
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    dblclickRowEvent(event) {
        /** @type {?} */
        const tr = event.target.closest('tr');
        /** @type {?} */
        const rowid = tr.id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '');
        /** @type {?} */
        const rowIndex = tr.getAttribute('index');
        /** @type {?} */
        const rowData = this.dg.dfs.findRow(rowid);
        if (this.dg.disableRow) {
            if (this.dg.disableRow(rowData.data, rowData.index)) {
                event.stopPropagation();
                return false;
            }
        }
        if (this.dg.editable) {
            if (this.dg.editMode === 'row' && this.dg.clickToEdit) {
                this.dg.editRow(rowid);
            }
            else {
                this.dg.isSingleClick = false;
                this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
            }
        }
        else {
            this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
        }
        event.stopPropagation();
        event.preventDefault();
    }
}
DatagridRowDblClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[row-dblclick]',
            },] }
];
/** @nocollapse */
DatagridRowDblClickDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: DatagridComponent }
];
DatagridRowDblClickDirective.propDecorators = {
    dblclickRowEvent: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.render;
    /** @type {?} */
    DatagridRowDblClickDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRibGNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ib2R5L2RhdGFncmlkLXJvdy1kYmxjbGljay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFhLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNakQsTUFBTSxPQUFPLDRCQUE0Qjs7Ozs7Ozs7Ozs7SUFLckMsWUFBb0IsRUFBYyxFQUFVLFFBQWtCLEVBQVUsTUFBYyxFQUFVLE1BQWlCLEVBQzlGLEVBQXFCO1FBRHBCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDOUYsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFFeEMsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixxQkFBcUI7UUFDckIsNkNBQTZDO1FBQzdDLG9HQUFvRztRQUNwRyxvR0FBb0c7UUFDcEcseUtBQXlLO1FBQ3pLLHlLQUF5SztRQUN6SyxVQUFVO1FBQ1YsSUFBSTtJQUNSLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsMEJBQTBCO1FBQzFCLDBCQUEwQjtRQUMxQixJQUFJO1FBRUosMEJBQTBCO1FBQzFCLDBCQUEwQjtRQUMxQixJQUFJO0lBQ1IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTZCRCxnQkFBZ0IsQ0FBQyxLQUFVOztjQUVqQixFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDOztjQUUvQixLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7O2NBQ3pGLFFBQVEsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7Y0FDbkMsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFMUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUNwQixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNqRCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFO2dCQUNuRCxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7YUFDcEc7U0FDSjthQUFNO1lBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNyRztRQUVELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7O1lBekZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7O1lBUG1CLFVBQVU7WUFBRSxRQUFRO1lBQVUsTUFBTTtZQUFFLFNBQVM7WUFDMUQsaUJBQWlCOzs7K0JBZ0VyQixZQUFZLFNBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0lBcER4QiwwQ0FBc0I7Ozs7O0lBQUUsZ0RBQTBCOzs7OztJQUFFLDhDQUFzQjs7Ozs7SUFBRSw4Q0FBeUI7O0lBQ3JHLDBDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uSW5pdCwgTmdab25lLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVFJfUFJFRklYIH0gZnJvbSAnLi4vLi4vdHlwZXMvY29uc3RhbnQnO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcm93LWRibGNsaWNrXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFJvd0RibENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIC8vIHByaXZhdGUgZG9jdW1lbnRSb3dEYmxjbGlja0V2ZW50OiBhbnkgPSBudWxsO1xyXG4gICAgLy8gcHJpdmF0ZSBfbW91c2VlbnRlciA9IG51bGw7XHJcbiAgICAvLyBwcml2YXRlIF9tb3VzZWxlYXZlID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIG5nWm9uZTogTmdab25lLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIGRnOiBEYXRhZ3JpZENvbXBvbmVudCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICAvLyBpZiAodGhpcy5uZ1pvbmUpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoICgpID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMucmVuZGVyLmxpc3Rlbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyB0aGlzLnJlbmRlci5saXN0ZW4odGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5fbW91c2VlbnRlciA9IFV0aWxzLm9uKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ21vdXNlZW50ZXInLCB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpLCB7IHRhcmdldDogJy5mLWRhdGFncmlkLWJvZHktcm93Jywgb3B0aW9uczogeyBjYXB0dXJlOiB0cnVlIH19KTtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX21vdXNlbGVhdmUgPSBVdGlscy5vbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKSwgeyB0YXJnZXQ6ICcuZi1kYXRhZ3JpZC1ib2R5LXJvdycsIG9wdGlvbnM6IHsgY2FwdHVyZTogdHJ1ZSB9fSk7XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICAvLyBpZiAodGhpcy5fbW91c2VlbnRlcikge1xyXG4gICAgICAgIC8vICAgICB0aGlzLl9tb3VzZWVudGVyKCk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBpZiAodGhpcy5fbW91c2VsZWF2ZSkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLl9tb3VzZWxlYXZlKCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBvbk1vdXNlRW50ZXIoJGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAvLyAgICAgdGhpcy5iaW5kUm93RGJsQ2xpY2tFdmVudCgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIG9uTW91c2VMZWF2ZSgkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIC8vICAgICB0aGlzLnVuYmluZFJvd0RibGNsaWNrRXZlbnQoKTtcclxuICAgIC8vIH1cclxuXHJcblxyXG4gICAgLy8gcHJpdmF0ZSBiaW5kUm93RGJsQ2xpY2tFdmVudCgpIHtcclxuICAgIC8vICAgICBpZiAoIXRoaXMuZG9jdW1lbnRSb3dEYmxjbGlja0V2ZW50KSB7XHJcbiAgICAvLyAgICAgICAgIHRoaXMudW5iaW5kUm93RGJsY2xpY2tFdmVudCgpO1xyXG4gICAgLy8gICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Um93RGJsY2xpY2tFdmVudCA9IHRoaXMucmVuZGVyLmxpc3Rlbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdkYmxjbGljaycsIHRoaXMuZGJsY2xpY2tSb3dFdmVudC5iaW5kKHRoaXMpKTtcclxuICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHByaXZhdGUgdW5iaW5kUm93RGJsY2xpY2tFdmVudCgpIHtcclxuICAgIC8vICAgICBpZiAodGhpcy5kb2N1bWVudFJvd0RibGNsaWNrRXZlbnQpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5kb2N1bWVudFJvd0RibGNsaWNrRXZlbnQoKTtcclxuICAgIC8vICAgICAgICAgdGhpcy5kb2N1bWVudFJvd0RibGNsaWNrRXZlbnQgPSBudWxsO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdkYmxjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgICBkYmxjbGlja1Jvd0V2ZW50KGV2ZW50OiBhbnkpIHtcclxuXHJcbiAgICAgICAgY29uc3QgdHIgPSBldmVudC50YXJnZXQuY2xvc2VzdCgndHInKTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93aWQgPSB0ci5pZC5yZXBsYWNlKFRSX1BSRUZJWCwgJycpLnJlcGxhY2UoJ19maXhlZHJpZ2h0JywgJycpLnJlcGxhY2UoJ19maXhlZGxlZnQnLCAnJyk7XHJcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSB0ci5nZXRBdHRyaWJ1dGUoJ2luZGV4Jyk7XHJcbiAgICAgICAgY29uc3Qgcm93RGF0YSA9IHRoaXMuZGcuZGZzLmZpbmRSb3cocm93aWQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kZy5kaXNhYmxlUm93KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRnLmRpc2FibGVSb3cocm93RGF0YS5kYXRhLCByb3dEYXRhLmluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRnLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRnLmVkaXRNb2RlID09PSAncm93JyAmJiB0aGlzLmRnLmNsaWNrVG9FZGl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLmVkaXRSb3cocm93aWQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5pc1NpbmdsZUNsaWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLmRibGNsaWNrUm93LmVtaXQoeyByb3dEYXRhLCBpZDogcm93aWQsIGluZGV4OiByb3dJbmRleCwgZ3JpZDogdGhpcy5kZywgZGJsY2xpY2s6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRnLmRibGNsaWNrUm93LmVtaXQoeyByb3dEYXRhLCBpZDogcm93aWQsIGluZGV4OiByb3dJbmRleCwgZ3JpZDogdGhpcy5kZywgIGRibGNsaWNrOiB0cnVlIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufVxyXG4iXX0=