/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:00:48
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { LookupDefaultOptions } from '../editor-default-options';
import { LookupGridComponent } from '@farris/ui-lookup';
import { RuntimeStateService } from '@farris/ui-common';
export class DatagridLookupComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} rts
     * @param {?} injector
     */
    constructor(render, el, rts, injector) {
        super(render, el, injector);
        this.rts = rts;
        this.stopPropagation = false;
        this.extInfoFormatter = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.options.extInfoFormatter) {
                return this.options.extInfoFormatter({ bindingData: this.dr.rowData, instance: e.instance });
            }
            return '';
        });
        this.rts.state$.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            if (state && state.form && state.form.lookup) {
                this.pending = state.form.lookup.pending;
                this.dg.pending = this.pending;
            }
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set controlId(id) {
        this.instance.controlId = id;
        if (this.instance.uri) {
            this.instance.controlId += '_' + this.instance.uri;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, LookupDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.instance.changeDetector.detectChanges();
        this.inputElement = this.instance.inputGroup.textbox.nativeElement;
        super.ngAfterViewInit();
        if (this.options.loader) {
            this.instance['http'] = { getData: this.options.loader };
        }
        this.instance['host'] = this.dg;
    }
    /**
     * @return {?}
     */
    onDialogClosed() {
        // this.lookup.changeDetector.detectChanges();
    }
    /**
     * @return {?}
     */
    onDialogOpen() {
        this.instance.changeDetector.detectChanges();
    }
    /**
     * @return {?}
     */
    onLoadSuccess() {
        this.instance.changeDetector.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        // const rowData = this.instance.selectionMgr.getBindingData();
        // this.instance['defaultMapping'].lookupFieldMap(null, this.instance.mapFields, rowData);
        this.instance.changeDetector.detectChanges();
        if (this.options.clear) {
            this.options.clear();
        }
    }
}
DatagridLookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-lookup',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <farris-lookup-grid #lookup style="width: 100%"
                id="{{ controlId }}"
                [formControlName]="column.field"
                [uri]="options.uri"
                [helpId]="options.helpId"
                [displayType]="options.displayType"
                [singleSelect]="options.singleSelect"
                [idField]="options.idField"
                [pageSize]="options.pageSize || 20"
                [pageIndex]="options.pageSize || 1"
                [pagination]="options.pageination"
                [textField]="options.textField"
                [valueField]="options.valueField"
                [title]="options.title"
                [useFavorite]="options.useFavorite"
                [isRecordSize]="options.isRecordSize"
                [useTip]="options.useTip"
                [editable]="options.editable"
                [readonly]="options.readonly"
                [dialogWidth]="options.dialogWidth"
                [dialogHeight]="options.dialogHeight"
                [showMaxButton]="options.showMaxButton"
                [showCloseButton]="options.showCloseButton"
                [resizable]="options.resizable"
                [buttonAlign]="options.buttonAlign"
                [enableClear]="options.enableClear"
                [searchOnServer]="options.searchOnServer"
                [nosearch]="options.nosearch"
                [maxLength]="options.maxLength"
                [mappingFn]="options.mappingFn"
                [mapFields]="options.mapFields"
                [context]="options.context"
                [expandLevel]="options.expandLevel"
                [dictPicking]="options.dictPicking"
                [dictPicked]="options.dictPicked"
                [enableFullTree]="options.enableFullTree"
                [loadTreeDataType]="options.loadTreeDataType"
                [enableCascade]="options.enableCascade"
                [cascadeStatus]="options.cascadeStatus"
                [useExtendInfo]="options.useExtendInfo"
                [extInfoFields]="options.extInfoFields"
                [extInfoFormatter]="options.extInfoFormatter"
                [textAlign]="options.textAlign"
                [loadDataWhenOpen]="options.loadDataWhenOpen"
                [selectFirstInNav]="options.selectFirstInNav"
                [customNavFormatter]="options.customNavFormatter"
                [customFormatter]="options.customFormatter"
                [treeInfo]="options?.treeInfo"
                (dialogClosed)="onDialogClosed()"
                (dialogOpened)="onDialogOpen()"
                (clear)="onClear($event)"
                (loadSuccess)="onLoadSuccess()"
            ></farris-lookup-grid>
        </datagrid-tooltip>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridLookupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: RuntimeStateService },
    { type: Injector }
];
DatagridLookupComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['lookup',] }]
};
if (false) {
    /** @type {?} */
    DatagridLookupComponent.prototype.instance;
    /** @type {?} */
    DatagridLookupComponent.prototype.stopPropagation;
    /** @type {?} */
    DatagridLookupComponent.prototype.extInfoFormatter;
    /**
     * @type {?}
     * @private
     */
    DatagridLookupComponent.prototype.rts;
}
//# sourceMappingURL=data:application/json;base64,