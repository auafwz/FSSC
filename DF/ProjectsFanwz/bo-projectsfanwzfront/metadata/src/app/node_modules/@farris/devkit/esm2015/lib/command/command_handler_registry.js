/**
 * 命令处理注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { MetadataUtil } from '../metadata/index';
import { NG_COMMAND_HANDLER } from './decorators';
import { COMMAND_HANDLERS_TOKEN } from './command_handler';
/**
 * 命令处理注册器
 */
class CommandHandlerRegistry {
    /**
     * 构造函数
     * @param handlers 命令处理实例数组
     */
    constructor(handlers) {
        const self = this;
        this.handlerMap = new Map();
        if (handlers) {
            handlers.forEach((handler) => {
                self.regist(handler);
            });
        }
    }
    /**
     * 添加命令处理
     * @param  commandName    命令名称
     * @param  commandHandler 命令处理实例
     */
    set(commandName, commandHandler) {
        if (this.handlerMap.has(commandName)) {
            throw new Error(commandName + '对应的CommandHandler已经存在');
        }
        this.handlerMap.set(commandName, commandHandler);
    }
    /**
     * 获取命令处理
     * @param   commandName 命令名称
     * @returns 命令处理实例
     */
    get(commandName) {
        if (this.handlerMap.has(commandName) === false) {
            throw new Error('找不到' + commandName + '对应的CommandHandler');
        }
        return this.handlerMap.get(commandName);
    }
    /**
     * 注册命令处理
     * @param handlers 命令处理实例
     */
    regist(commandHandler) {
        let commandName = commandHandler.commandName;
        if (!commandName) {
            // 根据metadata获取对应的Command名称
            const handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);
            if (!handlerMetadata) {
                throw new Error('CommandHandler必须指定要处理的命令名称');
            }
            commandName = handlerMetadata.commandName;
        }
        this.set(commandName, commandHandler);
    }
}
CommandHandlerRegistry.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandHandlerRegistry.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [COMMAND_HANDLERS_TOKEN,] }] }
];
export { CommandHandlerRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2hhbmRsZXJfcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQW9CLE1BQU0sY0FBYyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQztBQUczRTs7R0FFRztBQUNILE1BQ00sc0JBQXNCO0lBTzFCOzs7T0FHRztJQUNILFlBQXVELFFBQTBCO1FBQy9FLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO1FBQ3BELElBQUksUUFBUSxFQUFFO1lBQ1osUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQXVCLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxHQUFHLENBQUMsV0FBbUIsRUFBRSxjQUE4QjtRQUM1RCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxHQUFHLHVCQUF1QixDQUFDLENBQUM7U0FDeEQ7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxHQUFHLENBQUMsV0FBbUI7UUFDNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsV0FBVyxHQUFHLG1CQUFtQixDQUFDLENBQUM7U0FDNUQ7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsY0FBOEI7UUFDMUMsSUFBSSxXQUFXLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLDJCQUEyQjtZQUMzQixNQUFNLGVBQWUsR0FDbkIsWUFBWSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUN0RixJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7YUFDL0M7WUFDRCxXQUFXLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQztTQUMzQztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OztZQTlERixVQUFVOzs7O3dDQVlJLFFBQVEsWUFBSSxNQUFNLFNBQUMsc0JBQXNCOztBQXNEeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5ZG95Luk5aSE55CG5rOo5YaM5Zmo55u45YWz5a6a5LmJXHJcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi9tZXRhZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IE5HX0NPTU1BTkRfSEFORExFUiwgTmdDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vZGVjb3JhdG9ycyc7XHJcbmltcG9ydCB7IENPTU1BTkRfSEFORExFUlNfVE9LRU4sIENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXInO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDlkb3ku6TlpITnkIbms6jlhozlmahcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbW1hbmRIYW5kbGVyIE1hcFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaGFuZGxlck1hcDogTWFwPHN0cmluZywgQ29tbWFuZEhhbmRsZXI+O1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gaGFuZGxlcnMg5ZG95Luk5aSE55CG5a6e5L6L5pWw57uEXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChDT01NQU5EX0hBTkRMRVJTX1RPS0VOKWhhbmRsZXJzOiBDb21tYW5kSGFuZGxlcltdKSB7XHJcbiAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgIHRoaXMuaGFuZGxlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlcj4oKTtcclxuICAgIGlmIChoYW5kbGVycykge1xyXG4gICAgICBoYW5kbGVycy5mb3JFYWNoKChoYW5kbGVyOiBDb21tYW5kSGFuZGxlcikgPT4ge1xyXG4gICAgICAgIHNlbGYucmVnaXN0KGhhbmRsZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa3u+WKoOWRveS7pOWkhOeQhlxyXG4gICAqIEBwYXJhbSAgY29tbWFuZE5hbWUgICAg5ZG95Luk5ZCN56ewXHJcbiAgICogQHBhcmFtICBjb21tYW5kSGFuZGxlciDlkb3ku6TlpITnkIblrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgc2V0KGNvbW1hbmROYW1lOiBzdHJpbmcsIGNvbW1hbmRIYW5kbGVyOiBDb21tYW5kSGFuZGxlcikge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlck1hcC5oYXMoY29tbWFuZE5hbWUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihjb21tYW5kTmFtZSArICflr7nlupTnmoRDb21tYW5kSGFuZGxlcuW3sue7j+WtmOWcqCcpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYW5kbGVyTWFwLnNldChjb21tYW5kTmFtZSwgY29tbWFuZEhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5ZG95Luk5aSE55CGXHJcbiAgICogQHBhcmFtICAgY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXHJcbiAgICogQHJldHVybnMg5ZG95Luk5aSE55CG5a6e5L6LXHJcbiAgICovXHJcbiAgcHVibGljIGdldChjb21tYW5kTmFtZTogc3RyaW5nKTogQ29tbWFuZEhhbmRsZXIge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlck1hcC5oYXMoY29tbWFuZE5hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+aJvuS4jeWIsCcgKyBjb21tYW5kTmFtZSArICflr7nlupTnmoRDb21tYW5kSGFuZGxlcicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlck1hcC5nZXQoY29tbWFuZE5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YaM5ZG95Luk5aSE55CGXHJcbiAgICogQHBhcmFtIGhhbmRsZXJzIOWRveS7pOWkhOeQhuWunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdpc3QoY29tbWFuZEhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKSB7XHJcbiAgICBsZXQgY29tbWFuZE5hbWUgPSBjb21tYW5kSGFuZGxlci5jb21tYW5kTmFtZTtcclxuICAgIGlmICghY29tbWFuZE5hbWUpIHtcclxuICAgICAgLy8g5qC55o2ubWV0YWRhdGHojrflj5blr7nlupTnmoRDb21tYW5k5ZCN56ewXHJcbiAgICAgIGNvbnN0IGhhbmRsZXJNZXRhZGF0YTogTmdDb21tYW5kSGFuZGxlciA9XHJcbiAgICAgICAgTWV0YWRhdGFVdGlsLmdldENsYXNzTWV0YWRhdGFCeU5hbWUoY29tbWFuZEhhbmRsZXIuY29uc3RydWN0b3IsIE5HX0NPTU1BTkRfSEFORExFUik7XHJcbiAgICAgIGlmICghaGFuZGxlck1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21tYW5kSGFuZGxlcuW/hemhu+aMh+WumuimgeWkhOeQhueahOWRveS7pOWQjeensCcpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbW1hbmROYW1lID0gaGFuZGxlck1ldGFkYXRhLmNvbW1hbmROYW1lO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXQoY29tbWFuZE5hbWUsIGNvbW1hbmRIYW5kbGVyKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb21tYW5kSGFuZGxlclJlZ2lzdHJ5IH07XHJcbiJdfQ==