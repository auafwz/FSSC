/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-06-16 13:44:59
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-15 09:47:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { BehaviorSubject } from 'rxjs';
import { Injectable } from '@angular/core';
import { merge } from 'lodash-es';
import { map } from 'rxjs/operators';
import { CommonUtils } from './../common.utils';
import * as i0 from "@angular/core";
import * as i1 from "../common.utils";
/**
 * @record
 */
export function RuntimeState() { }
if (false) {
    /** @type {?|undefined} */
    RuntimeState.prototype.form;
    /** @type {?|undefined} */
    RuntimeState.prototype.model;
}
/** @type {?} */
const DefaultRuntimeState = {
    form: {},
    model: {}
};
export class RuntimeStateService {
    /**
     * @param {?} utils
     */
    constructor(utils) {
        this.utils = utils;
        this.stateSubject = new BehaviorSubject({});
        this.state$ = this.stateSubject.asObservable();
        this.form$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state.form)));
        this.lookupIsPending$ = this.form$.pipe(map((/**
         * @param {?} f
         * @return {?}
         */
        f => f.lookup.pending)));
        this._state = DefaultRuntimeState;
        this._formState = this._state.form;
        this._lookupState = this._formState.lookup;
    }
    /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    setValue(newVal) {
        if (newVal) {
            this._state = merge(this._state, newVal);
            this.stateSubject.next(this._state);
        }
    }
    /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    getValue(keyPath) {
        return this.utils.getValue(keyPath, this._state);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    setLookupInstance(el) {
        this.setValue({ form: { lookup: { instance: el } } });
    }
    /**
     * @param {?} newVal
     * @return {?}
     */
    updateFormState(newVal) {
        this.setValue({ form: newVal });
    }
    /**
     * @param {?} keyPath
     * @return {?}
     */
    getFormState(keyPath) {
        return this.getValue('form.' + keyPath);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    eventPath(evt) {
        /** @type {?} */
        const path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        const target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        const getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        (node, memo = undefined) => {
            memo = memo || [];
            /** @type {?} */
            const parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    }
}
RuntimeStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
RuntimeStateService.ctorParameters = () => [
    { type: CommonUtils }
];
/** @nocollapse */ RuntimeStateService.ngInjectableDef = i0.defineInjectable({ factory: function RuntimeStateService_Factory() { return new RuntimeStateService(i0.inject(i1.CommonUtils)); }, token: RuntimeStateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._state;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype.stateSubject;
    /** @type {?} */
    RuntimeStateService.prototype.state$;
    /** @type {?} */
    RuntimeStateService.prototype.form$;
    /** @type {?} */
    RuntimeStateService.prototype.lookupIsPending$;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._formState;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._lookupState;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype.utils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVudGltZS1zdGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1jb21tb24vIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9ydW50aW1lLXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7O0FBR2hELGtDQUdDOzs7SUFGRyw0QkFBNkI7O0lBQzdCLDZCQUE4Qjs7O01BRzVCLG1CQUFtQixHQUFpQjtJQUN0QyxJQUFJLEVBQUUsRUFBRTtJQUNSLEtBQUssRUFBRSxFQUFFO0NBQ1o7QUFNRCxNQUFNLE9BQU8sbUJBQW1COzs7O0lBZ0I1QixZQUFvQixLQUFrQjtRQUFsQixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBWjlCLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQWUsRUFBRSxDQUFDLENBQUM7UUFFN0QsV0FBTSxHQUE2QixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBFLFVBQUssR0FBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3hCLEdBQUc7Ozs7UUFBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBRTFELHFCQUFnQixHQUF3QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBRSxHQUFHOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxDQUFFLENBQUM7UUFNbEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDL0MsQ0FBQzs7Ozs7O0lBRU8sUUFBUSxDQUFDLE1BQThCO1FBQzNDLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkM7SUFDTCxDQUFDOzs7Ozs7SUFFTyxRQUFRLENBQUMsT0FBZTtRQUM1QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxFQUFPO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUMsRUFBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsTUFBNEI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLE9BQWU7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxHQUFROztjQUNSLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUk7O2NBQUUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNO1FBRXRGLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDbEU7UUFFRCxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7WUFDbkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25COztjQUVLLFVBQVU7Ozs7O1FBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLFNBQVMsRUFBRSxFQUFFO1lBQzFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDOztrQkFDWixVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVU7WUFFbEMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDYixPQUFPLElBQUksQ0FBQzthQUNmO2lCQUFNO2dCQUNILE9BQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7YUFDMUQ7UUFDTCxDQUFDLENBQUE7UUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7WUF2RUosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBaEJRLFdBQVc7Ozs7Ozs7O0lBbUJoQixxQ0FBNkI7Ozs7O0lBRTdCLDJDQUE2RDs7SUFFN0QscUNBQW9FOztJQUVwRSxvQ0FDMEQ7O0lBRTFELCtDQUFzRjs7Ozs7SUFFdEYseUNBQXdCOzs7OztJQUN4QiwyQ0FBMEI7Ozs7O0lBRWQsb0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wNi0xNiAxMzo0NDo1OVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0wOC0xNSAwOTo0NzozNFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHttZXJnZX0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJy4vLi4vY29tbW9uLnV0aWxzJztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJ1bnRpbWVTdGF0ZSB7XHJcbiAgICBmb3JtPzogeyBba2V5OiBzdHJpbmddOiBhbnl9O1xyXG4gICAgbW9kZWw/OiB7IFtrZXk6IHN0cmluZ106IGFueX07XHJcbn1cclxuXHJcbmNvbnN0IERlZmF1bHRSdW50aW1lU3RhdGU6IFJ1bnRpbWVTdGF0ZSA9IHtcclxuICAgIGZvcm06IHt9LFxyXG4gICAgbW9kZWw6IHt9XHJcbn1cclxuXHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVTdGF0ZVNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgX3N0YXRlOiBSdW50aW1lU3RhdGU7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0ZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJ1bnRpbWVTdGF0ZT4oe30pO1xyXG5cclxuICAgIHN0YXRlJDogT2JzZXJ2YWJsZTxSdW50aW1lU3RhdGU+ID0gdGhpcy5zdGF0ZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgZm9ybSQ6T2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5zdGF0ZSQucGlwZShcclxuICAgICAgICAgICAgICAgICAgICBtYXAoKHN0YXRlOiBSdW50aW1lU3RhdGUpID0+IHN0YXRlLmZvcm0pKTtcclxuXHJcbiAgICBsb29rdXBJc1BlbmRpbmckOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5mb3JtJC5waXBlKCBtYXAoZiA9PiBmLmxvb2t1cC5wZW5kaW5nKSApO1xyXG5cclxuICAgIHByaXZhdGUgX2Zvcm1TdGF0ZTogYW55O1xyXG4gICAgcHJpdmF0ZSBfbG9va3VwU3RhdGU6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHV0aWxzOiBDb21tb25VdGlscykge1xyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gRGVmYXVsdFJ1bnRpbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLl9mb3JtU3RhdGUgPSB0aGlzLl9zdGF0ZS5mb3JtO1xyXG4gICAgICAgIHRoaXMuX2xvb2t1cFN0YXRlID0gdGhpcy5fZm9ybVN0YXRlLmxvb2t1cDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFZhbHVlKG5ld1ZhbDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgICAgIGlmIChuZXdWYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBtZXJnZSh0aGlzLl9zdGF0ZSwgbmV3VmFsKTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZVN1YmplY3QubmV4dCh0aGlzLl9zdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VmFsdWUoa2V5UGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXRpbHMuZ2V0VmFsdWUoa2V5UGF0aCwgdGhpcy5fc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldExvb2t1cEluc3RhbmNlKGVsOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnNldFZhbHVlKHtmb3JtOiB7IGxvb2t1cDogeyBpbnN0YW5jZTogZWwgfX19KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVGb3JtU3RhdGUobmV3VmFsOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWUoeyBmb3JtOiBuZXdWYWwgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Rm9ybVN0YXRlKGtleVBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCdmb3JtLicgKyBrZXlQYXRoKTtcclxuICAgIH1cclxuXHJcbiAgICBldmVudFBhdGgoZXZ0OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwYXRoID0gKGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpKSB8fCBldnQucGF0aCwgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuXHJcbiAgICAgICAgaWYgKHBhdGggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHBhdGguaW5kZXhPZih3aW5kb3cpIDwgMCkgPyBwYXRoLmNvbmNhdCh3aW5kb3cpIDogcGF0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHdpbmRvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gW3dpbmRvd107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBnZXRQYXJlbnRzID0gKG5vZGUsIG1lbW8gPSB1bmRlZmluZWQpID0+IHtcclxuICAgICAgICAgICAgbWVtbyA9IG1lbW8gfHwgW107XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZW1vO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFBhcmVudHMocGFyZW50Tm9kZSwgbWVtby5jb25jYXQocGFyZW50Tm9kZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KGdldFBhcmVudHModGFyZ2V0KSwgd2luZG93KTtcclxuICAgIH1cclxufSJdfQ==