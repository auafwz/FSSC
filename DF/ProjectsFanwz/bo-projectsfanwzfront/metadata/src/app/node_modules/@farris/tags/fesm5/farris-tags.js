import { Injectable, NgModule, Component, ViewEncapsulation, forwardRef, Input, Output, EventEmitter, ViewChild, ChangeDetectorRef, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TagsService = /** @class */ (function () {
    function TagsService() {
    }
    TagsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TagsService.ctorParameters = function () { return []; };
    /** @nocollapse */ TagsService.ngInjectableDef = defineInjectable({ factory: function TagsService_Factory() { return new TagsService(); }, token: TagsService, providedIn: "root" });
    return TagsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TagsComponent = /** @class */ (function () {
    function TagsComponent(localeService, cd) {
        this.localeService = localeService;
        this.cd = cd;
        //是否支持添加
        this._addable = true;
        //是否支持关闭
        this._closable = true;
        this._readonly = false;
        this.checkChanged = new EventEmitter();
        this.tagClick = new EventEmitter();
        this.dataChanged = new EventEmitter();
        this.closed = new EventEmitter();
        this.addInput = false;
        this.addTagValue = '';
        this.checkedTags = [];
        this.innerTags = [];
        //添加按钮是否禁用
        this.addTagAble = true;
        this.onChangeCallback = (/**
         * @return {?}
         */
        function () { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(TagsComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            this._data = val;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tagInit(_this._data);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagsComponent.prototype, "checkable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkable;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._checkable = val;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagsComponent.prototype, "addable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._addable;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._addable = val;
            this.addTagAble = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagsComponent.prototype, "tagType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tagType;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._tagType = val;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagsComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._color = val;
            this.styleInit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagsComponent.prototype, "closable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._closable;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._closable = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TagsComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._readonly = val;
            if (!this._readonly) {
                this._closable = true;
                // this._addable = true;
                this.addTagAble = true;
            }
            else {
                this.activeTag = '';
                this._closable = false;
                // this._addable = false;
                this.addTagAble = false;
            }
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TagsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._checkable) {
            this._closable = false;
        }
        this.placeholder = this.localeService.getValue('tag.placeholder');
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TagsComponent.prototype.tagInit = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.innerTags = [];
        if (!data)
            return;
        /** @type {?} */
        var tagsArray = data.split(',');
        /** @type {?} */
        var tagsData = tagsArray.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item !== '') {
                return item;
            }
        }));
        if (tagsData && tagsData.length) {
            for (var i = 0; i < tagsData.length; i++) {
                /** @type {?} */
                var tagdata = {
                    name: ''
                };
                tagdata.name = tagsData[i];
                this.innerTags.push(tagdata);
            }
        }
        else {
            this.innerTags = [];
        }
    };
    /**
     * 点击关闭
     * @param e event
     * @param tag tag
     * @param index tag索引
     */
    /**
     * 点击关闭
     * @param {?} e event
     * @param {?} tag tag
     * @param {?} index tag索引
     * @return {?}
     */
    TagsComponent.prototype.closeHandler = /**
     * 点击关闭
     * @param {?} e event
     * @param {?} tag tag
     * @param {?} index tag索引
     * @return {?}
     */
    function (e, tag, index) {
        e.preventDefault();
        this.innerTags.splice(index, 1);
        /** @type {?} */
        var tagdata = this.tagProcess(this.innerTags);
        this.onChangeCallback(tagdata);
        this.onTouchedCallback();
        this.closed.emit(tag.name);
        this.dataChanged.emit(tagdata);
    };
    /**
     * 点击tag
     * @param e event
     * @param tag
     */
    /**
     * 点击tag
     * @param {?} e event
     * @param {?} tag
     * @return {?}
     */
    TagsComponent.prototype.clickHandler = /**
     * 点击tag
     * @param {?} e event
     * @param {?} tag
     * @return {?}
     */
    function (e, tag) {
        e.preventDefault();
        if (this._readonly)
            return;
        if (this.activeTag != tag['name']) {
            this.activeTag = tag.name;
        }
        this.tagClick.emit(tag.name);
        if (!this._checkable)
            return;
        if (tag.hasOwnProperty('checked')) {
            tag.checked = !tag.checked;
        }
        else {
            tag.checked = true;
        }
        this.checkedTags = this.innerTags.filter((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data.checked;
        }));
        /** @type {?} */
        var tagdata = this.tagProcess(this.innerTags);
        this.onChangeCallback(tagdata);
        this.onTouchedCallback();
        /** @type {?} */
        var CheckChangedData = {
            data: tagdata,
            tag: tag.name,
            checked: this.tagProcess(this.checkedTags)
        };
        this.checkChanged.emit(CheckChangedData);
    };
    /**
     * 点击添加tag按钮
     */
    /**
     * 点击添加tag按钮
     * @return {?}
     */
    TagsComponent.prototype.addHander = /**
     * 点击添加tag按钮
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._addable || !this.addTagAble)
            return;
        this.addInput = true;
        this.addTagValue = '';
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.addInputText.nativeElement.focus();
        }));
    };
    /**
     * 添加tag失去焦点
     */
    /**
     * 添加tag失去焦点
     * @param {?} event
     * @return {?}
     */
    TagsComponent.prototype.addInputBlur = /**
     * 添加tag失去焦点
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this._addable || !this.addInput)
            return;
        if (this.addTagValue) {
            /** @type {?} */
            var hastag = this.innerTags.find((/**
             * @param {?} tag
             * @return {?}
             */
            function (tag) {
                return tag.name == _this.addTagValue;
            }));
            if (hastag) {
                this.addInput = false;
                return;
            }
            else {
                /** @type {?} */
                var tag = { name: this.addTagValue };
                this.innerTags.push(tag);
                /** @type {?} */
                var tagdata = this.tagProcess(this.innerTags);
                this.dataChanged.emit(this.tagProcess(this.innerTags));
                this.onChangeCallback(tagdata);
                this.onTouchedCallback();
            }
        }
        this.addInput = false;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    TagsComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this._data = val;
        this.tagInit(this._data);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TagsComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TagsComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TagsComponent.prototype.tagProcess = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length) {
            /** @type {?} */
            var tagProcessData_1 = [];
            data.forEach((/**
             * @param {?} tag
             * @return {?}
             */
            function (tag) {
                tagProcessData_1.push(tag.name);
            }));
            return tagProcessData_1.join(',');
        }
        else {
            return '';
        }
    };
    //改变透明度
    //改变透明度
    /**
     * @param {?} hex
     * @param {?=} opacity
     * @return {?}
     */
    TagsComponent.prototype.hexToRgba = 
    //改变透明度
    /**
     * @param {?} hex
     * @param {?=} opacity
     * @return {?}
     */
    function (hex, opacity) {
        if (opacity === void 0) { opacity = 1; }
        /** @type {?} */
        var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        /** @type {?} */
        var sColor = hex.toLowerCase();
        if (sColor && reg.test(sColor)) {
            if (sColor.length === 4) {
                /** @type {?} */
                var sColorNew = "#";
                for (var i = 1; i < 4; i += 1) {
                    sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
                }
                sColor = sColorNew;
            }
            //处理六位的颜色值
            /** @type {?} */
            var sColorChange = [];
            for (var i = 1; i < 7; i += 2) {
                sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
            }
            return "RGB(" + sColorChange.join(",") + ',' + opacity + ")";
        }
        else {
            return sColor;
        }
    };
    /**
     * @return {?}
     */
    TagsComponent.prototype.styleInit = /**
     * @return {?}
     */
    function () {
        if (this.color) {
            this.tagStyle = {
                color: this._color,
                background: this._color ? this.hexToRgba(this._color, 0.1) : '',
                borderColor: this._color
            };
        }
        else {
            this.tagStyle = '';
        }
        this.cd.detectChanges();
    };
    TagsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-tags',
                    template: "<div [class]=\"'farris-tags '+ (className?className:'')\" [ngClass]=\"{'farris-tags-checkable': checkable}\">\r\n    <ul class=\"farris-tags-item-container\">\r\n        <li\r\n        *ngFor=\"let tag of innerTags;let index = index;\"\r\n        [class]=\"'farris-tag-item' + (tagType?' farris-tag-item-' + tagType:'')\"\r\n        [ngClass]=\"{'farris-tag-item-checked': checkable && tag.checked,\r\n        'farris-tag-item-checkable': checkable, \r\n        'farris-tag-item-has-color': color,\r\n        'farris-tag-item-actived':activeTag == tag.name}\"\r\n        (click)=\"clickHandler($event,tag)\"\r\n        [ngStyle]=\"tagStyle\"\r\n        >\r\n            <span class=\"tag-box\">{{tag.name}}</span>\r\n            <span class=\"tag-delete\" *ngIf=\"closable\">\r\n                <i class=\"f-icon f-icon-close\" (click)=\"closeHandler($event,tag,index)\"></i>\r\n            </span>\r\n        </li>\r\n        <li class=\"farris-tag-item farris-tag-add-button\" [ngClass]=\"{'farris-tag-add-button-disabled': !addTagAble}\" *ngIf=\"addable && !addInput\" (click)=\"addHander()\">\r\n            <span class=\"f-icon f-icon-amplification\"></span>\r\n            <span class=\"farris-tag-add-text\">{{ 'tag.addText' | locale }}</span>\r\n        </li>\r\n        <li class=\"farris-tag-input-box\" *ngIf=\"addable && addInput\">\r\n            <input type=\"text\" class=\"form-control\" (blur)=\"addInputBlur($event)\" (keyup.enter)=\"addInputBlur($event)\" #addInputText [(ngModel)]=\"addTagValue\" [placeholder]=\"placeholder\">\r\n        </li>\r\n    </ul>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return TagsComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".farris-tags .farris-tags-item-container .farris-tag-item{display:inline-block;padding:0 8px;margin:0 10px 0 0;line-height:24px;font-size:13px;color:#2d314e;background:#f6faff;border:1px solid #e6e6e6;white-space:nowrap;border-radius:3px;cursor:default;opacity:1;-webkit-transition:.3s cubic-bezier(.78,.14,.15,.86);transition:.3s cubic-bezier(.78,.14,.15,.86)}.farris-tags .farris-tags-item-container .farris-tag-item a,.farris-tags .farris-tags-item-container .farris-tag-item a:hover{color:rgba(0,0,0,.85)}.farris-tags .farris-tags-item-container .farris-tag-item>a:first-child:last-child{display:inline-block;margin:0 -8px;padding:0 8px}.farris-tags .farris-tags-item-container .farris-tag-item .tag-delete{display:inline-block;font-size:10px;margin-left:6px;color:rgba(0,0,0,.2);cursor:pointer;-webkit-transition:.3s cubic-bezier(.78,.14,.15,.86);transition:.3s cubic-bezier(.78,.14,.15,.86)}.farris-tags .farris-tags-item-container .farris-tag-item .tag-delete:hover{color:rgba(0,0,0,.85)}.farris-tags .farris-tags-item-container .farris-tag-item>.f-icon{font-size:12px}.farris-tags .farris-tags-item-container .farris-tag-item>.f-icon+span,.farris-tags .farris-tags-item-container .farris-tag-item>span+.f-icon{margin-left:7px}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-success{color:#52c41a;background:#f6ffed;border-color:#b7eb8f}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-info{color:#1890ff;background:#e6f7ff;border-color:#91d5ff}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-error{color:#f5222d;background:#fff1f0;border-color:#ffa39e}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-warning{color:#fa8c16;background:#fff7e6;border-color:#ffd591}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-checkable:not(.farris-tag-item-checked){background-color:transparent;border-color:transparent;cursor:pointer}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-checkable:not(.farris-tag-item-checked):active,.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-checkable:not(.farris-tag-item-checked):hover{color:#59a1ff}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-checkdisabled{background-color:transparent;border-color:transparent;cursor:not-allowed;color:rgba(0,0,0,.45)}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-checked{background-color:#fff;border-color:#2a87ff;color:#2a87ff}.farris-tags .farris-tags-item-container .farris-tag-item:last-child{margin-right:0}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-actived,.farris-tags .farris-tags-item-container .farris-tag-item:active{background-color:#2a87ff;color:#fff}.farris-tags .farris-tags-item-container .farris-tag-item.farris-tag-item-actived .tag-delete,.farris-tags .farris-tags-item-container .farris-tag-item:active .tag-delete{color:#fff}.farris-tags .farris-tags-item-container .farris-tag-add-button{cursor:pointer;background:#f9f9f9;border:1px dashed #babdc9}.farris-tags .farris-tags-item-container .farris-tag-add-button .farris-tag-add-text{color:rgba(0,0,0,.45)}.farris-tags .farris-tags-item-container .farris-tag-add-button .f-icon{color:rgba(0,0,0,.2)}.farris-tags .farris-tags-item-container .farris-tag-add-button:hover{background-color:#f9f9f9;border-color:#59a1ff}.farris-tags .farris-tags-item-container .farris-tag-add-button:hover .f-icon,.farris-tags .farris-tags-item-container .farris-tag-add-button:hover .farris-tag-add-text{color:#59a1ff}.farris-tags .farris-tags-item-container .farris-tag-add-button.farris-tag-add-button-disabled{background-color:#f7f7f7;border-color:#dcdcdc;border-style:solid;cursor:not-allowed}.farris-tags .farris-tags-item-container .farris-tag-add-button.farris-tag-add-button-disabled .farris-tag-add-text{color:rgba(0,0,0,.25)}.farris-tags .farris-tags-item-container .farris-tag-add-button.farris-tag-add-button-disabled:hover{background-color:#f7f7f7;border-color:#dcdcdc}.farris-tags .farris-tags-item-container .farris-tag-add-button.farris-tag-add-button-disabled:hover .f-icon,.farris-tags .farris-tags-item-container .farris-tag-add-button.farris-tag-add-button-disabled:hover .farris-tag-add-text{color:rgba(0,0,0,.25)}.farris-tags .farris-tags-item-container .farris-tag-input-box{display:inline-block}.farris-tags .farris-tags-item-container .farris-tag-input-box .form-control{height:24px;width:100px}.farris-tags .farris-tags-item-container .farris-tag-input-box .form-control:focus{box-shadow:none}.farris-tags.farris-tags-checkable .farris-tag-item{line-height:22px}"]
                }] }
    ];
    /** @nocollapse */
    TagsComponent.ctorParameters = function () { return [
        { type: LocaleService },
        { type: ChangeDetectorRef }
    ]; };
    TagsComponent.propDecorators = {
        data: [{ type: Input }],
        value: [{ type: Input }],
        checkable: [{ type: Input }],
        addable: [{ type: Input }],
        tagType: [{ type: Input }],
        color: [{ type: Input }],
        closable: [{ type: Input }],
        readonly: [{ type: Input }],
        className: [{ type: Input }],
        checkChanged: [{ type: Output }],
        tagClick: [{ type: Output }],
        dataChanged: [{ type: Output }],
        closed: [{ type: Output }],
        addInputText: [{ type: ViewChild, args: ['addInputText',] }]
    };
    return TagsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TagsModule = /** @class */ (function () {
    function TagsModule() {
    }
    TagsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TagsComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        LocaleModule.forRoot()
                    ],
                    exports: [TagsComponent]
                },] }
    ];
    return TagsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TagsService, TagsComponent, TagsModule };

//# sourceMappingURL=farris-tags.js.map