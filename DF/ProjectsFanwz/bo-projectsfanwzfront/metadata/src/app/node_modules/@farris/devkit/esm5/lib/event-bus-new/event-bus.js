import * as tslib_1 from "tslib";
import { Injectable, Type } from '@angular/core';
import { EventBusProxy } from './event-bus-proxy';
import { EventPipe } from './event-pipe';
var EventBus = /** @class */ (function () {
    function EventBus() {
        this.proxyMap = new Map();
        this.eventMap = new Map();
    }
    EventBus.prototype.getProxy = function (ownerType, eventTokenValueProvider) {
        var ownerName = ownerType.constructor.typeName || ownerType.constructor.name;
        if (!this.proxyMap.has(ownerName)) {
            this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));
        }
        return this.proxyMap.get(ownerName);
    };
    /**
     * 发送事件，通知订阅者接收消息。
     */
    // tslint:disable-next-line: max-line-length
    EventBus.prototype.post = function (emitterType, tokenValue, eventName, eventArgs, sender, eventType, eventId) {
        var e_1, _a;
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return;
        }
        if (!emitterType) {
            console.error('post方法的参数emitterType不能为空。');
            return;
        }
        var emitter;
        if (emitterType instanceof Type) {
            emitter = emitterType.typeName || emitterType.name;
        }
        else {
            emitter = emitterType;
        }
        if (typeof eventId === 'undefined') {
            eventId = new Date().valueOf();
        }
        try {
            for (var eventPipeList_1 = tslib_1.__values(eventPipeList), eventPipeList_1_1 = eventPipeList_1.next(); !eventPipeList_1_1.done; eventPipeList_1_1 = eventPipeList_1.next()) {
                var eventPipe = eventPipeList_1_1.value;
                if (eventPipe.matchEmitterToken(emitter, tokenValue)) {
                    eventPipe.post(eventArgs, sender, eventType, eventId);
                    eventPipe.unSubscribeForOnce();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (eventPipeList_1_1 && !eventPipeList_1_1.done && (_a = eventPipeList_1.return)) _a.call(eventPipeList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * 订阅事件
     */
    EventBus.prototype.on = function (target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);
    };
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     */
    EventBus.prototype.once = function (target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);
    };
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     */
    EventBus.prototype.requestFor = function (target, tokenValue, requestName, requestValue, success, fail) {
        var eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);
        if (eventPipe) {
            this.once(target, tokenValue, requestName, this, function (response) {
                if (response.status === 'success') {
                    success(response.data);
                }
                else {
                    if (fail) {
                        fail('No target responser listening');
                    }
                }
            });
            eventPipe.post({ target: target, token: tokenValue, data: requestValue });
        }
        else {
            if (fail) {
                fail('No target responser listening.');
            }
        }
    };
    /**
     * 监听一个请求事件，给出响应
     */
    EventBus.prototype.responseOn = function (responseSubject, requestName, callback) {
        var _this = this;
        this.on('RequestSubject', null, requestName, this, function (requestObj) {
            var response = { status: 'fail', data: null };
            if (responseSubject === requestObj.target) {
                response.data = callback(requestObj.data);
                response.status = 'success';
            }
            _this.post(requestObj.target, requestObj.token, requestName, response);
        });
    };
    EventBus.prototype.getEventPipe = function (eventName, target, tokenValue) {
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            eventPipeList = new Array();
            this.eventMap.set(eventName, eventPipeList);
        }
        // 1、一个事件不允许多个订阅
        // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
        // if (!eventPipe) {
        //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
        // }
        // 2、一个事件允许多个订阅
        var eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
        return eventPipe;
    };
    EventBus.prototype.findExistEventPipe = function (eventName, target, tokenValue) {
        var e_2, _a;
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return null;
        }
        try {
            // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
            for (var eventPipeList_2 = tslib_1.__values(eventPipeList), eventPipeList_2_1 = eventPipeList_2.next(); !eventPipeList_2_1.done; eventPipeList_2_1 = eventPipeList_2.next()) {
                var eventPipe = eventPipeList_2_1.value;
                if (eventPipe.matchEmitterToken(target, tokenValue)) {
                    return eventPipe;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (eventPipeList_2_1 && !eventPipeList_2_1.done && (_a = eventPipeList_2.return)) _a.call(eventPipeList_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return null;
    };
    EventBus.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EventBus.ctorParameters = function () { return []; };
    return EventBus;
}());
export { EventBus };
var EventCache = /** @class */ (function () {
    function EventCache() {
    }
    EventCache.setToken = function (key, value) {
        EventCache.tokens.set(key, value);
    };
    EventCache.getToken = function (key) {
        return EventCache.tokens.get(key);
    };
    EventCache.tokens = new Map();
    return EventCache;
}());
export { EventCache };
var RequestSubject = /** @class */ (function () {
    function RequestSubject() {
    }
    return RequestSubject;
}());
var DataClass = /** @class */ (function () {
    function DataClass() {
    }
    return DataClass;
}());
//# sourceMappingURL=data:application/json;base64,