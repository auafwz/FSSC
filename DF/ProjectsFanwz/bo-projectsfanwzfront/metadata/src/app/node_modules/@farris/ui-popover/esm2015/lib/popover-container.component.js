/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Input, Component, Optional, ViewChild, ElementRef } from '@angular/core';
import { PopoverConfig } from './popover.config';
import { isBs3 } from '@farris/ui-modal/utils';
import { Subject } from 'rxjs';
export class PopoverContainerComponent {
    /**
     * @param {?} config
     * @param {?} el
     */
    constructor(config, el) {
        this.el = el;
        this.mounseState = new Subject();
        Object.assign(this, config);
    }
    /**
     * @return {?}
     */
    get isBs3() {
        return isBs3();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.el) {
            this.mouseenterEvent = this.changeMouseState.bind(this, true);
            this.mouseleaveEvent = this.changeMouseState.bind(this, false);
            this.el.nativeElement.addEventListener('mouseenter', this.mouseenterEvent);
            this.el.nativeElement.addEventListener('mouseleave', this.mouseleaveEvent);
        }
    }
    /**
     * 获取鼠标变化状态
     * @return {?}
     */
    getMouseState() {
        return this.mounseState;
    }
    /**
     * 绑定的事件
     * @private
     * @param {?} state
     * @return {?}
     */
    changeMouseState(state) {
        console.log(state);
        this.mounseState.next(state);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mouseenterEvent) {
            this.el.nativeElement.removeEventListener('mouseenter', this.mouseenterEvent);
        }
        if (this.mouseleaveEvent) {
            this.el.nativeElement.removeEventListener('mouseleave', this.mouseleaveEvent);
        }
        this.mounseState.unsubscribe();
    }
}
PopoverContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-popover',
                changeDetection: ChangeDetectionStrategy.OnPush,
                // tslint:disable-next-line
                host: {
                    '[class]': '"popover in popover-" + placement + " " + "bs-popover-" + placement + " " + placement + " " + containerClass',
                    '[class.show]': '!isBs3',
                    '[class.bs3]': 'isBs3',
                    role: 'tooltip',
                    style: 'display:block;'
                },
                template: "<div class=\"popover-arrow arrow\"></div>\r\n<h3 class=\"popover-title popover-header\" *ngIf=\"title\">{{ title }}</h3>\r\n<div #innerEle class=\"popover-content popover-body\" [ngClass]=\"containerClass\">\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                styles: [`
    :host.bs3.popover-top {
      margin-bottom: 10px;
    }
    :host.bs3.popover.top>.arrow {
      margin-left: -2px;
    }
    :host.bs3.popover.top {
      margin-bottom: 10px;
    }
    :host.popover.bottom>.arrow {
      margin-left: -4px;
    }
    :host.bs3.bs-popover-left {
      margin-right: .5rem;
    }
    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{
      margin: .3rem 0;
    }
    :host.arrow-left .arrow {
        left: calc(50% - 10px);
    }
    `]
            }] }
];
/** @nocollapse */
PopoverContainerComponent.ctorParameters = () => [
    { type: PopoverConfig },
    { type: ElementRef, decorators: [{ type: Optional }] }
];
PopoverContainerComponent.propDecorators = {
    innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
    placement: [{ type: Input }],
    title: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PopoverContainerComponent.prototype.innerNode;
    /** @type {?} */
    PopoverContainerComponent.prototype.placement;
    /** @type {?} */
    PopoverContainerComponent.prototype.title;
    /** @type {?} */
    PopoverContainerComponent.prototype.containerClass;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mouseenterEvent;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mouseleaveEvent;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mounseState;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1wb3BvdmVyLyIsInNvdXJjZXMiOlsibGliL3BvcG92ZXItY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQThDLE1BQU0sZUFBZSxDQUFDO0FBQ3RKLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQXlDM0MsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7SUFhcEMsWUFBWSxNQUFxQixFQUFxQixFQUFhO1FBQWIsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQU4zRCxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFPM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQU5ELElBQUksS0FBSztRQUNQLE9BQU8sS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7OztJQU1ELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQzs7Ozs7SUFJRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7Ozs7SUFLTyxnQkFBZ0IsQ0FBQyxLQUFLO1FBRTVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMvRTtRQUNELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7WUF4RkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztnQkFFL0MsSUFBSSxFQUFFO29CQUNKLFNBQVMsRUFDUCw4R0FBOEc7b0JBQ2hILGNBQWMsRUFBRSxRQUFRO29CQUN4QixhQUFhLEVBQUUsT0FBTztvQkFDdEIsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsS0FBSyxFQUFFLGdCQUFnQjtpQkFDeEI7Z0JBMEJELHdRQUFpRDt5QkF4Qi9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBc0JDO2FBR0o7Ozs7WUExQ1EsYUFBYTtZQURrRCxVQUFVLHVCQXlEN0MsUUFBUTs7O3dCQVoxQyxTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTt3QkFDMUMsS0FBSztvQkFDTCxLQUFLOzs7O0lBRk4sOENBQW1FOztJQUNuRSw4Q0FBMkI7O0lBQzNCLDBDQUF1Qjs7SUFDdkIsbURBQXVCOzs7OztJQUN2QixvREFBNkI7Ozs7O0lBQzdCLG9EQUE2Qjs7Ozs7SUFDN0IsZ0RBQTZDOzs7OztJQU1YLHVDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCwgQ29tcG9uZW50LE9wdGlvbmFsLCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQb3BvdmVyQ29uZmlnIH0gZnJvbSAnLi9wb3BvdmVyLmNvbmZpZyc7XHJcbmltcG9ydCB7IGlzQnMzIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbC91dGlscyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZmFycmlzLXBvcG92ZXInLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gIGhvc3Q6IHtcclxuICAgICdbY2xhc3NdJzpcclxuICAgICAgJ1wicG9wb3ZlciBpbiBwb3BvdmVyLVwiICsgcGxhY2VtZW50ICsgXCIgXCIgKyBcImJzLXBvcG92ZXItXCIgKyBwbGFjZW1lbnQgKyBcIiBcIiArIHBsYWNlbWVudCArIFwiIFwiICsgY29udGFpbmVyQ2xhc3MnLFxyXG4gICAgJ1tjbGFzcy5zaG93XSc6ICchaXNCczMnLFxyXG4gICAgJ1tjbGFzcy5iczNdJzogJ2lzQnMzJyxcclxuICAgIHJvbGU6ICd0b29sdGlwJyxcclxuICAgIHN0eWxlOiAnZGlzcGxheTpibG9jazsnXHJcbiAgfSxcclxuICBzdHlsZXM6IFtcclxuICAgIGBcclxuICAgIDpob3N0LmJzMy5wb3BvdmVyLXRvcCB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICB9XHJcbiAgICA6aG9zdC5iczMucG9wb3Zlci50b3A+LmFycm93IHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IC0ycHg7XHJcbiAgICB9XHJcbiAgICA6aG9zdC5iczMucG9wb3Zlci50b3Age1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgfVxyXG4gICAgOmhvc3QucG9wb3Zlci5ib3R0b20+LmFycm93IHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IC00cHg7XHJcbiAgICB9XHJcbiAgICA6aG9zdC5iczMuYnMtcG9wb3Zlci1sZWZ0IHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAuNXJlbTtcclxuICAgIH1cclxuICAgIDpob3N0LmJzMy5icy1wb3BvdmVyLXJpZ2h0IC5hcnJvdywgOmhvc3QuYnMzLmJzLXBvcG92ZXItbGVmdCAuYXJyb3d7XHJcbiAgICAgIG1hcmdpbjogLjNyZW0gMDtcclxuICAgIH1cclxuICAgIDpob3N0LmFycm93LWxlZnQgLmFycm93IHtcclxuICAgICAgICBsZWZ0OiBjYWxjKDUwJSAtIDEwcHgpO1xyXG4gICAgfVxyXG4gICAgYFxyXG4gIF0sXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BvcG92ZXItY29udGFpbmVyLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9wb3ZlckNvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgQFZpZXdDaGlsZCgnaW5uZXJFbGUnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgaW5uZXJOb2RlOiBFbGVtZW50UmVmO1xyXG4gIEBJbnB1dCgpIHBsYWNlbWVudDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcbiAgY29udGFpbmVyQ2xhc3M6IHN0cmluZztcclxuICBwcml2YXRlIG1vdXNlZW50ZXJFdmVudDogYW55O1xyXG4gIHByaXZhdGUgbW91c2VsZWF2ZUV2ZW50OiBhbnk7XHJcbiAgcHJpdmF0ZSBtb3Vuc2VTdGF0ZSA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcblxyXG4gIGdldCBpc0JzMygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBpc0JzMygpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoY29uZmlnOiBQb3BvdmVyQ29uZmlnLEBPcHRpb25hbCgpIHByaXZhdGUgZWw6RWxlbWVudFJlZikge1xyXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKHRoaXMuZWwpIHtcclxuICAgICAgdGhpcy5tb3VzZWVudGVyRXZlbnQgPSB0aGlzLmNoYW5nZU1vdXNlU3RhdGUuYmluZCh0aGlzLCB0cnVlKTtcclxuICAgICAgdGhpcy5tb3VzZWxlYXZlRXZlbnQgPSB0aGlzLmNoYW5nZU1vdXNlU3RhdGUuYmluZCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5tb3VzZWVudGVyRXZlbnQpO1xyXG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMubW91c2VsZWF2ZUV2ZW50KTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W6byg5qCH5Y+Y5YyW54q25oCBXHJcbiAgICovXHJcbiAgZ2V0TW91c2VTdGF0ZSgpe1xyXG4gICAgcmV0dXJuIHRoaXMubW91bnNlU3RhdGU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOe7keWumueahOS6i+S7tlxyXG4gICAqIEBwYXJhbSBzdGF0ZSBcclxuICAgKi9cclxuICBwcml2YXRlIGNoYW5nZU1vdXNlU3RhdGUoc3RhdGUpIHtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coc3RhdGUpO1xyXG4gICAgdGhpcy5tb3Vuc2VTdGF0ZS5uZXh0KHN0YXRlKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMubW91c2VlbnRlckV2ZW50KSB7XHJcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5tb3VzZWVudGVyRXZlbnQpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubW91c2VsZWF2ZUV2ZW50KSB7XHJcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5tb3VzZWxlYXZlRXZlbnQpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5tb3Vuc2VTdGF0ZS51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=