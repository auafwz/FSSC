import { Injectable, ElementRef } from '@angular/core';
import { Repository, FrameContext } from '@farris/devkit';
import { FrameContextService } from './frame-context.service';
import { FormControlService } from './form-control.service';
const FIXED_COLUMN_START_INDEX = 5000;
const GRID_COLUMN_START_INDEX = 10000;
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class FocusInvalidService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, frameContextService, formControlService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.frameContextService = frameContextService;
        this.formControlService = formControlService;
    }
    /**
     * 向第一个验证不通过的字段设置焦点
     */
    focusInvalidInput(verifyInformations, rootElement) {
        // 无验证不通过信息时，直接返回。
        if (!verifyInformations || !verifyInformations.length) {
            return;
        }
        let targetField = null;
        const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            if (targetField) {
                const canFocus = this.focusElement(targetField, rootElement);
                if (canFocus) {
                    verifyInformations['focused'] = true;
                }
            }
        }
    }
    /**
     * 设置DataGrid单元格焦点
     */
    focusGridCell(verifyInformations, focusableDataGrid) {
        if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true) {
            return;
        }
        let targetField = null;
        let targetId = null;
        const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            targetId = firstVerifyInformation.id;
            verifyInformations['focused'] = true;
            focusableDataGrid.editCell(targetId, targetField);
        }
    }
    updateVerifyInformationsIndex(verifyInformations, rootElement) {
        verifyInformations = verifyInformations.filter((verifyInformation) => {
            const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
            const frameContext = frameContexts && frameContexts[0] || null;
            return frameContext && frameContext.frameId === this.frameContext.frameId;
        });
        return verifyInformations.map((verifyInformation) => {
            let tabIndex = -1;
            if (verifyInformation) {
                if (rootElement && verifyInformation.targetField) {
                    const input = this.getInputElementById(verifyInformation.targetField, rootElement);
                    tabIndex = input && input.getAttribute('tabindex') || -1;
                    tabIndex = Number(tabIndex);
                }
                const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
                const frameContext = frameContexts && frameContexts[0] || null;
                const frameIndex = frameContext.index + 1;
                verifyInformation.tabIndex = tabIndex;
                verifyInformation.domIndex = -1;
                verifyInformation.frameIndex = -1;
                verifyInformation.position = tabIndex;
                if (frameContext) {
                    const domIndex = this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;
                    if (domIndex > 0) {
                        const rowIndex = verifyInformation.index || 0;
                        verifyInformation.domIndex = domIndex;
                        verifyInformation.frameIndex = frameContext.index;
                        verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);
                    }
                }
            }
            return verifyInformation;
        });
    }
    isGridComponent(frameContext) {
        if (frameContext) {
            const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
            return dataGridColumnsName ? true : false;
        }
        return undefined;
    }
    getColumnIndex(frameContext, binding) {
        binding = binding.split('/').filter(p => p).join('/');
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);
        const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        const frameIndex = frameContext.index + 1;
        if (!dataGridColumnsName) {
            return undefined;
        }
        let columns = frameContext.viewModel[dataGridColumnsName];
        if (!columns || columns.length < 1) {
            return undefined;
        }
        // 打平columns
        columns = columns.reduce((results, item) => {
            if (Array.isArray(item)) {
                return results.concat(item);
            }
            return results.concat([item]);
        }, []);
        let position = -1;
        for (let index = 0; index < columns.length; index++) {
            const column = columns[index];
            const fields = column && column.field && column.field.split('.').filter(p => p) || null;
            if (!fields) {
                continue;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                const fixed = column.fixed;
                if (fixed) {
                    const fixedColumns = columns.filter(item => item.fixed === fixed);
                    const fixedColumnIndex = this.getIndexFromColumns(fixedColumns, binding);
                    if (fixed === 'left') {
                        position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;
                    }
                    else {
                        position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;
                    }
                }
                else {
                    position = frameIndex * GRID_COLUMN_START_INDEX + index;
                }
                break;
            }
        }
        return position;
    }
    getIndexFromColumns(columns, binding) {
        const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);
        return columns.findIndex(column => {
            const fields = column && column.field && column.field.split('.').filter(p => p) || null;
            if (!fields) {
                return false;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                return true;
            }
            return false;
        });
    }
    selectFirstVerifyInformation(verifyInformations, rootElement) {
        verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);
        verifyInformations.sort((v1, v2) => Number(v1.position) - Number(v2.position));
        return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;
    }
    getInputElementById(targetField, rootElement) {
        let element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;
        if (element && element.tagName !== 'INPUT') {
            const inputs = element.getElementsByTagName('input');
            if (inputs.length) {
                element = inputs[0];
            }
        }
        return element;
    }
    getFrameContextsByPropertyPath(propertyPath, separtor = '/') {
        if (!propertyPath) {
            return [];
        }
        const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => {
            const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
            const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
            if (formControls && Object.keys(formControls).length > 0) {
                const key = Object.keys(formControls).find((key) => {
                    const formControl = formControls[key];
                    if (!formControl || !formControl.binding) {
                        return false;
                    }
                    const bindings = formControl.binding.split('.').filter(p => p);
                    const bindingPaths = bindingPath.split('/').filter(p => p);
                    const fullPath = bindingPaths.concat(bindings);
                    return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');
                });
                return key ? true : false;
            }
            return false;
        });
    }
    getFormControlIndexByBindingPath(frameContext, binding) {
        const ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        const bindings = binding.split('/').filter(p => p);
        return Object.values(ngFormControls).findIndex((ngFormControl) => {
            if (!ngFormControl) {
                return false;
            }
            const bindingPath = frameContext.viewModel.bindingPath;
            const bindingPaths = bindingPath.split('/').filter(p => p);
            const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);
            const fullPath = bindingPaths.concat(formControlBindingPaths);
            return fullPath.join('/') === bindings.join('/');
        });
    }
    getFieldIndex(frameContext, binding) {
        const isGridComponent = this.isGridComponent(frameContext);
        if (isGridComponent) {
            return this.getColumnIndex(frameContext, binding);
        }
        else {
            return this.getFormControlIndexByBindingPath(frameContext, binding);
        }
    }
    getFormControlsByFrameContext(frameContext) {
        return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
    }
    focusElement(elementId, rootElement) {
        let focused = false;
        let elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);
        // 未获取到指定字段时，返回，不再设置焦点。
        if (elementToFocus) {
            // 如果有多个id重复的元素，则不定位
            const elements = rootElement.nativeElement.ownerDocument.querySelectorAll(`#${elementId}`);
            if (elements && elements.length > 1) {
                return focused;
            }
            // 如果绑定目标字段的控件不是Input元素，则查找其下级节点。
            if (elementToFocus.tagName !== 'INPUT') {
                const subElements = elementToFocus.getElementsByTagName('input');
                if (subElements.length) {
                    elementToFocus = subElements[0];
                }
            }
            elementToFocus.focus();
            focused = true;
        }
        return focused;
    }
    /**
     * 设置焦点
     * @param verifyInformation 错误信息
     * @param frameContext 上下文
     * @returns
     */
    focus(verifyInformation, frameContext) {
        if (!verifyInformation) {
            return;
        }
        const isGridValidation = verifyInformation.index !== null;
        if (isGridValidation) {
            const grid = this.getGridRef(frameContext);
            if (grid) {
                setTimeout(() => {
                    grid.editCell(verifyInformation.id, verifyInformation.targetField);
                }, 0);
            }
        }
        else {
            const frameElement = this.getComponentRef(frameContext);
            const elementId = verifyInformation.targetField;
            this.focusById(elementId, frameElement);
        }
    }
    /**
     * 通过控件id设置焦点
     * @param elementId
     * @param elementRef
     */
    focusById(elementId, elementRef) {
        const document = elementRef && elementRef.nativeElement.ownerDocument || window.document;
        if (document) {
            const element = document.getElementById(elementId);
            if (element.tagName !== 'INPUT') {
                const subElements = element.getElementsByTagName('input');
                if (subElements.length) {
                    const input = subElements[0];
                    if (input && typeof input.focus === 'function') {
                        input.focus();
                    }
                }
            }
            else {
                element.focus();
            }
        }
    }
    /**
     * 获取组件实例
     * @param frameContext
     * @returns
     */
    getComponentRef(frameContext) {
        return this.frameContext && this.frameContext.injector.get(ElementRef, null) || null;
    }
    /**
     * 获取grid实例
     * @param frameContext frameContext
     * @returns
     */
    getGridRef(frameContext) {
        const namespace = frameContext.namespace;
        const bindingPath = frameContext.viewModel.bindingPath;
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];
        const matchedFrameContexts = frameContexts.filter((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());
        let result = null;
        if (matchedFrameContexts) {
            matchedFrameContexts.every((frameContext) => {
                const frameId = frameContext.frameId;
                const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                if (!componentsMap) {
                    return true;
                }
                const datagridComponent = Array.from(componentsMap.values()).find((component) => component && component['__component_type__'] === 'DatagridComponent');
                if (datagridComponent) {
                    result = datagridComponent;
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        return result;
    }
}
FocusInvalidService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FocusInvalidService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FrameContextService },
    { type: FormControlService }
];
export { FocusInvalidService };
//# sourceMappingURL=data:application/json;base64,