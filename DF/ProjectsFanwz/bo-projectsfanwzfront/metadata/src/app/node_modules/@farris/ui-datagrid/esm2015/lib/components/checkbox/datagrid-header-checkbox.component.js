/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from './../../datagrid.component';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-18 10:30:21
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, ViewChild, ElementRef, Injector } from '@angular/core';
import { DatagridFacadeService } from './../../services/datagrid-facade.service';
export class DatagridHeaderCheckboxComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.indeterminate = false;
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dg = this.injector.get(DatagridComponent);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.indeterminate) {
            this.chk.nativeElement.indeterminate = true;
        }
        this.dg.dgs.changeCheckAllStatus.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        (status) => {
            if (status === 2) {
                this.chk.nativeElement.indeterminate = true;
            }
            else {
                this.chk.nativeElement.indeterminate = false;
                this.updateStatus(!!status);
            }
        }));
    }
    /**
     * @param {?} checked
     * @return {?}
     */
    updateStatus(checked) {
        this.checked = checked;
        this.chk.nativeElement.checked = checked;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        if (!this.dg.data || !this.dg.data.length) {
            return;
        }
        if (!this.disabled) {
            this.checked = !this.checked;
            this.indeterminate = false;
            this.chk.nativeElement.indeterminate = false;
            if (this.checked) {
                this.dfs.checkAll();
                this.chk.nativeElement.checked = true;
                // this.dg.checkAll.emit();
            }
            else {
                this.dfs.clearCheckeds(!this.dg.enableMorePageSelect);
                if (this.dg.selectedRow && this.dg.checkOnSelect && this.dg.selectOnCheck) {
                    this.dg.unSelectRow(this.dg.selectedRow.id);
                }
                this.chk.nativeElement.checked = false;
                // this.dg.unCheckAll.emit();
            }
        }
        event.stopPropagation();
    }
}
DatagridHeaderCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-header-checkbox',
                template: ` <div class="custom-control custom-checkbox f-checkradio-single">
        <input type="checkbox" #chk class="custom-control-input" [disabled]="disabled" [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div>`,
                styles: [`
        :host {
            vertical-align: middle;
        }
        :host .custom-checkbox {
            opacity: 1;
            float: none;
            top: 2px;
        }
        `]
            }] }
];
/** @nocollapse */
DatagridHeaderCheckboxComponent.ctorParameters = () => [
    { type: Injector }
];
DatagridHeaderCheckboxComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    indeterminate: [{ type: Input }],
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.chk;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaGVhZGVyLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jaGVja2JveC9kYXRhZ3JpZC1oZWFkZXItY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7Ozs7O0FBUy9ELE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBcUJqRixNQUFNLE9BQU8sK0JBQStCOzs7O0lBVXhDLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFON0Isa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFPM0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQy9DO1FBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsU0FBUzs7OztRQUFDLENBQUMsTUFBYyxFQUFFLEVBQUU7WUFDMUQsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDL0M7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDL0I7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLE9BQWdCO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDN0MsQ0FBQzs7Ozs7SUFHRCxXQUFXLENBQUMsS0FBaUI7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3ZDLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBRTdCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDN0MsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNkLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3RDLDJCQUEyQjthQUM5QjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFFdEQsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRTtvQkFDdkUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQy9DO2dCQUNELElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBQ3ZDLDZCQUE2QjthQUNoQztTQUNKO1FBQ0QsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzVCLENBQUM7OztZQWhGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsUUFBUSxFQUFFOzs7V0FHSDt5QkFFSDs7Ozs7Ozs7O1NBU0M7YUFFUjs7OztZQXJCeUQsUUFBUTs7O3NCQXVCN0QsS0FBSzt1QkFDTCxLQUFLOzRCQUVMLEtBQUs7a0JBRUwsU0FBUyxTQUFDLEtBQUs7Ozs7SUFMaEIsa0RBQTBCOztJQUMxQixtREFBMkI7O0lBRTNCLHdEQUErQjs7SUFFL0IsOENBQWtDOzs7OztJQUNsQyw4Q0FBbUM7Ozs7O0lBQ25DLDZDQUE4Qjs7Ozs7SUFFbEIsbURBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICcuLy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcbi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDgtMDYgMDc6NDM6MDdcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDktMTggMTA6MzA6MjFcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZhY2FkZVNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3NlcnZpY2VzL2RhdGFncmlkLWZhY2FkZS5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkYXRhZ3JpZC1oZWFkZXItY2hlY2tib3gnLFxyXG4gICAgdGVtcGxhdGU6IGAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCBmLWNoZWNrcmFkaW8tc2luZ2xlXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiICNjaGsgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiIFtjaGVja2VkXT1cImNoZWNrZWRcIj5cclxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQpXCI+PC9sYWJlbD5cclxuICAgIDwvZGl2PmAsXHJcbiAgICBzdHlsZXM6IFtcclxuICAgICAgICBgXHJcbiAgICAgICAgOmhvc3Qge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICA6aG9zdCAuY3VzdG9tLWNoZWNrYm94IHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgZmxvYXQ6IG5vbmU7XHJcbiAgICAgICAgICAgIHRvcDogMnB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBgXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEhlYWRlckNoZWNrYm94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgpIGNoZWNrZWQ6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgICBASW5wdXQoKSBpbmRldGVybWluYXRlID0gZmFsc2U7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnY2hrJykgY2hrOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBkZnM6IERhdGFncmlkRmFjYWRlU2VydmljZTtcclxuICAgIHByaXZhdGUgZGc6IERhdGFncmlkQ29tcG9uZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5kZnMgPSB0aGlzLmluamVjdG9yLmdldChEYXRhZ3JpZEZhY2FkZVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuZGcgPSB0aGlzLmluamVjdG9yLmdldChEYXRhZ3JpZENvbXBvbmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXRlcm1pbmF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZy5kZ3MuY2hhbmdlQ2hlY2tBbGxTdGF0dXMuc3Vic2NyaWJlKChzdGF0dXM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXR1cyghIXN0YXR1cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdGF0dXMoY2hlY2tlZDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IGNoZWNrZWQ7XHJcbiAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5jaGVja2VkID0gY2hlY2tlZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGcuZGF0YSB8fCAhdGhpcy5kZy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZnMuY2hlY2tBbGwoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRnLmNoZWNrQWxsLmVtaXQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLmNsZWFyQ2hlY2tlZHMoIXRoaXMuZGcuZW5hYmxlTW9yZVBhZ2VTZWxlY3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRnLnNlbGVjdGVkUm93ICYmIHRoaXMuZGcuY2hlY2tPblNlbGVjdCAmJiB0aGlzLmRnLnNlbGVjdE9uQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRnLnVuU2VsZWN0Um93KHRoaXMuZGcuc2VsZWN0ZWRSb3cuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRnLnVuQ2hlY2tBbGwuZW1pdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=