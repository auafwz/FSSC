/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-06-16 13:44:59
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-15 09:47:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { BehaviorSubject } from 'rxjs';
import { Injectable } from '@angular/core';
import { merge } from 'lodash-es';
import { map } from 'rxjs/operators';
import { CommonUtils } from './../common.utils';
import * as i0 from "@angular/core";
import * as i1 from "../common.utils";
/**
 * @record
 */
export function RuntimeState() { }
if (false) {
    /** @type {?|undefined} */
    RuntimeState.prototype.form;
    /** @type {?|undefined} */
    RuntimeState.prototype.model;
}
/** @type {?} */
var DefaultRuntimeState = {
    form: {},
    model: {}
};
var RuntimeStateService = /** @class */ (function () {
    function RuntimeStateService(utils) {
        this.utils = utils;
        this.stateSubject = new BehaviorSubject({});
        this.state$ = this.stateSubject.asObservable();
        this.form$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.form; })));
        this.lookupIsPending$ = this.form$.pipe(map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return f.lookup.pending; })));
        this._state = DefaultRuntimeState;
        this._formState = this._state.form;
        this._lookupState = this._formState.lookup;
    }
    /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    RuntimeStateService.prototype.setValue = /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        if (newVal) {
            this._state = merge(this._state, newVal);
            this.stateSubject.next(this._state);
        }
    };
    /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    RuntimeStateService.prototype.getValue = /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this.utils.getValue(keyPath, this._state);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    RuntimeStateService.prototype.setLookupInstance = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        this.setValue({ form: { lookup: { instance: el } } });
    };
    /**
     * @param {?} newVal
     * @return {?}
     */
    RuntimeStateService.prototype.updateFormState = /**
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        this.setValue({ form: newVal });
    };
    /**
     * @param {?} keyPath
     * @return {?}
     */
    RuntimeStateService.prototype.getFormState = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this.getValue('form.' + keyPath);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    RuntimeStateService.prototype.eventPath = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        var target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        var getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        function (node, memo) {
            if (memo === void 0) { memo = undefined; }
            memo = memo || [];
            /** @type {?} */
            var parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    };
    RuntimeStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RuntimeStateService.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    /** @nocollapse */ RuntimeStateService.ngInjectableDef = i0.defineInjectable({ factory: function RuntimeStateService_Factory() { return new RuntimeStateService(i0.inject(i1.CommonUtils)); }, token: RuntimeStateService, providedIn: "root" });
    return RuntimeStateService;
}());
export { RuntimeStateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._state;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype.stateSubject;
    /** @type {?} */
    RuntimeStateService.prototype.state$;
    /** @type {?} */
    RuntimeStateService.prototype.form$;
    /** @type {?} */
    RuntimeStateService.prototype.lookupIsPending$;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._formState;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._lookupState;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype.utils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVudGltZS1zdGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1jb21tb24vIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9ydW50aW1lLXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7O0FBR2hELGtDQUdDOzs7SUFGRyw0QkFBNkI7O0lBQzdCLDZCQUE4Qjs7O0lBRzVCLG1CQUFtQixHQUFpQjtJQUN0QyxJQUFJLEVBQUUsRUFBRTtJQUNSLEtBQUssRUFBRSxFQUFFO0NBQ1o7QUFHRDtJQW1CSSw2QkFBb0IsS0FBa0I7UUFBbEIsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQVo5QixpQkFBWSxHQUFHLElBQUksZUFBZSxDQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRTdELFdBQU0sR0FBNkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVwRSxVQUFLLEdBQW1CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUN4QixHQUFHOzs7O1FBQUMsVUFBQyxLQUFtQixJQUFLLE9BQUEsS0FBSyxDQUFDLElBQUksRUFBVixDQUFVLEVBQUMsQ0FBQyxDQUFDO1FBRTFELHFCQUFnQixHQUF3QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBRSxHQUFHOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBaEIsQ0FBZ0IsRUFBQyxDQUFFLENBQUM7UUFN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SUFDeEIsMkNBQTBCOzs7OztJQUVkLG9DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDYtMTYgMTM6NDQ6NTlcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDgtMTUgMDk6NDc6MzRcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7bWVyZ2V9IGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbHMgfSBmcm9tICcuLy4uL2NvbW1vbi51dGlscyc7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSdW50aW1lU3RhdGUge1xyXG4gICAgZm9ybT86IHsgW2tleTogc3RyaW5nXTogYW55fTtcclxuICAgIG1vZGVsPzogeyBba2V5OiBzdHJpbmddOiBhbnl9O1xyXG59XHJcblxyXG5jb25zdCBEZWZhdWx0UnVudGltZVN0YXRlOiBSdW50aW1lU3RhdGUgPSB7XHJcbiAgICBmb3JtOiB7fSxcclxuICAgIG1vZGVsOiB7fVxyXG59XHJcblxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lU3RhdGVTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIF9zdGF0ZTogUnVudGltZVN0YXRlO1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGVTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSdW50aW1lU3RhdGU+KHt9KTtcclxuXHJcbiAgICBzdGF0ZSQ6IE9ic2VydmFibGU8UnVudGltZVN0YXRlPiA9IHRoaXMuc3RhdGVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIGZvcm0kOk9ic2VydmFibGU8YW55PiA9IHRoaXMuc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgbWFwKChzdGF0ZTogUnVudGltZVN0YXRlKSA9PiBzdGF0ZS5mb3JtKSk7XHJcblxyXG4gICAgbG9va3VwSXNQZW5kaW5nJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZm9ybSQucGlwZSggbWFwKGYgPT4gZi5sb29rdXAucGVuZGluZykgKTtcclxuXHJcbiAgICBwcml2YXRlIF9mb3JtU3RhdGU6IGFueTtcclxuICAgIHByaXZhdGUgX2xvb2t1cFN0YXRlOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB1dGlsczogQ29tbW9uVXRpbHMpIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IERlZmF1bHRSdW50aW1lU3RhdGU7XHJcbiAgICAgICAgdGhpcy5fZm9ybVN0YXRlID0gdGhpcy5fc3RhdGUuZm9ybTtcclxuICAgICAgICB0aGlzLl9sb29rdXBTdGF0ZSA9IHRoaXMuX2Zvcm1TdGF0ZS5sb29rdXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRWYWx1ZShuZXdWYWw6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICBpZiAobmV3VmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gbWVyZ2UodGhpcy5fc3RhdGUsIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGVTdWJqZWN0Lm5leHQodGhpcy5fc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFZhbHVlKGtleVBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnV0aWxzLmdldFZhbHVlKGtleVBhdGgsIHRoaXMuX3N0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRMb29rdXBJbnN0YW5jZShlbDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh7Zm9ybTogeyBsb29rdXA6IHsgaW5zdGFuY2U6IGVsIH19fSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRm9ybVN0YXRlKG5ld1ZhbDoge1trZXk6IHN0cmluZ106IGFueX0pIHtcclxuICAgICAgICB0aGlzLnNldFZhbHVlKHsgZm9ybTogbmV3VmFsIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZvcm1TdGF0ZShrZXlQYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgnZm9ybS4nICsga2V5UGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXZlbnRQYXRoKGV2dDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IChldnQuY29tcG9zZWRQYXRoICYmIGV2dC5jb21wb3NlZFBhdGgoKSkgfHwgZXZ0LnBhdGgsIHRhcmdldCA9IGV2dC50YXJnZXQ7XHJcblxyXG4gICAgICAgIGlmIChwYXRoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChwYXRoLmluZGV4T2Yod2luZG93KSA8IDApID8gcGF0aC5jb25jYXQod2luZG93KSA6IHBhdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFyZ2V0ID09PSB3aW5kb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt3aW5kb3ddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZ2V0UGFyZW50cyA9IChub2RlLCBtZW1vID0gdW5kZWZpbmVkKSA9PiB7XHJcbiAgICAgICAgICAgIG1lbW8gPSBtZW1vIHx8IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVtbztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRQYXJlbnRzKHBhcmVudE5vZGUsIG1lbW8uY29uY2F0KHBhcmVudE5vZGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChnZXRQYXJlbnRzKHRhcmdldCksIHdpbmRvdyk7XHJcbiAgICB9XHJcbn0iXX0=