/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/f-file-upload-default.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { UploadStatus, UploadServerService } from '../model/index';
import { Observable } from 'rxjs';
import { FFileUtils } from '../utils/index';
var FFileUploadDefaultService = /** @class */ (function (_super) {
    tslib_1.__extends(FFileUploadDefaultService, _super);
    function FFileUploadDefaultService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 2019年3月2日，先假定一个一个传入
     * @param file
     * @param event
     */
    /**
     * 2019年3月2日，先假定一个一个传入
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    FFileUploadDefaultService.prototype.upload = /**
     * 2019年3月2日，先假定一个一个传入
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    function (files, event) {
        var _this = this;
        /** @type {?} */
        var file = files[0];
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var url = event.url || '';
            /** @type {?} */
            var method = event.method || 'POST';
            /** @type {?} */
            var data = event.data || {};
            /** @type {?} */
            var headers = event.headers || {};
            /** @type {?} */
            var xhr = new XMLHttpRequest();
            /** @type {?} */
            var time = new Date().getTime();
            /** @type {?} */
            var progressStartTime = (file.progress.data && file.progress.data.startTime) || time;
            /** @type {?} */
            var speed = 0;
            /** @type {?} */
            var eta = null;
            xhr.upload.addEventListener('progress', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.lengthComputable) {
                    /** @type {?} */
                    var percentage = Math.round((e.loaded * 100) / e.total);
                    /** @type {?} */
                    var diff = new Date().getTime() - time;
                    speed = Math.round(e.loaded / diff * 1000);
                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();
                    eta = Math.ceil((e.total - e.loaded) / speed);
                    file.progress = {
                        status: UploadStatus.Uploading,
                        data: {
                            percentage: percentage,
                            speed: speed,
                            speedHuman: FFileUtils.humanizeBytes(speed) + "/s",
                            startTime: progressStartTime,
                            endTime: null,
                            eta: eta,
                            etaHuman: _this.secondsToHuman(eta)
                        }
                    };
                    observer.next({ type: 'uploading', file: file });
                }
            }), false);
            xhr.upload.addEventListener('error', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                observer.error(e);
                observer.complete();
            }));
            xhr.onreadystatechange = (/**
             * @return {?}
             */
            function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    /** @type {?} */
                    var speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);
                    file.progress = {
                        status: UploadStatus.Done,
                        data: {
                            percentage: 100,
                            speed: speedAverage,
                            speedHuman: FFileUtils.humanizeBytes(speedAverage) + "/s",
                            startTime: progressStartTime,
                            endTime: new Date().getTime(),
                            eta: eta,
                            etaHuman: _this.secondsToHuman(eta || 0)
                        }
                    };
                    file.responseStatus = xhr.status;
                    try {
                        file.response = JSON.parse(xhr.response);
                    }
                    catch (e) {
                        file.response = xhr.response;
                    }
                    file.responseHeaders = _this.parseResponseHeaders(xhr.getAllResponseHeaders());
                    observer.next({ type: 'done', files: [file] });
                    observer.complete();
                }
            });
            xhr.open(method, url, true);
            xhr.withCredentials = event.withCredentials ? true : false;
            try {
                /** @type {?} */
                var uploadFile = (/** @type {?} */ (file.nativeFile));
                // const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
                // if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
                //     observer.complete();
                // }
                Object.keys(headers).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                function (key) { return xhr.setRequestHeader(key, headers[key]); }));
                /** @type {?} */
                var bodyToSend = void 0;
                if (event.includeWebKitFormBoundary !== false) {
                    Object.keys(data).forEach((/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) { return file.form.append(key, data[key]); }));
                    file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);
                    bodyToSend = file.form;
                }
                else {
                    bodyToSend = uploadFile;
                }
                //this.serviceEvents.emit({ type: 'start', file: file });
                xhr.send(bodyToSend);
            }
            catch (e) {
                observer.complete();
            }
            return (/**
             * @return {?}
             */
            function () {
                xhr.abort();
            });
        }));
    };
    // 删除附件
    // 删除附件
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    FFileUploadDefaultService.prototype.remove = 
    // 删除附件
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    function (files, event) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            observer.next({ type: 'removed', files: files });
            observer.complete();
        }));
    };
    /**
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FFileUploadDefaultService.prototype.multipartUpload = /**
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            observer.complete();
        }));
    };
    ;
    /**
     * @private
     * @param {?} sec
     * @return {?}
     */
    FFileUploadDefaultService.prototype.secondsToHuman = /**
     * @private
     * @param {?} sec
     * @return {?}
     */
    function (sec) {
        return new Date(sec * 1000).toISOString().substr(11, 8);
    };
    /**
     * @private
     * @param {?} httpHeaders
     * @return {?}
     */
    FFileUploadDefaultService.prototype.parseResponseHeaders = /**
     * @private
     * @param {?} httpHeaders
     * @return {?}
     */
    function (httpHeaders) {
        if (!httpHeaders) {
            return;
        }
        return httpHeaders.split('\n')
            .map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.split(/: */, 2); }))
            .filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x[0]; }))
            .reduce((/**
         * @param {?} acc
         * @param {?} x
         * @return {?}
         */
        function (acc, x) {
            acc[x[0]] = x[1];
            return acc;
        }), {});
    };
    return FFileUploadDefaultService;
}(UploadServerService));
export { FFileUploadDefaultService };
//# sourceMappingURL=data:application/json;base64,