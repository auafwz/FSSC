/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2019-03-05 19:55:44
 * @Last Modified by: Witt
 * @Last Modified time: 2019-03-13 20:35:29
 */
import { format } from 'date-fns';
import { AppContext, FrameContext } from '@farris/devkit';
import { ChangeDetailType } from './types';
import { BefChangeUtil } from './bef_change_util';
import { Injector, Optional } from '@angular/core';
/**
 * Be变量管理器
 */
class BefVariableManager {
    /**
     * 构造函数
     * @param {?} appContext
     * @param {?} ngVariables
     * @param {?} injector
     */
    constructor(appContext, ngVariables, injector) {
        this.appContext = appContext;
        this.ngVariables = ngVariables;
        this.injector = injector;
        this.ngVariableMap = new Map();
        this.innerValueMap = new Map();
        // 重新组织变量元数据
        Object.keys(ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 获取变更集
     * @param {?} changeDetail
     * @return {?}
     */
    handleChangeDetail(changeDetail) {
        /** @type {?} */
        const changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} varName
         * @return {?}
         */
        (varName) => {
            // 变量元数据
            /** @type {?} */
            const ngVariable = this.ngVariableMap.get(varName);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            const mapping = ngVariable.mapping;
            // 更新UIState变更
            /** @type {?} */
            const newValue = changeInfo[varName];
            /** @type {?} */
            const oldValue = this.innerValueMap.get(varName);
            if (oldValue === newValue) {
                return;
            }
            // 更新值
            this.setValueToUIState(mapping, newValue);
            this.innerValueMap.set(varName, newValue);
        }));
    }
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    buildChangeDetail() {
        /** @type {?} */
        const changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        (ngVariable, varName) => {
            /** @type {?} */
            const mapping = ngVariable.mapping;
            /** @type {?} */
            const newValue = this.getValueFromUIState(mapping);
            /** @type {?} */
            const oldValue = this.innerValueMap.get(varName);
            if (this.isValueEqual(newValue, oldValue) === false) {
                // 不清除变更，请求成功后清除变更
                // this.innerValueMap.set(varName, newValue);
                this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    }
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    reset() {
        this.innerValueMap.clear();
    }
    /**
     * 清空vo变量变更集
     * @param {?} changeDetail
     * @return {?}
     */
    clearChanges(changeDetail) {
        if (!changeDetail || Object.keys(changeDetail.ChangeInfo).length === 0) {
            return;
        }
        Object.keys(changeDetail.ChangeInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            /** @type {?} */
            const ngVariable = this.ngVariableMap.get(key);
            if (!ngVariable) {
                return;
            }
            /** @type {?} */
            const mapping = ngVariable.mapping;
            /** @type {?} */
            const newValue = this.getValueFromUIState(mapping);
            this.innerValueMap.set(key, newValue);
        }));
    }
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    appendToChangeInfo(changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            const udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    }
    /**
     * 从UIState上获取值
     * @private
     * @param {?} mapping
     * @return {?}
     */
    getValueFromUIState(mapping) {
        /** @type {?} */
        const uiState = this.getRootUIState();
        // 计算value
        /** @type {?} */
        const mappingArray = mapping.split('.');
        /** @type {?} */
        const value = mappingArray.reduce((/**
         * @param {?} accumulator
         * @param {?} currentValue
         * @return {?}
         */
        (accumulator, currentValue) => {
            return accumulator ? accumulator[currentValue] : null;
        }), uiState);
        if (value instanceof Date) {
            return format(value, 'yyyy-MM-dd HH:mm:ss');
        }
        return value;
    }
    /**
     * 获取根组件上的UIState
     * @private
     * @return {?}
     */
    getRootUIState() {
        /** @type {?} */
        let rootFrameContext = this.appContext.frameContextManager.getRootFrameContext();
        if (this.injector) {
            /** @type {?} */
            const frameContext = this.injector.get(FrameContext, null);
            if (frameContext) {
                /** @type {?} */
                const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
                rootFrameContext = virtualRootFrameContext || rootFrameContext;
            }
        }
        if (!rootFrameContext) {
            return;
        }
        return rootFrameContext.uiState;
    }
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    isValueEqual(srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    }
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    isUdtVariable(obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    }
    /**
     * 设置值到UIState
     * \@todo：
     * 1、服务器端不支持；
     * 2、日期类型处理方案待定。
     * @private
     * @param {?} mapping
     * @param {?} value
     * @return {?}
     */
    setValueToUIState(mapping, value) {
        /** @type {?} */
        const uiState = this.getRootUIState();
        uiState[mapping] = value;
    }
}
/** @nocollapse */
BefVariableManager.ctorParameters = () => [
    { type: AppContext },
    { type: undefined },
    { type: Injector, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * 变量元数据
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariableMap;
    /**
     * 设置值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.innerValueMap;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.appContext;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariables;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.injector;
}
export { BefVariableManager };
//# sourceMappingURL=data:application/json;base64,