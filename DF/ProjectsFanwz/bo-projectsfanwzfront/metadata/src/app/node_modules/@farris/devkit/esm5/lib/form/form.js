import * as tslib_1 from "tslib";
// tslint:disable: max-line-length
import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { FormControl, FormGroup } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { MetadataUtil } from '../metadata/index';
import { ChangeType } from '../binding-data/index';
import { NG_FORM_CONTROL, NG_CHILD_FORM, NG_VALIDATE_FORM } from './decorators';
import { DateUtil } from '../utils/index';
import { ValidationTypes } from '../entity/validator/validation_types';
import { ValidationExecutor } from '../entity/validator/validation_executor';
import * as ValidatorJS from 'validator';
import { DataTypeInfo, RunMode } from '../core';
import { TranslateService } from '../i18n/translate_service';
/**
 * 表单定义
 */
var Form = /** @class */ (function (_super) {
    tslib_1.__extends(Form, _super);
    /**
     * 构造函数
     */
    function Form() {
        var _this = _super.call(this, {}, null, null) || this;
        _this.raisedByValidateEffector = false;
        _this.isShowValidationMsg = false;
        _this.validatorJs = ValidatorJS.default;
        _this.controlIdMap = {};
        _this.cardControls = {};
        _this.isShowPropMap = {};
        return _this;
        // this.excludeRuleTypes = {};
    }
    Object.defineProperty(Form.prototype, "formGroupName", {
        /**
         * 名称
         */
        get: function () {
            return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "enableValidate", {
        /**
         * 是否启用表单验证
         */
        get: function () {
            return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "translateService", {
        get: function () {
            return this.translate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 将formControl的错误信息更新到cardControl上
     */
    Form.updateErrors = function (propertyName, errorObj, id, value, isGrid) {
        Object.keys(Form.insMap).forEach(function (key) {
            var form = Form.insMap[key];
            if (!form) {
                return;
            }
            if (id) {
                form.setControlValue(propertyName, value);
            }
            if (form.enableValidate) {
                form.isFormValid(propertyName, errorObj, id, isGrid);
            }
        });
    };
    /**
     * 设置dom属性为显示状态
     * @param domPropertyName dom属性
     */
    Form.prototype.setIsShowmap = function (domPropertyName) {
        this.isShowPropMap[domPropertyName] = true;
    };
    Form.prototype.setShowValidationMsg = function (flag) {
        this.raisedByValidateEffector = false;
        this.isShowValidationMsg = flag;
    };
    Form.prototype.setControlValue = function (key, value) {
        var bindingObject = this.bindingData && this.bindingData.getObject() || null;
        if (bindingObject && bindingObject.controlMap) {
            bindingObject.controlMap[key] = this.getGridItemControl(key, value);
        }
    };
    /**
     * 根据dom属性名称获取错误信息
     * @param domPropertyName dom属性名称
     */
    Form.prototype.getCardControlErrors = function (domPropertyName) {
        this.setIsShowmap(domPropertyName);
        return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
    };
    /**
     * 获取字段校验错误
     * @param domPropertyName
     * @returns
     */
    Form.prototype.getFormControlErrors = function (domPropertyName) {
        return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
    };
    Form.prototype.getGridControlErrors = function (domPropertyName, id) {
        this.setIsShowmap(domPropertyName);
        return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];
    };
    Form.prototype.isFormValid = function (propertyName, errorObj, id, isGrid) {
        var _this = this;
        var prefix = '';
        // 如果校验信息是由表达式触发的，不处理
        if (this.raisedByValidateEffector) {
            return;
        }
        if (isGrid === true) {
            // 如果是grid，说明是子表，需要拼接子表frontNodeCode
            var bindingPaths = this.bindingPath.split('/').filter(function (p) { return p; });
            if (bindingPaths.length > 0) {
                prefix = bindingPaths.join('.').concat('.');
            }
        }
        // 界面上绑定的字段名
        var domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);
        // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件
        if (propertyName && !domPropertyName) {
            return true;
        }
        // 若界面上不存在当前属性（动态列），不进行验证
        if (domPropertyName && !this.isShowPropMap[domPropertyName]) {
            return true;
        }
        var isValid = true;
        var bindingObject = this.bindingData.getObject();
        var currentId = bindingObject.primaryKeyValue;
        var isSubForm = this.bindingPath !== '/';
        var bindingList = this.bindingData.getList();
        // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况
        if (isSubForm && bindingList.innerList.size === 0) {
            return true;
        }
        // 无数据时不做校验
        if (!currentId) {
            return true;
        }
        // dataGrid修改时，根据id，创建formControl，并设置错误对象
        if (id && domPropertyName) {
            // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {
            //   this.controlIdMap[id] = {};
            // }
            this.controlIdMap[id] = this.controlIdMap[id] || {};
            this.controlIdMap[id][domPropertyName] = {
                errors: errorObj
            };
        }
        // 将grid的FormControl同步到界面展示用的controlIDMap中
        // const currentBindingObject = bindingList.currentItem as BindingObject;
        var currentBindingObject = bindingObject;
        if (id && id !== currentId) {
            return;
        }
        // 验证全部字段时，清空已有的错误信息
        if (!propertyName && !id) {
            currentBindingObject.controlMap = {};
            this.controlIdMap = {};
            this.cardControls = {};
        }
        Object.keys(this.controls).forEach(function (key) {
            if (_this.isShowPropMap[key] !== true) {
                return;
            }
            // 同步实体错误信息
            if (key === domPropertyName) {
                // 实体验证的信息直接赋值
                if (errorObj && Object.keys(errorObj).length > 0) {
                    // 卡片的错误
                    if (!isGrid) {
                        // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息
                        // 遍历错误，将validator返回的错误信息国际化
                        Object.keys(errorObj).map(function (validType) {
                            var validationError = errorObj[validType] && errorObj[validType]['error'] || null;
                            if (validationError) {
                                var validateRule = validationError.rule;
                                var ngFormControl = _this.getngFormControlByBinding(validateRule.property);
                                if (ngFormControl) {
                                    validateRule.property = ngFormControl.name;
                                    validateRule.targetId = ngFormControl.id;
                                    validateRule.targetName = _this.formGroupName;
                                    var messageTemplate = ValidationTypes.getMessage(validType);
                                    var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);
                                    errorObj[validType]['name'] = invalidMessage;
                                }
                                // todo: ngFormControl暂时不设置
                                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);
                            }
                        });
                        _this.cardControls[key] = {
                            errors: errorObj
                        };
                    }
                }
                else {
                    _this.cardControls[key] = {};
                }
            }
            if (_this.controls[key] && _this.controls[key].errors && Object.keys(_this.controls[key].errors).length > 0) {
                // 将错误同步到界面展示的位置
                // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息
                _this.cardControls[key] = {
                    errors: tslib_1.__assign({}, _this.cardControls[key] && _this.cardControls[key].errors, _this.controls[key].errors)
                };
                // 处理只开启前端校验，未在BE上启用必填校验的情况
                if (_this.cardControls) {
                    Object.keys(_this.cardControls).forEach(function (key) {
                        if (_this.cardControls[key] && _this.cardControls[key].errors) {
                            Object.keys(_this.cardControls[key].errors).forEach(function (validType) {
                                if (typeof _this.cardControls[key].errors[validType] !== 'object') {
                                    // 获取对应的校验信息
                                    var validateRules = _this.ngFormControls[key].validRules || [];
                                    var rules = [].concat(validateRules);
                                    var validateRule = rules.find(function (item) { return item.type === validType; });
                                    if (validateRule) {
                                        validateRule.targetName = _this.formGroupName;
                                        var messageTemplate = ValidationTypes.getMessage(validType);
                                        var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');
                                        _this.cardControls[key].errors[key] = { value: _this.controls[key] && _this.controls[key].value || '', name: invalidMessage };
                                    }
                                }
                            });
                        }
                    });
                }
                isValid = false;
                return false;
            }
        });
        Object.keys(this.cardControls).forEach(function (key) {
            if (_this.cardControls[key] && _this.cardControls[key].errors && Object.keys(_this.cardControls[key].errors).length > 0) {
                isValid = false;
                return false;
            }
        });
        return isValid;
    };
    /**
     * 更新表单错误信息
     * @param errors 错误消息
     */
    Form.prototype.updateFormErrors = function (errors, forceShow, from) {
        var _this = this;
        if (forceShow === void 0) { forceShow = false; }
        if (from === void 0) { from = ''; }
        if (from && from === 'backend') {
            this.clearBackendError();
        }
        // 原来是否已经显示错误，如果已经显示了则增加，否则替换
        if (this.isShowValidationMsg === true || forceShow === true) {
            this.isShowValidationMsg = true;
            Object.keys(errors).forEach(function (key) {
                if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {
                    _this.cardControls[key] = {
                        errors: tslib_1.__assign({}, _this.cardControls[key] && _this.cardControls[key].errors, errors[key].errors)
                    };
                }
                else {
                    // 移除内存中的错误信息
                    _this.cardControls[key] = {
                        errors: {}
                    };
                    // 重置控件错误信息
                    _this.controls[key].setErrors(null);
                    _this.controls[key].markAsTouched();
                }
            });
        }
    };
    /**
     * 清空后端消息
     */
    Form.prototype.clearBackendError = function () {
        var _this = this;
        Object.keys(this.cardControls).forEach(function (key) {
            var errors = _this.cardControls[key] && _this.cardControls[key].errors || null;
            if (errors) {
                Object.keys(errors).forEach(function (errorType) {
                    if (errorType && errorType.startsWith('backend-message-')) {
                        delete errors[errorType];
                    }
                });
                if (errors && Object.keys(errors).length === 0) {
                    delete _this.cardControls[key].errors;
                }
            }
            else {
                _this.cardControls[key] = {};
            }
        });
    };
    /**
     * 根据实体属性获取ngFormControl
     * @param binding 控件绑定的实体属性名
     */
    Form.prototype.getngFormControlByBinding = function (binding) {
        return Object.values(this.ngFormControls).find(function (ngFormControl) { return ngFormControl.binding && ngFormControl.binding === binding; });
    };
    /**
     * 根据dom属性和校验类型获取错误信息
     * @param domProperty dom属性
     * @param validateRuleType 校验类型
     */
    Form.prototype.getErrorMessage = function (domProperty, validateRuleType) {
        var formControl = this.ngFormControls[domProperty];
        if (formControl) {
            var validRules = formControl.validRules;
            var rules = [];
            if (!Array.isArray(validRules)) {
                rules.push(validRules);
            }
            else {
                rules.push.apply(rules, tslib_1.__spread(validRules));
            }
            var rule = rules.find(function (item) { return item.type === validateRuleType; });
            if (rule) {
                var controlName = formControl.name;
                var messageTemplate = ValidationTypes.getMessage(validateRuleType);
                var message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);
                return message;
            }
            return null;
        }
        return null;
    };
    /**
     * 初始化Form
     * @param context 上下文
     */
    Form.prototype.init = function (bindingData, bindingPath, frameContext) {
        this.frameContext = frameContext;
        this.bindingData = bindingData;
        this.bindingPath = bindingPath;
        this.buildForm();
        // @todo: 这种方式做key，如果脚本被压缩，存在风险
        Form.insMap[this.constructor.name] = this;
    };
    /**
     * 构造表单
     */
    Form.prototype.buildForm = function () {
        this.collectMetadatas();
        // this.createChildFormArrays();
        this.createChildForms();
        this.createControls();
    };
    /**
     * 重置表单验证信息
     */
    Form.prototype.resetCardValidMsg = function () {
        var _this = this;
        this.cardControls = {};
        // 剔除 列表中新增后取消,删除的项对应的control信息
        Object.keys(this.controlIdMap).forEach(function (id) {
            if (!_this.bindingData.getList().innerList.map(function (x) { return x.id; }).includes(id)) {
                delete _this.controlIdMap[id];
            }
        });
        this.resetFormControls();
        this.setShowValidationMsg(false);
    };
    /**
     * 更新字段校验规则
     * @param propertyName 属性名
     * @param isRequired 是否必填
     */
    Form.prototype.updateFieldValidateRule = function (propertyName, isRequired) {
        var _this = this;
        var formControl = this.controls[propertyName];
        // 清空全部校验条件
        if (formControl) {
            formControl.clearValidators();
            formControl.markAsUntouched();
            formControl.markAsPristine();
            formControl.setErrors([]);
        }
        // 动态必填场景时生成器不再在formControl上生成必填规则
        // 因此validRules可能为空
        var ngFormControl = this.ngFormControls[propertyName];
        var validateRules = ngFormControl && ngFormControl.validRules || [];
        if (!Array.isArray(validateRules)) {
            validateRules = [validateRules];
        }
        var requiredRuleIndex = validateRules.findIndex(function (validateRule) { return validateRule.type === ValidationTypes.REQUIRED; });
        if (isRequired) {
            // 必填但控件没有必填规则，添加必填规则
            if (requiredRuleIndex == -1) {
                var validateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };
                // 扩展属性，以生成正确的错误提示
                var displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';
                validateRule.targetId = ngFormControl && ngFormControl.id || null;
                validateRule.targetName = this.formGroupName;
                validateRule.property = displayFieldName;
                validateRule.field = ngFormControl && ngFormControl.binding;
                validateRules.push(validateRule);
            }
        }
        else {
            // 非必填场景，如果有必填规则，移除
            if (requiredRuleIndex !== -1) {
                validateRules.splice(requiredRuleIndex, 1);
            }
        }
        // 整理校验规则
        var validators = [];
        Array.prototype.forEach.call(validateRules, (function (ruleObj) {
            var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propertyName]);
            if (validateFn) {
                validators.push(validateFn);
            }
        }));
        this.ngFormControls[propertyName].validRules = validateRules;
        this.controls[propertyName].setValidators(validators);
    };
    Form.prototype.addFieldValidateRule = function (propertyName, message, expressionId, ruleType) {
        var formControl = this.controls[propertyName];
        if (formControl) {
            // 清空全部校验条件
            formControl.setErrors(null);
        }
        var ngFormControl = this.ngFormControls[propertyName];
        var validateRules = this.ngFormControls[propertyName].validRules;
        if (!validateRules) {
            validateRules = [];
        }
        if (!Array.isArray(validateRules)) {
            validateRules = [validateRules];
        }
        var index = validateRules.findIndex(function (rule) { return rule && rule.expressionId === expressionId; });
        if (index !== -1) {
            validateRules.splice(index, 1);
        }
        var bindingPath = this.frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var fieldName = propertyName;
        if (bindingPaths.length !== 0) {
            var prefix = bindingPaths.join('/');
            var binding = ngFormControl.binding || '';
            var property = binding.split('.').join('/');
            fieldName = prefix + "/" + property;
        }
        var context = this.frameContext;
        var validateRule = {
            type: ruleType,
            message: message,
            expressionId: expressionId,
            constraints: [],
            bindingPath: bindingPaths.join('/'),
            eval: function (options) {
                return context.viewModel.expression.validate(expressionId, options);
            }
        };
        validateRules.push(validateRule);
        this.ngFormControls[propertyName].validRules = validateRules;
        // if (this.ngFormControls[propertyName] && validateRules.length > 0) {
        //   const validators: ValidatorFn[] = [];
        //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {
        //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);
        //     if (validateFn) {
        //       validators.push(validateFn);
        //     }
        //   }));
        //   this.controls[propertyName].setValidators(validators);
        // }
    };
    /**
     * 根据规则对象生成validator
     * @param ruleObj: ValidateRule
     */
    Form.prototype.getValidatorByRuleObj = function (ruleObj, ngFormControl) {
        var _this = this;
        var type = ruleObj.type, _a = ruleObj.constraints, constraints = _a === void 0 ? [] : _a, _b = ruleObj.message, message = _b === void 0 ? null : _b;
        var displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';
        var ruleHandlerObj = {
            required: function (control) {
                var value = control.value;
                var isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';
                var parentPaths = _this.bindingPath.split('/').filter(function (p) { return p; });
                var controlPaths = ngFormControl.binding.split('.');
                var paths = parentPaths.concat(controlPaths);
                var propInfo = _this.getPropInfoByPath(paths);
                var isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;
                if (isMultiLangInput) {
                    var currentLanguage = TranslateService.getCurrentLanguage();
                    var currentLangValue = value && value[currentLanguage];
                    isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';
                }
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                if (isValid && control.errors && control.errors.required) {
                    // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题
                    delete control.errors.required;
                    _this.isFormValid(paths.join('.'));
                }
                return isValid ? null : { required: { value: control.value, name: invalidMessage } };
            },
            maxLength: function (control) {
                var isInValid = control.value && control.value.toString().length > constraints[0];
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;
            },
            minLength: function (control) {
                var isInValid = control.value && control.value.toString().length < constraints[0];
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;
            },
            minValue: function (control) {
                var isInValid = false;
                var invalidMessage = '';
                // 这里只做最小值判断，如果用户未输入则不应该做判断
                if (control.value === null || control.value === undefined) {
                    return null;
                }
                if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                    isInValid = control.value < constraints[0];
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;
                }
                else if (ngFormControl && ngFormControl.bigNumber === true) {
                    // 大数
                    var minValue = new BigNumber(constraints[0]);
                    var value = new BigNumber(control.value);
                    isInValid = minValue.isGreaterThan(value);
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                else {
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);
                    // 假定为日期
                    // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或""，则不对比大小，无意义
                    if (!constraints || constraints.length < 1 || !constraints[0]) {
                        return null;
                    }
                    if (control.value instanceof Date) {
                        isInValid = control.value < new Date(constraints[0]);
                    }
                    else {
                        isInValid = new Date(control.value) < new Date(constraints[0]);
                    }
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;
            },
            maxValue: function (control) {
                var isInValid = false;
                var invalidMessage = '';
                if (control.value === null || control.value === undefined) {
                    return null;
                }
                if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                    isInValid = control.value > constraints[0];
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;
                }
                else if (ngFormControl && ngFormControl.bigNumber === true) {
                    // 大数
                    var maxValue = new BigNumber(constraints[0]);
                    var value = new BigNumber(control.value);
                    isInValid = maxValue.isLessThan(value);
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                else {
                    // 假定为日期
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);
                    if (control.value instanceof Date) {
                        isInValid = control.value > new Date(constraints[0]);
                        // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;
                    }
                    else {
                        isInValid = new Date(control.value) > new Date(constraints[0]);
                        // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;
                    }
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;
            },
            exclude: function (control) {
                var isValid = typeof control.value === 'string' && !_this.validatorJs.contains(control.value, constraints[0]);
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };
            },
            matches: function (control) {
                var value = (control.value === null || control.value === undefined) ? '' : control.value.toString();
                var isValid = value === '' ? true : _this.validatorJs.matches(value, constraints[0]);
                var invalidMessage = message;
                if (!invalidMessage) {
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isValid ? null : { matches: { value: control.value, name: invalidMessage } };
            }
        };
        return ruleHandlerObj[type];
    };
    /**
     * 搜集属性装饰器
     */
    Form.prototype.collectMetadatas = function () {
        this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :
            MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM, this.translateService, ['formGroupName']);
        this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);
        this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);
    };
    Form.prototype.collectionFormControlMetadats = function (preloadMetadata) {
        var _this = this;
        if (preloadMetadata === void 0) { preloadMetadata = null; }
        var metadatas = preloadMetadata ? MetadataUtil.translateMetadataByName(preloadMetadata, this.translateService, ['name']) :
            MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);
        // 向验证规则中附加表单信息，用于显示验证提示。
        if (metadatas) {
            Object.keys(metadatas).forEach(function (propName) {
                var ngFormControl = metadatas[propName];
                var displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';
                var formControlId = ngFormControl.id;
                if (Array.isArray(ngFormControl.validRules)) {
                    ngFormControl.validRules.forEach(function (validationRule) {
                        validationRule.targetId = formControlId;
                        validationRule.targetName = _this.formGroupName;
                        validationRule.property = displayFieldName;
                        validationRule.field = ngFormControl.binding;
                    });
                }
            });
        }
        return metadatas;
    };
    // 获取grid中每条数据的formControl
    Form.prototype.getGridItemControl = function (propName, value) {
        var _this = this;
        var createControlFromRules = function (propertyName) {
            var validators = [];
            // 设置form中定义的验证规则
            if (_this.ngFormControls[propertyName] && Array.isArray(_this.ngFormControls[propertyName].validRules)) {
                Array.prototype.forEach.call(_this.ngFormControls[propertyName].validRules, (function (ruleObj) {
                    var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propertyName]);
                    if (validateFn) {
                        validators.push(validateFn);
                    }
                }));
            }
            return new FormControl(value, { validators: validators, updateOn: 'blur' });
        };
        return createControlFromRules(propName);
    };
    // 根据实体属性名获取界面绑定的属性名
    Form.prototype.getDomPropertyNameByEntityProp = function (propertyName, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = ''; }
        var domPropertyName = '';
        Object.keys(this.ngFormControls).forEach(function (key) {
            var binding = "" + prefix + _this.ngFormControls[key].binding;
            if (binding === propertyName) {
                domPropertyName = key;
            }
        });
        return domPropertyName;
    };
    /**
     * 创建FormControl
     */
    Form.prototype.createControls = function () {
        var _this = this;
        Object.keys(this.ngFormControls).forEach(function (propName) {
            var ngFormControl = _this.ngFormControls[propName];
            var validators = [];
            // 设置form中定义的验证规则
            if (Array.isArray(_this.ngFormControls[propName].validRules)) {
                Array.prototype.forEach.call(_this.ngFormControls[propName].validRules, (function (ruleObj) {
                    var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propName]);
                    if (validateFn) {
                        validators.push(validateFn);
                    }
                }));
            }
            var updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';
            var control = new FormControl(null, { validators: validators, updateOn: updateOn });
            if (ngFormControl.binding) {
                _this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);
            }
            _this.controls[propName] = control;
            _this[propName] = control;
        });
    };
    /**
     * 创建FormGroup
     */
    Form.prototype.createChildForms = function () {
        var _this = this;
        Object.keys(this.ngChildForms).forEach(function (propName) {
            var ngFormGroup = _this.ngChildForms[propName];
            // 构造子Form
            var formGroup = new ngFormGroup.formType();
            formGroup.init(_this.bindingData, _this.bindingPath, _this.frameContext);
            _this.controls[propName] = formGroup;
            _this[propName] = formGroup;
        });
    };
    /*
    * 新增FormControls
     */
    Form.prototype.addControls = function (column, converter) {
        var updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';
        var formControl = new FormControl('', { updateOn: updateOn });
        var fieldPath = column.dataField;
        // 日期格式  需要格式化
        // this.setUpBindingDataPipeline(formControl, fieldPath, converter);
        if (column.editor && column.editor.binding) {
            this.setUpBindingDataPipeline(formControl, fieldPath, converter);
            this.controls[column.editor.binding.path] = formControl;
            this[column.editor.binding.path] = formControl;
        }
    };
    /**
     * 搭建control和table之间的通道
     * @param control 控件
     * @param bindingFieldPath 绑定的字段名
     */
    Form.prototype.setUpBindingDataPipeline = function (control, bindingFieldPath, converter) {
        var _this = this;
        if (!this.bindingData) {
            throw Error('当前组件上下文中找不到BindingData，请检查！');
        }
        // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息
        if (converter) {
            converter['__FRAME_CONTEXT__'] = this.frameContext;
        }
        // 将bindignPath与bindingFieldPath合并
        if (this.bindingPath.length > 1) {
            bindingFieldPath = this.bindingPath.substr(1).replace(/\//g, '.') + '.' + bindingFieldPath;
        }
        var bindingPaths = bindingFieldPath.split('.');
        var propertyName = bindingPaths[bindingPaths.length - 1];
        // 设置初始值
        var initValue = this.getValueFromBindingData(bindingPaths, converter);
        control.setValue(initValue);
        // 设置初始值
        // BindingData => control
        this.bindingData.changes.pipe(filter(function (change) {
            var bindingObject = _this.bindingData.getObject();
            var changePath = change.path.join('.');
            if (change.isUdt) {
                return changePath === bindingFieldPath;
            }
            if (change.type === ChangeType.ValueChanged) {
                // path完全匹配
                return changePath === bindingFieldPath;
            }
            else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {
                // 对于ObjectChanged、SelectionChanged，匹配到父级
                var changePathWithDot = changePath === '' ? changePath : changePath + '.';
                // 主表新增或切换时，重置错误信息
                if (change && change.type === ChangeType.Load) {
                    _this.resetCardValidMsg();
                }
                return bindingFieldPath.indexOf(changePathWithDot) === 0;
            }
            else if (change.type === ChangeType.UpdateErrors) {
                if (changePath === bindingFieldPath) {
                    _this.cardControls[propertyName] = _this.cardControls[propertyName] || {};
                    if (bindingFieldPath && _this.controls[propertyName]) {
                        if (bindingObject.primaryKeyValue === change.id) {
                            _this.cardControls[propertyName].errors = change.errors;
                        }
                        else {
                            // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面
                            // this.cardControls[propertyName].errors = null;
                            // this.isFormValid(bindingFieldPath);
                        }
                    }
                    // 没有错误时
                    if (!change.path || !bindingFieldPath || !change.errors) {
                        _this.cardControls[propertyName].errors = null;
                        _this.isFormValid(bindingFieldPath);
                    }
                    return false;
                }
            }
            else {
                return false;
            }
        })).subscribe(function (change) {
            var fullEntityProp = propertyName;
            // udt字段展示时需要将父级属性名和自身属性名用'_'连接
            var pathPrefix = '';
            if (change.isUdt) {
                if (change.isGrid) {
                    // grid 将从表主字段去除
                    change.path.shift();
                }
                if (change.path.length) {
                    pathPrefix = change.path.join('.');
                }
                fullEntityProp = pathPrefix;
            }
            var value = _this.bindingData.getValue(bindingPaths, false);
            var newControlValue = converter ? converter.convertFrom(value) : value;
            // 设置FormControl
            var domPropName = _this.getDomPropertyNameByEntityProp(fullEntityProp);
            _this.cardControls[domPropName] = _this.cardControls[domPropName] || {};
            if (change.errors) {
                _this.cardControls[domPropName].errors = change.errors;
            }
            // dataGrid保存时，根据id，创建formControl，并设置错误对象
            if (change.id) {
                if (_this.controlIdMap[change.id] && Object.keys(_this.controlIdMap[change.id]).length === 0) {
                    _this.controlIdMap[change.id] = {};
                }
                _this.controlIdMap[change.id] = _this.controlIdMap[change.id] || {};
                if (change.errors) {
                    _this.controlIdMap[change.id][domPropName] = {
                        errors: change.errors
                    };
                }
            }
            // 如果和控件上的值一样，则不再更新控件的值
            if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {
                return;
            }
            // 正则判断是否为日期
            control.setValue(newControlValue);
        });
        // control => BindingData
        control.valueChanges.subscribe(function (value) {
            var oldBindingValue = _this.bindingData.getValue(bindingPaths);
            // 如果是日期，比较年月日是否相等，相等则不重新赋值
            if (value && value.constructor && value.constructor.name === 'Date') {
                if (oldBindingValue && converter) {
                    var oldValue = converter.convertFrom(oldBindingValue);
                    if (_this.compareDate(value, oldValue) === true) {
                        return;
                    }
                }
            }
            // 如果是日期，比较年月日是否相等，相等则不重新赋值
            if (_this.isDate(converter) === true) {
                if (DateUtil.isEqual(value, oldBindingValue) === true) {
                    return;
                }
            }
            // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData
            var newBindingValue = converter ? converter.convertTo(value) : value;
            if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {
                return;
            }
            // if (!this.isFormValid(propertyName, null, null, false)) {
            //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};
            //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);
            // } else {
            _this.clearBackEndMessages(propertyName);
            var emitEventToView = _this.frameContext.appContext.runMode === RunMode.highSpeed;
            _this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: _this.frameContext });
            //}
        });
    };
    /**
     * 判断是否是日期字段
     * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；
     * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；
     * 3、不能使用constructor.name,压缩后name变了；
     * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况
     * @todo
     * 为日期字段添加注解，根据注解来判断
     */
    Form.prototype.isDate = function (converter) {
        var isDateConverter = false;
        // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {
        //   isDateConverter = true;
        // }
        if (converter && converter.hasOwnProperty('format') === true) {
            isDateConverter = true;
        }
        return isDateConverter;
    };
    /**
     * 比较日期（只比较年月日）
     */
    Form.prototype.compareDate = function (srcDate, dstDate) {
        if (!srcDate || !dstDate) {
            return srcDate === dstDate;
        }
        var isEqual = srcDate.getFullYear() === dstDate.getFullYear()
            && srcDate.getMonth() === dstDate.getMonth()
            && srcDate.getDate() === dstDate.getDate()
            && srcDate.getHours() === dstDate.getHours()
            && srcDate.getMinutes() === dstDate.getMinutes()
            && srcDate.getSeconds() === dstDate.getSeconds();
        return isEqual;
    };
    Form.prototype.getPropInfoByPath = function (path) {
        var entityType = this.frameContext && this.frameContext.repository.entityType || null;
        if (entityType) {
            var dataTypeInfo = new DataTypeInfo(entityType);
            var propInfo = dataTypeInfo.getPropInfoByPath(path);
            return propInfo;
            // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;
        }
        return null;
    };
    /**
     * 从BindingData中获取指定路径的值
     */
    Form.prototype.getValueFromBindingData = function (bindingPaths, converter) {
        var value = this.bindingData.getValue(bindingPaths);
        var converteredValue = converter ? converter.convertFrom(value) : value;
        return converteredValue;
    };
    Form.prototype.getEntityValueChangingListeners = function () {
        var _this = this;
        var listeners = {};
        Object.keys(this.ngFormControls).forEach(function (propName) {
            var ngFormControl = _this.ngFormControls[propName];
            if (ngFormControl.valueChanging) {
                listeners[ngFormControl.binding] = ngFormControl.valueChanging;
            }
        });
        return listeners;
    };
    Form.prototype.getEntityValueChangedListeners = function () {
        var _this = this;
        var listeners = {};
        Object.keys(this.ngFormControls).forEach(function (propName) {
            var ngFormControl = _this.ngFormControls[propName];
            if (ngFormControl.valueChanged) {
                listeners[ngFormControl.binding] = ngFormControl.valueChanged;
            }
        });
        return listeners;
    };
    /**
     * 获取所有的前端验证规则
     * @description
     * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔
     */
    Form.prototype.getValidationRules = function () {
        var _this = this;
        var validatoinRules = new Map();
        var parentPath = this.bindingPath;
        if (parentPath.length && parentPath === '/') {
            parentPath = '';
        }
        Object.keys(this.ngFormControls).forEach(function (propName) {
            // const fieldName = `${parentPath}/${propName}`;
            if (_this.isShowPropMap[propName] === true || Object.keys(_this.isShowPropMap).length === 0) {
                var ngFormControl_1 = _this.ngFormControls[propName];
                var displayFieldName_1 = ngFormControl_1.name || ngFormControl_1.defaultI18nValue || '';
                var bindingPathArray = ngFormControl_1.binding ? ngFormControl_1.binding.split('.') : [propName];
                var fieldNameArray = tslib_1.__spread([parentPath], bindingPathArray);
                var fieldName_1 = fieldNameArray.join('/');
                if (Array.isArray(ngFormControl_1.validRules) && ngFormControl_1.validRules.length > 0) {
                    var validationrulesToAdd = tslib_1.__spread(ngFormControl_1.validRules);
                    // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {
                    //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));
                    // }
                    validationrulesToAdd.forEach(function (validationRule) {
                        validationRule.targetId = ngFormControl_1.id;
                        validationRule.targetName = _this.formGroupName;
                        validationRule.property = displayFieldName_1;
                        validationRule.field = ngFormControl_1.binding;
                        validationRule.fullPath = fieldName_1;
                        if (_this.frameContext) {
                            validationRule.frameContext = _this.frameContext;
                        }
                    });
                    validatoinRules.set(fieldName_1, validationrulesToAdd);
                }
                else {
                    validatoinRules.set(fieldName_1, [{
                            type: 'setDisplayInfo',
                            targetId: ngFormControl_1.id,
                            targetName: _this.formGroupName,
                            property: displayFieldName_1,
                            fullPath: fieldName_1,
                            frameContext: _this.frameContext
                        }]);
                }
            }
        });
        return validatoinRules;
    };
    Form.prototype.setTranslateService = function (translateService) {
        if (!translateService) {
            return;
        }
        this.translate = translateService;
        ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());
    };
    /**
     * 重置控件状态
     */
    Form.prototype.resetFormControls = function () {
        var _this = this;
        if (Object.keys(this.controls).length > 0) {
            Object.keys(this.controls).forEach(function (prop) {
                var formControl = _this.controls[prop];
                formControl.markAsUntouched();
                formControl.markAsPristine();
            });
        }
    };
    Form.prototype.clearBackEndMessages = function (domPropertyName) {
        var _this = this;
        if (domPropertyName) {
            if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(function (item) { return item.startsWith('message-'); })) {
                var messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(function (item) { return item.startsWith('message-'); });
                var errors_1 = tslib_1.__assign({}, this.cardControls[domPropertyName]['errors']);
                messageKeys.forEach(function (key) { return delete errors_1[key]; });
                this.cardControls[domPropertyName] = { errors: errors_1 };
            }
        }
        else {
            Object.keys(this.cardControls).forEach(function (propertyName) {
                if (_this.cardControls[propertyName] && _this.cardControls[propertyName]['errors'] && !!Object.keys(_this.cardControls[propertyName]['errors']).find(function (item) { return item.startsWith('message-'); })) {
                    var messageKeys = Object.keys(_this.cardControls[propertyName]['errors']).filter(function (item) { return item.startsWith('message-'); });
                    var errors_2 = tslib_1.__assign({}, _this.cardControls[propertyName]['errors']);
                    messageKeys.forEach(function (key) { return delete errors_2[key]; });
                    _this.cardControls[propertyName] = { errors: errors_2 };
                }
            });
        }
    };
    /**
     * 存放所有实例的映射
     */
    Form.insMap = {};
    Form.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Form.ctorParameters = function () { return []; };
    return Form;
}(FormGroup));
export { Form };
//# sourceMappingURL=data:application/json;base64,