/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, Renderer2, TemplateRef, ViewChild, ViewEncapsulation, HostBinding, ViewContainerRef, ComponentFactoryResolver, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { UpdateHostClassService as UpdateCls } from './services/update-host-class.service';
import { slideMotion } from './animations/slide';
import { toBoolean, convertToDate, convertToStr } from './utils/convert';
import { TimePickerPanelComponent } from './time-picker-panel.component';
import { TimePickerLocaleService } from './services/time-picker.locale.service';
/** @type {?} */
let num = 0;
export class TimePickerComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} vcRef
     * @param {?} cfr
     * @param {?} cdr
     * @param {?} localeService
     */
    constructor(element, renderer, vcRef, cfr, cdr, localeService) {
        this.element = element;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.cdr = cdr;
        this.localeService = localeService;
        this.hostCls = true;
        this._disabled = false;
        this._readonly = false;
        this._editable = true;
        this._allowEmpty = true;
        this._autoFocus = false;
        this._hideDisabledOptions = false;
        this.cRef = null;
        this.isInit = false;
        this.groupIcon = '<i class="f-icon f-icon-timepicker"></i>';
        this.display = 'block';
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        this.clearText = 'clear';
        this.popupClassName = '';
        this.defaultOpenValue = new Date();
        this.format = 'HH:mm:ss';
        this.isOpen = false;
        this.openChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.clear = new EventEmitter();
        this._use12Hours = false;
        this.changeFlag = false;
        if (this.localeService) {
            /** @type {?} */
            const localConfig = this.localeService.getLocaleConfig();
            this.placeholder = this.placeholder !== undefined ?
                this.placeholder :
                localConfig.placeholder ? localConfig.placeholder : '请选择时间';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set use12Hours(value) {
        this._use12Hours = !!value;
        if (value && this.format) {
            this.format = this.format.replace(/H/g, 'h');
        }
        else if (!value && this.format) {
            this.format = this.format.replace(/h/g, 'H');
        }
        if (this._use12Hours) {
            if (!this.format || this.format.indexOf('a') === -1) {
                this.format = 'hh:mm:ss a';
            }
        }
    }
    /**
     * @return {?}
     */
    get use12Hours() {
        return this._use12Hours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hideDisabledOptions(value) {
        this._hideDisabledOptions = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideDisabledOptions() {
        return this._hideDisabledOptions;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowEmpty(value) {
        this._allowEmpty = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get allowEmpty() {
        return this._allowEmpty;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoFocus(value) {
        this._autoFocus = toBoolean(value);
        this.updateAutoFocus();
    }
    /**
     * @return {?}
     */
    get autoFocus() {
        return this._autoFocus;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set readonly(value) {
        this._readonly = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set editable(value) {
        this._editable = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get editable() {
        return this._editable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
        if (this._onChange) {
            this._onChange(this.value);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { use12Hours } = changes;
        if (use12Hours && (!this.format || this.format.indexOf('a') === -1)) {
            this.format = 'hh:mm:ss a';
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.isInit = true;
        this.updateAutoFocus();
        if (!document.body.querySelector('.time-picker-overlay')) {
            this.overlayRef = this.renderer.createElement('div');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayRef, 'time-picker-overlay');
            this.renderer.addClass(this.overlayPanelRef, `overlay-panel-${num++}`);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
            document.body.appendChild(this.overlayRef);
        }
        else {
            this.overlayRef = document.body.querySelector('.time-picker-overlay');
            this.overlayPanelRef = this.renderer.createElement('div');
            this.renderer.addClass(this.overlayPanelRef, `overlay-panel-${num++}`);
            this.renderer.appendChild(this.overlayRef, this.overlayPanelRef);
        }
        this.overlayRef.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
        }));
        this.timeInput.nativeElement.addEventListener('blur', (/**
         * @return {?}
         */
        () => {
            this.onBlur();
        }));
    }
    // tslint:disable-next-line:use-life-cycle-interface
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.timeInput.nativeElement.removeEventListener('blur', this.onBlur);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.timeInput.nativeElement.value &&
            !this.readonly &&
            !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        if (!this.readonly && !this.disabled) {
            event.target.querySelector('.input-group-clear').style.display = 'none';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    open(event) {
        event.stopPropagation();
        if (this.disabled || (!this.editable && this.readonly)) {
            return;
        }
        if (this.isOpen) {
            this.close();
            return;
        }
        this.creatPanel();
        this.isOpen = true;
        this.openChange.emit(this.isOpen);
        this.renderer.appendChild(this.overlayPanelRef, this.cRef.location.nativeElement);
        this.renderer.setStyle(this.overlayRef, 'display', 'block');
        this.documentClickEvent = this.registerMouseDownEvent();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setPosition();
            this.renderer.addClass(this.cRef.location.nativeElement, 'f-area-show');
        }), 10);
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
        this.cRef.instance.opened = false;
        this.renderer.removeClass(this.cRef.location.nativeElement, 'f-area-show');
        while (this.overlayPanelRef.lastChild) {
            this.overlayPanelRef.removeChild(this.overlayPanelRef.lastChild);
        }
        this.openChange.emit(this.isOpen);
        this.focus();
        this.removeDocumentListener();
        if (this.cRef) {
            this.cRef.destroy();
            this.cRef = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerMouseDownEvent() {
        /** @type {?} */
        const mousedownEvent = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target === this.overlayPanelRef.parentElement) {
                this.renderer.setStyle(this.overlayRef, 'display', 'none');
                this.close();
            }
        });
        document.body.addEventListener('mousedown', mousedownEvent, true);
        document.body.addEventListener('mousewheel', mousedownEvent, true);
        return (/**
         * @return {?}
         */
        () => {
            document.body.removeEventListener('mousedown', mousedownEvent, true);
            document.body.removeEventListener('mousewheel', mousedownEvent, true);
        });
    }
    /**
     * @private
     * @return {?}
     */
    removeDocumentListener() {
        if (this.documentClickEvent) {
            this.documentClickEvent();
            this.documentClickEvent = null;
        }
    }
    /**
     * @return {?}
     */
    creatPanel() {
        if (this.cRef === null) {
            this.vcRef.clear();
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(TimePickerPanelComponent));
            this.cRef.location.nativeElement.classList.add('f-area-hide');
            // 解决在grid懒加载中，没有刷新视图的问题
            this.cRef.changeDetectorRef.detectChanges();
            this.cRef.instance.format = this.format;
            this.cRef.instance.hourStep = this.hourStep;
            this.cRef.instance.minuteStep = this.minuteStep;
            this.cRef.instance.secondStep = this.secondStep;
            this.cRef.instance.disabledHours = this.disabledHours;
            this.cRef.instance.disabledMinutes = this.disabledMinutes;
            this.cRef.instance.disabledSeconds = this.disabledSeconds;
            this.cRef.instance.hideDisabledOptions = this.hideDisabledOptions;
            this.cRef.instance.use12Hours = this.use12Hours;
            this.cRef.instance.opened = this.isOpen;
            this.cRef.instance.defaultOpenValue = this.defaultOpenValue;
            this.cRef.instance.value = this.value;
            this.cRef.instance.valueChange.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                this.value = val;
                this.cdr.detectChanges();
                this.valueChange.emit(val);
            }));
        }
        else {
            this.cRef.instance.value = this.value;
        }
    }
    /**
     * @return {?}
     */
    setPosition() {
        const { top: elTop, left: elLeft, height: elHeight, width: elWidth } = this.element.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const panelHeight = 194;
        if (elTop + panelHeight + 30 > window.innerHeight) {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', `${elTop - panelHeight}px`);
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'top', `${elTop + elHeight}px`);
        }
        /** @type {?} */
        const panelWidth = this.cRef.instance.panelWidth;
        if (window.innerWidth - elLeft < panelWidth) {
            /** @type {?} */
            const r = window.innerWidth - elLeft - elWidth;
            this.renderer.setStyle(this.cRef.location.nativeElement, 'right', `${r}px`);
        }
        else {
            this.renderer.setStyle(this.cRef.location.nativeElement, 'left', `${elLeft}px`);
        }
        this.cRef.instance.opened = true;
    }
    /**
     * @return {?}
     */
    updateAutoFocus() {
    }
    /**
     * @return {?}
     */
    onClickClearBtn() {
        this.value = null;
        this.cRef.instance.time.clear();
    }
    /**
     * @return {?}
     */
    focus() {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    blur() {
        if (this.timeInput.nativeElement) {
            this.timeInput.nativeElement.blur();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.value) {
            /** @type {?} */
            const date = convertToDate(this.value, this.format);
            if (this.cRef) {
                this.cRef.instance.value = this.value;
            }
            this.value = convertToStr(date, this.format);
            if (this.changeFlag) {
                this.valueChange.emit(this.value);
                this.changeFlag = false;
            }
            if (this._onTouched) {
                this._onTouched(this.value);
            }
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onValueChange(val) {
        this.changeFlag = true;
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clear.emit();
        this.value = '';
        if (this.cRef && this.cRef.instance) {
            this.cRef.instance.time.clear();
        }
        if (this._onTouched) {
            this._onTouched(this.value);
        }
        this.cdr.detectChanges();
    }
    /**
     * @param {?} time
     * @return {?}
     */
    writeValue(time) {
        this._value = time;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
}
TimePickerComponent.decorators = [
    { type: Component, args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                // tslint:disable-next-line:component-selector
                selector: 'farris-time-picker',
                exportAs: 'timePicker',
                // styleUrls: ['./style/index.scss'],
                template: "<!-- <input-group\r\n    [groupText]=\"groupIcon\"\r\n    #inputgroup\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [(ngModel)]=\"value\"\r\n    (valueChange)=\"onValueChange($event)\"\r\n    [enableClear]=\"true\"\r\n    (clickHandle)=\"open()\"\r\n    (clear)=\"onClear()\"\r\n    [placeholder]=\"placeholder\"\r\n></input-group> -->\r\n<div\r\n    class=\"input-group\"\r\n    [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly\r\n    }\"\r\n>\r\n    <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        [attr.placeholder]=\"disabled || readonly?'':placeholder\"\r\n        name=\"farris-time-picker\"\r\n        [(ngModel)]=\"value\"\r\n        (ngModelChange)=\"onValueChange($event)\"\r\n        #timeInput\r\n        autocomplete=\"off\"\r\n        [readonly]=\"readonly || !editable\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"open($event)\"\r\n    />\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\">\r\n        <span class=\"input-group-text input-group-clear f-cmp-iconbtn\" (click)=\"onClear()\"  style=\"display: none;padding:0px 4px;\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n\r\n        <span class=\"input-group-text f-cmp-iconbtn\" (click)=\"open($event)\" style=\"padding:0px 4px;padding-top: 2px;\">\r\n            <i class=\"f-icon f-icon-timepicker\" style=\"font-size:0.85rem\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                animations: [slideMotion],
                providers: [
                    UpdateCls,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TimePickerComponent,
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
TimePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: TimePickerLocaleService }
];
TimePickerComponent.propDecorators = {
    timeInput: [{ type: ViewChild, args: ['timeInput',] }],
    hostCls: [{ type: HostBinding, args: ['class.f-component-timepicker',] }],
    display: [{ type: HostBinding, args: ['style.display',] }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    clearText: [{ type: Input }],
    popupClassName: [{ type: Input }],
    placeholder: [{ type: Input }],
    addOn: [{ type: Input }],
    defaultOpenValue: [{ type: Input }],
    disabledHours: [{ type: Input }],
    disabledMinutes: [{ type: Input }],
    disabledSeconds: [{ type: Input }],
    format: [{ type: Input }],
    isOpen: [{ type: Input }],
    use12Hours: [{ type: Input }],
    openChange: [{ type: Output }],
    valueChange: [{ type: Output }],
    clear: [{ type: Output }],
    hideDisabledOptions: [{ type: Input }],
    allowEmpty: [{ type: Input }],
    autoFocus: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    TimePickerComponent.prototype.timeInput;
    /** @type {?} */
    TimePickerComponent.prototype.hostCls;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._editable;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._allowEmpty;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._autoFocus;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._hideDisabledOptions;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.cRef;
    /** @type {?} */
    TimePickerComponent.prototype.isInit;
    /** @type {?} */
    TimePickerComponent.prototype.groupIcon;
    /** @type {?} */
    TimePickerComponent.prototype.display;
    /** @type {?} */
    TimePickerComponent.prototype.hourStep;
    /** @type {?} */
    TimePickerComponent.prototype.minuteStep;
    /** @type {?} */
    TimePickerComponent.prototype.secondStep;
    /** @type {?} */
    TimePickerComponent.prototype.clearText;
    /** @type {?} */
    TimePickerComponent.prototype.popupClassName;
    /** @type {?} */
    TimePickerComponent.prototype.placeholder;
    /** @type {?} */
    TimePickerComponent.prototype.addOn;
    /** @type {?} */
    TimePickerComponent.prototype.defaultOpenValue;
    /** @type {?} */
    TimePickerComponent.prototype.disabledHours;
    /** @type {?} */
    TimePickerComponent.prototype.disabledMinutes;
    /** @type {?} */
    TimePickerComponent.prototype.disabledSeconds;
    /** @type {?} */
    TimePickerComponent.prototype.format;
    /** @type {?} */
    TimePickerComponent.prototype.isOpen;
    /** @type {?} */
    TimePickerComponent.prototype.openChange;
    /** @type {?} */
    TimePickerComponent.prototype.valueChange;
    /** @type {?} */
    TimePickerComponent.prototype.clear;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype._use12Hours;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.overlayRef;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.overlayPanelRef;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.documentClickEvent;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.changeFlag;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.cfr;
    /** @type {?} */
    TimePickerComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    TimePickerComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS10aW1lLXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi90aW1lLXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDWSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQzdGLE1BQU0sRUFBRSxTQUFTLEVBQWlCLFdBQVcsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUNsRixnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxZQUFZLEVBQ3pFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsc0JBQXNCLElBQUksU0FBUyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0YsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDOztJQUU1RSxHQUFHLEdBQUcsQ0FBQztBQW1CWCxNQUFNLE9BQU8sbUJBQW1COzs7Ozs7Ozs7SUE2SDVCLFlBQ1ksT0FBbUIsRUFDbkIsUUFBbUIsRUFDbkIsS0FBdUIsRUFDdkIsR0FBNkIsRUFDOUIsR0FBc0IsRUFDckIsYUFBc0M7UUFMdEMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzlCLFFBQUcs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Ozs7OztJQUMxQix3Q0FBMEI7Ozs7O0lBQzFCLHdDQUF5Qjs7Ozs7SUFDekIscUNBQXVCOzs7OztJQUN2QiwwQ0FBMkI7Ozs7O0lBQzNCLHlDQUEyQjs7Ozs7SUFDM0Isd0NBQTJDOzs7OztJQUMzQyx5Q0FBNEM7Ozs7O0lBQzVDLG1EQUFxQzs7Ozs7SUFDckMsbUNBQTREOztJQUM1RCxxQ0FBZTs7SUFDZix3Q0FBdUQ7O0lBRXZELHNDQUFnRDs7SUFDaEQsdUNBQXNCOztJQUN0Qix5Q0FBd0I7O0lBQ3hCLHlDQUF3Qjs7SUFDeEIsd0NBQTZCOztJQUM3Qiw2Q0FBNkI7O0lBQzdCLDBDQUFxQjs7SUFDckIsb0NBQWtDOztJQUNsQywrQ0FBdUM7O0lBQ3ZDLDRDQUF1Qzs7SUFDdkMsOENBQXFEOztJQUNyRCw4Q0FBcUU7O0lBQ3JFLHFDQUE2Qjs7SUFDN0IscUNBQXdCOztJQW9CeEIseUNBQTREOztJQUM1RCwwQ0FBbUQ7O0lBQ25ELG9DQUFxQzs7Ozs7SUFrRXJDLDBDQUE0Qjs7Ozs7SUFDNUIseUNBQTRCOzs7OztJQUM1Qiw4Q0FBaUM7Ozs7O0lBQ2pDLGlEQUFnQzs7Ozs7SUFDaEMseUNBQTJCOzs7OztJQUd2QixzQ0FBMkI7Ozs7O0lBQzNCLHVDQUEyQjs7Ozs7SUFDM0Isb0NBQStCOzs7OztJQUMvQixrQ0FBcUM7O0lBQ3JDLGtDQUE2Qjs7Ozs7SUFDN0IsNENBQThDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsXHJcbiAgICBPbkluaXQsIE91dHB1dCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiwgSG9zdEJpbmRpbmcsXHJcbiAgICBDb21wb25lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSG9zdExpc3RlbmVyLCBJbmplY3RvclxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgYXMgVXBkYXRlQ2xzIH0gZnJvbSAnLi9zZXJ2aWNlcy91cGRhdGUtaG9zdC1jbGFzcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgc2xpZGVNb3Rpb24gfSBmcm9tICcuL2FuaW1hdGlvbnMvc2xpZGUnO1xyXG5pbXBvcnQgeyB0b0Jvb2xlYW4sIGNvbnZlcnRUb0RhdGUsIGNvbnZlcnRUb1N0ciB9IGZyb20gJy4vdXRpbHMvY29udmVydCc7XHJcbmltcG9ydCB7IFRpbWVQaWNrZXJQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vdGltZS1waWNrZXItcGFuZWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVGltZVBpY2tlckxvY2FsZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3RpbWUtcGlja2VyLmxvY2FsZS5zZXJ2aWNlJztcclxuXHJcbmxldCBudW0gPSAwO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcclxuICAgIHNlbGVjdG9yOiAnZmFycmlzLXRpbWUtcGlja2VyJyxcclxuICAgIGV4cG9ydEFzOiAndGltZVBpY2tlcicsXHJcbiAgICAvLyBzdHlsZVVybHM6IFsnLi9zdHlsZS9pbmRleC5zY3NzJ10sXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGltZS1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgYW5pbWF0aW9uczogW3NsaWRlTW90aW9uXSxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIFVwZGF0ZUNscyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVGltZVBpY2tlckNvbXBvbmVudCxcclxuICAgICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9XHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaW1lUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBWaWV3Q2hpbGQoJ3RpbWVJbnB1dCcpXHJcbiAgICBwdWJsaWMgdGltZUlucHV0OiBFbGVtZW50UmVmO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1jb21wb25lbnQtdGltZXBpY2tlcicpIGhvc3RDbHMgPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX3JlYWRvbmx5ID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9lZGl0YWJsZSA9IHRydWU7XHJcbiAgICBwcml2YXRlIF92YWx1ZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfYWxsb3dFbXB0eSA9IHRydWU7XHJcbiAgICBwcml2YXRlIF9hdXRvRm9jdXMgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX29uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgX29uVG91Y2hlZDogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9oaWRlRGlzYWJsZWRPcHRpb25zID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGNSZWY6IENvbXBvbmVudFJlZjxUaW1lUGlja2VyUGFuZWxDb21wb25lbnQ+ID0gbnVsbDtcclxuICAgIGlzSW5pdCA9IGZhbHNlO1xyXG4gICAgZ3JvdXBJY29uID0gJzxpIGNsYXNzPVwiZi1pY29uIGYtaWNvbi10aW1lcGlja2VyXCI+PC9pPic7XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5kaXNwbGF5JykgZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICBASW5wdXQoKSBob3VyU3RlcCA9IDE7XHJcbiAgICBASW5wdXQoKSBtaW51dGVTdGVwID0gMTtcclxuICAgIEBJbnB1dCgpIHNlY29uZFN0ZXAgPSAxO1xyXG4gICAgQElucHV0KCkgY2xlYXJUZXh0ID0gJ2NsZWFyJztcclxuICAgIEBJbnB1dCgpIHBvcHVwQ2xhc3NOYW1lID0gJyc7XHJcbiAgICBASW5wdXQoKSBwbGFjZWhvbGRlcjtcclxuICAgIEBJbnB1dCgpIGFkZE9uOiBUZW1wbGF0ZVJlZjx2b2lkPjtcclxuICAgIEBJbnB1dCgpIGRlZmF1bHRPcGVuVmFsdWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWRIb3VyczogKCkgPT4gbnVtYmVyW107XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZE1pbnV0ZXM6IChob3VyOiBudW1iZXIpID0+IG51bWJlcltdO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWRTZWNvbmRzOiAoaG91cjogbnVtYmVyLCBtaW51dGU6IG51bWJlcikgPT4gbnVtYmVyW107XHJcbiAgICBASW5wdXQoKSBmb3JtYXQgPSAnSEg6bW06c3MnO1xyXG4gICAgQElucHV0KCkgaXNPcGVuID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHVzZTEySG91cnModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl91c2UxMkhvdXJzID0gISF2YWx1ZTtcclxuICAgICAgICBpZiAodmFsdWUgJiYgdGhpcy5mb3JtYXQpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtYXQgPSB0aGlzLmZvcm1hdC5yZXBsYWNlKC9IL2csICdoJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgdGhpcy5mb3JtYXQpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtYXQgPSB0aGlzLmZvcm1hdC5yZXBsYWNlKC9oL2csICdIJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fdXNlMTJIb3Vycykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZm9ybWF0IHx8IHRoaXMuZm9ybWF0LmluZGV4T2YoJ2EnKSA9PT0gLTEgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdCA9ICdoaDptbTpzcyBhJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBnZXQgdXNlMTJIb3VycygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlMTJIb3VycztcclxuICAgIH1cclxuICAgIEBPdXRwdXQoKSByZWFkb25seSBvcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG4gICAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcbiAgICBAT3V0cHV0KCkgY2xlYXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBoaWRlRGlzYWJsZWRPcHRpb25zKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faGlkZURpc2FibGVkT3B0aW9ucyA9IHRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhpZGVEaXNhYmxlZE9wdGlvbnMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hpZGVEaXNhYmxlZE9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBhbGxvd0VtcHR5KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fYWxsb3dFbXB0eSA9IHRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFsbG93RW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FsbG93RW1wdHk7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBhdXRvRm9jdXModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9hdXRvRm9jdXMgPSB0b0Jvb2xlYW4odmFsdWUpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGF1dG9Gb2N1cygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYXV0b0ZvY3VzO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IHRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4gfCBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgcmVhZG9ubHkodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9yZWFkb25seSA9IHRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW4gfCBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkb25seTtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgZWRpdGFibGUodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9lZGl0YWJsZSA9IHRvQm9vbGVhbih2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGVkaXRhYmxlKCk6IGJvb2xlYW4gfCBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lZGl0YWJsZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmFsdWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMuX29uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlKHRoaXMudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXNlMTJIb3VycyA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBvdmVybGF5UmVmOiBFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBvdmVybGF5UGFuZWxSZWY6IEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGRvY3VtZW50Q2xpY2tFdmVudDogYW55O1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VGbGFnID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBsb2NhbGVTZXJ2aWNlOiBUaW1lUGlja2VyTG9jYWxlU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlU2VydmljZSkge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhbENvbmZpZyA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRMb2NhbGVDb25maWcoKTtcclxuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMucGxhY2Vob2xkZXIgIT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyIDpcclxuICAgICAgICAgICAgICAgIGxvY2FsQ29uZmlnLnBsYWNlaG9sZGVyID8gbG9jYWxDb25maWcucGxhY2Vob2xkZXIgOiAn6K+36YCJ5oup5pe26Ze0JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlMTJIb3Vyc30gPSBjaGFuZ2VzO1xyXG4gICAgICAgIGlmICh1c2UxMkhvdXJzICYmICghdGhpcy5mb3JtYXQgfHwgdGhpcy5mb3JtYXQuaW5kZXhPZignYScpID09PSAtMSApKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0ID0gJ2hoOm1tOnNzIGEnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pc0luaXQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQXV0b0ZvY3VzKCk7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJy50aW1lLXBpY2tlci1vdmVybGF5JykpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5UmVmID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5UGFuZWxSZWYgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMub3ZlcmxheVJlZiwgJ3RpbWUtcGlja2VyLW92ZXJsYXknKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheVBhbmVsUmVmLFxyXG4gICAgICAgICAgICAgICAgYG92ZXJsYXktcGFuZWwtJHtudW0rK31gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5UmVmLCB0aGlzLm92ZXJsYXlQYW5lbFJlZik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5vdmVybGF5UmVmKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5UmVmID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICAgICAgJy50aW1lLXBpY2tlci1vdmVybGF5J1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlQYW5lbFJlZiA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlQYW5lbFJlZixcclxuICAgICAgICAgICAgICAgIGBvdmVybGF5LXBhbmVsLSR7bnVtKyt9YFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheVJlZiwgdGhpcy5vdmVybGF5UGFuZWxSZWYpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub3ZlcmxheVJlZi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudGltZUlucHV0Lm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbkJsdXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp1c2UtbGlmZS1jeWNsZS1pbnRlcmZhY2VcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGltZUlucHV0Lm5hdGl2ZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25CbHVyKTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJywgWyckZXZlbnQnXSlcclxuICAgIG9uTW91c2VFbnRlcihldmVudCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy50aW1lSW5wdXQubmF0aXZlRWxlbWVudC52YWx1ZSAmJlxyXG4gICAgICAgICAgICAhdGhpcy5yZWFkb25seSAmJlxyXG4gICAgICAgICAgICAhdGhpcy5kaXNhYmxlZFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcignLmlucHV0LWdyb3VwLWNsZWFyJykuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJywgWyckZXZlbnQnXSlcclxuICAgIG9uTW91c2VMZWF2ZShldmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWFkb25seSAmJiAhdGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICBldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcignLmlucHV0LWdyb3VwLWNsZWFyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG9wZW4oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgKCF0aGlzLmVkaXRhYmxlICYmIHRoaXMucmVhZG9ubHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRQYW5lbCgpO1xyXG4gICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm9wZW5DaGFuZ2UuZW1pdCh0aGlzLmlzT3Blbik7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZChcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5UGFuZWxSZWYsXHJcbiAgICAgICAgICAgIHRoaXMuY1JlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLm92ZXJsYXlSZWYsICdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrRXZlbnQgPSB0aGlzLnJlZ2lzdGVyTW91c2VEb3duRXZlbnQoKTtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmNSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCwgJ2YtYXJlYS1zaG93Jyk7XHJcbiAgICAgICAgfSwgMTApO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLm9wZW5lZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5jUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQsICdmLWFyZWEtc2hvdycpO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLm92ZXJsYXlQYW5lbFJlZi5sYXN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5UGFuZWxSZWYucmVtb3ZlQ2hpbGQodGhpcy5vdmVybGF5UGFuZWxSZWYubGFzdENoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQodGhpcy5pc09wZW4pO1xyXG4gICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICB0aGlzLnJlbW92ZURvY3VtZW50TGlzdGVuZXIoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY1JlZikge1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyTW91c2VEb3duRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3QgbW91c2Vkb3duRXZlbnQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMub3ZlcmxheVBhbmVsUmVmLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5vdmVybGF5UmVmLCAnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2Vkb3duRXZlbnQsIHRydWUpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIG1vdXNlZG93bkV2ZW50LCB0cnVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZWRvd25FdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIG1vdXNlZG93bkV2ZW50LCB0cnVlKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlRG9jdW1lbnRMaXN0ZW5lcigpIHtcclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudENsaWNrRXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrRXZlbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrRXZlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNyZWF0UGFuZWwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY1JlZiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZjUmVmLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY1JlZiA9IHRoaXMudmNSZWYuY3JlYXRlQ29tcG9uZW50KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoVGltZVBpY2tlclBhbmVsQ29tcG9uZW50KVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZi1hcmVhLWhpZGUnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOino+WGs+WcqGdyaWTmh5LliqDovb3kuK3vvIzmsqHmnInliLfmlrDop4blm77nmoTpl67pophcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY1JlZi5pbnN0YW5jZS5mb3JtYXQgPSB0aGlzLmZvcm1hdDtcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLmhvdXJTdGVwID0gdGhpcy5ob3VyU3RlcDtcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLm1pbnV0ZVN0ZXAgPSB0aGlzLm1pbnV0ZVN0ZXA7XHJcbiAgICAgICAgICAgIHRoaXMuY1JlZi5pbnN0YW5jZS5zZWNvbmRTdGVwID0gdGhpcy5zZWNvbmRTdGVwO1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYuaW5zdGFuY2UuZGlzYWJsZWRIb3VycyA9IHRoaXMuZGlzYWJsZWRIb3VycztcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLmRpc2FibGVkTWludXRlcyA9IHRoaXMuZGlzYWJsZWRNaW51dGVzO1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYuaW5zdGFuY2UuZGlzYWJsZWRTZWNvbmRzID0gdGhpcy5kaXNhYmxlZFNlY29uZHM7XHJcbiAgICAgICAgICAgIHRoaXMuY1JlZi5pbnN0YW5jZS5oaWRlRGlzYWJsZWRPcHRpb25zID0gdGhpcy5oaWRlRGlzYWJsZWRPcHRpb25zO1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYuaW5zdGFuY2UudXNlMTJIb3VycyA9IHRoaXMudXNlMTJIb3VycztcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLm9wZW5lZCA9IHRoaXMuaXNPcGVuO1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYuaW5zdGFuY2UuZGVmYXVsdE9wZW5WYWx1ZSA9IHRoaXMuZGVmYXVsdE9wZW5WYWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLnZhbHVlQ2hhbmdlLnN1YnNjcmliZSgodmFsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodmFsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICB0b3A6IGVsVG9wLFxyXG4gICAgICAgICAgICBsZWZ0OiBlbExlZnQsXHJcbiAgICAgICAgICAgIGhlaWdodDogZWxIZWlnaHQsXHJcbiAgICAgICAgICAgIHdpZHRoOiBlbFdpZHRoXHJcbiAgICAgICAgfSA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICBjb25zdCBwYW5lbEhlaWdodCA9IDE5NDtcclxuICAgICAgICBpZiAoZWxUb3AgKyBwYW5lbEhlaWdodCArIDMwID4gd2luZG93LmlubmVySGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5jUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQsICd0b3AnLCBgJHtlbFRvcCAtIHBhbmVsSGVpZ2h0fXB4YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmNSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCwgJ3RvcCcsIGAke2VsVG9wICsgZWxIZWlnaHR9cHhgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhbmVsV2lkdGggPSB0aGlzLmNSZWYuaW5zdGFuY2UucGFuZWxXaWR0aDtcclxuXHJcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIC0gZWxMZWZ0IDwgcGFuZWxXaWR0aCkge1xyXG4gICAgICAgICAgICBjb25zdCByID0gd2luZG93LmlubmVyV2lkdGggLSBlbExlZnQgLSBlbFdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuY1JlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LCAncmlnaHQnLCBgJHtyfXB4YCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmNSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCwgJ2xlZnQnLCBgJHtlbExlZnR9cHhgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY1JlZi5pbnN0YW5jZS5vcGVuZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUF1dG9Gb2N1cygpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrQ2xlYXJCdG4oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLnRpbWUuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBmb2N1cygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lSW5wdXQubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVJbnB1dC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGJsdXIoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZUlucHV0Lm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lSW5wdXQubmF0aXZlRWxlbWVudC5ibHVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25CbHVyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBjb252ZXJ0VG9EYXRlKHRoaXMudmFsdWUsIHRoaXMuZm9ybWF0KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY1JlZikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jUmVmLmluc3RhbmNlLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gY29udmVydFRvU3RyKGRhdGUsIHRoaXMuZm9ybWF0KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlRmxhZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX29uVG91Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25Ub3VjaGVkKHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25WYWx1ZUNoYW5nZSh2YWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRmxhZyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBvbkNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXIuZW1pdCgpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcclxuICAgICAgICBpZiAodGhpcy5jUmVmICYmIHRoaXMuY1JlZi5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNSZWYuaW5zdGFuY2UudGltZS5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fb25Ub3VjaGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uVG91Y2hlZCh0aGlzLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIHdyaXRlVmFsdWUodGltZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB0aW1lO1xyXG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh0aW1lOiBzdHJpbmcpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAodGltZTogc3RyaW5nKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fb25Ub3VjaGVkID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9XHJcbn1cclxuIl19