/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-30 16:08:56
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { DatagridComponent } from './../../datagrid.component';
import { Component, Input, ViewChild, ElementRef, Injector, Inject, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DatagridFacadeService } from './../../services/datagrid-facade.service';
import { filter, map } from 'rxjs/operators';
var DatagridCheckboxComponent = /** @class */ (function () {
    function DatagridCheckboxComponent(injector, dg) {
        this.injector = injector;
        this.dg = dg;
        this.indeterminate = false;
        this.checked$ = null;
        this.subscriptions = [];
        this.dfs = this.injector.get(DatagridFacadeService);
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.indeterminate) {
            this.chk.nativeElement.indeterminate = true;
        }
        this.listenSubjects();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.checked && !changes.checked.isFirstChange()) {
            this.changeCheckedStatus(changes.checked.currentValue);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.listenSubjects = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var rid = this.dfs.primaryId(this.rowData);
        this.subscriptions.push(this.dg.checkAll.subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var flag = true;
            if (_this.dg.disableRow) {
                flag = !_this.dg.disableRow(_this.rowData, _this.rowIndex);
                if (!flag) {
                    flag = _this.dg.dfs.isRowChecked(rid);
                }
            }
            _this.changeCheckedStatus(flag);
        })));
        this.subscriptions.push(this.dg.unCheckAll.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e && e.length) {
                if (e.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.dg.idField] === _this.rowData[_this.dg.idField]; }))) {
                    _this.changeCheckedStatus(false);
                }
            }
            else {
                _this.changeCheckedStatus(false);
            }
        })));
        /** @type {?} */
        var _setcheckrows = this.dg.dgs.setCheckedRows.pipe(filter((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return r.ids.includes(rid) || r.ids.includes('' + rid);
        })), map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var flag = r.ids.includes(rid) || r.ids.includes('' + rid);
            if (flag) {
                return flag && r.checked;
            }
            return false;
        }))).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            _this.checked = r;
            _this.changeCheckedStatus(r);
        }));
        this.subscriptions.push(_setcheckrows);
    };
    /**
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.unsubscribe(); }));
            this.subscriptions = [];
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.disabled) {
            /** @type {?} */
            var beforEventParam = {
                rowIndex: this.rowIndex,
                rowData: this.rowData,
                gridInstance: this.dg
            };
            this.dg.endCellEdit();
            /** @type {?} */
            var _checked = this.chk.nativeElement.checked;
            if (!_checked) {
                this.dg.beforeCheck(beforEventParam).subscribe((/**
                 * @param {?} canCheck
                 * @return {?}
                 */
                function (canCheck) {
                    if (canCheck) {
                        _this.dfs.checkRow(_this.rowIndex, _this.rowData);
                        _this.checked = true;
                        _this.changeCheckedStatus(true);
                    }
                }));
            }
            else {
                this.dg.beforeUncheck(beforEventParam).subscribe((/**
                 * @param {?} canUncheck
                 * @return {?}
                 */
                function (canUncheck) {
                    if (canUncheck) {
                        _this.dfs.unCheckRow(_this.rowIndex, _this.rowData);
                        _this.checked = false;
                        _this.changeCheckedStatus(false);
                        if (_this.dg.showSelectedList) {
                            _this.dg.cd.detectChanges();
                        }
                    }
                }));
            }
            // this.checked = !this.checked;
            // this.cd.detectChanges();
        }
        event.stopPropagation();
    };
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.changeCheckedStatus = /**
     * @private
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.chk.nativeElement.checked = status;
    };
    DatagridCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-checkbox',
                    template: " <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div>",
                    styles: ["\n        :host {\n            vertical-align: middle;\n        }\n        :host .custom-checkbox {\n            opacity: 1;\n            float: none;\n            top: 2px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    DatagridCheckboxComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridComponent; })),] }] }
    ]; };
    DatagridCheckboxComponent.propDecorators = {
        rowData: [{ type: Input }],
        rowIndex: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        indeterminate: [{ type: Input }],
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return DatagridCheckboxComponent;
}());
export { DatagridCheckboxComponent };
if (false) {
    /** @type {?} */
    DatagridCheckboxComponent.prototype.rowData;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.rowIndex;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.chk;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.cd;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.checked$;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.injector;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,