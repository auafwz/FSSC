{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.component.ts","ng://@farris/ui-datagrid-settings/lib/simple-mode/simple-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.service.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-sort-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-view-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-format-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-visible-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","DatagridSettingsComponent","cd","inject","activeTabIndex","sortTreeData","sortNames","sortInfo","viewTreeData","viewColumns","columnFormat","groupFields","canSetColumnSort","canSetColumnVisible","enableReset","cancelHandle","EventEmitter","submitHandle","reset","concise","searchItems","alignItems","summaryItems","summaryItems2","messager","get","MessagerService","localeSer","LocaleService","title","getValue","ngOnInit","gridInstance","sortName","split","getViewColumns","columns","groupField","ngOnChanges","changes","isFirstChange","close","$event","stopPropagation","modalRef","changeTabs","idx","onSortInfoChange","_this","visibleCls","forEach","cols","_getViewColumns","filter","visible","undefined","map","field","c","colspan","onColumnFormatChange","colFormatData","onSubmitClick","emit","onCancelClick","onSettingReset","restorDefaultText","confirm","subscribe","reset2Default","options","dfs","initialOptions","columnFields","newColumns_1","col","find","halign","align","width","footer","groupFooter","sort","sortOrders","sortOrder","showConcise","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","Injector","Input","Output","ViewChild","SimpleColumnsComponent","injector","seartTypes","fields","clickToHidden","top","cls","formatChange","fieldsChange","submit","closed","advanced","allCols","columnType","isEn","settings","onClick","target","indexOf","onEscKeydown","document","querySelector","onEnterKeydown","onControlGKeydown","ctrlKey","preventDefault","key","toLowerCase","showAdvanced","searchInput","nativeElement","focus","container","filterColumns","ct","searchWords","onFieldsChanged","onDblClick","onCheckboxClick","index","splice","f","searchColumn","txt","onFieldDrop","fieldInfo","ulElRef","removedIndex","addedIndex","moveItem","targetItem","moveItemIndex","findIndex","targetItemIndex","removedItem","_a","getCheckAllState","onCheckAllClick","state","content","bind","btnOk","HostBinding","HostListener","GRID_SETTINGS_WEBAPI","InjectionToken","DatagridSettingsService","modalSer","idService","multiSortMsg","columnsSortableMsg","notSupportHeaderGroupMsg","notShowDialog","gridRefs","saving","cfr","app","ComponentFactoryResolver","ApplicationRef","destroy","id","registerGridInstance","dg","console","log","getGridInstance","dgID","getSearchTypes","showSimple","convertColumnsToSimple","ControlPanelFeild","searchTypes","simpleRef_1","resolveComponentFactory","create","attachView","hostView","instance","body","appendChild","location","remove","disabled","updateGridView","detectChanges","show","opts","enableSimpleMode","_editColSortInfo","showSetColumnsTab","isHeaderGroup","treeData","convertColumns2TreeData","cloneDeep","viewColumnsTreeData","checkViewTreeNodes","defaultOpts","height","showHeader","initialState","showButtons","modalOpts","dialog","draggbar","handle","header","warning","multiSort","hasEnableSortColumns","flatColumns","reduce","sortable","grid","flag","getChilds","rowIndex","colStartIndex","colCount","forSort","childCols","_count","slice","element","data","selectable","expanded","children","_","treeNodes","tn","_cols","rowspan","order","allowGrouping","dataType","resetGridView","btn","createConfigKey","sortInfo_1","viewColumns_1","columnFormat_1","groupRows","join","setUserConfig","keys","clearSort","updateColumnFormat","newVisibleOrderColumns","columnsChanged","hideColumns","isNewAddColumn","includes","newCols","formatCol","text","calculationType","parseInt","showFooter","footerTemplate","gridId","dgs","saveUserConfig","config","LOCALEID","localeId","currentConfig","localStorage","getItem","_config","JSON","parse","setItem","stringify","removeItem","httpRestService","_saveUserConfig","of","getUserConfig","_getUserConfig","con","getSettings","gridID","userConfigSetting","configkey1","configkey2","configkey3","textvalue","saveUserSettings","resetUserConfig","pipe","switchMap","getUserSettings","ucs","textValue","Injectable","BsModalService","IdService","DatagridSortSettingComponent","idField","valueField","textField","selectedIds","sortInfoChange","setFieldSortOrder","ms","moveToLeft","onSelectionsChange","getSortInfo","selections","names_1","orders_1","si","onBeforeMove","items","DatagridViewColumnsComponent","_selectedIds","selectedIdsChange","defineProperty","vals","hiddenColumn","column","ColumnFormatSettingComponent","gridSettingComponentRef","formatData","activeField","showGridFooter","setFormatData","checkColumnOptions","initData","colForm","valueChanges","v","pristine","onFieldClick","ColumnGroupSettingComponent","formatColumns","groupFieldsChange","formatColumnsChange","groupColumns","allowGroupColumns","activeCalculationCol","showSelectColumnsPanel","setGroupColumns","registerEventHandle","initCalculationColumns","groupingSettingEl","addEventListener","selectcolumnspanel","onGroupFieldsChange","getAllowGroupingColumns","toggleGroupingColumnPanel","addGroupColumn","onRemoveGroupingField","onGroupingFieldDropped","smoothDnd","constants","wrapperClass","animationClass","SmoothDndForVisible","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","ColumnVisibleDragDirective","ngzone","render","el","drop","behaviour","dragHandleSelector","dropPlaceholder","className","getGhostParent","getChildPayload","shouldAcceptDrop","sourceContainerOptions","payload","onDropReady","dropResult","run","onDrop","onDragEnter","onDragStart","info","onDragEnd","ngAfterViewInit","initDnD","ngOnDestroy","disposeDnd","dispose","Directive","NgZone","Renderer2","ElementRef","smoothDnD","SmoothDndForGroupingField","ColumnGroupDragDirective","orientation","DatagridSettingsModule","forRoot","apiUri","ngModule","providers","provide","GRID_SETTINGS_SERVICE","useClass","NgModule","declarations","imports","CommonModule","FormsModule","MultiSelectModule","ComboListModule","FarrisCommonModule","MessagerModule","LocaleModule","ModalModule","entryComponents","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n    Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter,\r\n    OnInit, OnChanges, SimpleChanges, ChangeDetectorRef, Injector, Output\r\n} from '@angular/core';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\nimport { DataColumn, DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings',\r\n    templateUrl: './datagrid-settings.component.html',\r\n    styles: [\r\n        `\r\n\r\n        .f-datagrid-settings .header {\r\n            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px\r\n        }\r\n\r\n        .f-datagrid-settings .header .title {\r\n            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;\r\n        }\r\n        .f-datagrid-settings .header .tabs {\r\n            height: 32px;\r\n            top: 12px; font-size: 14px;\r\n            position: relative;\r\n            line-height: 32px;\r\n        }\r\n        .f-datagrid-settings .header .tabs .tabs-labels {\r\n            background: #EFF5FF;border-radius: 17px;color:#6080AD\r\n        }\r\n\r\n        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {\r\n            line-height: 28px;\r\n            margin: 2px;\r\n            height: 28px;\r\n            background: rgb(246 250 255);\r\n            border-radius: 15px;\r\n            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)\r\n        }\r\n        .f-datagrid-settings .header .close {\r\n            line-height: 56px;padding: 0;width: 20px\r\n        }\r\n        .f-datagrid-settings .tabs-container {\r\n            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;\r\n        }\r\n        .f-datagrid-settings .buttons\r\n        {\r\n            height: 66px;text-align: right;padding: 14px 24px 20px 24px;\r\n        }\r\n\r\n        .f-datagrid-settings .buttons button {\r\n            width: 66px;height: 32px;\r\n        }\r\n        .f-datagrid-settings .buttons .cancel {\r\n            margin-left: 12px;margin-right: 8px;\r\n        }\r\n        .f-datagrid-settings .buttons .ok {\r\n            width: 100px;\r\n        }\r\n\r\n        .f-datagrid-settings .dg-column-format-setting>div{\r\n            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA\r\n        }\r\n\r\n        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{\r\n            margin-right: 5px; font-size: 14px;color: #0089FF;\r\n        }\r\n\r\n        .f-datagrid-settings  .column-group-setting .title{\r\n            height: 36px; line-height: 36px; color: #59a1ff\r\n        }\r\n\r\n        .f-datagrid-settings  .column-group-setting .all-fields {\r\n            background-color:#fff;padding-top: 0px!important;\r\n        }\r\n\r\n        .f-datagrid-settings  .column-group-setting .group-sum-fields {\r\n            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff\r\n        }\r\n\r\n\r\n        .smooth-dnd-ghost.format-setting-column {\r\n            border: 1px solid #2a87ff;\r\n            z-index: 999999999 !important;\r\n            background-color: #e7f1ff;;\r\n            padding: 4px 8px;\r\n            color: rgb(0 0 0);\r\n        }\r\n\r\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\r\n            float: right;\r\n        }\r\n\r\n        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {\r\n            background-color: #dee1ea;\r\n        }\r\n        .dg-column-format-setting .format-setting-column {\r\n            background: #fafbfd;\r\n            padding: 4px 8px;\r\n            margin-bottom: 5px;\r\n            border: 1px solid #f2f4f8;\r\n            border-radius: 5px;\r\n        }\r\n        .dg-column-format-setting .format-setting-column.active {\r\n            color: rgb(0 0 0);\r\n            border: 1px solid #2a87ff;\r\n            background: #e7f1ff;\r\n            border-top: 1px solid #2a87ff!important;\r\n            border-bottom: 1px solid #2a87ff!important;\r\n        }\r\n\r\n        .dg-column-format-setting .format-setting-column .field-drag-handle{\r\n            float: right;\r\n            cursor: grab;\r\n        }\r\n\r\n        .dg-column-format-setting .format-setting-column .field-drag-handle:active{\r\n            cursor: grabbing;\r\n        }\r\n\r\n        `\r\n    ],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DatagridSettingsComponent implements OnInit, OnChanges {\r\n    modalRef: BsModalRef;\r\n    gridInstance: DatagridComponent;\r\n    activeTabIndex = 1;\r\n\r\n    /** æåºåæ°æ® */\r\n    sortTreeData = [];\r\n    sortNames = [];\r\n    sortInfo = {};\r\n\r\n    /** æ¾ç¤ºåæ°æ® */\r\n    viewTreeData = [];\r\n    viewColumns = [];\r\n\r\n    columnFormat = [];\r\n\r\n    groupFields = [];\r\n\r\n    canSetColumnSort = true;\r\n    canSetColumnVisible = true;\r\n    @Input() enableReset = false;\r\n    @Input() columns: DataColumn[][];\r\n\r\n    @Output() cancelHandle = new EventEmitter();\r\n    @Output() submitHandle = new EventEmitter();\r\n    @Output() reset = new EventEmitter();\r\n    @Output() concise = new EventEmitter();\r\n\r\n    @ViewChild('header') header: ElementRef;\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n\r\n    private localeSer: LocaleService;\r\n    private messager: MessagerService;\r\n    constructor(private cd: ChangeDetectorRef, private inject: Injector) {\r\n        this.messager = this.inject.get(MessagerService, null);\r\n        this.localeSer = this.inject.get(LocaleService);\r\n        this.searchItems = [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n\r\n        this.alignItems = [\r\n            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft')},\r\n            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter')},\r\n            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight')},\r\n        ];\r\n\r\n        this.summaryItems = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },\r\n            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },\r\n            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },\r\n            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n        this.summaryItems2 = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];\r\n        this.viewColumns = this.getViewColumns();\r\n        this.sortInfo = this.gridInstance['__sortInfo'] || {};\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupFields = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            // console.log(this.columns);\r\n        }\r\n    }\r\n\r\n    close($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (this.modalRef) {\r\n            this.modalRef.close();\r\n        }\r\n    }\r\n\r\n    changeTabs(idx) {\r\n        this.activeTabIndex = idx;\r\n    }\r\n\r\n    onSortInfoChange(sortInfo: any) {\r\n        this.sortInfo = sortInfo;\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n\r\n    onColumnFormatChange(colFormatData) {\r\n        this.columnFormat = colFormatData;\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        this.submitHandle.emit($event);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.cancelHandle.emit($event);\r\n    }\r\n\r\n    onSettingReset($event) {\r\n        // this.reset.emit($event);\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.reset2Default();\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.viewColumns = this.getViewColumns();\r\n\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.sortInfo = { sortName: this.sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.sortNames = [];\r\n            this.sortInfo = {};\r\n        }\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupFields =  options.groupField ? options.groupField.split(',') : [];\r\n    }\r\n    /** æ¾ç¤ºç®æ´æ¨¡å¼çªå£ */\r\n    showConcise($event) {\r\n\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.concise.emit();\r\n\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit,\r\n        Output, ViewEncapsulation, HostListener, ViewChild, ElementRef } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings-simple',\r\n    templateUrl: './simple-columns.component.html',\r\n    styles: [\r\n        `\r\n        .f-datagrid-settings-simple {\r\n            position: absolute;\r\n            top: 100px;\r\n            right: 0px;\r\n            z-index: 10000;\r\n            height: calc(100vh - 100px);\r\n            width: 468px;\r\n            background: #FFFFFF;\r\n            border: 1px solid #E6E9F0;\r\n            border-radius: 10px 0 0 10px;\r\n        }\r\n\r\n        .f-datagrid-settings-simple:focus {\r\n            outline: none;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .header {\r\n            height: 50px;\r\n            line-height: 50px;\r\n            border-bottom: 1px solid #EAEDF3;\r\n            font-size: 18px;\r\n            color: #2D2F33;\r\n        }\r\n        .f-datagrid-settings-simple .header .title {\r\n            padding-left: 21px;\r\n            font-weight:bold;\r\n        }\r\n        .f-datagrid-settings-simple .header .closed\r\n        {\r\n            width: 50px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .content .count{font-size: 14px; color: #2D2F33;}\r\n        .f-datagrid-settings-simple .content .tip {\r\n            background: #F7FAFF; border-radius: 6px;line-height: 42px; padding-left: 10px; margin-bottom: 10px;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .content .checkall{\r\n            margin-left: 5px;\r\n            font-size: 14px;\r\n            color: #0089FF;\r\n            margin-right: 5px;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .content {\r\n            margin: 20px 24px;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .footer {\r\n            height: 32px;\r\n            margin: 20px;\r\n        }\r\n\r\n\r\n        .smooth-dnd-ghost.format-setting-column {\r\n            z-index: 999999999 !important;\r\n            padding: 4px 8px;\r\n            background-color: #e7f1ff;\r\n            border: 1px solid #2a87ff;\r\n        }\r\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\r\n            float: right;\r\n        }\r\n        .f-datagrid-settings-simple  .smooth-dnd-drop-preview-constant-class {\r\n            background-color: #dee1ea;\r\n        }\r\n        .f-datagrid-settings-simple .format-setting-column {\r\n            background: #fafbfd;\r\n            padding: 4px 8px;\r\n            margin-bottom: 5px;\r\n            border: 1px solid #f2f4f8;\r\n            border-radius: 5px;\r\n            color: #000;\r\n        }\r\n        .f-datagrid-settings-simple .format-setting-column.active {\r\n            border: 1px solid #2a87ff;\r\n            background: #e7f1ff;\r\n            border-top: 1px solid #2a87ff!important;\r\n            border-bottom: 1px solid #2a87ff!important;\r\n        }\r\n\r\n        .format-setting-column .checkbox{\r\n            font-size: 14px;\r\n            color: #0089FF;\r\n            margin-right: 5px;\r\n            cursor:pointer;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .format-setting-column .field-drag-handle{\r\n            float: right;\r\n            cursor: grab;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .format-setting-column .field-drag-handle:active{\r\n            cursor: grabbing;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .list-group-flush:last-child .list-group-item:last-child {\r\n            border-bottom: 1px solid #f2f4f8;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .list-group-flush:first-child .list-group-item:first-child {\r\n            border-top: 1px solid #f2f4f8;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .buttons\r\n        {\r\n            text-align: right;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .buttons button {\r\n            width: 66px;height: 32px;\r\n        }\r\n        .f-datagrid-settings-simple .buttons .cancel {\r\n            margin-left: 12px;margin-right: 8px;\r\n        }\r\n        .f-datagrid-settings-simple .buttons .ok {\r\n            width: 100px;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .buttons .advanced{ width: 66px;height: 32px; float: left; }\r\n\r\n        .f-datagrid-settings-simple-host {\r\n            width: 100%;\r\n            height: 100%;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            z-index: 1000;\r\n        }\r\n\r\n        .f-datagrid-settings-simple .visible-cols-count {\r\n            font-size: 18px;\r\n            font-weight: 500;\r\n        }\r\n        `\r\n    ],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SimpleColumnsComponent implements OnInit {\r\n\r\n    @Input() seartTypes: any = [];\r\n    /** ææå */\r\n    @Input() columns = [];\r\n    /** æ¾ç¤ºçå */\r\n    @Input() fields = [];\r\n    /** ç¹å»ä¾§è¾¹æ ·å¼ä»¥å¤çåºåéèé¢æ¿ãé»è®¤ä¸º true */\r\n    @Input() clickToHidden = true;\r\n\r\n    @Input() top = 0;\r\n\r\n    @HostBinding('class') cls = 'f-datagrid-settings-simple-host';\r\n\r\n    @ViewChild('colcontainer') container: ElementRef;\r\n    @ViewChild('okbtn') btnOk: ElementRef;\r\n    @ViewChild('inputWord') searchInput: ElementRef;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n    @Output() submit = new EventEmitter();\r\n    @Output() closed = new EventEmitter();\r\n    @Output() advanced = new EventEmitter();\r\n\r\n    allCols = [];\r\n    columnType = 'all';\r\n\r\n    gridInstance: DatagridComponent;\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n    private messager: MessagerService;\r\n\r\n    private settings: any = {};\r\n\r\n    constructor(private injector: Injector, public cd: ChangeDetectorRef) {\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n        this.messager = this.injector.get(MessagerService, null);\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        // console.log($event);\r\n        $event.stopPropagation();\r\n        const clsname = $event.target['className'] || '';\r\n        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {\r\n            // éèä¾§è¾¹æ ï¼\r\n            if (this.clickToHidden) {\r\n                this.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    onEscKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    @HostListener('window:keydown.enter', ['$event'])\r\n    onEnterKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.onSubmitClick();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onControlGKeydown($event: KeyboardEvent) {\r\n        if ($event.ctrlKey && !document.querySelector('modal-container')) {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n            if ($event.key.toLowerCase() === 'g') {\r\n                this.showAdvanced($event);\r\n            } else if ($event.key.toLowerCase() === 'r') {\r\n                this.onSettingReset();\r\n            } else if ($event.key.toLowerCase() === 's') {\r\n                this.searchInput.nativeElement.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.allCols = this.columns[0];\r\n        this.fields = this.getViewColumns();\r\n        this.container.nativeElement.focus();\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n\r\n\r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns(ct: string, searchWords = '') {\r\n        let cols = [];\r\n        switch (ct) {\r\n            case 'visible':\r\n                cols = this.columns[0].filter(n => this.fields.indexOf(n.field) > -1);\r\n                break;\r\n            case 'hidden':\r\n                cols = this.columns[0].filter(n => this.fields.indexOf(n.field) === -1);\r\n                break;\r\n            case 'all':\r\n            default:\r\n                cols = this.columns[0];\r\n                break;\r\n        }\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n    }\r\n\r\n\r\n\r\n    private onFieldsChanged() {\r\n        this.fieldsChange.emit(this.fields);\r\n    }\r\n    onDblClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        $event.stopPropagation();\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event, ct) {\r\n        const txt = $event.target.value;\r\n        this.filterColumns(ct, txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, ct, txt, ulElRef: any) {\r\n       // console.log('drop', fieldInfo);\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.onFieldsChanged();\r\n\r\n        this.filterColumns(ct, txt);\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState() {\r\n        if (this.fields.length === 0) {\r\n            return 0;\r\n        } else {\r\n            if (this.fields.length === this.columns[0].length) {\r\n                return 1;\r\n            }\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    onCheckAllClick($event, ct, txt) {\r\n        const state = this.getCheckAllState();\r\n        if (state === 0 || state === 2) {\r\n            // æ§è¡å¨é\r\n            this.columns[0].forEach(n => n.visible = true);\r\n            this.fields = this.columns[0].map(n => n.field);\r\n        } else {\r\n            // åæ¶å¨é\r\n            this.columns[0].forEach(n => n.visible = false);\r\n            this.fields = [];\r\n        }\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(ct, txt);\r\n    }\r\n\r\n    close($event?: MouseEvent) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.closed.emit();\r\n    }\r\n\r\n    showAdvanced($event) {\r\n        this.close($event);\r\n        this.advanced.emit();\r\n    }\r\n\r\n    onSettingReset($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.reset2Default();\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.allCols = this.columns[0];\r\n\r\n        this.fields = this.getViewColumns();\r\n        this.settings.viewColumns = this.fields;\r\n        this.settings.columnFormat = [...this.columns[0]];\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.settings.sortInfo = { sortName: sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.settings.sortInfo = {};\r\n        }\r\n        this.settings.groupFields =  options.groupField ? options.groupField.split(',') : [];\r\n    }\r\n\r\n    onSubmitClick($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.settings.viewColumns = this.fields;\r\n        this.settings.columnFormat = [...this.columns[0]];\r\n\r\n        if (!this.settings.sortInfo) {\r\n            this.settings.sortInfo = {\r\n                sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],\r\n                sortOrder:  this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []\r\n            };\r\n        }\r\n\r\n        if (this.settings.groupFields === undefined) {\r\n            this.settings.groupFields = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n        }\r\n\r\n        this.submit.emit({content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement});\r\n    }\r\n}\r\n","import { map, switchMap, tap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';\r\nimport { DatagridComponent, DataColumn } from '@farris/ui-datagrid';\r\nimport { BsModalService, ModalOptions, ModalContainerComponent } from '@farris/ui-modal';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\n\r\nexport const GRID_SETTINGS_WEBAPI =  new InjectionToken(' Farris DataGrid User Setting WebApi URI.');\r\n\r\n@Injectable()\r\nexport class DatagridSettingsService {\r\n\r\n    private multiSortMsg = 'åè¡¨ä¸­æªå¼å¯å¤åæåºçåè½ã è¯·æ£æ¥ï¼';\r\n    private columnsSortableMsg = 'æªå¼å¯åçæåºåè½ãè¯·æ£æ¥ï¼';\r\n    private notSupportHeaderGroupMsg = 'æä¸æ¯æå¤è¡¨å¤´è®¾ç½®';\r\n    private notShowDialog = 'å¤è¡¨å¤´æä¸æ¯æåæ¾ç¤ºè®¾ç½®ï¼åæ¶æªå¯ç¨åæåºåè½ã';\r\n\r\n    public httpRestService: any;\r\n    gridInstance: any = null;\r\n    private gridRefs: {[key: string]: DatagridComponent} = null;\r\n\r\n    private saving = false;\r\n    private cfr: ComponentFactoryResolver = null;\r\n    private app: ApplicationRef = null;\r\n    constructor(private injector: Injector, private modalSer: BsModalService,\r\n                private messager: MessagerService, private idService: IdService,\r\n                private localeSer: LocaleService) {\r\n\r\n        this.cfr = this.injector.get(ComponentFactoryResolver);\r\n        this.app = this.injector.get(ApplicationRef);\r\n    }\r\n\r\n    destroy(id?: string) {\r\n        if (id && this.gridRefs && this.gridRefs[id]) {\r\n            delete this.gridRefs[id];\r\n        } else {\r\n            this.gridRefs = null;\r\n        }\r\n    }\r\n\r\n    registerGridInstance(dg: DatagridComponent) {\r\n        if (!dg) {\r\n            console.log('DatagridSettingService: grid instance is null.');\r\n            return;\r\n        }\r\n        const id = dg.id;\r\n        this.gridRefs = this.gridRefs || {};\r\n        if (!this.gridRefs[id]) {\r\n            this.gridRefs[id] = dg;\r\n        }\r\n    }\r\n\r\n    getGridInstance(dgID: string) {\r\n        return this.gridRefs ? this.gridRefs[dgID] : null;\r\n    }\r\n\r\n    getSearchTypes() {\r\n        return [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n    }\r\n\r\n    showSimple(gridInstance: DatagridComponent) {\r\n        const columns = this.convertColumnsToSimple(gridInstance.columns);\r\n        columns[0] = columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild);\r\n\r\n        const searchTypes = this.getSearchTypes();\r\n\r\n        if (this.cfr) {\r\n            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);\r\n            let simpleRef = cmpFactory.create(this.injector);\r\n            this.app.attachView(simpleRef.hostView);\r\n            simpleRef.instance.columns = columns;\r\n            simpleRef.instance.seartTypes = searchTypes;\r\n            simpleRef.instance.gridInstance = gridInstance;\r\n\r\n            if (document.querySelector('#page-wrapper')) {\r\n                simpleRef.instance.top = 76;\r\n            }\r\n\r\n            document.body.appendChild(simpleRef.location.nativeElement);\r\n\r\n\r\n            simpleRef.instance.closed.subscribe( () => {\r\n                simpleRef.location.nativeElement.remove();\r\n                simpleRef.destroy();\r\n                simpleRef = null;\r\n            });\r\n\r\n            simpleRef.instance.advanced.subscribe(() => {\r\n                this.showAdvanced(gridInstance);\r\n            });\r\n\r\n            simpleRef.instance.submit.subscribe( (e: any) => {\r\n                e.target.disabled = true;\r\n                if (this.saving) {\r\n                    return;\r\n                }\r\n                if (!this.saving) {\r\n                    this.updateGridView(e, gridInstance, e.target);\r\n                }\r\n            });\r\n\r\n            simpleRef.hostView.detectChanges();\r\n\r\n            return simpleRef;\r\n        }\r\n    }\r\n\r\n\r\n    show(gridInstance: DatagridComponent, opts?: ModalOptions) {\r\n        this.registerGridInstance(gridInstance);\r\n\r\n        if (gridInstance.enableSimpleMode) {\r\n            return this.showSimple(gridInstance);\r\n        } else {\r\n            return this.showAdvanced(gridInstance, opts);\r\n        }\r\n    }\r\n\r\n    private showAdvanced(gridInstance: DatagridComponent, opts?: ModalOptions) {\r\n        let _editColSortInfo = true;\r\n        const editColSortInfo = this.canSetColumnSort(gridInstance);\r\n        if (editColSortInfo !== true) {\r\n            // this.messager.warning(msg);\r\n            // return;\r\n            _editColSortInfo = false;\r\n        }\r\n\r\n        const showSetColumnsTab = !this.isHeaderGroup(gridInstance);\r\n        const getActiveTabIndex = () => {\r\n            if (showSetColumnsTab) {\r\n                return 1;\r\n            } else {\r\n                if (_editColSortInfo) {\r\n                    return 2;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            }\r\n        };\r\n        const activeTabIndex = getActiveTabIndex();\r\n\r\n        if (activeTabIndex === -1) {\r\n            this.messager.warning(this.notShowDialog);\r\n            return;\r\n        }\r\n\r\n        const columns = this.convertColumnsToSimple(gridInstance.columns);\r\n        columns[0] = columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild);\r\n        const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);\r\n        const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);\r\n        this.checkViewTreeNodes(viewColumnsTreeData);\r\n\r\n        let modalRef = null;\r\n\r\n        const okText = this.localeSer.getValue('datagrid.settings.ok') || 'ç¡®å®';\r\n        const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || 'åæ¶';\r\n        const resetText =  this.localeSer.getValue('datagrid.settings.reset') || 'éç½®';\r\n\r\n\r\n        const defaultOpts = {\r\n            width: 760, height: 560, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                columns,\r\n                sortTreeData: treeData,\r\n                viewTreeData: viewColumnsTreeData,\r\n                gridInstance,\r\n                canSetColumnSort: _editColSortInfo,\r\n                canSetColumnVisible: showSetColumnsTab,\r\n                activeTabIndex\r\n            },\r\n            showButtons: false\r\n        };\r\n        const modalOpts = Object.assign(defaultOpts, opts || {});\r\n\r\n        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);\r\n        const instance = modalRef.content as DatagridSettingsComponent;\r\n        instance.enableReset = true;\r\n        instance.modalRef = modalRef;\r\n        instance.canSetColumnSort = _editColSortInfo;\r\n        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);\r\n\r\n        instance.submitHandle.subscribe((e) => {\r\n            e.target.disabled = true;\r\n            if (this.saving) {\r\n                return;\r\n            }\r\n            if (!this.saving) {\r\n                this.updateGridView(modalRef, gridInstance, e.target);\r\n            }\r\n        });\r\n\r\n        instance.cancelHandle.subscribe((e) => {\r\n            modalRef.close();\r\n        });\r\n\r\n        instance.concise.subscribe((e) => {\r\n            modalRef.close();\r\n            this.showSimple(gridInstance);\r\n        });\r\n\r\n        const modalContainer = modalRef.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n        return modalRef;\r\n    }\r\n\r\n\r\n\r\n    private canSetColumnSort(gridInstance: DatagridComponent) {\r\n        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {\r\n            return true;\r\n        } else {\r\n            if (!this.hasEnableSortColumns(gridInstance)) {\r\n                return this.columnsSortableMsg;\r\n            } else if (!gridInstance.multiSort) {\r\n                return this.multiSortMsg;\r\n            }\r\n        }\r\n    }\r\n\r\n    private hasEnableSortColumns(gridInstance: DatagridComponent) {\r\n        const sortColumnsCount = gridInstance.flatColumns.reduce((c, r) => {\r\n            if (r.sortable) {\r\n                return c + 1;\r\n            }\r\n            return c;\r\n        }, 0);\r\n\r\n        return sortColumnsCount > 0;\r\n    }\r\n\r\n    private isHeaderGroup(grid: DatagridComponent) {\r\n        const flag = grid.columns.length > 1;\r\n        if (flag) {\r\n            return this.notSupportHeaderGroupMsg;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {\r\n        const childCols = [];\r\n        let _count = colStartIndex;\r\n        if (!cols[rowIndex]) {\r\n            return  [];\r\n        }\r\n\r\n        cols[rowIndex].slice().forEach(element => {\r\n            _count = _count + element.colspan;\r\n            if ( _count <= colCount ) {\r\n                childCols.push(element);\r\n            }\r\n        });\r\n\r\n        cols[rowIndex].splice(0, childCols.length);\r\n\r\n        return childCols.map((c, i) => {\r\n            let n: any = {\r\n                data: c,\r\n                selectable: forSort ? !!c.sortable : true\r\n            };\r\n\r\n            if (c.colspan && c.colspan > 1) {\r\n                n = {\r\n                    data: c,\r\n                    selectable: false,\r\n                    expanded: true,\r\n                    children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)\r\n                };\r\n            }\r\n            return n;\r\n        });\r\n    }\r\n    convertColumns2TreeData(cols: DataColumn[][], forSort = false) {\r\n        const columns = cols.map((c: any) => {\r\n            c.map((_) => {\r\n                _.colspan = _.colspan || 1;\r\n                return _;\r\n            });\r\n            return c;\r\n        });\r\n        if (columns.length === 1) {\r\n            return columns[0].map(c => {\r\n                return {\r\n                    data: c,\r\n                    selectable: forSort ? !!c.sortable : true\r\n                };\r\n            });\r\n        } else {\r\n            return columns[0].map((c, i) => {\r\n                if (c.colspan && c.colspan > 1) {\r\n                    return {\r\n                        data: c,\r\n                        selectable: false,\r\n                        expanded: true,\r\n                        children: this.getChilds(columns, 1, 0, c.colspan, forSort)\r\n                    };\r\n                } else {\r\n                    return {\r\n                        data: c,\r\n                        selectable: forSort ? !!c.sortable : true\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    private checkViewTreeNodes(treeNodes: TreeNode[]) {\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            if (!tn.children || !tn.children.length) {\r\n                tn.selectable = true;\r\n            } else {\r\n                tn.selectable = false;\r\n                this.checkViewTreeNodes(tn.children);\r\n            }\r\n        });\r\n    }\r\n\r\n    private convertColumnsToSimple(cols: any) {\r\n        // ç§»é¤è®¾ç½®å\r\n        return cols.map( (_cols: DataColumn[]) => {\r\n            return _cols.map( (c: DataColumn) => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    return {\r\n                        field: c.field,\r\n                        title: c.title,\r\n                        colspan: c.colspan,\r\n                        rowspan: c.rowspan,\r\n                        sortable: c.sortable,\r\n                        order: c.order,\r\n                        halign: c.halign || 'left',\r\n                        align: c.align || 'left',\r\n                        visible: c.visible,\r\n                        allowGrouping: c.allowGrouping,\r\n                        groupFooter: c.groupFooter,\r\n                        footer: c.footer,\r\n                        width: c.width || 100,\r\n                        dataType: c.dataType || 'string'\r\n                    };\r\n                }\r\n            }).filter(n => n);\r\n        });\r\n    }\r\n\r\n    private resetGridView(gridInstance: any) {\r\n        if (!gridInstance) {\r\n            return;\r\n        }\r\n        const dfs = gridInstance.dfs;\r\n        if (dfs) {\r\n            const options = dfs['_state'].initialOptions;\r\n\r\n            if (options.sort) {\r\n                if (options.sort.sortName) {\r\n                    gridInstance.sortName = options.sort.sortName;\r\n                }\r\n                if (options.sort.sortOrder) {\r\n                    gridInstance.sortOrder = options.sort.sortOrder;\r\n                }\r\n            }\r\n\r\n            gridInstance.groupField = options.groupField || '';\r\n            // TODO: è¿éè¦ä¿®æ­£é»è®¤åçæ¾ç¤ºé¡ºåº\r\n            if (options.columnFields && options.columnFields.length) {\r\n\r\n                const newColumns = [];\r\n                options.columnFields.forEach(c => {\r\n                    const col = gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = c.footer;\r\n                        col.groupFooter = c.groupFooter;\r\n                        newColumns.push(col);\r\n                    }\r\n                });\r\n\r\n                gridInstance.columns[0] = newColumns;\r\n            }\r\n\r\n            // gridInstance['checkOptions']();\r\n            gridInstance['columnsChanged']();\r\n        }\r\n    }\r\n\r\n    private updateGridView(modalRef, gridInstance, btn = null) {\r\n        const settings = modalRef.content;\r\n\r\n        if (settings) {\r\n            const key = this.createConfigKey(gridInstance.id);\r\n            const { sortInfo, viewColumns, columnFormat, groupFields } = settings;\r\n\r\n            this.saving = true;\r\n\r\n            let groupField = '';\r\n            if (gridInstance.groupRows && groupFields && groupFields.length) {\r\n                groupField = groupFields.join(',') ;\r\n            }\r\n            gridInstance.groupField = groupField;\r\n\r\n            this.setUserConfig(key, { sortInfo, viewColumns, groupField, columnFormat }).subscribe( () => {\r\n                if (btn) {\r\n                    btn.disabled = false;\r\n                }\r\n                this.saving = false;\r\n                modalRef.close();\r\n\r\n                if (sortInfo && Object.keys(sortInfo).length) {\r\n                    const { sortName, sortOrder } = sortInfo;\r\n                    if (sortName && sortName.length) {\r\n                        gridInstance.sort(sortName.join(','), sortOrder.join(','));\r\n                    } else {\r\n                        gridInstance.clearSort();\r\n                    }\r\n                } else {\r\n                    gridInstance.clearSort();\r\n                }\r\n\r\n                if (viewColumns && viewColumns.length) {\r\n                    gridInstance.columns = gridInstance.columns.map(cols => {\r\n                        this.updateColumnFormat(cols, columnFormat, gridInstance);\r\n                        return this.newVisibleOrderColumns(cols, viewColumns, columnFormat);\r\n                    });\r\n                }\r\n\r\n                gridInstance.columnsChanged(true);\r\n            });\r\n        } else {\r\n            modalRef.close();\r\n        }\r\n    }\r\n\r\n\r\n    newVisibleOrderColumns(cols: any, viewColumns: any, columnFormat: any) {\r\n        const hideColumns = [];\r\n        cols.forEach((element, index) => {\r\n            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_') {\r\n                viewColumns.push(element.field);\r\n            } else {\r\n                element.visible = viewColumns.includes(element.field);\r\n                if (!element.visible) {\r\n                    hideColumns.push(element);\r\n                }\r\n            }\r\n        });\r\n\r\n        // æ¸çä¸å­å¨çå\r\n        let newCols = viewColumns.map( field => {\r\n            return cols.find(c => c.field === field);\r\n        }).filter(n => n);\r\n\r\n        if (hideColumns.length) {\r\n            newCols = newCols.concat(hideColumns);\r\n        }\r\n\r\n        return newCols.filter(c => c && c.field && c.field !== '_datagrid-setting-control_' );\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦ä¸ºæ°å¢å çå­æ®µ\r\n     * æ°å¢çå­æ®µï¼éè¦å¨åè¡¨ä¸­å±ç¤ºåºæ¥ï¼å¹¶ä¿å­å°ä¸ªæ§åè®¾ç½®ä¸­\r\n     */\r\n    private isNewAddColumn(field: any, columns: any) {\r\n        return !columns.find(c => c.field === field);\r\n    }\r\n\r\n\r\n    updateColumnFormat(cols: any[], columnFormat: any[], gridInstance) {\r\n        if (columnFormat && columnFormat.length) {\r\n            cols.forEach(col => {\r\n                const formatCol = columnFormat.find(f=> f.field === col.field);\r\n                if (formatCol) {\r\n                    col.width = formatCol.width;\r\n                    col.halign = formatCol.halign || 'left';\r\n                    col.align = formatCol.align || 'left';\r\n\r\n                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {\r\n                        if (!col.groupFooter) {\r\n                            col.groupFooter = formatCol.groupFooter;\r\n                        }\r\n\r\n                        if (col.groupFooter && col.groupFooter.options) {\r\n                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';\r\n                            col.groupFooter.options.calculationType =\r\n                                formatCol.groupFooter.options.calculationType !== undefined &&\r\n                                formatCol.groupFooter.options.calculationType !== null ?\r\n                                parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n\r\n                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {\r\n                        if (!col.footer) {\r\n                            col.footer = formatCol.footer;\r\n                        }\r\n\r\n                        if (col.footer && col.footer.options) {\r\n                            col.footer.options.text = formatCol.footer.options.text || '';\r\n                            col.footer.options.calculationType =\r\n                                formatCol.footer.options.calculationType !== undefined &&\r\n                                formatCol.footer.options.calculationType !== null ?\r\n                                parseInt(formatCol.footer.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // åå»ºå¯ä¸key, ç±uri + gridId ç»æï¼å¹¶æ··æ·\r\n    private createConfigKey(gridId: string) {\r\n        const grid = this.getGridInstance(gridId);\r\n        if (grid) {\r\n            return grid.dgs.createConfigKey(gridId);\r\n        } else {\r\n            console.log('DatagridSettingService: Can not find the grid instance.');\r\n        }\r\n\r\n    }\r\n\r\n    saveUserConfig(gridId: string) {\r\n        const gridInstance = this.getGridInstance(gridId);\r\n        const key = this.createConfigKey(gridId);\r\n        const config = {sortInfo: {}, viewColumns: [], groupField: '', columnFormat: []};\r\n\r\n        if (gridInstance) {\r\n            const { sortName, sortOrder, columns} = gridInstance;\r\n            if (sortName) {\r\n                const sortInfo = {\r\n                    sortName: sortName.split(','),\r\n                    sortOrder: sortOrder.split(',')\r\n                };\r\n\r\n                config.sortInfo = sortInfo;\r\n            }\r\n\r\n            const viewColumns = columns[0].filter(n => n.visible || n.visible === undefined).map(n => n.field);\r\n            config.viewColumns = viewColumns;\r\n            config.columnFormat = this.convertColumnsToSimple(columns)[0];\r\n\r\n            if (gridInstance.groupRows) {\r\n                config.groupField = gridInstance.groupField;\r\n            }\r\n        }\r\n\r\n        return this.setUserConfig(key, config);\r\n    }\r\n\r\n    setUserConfig(key: string, config: any): Observable<any> {\r\n\r\n        const LOCALEID = this.localeSer.localeId;\r\n        const currentConfig = localStorage.getItem(key);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (config) {\r\n            if (_config) {\r\n                _config[LOCALEID] = config;\r\n            }\r\n\r\n            localStorage.setItem(key, JSON.stringify(_config));\r\n        } else {\r\n            localStorage.removeItem(key);\r\n        }\r\n        if (this.httpRestService) {\r\n            // ä¿å­è³æ°æ®åº\r\n            return this._saveUserConfig(key,  config ? _config :  '');\r\n        }\r\n\r\n        return of(true);\r\n    }\r\n\r\n    getUserConfig(key): Observable<any> {\r\n        if (this.httpRestService) {\r\n            return this._getUserConfig(key);\r\n        } else {\r\n            const config = localStorage.getItem(key);\r\n            if (config) {\r\n                const con = JSON.parse(config);\r\n                if (con[this.localeSer.localeId]) {\r\n                    return of(con[this.localeSer.localeId]);\r\n                } else {\r\n                    if (Object.keys(con).indexOf('viewColumns') > -1) {\r\n                        return of(con);\r\n                    }\r\n                    return null;\r\n                }\r\n            } else {\r\n                return of(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    getSettings(gridID: string) {\r\n        const key = this.createConfigKey(gridID);\r\n        return this.getUserConfig(key);\r\n    }\r\n\r\n\r\n    private _saveUserConfig(key, config) {\r\n        try {\r\n            const userConfigSetting = {\r\n                configkey1: key,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: config ? JSON.stringify(config) :  ''\r\n            };\r\n\r\n            return this.httpRestService.saveUserSettings(userConfigSetting);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    resetUserConfig(gridInstance, modalRef) {\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).pipe(\r\n            switchMap( (t: boolean) => {\r\n                if (t) {\r\n                    const key = this.createConfigKey(gridInstance.id);\r\n                    return this.setUserConfig(key, '');\r\n                }\r\n                return of(t);\r\n            })\r\n        ).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.resetGridView(gridInstance);\r\n                modalRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getUserConfig(key) {\r\n        try {\r\n            return this.httpRestService.getUserSettings(key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs && ucs.textValue) {\r\n                        const c = JSON.parse(ucs.textValue);\r\n                        if (c) {\r\n                            if (c[this.localeSer.localeId]) {\r\n                                localStorage.setItem(key, ucs.textValue);\r\n                                return c[this.localeSer.localeId];\r\n                            } else {\r\n                                localStorage.setItem(key, JSON.stringify({[this.localeSer.localeId]: c}));\r\n                                if (Object.keys(c).indexOf('viewColumns') > -1) {\r\n                                    return c;\r\n                                }\r\n                                return null;\r\n                            }\r\n\r\n                        }\r\n                        return null;\r\n                    }\r\n                    return null;\r\n                })\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n\r\n@Component({\r\n    selector: 'sort-setting',\r\n    templateUrl: './datagrid-sort-setting.component.html'\r\n})\r\nexport class DatagridSortSettingComponent implements OnInit {\r\n\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n    @Input() selectedIds = [];\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() sortInfoChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    setFieldSortOrder($event: MouseEvent, data: any, order: string) {\r\n        $event.stopPropagation();\r\n        data.sortable = true;\r\n        data.order = order;\r\n\r\n        if (!order) {\r\n            this.ms.moveToLeft(data);\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n        this.onSelectionsChange(null);\r\n        return false;\r\n    }\r\n\r\n    getSortInfo() {\r\n        if (this.ms.selections) {\r\n            const names = [];\r\n            const orders = [];\r\n            this.ms.selections.forEach(col => {\r\n                col.order = col.order || 'asc';\r\n                names.push(col.field);\r\n                orders.push(col.order);\r\n            });\r\n\r\n            return { sortName: names, sortOrder: orders };\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onSelectionsChange($event) {\r\n        const si = this.getSortInfo();\r\n        this.sortInfoChange.emit(si);\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n        const items: any = $event.items as any;\r\n        if ($event.target.indexOf('rightAll') > -1) {\r\n            for (const id in items) {\r\n                if ($event.items[id]) {\r\n                    $event.items[id].order = 'asc';\r\n                }\r\n            }\r\n        } else {\r\n            if ($event.target === 'right') {\r\n                for (const id in items) {\r\n                    if ($event.items[id]) {\r\n                        $event.items[id].order = 'asc';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter,\r\n    Output, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n@Component({\r\n    selector: 'view-columns',\r\n    templateUrl: './datagrid-view-columns.component.html',\r\n})\r\nexport class DatagridViewColumnsComponent implements OnInit, OnChanges {\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n\r\n\r\n    private _selectedIds = [];\r\n    get selectedIds() {\r\n        return this._selectedIds;\r\n    }\r\n    @Input() set selectedIds(vals) {\r\n        this._selectedIds = vals;\r\n        this.selectedIdsChange.emit(vals);\r\n    }\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() selectedIdsChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n\r\n    }\r\n\r\n    hiddenColumn($event: MouseEvent, column: any) {\r\n        $event.stopPropagation();\r\n        this.ms.moveToLeft(column);\r\n    }\r\n}\r\n","import { LocaleService } from '@farris/ui-locale';\r\nimport { Component, Input, OnInit, Injector, ViewChild, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\n\r\n@Component({\r\n    selector: 'column-format-setting',\r\n    templateUrl: './column-format-setting.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnFormatSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns = [];\r\n    @Input() fields = [];\r\n\r\n    @ViewChild('colformatform') colForm: NgForm;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n\r\n    allCols = [];\r\n\r\n    /** format Data */\r\n    formatData = [];\r\n    columnType = 'all';\r\n    activeField = null;\r\n    showGridFooter = false;\r\n\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) {\r\n        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&\r\n                                !this.gridSettingComponentRef.gridInstance.footerTemplate;\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.setFormatData();\r\n            this.allCols = this.columns[0];\r\n            this.activeField = this.columns[0][0];\r\n            this.checkColumnOptions();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.isEn = this.localeSer.localeId === 'en';\r\n\r\n        this.initData();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatChange.emit(this.formatData);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setFormatData() {\r\n        this.formatData = this.fields.map(n => {\r\n            return this.columns[0].find(col => col.field === n);\r\n        });\r\n    }\r\n\r\n    private initData() {\r\n\r\n        this.alignItems = this.gridSettingComponentRef.alignItems;\r\n        this.searchItems = this.gridSettingComponentRef.searchItems;\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n\r\n        this.setFormatData();\r\n        this.allCols = this.columns[0];\r\n        this.activeField = this.columns[0][0];\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n    private checkColumnOptions() {\r\n        if (this.activeField) {\r\n            if (this.activeField.allowGrouping === undefined) {\r\n                this.activeField.allowGrouping = true;\r\n            }\r\n\r\n            if (this.activeField.groupFooter === undefined) {\r\n                this.activeField.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.groupFooter.options = this.activeField.groupFooter.options || {calculationType: -1};\r\n                if (this.activeField.groupFooter.options.calculationType === undefined) {\r\n                    this.activeField.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            if (this.activeField.footer === undefined) {\r\n                this.activeField.footer =  { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n                if (this.activeField.footer.options.calculationType === undefined) {\r\n                    this.activeField.footer.options.calculationType = -1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns(ct: string, searchWords = '') {\r\n        let cols = [];\r\n        switch (ct) {\r\n            case 'visible':\r\n                cols = this.formatData;\r\n                break;\r\n            case 'hidden':\r\n                cols = this.columns[0].filter(n => this.fields.indexOf(n.field) === -1);\r\n                break;\r\n            case 'all':\r\n            default:\r\n                cols = this.columns[0];\r\n                break;\r\n        }\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n    }\r\n\r\n    onFieldClick(col, $event) {\r\n        this.activeField = col;\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n\r\n    private onFieldsChanged() {\r\n        this.setFormatData();\r\n        this.fieldsChange.emit(this.fields);\r\n    }\r\n\r\n    onDblClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        $event.stopPropagation();\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event, ct) {\r\n        const txt = $event.target.value;\r\n        this.filterColumns(ct, txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, ct, txt, ulElRef: any) {\r\n       // console.log('drop', fieldInfo);\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.onFieldsChanged();\r\n\r\n        this.filterColumns(ct, txt);\r\n\r\n        // if (ulElRef) {\r\n        //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {\r\n        //         el.style.cursor = 'grab';\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState() {\r\n        if (this.fields.length === 0) {\r\n            return 0;\r\n        } else {\r\n            if (this.fields.length === this.columns[0].length) {\r\n                return 1;\r\n            }\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    onCheckAllClick($event, ct, txt) {\r\n        const state = this.getCheckAllState();\r\n        if (state === 0 || state === 2) {\r\n            // æ§è¡å¨é\r\n            this.columns[0].forEach(n => n.visible = true);\r\n            this.fields = this.columns[0].map(n => n.field);\r\n        } else {\r\n            // åæ¶å¨é\r\n            this.columns[0].forEach(n => n.visible = false);\r\n            this.fields = [];\r\n        }\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(ct, txt);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Injector, ChangeDetectorRef, ElementRef, ViewChild, EventEmitter, Output, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\n\r\n@Component({\r\n    selector: 'column-group-setting',\r\n    templateUrl: './column-group.component.html',\r\n    styles: [\r\n        `\r\n        .column-group-setting{ height: 100%; background-color: #ffffff; padding: 0 10px 10px 10px}\r\n        .smooth-dnd-ghost.group-field {\r\n            z-index: 999999999 !important;\r\n        }\r\n        .active {\r\n            background-color: rgb(231 241 255);\r\n            color: rgb(0 0 0);\r\n        }\r\n        .column-group-setting .group-field {\r\n            float: left;max-width: 200px;margin-right: 10px;\r\n            width: auto; padding: 5px;padding-right: 30px;\r\n            border-radius: 20px;padding-left: 10px; cursor:move\r\n        }\r\n        .group-field .f-icon { position: absolute;right: 2px;top: 7px; }\r\n        .btn-add-groupfield{float: left;width: 32px;padding: 0px;padding-top: 3px; border-radius: 20px;}\r\n        .group-field-panel{\r\n            height: 260px; border-radius: 5px; z-index: 3;position: absolute;\r\n            background: rgb(255 255 255); box-shadow: 1px 1px 4px rgb(156 155 155 / 75%);\r\n            overflow: hidden;\r\n            overflow-y: auto;\r\n        }\r\n        .group-field-panel ul {\r\n            display: inline-block;margin: 20px;margin-top: 5px;\r\n        }\r\n        .group-field-panel li {\r\n            float: left; cursor: pointer;max-width: 200px;margin-right: 10px;width: auto;\r\n            padding: 10px; min-width: 80px; margin-top: 15px; text-align: center;\r\n        }\r\n        .format-setting-column {\r\n            background: rgba(247,248,251,0.6);\r\n            padding: 7px 10px;\r\n            margin-bottom: 5px;\r\n            border: 1px solid rgba(233,236,243,0.45);\r\n            border-radius: 5px;\r\n        }\r\n        .format-setting-column.active {\r\n            border: 1px solid rgb(42 135 255);\r\n            background: rgb(239 247 255);\r\n            border-top: 1px solid rgb(42 135 255)!important;\r\n            border-bottom: 1px solid rgb(42 135 255)!important;\r\n        }\r\n\r\n        `\r\n    ]\r\n})\r\nexport class ColumnGroupSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns;\r\n    @Input() fields = [];\r\n    @Input() formatColumns = [];\r\n\r\n    @Input() groupFields = [];\r\n\r\n    @Output() groupFieldsChange = new EventEmitter();\r\n    @Output() formatColumnsChange = new EventEmitter();\r\n\r\n    @ViewChild('groupingSetting') groupingSettingEl: ElementRef;\r\n    @ViewChild('selectcolumnspanel') selectcolumnspanel: ElementRef;\r\n    @ViewChild('groupSumform') colForm: NgForm;\r\n\r\n    groupColumns = [];\r\n    allowGroupColumns = [];\r\n    activeCalculationCol = null;\r\n\r\n    showSelectColumnsPanel = false;\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n        this.setGroupColumns();\r\n        this.registerEventHandle();\r\n        this.initCalculationColumns();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatColumnsChange.emit(this.formatColumns);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.formatColumns.forEach(n => {\r\n            this.checkColumnOptions(n);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {\r\n            this.formatColumns.forEach(n => {\r\n                this.checkColumnOptions(n);\r\n            });\r\n            this.setGroupColumns();\r\n            this.initCalculationColumns();\r\n        }\r\n    }\r\n\r\n    private initCalculationColumns() {\r\n        this.activeCalculationCol = this.formatColumns[0];\r\n    }\r\n\r\n    private registerEventHandle() {\r\n        this.groupingSettingEl.nativeElement.addEventListener('click', (e) => {\r\n            if (e.target  !== this.selectcolumnspanel.nativeElement) {\r\n                this.showSelectColumnsPanel = false;\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    private setGroupColumns() {\r\n        if (this.groupFields && this.groupFields.length) {\r\n            this.groupColumns = this.groupFields.map( f => {\r\n                return this.columns[0].find(col => col.field === f);\r\n            }).filter(n => n);\r\n        } else {\r\n            this.groupColumns = [];\r\n        }\r\n        this.onGroupFieldsChange();\r\n    }\r\n\r\n    private getAllowGroupingColumns() {\r\n        return this.columns[0].filter(n => n.allowGrouping || n.allowGrouping === undefined);\r\n    }\r\n\r\n    private onGroupFieldsChange() {\r\n        this.groupFieldsChange.emit(this.groupFields);\r\n    }\r\n\r\n    private checkColumnOptions(col) {\r\n        if (col) {\r\n\r\n            if (col.groupFooter === undefined) {\r\n                col.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                col.groupFooter.options = col.groupFooter.options || {calculationType: -1};\r\n                if (col.groupFooter.options.calculationType === undefined) {\r\n                    col.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            // if (this.activeField.footer === undefined) {\r\n            //     this.activeField.footer =  { options: {calculationType: -1} };\r\n            // } else {\r\n            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n            //     if (this.activeField.footer.options.calculationType === undefined) {\r\n            //         this.activeField.footer.options.calculationType = -1;\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ¾ç¤ºæéèå­æ®µéåé¢æ¿\r\n     */\r\n    toggleGroupingColumnPanel($event) {\r\n        $event.stopPropagation();\r\n        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;\r\n        this.allowGroupColumns = this.getAllowGroupingColumns();\r\n    }\r\n\r\n    /** æ·»å åç»å­æ®µ */\r\n    addGroupColumn($event, col) {\r\n        $event.stopPropagation();\r\n        if (this.groupFields.indexOf(col.field) === -1) {\r\n            this.groupColumns = [...this.groupColumns, col];\r\n            this.groupFields = this.groupColumns.map(n => n.field);\r\n            this.onGroupFieldsChange();\r\n            this.showSelectColumnsPanel = false;\r\n        }\r\n    }\r\n\r\n    /** ç§»é¤åç»å­æ®µ */\r\n    onRemoveGroupingField($event, col) {\r\n        $event.stopPropagation();\r\n        this.groupFields = this.groupFields.filter(n => n !== col.field);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    /** æå¨åç»å­æ®µè¿è¡æåº */\r\n    onGroupingFieldDropped($event) {\r\n        console.log('grouping field droped.', $event);\r\n        const { removedIndex, addedIndex } = $event;\r\n\r\n        const removedItem = this.groupFields.splice(removedIndex, 1);\r\n        this.groupFields.splice(addedIndex, 0, ...removedItem);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    onFieldClick($event, col) {\r\n        this.activeCalculationCol = col;\r\n    }\r\n}\r\n","\r\nimport { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,\r\n        OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForVisible, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\n\r\nconst { wrapperClass, animationClass } = constants;\r\nSmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForVisible.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n    isSource: boolean;\r\n    payload: any;\r\n    willAcceptDrop: boolean;\r\n}\r\n\r\n@Directive({\r\n    selector: '[column-visible-drag]',\r\n})\r\nexport class ColumnVisibleDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        behaviour: 'move',\r\n        dragHandleSelector: '.field-drag-handle',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForVisible(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n        // console.log('DROP READY', dropResult);\r\n    }\r\n\r\n    private onDragStart(info) {\r\n        console.log('DRAG START', info);\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n        // console.log('DRAG END', info);\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n        // console.log('DRAG ENTER');\r\n    }\r\n\r\n}\r\n","import { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,  Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForGroupingField, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\nSmoothDndForGroupingField.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForGroupingField.wrapChild = false;\r\n\r\n@Directive({\r\n    selector: '[column-group-drag]',\r\n})\r\nexport class ColumnGroupDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        orientation: 'horizontal',\r\n        behaviour: 'move',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForGroupingField(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n        // console.log('DROP READY', dropResult);\r\n    }\r\n\r\n    private onDragStart(info) {\r\n        // console.log('DRAG START', info);\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n        // console.log('DRAG END', info);\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n        // console.log('DRAG ENTER');\r\n    }\r\n}\r\n","\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { GRID_SETTINGS_SERVICE} from '@farris/ui-datagrid';\r\nimport { MultiSelectModule } from '@farris/ui-multi-select';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\n\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\n\r\nimport { DatagridSettingsService } from './datagrid-settings.service';\r\nimport { DatagridSortSettingComponent } from './datagrid-sort-setting.component';\r\nimport { DatagridViewColumnsComponent } from './datagrid-view-columns.component';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';\r\nimport { ColumnGroupSettingComponent } from './column-group/column-group.component';\r\nimport { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';\r\nimport { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DatagridSettingsComponent,\r\n        DatagridSortSettingComponent,\r\n        DatagridViewColumnsComponent,\r\n        ColumnFormatSettingComponent,\r\n        ColumnGroupSettingComponent,\r\n        ColumnVisibleDragDirective,\r\n        ColumnGroupDragDirective,\r\n        SimpleColumnsComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MultiSelectModule,\r\n        ComboListModule,\r\n        FarrisCommonModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        LocaleModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n    ],\r\n    entryComponents: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent\r\n    ],\r\n    exports: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent\r\n    ]\r\n})\r\nexport class DatagridSettingsModule {\r\n    static forRoot(apiUri = ''): ModuleWithProviders {\r\n        return {\r\n            ngModule: DatagridSettingsModule,\r\n            providers: [\r\n                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}