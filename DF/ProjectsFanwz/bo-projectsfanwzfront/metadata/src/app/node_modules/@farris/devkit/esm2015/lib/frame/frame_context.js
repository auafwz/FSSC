import { Injector, Injectable, Optional, SkipSelf, InjectFlags } from '@angular/core';
import { Repository } from '../repository/index';
import { BindingData } from '../binding-data/index';
import { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';
import { Form } from '../form/index';
import { StateMachine } from '../state-machine/index';
import { ViewModel } from '../view-model/index';
import { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';
import { Context } from '../context/index';
import { AppContext } from '../app/index';
import { RouterParamService } from '../misc/index';
import { FRAME_ID, NAMESPACE } from './tokens';
import { ChangeType } from '../binding-data/index';
import { EventBus } from '../event-bus-new/index';
import { EXCEPTION_HANDLER } from '../exception/tokens';
import { EntityUtil } from '../binding-data/entity_util';
import { TranslateToken } from '../i18n/translate_token';
import { VariableParseService } from '../variable/variable_parse_service';
import { TranslateService } from '../i18n/translate_service';
import { UserSettingsToken } from '../i18n/tokens';
import { UserSettingsService } from '../i18n/user_settings_service';
import { ExpressionEngineImpl } from '../expression/expression_engine_impl';
import { ExpressionManager } from '../expression/expression_manager';
import { ExpressionResult } from '../expression/expression_result';
import { ExpressionResultFactory } from '../expression/expression_result_factory';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser } from '../variable';
import { RunMode } from '../core';
/**
 * 组件上下文
 * @description
 * # 上下文
 * ## Overview
 *
 * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：
 *
 * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix-2103/farris/devkit/guide/images/image-20210806204755378.png)
 *
 * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。
 *
 * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：
 *
 * ```typescript
 * // 方法1
 * const rootFrameContext = this.frameContext.root;
 * // 方法2
 * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');
 * ```
 *
 * 通常在编写`Web构件`时先引入FrameContext，如：
 *
 * ```javascript
 * import {FrameContext,BindingData,Repository} from '@farris/devkit';
 *
 * constructor(private frameContext:FrameContext){}
 *
 * public method(){
 *     const bindingData: BindingData = this.frameContext.bindingData;
 *     const repository: Repository = this.frameContext.repository;
 * }
 * ```
 *
 * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。
 *
 * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：
 *
 * ```typescript
 * import {BindingData,Repository,ViewModel} from '@farris/devkit';
 *
 * constructor(private viewModel:ViewModel){}
 *
 * public method(){
 *     const bindingData: BindingData = this.viewModel.bindingData;
 *     const repository: Repository = this.viewModel.repository;
 * }
 * ```
 *
 *
 *
 * ## 常用操作
 *
 * ### 获取当前上下文所属的组件
 *
 * ```typescript
 * this.frameContext.frameComponent;
 * ```
 *
 * ### 获取当前上下文的根上下文
 *
 * ```typescript
 * this.frameContext.root;
 * ```
 *
 * ### 获取当前上下文的appContext
 *
 * ```typescript
 * this.frameContext.appContext;
 * ```
 *
 * ### 获取指定frameId的上下文
 *
 * ```typescript
 * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');
 * ```
 *
 * ### 获取表单所有上下文
 *
 * ```typescript
 * this.frameContext.appContext.frameContextManager.getFrameContexts();
 * ```
 *
 *
 *
 * ## 常用属性
 *
 * ### BindingData
 *
 * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))
 *
 * ### Repository
 *
 * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))
 *
 * ### ViewModel
 *
 * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。
 *
 * ### namespace
 *
 * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。
 *
 * ### root
 *
 * 获取整个表单的根上下文
 *
 * ### uiState
 *
 * 获取当前组件的变量
 *
 * ### frameId
 *
 * 上下文标识。
 */
export class FrameContext extends Context {
    /**
     * 构造函数
     * @param injector 注入器
     */
    constructor(injector, parent) {
        super();
        this.injector = injector;
        this.typeName = 'FrameContext';
        this.isDestoried = false;
        this.metadata = {
            identify: '',
            namespace: '',
            commands: null,
            form: null,
            formControls: null,
            subForms: null,
            stateMachine: null,
            uiStates: null,
            bindingTo: ''
        };
        // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。
        this.appContext = injector.get(AppContext);
        // 确定父子关系
        // 必须对appContext进行判断，原因如下：
        // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；
        // 2、进而导致从RootFrameContext上拿VO变量拿不到。
        if (!parent || parent.appContext !== this.appContext) { // 取消 appContext 的判断
            this.parent = null;
            this.root = this;
        }
        else {
            this.parent = parent;
            this.root = parent.root;
        }
        this.frameId = injector.get(FRAME_ID);
        if (this.appContext.contextMetadataManager.exsit(this.frameId)) {
            this.metadata = this.appContext.contextMetadataManager.getContextMetadataByName(this.frameId);
        }
        this.namespace = injector.get(NAMESPACE, null);
        this.bindingData = this.injector.get(BindingData, new BindingData());
        if (!this.appContext.useIsoluteEventBus || (this.appContext.useIsoluteEventBus && !this.appContext.isoluteEventBus)) {
            this.eventBus = this.injector.get(EventBus, null, InjectFlags.Optional);
        }
        else {
            this.eventBus = this.appContext.isoluteEventBus;
        }
        this.form = this.injector.get(Form, new Form());
        this.repository = this.injector.get(Repository, this.appContext.repository);
        this.uiState = this.injector.get(UIState, new UIState());
        const defaultViewModel = new ViewModel();
        defaultViewModel.setMetadata(this.metadata);
        this.viewModel = this.injector.get(ViewModel, defaultViewModel);
        this.variableParseService = injector.get(VariableParseService, new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]));
        // 注入exceptionHandler
        this.exceptionHandler = injector.get(EXCEPTION_HANDLER, null, InjectFlags.Optional);
        // 初始化多语服务
        const translate = injector.get(TranslateToken, null);
        this.translate = translate;
        TranslateService.setTranslate(translate);
        // 初始化用户配置
        const userSettings = injector.get(UserSettingsToken, null);
        UserSettingsService.setUserSettings(userSettings);
        this.initializeRepository();
        this.appContext.regFrameContext(this);
    }
    bindInjector(componentInjector) {
        this.injector = componentInjector;
    }
    // #region 初始化
    /**
     * 初始化
     * @todo:
     * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext
     * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。
     */
    init(frameComponent) {
        this.frameComponent = frameComponent;
        this.initializeBindingData();
        this.initializeStateMachine();
        this.initializeUiState();
        this.initializeForm();
        this.initializeCommandBus();
        this.initializeViewModel();
        this.registerExceptionHandler();
        this.initExpression();
        this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
    }
    initExpression() {
        this.expressionEngineImpl = this.injector.get(ExpressionEngineImpl, null);
        this.expressionManager = this.injector.get(ExpressionManager, null);
        const expressionResultFactory = this.injector.get(ExpressionResultFactory, null);
        this.expressionResult = this.injector.get(ExpressionResult, null);
    }
    /**
     * 订阅异常消息
     */
    registerExceptionHandler() {
        // tslint:disable: no-string-literal
        const formAppContext = this.getFormAppContext();
        const applicationId = formAppContext.ApplicationId;
        window[window.location.href] = applicationId;
        if (this.exceptionHandler !== null) {
            const applicationContext = window[applicationId] = window[applicationId] || {};
            if (this.eventBus !== null && this.isRootFrameContext()) {
                applicationContext.isExceptionHandlerExist = true;
                this.exceptionHandler.setContext(this.appContext);
                this.eventBus.on('Exception', '', 'onException', this.getFormAppContext(), (error) => {
                    if (this.isDestoried === true) {
                        return;
                    }
                    if (error && error.error) {
                        try {
                            error.error.__frame_context__ = this;
                        }
                        catch (_a) { }
                    }
                    this.exceptionHandler.handle(error);
                });
            }
        }
    }
    /**
     * 获取表单appcontext，即最上层appcontext
     */
    getFormAppContext() {
        return this.appContext;
    }
    /**
     * 获取frameId
     * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId
     */
    getFrameId(relativeFrameId) {
        if (!relativeFrameId) {
            return this.frameId;
        }
        if (this.namespace && this.namespace.length > 0) {
            return `${this.namespace}_${relativeFrameId}`;
        }
        else {
            return relativeFrameId;
        }
    }
    /**
     * 初始化Repository
     */
    initializeRepository() {
        this.repository.setPaginationConfig(this.repository.paginationInfo);
    }
    initializeForm() {
        // 设置Form语言服务
        // this.form.setTranslateService(translateService);
        // 初始化Form，提取FormControl定义，添加FormControl
        // this.form.init(this.bindingData, this.metadata.bindingTo, this);
        // Form
        this.form = this.injector.get(Form, null);
        if (this.form) {
            // 设置Form语言服务
            this.form.setTranslateService(this.injector.get(TranslateToken, null));
            // 初始化Form，提取FormControl定义，添加FormControl
            const bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;
            this.form.init(this.bindingData, bindingPath, this);
        }
    }
    initializeStateMachine() {
        // StateMachine 状态机需要在绑定数据之后加载
        this.stateMachine = this.injector.get(StateMachine, null);
        if (this.stateMachine) {
            this.stateMachine.initialize(this, this.variableParseService);
        }
    }
    initializeCommandBus() {
        const handlerRegistry = this.injector.get(CommandHandlerRegistry, new CommandHandlerRegistry(this.metadata.commandHandlers));
        const extendsRegistry = this.injector.get(CommandHandlerExtenderRegistry, new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));
        const commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);
        this.commandBus = new CommandBus(commandHandlerFactory);
    }
    /**
     * 初始化ViewModel
     * @todo
     * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；
     * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；
     */
    initializeViewModel() {
        if (!this.metadata.bindingTo) {
            this.metadata.bindingTo = this.viewModel.bindingPath;
        }
        this.viewModel.init(this);
        this.regViewModel(this.viewModel);
    }
    /**
     * 初始化BindingData
     * @summary
     * 老表单：repositoryName为空，复制当前Repository里的数据；
     * 新表单：repositoryName有值，引用全局BindingData里的数据；
     */
    initializeBindingData() {
        const repositoryName = this.repository.name;
        const isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;
        if (repositoryName && isRunAtHighSpeedMode) {
            const repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);
            this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);
            this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;
            this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);
            EntityUtil.watchReposiroty(this.repository, this.bindingData);
        }
        else {
            this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);
            EntityUtil.watchReposiroty(this.repository, this.bindingData);
            this.bindingData.changes.subscribe((change) => {
                if (change.type === ChangeType.GlobalSelectionChanged) {
                    this.appContext.handleSelectChange(change, this);
                }
            });
        }
    }
    /**
     * 初始化UIState
     * 合并路由参数到UIState中
     */
    initializeUiState() {
        const isInFramework = window.location.href.indexOf('platform') > -1;
        const paramTypeTransform = this.injector.get(PARAM_TYPE_TRANSFORM_TOKEN, false);
        // 获取UIState
        this.uiState = this.injector.get(UIState, null);
        if (!this.uiState) {
            return;
        }
        this.uiState.paramTypeTransform = paramTypeTransform;
        this.uiState.initialize(this);
        // 获取路由参数
        const url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';
        const routerParamService = new RouterParamService();
        const routerParams = routerParamService.getParams(url);
        // 在UIState为路由参数创建属性
        Object.keys(routerParams).forEach((propName) => {
            Object.defineProperty(this.uiState, propName, {
                get: () => {
                    return routerParams[propName];
                }
            });
        });
    }
    /**
     * 注册子ViewModel
     * @todo
     * 1、propName写死了
     */
    regViewModel(viewModel) {
        if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {
            this.appContext.viewModelManager.register(viewModel.name, viewModel);
        }
        const className = viewModel.constructor.name;
        const parentContext = this.parent;
        let parentViewModel = null;
        if (parentContext && parentContext.viewModel) {
            parentViewModel = parentContext.viewModel;
        }
        if (!parentViewModel) {
            return;
        }
        // 优先使用生成器生成的name
        const childViewModels = parentViewModel['childViewModels'];
        let viewModelName = null;
        if (childViewModels) {
            const name = viewModel.constructor.name;
            viewModelName = childViewModels[viewModel.name] || childViewModels[name];
        }
        else if (className.length === 1) {
            const classNameTokens = viewModel.name.split('-').map((nameToken, index) => {
                if (index > 0 && nameToken.length) {
                    const pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);
                    return pasicalName;
                }
                else if (index === 0 && nameToken.length) {
                    const camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);
                    return camelName;
                }
                return nameToken;
            });
            viewModelName = classNameTokens.join('');
        }
        // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则
        if (!viewModelName) {
            viewModelName = className[0].toLowerCase() + className.substring(1, className.length);
        }
        parentViewModel[viewModelName] = viewModel;
        viewModel.bindToParent(parentViewModel);
    }
    // #endregion
    /**
     * 检查是否为根FrameContext
     * @summary
     * 检查该FrameContext是不是所在AppContext中的根FrameContext
     */
    isRootFrameContext() {
        return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);
    }
    /**
     * 销毁FrameContext
     */
    destroy() {
        this.appContext.frameContextManager.unregFrameContext(this);
        this.appContext.frameComponentRefresher.unregFrameContext(this);
        this.isDestoried = true;
        // this.bindingData.reset();
        // this.repository.reset();
    }
    /**
     * 通过namespace获取当前表单的root-framecontext(非整个表单)
     * @description
     * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext
     */
    getVirtualRootFrameContext() {
        let formFrameContext = this;
        let parent = this.parent;
        while (parent) {
            // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext
            if (parent.namespace === this.namespace) {
                formFrameContext = parent;
                parent = parent.parent;
            }
            else {
                break;
            }
        }
        return formFrameContext;
    }
    getContextById(identify) {
        return this.appContext.getContextById(identify);
    }
    getViewModel(viewModelName) {
        const renderAppContext = this.appContext;
        if (renderAppContext) {
            return renderAppContext.viewModelManager.getViewModelByName(viewModelName);
        }
        return null;
    }
    attachViewComponent(viewComponent) {
        this.frameComponent = viewComponent;
        this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
    }
    invoke(actionPath, $event) {
        const actionBindingPath = actionPath.split('.');
        const actionName = actionBindingPath[actionBindingPath.length - 1];
        const bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :
            this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);
        if (!bindingViewModel) {
            alert(`未匹配到'${actionPath}'命令的视图模型，请检查事件是否配置正确。`);
        }
        return bindingViewModel[actionName]($event);
    }
}
FrameContext.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameContext.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,