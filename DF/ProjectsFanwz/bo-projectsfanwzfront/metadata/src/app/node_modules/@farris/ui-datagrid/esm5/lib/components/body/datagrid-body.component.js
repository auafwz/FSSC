/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { delay, debounceTime } from 'rxjs/operators';
import { of } from 'rxjs';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 07:47:12
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-26 10:21:25
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, ViewChild, Renderer2, ElementRef, ChangeDetectorRef, ChangeDetectionStrategy, NgZone, Injector, Optional, ApplicationRef, Output, EventEmitter } from '@angular/core';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { ScrollbarDirective } from '../../scrollbar/scrollbar.directive';
import { SCROLL_X_ACTION, SCROLL_Y_ACTION, SCROLL_X_REACH_START_ACTION, TR_PREFIX } from '../../types/constant';
import { DatagridService } from '../../services/datagrid.service';
import { DatagridComponent } from '../../datagrid.component';
import { FormatCellDataPipe } from '../../utils/format-cell-data.pipe';
import { ColumnFormatService } from '@farris/ui-common/column';
var DatagridBodyComponent = /** @class */ (function () {
    function DatagridBodyComponent(injector, app, dg, cd, el) {
        var _this = this;
        this.injector = injector;
        this.app = app;
        this.dg = dg;
        this.cd = cd;
        this.el = el;
        // 自动高度时，禁用纵向滚动条
        this.psConfig = { swipeEasing: false, minScrollbarLength: 15, handlers: ['click-rail', 'drag-thumb', 'wheel', 'touch'], suppressScrollY: this.dg.autoHeight };
        this.scrollTop = 0;
        this.scrollLeft = 0;
        this.deltaTopHeight = 0;
        // wheelHeight = 0;
        this.wheelWidth = 0;
        this._fixedRightScrollLeft = 0;
        this.maxScrollLeft = 0;
        this.showRightShadow = false;
        this.footerHeight = 0;
        // 虚拟加载
        this.topHideHeight = 0;
        this.bottomHideHeight = 0;
        this.startRowIndex = 0;
        this.dataChange = new EventEmitter();
        this.scrollBarMode = 'auto';
        this.checkedRows = [];
        this.visibleContextMenus = [];
        this.currentRowId = undefined;
        this._hoverRowIndex = -1;
        this.subscriptions = [];
        this.minRowBuffer = 3;
        this.vScrollDir = 1;
        this.rowsCache = {};
        this.lastRenderedScrollTop = 0;
        this.lastRenderedScrollLeft = 0;
        this.prevScrollTop = 0;
        this.prevScrollLeft = 0;
        this.rows = [];
        this.blankTopHeight = 0;
        this.blankBottomHeight = 0;
        this.cellContentFormatter = null;
        // 当启用多选且允许多选中，列表不能编辑时，取选中后禁止触发body 的click 事件
        this.__triggerBodyClickEvent = true;
        this.onBeforeShowContextMenu = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // row_1_fixedleft  row_1  row_1_fixedright
            var contextMenuDom = e.contextMenuDom, event = e.event;
            if (event.target.closest('.datagrid-editor')) {
                return of({ show: false });
            }
            /** @type {?} */
            var rowID = event.target.id;
            if (contextMenuDom) {
                // 排除分组行、分组合计行
                if (contextMenuDom.className.indexOf('f-datagrid-group-row') === -1 && contextMenuDom.className.indexOf('f-datagrid-group-footer') === -1) {
                    rowID = contextMenuDom.id.replace('row_', '').replace('_fixedleft', '').replace('_fixedright', '');
                    /** @type {?} */
                    var rowData = _this.dfs.findRow(rowID);
                    /** @type {?} */
                    var focusTargetWidth = _this.viewportW > _this.totalWidth ? _this.totalWidth : _this.viewportW;
                    return of({ show: true, data: { data: rowData.data, grid: _this.dg }, focusTargetWidth: focusTargetWidth });
                }
            }
            return of({ show: false });
        });
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.ngZone = this.injector.get(NgZone);
        this.render = this.injector.get(Renderer2);
        /** @type {?} */
        var columnFormatService = this.injector.get(ColumnFormatService);
        this.cellContentFormatter = new FormatCellDataPipe(columnFormatService, this.injector);
    }
    Object.defineProperty(DatagridBodyComponent.prototype, "fixedRightScrollLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fixedRightScrollLeft;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            // this._fixedRightScrollLeft = this.dg.scrollBarShowMode === 'allways' ?  val - 18 : val;
            this._fixedRightScrollLeft = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridBodyComponent.prototype, "hoverRowIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hoverRowIndex;
        },
        set: /**
         * @param {?} rowIdx
         * @return {?}
         */
        function (rowIdx) {
            this._hoverRowIndex = rowIdx;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridBodyComponent.prototype, "selectedRows", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dg.selections;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridBodyComponent.prototype, "scrollbarXHeight", {
        //////////////////////////////////////////////////////////////////////////
        get: 
        //////////////////////////////////////////////////////////////////////////
        /**
         * @return {?}
         */
        function () {
            if (this.dg && this.ps && this.ps.instance) {
                /** @type {?} */
                var h = this.dg.scrollBarShowMode === 'allways' && this.ps.instance['scrollbarXActive'] ? 22 : 0;
                if (this.ps.instance['scrollbarYActive'] && h) {
                    return h + 18;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridBodyComponent.prototype, "scrollbarYWidth", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.dg && this.ps && this.ps.instance) {
                return this.dg.scrollBarShowMode === 'allways' && this.ps.instance['scrollbarYActive'] && this.showRightShadow ? 18 : 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.listenSubjects();
        this.dg.scrollInstance = this.ps;
        /** @type {?} */
        var s1 = this.dgs.showGridHeader.subscribe((/**
         * @param {?} headerHeight
         * @return {?}
         */
        function (headerHeight) {
            _this.updateContainerSize(headerHeight);
        }));
        this.subscriptions.push(s1);
        /** @type {?} */
        var s10 = this.dgs.footerPositionChanged.subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateContainerSize();
        }));
        this.subscriptions.push(s10);
        /** @type {?} */
        var s2 = this.dgs.rowHeightChanged.subscribe((/**
         * @return {?}
         */
        function () {
            _this.cd.detectChanges();
        }));
        this.subscriptions.push(s2);
        /** @type {?} */
        var s3 = this.dfs.clientSort$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.checkScrollbarPosition(true);
            _this.cd.detectChanges();
            // this.dg.columnSorted.emit();
        }));
        this.subscriptions.push(s3);
        /** @type {?} */
        var s5 = this.dg.dgs.columnsChanged.pipe(delay(100)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e && e.scrollToLeft) {
                _this.ps.elementRef.nativeElement.scrollTo(0, 0);
                _this.ps.scrollToLeft(0, 100);
            }
        }));
        this.subscriptions.push(s5);
        this.viewScrollContainer.nativeElement.addEventListener('click', this.onMouseClick.bind(this));
    };
    /**
     * @private
     * @param {?=} headerHeight
     * @return {?}
     */
    DatagridBodyComponent.prototype.updateContainerSize = /**
     * @private
     * @param {?=} headerHeight
     * @return {?}
     */
    function (headerHeight) {
        /** @type {?} */
        var hh = headerHeight || this.dg.realHeaderHeight;
        this.setPositionTop(hh);
        this.height = this.dg.height - this.top;
        this.bodyStyle = this.getBodyStyle();
        this.cd.detectChanges();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridBodyComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.data && !changes.data.isFirstChange()) {
            this.bodyStyle = this.getBodyStyle();
            this.dfs.setCurrentPageData(changes.data.currentValue);
            this.onDataChanged();
        }
        if (changes.footerHeight !== undefined && !changes.footerHeight.isFirstChange()) {
            this.bodyStyle = this.getBodyStyle();
        }
        if (changes.scrollBarMode !== undefined && !changes.scrollBarMode.isFirstChange()) {
            if (this.ps && this.ps.instance && this.scrollBarMode === 'allways' && this.ps.instance.scrollbarYActive) {
                this.rightFixedWidth += this.showRightShadow ? 18 : 0;
            }
            else {
                this.rightFixedWidth = this.columnsGroup.rightFixedWidth;
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridBodyComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroySubscriptions();
    };
    /**
     * @return {?}
     */
    DatagridBodyComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DatagridBodyComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @param {?} headerHeight
     * @return {?}
     */
    DatagridBodyComponent.prototype.setPositionTop = /**
     * @private
     * @param {?} headerHeight
     * @return {?}
     */
    function (headerHeight) {
        this.top = headerHeight;
        if ((this.dg.enableFilterRow || this.dg.enableSmartFilter) && this.dg.showFilterBar) {
            this.top += this.dg.filterBarHeight;
        }
        if (this.dg.showRowGroupPanel) {
            this.top += this.dg.rowGroupPanelHeight;
        }
        if (this.dg.showFooter && (this.dg.footerPosition === 'top' || this.dg.footerPosition === 'both')) {
            this.top += this.dg.footerHeight;
        }
    };
    /**
     * @private
     * @param {?=} toTop
     * @return {?}
     */
    DatagridBodyComponent.prototype.checkScrollbarPosition = /**
     * @private
     * @param {?=} toTop
     * @return {?}
     */
    function (toTop) {
        if (toTop === void 0) { toTop = false; }
        if (!this.dg.data || !this.dg.data.length) {
            return;
        }
        /** @type {?} */
        var scrollBar = this.ps.instance;
        /** @type {?} */
        var scrollElRef = this.ps.elementRef.nativeElement;
        // scrollBar.update();
        /** @type {?} */
        var lastScrollLeft = scrollBar ? scrollBar.lastScrollLeft : 0;
        /** @type {?} */
        var lastScrollTop = scrollBar ? scrollBar.lastScrollTop : 0;
        // const lastScrollLeft = this.scrollLeft;
        // const lastScrollTop = this.scrollTop;
        /** @type {?} */
        var scrollTop = scrollElRef.scrollTop;
        /** @type {?} */
        var scrollLeft = scrollElRef.scrollLeft;
        if (!toTop) {
            if (scrollTop != lastScrollTop) {
                this.ps.scrollToTop(lastScrollTop);
                this.dgs.onScrollMove(lastScrollTop, SCROLL_Y_ACTION);
            }
        }
        else {
            this.ps.scrollToTop();
            this.dgs.onScrollMove(lastScrollTop, SCROLL_Y_ACTION);
        }
        this.scrollLeft = lastScrollLeft;
        if (scrollLeft != lastScrollLeft) {
            this.ps.scrollToX(lastScrollLeft);
            this.dgs.onScrollMove(lastScrollLeft, SCROLL_X_ACTION);
        }
        else {
            if (lastScrollLeft) {
                this.dgs.onScrollMove(lastScrollLeft, SCROLL_X_ACTION);
            }
        }
    };
    /**
     * 数据发生变化，重新加载数据时执行
     * 重置滚动条位置
     */
    /**
     * 数据发生变化，重新加载数据时执行
     * 重置滚动条位置
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.onDataChanged = /**
     * 数据发生变化，重新加载数据时执行
     * 重置滚动条位置
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.dg.setPagerHeight();
        this.viewportH = this.getViewPortHeight();
        this.bodyStyle = this.getBodyStyle();
        /**
         * update:
         * node_modules\perfect-scrollbar\types\perfect-scrollbar.d.ts
         * lastScrollTop: number
         */
        if (this.ps && this.ps.instance && !this.dg.isEditing() && !this.dg.clientFilterChanged && !this.dg.autoHeight) {
            this.scrollTop = 0;
            this.lastRenderedScrollTop = 0;
            this.ps.scrollToTop();
            this.scrollLeft = 0;
            this.ps.scrollToLeft();
        }
        this.rowsCache = {};
        /** @type {?} */
        var keepscrollPos = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var scrollInfo = _this.dg.dfs.getState().scrollInfo;
            if (scrollInfo) {
                if (scrollInfo.y) {
                    _this.scrollTop = scrollInfo.y;
                    _this.dg.scrollInstance.scrollToY(scrollInfo.y);
                    _this.dgs.onScrollMove(scrollInfo.y, SCROLL_Y_ACTION);
                }
                if (scrollInfo.x) {
                    _this.scrollLeft = scrollInfo.x;
                    _this.dg.scrollInstance.scrollToX(scrollInfo.x);
                    _this.dg.dgs.onScrollMove(scrollInfo.x, SCROLL_X_ACTION);
                }
            }
        });
        if (!this.dg.nowrap || this.dg.autoHeight) {
            this.renderData(false);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.updateRowHeight();
            }), 100);
        }
        else {
            keepscrollPos();
            this.renderData(false);
            this.ps.update();
        }
        this.dg.initSelectOrChecked();
        this.dg.clientFilterChanged = false;
        this.dataChange.emit(this.data);
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.destroySubscriptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} sub
             * @return {?}
             */
            function (sub) {
                if (sub) {
                    sub.unsubscribe();
                    sub = null;
                }
            }));
            this.subscriptions = [];
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.listenSubjects = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroySubscriptions();
        this.gridSizeSubscribe = this.dfs.gridSize$.pipe(debounceTime(50)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (state) {
                _this.dg.setPagerHeight();
                /** @type {?} */
                var hh = _this.dg.setHeaderHeight();
                _this.setPositionTop(hh);
                _this.height = state.height - _this.top;
                _this.width = Math.floor(state.width);
                _this.rowHeight = state.rowHeight;
                if (_this.dg.showBorder) {
                    _this.width -= 2;
                }
                _this.viewportW = _this.width;
                _this.viewportH = _this.getViewPortHeight();
                _this.canvasHeight = _this.getCanvasHeight();
                _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    _this.checkScrollbarPosition();
                    _this.updateColumnSize(state.columnsGroup);
                    _this.cd.detectChanges();
                    _this.scrollLeft = _this.ps.elementRef.nativeElement.scrollLeft;
                    _this.maxScrollLeft = _this.colsWidth + _this.leftFixedWidth;
                    // grid 容器宽度
                    /** @type {?} */
                    var dgContainerWidth = _this.dg.dgContainer.nativeElement.offsetWidth;
                    // 所有列宽之和
                    /** @type {?} */
                    var allColsWidth = Math.floor(_this.columnsGroup.totalWidth);
                    // 右侧固定列的位置
                    _this.fixedRightScrollLeft = _this.width - _this.rightFixedWidth + _this.scrollLeft;
                    _this.bodyStyle = _this.getBodyStyle();
                    if (dgContainerWidth > allColsWidth || dgContainerWidth === allColsWidth) {
                        _this.showRightShadow = false;
                        _this.fixedRightScrollLeft = _this.maxScrollLeft;
                    }
                    else {
                        _this.showRightShadow = true;
                    }
                    _this.renderData(false);
                    if (!_this.dg.nowrap || _this.dg.autoHeight) {
                        /** @type {?} */
                        var _timer = null;
                        if (_timer) {
                            _timer.clearTimeout();
                        }
                        _timer = setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.updateRowHeight();
                            _this.ps.update();
                        }), 100);
                    }
                    else {
                        if (!_this.cd['destroyed']) {
                            _this.ps.update();
                            _this.cd.detectChanges();
                        }
                    }
                    // this.ps.update();
                    _this.dgs.showFixedShadow.emit({ showRightShadow: _this.showRightShadow, x: _this.fixedRightScrollLeft });
                }));
                if (_this.scrollBarMode === 'allways') {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.updateColumnSize(_this.columnsGroup);
                        _this.dgs.scrollbarUpdate.emit({ scrollbarRef: _this.ps.instance });
                    }), 50);
                }
            }
        }));
        this.subscriptions.push(this.gridSizeSubscribe);
        this.columnResizeSubscribe = this.dfs.columnResize$.subscribe((/**
         * @param {?} cg
         * @return {?}
         */
        function (cg) {
            _this.updateColumnSize(cg);
            _this.cd.detectChanges();
        }));
        this.subscriptions.push(this.columnResizeSubscribe);
        this.dgs.setSelecedRow.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (r && r.selected) {
                _this.currentRowId = r.id;
            }
            else {
                _this.currentRowId = undefined;
            }
        }));
        this.selectRowSubscribe = this.dfs.selectRow$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            if (row) {
                _this.currentRowId = row.id;
                // 20210817 方向键移动后刷新视图状态
                _this.cd.detectChanges();
            }
        }));
        this.subscriptions.push(this.selectRowSubscribe);
        this.unselectRowSubscribe = this.dfs.unSelectRow$.subscribe((/**
         * @param {?} prevRow
         * @return {?}
         */
        function (prevRow) {
            if (prevRow && prevRow.id === _this.currentRowId) {
                _this.currentRowId = undefined;
                _this.dg.selectedRow = null;
            }
            if (!_this.dg.editable && _this.dg.multiSelect) {
                _this.__triggerBodyClickEvent = _this.dg.selectionMode === 'default';
            }
            _this.cd.detectChanges();
        }));
        this.subscriptions.push(this.unselectRowSubscribe);
        this.selectAllSubscribe = this.dfs.selectAll$.subscribe((/**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            _this.dg.selectAll.emit(rows);
            _this.cd.detectChanges();
        }));
        this.subscriptions.push(this.selectAllSubscribe);
        this.checkRowSubscribe = this.dfs.checkRow$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            _this.dg.checked.emit(row);
            _this.checkedRowsChanged();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(this.checkRowSubscribe);
        this.clearSelectionsSubscribe = this.dfs.clearSelections$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.currentRowId = undefined;
            if (_this.dg.checkOnSelect) {
                _this.checkedRowsChanged();
            }
            _this.dg.unSelectAll.emit();
        }));
        this.subscriptions.push(this.clearSelectionsSubscribe);
        this.uncheckRowSubscribe = this.dfs.unCheckRow$.subscribe((/**
         * @param {?} prevRow
         * @return {?}
         */
        function (prevRow) {
            _this.dg.unChecked.emit(prevRow);
            _this.checkedRowsChanged();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(this.uncheckRowSubscribe);
        this.checkAllSubscribe = this.dfs.checkAll$.subscribe((/**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            _this.dg.checkAll.emit(rows);
            _this.checkedRowsChanged();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(this.checkAllSubscribe);
        this.clearCheckedsSubscribe = this.dfs.clearCheckeds$.subscribe((/**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            if (_this.dg.selectOnCheck) {
                _this.currentRowId = undefined;
            }
            _this.dg.unCheckAll.emit(rows);
            _this.checkedRowsChanged();
            _this.cd.detectChanges();
        }));
        this.subscriptions.push(this.clearCheckedsSubscribe);
        this.subscriptions.push(this.dgs.setScrollbarPosition.subscribe((/**
         * @return {?}
         */
        function () {
            _this.checkScrollbarPosition();
            _this.updateScrollPosition(_this.scrollLeft);
        })));
        this.dgs.columnResized.pipe(delay(100)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.dg.nowrap ||
                (_this.dg.currentCell && _this.dg.currentCell.isEditing && _this.dg.currentCell.column &&
                    _this.dg.currentCell.column.editor && _this.dg.currentCell.column.editor.type === 'textarea')) {
                /** @type {?} */
                var trdoms = _this.dg.dgContainer.nativeElement.querySelectorAll('.f-datagrid-body-row:not(f-datagrid-footer-row)');
                trdoms.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.style.height = 'auto'; }));
                /** @type {?} */
                var trID = '';
                if (e) {
                    /** @type {?} */
                    var rowId = e.id;
                    trID = TR_PREFIX + rowId;
                }
                _this.updateRowHeight(trID);
                // trdoms.forEach(n => n.style.height = '');
            }
            if (_this.dg.headerWrap) {
                _this.dg.setHeaderHeight();
                _this.dfs.columnResizeEnd();
            }
        }));
        this.dgs.cellContentWrapChanged.pipe(delay(100)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateRowHeight();
        }));
        this.dg.dfs.rowUpdate$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            if (row && row.data) {
                _this.buildCustomCellStyle(row);
            }
        }));
    };
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    DatagridBodyComponent.prototype.buildCustomCellStyle = /**
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        var _this = this;
        /** @type {?} */
        var rightTrs = [];
        /** @type {?} */
        var leftTrs = [];
        if (this.fixedRightEl) {
            rightTrs = this.fixedRightEl.nativeElement.querySelectorAll('tr');
        }
        if (this.fixedLeftEl) {
            leftTrs = this.fixedLeftEl.nativeElement.querySelectorAll('.fixed-left-row');
        }
        /** @type {?} */
        var trs = this.mainArea.nativeElement.querySelectorAll('tr.f-datagrid-body-row');
        /** @type {?} */
        var updateCellStyle = (/**
         * @param {?} arr
         * @param {?} col
         * @param {?} style
         * @return {?}
         */
        function (arr, col, style) {
            if (arr.length) {
                /** @type {?} */
                var td = arr[row.index].querySelector("[field=\"" + col.field + "\"]");
                if (td) {
                    _this.dg.renderCustomStyle(style, td);
                }
            }
        });
        this.dg.flatColumns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        function (col) {
            if (col.styler) {
                /** @type {?} */
                var _rd = row.data;
                /** @type {?} */
                var cs = col.styler(_rd[col.field], _rd, row.index);
                if (cs && Object.keys(cs).length) {
                    updateCellStyle(leftTrs, col, cs);
                    updateCellStyle(rightTrs, col, cs);
                    updateCellStyle(trs, col, cs);
                }
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.checkedRowsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        this.dgs.onCheckedRowsCountChange();
        /** @type {?} */
        var checkedRows = this.dg.checkeds;
        this.dg.checkValues = checkedRows.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.id; }));
        this.dg.checkValuesChange.emit(this.dg.checkValues);
        this.dg.checkedChange.emit(checkedRows);
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.getTrDomHeight = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var list = [];
        /** @type {?} */
        var rightTrs = [];
        /** @type {?} */
        var leftTrs = [];
        /** @type {?} */
        var trdoms = [];
        if (this.fixedRightEl) {
            rightTrs = this.fixedRightEl.nativeElement.querySelectorAll('tr');
        }
        if (this.fixedLeftEl) {
            leftTrs = this.fixedLeftEl.nativeElement.querySelectorAll('.fixed-left-row');
        }
        if (this.mainArea) {
            trdoms = this.mainArea.nativeElement.querySelectorAll('tr.f-datagrid-body-row');
        }
        trdoms.forEach((/**
         * @param {?} tr
         * @param {?} i
         * @return {?}
         */
        function (tr, i) {
            /** @type {?} */
            var t1 = 0;
            /** @type {?} */
            var t2 = Math.ceil(tr.offsetHeight);
            /** @type {?} */
            var t3 = 0;
            if (leftTrs && leftTrs.length) {
                t1 = Math.ceil(leftTrs[i].offsetHeight);
            }
            if (rightTrs && rightTrs.length) {
                t3 = Math.ceil(rightTrs[i].offsetHeight);
            }
            /** @type {?} */
            var _h = Math.max(t1, t2, t3, _this.dg.rowHeight);
            list.push(_h);
        }));
        return list;
    };
    /** 允许数据折行时，计算行号的行高 */
    /**
     * 允许数据折行时，计算行号的行高
     * @param {?=} trDomId
     * @return {?}
     */
    DatagridBodyComponent.prototype.updateRowHeight = /**
     * 允许数据折行时，计算行号的行高
     * @param {?=} trDomId
     * @return {?}
     */
    function (trDomId) {
        var _this = this;
        if (trDomId === void 0) { trDomId = null; }
        if (!this.mainArea) {
            return;
        }
        /** @type {?} */
        var dgBody = this.el.nativeElement.querySelector('div.f-datagrid-body');
        if (dgBody) {
            if (!this.dg.nowrap || this.dg.autoHeight) {
                this.render.addClass(dgBody, 'data-wrap');
            }
            else {
                this.render.removeClass(dgBody, 'data-wrap');
            }
        }
        /** @type {?} */
        var cssTextArr = [];
        if (!trDomId) {
            this.rows.forEach((/**
             * @param {?} r
             * @param {?} i
             * @return {?}
             */
            function (r, i) {
                /** @type {?} */
                var rowId = _this.dfs.primaryId(r);
                /** @type {?} */
                var trID = TR_PREFIX + rowId;
                /** @type {?} */
                var leftTrId = trID + '_fixedleft';
                /** @type {?} */
                var rightTrId = trID + '_fixedright';
                if (!_this.dg.nowrap || _this.dg.autoHeight) {
                    /** @type {?} */
                    var list = _this.getTrDomHeight();
                    /** @type {?} */
                    var h = list[i];
                    cssTextArr.push(_this.dg.customStyleKey() + " .f-datagrid-body.data-wrap #" + leftTrId + "{ height: " + h + "px }");
                    cssTextArr.push(_this.dg.customStyleKey() + " .f-datagrid-body.data-wrap #" + trID + "{ height: " + h + "px }");
                    cssTextArr.push(_this.dg.customStyleKey() + " .f-datagrid-body.data-wrap #" + rightTrId + "{ height: " + h + "px }");
                }
                else {
                    // cssTextArr.push(`${this.dg.customStyleKey()} .f-datagrid-body #${leftTrId}{ height: ${list[i]}px }`);
                    // cssTextArr.push(`${this.dg.customStyleKey()} .f-datagrid-body #${trID}{ height: ${list[i]}px }`);
                    // cssTextArr.push(`${this.dg.customStyleKey()} .f-datagrid-body #${rightTrId}{ height: ${list[i]}px }`);
                    /** @type {?} */
                    var key1 = _this.dg.customStyleKey() + " .f-datagrid-body #" + leftTrId;
                    /** @type {?} */
                    var key2 = _this.dg.customStyleKey() + " .f-datagrid-body #" + trID;
                    /** @type {?} */
                    var key3 = _this.dg.customStyleKey() + " .f-datagrid-body #" + rightTrId;
                    _this.dgs.removeCssRule(key1);
                    _this.dgs.removeCssRule(key2);
                    _this.dgs.removeCssRule(key3);
                }
            }));
            this.dgs.appendCssRules(cssTextArr);
        }
        else {
            cssTextArr = [];
            /** @type {?} */
            var domSel = '#' + trDomId;
            /** @type {?} */
            var _arr = [];
            if (this.fixedRightEl) {
                /** @type {?} */
                var rtr = this.fixedRightEl.nativeElement.querySelector(domSel);
                if (rtr) {
                    _arr.push(Math.ceil(rtr.offsetHeight));
                }
            }
            if (this.fixedLeftEl) {
                /** @type {?} */
                var ltr = this.fixedLeftEl.nativeElement.querySelector(domSel);
                if (ltr) {
                    _arr.push(Math.ceil(ltr.offsetHeight));
                }
            }
            if (this.mainArea) {
                /** @type {?} */
                var tr = this.mainArea.nativeElement.querySelector(domSel);
                if (tr) {
                    _arr.push(Math.ceil(tr.offsetHeight));
                }
            }
            /** @type {?} */
            var _h = Math.max.apply(Math, tslib_1.__spread(_arr));
            /** @type {?} */
            var leftTrId = trDomId + '_fixedleft';
            /** @type {?} */
            var rightTrId = trDomId + '_fixedright';
            if (!this.dg.nowrap || this.dg.autoHeight) {
                cssTextArr.push(this.dg.customStyleKey() + " .f-datagrid-body.data-wrap #" + leftTrId + "{ height: " + _h + "px;}");
                cssTextArr.push(this.dg.customStyleKey() + " .f-datagrid-body.data-wrap #" + trDomId + "{ height: " + _h + "px;}");
                cssTextArr.push(this.dg.customStyleKey() + " .f-datagrid-body.data-wrap #" + rightTrId + "{ height: " + _h + "px;}");
            }
            else {
                cssTextArr.push(this.dg.customStyleKey() + " .f-datagrid-body #" + leftTrId + "{ height: " + _h + "px }");
                cssTextArr.push(this.dg.customStyleKey() + " .f-datagrid-body #" + trDomId + "{ height: " + _h + "px }");
                cssTextArr.push(this.dg.customStyleKey() + " .f-datagrid-body #" + rightTrId + "{ height: " + _h + "px }");
            }
            this.dgs.appendCssRules(cssTextArr);
        }
        this.updateCanvasHeight();
        // 移除height: auto
        /** @type {?} */
        var trdoms = this.dg.dgContainer.nativeElement.querySelectorAll('.f-datagrid-body-row:not(f-datagrid-footer-row)');
        trdoms.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.style.height = ''; }));
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} cg
     * @return {?}
     */
    DatagridBodyComponent.prototype.updateColumnSize = /**
     * @private
     * @param {?} cg
     * @return {?}
     */
    function (cg) {
        if (cg) {
            this.columnsGroup = cg;
            this.leftFixedWidth = this.columnsGroup.leftFixedWidth;
            this.rightFixedWidth = this.columnsGroup.rightFixedWidth;
            if (this.ps && this.ps.instance && this.dg.scrollBarShowMode === 'allways' && this.ps.instance.scrollbarYActive) {
                this.rightFixedWidth += this.showRightShadow ? 18 : 0;
            }
            this.colsWidth = this.columnsGroup.normalWidth; // + (this.showRightShadow ? 18 : 0);
            this.totalWidth = this.columnsGroup.totalWidth;
            if (this.scrollBarMode === 'allways' && !this.rightRowsCmp && !this.dg.useControlPanel) {
                this.totalWidth += 18;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.getBodyStyle = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var h = this.getViewPortHeight();
        if (!this.data.length) {
            if (this.dg.autoHeight) {
                h = this.dg.emptyDataHeight;
            }
            if (this.dg.footerData && this.dg.showFooter) {
                /** @type {?} */
                var fd = this.dg.footerData;
                if (this.dg.footerData.subscribe) {
                    fd = this.dg.footerData['value'];
                }
                if (fd && Array.isArray(fd) && fd.length) {
                    h = h - this.dg.footerHeight;
                }
            }
        }
        else {
            if (this.dg.showFooter && this.dg.footerPosition === 'both') {
                h = h - this.dg.footerHeight;
            }
        }
        return {
            height: Math.floor(h) + "px"
        };
    };
    /**
     * @private
     * @param {?} scrollLeft
     * @return {?}
     */
    DatagridBodyComponent.prototype.updateScrollPosition = /**
     * @private
     * @param {?} scrollLeft
     * @return {?}
     */
    function (scrollLeft) {
        this.scrollLeft = scrollLeft;
        this.fixedRightScrollLeft = this.scrollLeft + this.width - this.rightFixedWidth;
        if (this.fixedRightScrollLeft === this.maxScrollLeft || this.fixedRightScrollLeft > this.maxScrollLeft) {
            this.fixedRightScrollLeft = this.maxScrollLeft;
            this.showRightShadow = false;
        }
        else {
            this.showRightShadow = true;
        }
        if (this.fixedLeftEl) {
            this.render.setStyle(this.fixedLeftEl.nativeElement, 'transform', "translate3d(" + this.scrollLeft + "px, 0px, 0px)");
        }
        if (this.fixedRightEl) {
            this.render.setStyle(this.fixedRightEl.nativeElement, 'transform', "translate3d(" + this.fixedRightScrollLeft + "px, 0px, 0px)");
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBodyComponent.prototype.onScrollToX = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var x = $event.target.scrollLeft;
        this.updateScrollPosition(x);
        // this.cd.detectChanges();
        this.dgs.onScrollMove(x, SCROLL_X_ACTION);
        this.dgs.showFixedShadow.emit({ showRightShadow: this.showRightShadow, x: this.fixedRightScrollLeft });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBodyComponent.prototype.onScrollToY = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var y = $event.target.scrollTop;
        if (this.dg.virtualized) {
            this.handleScroll();
        }
        this.scrollTop = y;
        this.dg.scrollY.emit(y);
        this.dgs.onScrollMove(y, SCROLL_Y_ACTION);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBodyComponent.prototype.onPsXReachStart = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var x = $event.target.scrollLeft;
        this.updateScrollPosition(x);
        this.dgs.onScrollMove(x, SCROLL_X_REACH_START_ACTION);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBodyComponent.prototype.onPsXReachEnd = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.showRightShadow = false;
        // const x = $event.target.scrollLeft;
        // this.updateScrollPosition(x);
        // this.cd.detectChanges();
        // // this.dgs.onShowFixedShadow(this.showRightShadow);
        // this.dgs.onScrollMove(x, SCROLL_X_REACH_END_ACTION);
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    DatagridBodyComponent.prototype.isChecked = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData) {
            return this.dfs.isRowChecked(rowData[this.dg.idField]);
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    DatagridBodyComponent.prototype.isSelected = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData) {
            return this.dfs.isRowSelected(rowData[this.dg.idField]);
        }
        return false;
    };
    /**
     * @param {?} row
     * @param {?=} open
     * @return {?}
     */
    DatagridBodyComponent.prototype.toggleGroupRow = /**
     * @param {?} row
     * @param {?=} open
     * @return {?}
     */
    function (row, open) {
        if (open === void 0) { open = true; }
        row.expanded = open;
        this.ps.update();
    };
    /** =================================== 分 ====== 隔 ====== 线 =================================== */
    /** 获取可视区域高度 */
    /** =================================== 分 ====== 隔 ====== 线 =================================== */
    /**
     * 获取可视区域高度
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.getViewPortHeight = /** =================================== 分 ====== 隔 ====== 线 =================================== */
    /**
     * 获取可视区域高度
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var viewPortHeight = this.dg.height;
        if (this.dg.showHeader) {
            viewPortHeight = viewPortHeight - this.dg.realHeaderHeight;
        }
        if ((this.dg.enableFilterRow || this.dg.enableSmartFilter) && this.dg.showFilterBar) {
            viewPortHeight -= this.dg.filterBarHeight;
        }
        if (this.dg.showRowGroupPanel) {
            viewPortHeight -= this.dg.rowGroupPanelHeight;
        }
        if (this.dg.showFooter && this.data.length) {
            viewPortHeight = viewPortHeight - this.dg.footerHeight;
        }
        if (this.dg.pagination) {
            viewPortHeight = viewPortHeight - this.dg.pagerHeight - 2;
        }
        if (this.dg.showBorder) {
            viewPortHeight -= 2;
        }
        this.viewportH = viewPortHeight;
        return viewPortHeight;
    };
    // 不折行时，所有数据的高度
    // 不折行时，所有数据的高度
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.allRowsHeight = 
    // 不折行时，所有数据的高度
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rowHeightpatch = 1;
        // this.dg.autoHeight ? 2 : 1;
        /** @type {?} */
        var rowHeight = this.dg.rowHeight + rowHeightpatch;
        /** @type {?} */
        var itemsCount = 0;
        if (this.dg.groupSummaryPosition === 'inGroupRow') {
            itemsCount = this.data.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n['__group_footer__']; })).length;
        }
        else {
            itemsCount = this.data.length;
        }
        /** @type {?} */
        var h = itemsCount * rowHeight;
        if (this.dg.autoHeight) {
            h += itemsCount;
        }
        else {
            h += 2;
        }
        return h;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.getCanvasHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var canvasHeight = 0;
        if (!this.data || !this.data.length) {
            this.canvasHeight = 0;
            return 0;
        }
        if (this.dg.nowrap) {
            canvasHeight = this.allRowsHeight();
        }
        else {
            canvasHeight = this.getTrDomHeight().reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            function (r, c) { return r + c; }), 0);
        }
        if (!canvasHeight) {
            canvasHeight = this.viewportH;
        }
        this.canvasHeight = canvasHeight;
        return canvasHeight;
    };
    /**
     * @return {?}
     */
    DatagridBodyComponent.prototype.updateCanvasHeight = /**
     * @return {?}
     */
    function () {
        this.canvasHeight = this.getCanvasHeight();
    };
    /**
     * @private
     * @param {?} y
     * @return {?}
     */
    DatagridBodyComponent.prototype.getRowFromPosition = /**
     * @private
     * @param {?} y
     * @return {?}
     */
    function (y) {
        return Math.floor(y / (this.dg.rowHeight + 1));
    };
    /**
     * @param {?=} viewportTop
     * @param {?=} viewportLeft
     * @return {?}
     */
    DatagridBodyComponent.prototype.getVisibleRange = /**
     * @param {?=} viewportTop
     * @param {?=} viewportLeft
     * @return {?}
     */
    function (viewportTop, viewportLeft) {
        if (viewportTop == null) {
            viewportTop = this.scrollTop;
        }
        if (viewportLeft == null) {
            viewportLeft = this.scrollLeft;
        }
        return {
            top: this.getRowFromPosition(viewportTop),
            bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,
            leftPx: viewportLeft,
            rightPx: viewportLeft + this.viewportW
        };
    };
    /**
     * @private
     * @param {?=} viewportTop
     * @param {?=} viewportLeft
     * @return {?}
     */
    DatagridBodyComponent.prototype.getRenderedRange = /**
     * @private
     * @param {?=} viewportTop
     * @param {?=} viewportLeft
     * @return {?}
     */
    function (viewportTop, viewportLeft) {
        /** @type {?} */
        var range = this.getVisibleRange(viewportTop, viewportLeft);
        /** @type {?} */
        var buffer = Math.round(this.viewportH / (this.dg.rowHeight + 1));
        /** @type {?} */
        var minBuffer = this.minRowBuffer;
        if (this.vScrollDir == -1) {
            range.top -= buffer;
            range.bottom += minBuffer;
        }
        else if (this.vScrollDir == 1) {
            range.top -= minBuffer;
            range.bottom += buffer;
        }
        else {
            range.top -= minBuffer;
            range.bottom += minBuffer;
        }
        range.top = Math.max(0, range.top);
        range.bottom = Math.min(this.data.length - 1, range.bottom);
        range.leftPx -= this.viewportW;
        range.rightPx += this.viewportW;
        range.leftPx = Math.max(0, range.leftPx);
        range.rightPx = Math.min(this.canvasWidth, range.rightPx);
        return range;
    };
    /**
     * @private
     * @param {?} range
     * @return {?}
     */
    DatagridBodyComponent.prototype.renderRows = /**
     * @private
     * @param {?} range
     * @return {?}
     */
    function (range) {
        var _this = this;
        /** @type {?} */
        var rows = [];
        /** @type {?} */
        var dataLength = this.data.length;
        for (var i = range.top; i <= range.bottom; i++) {
            if (this.rowsCache[i] || (i == dataLength)) {
                continue;
            }
            rows.push(i);
            // Create an entry right away so that appendRowHtml() can
            // start populatating it.
            this.rowsCache[i] = {
                rowNode: null,
                // ColSpans of rendered cells (by column idx).
                // Can also be used for checking whether a cell has been rendered.
                cellColSpans: [],
                // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().
                cellNodesByColumnIdx: [],
                // Column indices of cell nodes that have been rendered, but not yet indexed in
                // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the
                // end of the row.
                cellRenderQueue: []
            };
        }
        for (var i = 0, ii = rows.length; i < ii; i++) {
            this.rowsCache[rows[i]].rowNode = this.data[rows[i]];
        }
        return Object.keys(this.rowsCache).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return _this.rowsCache[n].rowNode; }));
    };
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    DatagridBodyComponent.prototype.removeRowFromCache = /**
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var cacheEntry = this.rowsCache[row];
        if (!cacheEntry) {
            return;
        }
        delete this.rowsCache[row];
    };
    /**
     * @private
     * @param {?} rangeToKeep
     * @return {?}
     */
    DatagridBodyComponent.prototype.cleanupRows = /**
     * @private
     * @param {?} rangeToKeep
     * @return {?}
     */
    function (rangeToKeep) {
        for (var i in this.rowsCache) {
            if (i < rangeToKeep.top || i > rangeToKeep.bottom) {
                this.removeRowFromCache(i);
            }
        }
    };
    /**
     * @private
     * @param {?=} detectchanges
     * @return {?}
     */
    DatagridBodyComponent.prototype.renderData = /**
     * @private
     * @param {?=} detectchanges
     * @return {?}
     */
    function (detectchanges) {
        if (detectchanges === void 0) { detectchanges = true; }
        this.canvasHeight = this.getCanvasHeight();
        if (!this.dg.virtualized || this.dg.autoHeight) {
            this.rows = this.data;
        }
        else {
            /** @type {?} */
            var visible = this.getVisibleRange();
            /** @type {?} */
            var rendered = this.getRenderedRange();
            // remove rows no longer in the viewport
            this.cleanupRows(rendered);
            // render missing rows
            this.rows = this.renderRows(rendered);
            this.startRowIndex = rendered.top;
            this.blankTopHeight = this.startRowIndex * (this.dg.rowHeight + 1);
            this.blankBottomHeight = this.canvasHeight - this.blankTopHeight - (this.rows.length * (this.dg.rowHeight + 1));
            this.lastRenderedScrollTop = this.scrollTop;
            this.lastRenderedScrollLeft = this.scrollLeft;
            if (detectchanges) {
                this.cd.detectChanges();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype.handleScroll = /**
     * @private
     * @return {?}
     */
    function () {
        this.scrollTop = this.ps.elementRef.nativeElement.scrollTop;
        this.scrollLeft = this.ps.elementRef.nativeElement.scrollLeft;
        return this._handleScroll();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBodyComponent.prototype._handleScroll = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var viewportContainer = this.viewScrollContainer.nativeElement;
        /** @type {?} */
        var maxScrollDistanceY = viewportContainer.scrollHeight - viewportContainer.clientHeight;
        /** @type {?} */
        var maxScrollDistanceX = viewportContainer.scrollWidth - viewportContainer.clientWidth;
        // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.
        // Sometimes seen in Chrome.
        maxScrollDistanceY = Math.max(0, maxScrollDistanceY);
        maxScrollDistanceX = Math.max(0, maxScrollDistanceX);
        // Ceiling the max scroll values
        if (this.scrollTop > maxScrollDistanceY) {
            this.scrollTop = maxScrollDistanceY;
        }
        if (this.scrollLeft > maxScrollDistanceX) {
            this.scrollLeft = maxScrollDistanceX;
        }
        /** @type {?} */
        var vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);
        /** @type {?} */
        var hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);
        if (hScrollDist) {
            this.prevScrollLeft = this.scrollLeft;
            // $viewportScrollContainerX[0].scrollLeft = scrollLeft;
            // if (hasFrozenColumns()) {
            //     if (hasFrozenRows) {
            //         $viewportTopR[0].scrollLeft = scrollLeft;
            //     }
            // } else {
            //     if (hasFrozenRows) {
            //         $viewportTopL[0].scrollLeft = scrollLeft;
            //     }
            // }
        }
        if (vScrollDist) {
            this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;
            this.prevScrollTop = this.scrollTop;
            // if (hasFrozenColumns()) {
            //     if (hasFrozenRows && !options.frozenBottom) {
            //         $viewportBottomL[0].scrollTop = scrollTop;
            //     } else {
            //         $viewportTopL[0].scrollTop = scrollTop;
            //     }
            // }
            // switch virtual pages if needed
            if (vScrollDist < this.viewportH) {
                this._scrollTo(this.scrollTop);
            }
        }
        if (hScrollDist || vScrollDist) {
            /** @type {?} */
            var dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);
            /** @type {?} */
            var dy = Math.abs(this.lastRenderedScrollTop - this.scrollTop);
            if (dx > 20 || dy > 20) {
                // if rendering is forced or scrolling is small enough to be "easy", just render
                if (dy < this.viewportH && dx < this.viewportW) {
                    this.renderData();
                }
                else {
                    this.renderData();
                }
            }
        }
        if (hScrollDist || vScrollDist) {
            return true;
        }
        return false;
    };
    /**
     * @private
     * @param {?} y
     * @return {?}
     */
    DatagridBodyComponent.prototype._scrollTo = /**
     * @private
     * @param {?} y
     * @return {?}
     */
    function (y) {
        /** @type {?} */
        var $viewportScrollContainerY = this.viewScrollContainer.nativeElement;
        y = Math.max(y, 0);
        y = Math.min(y, this.canvasHeight - this.viewportH);
        /** @type {?} */
        var newScrollTop = y;
        if (this.prevScrollTop != newScrollTop) {
            this.vScrollDir = (this.prevScrollTop < newScrollTop) ? 1 : -1;
            this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);
            // if (hasFrozenColumns()) {
            //     $viewportTopL[0].scrollTop = newScrollTop;
            // }
            // if (hasFrozenRows) {
            //     $viewportBottomL[0].scrollTop = $viewportBottomR[0].scrollTop = newScrollTop;
            // }
            // $viewportScrollContainerY.scrollTop = newScrollTop;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBodyComponent.prototype.onMouseClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // document.body.click();
        /** @type {?} */
        var target = (/** @type {?} */ ($event.target));
        if (target.nodeName === 'TEXTAREA' || target.nodeName === 'INPUT') {
            return;
        }
        /** @type {?} */
        var td = target;
        if (target.nodeName !== 'TD') {
            td = target.closest('TD');
        }
        if (!this.dg.editable && this.__triggerBodyClickEvent) {
            // 解决超链点击事件，要先执行选中行
            if (td && td.selectCell) {
                $event.stopPropagation();
                td.selectCell($event, td); // 按理说可以删除的，但不敢动哦o(≧口≦)o
            }
            return;
        }
        if (this.dg.editMode === 'row') {
            return;
        }
        if (td) {
            // 行禁用时
            if (this.dg.disableRow && td.gridCellData) {
                var _a = td.gridCellData, rowData = _a.rowData, rowIndex = _a.rowIndex;
                if (this.dg.disableRow(rowData, rowIndex)) {
                    return;
                }
            }
            if (this.dg.editable && this.dg.editMode === 'cell' && td.edit) {
                td.edit($event);
            }
            else {
                if (td.selectCell) {
                    $event.stopPropagation();
                    td.closeEdit();
                    td.selectCell($event, td);
                }
            }
        }
    };
    DatagridBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-body',
                    template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-06 07:43:07\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-26 08:20:46\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n<ng-container  *ngIf=\"!data || !data.length\">\r\n    <div *ngIf=\"!dg.emptyTemplate\" class=\"d-flex flex-column f-datagrid-norecords\" style=\"position:absolute; margin:0;left: 0; z-index: 1;justify-content: center; align-items: center;\" [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" >\r\n        <div class=\"f-datagrid-norecords-content\" style=\"margin: 0;width: 100%;position: relative; top: 0\">\r\n            {{ 'datagrid.emptyMessage' | locale }}\r\n        </div>\r\n    </div>\r\n    <div class=\"f-datagrid-body\" [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" style=\"z-index: 1;\"  *ngIf=\"dg.emptyTemplate\">\r\n        <ng-container #emptyTemplate [ngTemplateOutlet]=\"dg.emptyTemplate\" ></ng-container>\r\n    </div>\r\n</ng-container>\r\n<div  class=\"f-datagrid-body\" [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" \r\n[farris-context-menus]=\"contextMenuItems\" [disabled]=\"!dg.enableContextMenu\" [activeDomName]=\"'tr'\" [beforeShowContextMenu]=\"onBeforeShowContextMenu\"\r\n[menuClass]=\"'f-datagrid-context-menu'\">\r\n\r\n    <div #viewScrollContainer [scrollbar]=\"psConfig\" #ps=\"ngxScrollbar\"\r\n        class=\"ps f-datagrid-body-wheel-area\" \r\n        [ngStyle]=\"bodyStyle\" style=\"width: 100%;\"\r\n        (psXReachEnd)=\"onPsXReachEnd($event)\"\r\n        (psScrollY)=\"onScrollToY($event)\"\r\n        (psScrollX)=\"onScrollToX($event)\" (psXReachStart)=\"onPsXReachStart($event)\"\r\n        [style.paddingBottom.px]=\"scrollbarXHeight\"\r\n        [style.paddingRight.px]=\"scrollbarYWidth\">\r\n       \r\n        <div class=\"f-datagrid-norecords\"  [auto-height]=\"dg.autoHeight\" [wheelHeight]=\"dg.emptyDataHeight || 240\" style=\"height: 100%\" [style.width.px]=\"canvasWidth - 2\"  *ngIf=\"!data || !data.length\">\r\n            <!-- <div *ngIf=\"!dg.emptyTemplate\" class=\"f-datagrid-norecords-content\" style=\"width: 100%\" >{{ 'datagrid.emptyMessage' | locale }}</div>\r\n            <ng-container #emptyTemplate *ngIf=\"dg.emptyTemplate\" [ngTemplateOutlet]=\"dg.emptyTemplate\" ></ng-container> -->\r\n        </div>\r\n\r\n        <div [style.display]=\"dg.flatColumns?.length ? '': 'none'\"  *ngIf=\"data && data.length\"\r\n            class=\"f-datagrid-bg\" [auto-height]=\"dg.autoHeight\" [wheelHeight]=\"canvasHeight\"\r\n            [style.height.px]=\"canvasHeight\" [style.width.px]=\"totalWidth\" >\r\n            \r\n                <div #blankTop hidefocus style=\"width: 100%\" [style.height.px]=\"blankTopHeight\"></div>\r\n                \r\n                <div #fixedLeft class=\"f-datagrid-table f-datagrid-body-fixed-left\"  [class.f-datagrid-fixed-left-shadow]=\"!!scrollLeft && !dg.groupRows\"\r\n                    *ngIf=\"dg.showLineNumber || dg.showCheckbox || (columnsGroup?.leftFixed && columnsGroup?.leftFixed.length)\"  [style.width.px]=\"leftFixedWidth\" \r\n                    [style.transform]=\"'translate3d('+ scrollLeft +'px, 0px, 0px)'\">\r\n\r\n                    <fixed-left-rows [columns]=\"columnsGroup?.leftFixed\" [checkedRows]=\"checkedRows\" [selectedRows]=\"selectedRows\" [data]=\"rows\"></fixed-left-rows>\r\n                </div>\r\n\r\n                <div #fixedRight class=\"f-datagrid-table f-datagrid-body-fixed-right\" [style.width.px]=\"rightFixedWidth\" \r\n                    *ngIf=\"columnsGroup?.rightFixed && columnsGroup?.rightFixed.length\"\r\n                    [class.f-datagrid-fixed-right-shadow]=\"showRightShadow\" \r\n                    style=\"border: 0\"\r\n                    [style.transform]=\"'translate3d('+ fixedRightScrollLeft +'px, 0px, 0px)'\">\r\n                    \r\n                    <datagrid-rows #rightRows [fixedRight]=\"true\" [startRowIndex]=\"startRowIndex\" [columns]=\"columnsGroup?.rightFixed\" [data]=\"rows\"></datagrid-rows>\r\n                </div>\r\n\r\n                <div #main [style.width.px]=\"colsWidth\" style=\"position: relative;\" [style.left.px]=\"leftFixedWidth\" class=\"f-datagrid-table f-datagrid-body-center\">\r\n                    <datagrid-rows #mainRows  [startRowIndex]=\"startRowIndex\" [columns]=\"columnsGroup?.normalColumns\" [data]=\"rows\"></datagrid-rows>\r\n                </div>\r\n\r\n                <div hidefocus style=\"width: 100%\" [style.height.px]=\"blankBottomHeight\"></div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DatagridBodyComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ApplicationRef },
        { type: DatagridComponent, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    DatagridBodyComponent.propDecorators = {
        footerHeight: [{ type: Input }],
        canvasWidth: [{ type: Input }],
        columnsGroup: [{ type: Input }],
        topHideHeight: [{ type: Input }],
        bottomHideHeight: [{ type: Input }],
        startRowIndex: [{ type: Input }],
        data: [{ type: Input }],
        dataChange: [{ type: Output }],
        scrollBarMode: [{ type: Input }],
        contextMenuItems: [{ type: Input }],
        checkedRows: [{ type: Input }],
        ps: [{ type: ViewChild, args: ['ps',] }],
        tableRowsCmp: [{ type: ViewChild, args: ['mainRows',] }],
        rightRowsCmp: [{ type: ViewChild, args: ['rightRows',] }],
        fixedLeftEl: [{ type: ViewChild, args: ['fixedLeft',] }],
        fixedRightEl: [{ type: ViewChild, args: ['fixedRight',] }],
        mainArea: [{ type: ViewChild, args: ['main',] }],
        viewScrollContainer: [{ type: ViewChild, args: ['viewScrollContainer',] }]
    };
    return DatagridBodyComponent;
}());
export { DatagridBodyComponent };
if (false) {
    /** @type {?} */
    DatagridBodyComponent.prototype.psConfig;
    /** @type {?} */
    DatagridBodyComponent.prototype.top;
    /** @type {?} */
    DatagridBodyComponent.prototype.height;
    /** @type {?} */
    DatagridBodyComponent.prototype.width;
    /** @type {?} */
    DatagridBodyComponent.prototype.colsWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.totalWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.leftFixedWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.rightFixedWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.rowHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.bodyStyle;
    /** @type {?} */
    DatagridBodyComponent.prototype.scrollTop;
    /** @type {?} */
    DatagridBodyComponent.prototype.scrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.deltaTopHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.wheelWidth;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._fixedRightScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.maxScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.showRightShadow;
    /** @type {?} */
    DatagridBodyComponent.prototype.footerHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.canvasWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.columnsGroup;
    /** @type {?} */
    DatagridBodyComponent.prototype.topHideHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.bottomHideHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.startRowIndex;
    /** @type {?} */
    DatagridBodyComponent.prototype.data;
    /** @type {?} */
    DatagridBodyComponent.prototype.dataChange;
    /** @type {?} */
    DatagridBodyComponent.prototype.scrollBarMode;
    /** @type {?} */
    DatagridBodyComponent.prototype.contextMenuItems;
    /** @type {?} */
    DatagridBodyComponent.prototype.checkedRows;
    /** @type {?} */
    DatagridBodyComponent.prototype.ps;
    /** @type {?} */
    DatagridBodyComponent.prototype.tableRowsCmp;
    /** @type {?} */
    DatagridBodyComponent.prototype.rightRowsCmp;
    /** @type {?} */
    DatagridBodyComponent.prototype.fixedLeftEl;
    /** @type {?} */
    DatagridBodyComponent.prototype.fixedRightEl;
    /** @type {?} */
    DatagridBodyComponent.prototype.mainArea;
    /** @type {?} */
    DatagridBodyComponent.prototype.viewScrollContainer;
    /** @type {?} */
    DatagridBodyComponent.prototype.visibleContextMenus;
    /** @type {?} */
    DatagridBodyComponent.prototype.currentRowId;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._hoverRowIndex;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.gridSizeSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.columnResizeSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.onDataSourceChangeSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.selectRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.unselectRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.selectAllSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.checkRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.clearSelectionsSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.checkAllSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.uncheckRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.clearCheckedsSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.subscriptions;
    /** @type {?} */
    DatagridBodyComponent.prototype.dfs;
    /** @type {?} */
    DatagridBodyComponent.prototype.dgs;
    /** @type {?} */
    DatagridBodyComponent.prototype.ngZone;
    /** @type {?} */
    DatagridBodyComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.viewportH;
    /** @type {?} */
    DatagridBodyComponent.prototype.viewportW;
    /** @type {?} */
    DatagridBodyComponent.prototype.canvasHeight;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.minRowBuffer;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.vScrollDir;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.rowsCache;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.lastRenderedScrollTop;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.lastRenderedScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.prevScrollTop;
    /** @type {?} */
    DatagridBodyComponent.prototype.prevScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.rows;
    /** @type {?} */
    DatagridBodyComponent.prototype.blankTopHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.blankBottomHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.cellContentFormatter;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.__triggerBodyClickEvent;
    /** @type {?} */
    DatagridBodyComponent.prototype.onBeforeShowContextMenu;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.app;
    /** @type {?} */
    DatagridBodyComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,