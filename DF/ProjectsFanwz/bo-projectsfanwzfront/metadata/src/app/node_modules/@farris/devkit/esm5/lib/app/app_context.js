import * as tslib_1 from "tslib";
/**
 * 应用上下文
 * @author Witt<jiwt@inspur.com>
 * @todo
 * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；
 */
import { Injectable, Injector, Optional, SkipSelf, InjectFlags } from '@angular/core';
import { Router } from '@angular/router';
import { Context } from '../context/index';
import { BindingData, BindingDataFactory } from '../binding-data';
import { FrameContextManager } from './frame_contex_manager';
import { FrameComponentRefresher } from './frame_component_refresher';
import { RepositoryManager } from './repository_mananger';
import { BindingDataManager } from './binding_data_manager';
import { ChangeDetectionController } from './change_detection_controller';
import { AppContextManager } from './app_context_manager';
import { Subject } from 'rxjs';
import { ComponentManager } from './component_manager';
import { UID } from '../misc/uid';
import { FORM_ID } from './tokens';
import { MessageManager } from '../message/messagemanager';
import { MessageData } from '../message/messagedata';
import { MessageBody } from '../message/messagebody';
import { VALIDATION_HANDLER } from '../validation';
import { throwIfEmpty } from 'rxjs/operators';
import { ContextMetadataBuilder } from './app_metadata_collector';
import { StateMachine } from '../state-machine';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser, VariableParseService } from '../variable';
import { ViewModelManager } from './view_model_manager';
import { Repository } from '../repository';
import { UIState } from '../ui-state';
import { ContextMetadataManager } from './render_context_metadata_manager';
import { Form } from '../form';
import { ViewModel } from '../view-model';
import { FrameContext } from '../frame/frame_context';
import { NAMESPACE, FRAME_ID } from '../frame/tokens';
import { DEVKIT_RUN_MODE, RunMode } from '../core';
import { RunModeService } from '../misc/run_mode_service';
var AppContext = /** @class */ (function (_super) {
    tslib_1.__extends(AppContext, _super);
    /**
     * 构造函数
     */
    function AppContext(injector, appContextManager, parent) {
        var _this = _super.call(this) || this;
        _this.typeName = 'AppContext';
        /**
         * 是否已经销毁
         */
        _this.isFormDestoryed = false;
        /**
         * 应用程序标识
         */
        _this.applicationId = null;
        _this.token = null;
        /**
         * 是否使用独立的eventBus
         * @memberof AppContext
         */
        _this.useIsoluteEventBus = false;
        /**
         * 应用上下文元数据描述
         */
        _this.metadata = {};
        _this.injector = injector;
        _this.appContextManager = appContextManager;
        _this.formId = _this.injector && _this.injector.get(FORM_ID, null) || null;
        // 默认运行模式为兼容模式
        _this.runMode = _this.injector && _this.injector.get(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;
        RunModeService.setRunMode(_this.runMode);
        _this.params.set('formId', _this.formId);
        _this.params.set('appId', _this.ApplicationId);
        _this.params.set('token', _this.Token);
        // 确定父子关系
        if (!parent) {
            _this.parent = null;
            _this.root = _this;
        }
        else {
            _this.parent = parent;
            _this.root = parent.root;
        }
        _this.registerToManager();
        _this.frameContextManager = new FrameContextManager(_this);
        _this.frameComponentRefresher = new FrameComponentRefresher();
        _this.repositoryManager = new RepositoryManager();
        _this.bindingDataManager = new BindingDataManager();
        _this.changeDetectionController = new ChangeDetectionController(_this.frameContextManager);
        _this.messagePipe = new Subject();
        _this.componentRefs = new Map();
        _this.componentManager = new ComponentManager(_this);
        _this.contextMetadataManager = new ContextMetadataManager();
        _this.opened = false;
        // this.sortConditionManager = new SortConditionManager();
        // this.filterConditionManager = new FilterConditionManager();
        _this.router = _this.injector && _this.injector.get(Router);
        _this.viewModelManager = new ViewModelManager();
        _this.contextMetadataBuilder = new ContextMetadataBuilder();
        _this.variableParseService = new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]);
        _this.initMessageEvent();
        return _this;
    }
    Object.defineProperty(AppContext.prototype, "frameContexts", {
        /**
         * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
         * @deprecated
         * @summary
         * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。
         */
        get: function () {
            return this.frameContextManager.getFrameContextMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppContext.prototype, "formModule", {
        get: function () {
            return this.formMetadataContent ? this.formMetadataContent.module : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数据
     * @param controllers 前端构件元数据
     */
    AppContext.prototype.initializeByMetadata = function (formMetadataContent, stateMachineMetadata, controllers) {
        this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);
        if (!this.stateMachine) {
            this.stateMachine = this.injector.get(StateMachine, new StateMachine());
        }
        this.formMetadataContent = formMetadataContent;
        this.controllers = controllers;
    };
    /**
     * Register current AppContext instance to AppContextManager
     */
    AppContext.prototype.registerToManager = function () {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.registerAppContext(this);
    };
    /**
     * Unregister current AppContext instance from AppContextManager
     */
    AppContext.prototype.unregisterFromManager = function (frameContext) {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.unregisterAppContext(this);
        // 清理repository及bindingData 
        // const frameContexts = this.frameContextManager.getFrameContexts();
        if (frameContext) {
            var repository = frameContext.repository;
            var repositoryName = repository.name;
            if (this.repositoryManager.ifRepositoryExits(repositoryName)) {
                this.repositoryManager.unRegisteRepository(repositoryName);
            }
            if (this.bindingDataManager.ifBindingDataExits(repositoryName)) {
                this.bindingDataManager.unRegisteBindingData(repositoryName);
            }
        }
    };
    /**
     * 注册FrameContext
     */
    AppContext.prototype.regFrameContext = function (frameContext) {
        var repository = frameContext.repository;
        var repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            var bindingData = null;
            if (this.runMode === RunMode.highSpeed) {
                bindingData = BindingDataFactory.createFromRepository(repository, '/');
                this.bindingDataManager.regBindingData(repositoryName, bindingData);
            }
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.frameContextManager.regFrameContext(frameContext);
    };
    AppContext.prototype.regContextMetadata = function (componentId, contextMetadata) {
        if (!this.contextMetadataManager.exsit(componentId)) {
            this.contextMetadataManager.register(componentId, contextMetadata);
        }
    };
    /**
     * 获取整个表单的AppContext
     */
    AppContext.prototype.getFormAppContext = function () {
        return this;
    };
    /**
     * 销毁表单
     * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制
     */
    AppContext.prototype.destory = function () {
        this.isFormDestoryed = true;
    };
    Object.defineProperty(AppContext.prototype, "isDestoryed", {
        /**
         * 表单是否已经被销毁
         */
        get: function () {
            return this.isFormDestoryed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppContext.prototype, "ApplicationId", {
        /**
         * 应用id
         */
        get: function () {
            if (!!this.applicationId) {
                return this.applicationId;
            }
            this.applicationId = UID.create();
            return this.applicationId;
        },
        set: function (appId) {
            this.applicationId = appId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppContext.prototype, "Token", {
        get: function () {
            if (!!this.token) {
                return this.token;
            }
            this.token = UID.create();
            return this.token;
        },
        set: function (token) {
            this.token = token;
        },
        enumerable: true,
        configurable: true
    });
    // #region 弃用的老方法
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    AppContext.prototype.registerCommandHandler = function (frameId, component) {
        this.frameComponentRefresher.regFrameComponent(frameId, component);
    };
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    AppContext.prototype.refresh = function () {
        this.frameComponentRefresher.refreshComponents();
    };
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。
     * @deprecated
     */
    AppContext.prototype.getFrameContext = function (frameId) {
        return this.frameContextManager.getFrameContextById(frameId);
    };
    AppContext.prototype.getContextById = function (identify) {
        var context = this.frameContextManager.getFrameContextById(identify);
        return context;
    };
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
     * @deprecated
     */
    AppContext.prototype.getAllFrameContexts = function () {
        return this.frameContextManager.getFrameContextMap();
    };
    /**
     * 处理行变更
     */
    AppContext.prototype.handleSelectChange = function (change, srcFrameContext) {
        var force = change.force || false;
        this.frameContexts.forEach(function (targetFrameContext) {
            // 相同的FrameCotnext或者Repository不一致的情况下，不同步
            if (targetFrameContext === srcFrameContext
                || targetFrameContext.repository !== srcFrameContext.repository) {
                return;
            }
            var bindingData = targetFrameContext.bindingData;
            var bindingList = bindingData.getValue(change.path);
            var currentId = change.value['id'];
            if (bindingList && bindingList.currentId !== currentId || force) {
                // 设置当前行，但不对外广播
                bindingList.setCurrentId(currentId, true, false, force);
            }
        });
    };
    // #endregion
    AppContext.prototype.initMessageEvent = function () {
        var _this = this;
        if (this.parent && this.parent !== this) {
            var resultTask_1;
            var messager_1 = MessageManager.getMessager();
            messager_1.setAppContext(this);
            messager_1.listner(function (msg) {
                var source = msg.sender;
                var data = msg.data;
                var appcontext = messager_1.getAppContext();
                var allFrameContext = appcontext.frameContextManager.getFrameContextMap();
                if (data.command === 'wf-required-verification') { // 工作流的必填校验
                    // 注入ValidationHandler
                    var validation = _this.injector.get(VALIDATION_HANDLER, null, InjectFlags.Optional);
                    if (validation) {
                        resultTask_1 = validation.validateAll();
                    }
                }
                else {
                    var command = _this.findHandler(allFrameContext, data.command);
                    if (command) {
                        resultTask_1 = command(data.arguments);
                    }
                }
                if (resultTask_1) {
                    resultTask_1.pipe(throwIfEmpty()).subscribe(function (result) {
                        // 向来源方回传消息
                        var retMsg = new MessageBody(new MessageData());
                        retMsg.data.result = true; // 目标方法返回值
                        retMsg.type = 'message';
                        retMsg.target = source;
                        messager_1.send(retMsg);
                    }, function () {
                        var retMsg = new MessageBody(new MessageData());
                        retMsg.data.result = false; // 目标方法返回值
                        retMsg.type = 'message';
                        retMsg.target = source;
                        messager_1.send(retMsg);
                    });
                }
            });
        }
    };
    AppContext.prototype.findHandler = function (contextMap, command) {
        var func;
        var temp = tslib_1.__spread(contextMap.values());
        // tslint:disable-next-line: forin
        for (var v in temp) {
            var vm = temp[v].viewModel;
            if (vm && vm.hasOwnProperty(command)) {
                func = vm[command];
                return func;
            }
        }
    };
    AppContext.prototype.buildRenderViewContext = function (componentId) {
        // 提取视图模型集合
        var viewModels = this.formModule.viewmodels;
        // 提取组件描述集合
        var viewComponents = this.formModule.components;
        // 提取schema节点
        var schema = this.formModule.schemas[0];
        // 查找匹配指定标识的组件节点
        var matchedComponent = viewComponents.find(function (component) { return component.id === componentId; });
        // 匹配指定组件的视图模型节点
        var matchedViewModel = viewModels.find(function (viewModel) { return matchedComponent.viewModel === viewModel.id; });
        // 查找匹配视图模型的父节点
        var parentViewModel = viewModels.find(function (viewModel) { return viewModel.id === matchedViewModel.parent; });
        var parentComponentId = '';
        // 如果匹配上上级视图模型，提上级视图标识
        if (parentViewModel) {
            var parentComponent = viewComponents.find(function (component) { return component.viewModel === parentViewModel.id; });
            if (parentComponent) {
                parentComponentId = parentComponent.id;
            }
        }
        // 如果存在上级组件，提取器上下文对象。
        // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;
        // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);
        this.buildRenderViewContextRecursively(matchedViewModel, schema);
    };
    AppContext.prototype.buildRenderViewContextRecursively = function (viewModel, schema) {
        var _this = this;
        var controllers = this.controllers;
        var viewComponents = this.formModule.components;
        var matchedComponent = viewComponents.find(function (component) { return component.viewModel === viewModel.id; });
        var contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers);
        // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);
        // const commandHandlerExtends: CommandHandlerExtender[] = [];
        // const viewContext = new ViewComponentContext(
        //   contextMetadata,
        //   this,
        //   parent,
        //   this.injector
        // );
        // this.regFrameContext(viewContext);
        // viewContext.init();
        this.regContextMetadata(matchedComponent.id, contextMetadata);
        var viewModels = this.formModule.viewmodels;
        var subViewModels = viewModels.filter(function (subViewModel) { return subViewModel.parent === viewModel.id; });
        if (subViewModels && subViewModels.length) {
            subViewModels.forEach(function (subViewModel) {
                _this.buildRenderViewContextRecursively(subViewModel, schema);
            });
        }
    };
    AppContext.prototype.getComponentProviders = function (componentId) {
        var contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);
        var bindingData = new BindingData();
        var form = new Form();
        var namespace = contextMetadata.namespace;
        var repository = this.injector.get(Repository, null) || this.repository;
        var stateMachine = this.stateMachine;
        var uiState = new UIState();
        var viewModel = new ViewModel();
        viewModel.setMetadata(contextMetadata);
        return [
            { provide: FRAME_ID, useValue: componentId },
            { provide: NAMESPACE, useValue: namespace },
            { provide: FrameContext, useClass: FrameContext },
            { provide: AppContext, useValue: this },
            { provide: BindingData, useValue: bindingData },
            { provide: Form, useValue: form },
            { provide: Repository, useValue: repository },
            { provide: StateMachine, useValue: stateMachine },
            { provide: UIState, useValue: uiState },
            { provide: ViewModel, useValue: viewModel },
            {
                provide: VariableParseService, useValue: new VariableParseService([
                    new FrameIdVariableParser(),
                    new DataVariableParser(),
                    new UIStateVariableParser(),
                    new StateMachineVariableParser(),
                    new CommandVariableParser()
                ])
            }
        ];
    };
    AppContext.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AppContext.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Optional }] },
        { type: AppContextManager, decorators: [{ type: Optional }] },
        { type: AppContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return AppContext;
}(Context));
export { AppContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX2NvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9hcHAvYXBwX2NvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHO0FBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUF1QixNQUFNLGlCQUFpQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQs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RTtvQkFDM0IsSUFBSSxrQkFBa0IsRUFBRTtvQkFDeEIsSUFBSSxxQkFBcUIsRUFBRTtvQkFDM0IsSUFBSSwwQkFBMEIsRUFBRTtvQkFDaEMsSUFBSSxxQkFBcUIsRUFBRTtpQkFDNUIsQ0FBQzthQUNIO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQW5oQkYsVUFBVTs7OztnQkExQ1UsUUFBUSx1QkE2THhCLFFBQVE7Z0JBcExKLGlCQUFpQix1QkFxTHJCLFFBQVE7Z0JBQ3VCLFVBQVUsdUJBQXpDLFFBQVEsWUFBSSxRQUFROztJQXlaekIsaUJBQUM7Q0FBQSxBQTlpQkQsQ0FDeUIsT0FBTyxHQTZpQi9CO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOW6lOeUqOS4iuS4i+aWh1xyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKiBAdG9kb1xyXG4gKiAx44CBcGFybmV05ZKMQXBwQ29udGV4dE1hbmFnZXLmmK/lkKblv4XopoHvvJ/mjInnkIbor7TlsLHmmK/lupTor6XpmpTnprvkuIrkuIvmlofvvIzooajljZXkuYvpl7TpgJrov4fkuovku7bpgJrorq/ov5vooYzkuqTkupLvvJtcclxuICovXHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBPcHRpb25hbCwgU2tpcFNlbGYsIEluamVjdEZsYWdzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L2luZGV4JztcclxuaW1wb3J0IHsgQmluZGluZ0RhdGEsIEJpbmRpbmdEYXRhRmFjdG9yeSwgQmluZGluZ0xpc3QsIENoYW5nZSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dE1hbmFnZXIgfSBmcm9tICcuL2ZyYW1lX2NvbnRleF9tYW5hZ2VyJztcclxuaW1wb3J0IHsgRnJhbWVDb21wb25lbnRSZWZyZXNoZXIgfSBmcm9tICcuL2ZyYW1lX2NvbXBvbmVudF9yZWZyZXNoZXInO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5TWFuYWdlciB9IGZyb20gJy4vcmVwb3NpdG9yeV9tYW5hbmdlcic7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhTWFuYWdlciB9IGZyb20gJy4vYmluZGluZ19kYXRhX21hbmFnZXInO1xyXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25Db250cm9sbGVyIH0gZnJvbSAnLi9jaGFuZ2VfZGV0ZWN0aW9uX2NvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBBcHBDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vYXBwX2NvbnRleHRfbWFuYWdlcic7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50TWFuYWdlciB9IGZyb20gJy4vY29tcG9uZW50X21hbmFnZXInO1xyXG5pbXBvcnQgeyBVSUQgfSBmcm9tICcuLi9taXNjL3VpZCc7XHJcbmltcG9ydCB7IEZPUk1fSUQgfSBmcm9tICcuL3Rva2Vucyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VNYW5hZ2VyIH0gZnJvbSAnLi4vbWVzc2FnZS9tZXNzYWdlbWFuYWdlcic7XHJcbmltcG9ydCB7IE1lc3NhZ2VEYXRhIH0gZnJvbSAnLi4vbWVzc2FnZS9tZXNzYWdlZGF0YSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VCb2R5IH0gZnJvbSAnLi4vbWVzc2FnZS9tZXNzYWdlYm9keSc7XHJcbmltcG9ydCB7IElWYWxpZGF0aW9uSGFuZGxlciwgVkFMSURBVElPTl9IQU5ETEVSIH0gZnJvbSAnLi4vdmFsaWRhdGlvbic7XHJcbmltcG9ydCB7IHRocm93SWZFbXB0eSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ29udGV4dE1ldGFkYXRhQnVpbGRlciB9IGZyb20gJy4vYXBwX21ldGFkYXRhX2NvbGxlY3Rvcic7XHJcbmltcG9ydCB7IEZvcm1Nb2R1bGUsIElGb3JtVmlld01vZGVsLCBJU3RhdGVNYWNoaW5lIH0gZnJvbSAnLi4vc2NoZW1hL2Zvcm0tbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBDb21tYW5kQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbW1hbmQnO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmUgfSBmcm9tICcuLi9zdGF0ZS1tYWNoaW5lJztcclxuaW1wb3J0IHsgSUNvbnRleHRNZXRhZGF0YSB9IGZyb20gJy4vYXBwX21ldGFkYXRhJztcclxuaW1wb3J0IHtcclxuICBDb21tYW5kVmFyaWFibGVQYXJzZXIsIERhdGFWYXJpYWJsZVBhcnNlciwgRnJhbWVJZFZhcmlhYmxlUGFyc2VyLFxyXG4gIFN0YXRlTWFjaGluZVZhcmlhYmxlUGFyc2VyLCBVSVN0YXRlVmFyaWFibGVQYXJzZXIsIFZhcmlhYmxlUGFyc2VTZXJ2aWNlXHJcbn0gZnJvbSAnLi4vdmFyaWFibGUnO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWxNYW5hZ2VyIH0gZnJvbSAnLi92aWV3X21vZGVsX21hbmFnZXInO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uL2VudGl0eSc7XHJcbmltcG9ydCB7IFVJU3RhdGUgfSBmcm9tICcuLi91aS1zdGF0ZSc7XHJcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4uL3NjaGVtYSc7XHJcbmltcG9ydCB7IENvbnRleHRNZXRhZGF0YU1hbmFnZXIgfSBmcm9tICcuL3JlbmRlcl9jb250ZXh0X21ldGFkYXRhX21hbmFnZXInO1xyXG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnLi4vZm9ybSc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJy4uL3ZpZXctbW9kZWwnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICcuLi9mcmFtZS9mcmFtZV9jb250ZXh0JztcclxuaW1wb3J0IHsgTkFNRVNQQUNFLCBGUkFNRV9JRCB9IGZyb20gJy4uL2ZyYW1lL3Rva2Vucyc7XHJcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSAnLi4vZXZlbnQtYnVzLW5ldyc7XHJcbmltcG9ydCB7IERFVktJVF9SVU5fTU9ERSwgUnVuTW9kZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5pbXBvcnQgeyBSdW5Nb2RlU2VydmljZSB9IGZyb20gJy4uL21pc2MvcnVuX21vZGVfc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEFwcENvbnRleHQgZXh0ZW5kcyBDb250ZXh0IHtcclxuICBwdWJsaWMgdHlwZU5hbWUgPSAnQXBwQ29udGV4dCc7XHJcbiAgLyoqXHJcbiAgICog5rOo5YWl5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGluamVjdG9yOiBJbmplY3RvcjtcclxuICAvKipcclxuICAgKiDmoLnlupTnlKjkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcm9vdDogQXBwQ29udGV4dDtcclxuICAvKipcclxuICAgKiDkuIrnuqflupTnlKjkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyZW50OiBBcHBDb250ZXh0O1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOS4iuS4i+aWh+euoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBDb250ZXh0TWFuYWdlcjogQXBwQ29udGV4dE1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICogRnJhbWVDb250ZXh0566h55CG5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGZyYW1lQ29udGV4dE1hbmFnZXI6IEZyYW1lQ29udGV4dE1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICogRnJhbWVDb21wb25lbnTliLfmlrDlmahcclxuICAgKi9cclxuICBwdWJsaWMgZnJhbWVDb21wb25lbnRSZWZyZXNoZXI6IEZyYW1lQ29tcG9uZW50UmVmcmVzaGVyO1xyXG4gIC8qKlxyXG4gICAqIFJlcG9zaXRvcnnnrqHnkIblmahcclxuICAgKi9cclxuICBwdWJsaWMgcmVwb3NpdG9yeU1hbmFnZXI6IFJlcG9zaXRvcnlNYW5hZ2VyO1xyXG4gIC8qKlxyXG4gICAqIOe7keWumuaVsOaNrueuoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBiaW5kaW5nRGF0YU1hbmFnZXI6IEJpbmRpbmdEYXRhTWFuYWdlcjtcclxuICAvKipcclxuICAgKiDop4blm77mqKHlnovnrqHnkIblmahcclxuICAgKi9cclxuICBwdWJsaWMgdmlld01vZGVsTWFuYWdlcjogVmlld01vZGVsTWFuYWdlcjtcclxuXHJcbiAgcHVibGljIGNvbnRleHRNZXRhZGF0YU1hbmFnZXI6IENvbnRleHRNZXRhZGF0YU1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICog5Y+Y5pu05qOA5rWL5o6n5Yi25ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXI6IENoYW5nZURldGVjdGlvbkNvbnRyb2xsZXI7XHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5bey57uP6ZSA5q+BXHJcbiAgICovXHJcbiAgcHVibGljIGlzRm9ybURlc3RvcnllZCA9IGZhbHNlO1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOeoi+W6j+agh+ivhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBsaWNhdGlvbklkOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIHRva2VuOiBzdHJpbmcgPSBudWxsO1xyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuS9v+eUqOeLrOeri+eahGV2ZW50QnVzXHJcbiAgICogQG1lbWJlcm9mIEFwcENvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgdXNlSXNvbHV0ZUV2ZW50QnVzID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeLrOeri+eahGV2ZW50QnVz5a6e5L6LXHJcbiAgICpcclxuICAgKiBAdHlwZSB7RXZlbnRCdXN9XHJcbiAgICogQG1lbWJlcm9mIEFwcENvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgaXNvbHV0ZUV2ZW50QnVzOiBFdmVudEJ1cztcclxuICAvKipcclxuICAgKiDlt7Llup/lvIPvvJror7fkvb/nlKhGcmFtZUNvbnRleHRNYW5hZ2Vy55qEZ2V0RnJhbWVDb250ZXh0TWFw5pa55rOV5Luj5pu/44CCXHJcbiAgICogQGRlcHJlY2F0ZWRcclxuICAgKiBAc3VtbWFyeVxyXG4gICAqIOW3sue7j+aciei/kOihjOaXtuebtOaOpeeUqOS4reaLrOWPt+iuv+mXruivpeWxnuaAp+eahOWcuuaZr++8jOiZveeEtuaYr3ByaXZhdGXvvIzkvYbopoHov5vooYzlhbzlrrnjgIJcclxuICAgKi9cclxuICBwcml2YXRlIGdldCBmcmFtZUNvbnRleHRzKCk6IE1hcDxzdHJpbmcsIGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRNYXAoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGv566h6YGTXHJcbiAgICovXHJcbiAgcHVibGljIG1lc3NhZ2VQaXBlOiBTdWJqZWN0PGFueT47XHJcbiAgLyoqXHJcbiAgICog6KGo5Y2VSWRcclxuICAgKi9cclxuICBwdWJsaWMgZm9ybUlkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICog57uE5Lu25a6e5L6L5pWw57uEXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBvbmVudFJlZnM6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIGFueT4+O1xyXG4gIC8qKlxyXG4gICAqIOinhuWbvue7hOS7tueuoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wb25lbnRNYW5hZ2VyOiBDb21wb25lbnRNYW5hZ2VyO1xyXG4gIC8qKlxyXG4gICAqIOiusOW9lWNvbmZpcm3lvLnnqpfmmK/lkKbmiZPlvIBcclxuICAgKi9cclxuICBwdWJsaWMgb3BlbmVkOiBib29sZWFuO1xyXG4gIC8qKlxyXG4gICAqIOaOkuW6j+adoeS7tueuoeeQhuWZqFxyXG4gICAqL1xyXG4gIC8vIHB1YmxpYyBzb3J0Q29uZGl0aW9uTWFuYWdlcjogU29ydENvbmRpdGlvbk1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICog6L+H5ruk5p2h5Lu2566h55CG5ZmoXHJcbiAgICovXHJcbiAgLy8gcHVibGljIGZpbHRlckNvbmRpdGlvbk1hbmFnZXI6IEZpbHRlckNvbmRpdGlvbk1hbmFnZXI7XHJcblxyXG4gIHByb3RlY3RlZCBjb250ZXh0TWV0YWRhdGFCdWlsZGVyOiBDb250ZXh0TWV0YWRhdGFCdWlsZGVyO1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOS4iuS4i+aWh+WFg+aVsOaNruaPj+i/sFxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZXRhZGF0YTogSUNvbnRleHRNZXRhZGF0YSA9IHt9O1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOeoi+W6j+S4iuS4i+aWh+WFqOWxgOeKtuaAgVxyXG4gICAqL1xyXG4gIHB1YmxpYyB1aVN0YXRlOiBVSVN0YXRlO1xyXG4gIC8qKlxyXG4gICAqIOWunuS9k+S7k+W6k1xyXG4gICAqL1xyXG4gIHB1YmxpYyByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT47XHJcblxyXG4gIC8qKlxyXG4gICAqIOeKtuaAgeaculxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0ZU1hY2hpbmU6IFN0YXRlTWFjaGluZTtcclxuXHJcbiAgcHVibGljIHZhcmlhYmxlUGFyc2VTZXJ2aWNlOiBWYXJpYWJsZVBhcnNlU2VydmljZTtcclxuXHJcbiAgcHVibGljIG5hbWVzcGFjZTogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgcm91dGVyOiBSb3V0ZXI7XHJcblxyXG4gIHB1YmxpYyBmb3JtTWV0YWRhdGFDb250ZW50OiBhbnk7XHJcbiAgLyoqXHJcbiAgICog5o6n5Yi25Zmo6L+Q6KGM5qih5byP77yM5pSv5oyBY29tcGF0aWJsZSB8IGhpZ2hTcGVlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBydW5Nb2RlOiBSdW5Nb2RlO1xyXG5cclxuICBwdWJsaWMgZ2V0IGZvcm1Nb2R1bGUoKTogRm9ybU1vZHVsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtTWV0YWRhdGFDb250ZW50ID8gdGhpcy5mb3JtTWV0YWRhdGFDb250ZW50Lm1vZHVsZSA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY29udHJvbGxlcnM6IHsgW2lkOiBzdHJpbmddOiBDb21tYW5kQ29udHJvbGxlciB9O1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIEBPcHRpb25hbCgpIGFwcENvbnRleHRNYW5hZ2VyOiBBcHBDb250ZXh0TWFuYWdlcixcclxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudDogQXBwQ29udGV4dFxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmluamVjdG9yID0gaW5qZWN0b3I7XHJcbiAgICB0aGlzLmFwcENvbnRleHRNYW5hZ2VyID0gYXBwQ29udGV4dE1hbmFnZXI7XHJcbiAgICB0aGlzLmZvcm1JZCA9IHRoaXMuaW5qZWN0b3IgJiYgdGhpcy5pbmplY3Rvci5nZXQoRk9STV9JRCwgbnVsbCkgfHwgbnVsbDtcclxuICAgIC8vIOm7mOiupOi/kOihjOaooeW8j+S4uuWFvOWuueaooeW8j1xyXG4gICAgdGhpcy5ydW5Nb2RlID0gdGhpcy5pbmplY3RvciAmJiB0aGlzLmluamVjdG9yLmdldDxSdW5Nb2RlPihERVZLSVRfUlVOX01PREUsIFJ1bk1vZGUuY29tcGF0aWJsZSkgfHwgUnVuTW9kZS5jb21wYXRpYmxlO1xyXG4gICAgUnVuTW9kZVNlcnZpY2Uuc2V0UnVuTW9kZSh0aGlzLnJ1bk1vZGUpO1xyXG4gICAgdGhpcy5wYXJhbXMuc2V0KCdmb3JtSWQnLCB0aGlzLmZvcm1JZCk7XHJcbiAgICB0aGlzLnBhcmFtcy5zZXQoJ2FwcElkJywgdGhpcy5BcHBsaWNhdGlvbklkKTtcclxuICAgIHRoaXMucGFyYW1zLnNldCgndG9rZW4nLCB0aGlzLlRva2VuKTtcclxuICAgIC8vIOehruWumueItuWtkOWFs+ezu1xyXG4gICAgaWYgKCFwYXJlbnQpIHtcclxuICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICB0aGlzLnJvb3QgPSB0aGlzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgIHRoaXMucm9vdCA9IHBhcmVudC5yb290O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVnaXN0ZXJUb01hbmFnZXIoKTtcclxuXHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dE1hbmFnZXIgPSBuZXcgRnJhbWVDb250ZXh0TWFuYWdlcih0aGlzKTtcclxuICAgIHRoaXMuZnJhbWVDb21wb25lbnRSZWZyZXNoZXIgPSBuZXcgRnJhbWVDb21wb25lbnRSZWZyZXNoZXIoKTtcclxuICAgIHRoaXMucmVwb3NpdG9yeU1hbmFnZXIgPSBuZXcgUmVwb3NpdG9yeU1hbmFnZXIoKTtcclxuICAgIHRoaXMuYmluZGluZ0RhdGFNYW5hZ2VyID0gbmV3IEJpbmRpbmdEYXRhTWFuYWdlcigpO1xyXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb25Db250cm9sbGVyID0gbmV3IENoYW5nZURldGVjdGlvbkNvbnRyb2xsZXIodGhpcy5mcmFtZUNvbnRleHRNYW5hZ2VyKTtcclxuICAgIHRoaXMubWVzc2FnZVBpcGUgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICB0aGlzLmNvbXBvbmVudFJlZnMgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgYW55Pj4oKTtcclxuICAgIHRoaXMuY29tcG9uZW50TWFuYWdlciA9IG5ldyBDb21wb25lbnRNYW5hZ2VyKHRoaXMpO1xyXG4gICAgdGhpcy5jb250ZXh0TWV0YWRhdGFNYW5hZ2VyID0gbmV3IENvbnRleHRNZXRhZGF0YU1hbmFnZXIoKTtcclxuXHJcbiAgICB0aGlzLm9wZW5lZCA9IGZhbHNlO1xyXG4gICAgLy8gdGhpcy5zb3J0Q29uZGl0aW9uTWFuYWdlciA9IG5ldyBTb3J0Q29uZGl0aW9uTWFuYWdlcigpO1xyXG4gICAgLy8gdGhpcy5maWx0ZXJDb25kaXRpb25NYW5hZ2VyID0gbmV3IEZpbHRlckNvbmRpdGlvbk1hbmFnZXIoKTtcclxuICAgIHRoaXMucm91dGVyID0gdGhpcy5pbmplY3RvciAmJiB0aGlzLmluamVjdG9yLmdldChSb3V0ZXIpO1xyXG4gICAgdGhpcy52aWV3TW9kZWxNYW5hZ2VyID0gbmV3IFZpZXdNb2RlbE1hbmFnZXIoKTtcclxuICAgIHRoaXMuY29udGV4dE1ldGFkYXRhQnVpbGRlciA9IG5ldyBDb250ZXh0TWV0YWRhdGFCdWlsZGVyKCk7XHJcbiAgICB0aGlzLnZhcmlhYmxlUGFyc2VTZXJ2aWNlID0gbmV3IFZhcmlhYmxlUGFyc2VTZXJ2aWNlKFtcclxuICAgICAgbmV3IEZyYW1lSWRWYXJpYWJsZVBhcnNlcigpLFxyXG4gICAgICBuZXcgRGF0YVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgIG5ldyBVSVN0YXRlVmFyaWFibGVQYXJzZXIoKSxcclxuICAgICAgbmV3IFN0YXRlTWFjaGluZVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgIG5ldyBDb21tYW5kVmFyaWFibGVQYXJzZXIoKVxyXG4gICAgXSk7XHJcblxyXG4gICAgdGhpcy5pbml0TWVzc2FnZUV2ZW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnlLHooajljZXlhYPmlbDmja7jgIHnirbmgIHmnLrlhYPmlbDmja7jgIHliY3nq6/mnoTku7blhYPmlbDmja7liJ3lp4vljJbop6PmnpDlnovlupTnlKjkuIrkuIvmlodcclxuICAgKiBAcGFyYW0gZm9ybU1ldGFkYXRhQ29udGVudCDooajljZXlhYPmlbDmja5cclxuICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lTWV0YWRhdGEg54q25oCB5py65YWD5pWw5o2uXHJcbiAgICogQHBhcmFtIGNvbnRyb2xsZXJzIOWJjeerr+aehOS7tuWFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplQnlNZXRhZGF0YShcclxuICAgIGZvcm1NZXRhZGF0YUNvbnRlbnQ6IGFueSxcclxuICAgIHN0YXRlTWFjaGluZU1ldGFkYXRhOiBJU3RhdGVNYWNoaW5lLFxyXG4gICAgY29udHJvbGxlcnM6IHsgW2lkOiBzdHJpbmddOiBDb21tYW5kQ29udHJvbGxlciB9XHJcbiAgKSB7XHJcbiAgICB0aGlzLm1ldGFkYXRhID0gdGhpcy5jb250ZXh0TWV0YWRhdGFCdWlsZGVyLmJ1aWxkQXBwQ29udGV4dE1ldGFkYXRhKGZvcm1NZXRhZGF0YUNvbnRlbnQsIHN0YXRlTWFjaGluZU1ldGFkYXRhKTtcclxuICAgIGlmICghdGhpcy5zdGF0ZU1hY2hpbmUpIHtcclxuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUgPSB0aGlzLmluamVjdG9yLmdldChTdGF0ZU1hY2hpbmUsIG5ldyBTdGF0ZU1hY2hpbmUoKSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZvcm1NZXRhZGF0YUNvbnRlbnQgPSBmb3JtTWV0YWRhdGFDb250ZW50O1xyXG4gICAgdGhpcy5jb250cm9sbGVycyA9IGNvbnRyb2xsZXJzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgY3VycmVudCBBcHBDb250ZXh0IGluc3RhbmNlIHRvIEFwcENvbnRleHRNYW5hZ2VyXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ2lzdGVyVG9NYW5hZ2VyKCkge1xyXG4gICAgaWYgKCF0aGlzLmFwcENvbnRleHRNYW5hZ2VyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuYXBwQ29udGV4dE1hbmFnZXIucmVnaXN0ZXJBcHBDb250ZXh0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5yZWdpc3RlciBjdXJyZW50IEFwcENvbnRleHQgaW5zdGFuY2UgZnJvbSBBcHBDb250ZXh0TWFuYWdlclxyXG4gICAqL1xyXG4gIHB1YmxpYyB1bnJlZ2lzdGVyRnJvbU1hbmFnZXIoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHtcclxuICAgIGlmICghdGhpcy5hcHBDb250ZXh0TWFuYWdlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmFwcENvbnRleHRNYW5hZ2VyLnVucmVnaXN0ZXJBcHBDb250ZXh0KHRoaXMpO1xyXG4gICAgLy8g5riF55CGcmVwb3NpdG9yeeWPimJpbmRpbmdEYXRhIFxyXG4gICAgLy8gY29uc3QgZnJhbWVDb250ZXh0cyA9IHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzKCk7XHJcbiAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeTtcclxuICAgICAgY29uc3QgcmVwb3NpdG9yeU5hbWUgPSByZXBvc2l0b3J5Lm5hbWU7XHJcbiAgICAgIGlmICh0aGlzLnJlcG9zaXRvcnlNYW5hZ2VyLmlmUmVwb3NpdG9yeUV4aXRzKHJlcG9zaXRvcnlOYW1lKSkge1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeU1hbmFnZXIudW5SZWdpc3RlUmVwb3NpdG9yeShyZXBvc2l0b3J5TmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuYmluZGluZ0RhdGFNYW5hZ2VyLmlmQmluZGluZ0RhdGFFeGl0cyhyZXBvc2l0b3J5TmFtZSkpIHtcclxuICAgICAgICB0aGlzLmJpbmRpbmdEYXRhTWFuYWdlci51blJlZ2lzdGVCaW5kaW5nRGF0YShyZXBvc2l0b3J5TmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjEZyYW1lQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdGcmFtZUNvbnRleHQoZnJhbWVDb250ZXh0OiBhbnkpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeTtcclxuICAgIGNvbnN0IHJlcG9zaXRvcnlOYW1lID0gcmVwb3NpdG9yeS5uYW1lO1xyXG5cclxuICAgIC8vIFJlcG9zaXRvcnlcclxuICAgIGlmICh0aGlzLnJlcG9zaXRvcnlNYW5hZ2VyLmlmUmVwb3NpdG9yeUV4aXRzKHJlcG9zaXRvcnlOYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy5yZXBvc2l0b3J5TWFuYWdlci5yZWdSZXBvc2l0b3J5KHJlcG9zaXRvcnlOYW1lLCByZXBvc2l0b3J5KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBCaW5kaW5nRGF0YVxyXG4gICAgaWYgKHRoaXMuYmluZGluZ0RhdGFNYW5hZ2VyLmlmQmluZGluZ0RhdGFFeGl0cyhyZXBvc2l0b3J5TmFtZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgIGxldCBiaW5kaW5nRGF0YSA9IG51bGw7XHJcbiAgICAgIGlmICh0aGlzLnJ1bk1vZGUgPT09IFJ1bk1vZGUuaGlnaFNwZWVkKSB7XHJcbiAgICAgICAgYmluZGluZ0RhdGEgPSBCaW5kaW5nRGF0YUZhY3RvcnkuY3JlYXRlRnJvbVJlcG9zaXRvcnkocmVwb3NpdG9yeSwgJy8nKTtcclxuICAgICAgICB0aGlzLmJpbmRpbmdEYXRhTWFuYWdlci5yZWdCaW5kaW5nRGF0YShyZXBvc2l0b3J5TmFtZSwgYmluZGluZ0RhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6ICD6JmR6Lev55Sx5YaN5qyh6L+b5YWl55qE5pe25YCZ77yMQXBwQ29udGV4dOayoeacieiiq+azqOmUgO+8jOS9hkNvbXBvbmVudOiiq+WGjeasoeaehOmAoOeahOWcuuaZr1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRNYW5hZ2VyLnJlZ0ZyYW1lQ29udGV4dChmcmFtZUNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlZ0NvbnRleHRNZXRhZGF0YShjb21wb25lbnRJZDogc3RyaW5nLCBjb250ZXh0TWV0YWRhdGE6IElDb250ZXh0TWV0YWRhdGEpIHtcclxuICAgIGlmICghdGhpcy5jb250ZXh0TWV0YWRhdGFNYW5hZ2VyLmV4c2l0KGNvbXBvbmVudElkKSkge1xyXG4gICAgICB0aGlzLmNvbnRleHRNZXRhZGF0YU1hbmFnZXIucmVnaXN0ZXIoY29tcG9uZW50SWQsIGNvbnRleHRNZXRhZGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmlbTkuKrooajljZXnmoRBcHBDb250ZXh0XHJcbiAgICovXHJcbiAgcHVibGljIGdldEZvcm1BcHBDb250ZXh0KCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmUgOavgeihqOWNlVxyXG4gICAqIEB0b2RvOiDkuLTml7bop6PlhrPooajljZXlhbPpl63lkI7lr7nosaHmsqHmnInplIDmr4Hkuqbojrflj5bkuI3liLDplIDmr4Hml7bmnLrnmoTpl67popgs5bqU5L6d6LWWYW5ndWxhcuacrOi6q+eahOmUgOavgeacuuWItlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXN0b3J5KCkge1xyXG4gICAgdGhpcy5pc0Zvcm1EZXN0b3J5ZWQgPSB0cnVlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDooajljZXmmK/lkKblt7Lnu4/ooqvplIDmr4FcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGlzRGVzdG9yeWVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNGb3JtRGVzdG9yeWVkO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlupTnlKhpZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgQXBwbGljYXRpb25JZCgpIHtcclxuICAgIGlmICghIXRoaXMuYXBwbGljYXRpb25JZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbklkO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hcHBsaWNhdGlvbklkID0gVUlELmNyZWF0ZSgpO1xyXG4gICAgcmV0dXJuIHRoaXMuYXBwbGljYXRpb25JZDtcclxuICB9XHJcbiAgcHVibGljIHNldCBBcHBsaWNhdGlvbklkKGFwcElkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuYXBwbGljYXRpb25JZCA9IGFwcElkO1xyXG4gIH1cclxuICBwdWJsaWMgZ2V0IFRva2VuKCkge1xyXG4gICAgaWYgKCEhdGhpcy50b2tlbikge1xyXG4gICAgICByZXR1cm4gdGhpcy50b2tlbjtcclxuICAgIH1cclxuICAgIHRoaXMudG9rZW4gPSBVSUQuY3JlYXRlKCk7XHJcbiAgICByZXR1cm4gdGhpcy50b2tlbjtcclxuICB9XHJcbiAgcHVibGljIHNldCBUb2tlbih0b2tlbjogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XHJcbiAgfVxyXG4gIC8vICNyZWdpb24g5byD55So55qE6ICB5pa55rOVXHJcblxyXG4gIC8qKlxyXG4gICAqIOW3suW6n+W8g++8muivt+S9v+eUqEZyYW1lQ29tcG9uZW50UmVmcmVzaGVy55qEcmVmcmVzaENvbXBvbmVudOaWueazleS7o+abv+OAglxyXG4gICAqIEBkZXByZWNhdGVkXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIoZnJhbWVJZDogc3RyaW5nLCBjb21wb25lbnQ6IGFueSkge1xyXG4gICAgdGhpcy5mcmFtZUNvbXBvbmVudFJlZnJlc2hlci5yZWdGcmFtZUNvbXBvbmVudChmcmFtZUlkLCBjb21wb25lbnQpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlt7Llup/lvIPvvJror7fkvb/nlKhGcmFtZUNvbXBvbmVudFJlZnJlc2hlcueahHJlZnJlc2hDb21wb25lbnTmlrnms5Xku6Pmm7/jgIJcclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWZyZXNoKCkge1xyXG4gICAgdGhpcy5mcmFtZUNvbXBvbmVudFJlZnJlc2hlci5yZWZyZXNoQ29tcG9uZW50cygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5bey5bqf5byD77ya6K+35L2/55SoRnJhbWVDb250ZXh0TWFuYWdlcueahGdldEZyYW1lQ29udGV4dEJ5SWTmlrnms5Xku6Pmm7/jgIJcclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGcmFtZUNvbnRleHQoZnJhbWVJZDogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDb250ZXh0QnlJZChpZGVudGlmeTogc3RyaW5nKTogYW55IHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChpZGVudGlmeSk7XHJcbiAgICByZXR1cm4gY29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW3suW6n+W8g++8muivt+S9v+eUqEZyYW1lQ29udGV4dE1hbmFnZXLnmoRnZXRGcmFtZUNvbnRleHRNYXDmlrnms5Xku6Pmm7/jgIJcclxuICAgKiBAZGVwcmVjYXRlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbGxGcmFtZUNvbnRleHRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRNYXAoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhuihjOWPmOabtFxyXG4gICAqL1xyXG4gIHB1YmxpYyBoYW5kbGVTZWxlY3RDaGFuZ2UoY2hhbmdlOiBDaGFuZ2UsIHNyY0ZyYW1lQ29udGV4dDogYW55KSB7XHJcbiAgICBjb25zdCBmb3JjZSA9IGNoYW5nZS5mb3JjZSB8fCBmYWxzZTtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0cy5mb3JFYWNoKCh0YXJnZXRGcmFtZUNvbnRleHQpID0+IHtcclxuICAgICAgLy8g55u45ZCM55qERnJhbWVDb3RuZXh05oiW6ICFUmVwb3NpdG9yeeS4jeS4gOiHtOeahOaDheWGteS4i++8jOS4jeWQjOatpVxyXG4gICAgICBpZiAodGFyZ2V0RnJhbWVDb250ZXh0ID09PSBzcmNGcmFtZUNvbnRleHRcclxuICAgICAgICB8fCB0YXJnZXRGcmFtZUNvbnRleHQucmVwb3NpdG9yeSAhPT0gc3JjRnJhbWVDb250ZXh0LnJlcG9zaXRvcnkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gdGFyZ2V0RnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xyXG4gICAgICBjb25zdCBiaW5kaW5nTGlzdDogQmluZGluZ0xpc3QgPSBiaW5kaW5nRGF0YS5nZXRWYWx1ZShjaGFuZ2UucGF0aCk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRJZCA9IGNoYW5nZS52YWx1ZVsnaWQnXTtcclxuICAgICAgaWYgKGJpbmRpbmdMaXN0ICYmIGJpbmRpbmdMaXN0LmN1cnJlbnRJZCAhPT0gY3VycmVudElkIHx8IGZvcmNlKSB7XHJcblxyXG4gICAgICAgIC8vIOiuvue9ruW9k+WJjeihjO+8jOS9huS4jeWvueWkluW5v+aSrVxyXG4gICAgICAgIGJpbmRpbmdMaXN0LnNldEN1cnJlbnRJZChjdXJyZW50SWQsIHRydWUsIGZhbHNlLCBmb3JjZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxuICBwcml2YXRlIGluaXRNZXNzYWdlRXZlbnQoKSB7XHJcbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQgIT09IHRoaXMpIHtcclxuICAgICAgbGV0IHJlc3VsdFRhc2s7XHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VyID0gTWVzc2FnZU1hbmFnZXIuZ2V0TWVzc2FnZXIoKTtcclxuICAgICAgbWVzc2FnZXIuc2V0QXBwQ29udGV4dCh0aGlzKTtcclxuICAgICAgbWVzc2FnZXIubGlzdG5lcigobXNnKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gbXNnLnNlbmRlciBhcyBXaW5kb3c7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG1zZy5kYXRhIGFzIE1lc3NhZ2VEYXRhO1xyXG5cclxuICAgICAgICBjb25zdCBhcHBjb250ZXh0ID0gbWVzc2FnZXIuZ2V0QXBwQ29udGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGFsbEZyYW1lQ29udGV4dCA9IGFwcGNvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRNYXAoKTtcclxuICAgICAgICBpZiAoZGF0YS5jb21tYW5kID09PSAnd2YtcmVxdWlyZWQtdmVyaWZpY2F0aW9uJykgeyAvLyDlt6XkvZzmtYHnmoTlv4XloavmoKHpqoxcclxuICAgICAgICAgIC8vIOazqOWFpVZhbGlkYXRpb25IYW5kbGVyXHJcbiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gdGhpcy5pbmplY3Rvci5nZXQ8SVZhbGlkYXRpb25IYW5kbGVyPihWQUxJREFUSU9OX0hBTkRMRVIsIG51bGwsIEluamVjdEZsYWdzLk9wdGlvbmFsKTtcclxuICAgICAgICAgIGlmICh2YWxpZGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFRhc2sgPSB2YWxpZGF0aW9uLnZhbGlkYXRlQWxsKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBjb21tYW5kID0gdGhpcy5maW5kSGFuZGxlcihhbGxGcmFtZUNvbnRleHQsIGRhdGEuY29tbWFuZCk7XHJcbiAgICAgICAgICBpZiAoY29tbWFuZCkge1xyXG4gICAgICAgICAgICByZXN1bHRUYXNrID0gKGNvbW1hbmQgYXMgYW55KShkYXRhLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzdWx0VGFzaykge1xyXG4gICAgICAgICAgcmVzdWx0VGFzay5waXBlKHRocm93SWZFbXB0eSgpKS5zdWJzY3JpYmUoKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDlkJHmnaXmupDmlrnlm57kvKDmtojmga9cclxuICAgICAgICAgICAgY29uc3QgcmV0TXNnID0gbmV3IE1lc3NhZ2VCb2R5KG5ldyBNZXNzYWdlRGF0YSgpKTtcclxuICAgICAgICAgICAgcmV0TXNnLmRhdGEucmVzdWx0ID0gdHJ1ZTsgLy8g55uu5qCH5pa55rOV6L+U5Zue5YC8XHJcbiAgICAgICAgICAgIHJldE1zZy50eXBlID0gJ21lc3NhZ2UnO1xyXG4gICAgICAgICAgICByZXRNc2cudGFyZ2V0ID0gc291cmNlO1xyXG4gICAgICAgICAgICBtZXNzYWdlci5zZW5kKHJldE1zZyk7XHJcbiAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldE1zZyA9IG5ldyBNZXNzYWdlQm9keShuZXcgTWVzc2FnZURhdGEoKSk7XHJcbiAgICAgICAgICAgIHJldE1zZy5kYXRhLnJlc3VsdCA9IGZhbHNlOyAvLyDnm67moIfmlrnms5Xov5Tlm57lgLxcclxuICAgICAgICAgICAgcmV0TXNnLnR5cGUgPSAnbWVzc2FnZSc7XHJcbiAgICAgICAgICAgIHJldE1zZy50YXJnZXQgPSBzb3VyY2U7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VyLnNlbmQocmV0TXNnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZpbmRIYW5kbGVyKGNvbnRleHRNYXA6IE1hcDxzdHJpbmcsIGFueT4sIGNvbW1hbmQ6IHN0cmluZyk6IGFueSB7XHJcbiAgICBsZXQgZnVuYztcclxuICAgIGNvbnN0IHRlbXAgPSBbLi4uY29udGV4dE1hcC52YWx1ZXMoKV07XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGZvcmluXHJcbiAgICBmb3IgKGNvbnN0IHYgaW4gdGVtcCkge1xyXG4gICAgICBjb25zdCB2bSA9IHRlbXBbdl0udmlld01vZGVsO1xyXG4gICAgICBpZiAodm0gJiYgdm0uaGFzT3duUHJvcGVydHkoY29tbWFuZCkpIHtcclxuICAgICAgICBmdW5jID0gdm1bY29tbWFuZF07XHJcbiAgICAgICAgcmV0dXJuIGZ1bmM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBwdWJsaWMgYnVpbGRSZW5kZXJWaWV3Q29udGV4dChjb21wb25lbnRJZDogc3RyaW5nKSB7XHJcbiAgICAvLyDmj5Dlj5bop4blm77mqKHlnovpm4blkIhcclxuICAgIGNvbnN0IHZpZXdNb2RlbHMgPSB0aGlzLmZvcm1Nb2R1bGUudmlld21vZGVscztcclxuICAgIC8vIOaPkOWPlue7hOS7tuaPj+i/sOmbhuWQiFxyXG4gICAgY29uc3Qgdmlld0NvbXBvbmVudHMgPSB0aGlzLmZvcm1Nb2R1bGUuY29tcG9uZW50cztcclxuICAgIC8vIOaPkOWPlnNjaGVtYeiKgueCuVxyXG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5mb3JtTW9kdWxlLnNjaGVtYXNbMF07XHJcbiAgICAvLyDmn6Xmib7ljLnphY3mjIflrprmoIfor4bnmoTnu4Tku7boioLngrlcclxuICAgIGNvbnN0IG1hdGNoZWRDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQuaWQgPT09IGNvbXBvbmVudElkKTtcclxuICAgIC8vIOWMuemFjeaMh+Wumue7hOS7tueahOinhuWbvuaooeWei+iKgueCuVxyXG4gICAgY29uc3QgbWF0Y2hlZFZpZXdNb2RlbCA9IHZpZXdNb2RlbHMuZmluZCh2aWV3TW9kZWwgPT4gbWF0Y2hlZENvbXBvbmVudC52aWV3TW9kZWwgPT09IHZpZXdNb2RlbC5pZCk7XHJcbiAgICAvLyDmn6Xmib7ljLnphY3op4blm77mqKHlnovnmoTniLboioLngrlcclxuICAgIGNvbnN0IHBhcmVudFZpZXdNb2RlbCA9IHZpZXdNb2RlbHMuZmluZCh2aWV3TW9kZWwgPT4gdmlld01vZGVsLmlkID09PSBtYXRjaGVkVmlld01vZGVsLnBhcmVudCk7XHJcbiAgICBsZXQgcGFyZW50Q29tcG9uZW50SWQgPSAnJztcclxuICAgIC8vIOWmguaenOWMuemFjeS4iuS4iue6p+inhuWbvuaooeWei++8jOaPkOS4iue6p+inhuWbvuagh+ivhlxyXG4gICAgaWYgKHBhcmVudFZpZXdNb2RlbCkge1xyXG4gICAgICBjb25zdCBwYXJlbnRDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQudmlld01vZGVsID09PSBwYXJlbnRWaWV3TW9kZWwuaWQpO1xyXG4gICAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgcGFyZW50Q29tcG9uZW50SWQgPSBwYXJlbnRDb21wb25lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWmguaenOWtmOWcqOS4iue6p+e7hOS7tu+8jOaPkOWPluWZqOS4iuS4i+aWh+WvueixoeOAglxyXG4gICAgLy8gY29uc3QgcGFyZW50Vmlld0NvbnRleHQgPSBwYXJlbnRDb21wb25lbnRJZCA/IHRoaXMuZ2V0Q29udGV4dEJ5SWQocGFyZW50Q29tcG9uZW50SWQpIDogbnVsbDtcclxuICAgIC8vIHRoaXMuYnVpbGRSZW5kZXJWaWV3Q29udGV4dFJlY3Vyc2l2ZWx5KG1hdGNoZWRWaWV3TW9kZWwsIHBhcmVudFZpZXdDb250ZXh0LCBzY2hlbWEpO1xyXG4gICAgdGhpcy5idWlsZFJlbmRlclZpZXdDb250ZXh0UmVjdXJzaXZlbHkobWF0Y2hlZFZpZXdNb2RlbCwgc2NoZW1hKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRSZW5kZXJWaWV3Q29udGV4dFJlY3Vyc2l2ZWx5KHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwsIHNjaGVtYTogU2NoZW1hKSB7XHJcbiAgICBjb25zdCBjb250cm9sbGVycyA9IHRoaXMuY29udHJvbGxlcnM7XHJcbiAgICBjb25zdCB2aWV3Q29tcG9uZW50cyA9IHRoaXMuZm9ybU1vZHVsZS5jb21wb25lbnRzO1xyXG4gICAgY29uc3QgbWF0Y2hlZENvbXBvbmVudCA9IHZpZXdDb21wb25lbnRzLmZpbmQoY29tcG9uZW50ID0+IGNvbXBvbmVudC52aWV3TW9kZWwgPT09IHZpZXdNb2RlbC5pZCk7XHJcbiAgICBjb25zdCBjb250ZXh0TWV0YWRhdGEgPSB0aGlzLmNvbnRleHRNZXRhZGF0YUJ1aWxkZXIuYnVpbGRWaWV3Q29udGV4dE1ldGFkYXRhKG1hdGNoZWRDb21wb25lbnQsIHZpZXdNb2RlbCwgc2NoZW1hLCBjb250cm9sbGVycyk7XHJcbiAgICAvLyBjb25zdCBjb21tYW5kSGFuZGxlcnM6IENvbW1hbmRIYW5kbGVyW10gPSB0aGlzLmJ1aWxkQ29tbWFuZEhhbmRsZXJzKHZpZXdNb2RlbC5jb21tYW5kcywgY29udHJvbGxlcnMpO1xyXG4gICAgLy8gY29uc3QgY29tbWFuZEhhbmRsZXJFeHRlbmRzOiBDb21tYW5kSGFuZGxlckV4dGVuZGVyW10gPSBbXTtcclxuICAgIC8vIGNvbnN0IHZpZXdDb250ZXh0ID0gbmV3IFZpZXdDb21wb25lbnRDb250ZXh0KFxyXG4gICAgLy8gICBjb250ZXh0TWV0YWRhdGEsXHJcbiAgICAvLyAgIHRoaXMsXHJcbiAgICAvLyAgIHBhcmVudCxcclxuICAgIC8vICAgdGhpcy5pbmplY3RvclxyXG4gICAgLy8gKTtcclxuICAgIC8vIHRoaXMucmVnRnJhbWVDb250ZXh0KHZpZXdDb250ZXh0KTtcclxuICAgIC8vIHZpZXdDb250ZXh0LmluaXQoKTtcclxuXHJcbiAgICB0aGlzLnJlZ0NvbnRleHRNZXRhZGF0YShtYXRjaGVkQ29tcG9uZW50LmlkLCBjb250ZXh0TWV0YWRhdGEpO1xyXG5cclxuICAgIGNvbnN0IHZpZXdNb2RlbHMgPSB0aGlzLmZvcm1Nb2R1bGUudmlld21vZGVscztcclxuICAgIGNvbnN0IHN1YlZpZXdNb2RlbHMgPSB2aWV3TW9kZWxzLmZpbHRlcihzdWJWaWV3TW9kZWwgPT4gc3ViVmlld01vZGVsLnBhcmVudCA9PT0gdmlld01vZGVsLmlkKTtcclxuICAgIGlmIChzdWJWaWV3TW9kZWxzICYmIHN1YlZpZXdNb2RlbHMubGVuZ3RoKSB7XHJcbiAgICAgIHN1YlZpZXdNb2RlbHMuZm9yRWFjaChzdWJWaWV3TW9kZWwgPT4ge1xyXG4gICAgICAgIHRoaXMuYnVpbGRSZW5kZXJWaWV3Q29udGV4dFJlY3Vyc2l2ZWx5KHN1YlZpZXdNb2RlbCwgc2NoZW1hKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29tcG9uZW50UHJvdmlkZXJzKGNvbXBvbmVudElkOiBzdHJpbmcpOiBhbnlbXSB7XHJcbiAgICBjb25zdCBjb250ZXh0TWV0YWRhdGEgPSB0aGlzLmNvbnRleHRNZXRhZGF0YU1hbmFnZXIuZ2V0Q29udGV4dE1ldGFkYXRhQnlOYW1lKGNvbXBvbmVudElkKTtcclxuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gbmV3IEJpbmRpbmdEYXRhKCk7XHJcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm0oKTtcclxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IGNvbnRleHRNZXRhZGF0YS5uYW1lc3BhY2U7XHJcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gdGhpcy5pbmplY3Rvci5nZXQoUmVwb3NpdG9yeSwgbnVsbCkgfHwgdGhpcy5yZXBvc2l0b3J5O1xyXG4gICAgY29uc3Qgc3RhdGVNYWNoaW5lID0gdGhpcy5zdGF0ZU1hY2hpbmU7XHJcbiAgICBjb25zdCB1aVN0YXRlID0gbmV3IFVJU3RhdGUoKTtcclxuICAgIGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBWaWV3TW9kZWwoKTtcclxuICAgIHZpZXdNb2RlbC5zZXRNZXRhZGF0YShjb250ZXh0TWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyBwcm92aWRlOiBGUkFNRV9JRCwgdXNlVmFsdWU6IGNvbXBvbmVudElkIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogTkFNRVNQQUNFLCB1c2VWYWx1ZTogbmFtZXNwYWNlIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogRnJhbWVDb250ZXh0LCB1c2VDbGFzczogRnJhbWVDb250ZXh0IH0sXHJcbiAgICAgIHsgcHJvdmlkZTogQXBwQ29udGV4dCwgdXNlVmFsdWU6IHRoaXMgfSxcclxuICAgICAgeyBwcm92aWRlOiBCaW5kaW5nRGF0YSwgdXNlVmFsdWU6IGJpbmRpbmdEYXRhIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogRm9ybSwgdXNlVmFsdWU6IGZvcm0gfSxcclxuICAgICAgeyBwcm92aWRlOiBSZXBvc2l0b3J5LCB1c2VWYWx1ZTogcmVwb3NpdG9yeSB9LFxyXG4gICAgICB7IHByb3ZpZGU6IFN0YXRlTWFjaGluZSwgdXNlVmFsdWU6IHN0YXRlTWFjaGluZSB9LFxyXG4gICAgICB7IHByb3ZpZGU6IFVJU3RhdGUsIHVzZVZhbHVlOiB1aVN0YXRlIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogVmlld01vZGVsLCB1c2VWYWx1ZTogdmlld01vZGVsIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBwcm92aWRlOiBWYXJpYWJsZVBhcnNlU2VydmljZSwgdXNlVmFsdWU6IG5ldyBWYXJpYWJsZVBhcnNlU2VydmljZShbXHJcbiAgICAgICAgICBuZXcgRnJhbWVJZFZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgICAgICBuZXcgRGF0YVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgICAgICBuZXcgVUlTdGF0ZVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgICAgICBuZXcgU3RhdGVNYWNoaW5lVmFyaWFibGVQYXJzZXIoKSxcclxuICAgICAgICAgIG5ldyBDb21tYW5kVmFyaWFibGVQYXJzZXIoKVxyXG4gICAgICAgIF0pXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICAvLyBwcml2YXRlIGJ1aWxkQ29tbWFuZEhhbmRsZXJzKGNvbW1hbmRNZXRhZGF0YUFycmF5OiBJRm9ybVZpZXdNb2RlbENvbW1hbmRbXSwgY29udHJvbGxlcnM6IHsgW2lkOiBzdHJpbmddOiBDb21tYW5kQ29udHJvbGxlciB9KVxyXG4gIC8vICAgOiBDb21tYW5kSGFuZGxlcltdIHtcclxuICAvLyAgIGNvbnN0IGNvbW1hbmRIYW5kbGVyczogQ29tbWFuZEhhbmRsZXJbXSA9IFtdO1xyXG4gIC8vICAgY29tbWFuZE1ldGFkYXRhQXJyYXkucmVkdWNlPENvbW1hbmRIYW5kbGVyW10+KChwcmV2aW91c1ZhbHVlOiBDb21tYW5kSGFuZGxlcltdLCBjb21tYW5kUmVmZXJlbmNlOiBJRm9ybVZpZXdNb2RlbENvbW1hbmQpID0+IHtcclxuICAvLyAgICAgY29uc3QgY29tbWFuZE5hbWUgPSBjb21tYW5kUmVmZXJlbmNlLmNvZGU7XHJcbiAgLy8gICAgIGNvbnN0IGNvbnRyb2xsZXJJZCA9IGNvbW1hbmRSZWZlcmVuY2UuY21wSWQ7XHJcbiAgLy8gICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1tjb250cm9sbGVySWRdO1xyXG4gIC8vICAgICBjb25zdCBtZXRob2QgPSBPYmplY3QuYXNzaWduKHt9LCBjb250cm9sbGVyLm1ldGhvZHNbY29tbWFuZFJlZmVyZW5jZS5oYW5kbGVyTmFtZV0pO1xyXG4gIC8vICAgICBtZXRob2QucGFyYW1zID0gbWV0aG9kLnBhcmFtcy5tYXAocGFyYW0gPT4gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW0pKTtcclxuICAvLyAgICAgaWYgKG1ldGhvZC5wYXJhbXMgJiYgbWV0aG9kLnBhcmFtcy5sZW5ndGgpIHtcclxuICAvLyAgICAgICBjb21tYW5kUmVmZXJlbmNlLnBhcmFtcy5yZWR1Y2U8Q29udHJvbGxlck1ldGhvZD4oKHByZXZpb3VzTWV0aG9kVmFsdWU6IENvbnRyb2xsZXJNZXRob2QsIHBhcmFtOiBJRm9ybVZpZXdNb2RlbENvbW1hbmRQYXJhbSkgPT4ge1xyXG4gIC8vICAgICAgICAgY29uc3QgbWV0aG9kUGFyYW0gPSBwcmV2aW91c01ldGhvZFZhbHVlLnBhcmFtcy5maW5kKHZhbHVlID0+IHZhbHVlLm5hbWUgPT09IHBhcmFtLm5hbWUpO1xyXG4gIC8vICAgICAgICAgaWYgKG1ldGhvZFBhcmFtKSB7XHJcbiAgLy8gICAgICAgICAgIG1ldGhvZFBhcmFtLmV4cHJlc3Npb24gPSBwYXJhbS52YWx1ZTtcclxuICAvLyAgICAgICAgIH1cclxuICAvLyAgICAgICAgIHJldHVybiBwcmV2aW91c01ldGhvZFZhbHVlO1xyXG4gIC8vICAgICAgIH0sIG1ldGhvZCk7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgICAgY29uc3QgY29tbWFuZEhhbmRsZXIgPSBuZXcgRHluYW1pY0NvbW1hbmRIYW5kbGVyKGNvbW1hbmROYW1lLCBtZXRob2QpO1xyXG4gIC8vICAgICBwcmV2aW91c1ZhbHVlLnB1c2goY29tbWFuZEhhbmRsZXIpO1xyXG4gIC8vICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAvLyAgIH0sIGNvbW1hbmRIYW5kbGVycyk7XHJcbiAgLy8gICByZXR1cm4gY29tbWFuZEhhbmRsZXJzO1xyXG4gIC8vIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFwcENvbnRleHQgfTtcclxuIl19