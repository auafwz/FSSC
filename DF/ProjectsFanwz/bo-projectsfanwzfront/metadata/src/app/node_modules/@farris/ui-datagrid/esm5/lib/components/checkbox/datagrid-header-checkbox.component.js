/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from './../../datagrid.component';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-18 10:30:21
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, ViewChild, ElementRef, Injector } from '@angular/core';
import { DatagridFacadeService } from './../../services/datagrid-facade.service';
var DatagridHeaderCheckboxComponent = /** @class */ (function () {
    function DatagridHeaderCheckboxComponent(injector) {
        this.injector = injector;
        this.indeterminate = false;
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dg = this.injector.get(DatagridComponent);
    }
    /**
     * @return {?}
     */
    DatagridHeaderCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.indeterminate) {
            this.chk.nativeElement.indeterminate = true;
        }
        this.dg.dgs.changeCheckAllStatus.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            if (status === 2) {
                _this.chk.nativeElement.indeterminate = true;
            }
            else {
                _this.chk.nativeElement.indeterminate = false;
                _this.updateStatus(!!status);
            }
        }));
    };
    /**
     * @param {?} checked
     * @return {?}
     */
    DatagridHeaderCheckboxComponent.prototype.updateStatus = /**
     * @param {?} checked
     * @return {?}
     */
    function (checked) {
        this.checked = checked;
        this.chk.nativeElement.checked = checked;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridHeaderCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.dg.data || !this.dg.data.length) {
            return;
        }
        if (!this.disabled) {
            this.checked = !this.checked;
            this.indeterminate = false;
            this.chk.nativeElement.indeterminate = false;
            if (this.checked) {
                this.dfs.checkAll();
                this.chk.nativeElement.checked = true;
                // this.dg.checkAll.emit();
            }
            else {
                this.dfs.clearCheckeds(!this.dg.enableMorePageSelect);
                if (this.dg.selectedRow && this.dg.checkOnSelect && this.dg.selectOnCheck) {
                    this.dg.unSelectRow(this.dg.selectedRow.id);
                }
                this.chk.nativeElement.checked = false;
                // this.dg.unCheckAll.emit();
            }
        }
        event.stopPropagation();
    };
    DatagridHeaderCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-header-checkbox',
                    template: " <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div>",
                    styles: ["\n        :host {\n            vertical-align: middle;\n        }\n        :host .custom-checkbox {\n            opacity: 1;\n            float: none;\n            top: 2px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    DatagridHeaderCheckboxComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    DatagridHeaderCheckboxComponent.propDecorators = {
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        indeterminate: [{ type: Input }],
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return DatagridHeaderCheckboxComponent;
}());
export { DatagridHeaderCheckboxComponent };
if (false) {
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.chk;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaGVhZGVyLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jaGVja2JveC9kYXRhZ3JpZC1oZWFkZXItY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7Ozs7O0FBUy9ELE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRWpGO0lBNkJJLHlDQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTjdCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBTzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELGtEQUFROzs7SUFBUjtRQUFBLGlCQWFDO1FBWkcsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDL0M7UUFFRCxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxNQUFjO1lBQ3RELElBQUksTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDZCxLQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2FBQy9DO2lCQUFNO2dCQUNILEtBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7Z0JBQzdDLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQy9CO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVELHNEQUFZOzs7O0lBQVosVUFBYSxPQUFnQjtRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBR0QscURBQVc7Ozs7SUFBWCxVQUFZLEtBQWlCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN2QyxPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUU3QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQzdDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUN0QywyQkFBMkI7YUFDOUI7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBRXRELElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUU7b0JBQ3ZFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUMvQztnQkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUN2Qyw2QkFBNkI7YUFDaEM7U0FDSjtRQUNELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM1QixDQUFDOztnQkFoRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRSw4UkFHSDs2QkFFSCxvTUFTQztpQkFFUjs7OztnQkFyQnlELFFBQVE7OzswQkF1QjdELEtBQUs7MkJBQ0wsS0FBSztnQ0FFTCxLQUFLO3NCQUVMLFNBQVMsU0FBQyxLQUFLOztJQXlEcEIsc0NBQUM7Q0FBQSxBQWxGRCxJQWtGQztTQS9EWSwrQkFBK0I7OztJQUN4QyxrREFBMEI7O0lBQzFCLG1EQUEyQjs7SUFFM0Isd0RBQStCOztJQUUvQiw4Q0FBa0M7Ozs7O0lBQ2xDLDhDQUFtQzs7Ozs7SUFDbkMsNkNBQThCOzs7OztJQUVsQixtREFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4vLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0wNiAwNzo0MzowN1xyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0wOS0xOCAxMDozMDoyMVxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkRmFjYWRlU2VydmljZSB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvZGF0YWdyaWQtZmFjYWRlLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2RhdGFncmlkLWhlYWRlci1jaGVja2JveCcsXHJcbiAgICB0ZW1wbGF0ZTogYCA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94IGYtY2hlY2tyYWRpby1zaW5nbGVcIj5cclxuICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgI2NoayBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgW2Rpc2FibGVkXT1cImRpc2FibGVkXCIgW2NoZWNrZWRdPVwiY2hlY2tlZFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudClcIj48L2xhYmVsPlxyXG4gICAgPC9kaXY+YCxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIGBcclxuICAgICAgICA6aG9zdCB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDpob3N0IC5jdXN0b20tY2hlY2tib3gge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICAgICAgdG9wOiAycHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGBcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkSGVhZGVyQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCkgY2hlY2tlZDogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICAgIEBJbnB1dCgpIGluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdjaGsnKSBjaGs6IEVsZW1lbnRSZWY7XHJcbiAgICBwcml2YXRlIGRmczogRGF0YWdyaWRGYWNhZGVTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBkZzogRGF0YWdyaWRDb21wb25lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmRmcyA9IHRoaXMuaW5qZWN0b3IuZ2V0KERhdGFncmlkRmFjYWRlU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5kZyA9IHRoaXMuaW5qZWN0b3IuZ2V0KERhdGFncmlkQ29tcG9uZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pbmRldGVybWluYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRnLmRncy5jaGFuZ2VDaGVja0FsbFN0YXR1cy5zdWJzY3JpYmUoKHN0YXR1czogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKCEhc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVN0YXR1cyhjaGVja2VkOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSBjaGVja2VkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBoYW5kbGVDbGljayhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kZy5kYXRhIHx8ICF0aGlzLmRnLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5jaGVja0FsbCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuZGcuY2hlY2tBbGwuZW1pdCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZnMuY2xlYXJDaGVja2VkcyghdGhpcy5kZy5lbmFibGVNb3JlUGFnZVNlbGVjdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGcuc2VsZWN0ZWRSb3cgJiYgdGhpcy5kZy5jaGVja09uU2VsZWN0ICYmIHRoaXMuZGcuc2VsZWN0T25DaGVjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGcudW5TZWxlY3RSb3codGhpcy5kZy5zZWxlY3RlZFJvdy5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuZGcudW5DaGVja0FsbC5lbWl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==