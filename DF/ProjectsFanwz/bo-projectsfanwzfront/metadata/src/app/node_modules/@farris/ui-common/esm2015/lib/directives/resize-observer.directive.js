/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, ElementRef, EventEmitter, Input } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
const entriesMap = new WeakMap();
const ɵ0 = /**
 * @param {?} entries
 * @return {?}
 */
entries => {
    for (const entry of entries) {
        if (entriesMap.has(entry.target)) {
            /** @type {?} */
            const comp = entriesMap.get(entry.target);
            comp._resizeCallback(entry);
        }
    }
};
/** @type {?} */
const ro = new ResizeObserver((ɵ0));
export class ResizeObserverDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.resize = new EventEmitter();
    }
    /**
     * @param {?} entry
     * @return {?}
     */
    _resizeCallback(entry) {
        entry['bindintClientRect'] = entry.target.getBoundingClientRect();
        // console.log(entry.contentRect, entry.bindintClientRect);
        this.resize.emit(entry);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const target = this.target ? this.target.nativeElement : this.el.nativeElement;
        entriesMap.set(target, this);
        ro.observe(target);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** @type {?} */
        const target = this.el.nativeElement;
        ro.unobserve(target);
        entriesMap.delete(target);
    }
}
ResizeObserverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resizeObserver]'
            },] }
];
/** @nocollapse */
ResizeObserverDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizeObserverDirective.propDecorators = {
    target: [{ type: Input, args: ['resizeObserver',] }],
    resize: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ResizeObserverDirective.prototype.target;
    /** @type {?} */
    ResizeObserverDirective.prototype.resize;
    /** @type {?} */
    ResizeObserverDirective.prototype.el;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFxQixZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sY0FBYyxNQUFNLDBCQUEwQixDQUFDOztNQUdoRCxVQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUU7Ozs7O0FBRUYsT0FBTyxDQUFDLEVBQUU7SUFDcEMsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUU7UUFDekIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTs7a0JBQ3hCLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtLQUNKO0FBQ0wsQ0FBQzs7TUFQSyxFQUFFLEdBQUcsSUFBSSxjQUFjLE1BTzNCO0FBS0YsTUFBTSxPQUFPLHVCQUF1Qjs7OztJQUtoQyxZQUFtQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUZ2QixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUd0QyxDQUFDOzs7OztJQUdELGVBQWUsQ0FBQyxLQUFLO1FBQ2pCLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNsRSwyREFBMkQ7UUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELFFBQVE7O2NBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7UUFDL0UsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsV0FBVzs7Y0FDRCxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhO1FBQ3BDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUE1QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQkFBa0I7YUFDL0I7Ozs7WUFqQjJCLFVBQVU7OztxQkFtQmpDLEtBQUssU0FBQyxnQkFBZ0I7cUJBRXRCLE1BQU07Ozs7SUFGUCx5Q0FBNEM7O0lBRTVDLHlDQUFzQzs7SUFFMUIscUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBPdXRwdXQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xyXG5cclxuXHJcbmNvbnN0IGVudHJpZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuY29uc3Qgcm8gPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgICBpZiAoZW50cmllc01hcC5oYXMoZW50cnkudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21wID0gZW50cmllc01hcC5nZXQoZW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgY29tcC5fcmVzaXplQ2FsbGJhY2soZW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3Jlc2l6ZU9ic2VydmVyXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJlc2l6ZU9ic2VydmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQElucHV0KCdyZXNpemVPYnNlcnZlcicpIHRhcmdldDogRWxlbWVudFJlZjtcclxuXHJcbiAgICBAT3V0cHV0KCkgcmVzaXplID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbDogRWxlbWVudFJlZikge1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBfcmVzaXplQ2FsbGJhY2soZW50cnkpIHtcclxuICAgICAgICBlbnRyeVsnYmluZGludENsaWVudFJlY3QnXSA9IGVudHJ5LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhlbnRyeS5jb250ZW50UmVjdCwgZW50cnkuYmluZGludENsaWVudFJlY3QpO1xyXG4gICAgICAgIHRoaXMucmVzaXplLmVtaXQoZW50cnkpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0ID8gIHRoaXMudGFyZ2V0Lm5hdGl2ZUVsZW1lbnQgOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgZW50cmllc01hcC5zZXQodGFyZ2V0LCB0aGlzKTtcclxuICAgICAgICByby5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHJvLnVub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIGVudHJpZXNNYXAuZGVsZXRlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==