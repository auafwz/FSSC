import { Observable } from 'rxjs';
import { Injector, InjectionToken } from '@angular/core';
import { DatagridComponent, DataColumn } from '@farris/ui-datagrid';
import { BsModalService, ModalOptions } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { LocaleService } from '@farris/ui-locale';
import { IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
export declare const GRID_SETTINGS_WEBAPI: InjectionToken<{}>;
export declare class DatagridSettingsService {
    private injector;
    private modalSer;
    private messager;
    private idService;
    private localeSer;
    private multiSortMsg;
    private columnsSortableMsg;
    private notSupportHeaderGroupMsg;
    private notShowDialog;
    httpRestService: any;
    gridInstance: any;
    private gridRefs;
    private saving;
    private cfr;
    private app;
    constructor(injector: Injector, modalSer: BsModalService, messager: MessagerService, idService: IdService, localeSer: LocaleService);
    destroy(id?: string): void;
    registerGridInstance(dg: DatagridComponent): void;
    getGridInstance(dgID: string): DatagridComponent;
    getSearchTypes(): {
        value: string;
        title: any;
    }[];
    showSimple(gridInstance: DatagridComponent): import("@angular/core").ComponentRef<SimpleColumnsComponent>;
    show(gridInstance: DatagridComponent, opts?: ModalOptions): any;
    private showAdvanced;
    private canSetColumnSort;
    private hasEnableSortColumns;
    private isHeaderGroup;
    private getChilds;
    convertColumns2TreeData(cols: DataColumn[][], forSort?: boolean): any;
    private checkViewTreeNodes;
    private convertColumnsToSimple;
    private resetGridView;
    private updateGridView;
    newVisibleOrderColumns(cols: any, viewColumns: any, columnFormat: any): any;
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    private isNewAddColumn;
    updateColumnFormat(cols: any[], columnFormat: any[], gridInstance: any): void;
    private createConfigKey;
    saveUserConfig(gridId: string): Observable<any>;
    setUserConfig(key: string, config: any): Observable<any>;
    getUserConfig(key: any): Observable<any>;
    getSettings(gridID: string): Observable<any>;
    private _saveUserConfig;
    resetUserConfig(gridInstance: any, modalRef: any): void;
    private _getUserConfig;
}
