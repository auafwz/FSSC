/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/solution.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { QueryCondition } from '../entity/querycondition';
import { ValueType } from '../entity/valuetype';
import { TextControl } from '../entity/controltype/text/textcontrol';
import { InputGroupControl, DialogConfig } from '../entity/controltype/input-group/inputgroupcontrol';
import { TextValue } from '../entity/conditionvalue/textvalue';
import { DateRangeControl } from '../entity/controltype/daterange/date-range.control';
import { DateRangeValue } from '../entity/conditionvalue/daterangevalue';
import { NumberRangeControl } from '../entity/controltype/numberrange/numberrangecontrol';
import { NumberRangeValue } from '../entity/conditionvalue/numberrangevaue';
import { DropDownListControl } from '../entity/controltype/dropdownlist/dropdownlistcontrol';
import { DropDownListValue } from '../entity/conditionvalue/dropdownlistvalue';
import { SmartHelpContol } from '../entity/controltype/smarthelp/smarthelpcontrol';
import { SmartHelpValue } from '../entity/conditionvalue/smarthelpvalue';
import { SingleDateControl } from '../entity/controltype/date/single-date-control';
import { SingleDateValue } from '../entity/conditionvalue/single-date-value';
import { SingleNumberControl } from '../entity/controltype/number/single-number-control';
import { SingleNumberValue } from '../entity/conditionvalue/single-number-value';
import { SingleYearControl } from '../entity/controltype/year/year-control';
import { SingleYearValue } from '../entity/conditionvalue/single-year-value';
import { SingleMonthControl } from '../entity/controltype/month/month-control';
import { SingleMonthValue } from '../entity/conditionvalue/single-month-value';
import { CheckBoxControl } from '../entity/controltype/checkbox/checkbox-control';
import { CheckBoxValue } from '../entity/conditionvalue/checkbox-value';
import { DateTimeRangeControl } from '../entity/controltype/daterange/datertime-range-control';
import { MonthRangeControl } from '../entity/controltype/monthrange/month-range-control';
import { MonthRangeValue } from '../entity/conditionvalue/month-range-value';
import { SingleDateTimeControl } from '../entity/controltype/date/single-date-time-control';
import { SingleDateTimeValue } from '../entity/conditionvalue/single-date-time-value';
import { ComboLookUpControl } from '../entity/controltype/combolookup/combolookup-control';
import { ComboLookUpValue } from '../entity/conditionvalue/combolookup-value';
import { RadioControl } from '../entity/controltype/radio/radio-control';
import { RadioValue } from '../entity/conditionvalue/radio-value';
import { InputGroupValue } from '../entity/conditionvalue/inputgroupvalue';
import { ControlType } from '../entity/controltype';
import { BehaviorSubject } from 'rxjs';
var SolutionService = /** @class */ (function () {
    function SolutionService(notify) {
        this.notify = notify;
        // 标记变更
        this.controlConfigState = new BehaviorSubject([]);
        this.controlTypeMap = new Map([
            [ControlType.Text, 'text'], [ControlType.BoolCheck, 'bool-check'], [ControlType.DateRange, 'date'],
            [ControlType.DateTimeRange, 'date-time'], [ControlType.NumberRange, 'number'], [ControlType.DropDownList, 'dropdown'],
            [ControlType.SmartHelp, 'help'], [ControlType.SingleDate, 'single-date'], [ControlType.SingleNumber, 'single-number'],
            [ControlType.SingleYear, 'single-year'], [ControlType.SingleMonth, 'single-month'], [ControlType.MonthRange, 'month'],
            [ControlType.SingleDateTime, 'single-date-time'], [ControlType.ComboLookUp, 'combolist-help'], [ControlType.Radio, 'radio'],
            [ControlType.InputGroup, 'input-group']
        ]);
    }
    /**
     * @return {?}
     */
    SolutionService.prototype.getControlConfigState = /**
     * @return {?}
     */
    function () {
        return this.controlConfigState;
    };
    /**
     * 传递过来的是已经处理过的条件
     * @param simpleCondition
     */
    /**
     * 传递过来的是已经处理过的条件
     * @param {?} simpleCondition
     * @return {?}
     */
    SolutionService.prototype.updateControlConfigState = /**
     * 传递过来的是已经处理过的条件
     * @param {?} simpleCondition
     * @return {?}
     */
    function (simpleCondition) {
        this.controlConfigState.next(simpleCondition);
    };
    /**
     * 只返回存在的属性
     */
    /**
     * 只返回存在的属性
     * @param {?} fields
     * @return {?}
     */
    SolutionService.prototype.convertToSimpleQueryConditions = /**
     * 只返回存在的属性
     * @param {?} fields
     * @return {?}
     */
    function (fields) {
        var _this = this;
        /** @type {?} */
        var simpleQueryCondition = {};
        if (fields && fields.length == 0) {
            return [];
        }
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            simpleQueryCondition['fieldCode'] = field.labelCode;
            simpleQueryCondition['control'] = _this.getSimpleControl(field);
            return simpleQueryCondition;
        }));
    };
    /**
     * 只处理设置的属性
     * @param field
     */
    /**
     * 只处理设置的属性
     * @private
     * @param {?} field
     * @return {?}
     */
    SolutionService.prototype.getSimpleControl = /**
     * 只处理设置的属性
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var controlData = field.control;
        /** @type {?} */
        var simpleControl = {};
        /** @type {?} */
        var tControlType = this.controlTypeMap.get(controlData.controltype);
        switch (tControlType) {
            case 'single-year':
                this.updateSimpleControl(simpleControl, ['maxDate', 'minDate'], controlData);
                break;
            default:
                simpleControl = {};
        }
        return simpleControl;
    };
    /**
     * 只处理指定属性
     * @param resultObj 修改的对象  {test01:'',test01:''}
     * @param sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param source 取值来源{prop01:'',prop02:''}
     * @param distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return
     */
    /**
     * 只处理指定属性
     * @private
     * @param {?} resultObj 修改的对象  {test01:'',test01:''}
     * @param {?} sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param {?} source 取值来源{prop01:'',prop02:''}
     * @param {?=} distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return {?}
     */
    SolutionService.prototype.updateSimpleControl = /**
     * 只处理指定属性
     * @private
     * @param {?} resultObj 修改的对象  {test01:'',test01:''}
     * @param {?} sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param {?} source 取值来源{prop01:'',prop02:''}
     * @param {?=} distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return {?}
     */
    function (resultObj, sourceProps, source, distProps) {
        if (distProps === void 0) { distProps = []; }
        if (distProps.length == 0) {
            distProps = sourceProps;
        }
        for (var m = 0; m < sourceProps.length; m++) {
            if (!distProps[m]) {
                distProps[m] = sourceProps[m];
            }
        }
        for (var k = 0; k < sourceProps.length; k++) {
            if (source && source.hasOwnProperty(sourceProps[k])) {
                resultObj[distProps[k]] = source[sourceProps[k]];
            }
        }
    };
    /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param fields 字段配置信息
     * @returns 筛选条件数组
     */
    /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param {?} fields 字段配置信息
     * @return {?} 筛选条件数组
     */
    SolutionService.prototype.convertToQueryConditions = /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param {?} fields 字段配置信息
     * @return {?} 筛选条件数组
     */
    function (fields) {
        var _this = this;
        /** @type {?} */
        var queryCondition;
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            queryCondition = new QueryCondition();
            queryCondition.id = field.id;
            queryCondition.fieldCode = field.labelCode;
            // queryCondition.code = field.code; 无用属性
            queryCondition.fieldName = field.name;
            queryCondition.valueType = ValueType.Value;
            queryCondition.placeHolder = field.placeHolder;
            queryCondition.beginPlaceHolder = field.hasOwnProperty('beginPlaceHolder') ? field.beginPlaceHolder : '';
            queryCondition.endPlaceHolder = field.hasOwnProperty('endPlaceHolder') ? field.endPlaceHolder : '';
            var _a = _this.getControlAndValue(field), control = _a.control, value = _a.value;
            queryCondition.control = control;
            queryCondition.value = value;
            return queryCondition;
        }));
    };
    /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param field 字段配置信息
     * @returns 筛选条件的control对象和value对象
     */
    /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param {?} field 字段配置信息
     * @return {?} 筛选条件的control对象和value对象
     */
    SolutionService.prototype.getControlAndValue = /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param {?} field 字段配置信息
     * @return {?} 筛选条件的control对象和value对象
     */
    function (field) {
        /** @type {?} */
        var controlData = field.control;
        /** @type {?} */
        var valueData = field.value;
        /** @type {?} */
        var control;
        /** @type {?} */
        var value;
        switch (controlData.controltype) {
            case 'text':
                control = new TextControl();
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //plain string
                value = new TextValue({ value: valueData });
                break;
            case 'input-group':
                control = new InputGroupControl();
                control.className = controlData.className;
                control.require = controlData.require;
                control.editable = controlData.editable;
                control.groupText = controlData.groupText;
                control.usageMode = controlData.usageMode;
                control.dialogOptions = this.setInputGroupDialog(field);
                control.click = controlData.click;
                value = new InputGroupValue(valueData);
                break;
            case 'date':
                control = new DateRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.weekSelect = controlData.weekSelect;
                control.showWeekNumbers = controlData.showWeekNumbers;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'date-time':
                control = new DateTimeRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                // control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //control.weekSelect = controlData.weekSelect;
                //control.showWeekNumbers = controlData.showWeekNumbers;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'month':
                control = new MonthRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                value = new MonthRangeValue(valueData);
                break;
            case 'number':
                control = new NumberRangeControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.require = controlData.require;
                control.precision = controlData.precision;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startValue: valueData.startValue, endValue: valueData.endValue}
                value = new NumberRangeValue(valueData);
                break;
            case 'dropdown':
                control = new DropDownListControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.multiSelect = controlData.multiSelect;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                //{value: [enumValues], key: 以，号分割的字符串})
                value = new DropDownListValue(valueData);
                break;
            case 'help':
                control = new SmartHelpContol();
                control.uri = controlData.uri;
                control.textField = controlData.textField;
                control.valueField = controlData.valueField;
                control.displayType = controlData.displayType;
                control.idField = controlData.idField;
                control.mapFields = controlData.mapFields;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.context = controlData.context;
                control.className = controlData.className;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.singleSelect = controlData.singleSelect;
                control.expandLevel = controlData.expandLevel;
                control.enableCascade = controlData.enableCascade;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.nosearch = controlData.nosearch;
                control.displayFields = controlData.displayFields;
                control.displayTextSeparator = controlData.displayTextSeparator;
                control.editable = controlData.editable;
                control.clearFields = controlData.clearFields;
                control.clear = controlData.clear;
                control.dialogTitle = controlData.dialogTitle;
                control.panelHeight = controlData.panelHeight;
                control.panelWidth = controlData.panelWidth;
                if (controlData.hasOwnProperty('pageSize')) {
                    control.pageSize = controlData.pageSize;
                }
                if (controlData.hasOwnProperty('pageList')) {
                    control.pageList = controlData.pageList;
                }
                //{value: [{}], valueField: string, textValue: string}
                value = new SmartHelpValue(valueData);
                break;
            case 'combolist-help':
                control = new ComboLookUpControl();
                control.uri = controlData.uri;
                control.idField = controlData.idField;
                control.valueField = controlData.valueField;
                control.textField = controlData.textField;
                control.mapFields = controlData.mapFields;
                control.displayType = this.displayTypeTransform(controlData.displayType);
                control.singleSelect = controlData.singleSelect;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.expandLevel = controlData.expandLevel;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelWidth = controlData.panelWidth;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                //{value: [{}], valueField: string, textValue: string}
                value = new ComboLookUpValue(valueData);
                break;
            case 'single-date':
                control = new SingleDateControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //plain string
                value = new SingleDateValue(valueData);
                break;
            case 'single-date-time':
                control = new SingleDateTimeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                value = new SingleDateTimeValue(valueData);
                break;
            case 'single-number':
                control = new SingleNumberControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.precision = controlData.precision;
                control.require = controlData.require;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //{numValue: xxxx}
                value = new SingleNumberValue(valueData);
                break;
            case 'single-year':
                control = new SingleYearControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.maxDate = controlData.maxDate;
                control.minDate = controlData.minDate;
                //yearValue : plain string
                value = new SingleYearValue(valueData);
                break;
            case 'single-month':
                control = new SingleMonthControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                value = new SingleMonthValue(valueData);
                break;
            case 'bool-check':
                control = new CheckBoxControl();
                control.className = controlData.className;
                control.data = [{ value: "true", name: field.name }];
                control.horizontal = controlData.horizontal;
                control.disable = controlData.disable;
                control.isStringValue = false;
                control.require = controlData.require;
                //[true] or [false]
                value = new CheckBoxValue(valueData);
                break;
            case 'radio':
                control = new RadioControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.className = controlData.className;
                control.showLabel = controlData.showLabel;
                control.horizontal = controlData.horizontal;
                control.disabled = controlData.disabled;
                control.require = controlData.require;
                value = new RadioValue(valueData);
                break;
        }
        return { control: control, value: value };
    };
    /**
     * @return {?}
     */
    SolutionService.prototype.getGuid = /**
     * @return {?}
     */
    function () {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    };
    /**
     * @private
     * @return {?}
     */
    SolutionService.prototype.s4 = /**
     * @private
     * @return {?}
     */
    function () {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    SolutionService.prototype.showInfo = /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    function (message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    };
    /**
    * 根据字段获取Lable控件的Title
    * @param field
    */
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    SolutionService.prototype.getConditionItemTitle = /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    };
    /**
     * 加载筛选方案时赋默认值
     * @param solution 需要赋默认值的筛选方案
     * @param fieldConfigs 默认值设置
     * @param readonly 是否只读
     * @returns 已赋默认值的筛选方案
     */
    /**
     * 加载筛选方案时赋默认值
     * @param {?} solution 需要赋默认值的筛选方案
     * @param {?} fieldConfigs 默认值设置
     * @param {?} readonly 是否只读
     * @return {?} 已赋默认值的筛选方案
     */
    SolutionService.prototype.setValues = /**
     * 加载筛选方案时赋默认值
     * @param {?} solution 需要赋默认值的筛选方案
     * @param {?} fieldConfigs 默认值设置
     * @param {?} readonly 是否只读
     * @return {?} 已赋默认值的筛选方案
     */
    function (solution, fieldConfigs, readonly) {
        var _this = this;
        /** @type {?} */
        var qc;
        /** @type {?} */
        var conditions = solution.queryConditions ? solution.queryConditions : [];
        /** @type {?} */
        var controlType;
        fieldConfigs.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            qc = conditions.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.fieldCode == field.labelCode; }));
            //qc.control并不是controlData
            if (qc && qc.control && qc.value) {
                controlType = _this.controlTypeMap.get(qc.control.getControlType());
                field.control = { controltype: controlType };
                var _a = _this.getControlAndValue(field), control = _a.control, value = _a.value;
                qc.value = _this.isNumCheck(qc, value, field);
                qc.readonly = readonly;
            }
        }));
        return solution;
    };
    /**
     *
     * @param solution 需要更新配置的筛选方案
     * @param fieldConfigs 更新配置
     * @returns 已更新配置的筛选方案
     */
    /**
     *
     * @param {?} conditions
     * @param {?} fieldConfigs 更新配置
     * @return {?} 已更新配置的筛选方案
     */
    SolutionService.prototype.updateControl = /**
     *
     * @param {?} conditions
     * @param {?} fieldConfigs 更新配置
     * @return {?} 已更新配置的筛选方案
     */
    function (conditions, fieldConfigs) {
        /** @type {?} */
        var qc;
        conditions = conditions ? conditions : [];
        if (conditions.length > 0) {
            fieldConfigs.forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.fieldCode == field.labelCode; }));
                if (qc && qc.control) {
                    for (var prop in field.control) {
                        qc.control[prop] = field.control[prop];
                    }
                }
            }));
        }
        // let qc: QueryCondition;
        // const conditions = solution.queryConditions ? solution.queryConditions : [];
        // if (conditions.length > 0) {
        //   fieldConfigs.forEach(field => {
        //     qc = conditions.find(c => c.fieldCode == field.labelCode);
        //     if (qc && qc.control) {
        //       for (var prop in field.control) {
        //         qc.control[prop] = field.control[prop]
        //       }
        //     }
        //   });
        // }
    };
    /**
     * 必填控件非空判断
     * @param conditions 进行筛选操作时当前所有的筛选条件
     */
    /**
     * 必填控件非空判断
     * @param {?} conditions 进行筛选操作时当前所有的筛选条件
     * @return {?}
     */
    SolutionService.prototype.isValid = /**
     * 必填控件非空判断
     * @param {?} conditions 进行筛选操作时当前所有的筛选条件
     * @return {?}
     */
    function (conditions) {
        /** @type {?} */
        var qc;
        /** @type {?} */
        var errorArr = conditions.map((/**
         * @param {?} qc
         * @return {?}
         */
        function (qc) {
            if (qc.control.isRequired() && qc.value.isEmpty())
                return {
                    type: 'require',
                    field: qc.fieldName
                };
        }));
        return errorArr.filter((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error != null; }));
    };
    /**
     * 解决数值控件placeholder显示为undefined的问题
     * @param s 数值控件JSON描述中的placeholder配置信息
     */
    /**
     * 解决数值控件placeholder显示为undefined的问题
     * @private
     * @param {?} data
     * @return {?}
     */
    SolutionService.prototype.emptyString = /**
     * 解决数值控件placeholder显示为undefined的问题
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data === null || data === undefined) {
            return '';
        }
        return data;
    };
    /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @param data 下拉帮助控件JSON描述中的displayType配置信息
     */
    /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @private
     * @param {?} data 下拉帮助控件JSON描述中的displayType配置信息
     * @return {?}
     */
    SolutionService.prototype.displayTypeTransform = /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @private
     * @param {?} data 下拉帮助控件JSON描述中的displayType配置信息
     * @return {?}
     */
    function (data) {
        if (data === 'List') {
            return 'LOOKUPLIST';
        }
        return 'LOOKUPTREELIST';
    };
    /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @param condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param value 默认值配置value对象
     * @param field 默认值配置
     * @returns 校验最大值和最小值之后的默认值配置value对象
     */
    /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @private
     * @param {?} condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param {?} value 默认值配置value对象
     * @param {?} field 默认值配置
     * @return {?} 校验最大值和最小值之后的默认值配置value对象
     */
    SolutionService.prototype.isNumCheck = /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @private
     * @param {?} condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param {?} value 默认值配置value对象
     * @param {?} field 默认值配置
     * @return {?} 校验最大值和最小值之后的默认值配置value对象
     */
    function (condition, value, field) {
        /** @type {?} */
        var minValue;
        /** @type {?} */
        var maxValue;
        if (field.control.controltype == 'single-number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.numValue = ((value.numValue - minValue) > 0) ? value.numValue : minValue;
            value.numValue = ((value.numValue - maxValue) < 0) ? value.numValue : maxValue;
        }
        if (field.control.controltype == 'number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.startValue = ((value.startValue - minValue) > 0) ? value.startValue : minValue;
            value.startValue = ((value.startValue - maxValue) < 0) ? value.startValue : maxValue;
            value.endValue = ((value.endValue - minValue) > 0) ? value.endValue : minValue;
            value.endValue = ((value.endValue - maxValue) < 0) ? value.endValue : maxValue;
        }
        return value;
    };
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @param field 配置为智能输入框控件的字段的JSON描述
     * @returns 弹窗参数
     */
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} field 配置为智能输入框控件的字段的JSON描述
     * @return {?} 弹窗参数
     */
    SolutionService.prototype.setInputGroupDialog = /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} field 配置为智能输入框控件的字段的JSON描述
     * @return {?} 弹窗参数
     */
    function (field) {
        /** @type {?} */
        var inputGroupControlData = field.control;
        /** @type {?} */
        var modalConfigData = inputGroupControlData.modalConfig;
        if (!field.id || inputGroupControlData.usageMode == 'text') {
            return undefined;
        }
        /** @type {?} */
        var dialogConfig = new DialogConfig();
        dialogConfig.modalId = field.id;
        if (modalConfigData.mapFields) {
            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '"'));
        }
        dialogConfig.showHeader = modalConfigData.hasOwnProperty('showHeader') ? modalConfigData.showHeader : true;
        dialogConfig.showCloseButton = modalConfigData.hasOwnProperty('showCloseButton') ? modalConfigData.showCloseButton : true;
        dialogConfig.showMaxButton = modalConfigData.hasOwnProperty('showMaxButton') ? modalConfigData.showMaxButton : true;
        dialogConfig.title = modalConfigData.hasOwnProperty('title') ? modalConfigData.title : '';
        dialogConfig.width = modalConfigData.width;
        dialogConfig.height = modalConfigData.height;
        return dialogConfig;
    };
    SolutionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SolutionService.ctorParameters = function () { return [
        { type: NotifyService }
    ]; };
    return SolutionService;
}());
export { SolutionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SolutionService.prototype.controlConfigState;
    /** @type {?} */
    SolutionService.prototype.controlTypeMap;
    /**
     * @type {?}
     * @private
     */
    SolutionService.prototype.notify;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBaUIsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDdEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMxRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUM3RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ25GLE9BQU8sRUFBRSxlQUFl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QyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BILFlBQVksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzFGLFlBQVksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQztRQUMzQyxZQUFZLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7UUFDN0MsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQzs7Z0JBcmdCRixVQUFVOzs7O2dCQXhDRixhQUFhOztJQThpQnRCLHNCQUFDO0NBQUEsQUF0Z0JELElBc2dCQztTQXJnQlksZUFBZTs7Ozs7O0lBRTFCLDZDQUEyRTs7SUFHM0UseUNBT0c7Ozs7O0lBUlMsaUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlLCBOb3RpZnlPcHRpb25zIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudGl0eS92YWx1ZXR5cGUnO1xyXG5pbXBvcnQgeyBUZXh0Q29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS90ZXh0L3RleHRjb250cm9sJztcclxuaW1wb3J0IHsgSW5wdXRHcm91cENvbnRyb2wsIERpYWxvZ0NvbmZpZyB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9pbnB1dC1ncm91cC9pbnB1dGdyb3VwY29udHJvbCc7XHJcbmltcG9ydCB7IFRleHRWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS90ZXh0dmFsdWUnO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VDb250cm9sIH0gZnJvbSAnLi4vZW50aXR5L2NvbnRyb2x0eXBlL2RhdGVyYW5nZS9kYXRlLXJhbmdlLmNvbnRyb2wnO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9kYXRlcmFuZ2V2YWx1ZSc7XHJcbmltcG9ydCB7IE51bWJlclJhbmdlQ29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9udW1iZXJyYW5nZS9udW1iZXJyYW5nZWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBOdW1iZXJSYW5nZVZhbHVlIH0gZnJvbSAnLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL251bWJlcnJhbmdldmF1ZSc7XHJcbmltcG9ydCB7IERyb3BEb3duTGlzdENvbnRyb2wgfSBmcm9tICcuLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2Ryb3Bkb3dubGlzdGNvbnRyb2wnO1xyXG5pbXBvcnQgeyBEcm9wRG93bkxpc3RWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9kcm9wZG93bmxpc3R2YWx1ZSc7XHJcbmltcG9ydCB7IFNtYXJ0SGVscENvbnRvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9zbWFydGhlbHAvc21hcnRoZWxwY29udHJvbCc7XHJcbmltcG9ydCB7IFNtYXJ0SGVscFZhbHVlIH0gZnJvbSAnLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3NtYXJ0aGVscHZhbHVlJztcclxuaW1wb3J0IHsgU2luZ2xlRGF0ZUNvbnRyb2wgfSBmcm9tICcuLi9lbnRpdHkvY29udHJvbHR5cGUvZGF0ZS9zaW5nbGUtZGF0ZS1jb250cm9sJztcclxuaW1wb3J0IHsgU2luZ2xlRGF0ZVZhbHVlIH0gZnJvbSAnLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3NpbmdsZS1kYXRlLXZhbHVlJztcclxuaW1wb3J0IHsgU2luZ2xlTnVtYmVyQ29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9udW1iZXIvc2luZ2xlLW51bWJlci1jb250cm9sJztcclxuaW1wb3J0IHsgU2luZ2xlTnVtYmVyVmFsdWUgfSBmcm9tICcuLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvc2luZ2xlLW51bWJlci12YWx1ZSc7XHJcbmltcG9ydCB7IFNpbmdsZVllYXJDb250cm9sIH0gZnJvbSAnLi4vZW50aXR5L2NvbnRyb2x0eXBlL3llYXIveWVhci1jb250cm9sJztcclxuaW1wb3J0IHsgU2luZ2xlWWVhclZhbHVlIH0gZnJvbSAnLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3NpbmdsZS15ZWFyLXZhbHVlJztcclxuaW1wb3J0IHsgU2luZ2xlTW9udGhDb250cm9sIH0gZnJvbSAnLi4vZW50aXR5L2NvbnRyb2x0eXBlL21vbnRoL21vbnRoLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBTaW5nbGVNb250aFZhbHVlIH0gZnJvbSAnLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3NpbmdsZS1tb250aC12YWx1ZSc7XHJcbmltcG9ydCB7IENoZWNrQm94Q29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9jaGVja2JveC9jaGVja2JveC1jb250cm9sJztcclxuaW1wb3J0IHsgQ2hlY2tCb3hWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9jaGVja2JveC12YWx1ZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lUmFuZ2VDb250cm9sIH0gZnJvbSAnLi4vZW50aXR5L2NvbnRyb2x0eXBlL2RhdGVyYW5nZS9kYXRlcnRpbWUtcmFuZ2UtY29udHJvbCc7XHJcbmltcG9ydCB7IE1vbnRoUmFuZ2VDb250cm9sIH0gZnJvbSAnLi4vZW50aXR5L2NvbnRyb2x0eXBlL21vbnRocmFuZ2UvbW9udGgtcmFuZ2UtY29udHJvbCc7XHJcbmltcG9ydCB7IE1vbnRoUmFuZ2VWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9tb250aC1yYW5nZS12YWx1ZSc7XHJcbmltcG9ydCB7IFNpbmdsZURhdGVUaW1lQ29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9kYXRlL3NpbmdsZS1kYXRlLXRpbWUtY29udHJvbCc7XHJcbmltcG9ydCB7IFNpbmdsZURhdGVUaW1lVmFsdWUgfSBmcm9tICcuLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvc2luZ2xlLWRhdGUtdGltZS12YWx1ZSc7XHJcbmltcG9ydCB7IENvbWJvTG9va1VwQ29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9jb21ib2xvb2t1cC9jb21ib2xvb2t1cC1jb250cm9sJztcclxuaW1wb3J0IHsgQ29tYm9Mb29rVXBWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9jb21ib2xvb2t1cC12YWx1ZSc7XHJcbmltcG9ydCB7IFJhZGlvQ29udHJvbCB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZS9yYWRpby9yYWRpby1jb250cm9sJztcclxuaW1wb3J0IHsgUmFkaW9WYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9yYWRpby12YWx1ZSc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBWYWx1ZSB9IGZyb20gJy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9pbnB1dGdyb3VwdmFsdWUnO1xyXG5pbXBvcnQgeyBRdWVyeVNvbHV0aW9uVm8gfSBmcm9tICcuLi9lbnRpdHkvcXVlcnlzb2x1dGlvbnZvJztcclxuaW1wb3J0IHsgRmllbGRDb25maWcgfSBmcm9tICcuLi9lbnRpdHkvZmllbGRjb25maWcvZmllbGRjb25maWcnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IFN1YmplY3QsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNvbHV0aW9uU2VydmljZSB7XHJcbiAgLy8g5qCH6K6w5Y+Y5pu0XHJcbiAgcHJpdmF0ZSBjb250cm9sQ29uZmlnU3RhdGU6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChbXSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlKSB7IH1cclxuICBjb250cm9sVHlwZU1hcDogTWFwPG51bWJlciwgc3RyaW5nPiA9IG5ldyBNYXAoW1xyXG4gICAgW0NvbnRyb2xUeXBlLlRleHQsICd0ZXh0J10sIFtDb250cm9sVHlwZS5Cb29sQ2hlY2ssICdib29sLWNoZWNrJ10sIFtDb250cm9sVHlwZS5EYXRlUmFuZ2UsICdkYXRlJ10sXHJcbiAgICBbQ29udHJvbFR5cGUuRGF0ZVRpbWVSYW5nZSwgJ2RhdGUtdGltZSddLCBbQ29udHJvbFR5cGUuTnVtYmVyUmFuZ2UsICdudW1iZXInXSwgW0NvbnRyb2xUeXBlLkRyb3BEb3duTGlzdCwgJ2Ryb3Bkb3duJ10sXHJcbiAgICBbQ29udHJvbFR5cGUuU21hcnRIZWxwLCAnaGVscCddLCBbQ29udHJvbFR5cGUuU2luZ2xlRGF0ZSwgJ3NpbmdsZS1kYXRlJ10sIFtDb250cm9sVHlwZS5TaW5nbGVOdW1iZXIsICdzaW5nbGUtbnVtYmVyJ10sXHJcbiAgICBbQ29udHJvbFR5cGUuU2luZ2xlWWVhciwgJ3NpbmdsZS15ZWFyJ10sIFtDb250cm9sVHlwZS5TaW5nbGVNb250aCwgJ3NpbmdsZS1tb250aCddLCBbQ29udHJvbFR5cGUuTW9udGhSYW5nZSwgJ21vbnRoJ10sXHJcbiAgICBbQ29udHJvbFR5cGUuU2luZ2xlRGF0ZVRpbWUsICdzaW5nbGUtZGF0ZS10aW1lJ10sIFtDb250cm9sVHlwZS5Db21ib0xvb2tVcCwgJ2NvbWJvbGlzdC1oZWxwJ10sIFtDb250cm9sVHlwZS5SYWRpbywgJ3JhZGlvJ10sXHJcbiAgICBbQ29udHJvbFR5cGUuSW5wdXRHcm91cCwgJ2lucHV0LWdyb3VwJ11cclxuICBdKTtcclxuICBnZXRDb250cm9sQ29uZmlnU3RhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sQ29uZmlnU3RhdGU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS8oOmAkui/h+adpeeahOaYr+W3sue7j+WkhOeQhui/h+eahOadoeS7tlxyXG4gICAqIEBwYXJhbSBzaW1wbGVDb25kaXRpb24gXHJcbiAgICovXHJcbiAgdXBkYXRlQ29udHJvbENvbmZpZ1N0YXRlKHNpbXBsZUNvbmRpdGlvbjogQXJyYXk8YW55Pikge1xyXG4gICAgdGhpcy5jb250cm9sQ29uZmlnU3RhdGUubmV4dChzaW1wbGVDb25kaXRpb24pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlj6rov5Tlm57lrZjlnKjnmoTlsZ7mgKdcclxuICAgKi9cclxuICBjb252ZXJ0VG9TaW1wbGVRdWVyeUNvbmRpdGlvbnMoZmllbGRzOiBBcnJheTxGaWVsZENvbmZpZz4pOiBBcnJheTxhbnk+IHtcclxuICAgIGxldCBzaW1wbGVRdWVyeUNvbmRpdGlvbiA9IHt9O1xyXG4gICAgaWYoZmllbGRzJiZmaWVsZHMubGVuZ3RoPT0wKXtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpZWxkcy5tYXAoZmllbGQgPT4ge1xyXG4gICAgICBzaW1wbGVRdWVyeUNvbmRpdGlvblsnZmllbGRDb2RlJ10gPSBmaWVsZC5sYWJlbENvZGU7XHJcbiAgICAgIHNpbXBsZVF1ZXJ5Q29uZGl0aW9uWydjb250cm9sJ10gPSB0aGlzLmdldFNpbXBsZUNvbnRyb2woZmllbGQpO1xyXG4gICAgICByZXR1cm4gc2ltcGxlUXVlcnlDb25kaXRpb247XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Y+q5aSE55CG6K6+572u55qE5bGe5oCnXHJcbiAgICogQHBhcmFtIGZpZWxkIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0U2ltcGxlQ29udHJvbChmaWVsZDogRmllbGRDb25maWcpIHtcclxuICAgIGNvbnN0IGNvbnRyb2xEYXRhID0gZmllbGQuY29udHJvbDtcclxuICAgIGxldCBzaW1wbGVDb250cm9sID0ge307XHJcbiAgICBsZXQgdENvbnRyb2xUeXBlPXRoaXMuY29udHJvbFR5cGVNYXAuZ2V0KGNvbnRyb2xEYXRhLmNvbnRyb2x0eXBlKVxyXG4gICAgc3dpdGNoICh0Q29udHJvbFR5cGUpIHtcclxuICAgICAgY2FzZSAnc2luZ2xlLXllYXInOlxyXG4gICAgICAgIHRoaXMudXBkYXRlU2ltcGxlQ29udHJvbChzaW1wbGVDb250cm9sLCBbJ21heERhdGUnLCAnbWluRGF0ZSddLCBjb250cm9sRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgc2ltcGxlQ29udHJvbCA9IHt9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNpbXBsZUNvbnRyb2w7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWPquWkhOeQhuaMh+WumuWxnuaAp1xyXG4gICAqIEBwYXJhbSByZXN1bHRPYmog5L+u5pS555qE5a+56LGhICB7dGVzdDAxOicnLHRlc3QwMTonJ31cclxuICAgKiBAcGFyYW0gc291cmNlUHJvcHMg5b6F6I635Y+W55qE5bGe5oCn5YiX6KGoIFsncHJvcDAxJywncHJvcDAyJ11cclxuICAgKiBAcGFyYW0gc291cmNlIOWPluWAvOadpea6kHtwcm9wMDE6JycscHJvcDAyOicnfVxyXG4gICAqIEBwYXJhbSBkaXN0UHJvcHMg55uu5qCH5bGe5oCn77yM5a+55bqU55qE6L+U5Zue5bGe5oCn5oyJ54Wn6K6+572uWydkaXN0MDEnLCcnXVxyXG4gICAqIEByZXR1cm4gXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVTaW1wbGVDb250cm9sKHJlc3VsdE9iaiwgc291cmNlUHJvcHMsIHNvdXJjZSwgZGlzdFByb3BzID0gW10pIHtcclxuICAgIGlmIChkaXN0UHJvcHMubGVuZ3RoID09IDApIHtcclxuICAgICAgZGlzdFByb3BzID0gc291cmNlUHJvcHM7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBtID0gMDsgbSA8IHNvdXJjZVByb3BzLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgIGlmICghZGlzdFByb3BzW21dKSB7XHJcbiAgICAgICAgZGlzdFByb3BzW21dID0gc291cmNlUHJvcHNbbV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgc291cmNlUHJvcHMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgaWYgKHNvdXJjZSAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkoc291cmNlUHJvcHNba10pKSB7XHJcbiAgICAgICAgcmVzdWx0T2JqW2Rpc3RQcm9wc1trXV0gPSBzb3VyY2Vbc291cmNlUHJvcHNba11dO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWwhuWtl+autemFjee9rkpTT07mj4/ov7Dkv6Hmga/ovazmjaLkuLrnrZvpgInmnaHku7ZcclxuICAgKiBAcGFyYW0gZmllbGRzIOWtl+autemFjee9ruS/oeaBr1xyXG4gICAqIEByZXR1cm5zIOetm+mAieadoeS7tuaVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb252ZXJ0VG9RdWVyeUNvbmRpdGlvbnMoZmllbGRzOiBBcnJheTxGaWVsZENvbmZpZz4pOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4ge1xyXG4gICAgbGV0IHF1ZXJ5Q29uZGl0aW9uOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIHJldHVybiBmaWVsZHMubWFwKGZpZWxkID0+IHtcclxuICAgICAgcXVlcnlDb25kaXRpb24gPSBuZXcgUXVlcnlDb25kaXRpb24oKTtcclxuICAgICAgcXVlcnlDb25kaXRpb24uaWQgPSBmaWVsZC5pZDtcclxuICAgICAgcXVlcnlDb25kaXRpb24uZmllbGRDb2RlID0gZmllbGQubGFiZWxDb2RlO1xyXG4gICAgICAvLyBxdWVyeUNvbmRpdGlvbi5jb2RlID0gZmllbGQuY29kZTsg5peg55So5bGe5oCnXHJcbiAgICAgIHF1ZXJ5Q29uZGl0aW9uLmZpZWxkTmFtZSA9IGZpZWxkLm5hbWU7XHJcbiAgICAgIHF1ZXJ5Q29uZGl0aW9uLnZhbHVlVHlwZSA9IFZhbHVlVHlwZS5WYWx1ZTtcclxuICAgICAgcXVlcnlDb25kaXRpb24ucGxhY2VIb2xkZXIgPSBmaWVsZC5wbGFjZUhvbGRlcjtcclxuICAgICAgcXVlcnlDb25kaXRpb24uYmVnaW5QbGFjZUhvbGRlcj1maWVsZC5oYXNPd25Qcm9wZXJ0eSgnYmVnaW5QbGFjZUhvbGRlcicpP2ZpZWxkLmJlZ2luUGxhY2VIb2xkZXI6Jyc7XHJcbiAgICAgIHF1ZXJ5Q29uZGl0aW9uLmVuZFBsYWNlSG9sZGVyPWZpZWxkLmhhc093blByb3BlcnR5KCdlbmRQbGFjZUhvbGRlcicpP2ZpZWxkLmVuZFBsYWNlSG9sZGVyOicnOyAgICAgIFxyXG4gICAgICBsZXQgeyBjb250cm9sLCB2YWx1ZSB9ID0gdGhpcy5nZXRDb250cm9sQW5kVmFsdWUoZmllbGQpO1xyXG4gICAgICBxdWVyeUNvbmRpdGlvbi5jb250cm9sID0gY29udHJvbDtcclxuICAgICAgcXVlcnlDb25kaXRpb24udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgcmV0dXJuIHF1ZXJ5Q29uZGl0aW9uO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNruaOp+S7tuexu+Wei+WIhuWIq+WIm+W7uuetm+mAieadoeS7tueahGNvbnRyb2zlr7nosaHlkox2YWx1ZeWvueixoVxyXG4gICAqIEBwYXJhbSBmaWVsZCDlrZfmrrXphY3nva7kv6Hmga9cclxuICAgKiBAcmV0dXJucyDnrZvpgInmnaHku7bnmoRjb250cm9s5a+56LGh5ZKMdmFsdWXlr7nosaFcclxuICAgKi9cclxuICBnZXRDb250cm9sQW5kVmFsdWUoZmllbGQ6IEZpZWxkQ29uZmlnKSB7XHJcbiAgICBjb25zdCBjb250cm9sRGF0YSA9IGZpZWxkLmNvbnRyb2w7XHJcbiAgICBjb25zdCB2YWx1ZURhdGEgPSBmaWVsZC52YWx1ZTtcclxuICAgIGxldCBjb250cm9sLCB2YWx1ZTogYW55O1xyXG4gICAgc3dpdGNoIChjb250cm9sRGF0YS5jb250cm9sdHlwZSkge1xyXG4gICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICBjb250cm9sID0gbmV3IFRleHRDb250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC5jbGFzc05hbWUgPSBjb250cm9sRGF0YS5jbGFzc05hbWU7XHJcbiAgICAgICAgY29udHJvbC5wbGFjZWhvbGRlciA9IGNvbnRyb2xEYXRhLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgLy9wbGFpbiBzdHJpbmdcclxuICAgICAgICB2YWx1ZSA9IG5ldyBUZXh0VmFsdWUoeyB2YWx1ZTogdmFsdWVEYXRhIH0pO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdpbnB1dC1ncm91cCc6XHJcbiAgICAgICAgY29udHJvbCA9IG5ldyBJbnB1dEdyb3VwQ29udHJvbCgpO1xyXG4gICAgICAgIGNvbnRyb2wuY2xhc3NOYW1lID0gY29udHJvbERhdGEuY2xhc3NOYW1lO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgY29udHJvbC5lZGl0YWJsZSA9IGNvbnRyb2xEYXRhLmVkaXRhYmxlO1xyXG4gICAgICAgIGNvbnRyb2wuZ3JvdXBUZXh0ID0gY29udHJvbERhdGEuZ3JvdXBUZXh0O1xyXG4gICAgICAgIGNvbnRyb2wudXNhZ2VNb2RlID0gY29udHJvbERhdGEudXNhZ2VNb2RlO1xyXG4gICAgICAgIGNvbnRyb2wuZGlhbG9nT3B0aW9ucyA9IHRoaXMuc2V0SW5wdXRHcm91cERpYWxvZyhmaWVsZCk7XHJcbiAgICAgICAgY29udHJvbC5jbGljayA9IGNvbnRyb2xEYXRhLmNsaWNrO1xyXG4gICAgICAgIHZhbHVlID0gbmV3IElucHV0R3JvdXBWYWx1ZSh2YWx1ZURhdGEpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdkYXRlJzpcclxuICAgICAgICBjb250cm9sID0gbmV3IERhdGVSYW5nZUNvbnRyb2woKTtcclxuICAgICAgICBjb250cm9sLmZvcm1hdCA9IGNvbnRyb2xEYXRhLmZvcm1hdDtcclxuICAgICAgICBjb250cm9sLnJldHVybkZvcm1hdD1jb250cm9sRGF0YS5yZXR1cm5Gb3JtYXQ7XHJcbiAgICAgICAgY29udHJvbC5jbGFzc05hbWUgPSBjb250cm9sRGF0YS5jbGFzc05hbWU7XHJcbiAgICAgICAgY29udHJvbC5wbGFjZWhvbGRlciA9IGNvbnRyb2xEYXRhLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgY29udHJvbC53ZWVrU2VsZWN0ID0gY29udHJvbERhdGEud2Vla1NlbGVjdDtcclxuICAgICAgICBjb250cm9sLnNob3dXZWVrTnVtYmVycyA9IGNvbnRyb2xEYXRhLnNob3dXZWVrTnVtYmVycztcclxuICAgICAgICAvL2NvbnRyb2wuYmVnaW5QbGFjZUhvbGRlcj1jb250cm9sRGF0YS5iZWdpblBsYWNlSG9sZGVyO1xyXG4gICAgICAgIC8vY29udHJvbC5lbmRQbGFjZUhvbGRlcj1jb250cm9sRGF0YS5lbmRQbGFjZUhvbGRlcjtcclxuICAgICAgICAvL3tzdGFydFRpbWU6IHZhbHVlRGF0YS5zdGFydFRpbWUsIGVuZFRpbWU6IHZhbHVlRGF0YS5lbmRUaW1lfVxyXG4gICAgICAgIHZhbHVlID0gbmV3IERhdGVSYW5nZVZhbHVlKHZhbHVlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2RhdGUtdGltZSc6XHJcbiAgICAgICAgY29udHJvbCA9IG5ldyBEYXRlVGltZVJhbmdlQ29udHJvbCgpO1xyXG4gICAgICAgIGNvbnRyb2wuZm9ybWF0ID0gY29udHJvbERhdGEuZm9ybWF0O1xyXG4gICAgICAgIGNvbnRyb2wucmV0dXJuRm9ybWF0PWNvbnRyb2xEYXRhLnJldHVybkZvcm1hdDtcclxuICAgICAgICBjb250cm9sLmNsYXNzTmFtZSA9IGNvbnRyb2xEYXRhLmNsYXNzTmFtZTtcclxuICAgICAgICBjb250cm9sLnBsYWNlaG9sZGVyID0gY29udHJvbERhdGEucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgY29udHJvbC5yZXF1aXJlID0gY29udHJvbERhdGEucmVxdWlyZTtcclxuICAgICAgICBjb250cm9sLmVuYWJsZUN1c3RvbUZvcm1hdD1jb250cm9sRGF0YS5lbmFibGVDdXN0b21Gb3JtYXQ7ICAgICAgICBcclxuICAgICAgIC8vIGNvbnRyb2wuYmVnaW5QbGFjZUhvbGRlcj1jb250cm9sRGF0YS5iZWdpblBsYWNlSG9sZGVyO1xyXG4gICAgICAgIC8vY29udHJvbC5lbmRQbGFjZUhvbGRlcj1jb250cm9sRGF0YS5lbmRQbGFjZUhvbGRlcjtcclxuICAgICAgICAvL2NvbnRyb2wud2Vla1NlbGVjdCA9IGNvbnRyb2xEYXRhLndlZWtTZWxlY3Q7XHJcbiAgICAgICAgLy9jb250cm9sLnNob3dXZWVrTnVtYmVycyA9IGNvbnRyb2xEYXRhLnNob3dXZWVrTnVtYmVycztcclxuICAgICAgICAvL3tzdGFydFRpbWU6IHZhbHVlRGF0YS5zdGFydFRpbWUsIGVuZFRpbWU6IHZhbHVlRGF0YS5lbmRUaW1lfVxyXG4gICAgICAgIHZhbHVlID0gbmV3IERhdGVSYW5nZVZhbHVlKHZhbHVlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ21vbnRoJzpcclxuICAgICAgICBjb250cm9sID0gbmV3IE1vbnRoUmFuZ2VDb250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC5mb3JtYXQgPSBjb250cm9sRGF0YS5mb3JtYXQ7XHJcbiAgICAgICAgY29udHJvbC5yZXR1cm5Gb3JtYXQ9Y29udHJvbERhdGEucmV0dXJuRm9ybWF0O1xyXG4gICAgICAgIGNvbnRyb2wuY2xhc3NOYW1lID0gY29udHJvbERhdGEuY2xhc3NOYW1lO1xyXG4gICAgICAgIGNvbnRyb2wucGxhY2Vob2xkZXIgPSBjb250cm9sRGF0YS5wbGFjZWhvbGRlcjtcclxuICAgICAgICBjb250cm9sLnJlcXVpcmUgPSBjb250cm9sRGF0YS5yZXF1aXJlOyAgICAgIFxyXG4gICAgICAgIC8vY29udHJvbC5iZWdpblBsYWNlSG9sZGVyPWNvbnRyb2xEYXRhLmJlZ2luUGxhY2VIb2xkZXI7XHJcbiAgICAgICAgLy9jb250cm9sLmVuZFBsYWNlSG9sZGVyPWNvbnRyb2xEYXRhLmVuZFBsYWNlSG9sZGVyO1xyXG4gICAgICAgIHZhbHVlID0gbmV3IE1vbnRoUmFuZ2VWYWx1ZSh2YWx1ZURhdGEpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdudW1iZXInOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgTnVtYmVyUmFuZ2VDb250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC5jbGFzc05hbWUgPSBjb250cm9sRGF0YS5jbGFzc05hbWU7XHJcbiAgICAgICAgY29udHJvbC5wbGFjZWhvbGRlciA9IHRoaXMuZW1wdHlTdHJpbmcoY29udHJvbERhdGEucGxhY2Vob2xkZXIpO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgY29udHJvbC5wcmVjaXNpb24gPSBjb250cm9sRGF0YS5wcmVjaXNpb247XHJcbiAgICAgICAgY29udHJvbC50ZXh0QWxpZ24gPSBjb250cm9sRGF0YS50ZXh0QWxpZ247XHJcbiAgICAgICAgY29udHJvbC5iaWdOdW1iZXIgPSBjb250cm9sRGF0YS5pc0JpZ051bWJlcjtcclxuICAgICAgICBjb250cm9sLm1pbiA9IGNvbnRyb2xEYXRhLm1pblZhbHVlO1xyXG4gICAgICAgIGNvbnRyb2wubWF4ID0gY29udHJvbERhdGEubWF4VmFsdWU7ICAgICAgICBcclxuICAgICAgICAvL2NvbnRyb2wuYmVnaW5QbGFjZUhvbGRlcj1jb250cm9sRGF0YS5iZWdpblBsYWNlSG9sZGVyO1xyXG4gICAgICAgIC8vY29udHJvbC5lbmRQbGFjZUhvbGRlcj1jb250cm9sRGF0YS5lbmRQbGFjZUhvbGRlcjtcclxuICAgICAgICAvL3tzdGFydFZhbHVlOiB2YWx1ZURhdGEuc3RhcnRWYWx1ZSwgZW5kVmFsdWU6IHZhbHVlRGF0YS5lbmRWYWx1ZX1cclxuICAgICAgICB2YWx1ZSA9IG5ldyBOdW1iZXJSYW5nZVZhbHVlKHZhbHVlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2Ryb3Bkb3duJzpcclxuICAgICAgICBjb250cm9sID0gbmV3IERyb3BEb3duTGlzdENvbnRyb2woKTtcclxuICAgICAgICBjb250cm9sLnZhbHVlVHlwZSA9IGNvbnRyb2xEYXRhLnZhbHVlVHlwZTtcclxuICAgICAgICBjb250cm9sLmVudW1WYWx1ZXMgPSBjb250cm9sRGF0YS5lbnVtVmFsdWVzO1xyXG4gICAgICAgIGNvbnRyb2wubXVsdGlTZWxlY3QgPSBjb250cm9sRGF0YS5tdWx0aVNlbGVjdDtcclxuICAgICAgICBjb250cm9sLmNsYXNzTmFtZSA9IGNvbnRyb2xEYXRhLmNsYXNzTmFtZTtcclxuICAgICAgICBjb250cm9sLnBsYWNlaG9sZGVyID0gY29udHJvbERhdGEucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgY29udHJvbC5wYW5lbEhlaWdodCA9IGNvbnRyb2xEYXRhLnBhbmVsSGVpZ2h0O1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgLy97dmFsdWU6IFtlbnVtVmFsdWVzXSwga2V5OiDku6XvvIzlj7fliIblibLnmoTlrZfnrKbkuLJ9KVxyXG4gICAgICAgIHZhbHVlID0gbmV3IERyb3BEb3duTGlzdFZhbHVlKHZhbHVlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2hlbHAnOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgU21hcnRIZWxwQ29udG9sKCk7XHJcbiAgICAgICAgY29udHJvbC51cmkgPSBjb250cm9sRGF0YS51cmk7XHJcbiAgICAgICAgY29udHJvbC50ZXh0RmllbGQgPSBjb250cm9sRGF0YS50ZXh0RmllbGQ7XHJcbiAgICAgICAgY29udHJvbC52YWx1ZUZpZWxkID0gY29udHJvbERhdGEudmFsdWVGaWVsZDtcclxuICAgICAgICBjb250cm9sLmRpc3BsYXlUeXBlID0gY29udHJvbERhdGEuZGlzcGxheVR5cGU7XHJcbiAgICAgICAgY29udHJvbC5pZEZpZWxkID0gY29udHJvbERhdGEuaWRGaWVsZDtcclxuICAgICAgICBjb250cm9sLm1hcEZpZWxkcyA9IGNvbnRyb2xEYXRhLm1hcEZpZWxkcztcclxuICAgICAgICBjb250cm9sLnByZUV2ZW50Q21kID0gY29udHJvbERhdGEucHJlRXZlbnRDbWQ7XHJcbiAgICAgICAgY29udHJvbC5wb3N0RXZlbnRDbWQgPSBjb250cm9sRGF0YS5wb3N0RXZlbnRDbWQ7XHJcbiAgICAgICAgY29udHJvbC5jb250ZXh0ID0gY29udHJvbERhdGEuY29udGV4dDtcclxuICAgICAgICBjb250cm9sLmNsYXNzTmFtZSA9IGNvbnRyb2xEYXRhLmNsYXNzTmFtZTtcclxuICAgICAgICBjb250cm9sLmVuYWJsZUZ1bGxUcmVlID0gY29udHJvbERhdGEuZW5hYmxlRnVsbFRyZWU7XHJcbiAgICAgICAgY29udHJvbC5sb2FkVHJlZURhdGFUeXBlID0gY29udHJvbERhdGEubG9hZFRyZWVEYXRhVHlwZTtcclxuICAgICAgICBjb250cm9sLnNpbmdsZVNlbGVjdCA9IGNvbnRyb2xEYXRhLnNpbmdsZVNlbGVjdDtcclxuICAgICAgICBjb250cm9sLmV4cGFuZExldmVsID0gY29udHJvbERhdGEuZXhwYW5kTGV2ZWw7XHJcbiAgICAgICAgY29udHJvbC5lbmFibGVDYXNjYWRlID0gY29udHJvbERhdGEuZW5hYmxlQ2FzY2FkZTtcclxuICAgICAgICBjb250cm9sLnBsYWNlaG9sZGVyID0gY29udHJvbERhdGEucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgY29udHJvbC5yZXF1aXJlID0gY29udHJvbERhdGEucmVxdWlyZTtcclxuICAgICAgICBjb250cm9sLm5vc2VhcmNoID0gY29udHJvbERhdGEubm9zZWFyY2g7XHJcbiAgICAgICAgY29udHJvbC5kaXNwbGF5RmllbGRzID0gY29udHJvbERhdGEuZGlzcGxheUZpZWxkcztcclxuICAgICAgICBjb250cm9sLmRpc3BsYXlUZXh0U2VwYXJhdG9yID0gY29udHJvbERhdGEuZGlzcGxheVRleHRTZXBhcmF0b3I7XHJcbiAgICAgICAgY29udHJvbC5lZGl0YWJsZSA9IGNvbnRyb2xEYXRhLmVkaXRhYmxlO1xyXG4gICAgICAgIGNvbnRyb2wuY2xlYXJGaWVsZHMgPSBjb250cm9sRGF0YS5jbGVhckZpZWxkcztcclxuICAgICAgICBjb250cm9sLmNsZWFyID0gY29udHJvbERhdGEuY2xlYXI7XHJcbiAgICAgICAgY29udHJvbC5kaWFsb2dUaXRsZSA9IGNvbnRyb2xEYXRhLmRpYWxvZ1RpdGxlO1xyXG4gICAgICAgIGNvbnRyb2wucGFuZWxIZWlnaHQgPSBjb250cm9sRGF0YS5wYW5lbEhlaWdodDtcclxuICAgICAgICBjb250cm9sLnBhbmVsV2lkdGggPSBjb250cm9sRGF0YS5wYW5lbFdpZHRoO1xyXG4gICAgICAgIGlmIChjb250cm9sRGF0YS5oYXNPd25Qcm9wZXJ0eSgncGFnZVNpemUnKSkge1xyXG4gICAgICAgICAgY29udHJvbC5wYWdlU2l6ZSA9IGNvbnRyb2xEYXRhLnBhZ2VTaXplO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29udHJvbERhdGEuaGFzT3duUHJvcGVydHkoJ3BhZ2VMaXN0JykpIHtcclxuICAgICAgICAgIGNvbnRyb2wucGFnZUxpc3QgPSBjb250cm9sRGF0YS5wYWdlTGlzdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy97dmFsdWU6IFt7fV0sIHZhbHVlRmllbGQ6IHN0cmluZywgdGV4dFZhbHVlOiBzdHJpbmd9XHJcbiAgICAgICAgdmFsdWUgPSBuZXcgU21hcnRIZWxwVmFsdWUodmFsdWVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnY29tYm9saXN0LWhlbHAnOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgQ29tYm9Mb29rVXBDb250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC51cmkgPSBjb250cm9sRGF0YS51cmk7XHJcbiAgICAgICAgY29udHJvbC5pZEZpZWxkID0gY29udHJvbERhdGEuaWRGaWVsZDtcclxuICAgICAgICBjb250cm9sLnZhbHVlRmllbGQgPSBjb250cm9sRGF0YS52YWx1ZUZpZWxkO1xyXG4gICAgICAgIGNvbnRyb2wudGV4dEZpZWxkID0gY29udHJvbERhdGEudGV4dEZpZWxkO1xyXG4gICAgICAgIGNvbnRyb2wubWFwRmllbGRzID0gY29udHJvbERhdGEubWFwRmllbGRzO1xyXG4gICAgICAgIGNvbnRyb2wuZGlzcGxheVR5cGUgPSB0aGlzLmRpc3BsYXlUeXBlVHJhbnNmb3JtKGNvbnRyb2xEYXRhLmRpc3BsYXlUeXBlKTtcclxuICAgICAgICBjb250cm9sLnNpbmdsZVNlbGVjdCA9IGNvbnRyb2xEYXRhLnNpbmdsZVNlbGVjdDtcclxuICAgICAgICBjb250cm9sLnByZUV2ZW50Q21kID0gY29udHJvbERhdGEucHJlRXZlbnRDbWQ7XHJcbiAgICAgICAgY29udHJvbC5wb3N0RXZlbnRDbWQgPSBjb250cm9sRGF0YS5wb3N0RXZlbnRDbWQ7XHJcbiAgICAgICAgY29udHJvbC5lbmFibGVGdWxsVHJlZSA9IGNvbnRyb2xEYXRhLmVuYWJsZUZ1bGxUcmVlO1xyXG4gICAgICAgIGNvbnRyb2wubG9hZFRyZWVEYXRhVHlwZSA9IGNvbnRyb2xEYXRhLmxvYWRUcmVlRGF0YVR5cGU7XHJcbiAgICAgICAgY29udHJvbC5leHBhbmRMZXZlbCA9IGNvbnRyb2xEYXRhLmV4cGFuZExldmVsO1xyXG4gICAgICAgIGNvbnRyb2wuY2xhc3NOYW1lID0gY29udHJvbERhdGEuY2xhc3NOYW1lO1xyXG4gICAgICAgIGNvbnRyb2wucGxhY2Vob2xkZXIgPSBjb250cm9sRGF0YS5wbGFjZWhvbGRlcjtcclxuICAgICAgICBjb250cm9sLnBhbmVsV2lkdGggPSBjb250cm9sRGF0YS5wYW5lbFdpZHRoO1xyXG4gICAgICAgIGNvbnRyb2wucGFuZWxIZWlnaHQgPSBjb250cm9sRGF0YS5wYW5lbEhlaWdodDtcclxuICAgICAgICBjb250cm9sLnJlcXVpcmUgPSBjb250cm9sRGF0YS5yZXF1aXJlO1xyXG4gICAgICAgIC8ve3ZhbHVlOiBbe31dLCB2YWx1ZUZpZWxkOiBzdHJpbmcsIHRleHRWYWx1ZTogc3RyaW5nfVxyXG4gICAgICAgIHZhbHVlID0gbmV3IENvbWJvTG9va1VwVmFsdWUodmFsdWVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnc2luZ2xlLWRhdGUnOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgU2luZ2xlRGF0ZUNvbnRyb2woKTtcclxuICAgICAgICBjb250cm9sLmZvcm1hdCA9IGNvbnRyb2xEYXRhLmZvcm1hdDtcclxuICAgICAgICBjb250cm9sLnJldHVybkZvcm1hdD1jb250cm9sRGF0YS5yZXR1cm5Gb3JtYXQ7XHJcbiAgICAgICAgY29udHJvbC5jbGFzc05hbWUgPSBjb250cm9sRGF0YS5jbGFzc05hbWU7XHJcbiAgICAgICAgY29udHJvbC5wbGFjZWhvbGRlciA9IGNvbnRyb2xEYXRhLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgLy9wbGFpbiBzdHJpbmdcclxuICAgICAgICB2YWx1ZSA9IG5ldyBTaW5nbGVEYXRlVmFsdWUodmFsdWVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnc2luZ2xlLWRhdGUtdGltZSc6XHJcbiAgICAgICAgY29udHJvbCA9IG5ldyBTaW5nbGVEYXRlVGltZUNvbnRyb2woKTtcclxuICAgICAgICBjb250cm9sLmZvcm1hdCA9IGNvbnRyb2xEYXRhLmZvcm1hdDtcclxuICAgICAgICBjb250cm9sLnJldHVybkZvcm1hdD1jb250cm9sRGF0YS5yZXR1cm5Gb3JtYXQ7XHJcbiAgICAgICAgY29udHJvbC5jbGFzc05hbWUgPSBjb250cm9sRGF0YS5jbGFzc05hbWU7XHJcbiAgICAgICAgY29udHJvbC5wbGFjZWhvbGRlciA9IGNvbnRyb2xEYXRhLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgY29udHJvbC5lbmFibGVDdXN0b21Gb3JtYXQ9Y29udHJvbERhdGEuZW5hYmxlQ3VzdG9tRm9ybWF0OyAgICBcclxuICAgICAgICB2YWx1ZSA9IG5ldyBTaW5nbGVEYXRlVGltZVZhbHVlKHZhbHVlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3NpbmdsZS1udW1iZXInOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgU2luZ2xlTnVtYmVyQ29udHJvbCgpO1xyXG4gICAgICAgIGNvbnRyb2wuY2xhc3NOYW1lID0gY29udHJvbERhdGEuY2xhc3NOYW1lO1xyXG4gICAgICAgIGNvbnRyb2wucGxhY2Vob2xkZXIgPSB0aGlzLmVtcHR5U3RyaW5nKGNvbnRyb2xEYXRhLnBsYWNlaG9sZGVyKTtcclxuICAgICAgICBjb250cm9sLnByZWNpc2lvbiA9IGNvbnRyb2xEYXRhLnByZWNpc2lvbjtcclxuICAgICAgICBjb250cm9sLnJlcXVpcmUgPSBjb250cm9sRGF0YS5yZXF1aXJlO1xyXG4gICAgICAgIGNvbnRyb2wudGV4dEFsaWduID0gY29udHJvbERhdGEudGV4dEFsaWduO1xyXG4gICAgICAgIGNvbnRyb2wuYmlnTnVtYmVyID0gY29udHJvbERhdGEuaXNCaWdOdW1iZXI7XHJcbiAgICAgICAgY29udHJvbC5taW4gPSBjb250cm9sRGF0YS5taW5WYWx1ZTtcclxuICAgICAgICBjb250cm9sLm1heCA9IGNvbnRyb2xEYXRhLm1heFZhbHVlO1xyXG4gICAgICAgIC8ve251bVZhbHVlOiB4eHh4fVxyXG4gICAgICAgIHZhbHVlID0gbmV3IFNpbmdsZU51bWJlclZhbHVlKHZhbHVlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3NpbmdsZS15ZWFyJzpcclxuICAgICAgICBjb250cm9sID0gbmV3IFNpbmdsZVllYXJDb250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC5mb3JtYXQgPSBjb250cm9sRGF0YS5mb3JtYXQ7XHJcbiAgICAgICAgY29udHJvbC5yZXR1cm5Gb3JtYXQ9Y29udHJvbERhdGEucmV0dXJuRm9ybWF0O1xyXG4gICAgICAgIGNvbnRyb2wuY2xhc3NOYW1lID0gY29udHJvbERhdGEuY2xhc3NOYW1lO1xyXG4gICAgICAgIGNvbnRyb2wucGxhY2Vob2xkZXIgPSBjb250cm9sRGF0YS5wbGFjZWhvbGRlcjtcclxuICAgICAgICBjb250cm9sLnJlcXVpcmUgPSBjb250cm9sRGF0YS5yZXF1aXJlO1xyXG4gICAgICAgIGNvbnRyb2wubWF4RGF0ZSA9IGNvbnRyb2xEYXRhLm1heERhdGU7XHJcbiAgICAgICAgY29udHJvbC5taW5EYXRlID0gY29udHJvbERhdGEubWluRGF0ZTtcclxuICAgICAgICAvL3llYXJWYWx1ZSA6IHBsYWluIHN0cmluZ1xyXG4gICAgICAgIHZhbHVlID0gbmV3IFNpbmdsZVllYXJWYWx1ZSh2YWx1ZURhdGEpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdzaW5nbGUtbW9udGgnOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgU2luZ2xlTW9udGhDb250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC5mb3JtYXQgPSBjb250cm9sRGF0YS5mb3JtYXQ7XHJcbiAgICAgICAgY29udHJvbC5yZXR1cm5Gb3JtYXQ9Y29udHJvbERhdGEucmV0dXJuRm9ybWF0O1xyXG4gICAgICAgIGNvbnRyb2wuY2xhc3NOYW1lID0gY29udHJvbERhdGEuY2xhc3NOYW1lO1xyXG4gICAgICAgIGNvbnRyb2wucGxhY2Vob2xkZXIgPSBjb250cm9sRGF0YS5wbGFjZWhvbGRlcjtcclxuICAgICAgICBjb250cm9sLnJlcXVpcmUgPSBjb250cm9sRGF0YS5yZXF1aXJlO1xyXG4gICAgICAgIHZhbHVlID0gbmV3IFNpbmdsZU1vbnRoVmFsdWUodmFsdWVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnYm9vbC1jaGVjayc6XHJcbiAgICAgICAgY29udHJvbCA9IG5ldyBDaGVja0JveENvbnRyb2woKTtcclxuICAgICAgICBjb250cm9sLmNsYXNzTmFtZSA9IGNvbnRyb2xEYXRhLmNsYXNzTmFtZTtcclxuICAgICAgICBjb250cm9sLmRhdGEgPSBbeyB2YWx1ZTogXCJ0cnVlXCIsIG5hbWU6IGZpZWxkLm5hbWUgfV07XHJcbiAgICAgICAgY29udHJvbC5ob3Jpem9udGFsID0gY29udHJvbERhdGEuaG9yaXpvbnRhbDtcclxuICAgICAgICBjb250cm9sLmRpc2FibGUgPSBjb250cm9sRGF0YS5kaXNhYmxlO1xyXG4gICAgICAgIGNvbnRyb2wuaXNTdHJpbmdWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnRyb2wucmVxdWlyZSA9IGNvbnRyb2xEYXRhLnJlcXVpcmU7XHJcbiAgICAgICAgLy9bdHJ1ZV0gb3IgW2ZhbHNlXVxyXG4gICAgICAgIHZhbHVlID0gbmV3IENoZWNrQm94VmFsdWUodmFsdWVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAncmFkaW8nOlxyXG4gICAgICAgIGNvbnRyb2wgPSBuZXcgUmFkaW9Db250cm9sKCk7XHJcbiAgICAgICAgY29udHJvbC52YWx1ZVR5cGUgPSBjb250cm9sRGF0YS52YWx1ZVR5cGU7XHJcbiAgICAgICAgY29udHJvbC5lbnVtVmFsdWVzID0gY29udHJvbERhdGEuZW51bVZhbHVlcztcclxuICAgICAgICBjb250cm9sLmNsYXNzTmFtZSA9IGNvbnRyb2xEYXRhLmNsYXNzTmFtZTtcclxuICAgICAgICBjb250cm9sLnNob3dMYWJlbCA9IGNvbnRyb2xEYXRhLnNob3dMYWJlbDtcclxuICAgICAgICBjb250cm9sLmhvcml6b250YWwgPSBjb250cm9sRGF0YS5ob3Jpem9udGFsO1xyXG4gICAgICAgIGNvbnRyb2wuZGlzYWJsZWQgPSBjb250cm9sRGF0YS5kaXNhYmxlZDtcclxuICAgICAgICBjb250cm9sLnJlcXVpcmUgPSBjb250cm9sRGF0YS5yZXF1aXJlO1xyXG4gICAgICAgIHZhbHVlID0gbmV3IFJhZGlvVmFsdWUodmFsdWVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiB7IGNvbnRyb2wsIHZhbHVlIH07XHJcbiAgfVxyXG5cclxuICBnZXRHdWlkKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLnM0KCkgKyB0aGlzLnM0KCkgKyBcIi1cIiArIHRoaXMuczQoKSArIFwiLVwiICsgdGhpcy5zNCgpICsgXCItXCIgKyB0aGlzLnM0KCkgKyBcIi1cIiArIHRoaXMuczQoKSArIHRoaXMuczQoKSArIHRoaXMuczQoKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHM0KCkge1xyXG4gICAgcmV0dXJuICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICB9XHJcblxyXG4gIHNob3dJbmZvKG1lc3NhZ2U6IHN0cmluZywgaW5mb1R5cGU6IHN0cmluZywgdGl0bGU6IHN0cmluZywgdGltZW91dDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLm5vdGlmeS5jb25maWcucG9zaXRpb24gPSAndG9wLWNlbnRlcic7XHJcbiAgICBpZiAoaW5mb1R5cGUgPT0gJ3N1Y2Nlc3MnKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3MoPE5vdGlmeU9wdGlvbnM+eyB0aXRsZTogdGl0bGUsIG1zZzogbWVzc2FnZSwgdGltZW91dDogdGltZW91dCB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGluZm9UeXBlID09ICdpbmZvJykge1xyXG4gICAgICB0aGlzLm5vdGlmeS5pbmZvKDxOb3RpZnlPcHRpb25zPnsgdGl0bGU6IHRpdGxlLCBtc2c6IG1lc3NhZ2UsIHRpbWVvdXQ6IHRpbWVvdXQgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpbmZvVHlwZSA9PSAnd2FybmluZycpIHtcclxuICAgICAgdGhpcy5ub3RpZnkud2FybmluZyg8Tm90aWZ5T3B0aW9ucz57IHRpdGxlOiB0aXRsZSwgbXNnOiBtZXNzYWdlLCB0aW1lb3V0OiB0aW1lb3V0IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5mb1R5cGUgPT0gJ2Vycm9yJykge1xyXG4gICAgICB0aGlzLm5vdGlmeS5lcnJvcig8Tm90aWZ5T3B0aW9ucz57IHRpdGxlOiB0aXRsZSwgbXNnOiBtZXNzYWdlLCB0aW1lb3V0OiB0aW1lb3V0IH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICog5qC55o2u5a2X5q616I635Y+WTGFibGXmjqfku7bnmoRUaXRsZVxyXG4gICogQHBhcmFtIGZpZWxkXHJcbiAgKi9cclxuICBnZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICBpZiAoZmllbGQuaWQgJiYgZmllbGQuaWQgIT09ICcnKSB7XHJcbiAgICAgIHJldHVybiBmaWVsZC5maWVsZE5hbWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliqDovb3nrZvpgInmlrnmoYjml7botYvpu5jorqTlgLxcclxuICAgKiBAcGFyYW0gc29sdXRpb24g6ZyA6KaB6LWL6buY6K6k5YC855qE562b6YCJ5pa55qGIXHJcbiAgICogQHBhcmFtIGZpZWxkQ29uZmlncyDpu5jorqTlgLzorr7nva5cclxuICAgKiBAcGFyYW0gcmVhZG9ubHkg5piv5ZCm5Y+q6K+7XHJcbiAgICogQHJldHVybnMg5bey6LWL6buY6K6k5YC855qE562b6YCJ5pa55qGIXHJcbiAgICovXHJcbiAgc2V0VmFsdWVzKHNvbHV0aW9uOiBRdWVyeVNvbHV0aW9uVm8sIGZpZWxkQ29uZmlnczogRmllbGRDb25maWdbXSwgcmVhZG9ubHk6IGJvb2xlYW4pOiBRdWVyeVNvbHV0aW9uVm8ge1xyXG4gICAgbGV0IHFjOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIGNvbnN0IGNvbmRpdGlvbnMgPSBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgPyBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgOiBbXTtcclxuICAgIGxldCBjb250cm9sVHlwZTogc3RyaW5nO1xyXG4gICAgZmllbGRDb25maWdzLmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgICBxYyA9IGNvbmRpdGlvbnMuZmluZChjID0+IGMuZmllbGRDb2RlID09IGZpZWxkLmxhYmVsQ29kZSk7XHJcbiAgICAgIC8vcWMuY29udHJvbOW5tuS4jeaYr2NvbnRyb2xEYXRhXHJcbiAgICAgIGlmIChxYyAmJiBxYy5jb250cm9sICYmIHFjLnZhbHVlKSB7XHJcbiAgICAgICAgY29udHJvbFR5cGUgPSB0aGlzLmNvbnRyb2xUeXBlTWFwLmdldChxYy5jb250cm9sLmdldENvbnRyb2xUeXBlKCkpO1xyXG4gICAgICAgIGZpZWxkLmNvbnRyb2wgPSB7IGNvbnRyb2x0eXBlOiBjb250cm9sVHlwZSB9O1xyXG4gICAgICAgIGNvbnN0IHsgY29udHJvbCwgdmFsdWUgfSA9IHRoaXMuZ2V0Q29udHJvbEFuZFZhbHVlKGZpZWxkKTtcclxuICAgICAgICBxYy52YWx1ZSA9IHRoaXMuaXNOdW1DaGVjayhxYywgdmFsdWUsIGZpZWxkKTtcclxuICAgICAgICBxYy5yZWFkb25seSA9IHJlYWRvbmx5O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzb2x1dGlvbjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHNvbHV0aW9uIOmcgOimgeabtOaWsOmFjee9rueahOetm+mAieaWueahiFxyXG4gICAqIEBwYXJhbSBmaWVsZENvbmZpZ3Mg5pu05paw6YWN572uXHJcbiAgICogQHJldHVybnMg5bey5pu05paw6YWN572u55qE562b6YCJ5pa55qGIXHJcbiAgICovXHJcbiAgdXBkYXRlQ29udHJvbChjb25kaXRpb25zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4sIGZpZWxkQ29uZmlnczogRmllbGRDb25maWdbXSkge1xyXG4gICAgbGV0IHFjOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIGNvbmRpdGlvbnMgPSBjb25kaXRpb25zID8gY29uZGl0aW9ucyA6IFtdO1xyXG4gICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBmaWVsZENvbmZpZ3MuZm9yRWFjaChmaWVsZCA9PiB7XHJcbiAgICAgICAgcWMgPSBjb25kaXRpb25zLmZpbmQoYyA9PiBjLmZpZWxkQ29kZSA9PSBmaWVsZC5sYWJlbENvZGUpO1xyXG4gICAgICAgIGlmIChxYyAmJiBxYy5jb250cm9sKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZpZWxkLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgcWMuY29udHJvbFtwcm9wXSA9IGZpZWxkLmNvbnRyb2xbcHJvcF1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gbGV0IHFjOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIC8vIGNvbnN0IGNvbmRpdGlvbnMgPSBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgPyBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgOiBbXTtcclxuICAgIC8vIGlmIChjb25kaXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgIC8vICAgZmllbGRDb25maWdzLmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgLy8gICAgIHFjID0gY29uZGl0aW9ucy5maW5kKGMgPT4gYy5maWVsZENvZGUgPT0gZmllbGQubGFiZWxDb2RlKTtcclxuICAgIC8vICAgICBpZiAocWMgJiYgcWMuY29udHJvbCkge1xyXG4gICAgLy8gICAgICAgZm9yICh2YXIgcHJvcCBpbiBmaWVsZC5jb250cm9sKSB7XHJcbiAgICAvLyAgICAgICAgIHFjLmNvbnRyb2xbcHJvcF0gPSBmaWVsZC5jb250cm9sW3Byb3BdXHJcbiAgICAvLyAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICB9KTtcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW/heWhq+aOp+S7tumdnuepuuWIpOaWrVxyXG4gICAqIEBwYXJhbSBjb25kaXRpb25zIOi/m+ihjOetm+mAieaTjeS9nOaXtuW9k+WJjeaJgOacieeahOetm+mAieadoeS7tlxyXG4gICAqL1xyXG4gIGlzVmFsaWQoY29uZGl0aW9uczogQXJyYXk8UXVlcnlDb25kaXRpb24+KTogYW55W10ge1xyXG4gICAgbGV0IHFjOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIGNvbnN0IGVycm9yQXJyID0gY29uZGl0aW9ucy5tYXAocWMgPT4ge1xyXG4gICAgICBpZiAocWMuY29udHJvbC5pc1JlcXVpcmVkKCkgJiYgcWMudmFsdWUuaXNFbXB0eSgpKVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB0eXBlOiAncmVxdWlyZScsXHJcbiAgICAgICAgICBmaWVsZDogcWMuZmllbGROYW1lXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGVycm9yQXJyLmZpbHRlcihlcnJvciA9PiBlcnJvciAhPSBudWxsKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+WGs+aVsOWAvOaOp+S7tnBsYWNlaG9sZGVy5pi+56S65Li6dW5kZWZpbmVk55qE6Zeu6aKYXHJcbiAgICogQHBhcmFtIHMg5pWw5YC85o6n5Lu2SlNPTuaPj+i/sOS4reeahHBsYWNlaG9sZGVy6YWN572u5L+h5oGvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBlbXB0eVN0cmluZyhkYXRhOiBhbnkpIHtcclxuICAgIGlmIChkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+WGs2ppdOeUn+aIkOS7o+eggeWQjuS4i+aLieW4ruWKqeaOp+S7tueahGRpc3BsYXlUeXBl5bGe5oCn5LiO57uE5Lu2YXBp5LiN5LiA6Ie055qE6Zeu6aKYXHJcbiAgICogQHBhcmFtIGRhdGEg5LiL5ouJ5biu5Yqp5o6n5Lu2SlNPTuaPj+i/sOS4reeahGRpc3BsYXlUeXBl6YWN572u5L+h5oGvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBkaXNwbGF5VHlwZVRyYW5zZm9ybShkYXRhOiBhbnkpIHtcclxuICAgIGlmIChkYXRhID09PSAnTGlzdCcpIHtcclxuICAgICAgcmV0dXJuICdMT09LVVBMSVNUJztcclxuICAgIH1cclxuICAgIHJldHVybiAnTE9PS1VQVFJFRUxJU1QnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5Yaz5pWw5YC85o6n5Lu26LWL6buY6K6k5YC85Yqf6IO95LiO5pyA5aSn5pyA5bCP5YC86ZmQ5Yi25Yqf6IO955qE5Yay56qB6Zeu6aKYXHJcbiAgICogQHBhcmFtIGNvbmRpdGlvbiDlvZPliY3mraPlnKjotYvpu5jorqTlgLznmoTnrZvpgInmnaHku7bvvIzoi6XmmK/mlbDlgLznsbvlnovvvIzpnIDopoHmj5Dlj5blhbZjb250cm9s5a+56LGh55qEbWF45bGe5oCn5ZKMbWlu5bGe5oCn55qE5YC8XHJcbiAgICogQHBhcmFtIHZhbHVlIOm7mOiupOWAvOmFjee9rnZhbHVl5a+56LGhXHJcbiAgICogQHBhcmFtIGZpZWxkIOm7mOiupOWAvOmFjee9rlxyXG4gICAqIEByZXR1cm5zIOagoemqjOacgOWkp+WAvOWSjOacgOWwj+WAvOS5i+WQjueahOm7mOiupOWAvOmFjee9rnZhbHVl5a+56LGhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc051bUNoZWNrKGNvbmRpdGlvbjogYW55LCB2YWx1ZTogYW55LCBmaWVsZDogYW55KSB7XHJcbiAgICBsZXQgbWluVmFsdWU6IGFueTtcclxuICAgIGxldCBtYXhWYWx1ZTogYW55O1xyXG4gICAgaWYgKGZpZWxkLmNvbnRyb2wuY29udHJvbHR5cGUgPT0gJ3NpbmdsZS1udW1iZXInKSB7XHJcbiAgICAgIG1pblZhbHVlID0gKGNvbmRpdGlvbi5jb250cm9sLm1pbiA9PSBudWxsIHx8IGNvbmRpdGlvbi5jb250cm9sLm1pbiA9PSB1bmRlZmluZWQpID8gLTIxNDc0ODM2NDggOiBjb25kaXRpb24uY29udHJvbC5taW47XHJcbiAgICAgIG1heFZhbHVlID0gKGNvbmRpdGlvbi5jb250cm9sLm1heCA9PSBudWxsIHx8IGNvbmRpdGlvbi5jb250cm9sLm1heCA9PSB1bmRlZmluZWQpID8gMjE0NzQ4MzY0NyA6IGNvbmRpdGlvbi5jb250cm9sLm1heDtcclxuICAgICAgdmFsdWUubnVtVmFsdWUgPSAoKHZhbHVlLm51bVZhbHVlIC0gbWluVmFsdWUpID4gMCkgPyB2YWx1ZS5udW1WYWx1ZSA6IG1pblZhbHVlO1xyXG4gICAgICB2YWx1ZS5udW1WYWx1ZSA9ICgodmFsdWUubnVtVmFsdWUgLSBtYXhWYWx1ZSkgPCAwKSA/IHZhbHVlLm51bVZhbHVlIDogbWF4VmFsdWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZmllbGQuY29udHJvbC5jb250cm9sdHlwZSA9PSAnbnVtYmVyJykge1xyXG4gICAgICBtaW5WYWx1ZSA9IChjb25kaXRpb24uY29udHJvbC5taW4gPT0gbnVsbCB8fCBjb25kaXRpb24uY29udHJvbC5taW4gPT0gdW5kZWZpbmVkKSA/IC0yMTQ3NDgzNjQ4IDogY29uZGl0aW9uLmNvbnRyb2wubWluO1xyXG4gICAgICBtYXhWYWx1ZSA9IChjb25kaXRpb24uY29udHJvbC5tYXggPT0gbnVsbCB8fCBjb25kaXRpb24uY29udHJvbC5tYXggPT0gdW5kZWZpbmVkKSA/IDIxNDc0ODM2NDcgOiBjb25kaXRpb24uY29udHJvbC5tYXg7XHJcbiAgICAgIHZhbHVlLnN0YXJ0VmFsdWUgPSAoKHZhbHVlLnN0YXJ0VmFsdWUgLSBtaW5WYWx1ZSkgPiAwKSA/IHZhbHVlLnN0YXJ0VmFsdWUgOiBtaW5WYWx1ZTtcclxuICAgICAgdmFsdWUuc3RhcnRWYWx1ZSA9ICgodmFsdWUuc3RhcnRWYWx1ZSAtIG1heFZhbHVlKSA8IDApID8gdmFsdWUuc3RhcnRWYWx1ZSA6IG1heFZhbHVlO1xyXG4gICAgICB2YWx1ZS5lbmRWYWx1ZSA9ICgodmFsdWUuZW5kVmFsdWUgLSBtaW5WYWx1ZSkgPiAwKSA/IHZhbHVlLmVuZFZhbHVlIDogbWluVmFsdWU7XHJcbiAgICAgIHZhbHVlLmVuZFZhbHVlID0gKCh2YWx1ZS5lbmRWYWx1ZSAtIG1heFZhbHVlKSA8IDApID8gdmFsdWUuZW5kVmFsdWUgOiBtYXhWYWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaZuuiDvei+k+WFpeahhuaOp+S7tumcgOimgeW8ueWHuuihqOWNleaXtu+8jOWwhuihqOWNlemFjee9rkpTT07mj4/ov7DovazmjaLkuLrlvLnlh7rooajljZXlkb3ku6Tlj6/mjqXmlLbnmoTlvLnnqpflj4LmlbBcclxuICAgKiBAcGFyYW0gZmllbGQg6YWN572u5Li65pm66IO96L6T5YWl5qGG5o6n5Lu255qE5a2X5q6155qESlNPTuaPj+i/sFxyXG4gICAqIEByZXR1cm5zIOW8ueeql+WPguaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0SW5wdXRHcm91cERpYWxvZyhmaWVsZDogYW55KTogRGlhbG9nQ29uZmlnIHtcclxuICAgIGxldCBpbnB1dEdyb3VwQ29udHJvbERhdGEgPSBmaWVsZC5jb250cm9sO1xyXG4gICAgbGV0IG1vZGFsQ29uZmlnRGF0YSA9IGlucHV0R3JvdXBDb250cm9sRGF0YS5tb2RhbENvbmZpZztcclxuICAgIGlmICghZmllbGQuaWQgfHwgaW5wdXRHcm91cENvbnRyb2xEYXRhLnVzYWdlTW9kZSA9PSAndGV4dCcpIHtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZGlhbG9nQ29uZmlnID0gbmV3IERpYWxvZ0NvbmZpZygpO1xyXG4gICAgZGlhbG9nQ29uZmlnLm1vZGFsSWQgPSBmaWVsZC5pZDtcclxuICAgIGlmIChtb2RhbENvbmZpZ0RhdGEubWFwRmllbGRzKSB7XHJcbiAgICAgIGRpYWxvZ0NvbmZpZy5tYXBGaWVsZHMgPSBKU09OLnBhcnNlKG1vZGFsQ29uZmlnRGF0YS5tYXBGaWVsZHMucmVwbGFjZSgvJy9nLCAnXCInKSk7XHJcbiAgICB9XHJcbiAgICBkaWFsb2dDb25maWcuc2hvd0hlYWRlciA9IG1vZGFsQ29uZmlnRGF0YS5oYXNPd25Qcm9wZXJ0eSgnc2hvd0hlYWRlcicpID8gbW9kYWxDb25maWdEYXRhLnNob3dIZWFkZXIgOiB0cnVlO1xyXG4gICAgZGlhbG9nQ29uZmlnLnNob3dDbG9zZUJ1dHRvbiA9IG1vZGFsQ29uZmlnRGF0YS5oYXNPd25Qcm9wZXJ0eSgnc2hvd0Nsb3NlQnV0dG9uJykgPyBtb2RhbENvbmZpZ0RhdGEuc2hvd0Nsb3NlQnV0dG9uIDogdHJ1ZTtcclxuICAgIGRpYWxvZ0NvbmZpZy5zaG93TWF4QnV0dG9uID0gbW9kYWxDb25maWdEYXRhLmhhc093blByb3BlcnR5KCdzaG93TWF4QnV0dG9uJykgPyBtb2RhbENvbmZpZ0RhdGEuc2hvd01heEJ1dHRvbiA6IHRydWU7XHJcbiAgICBkaWFsb2dDb25maWcudGl0bGUgPSBtb2RhbENvbmZpZ0RhdGEuaGFzT3duUHJvcGVydHkoJ3RpdGxlJykgPyBtb2RhbENvbmZpZ0RhdGEudGl0bGUgOiAnJztcclxuICAgIGRpYWxvZ0NvbmZpZy53aWR0aCA9IG1vZGFsQ29uZmlnRGF0YS53aWR0aDtcclxuICAgIGRpYWxvZ0NvbmZpZy5oZWlnaHQgPSBtb2RhbENvbmZpZ0RhdGEuaGVpZ2h0O1xyXG4gICAgcmV0dXJuIGRpYWxvZ0NvbmZpZztcclxuICB9XHJcbn1cclxuXHJcbiJdfQ==