/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { Component, ElementRef, ChangeDetectorRef, Inject, Renderer2, Injector, Input, ViewChild, forwardRef, ViewEncapsulation, Output } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { take, debounceTime } from 'rxjs/operators';
import { BaseComboComponent, ComboService } from '@farris/ui-combo-list';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { LookupUtils } from '@farris/ui-lookup';
import { TreeTableComponent } from '@farris/ui-treetable';
import { DataTableComponent } from '@farris/ui-datatable';
import { Subject } from 'rxjs';
/** @type {?} */
const INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => ComboLookupComponent)),
    multi: true
};
export class ComboLookupComponent extends BaseComboComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        super(el, cdr, document, render, comboService, injector);
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.panelHeight = 300;
        this.comPosition = {
            'height.px': this.panelHeight
        };
        this.showHeader = true;
        this.useTreeView = false;
        /**
         * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
         */
        this.expandLevel = -1;
        this.cascade = {
            enable: false,
            up: false,
            down: false
        };
        /**
         * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
         */
        this.loadTreeDataType = 'default';
        /**
         * 启用构造完整树过滤
         */
        this.enableFullTree = true;
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.loadFinish = false;
        this.pageInfo = { pageSize: 20, pageIndex: 1, total: 0 };
        this.tt$ = new Subject();
        this.loaded$ = new Subject();
        this._searchKeyWords = '';
        this.loadDataType = 'all';
    }
    // 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
    /**
     * @param {?} value
     * @return {?}
     */
    set columns(value) {
        this._columns = value;
    }
    /**
     * @return {?}
     */
    get columns() {
        /** @type {?} */
        let cols = this._columns !== undefined && this._columns.length > 0 ? this._columns : this.comboService.columns;
        if (this.useTreeView && cols.length > 1) {
            cols = cols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === this.textField));
        }
        return cols;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pagination(value) {
        this._pagination = value;
    }
    /**
     * @return {?}
     */
    get pagination() {
        if (this._pagination !== undefined) {
            return this._pagination;
        }
        else {
            return this.comboService.pageInfo && this.pageInfo.enablePager ? this.pageInfo.enablePager : false;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set displayType(val) {
        this.comboService.displayType = val + '';
    }
    /**
     * @return {?}
     */
    get displayType() {
        return this.comboService.displayType;
    }
    /**
     * @param {?} cmf
     * @return {?}
     */
    set treeCmpRef(cmf) {
        if (cmf) {
            cmf.cascadeCheck = this.cascade.enable;
            cmf.cascadeDown = this.cascade.down;
            cmf.cascadeUp = this.cascade.up;
            this.tt$.next(cmf);
        }
        this._treeCmpRef = cmf;
    }
    /**
     * @return {?}
     */
    get treeCmpRef() {
        return this._treeCmpRef;
    }
    /**
     * @param {?} cmf
     * @return {?}
     */
    set tableCmpRef(cmf) {
        if (cmf && this.pagination && this._tableCmpRef) {
            this.loaded$.pipe(take(1)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                cmf.loadData({
                    pageSize: this.pageInfo.pageSize,
                    total: this.pageInfo.total,
                    data: this.data,
                    pageIndex: this.pageInfo.pageIndex
                });
            }));
        }
        if (!this._tableCmpRef && this.loadFinish && cmf) {
            cmf.loadData({
                pageSize: this.pageInfo.pageSize,
                total: this.pageInfo.total,
                data: this.data,
                pageIndex: this.pageInfo.pageIndex
            });
            this._tableCmpRef = cmf;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.treeClientSearch.pipe(debounceTime(300)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (!this.remoteSearch && this.treeCmpRef) {
                this.treeCmpRef.searchHandle.search(this.textField, value);
            }
        }));
        this.comboService.treeInfo$.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                if (this.loadTreeDataType === 'default') {
                    this.loadDataType = t.loadDataType;
                }
            }
        }));
    }
    /**
     * @protected
     * @param {?} selections
     * @return {?}
     */
    onSelectionsChange(selections) {
        if (this.displayType === 'LOOKUPLIST') {
            if (!this.multiSelect) {
                this.ownSelections = selections[0] ? selections[0] : {};
            }
            else {
                this.ownSelections = {};
                this.comboService.selections.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    this.ownSelections[item[this.idField]] = item;
                }));
            }
            this.pageInfo = Object.assign({}, this.pageInfo, this.comboService.pageInfo);
            this.loadFinish = true;
            this.cdr.detectChanges();
            this.loaded$.next(this.pageInfo);
        }
        else {
            if (this.treeCmpRef) {
                this.initTreeData();
            }
            else {
                this.tt$.pipe(take(1)).subscribe((/**
                 * @param {?} cmf
                 * @return {?}
                 */
                (cmf) => {
                    this.treeCmpRef = cmf;
                    this.initTreeData();
                    // cmf.checkedNodes(ids, true, false);
                    // cmf.updateSerializedValue();
                }));
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initTreeData() {
        /** @type {?} */
        const __selections = this.comboService.selections.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== null && n !== undefined));
        /** @type {?} */
        const ids = [];
        this.ownSelections = __selections.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            ids.push(item[this.idField]);
            return { data: item, id: item[this.idField] };
        }));
        this.treeCmpRef.selections = this.ownSelections;
        this.treeCmpRef.checkeds = this.ownSelections;
        if (this.comboService.data && this.comboService.data.length) {
            if (this.treeCmpRef.checkValues && this.treeCmpRef.checkValues.length) {
                if (this.multiSelect) {
                    this.treeCmpRef.checkedNodes(this.treeCmpRef.checkValues);
                    this.treeCmpRef.selectNodes(this.treeCmpRef.checkValues);
                }
                else {
                    this.treeCmpRef.selectNodes(this.treeCmpRef.checkValues);
                }
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    initDatasChangeAction() { }
    /**
     * @private
     * @return {?}
     */
    isTree() {
        return this.displayType === 'LOOKUPTREELIST';
    }
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    updateMappingFieldValue(clearMapFields = false) {
        if (this.ngControl && this.ngControl.formDirective &&
            this.ngControl.formDirective.form && this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            const bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            let pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== ''));
            }
            this.mappingField = this.mappingField ? this.mappingField : {};
            if (this.mapFields) {
                /** @type {?} */
                const helpFields = Object.keys(this.mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                (f) => {
                    /** @type {?} */
                    const fieldNames = this.mapFields[f] ? this.mapFields[f] : '';
                    /** @type {?} */
                    let value = '';
                    if (!clearMapFields) {
                        /** @type {?} */
                        const text = this.comboService.selections && this.comboService.selections.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            return this.comboService.getValueByObj(f, item);
                        })).filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n !== null)).join(this.separator);
                        // value = text ? text : this.displayText ? this.displayText : '';
                        value = text || '';
                    }
                    if (fieldNames) {
                        fieldNames.split(',').forEach((/**
                         * @param {?} fieldName
                         * @return {?}
                         */
                        (fieldName) => {
                            /** @type {?} */
                            let _val = value;
                            if (this.nosearch && fieldName === this.ngControl.name) {
                                _val = this.displayText;
                            }
                            if (bindingData.setValue) {
                                bindingData.setValue(pathArr.concat(fieldName.split('.')), _val, true, true);
                            }
                            else {
                                this.commonUtils.setValue(bindingData, fieldName, value);
                            }
                        }));
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    updateSelectedValues() {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            const bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            let pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== ''));
            }
            /** @type {?} */
            let targetField = this.mappingField ? this.mapFields[this.idField] : '';
            if (targetField && targetField.indexOf(',') > -1) {
                targetField = targetField.split(',')[0];
            }
            // this.mappingField = this.mappingField ? this.mappingField : '';
            if (targetField && bindingData.getValue) {
                this.selectedValues = bindingData.getValue(pathArr.concat(targetField.split('.'))) || '';
            }
            else if (targetField) {
                this.selectedValues = this.commonUtils.getValue(targetField, bindingData) || '';
            }
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onSelectRows(row) {
        if (this.displayType === 'LOOKUPLIST') {
            const { data, index } = row;
            this.comboService.selectItem(data, index);
            this.selectChange.emit({ data, index, instance: this });
        }
        else if (this.displayType === 'LOOKUPTREELIST') {
            const { node } = row;
            if (row.nodes) {
                this.comboService.selectItem(row.nodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data)));
            }
            else {
                this.comboService.selectItem(node.data);
            }
            this.selectChange.emit(node);
        }
        this.updateTextAndValues();
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onUnSelectRows(row) {
        if (this.displayType === 'LOOKUPLIST') {
            const { data } = row;
            this.comboService.unSelectItem(data);
        }
        else if (this.displayType === 'LOOKUPTREELIST') {
            const { node } = row;
            this.comboService.unSelectItem(node.data);
            this.selectChange.emit(node);
        }
        this.updateTextAndValues();
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onCheckAll(ev) {
        /** @type {?} */
        let state;
        /** @type {?} */
        let selections = [];
        if (this.displayType === 'LOOKUPTREELIST') {
            state = ev.checked;
            selections = this.treeCmpRef.state.rowNodes
                .filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.node.selectable === undefined || n.node.selectable))
                .map((/**
             * @param {?} r
             * @return {?}
             */
            r => r.node.data));
        }
        else {
            state = ev;
            selections = this.data;
        }
        if (state) {
            this.comboService.selectAll(selections);
        }
        else {
            this.comboService.unSelectAll(selections);
        }
        this.updateTextAndValues();
    }
    /**
     * @private
     * @return {?}
     */
    updateTextAndValues() {
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeyup($event) {
        // console.log('key up', $event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydown($event) {
        // console.log('key down', $event);
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageChanged(event) {
        if (this.uri) {
            this.getData(event).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => this.comboService.loadLookUpDataTable(data, !!event.sortName)));
        }
        else {
            this.pageChanged.emit(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPageSizeChanged(event) {
        if (this.uri) {
            this.getData(event).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => this.comboService.loadLookUpDataTable(data, !!event.sortName)));
        }
        else {
            this.pageSizeChanged.emit(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onColumnSorted(event) {
        const { sortName, sortOrder } = Object.assign({}, event);
        this.getData({ sortName, sortOrder }, 'search').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.comboService.loadLookUpDataTable(data, true);
        }));
    }
    /**
     * @return {?}
     */
    onClear() {
        this.ownSelections = [];
        if (this.isTree() && this.treeCmpRef) {
            this.treeCmpRef.clearAll();
        }
        super.onClear();
    }
    /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    getData(event, type = 'all') {
        event = event || {};
        if (this._searchKeyWords) {
            event.search = {
                field: '*',
                value: this._searchKeyWords
            };
        }
        /** @type {?} */
        const params = this.buildQueryParams(event, type);
        return this.comboService.getData(params);
    }
    /**
     * 构选查询参数
     * @private
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    buildQueryParams(event, type = 'all') {
        /** @type {?} */
        const params = {};
        /** @type {?} */
        const searchParam = { category: type };
        if (event) {
            if (event.pageInfo) {
                params['pageIndex'] = event.pageInfo.pageIndex;
                params['pageSize'] = event.pageInfo.pageSize;
            }
            if (event.search) {
                searchParam['searchField'] = event.search.field;
                searchParam['searchValue'] = event.search.value;
            }
            if (event.sortName) {
                searchParam['sortName'] = event.sortName;
            }
            if (event.sortOrder) {
                searchParam['sortOrder'] = event.sortOrder;
            }
        }
        params['searchValue'] = JSON.stringify(searchParam);
        if (this.customData) {
            params['customData'] = this.customData;
        }
        return params;
    }
    /**
     * @param {?} value
     * @param {?} field
     * @return {?}
     */
    filterDataOnServer(value, field) {
        if (!this.isOpen) {
            return;
        }
        /** @type {?} */
        let search = { search: { field, value } };
        if (value) {
            this._searchKeyWords = value;
        }
        else {
            this._searchKeyWords = '';
            search = null;
        }
        /** @type {?} */
        const params = this.buildQueryParams(search, 'search');
        this.comboService.serachValue$.next(params);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onExpandNode($event) {
    }
}
ComboLookupComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'farris-combo-lookup',
                template: "<input-group\r\n    #input\r\n    [attr.title]=\"enableTitle ? displayText : ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear]=\"enableClear\"\r\n    (clickHandle)=\"onClick()\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    [maxLength]=\"maxLength\" \r\n    style=\"display: block;\"\r\n>\r\n</input-group>\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\" [ngStyle]=\"comPosition\" #comboPanel style=\"overflow: hidden;\" >\r\n    <farris-datatable\r\n        *ngIf=\"displayType === 'LOOKUPLIST'\"\r\n        #dt\r\n        [width]=\"panelWidth\"\r\n        [height]=\"panelHeight\"\r\n        [columns]=\"columns\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [selections]=\"ownSelections\"\r\n        [idField]=\"idField\"\r\n        [singleSelect]=\"!multiSelect\"\r\n        [pagination] = \"pagination\"\r\n        [pageSize]=\"pageInfo.pageSize\"\r\n        [pageIndex]=\"pageInfo.pageIndex\"\r\n        [pageList]=\"pageInfo.pageList\"\r\n        [total]=\"pageInfo.total\"\r\n        [pagerViewMode]=\"'simple'\"\r\n        [showPageInfo]=\"false\" \r\n        [showPageNumber]=\"false\" \r\n        [showPageList]=\"false\"\r\n        [remoteSort]=\"false\"\r\n        [showHeader]=\"showHeader\"\r\n        (selectRows)=\"onSelectRows($event)\"\r\n        (unSelectRow)=\"onUnSelectRows($event)\"\r\n        (checkAll)=\"onCheckAll($event)\"\r\n        (pageChanged)=\"onPageChanged($event)\"\r\n        (pageSizeChanged)=\"onPageSizeChanged($event)\"\r\n        (columnSorted)=\"onColumnSorted($event)\"\r\n    ></farris-datatable>\r\n\r\n    <farris-treetable\r\n        #tt\r\n        *ngIf=\"displayType === 'LOOKUPTREELIST'\"\r\n        \r\n        [showHeader]=\"!useTreeView && showHeader\"\r\n        [showBorder]=\"!useTreeView\" \r\n        [showHeader]=\"!useTreeView\"\r\n        [expandLevel]=\"expandLevel\"\r\n        [virtualized]=\"true\"\r\n\r\n        [columns]=\"columns\"\r\n        [singleSelect]=\"!multiSelect\"\r\n        [idField]=\"idField\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [checkOnSelect]=\"true\"\r\n        [selectOnCheck]=\"true\"\r\n        [fixedHeader]=\"true\"\r\n        [showCheckbox]=\"multiSelect\"\r\n        [fit]=\"true\"\r\n        [remoteSort]=\"false\"\r\n        [loadDataType]=\"loadDataType\"\r\n        (nodeSelected)=\"onSelectRows($event)\"\r\n        (nodeUnSelect)=\"onUnSelectRows($event)\"\r\n        (nodeChecked)=\"onSelectRows($event)\"\r\n        (nodeUnChecked)=\"onUnSelectRows($event)\"\r\n        (checkAll)=\"onCheckAll($event)\"\r\n        (unCheckAll)=\"onCheckAll($event)\"\r\n        (expand)=\"onExpandNode($event)\"\r\n    ></farris-treetable>\r\n</div>\r\n<!--\r\n    [width]=\"panelWidth\"\r\n    [height]=\"panelHeight\"\r\n     -->",
                encapsulation: ViewEncapsulation.None,
                // styleUrls: ['./combo-lookup.component.scss'],
                providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService, LookupUtils]
            }] }
];
/** @nocollapse */
ComboLookupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
ComboLookupComponent.propDecorators = {
    showHeader: [{ type: Input }],
    useTreeView: [{ type: Input }],
    columns: [{ type: Input }],
    pagination: [{ type: Input }],
    displayType: [{ type: Input }],
    expandLevel: [{ type: Input }],
    treeCmpRef: [{ type: ViewChild, args: ['tt',] }],
    tableCmpRef: [{ type: ViewChild, args: ['dt',] }],
    cascade: [{ type: Input }],
    treeInfo: [{ type: Input }],
    loadTreeDataType: [{ type: Input }],
    enableFullTree: [{ type: Input }],
    pageChanged: [{ type: Output }],
    pageSizeChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ComboLookupComponent.prototype.panelHeight;
    /** @type {?} */
    ComboLookupComponent.prototype.comPosition;
    /** @type {?} */
    ComboLookupComponent.prototype.showHeader;
    /** @type {?} */
    ComboLookupComponent.prototype.useTreeView;
    /**
     * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
     * @type {?}
     */
    ComboLookupComponent.prototype.expandLevel;
    /** @type {?} */
    ComboLookupComponent.prototype.cascade;
    /** @type {?} */
    ComboLookupComponent.prototype.treeInfo;
    /**
     * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
     * @type {?}
     */
    ComboLookupComponent.prototype.loadTreeDataType;
    /**
     * 启用构造完整树过滤
     * @type {?}
     */
    ComboLookupComponent.prototype.enableFullTree;
    /** @type {?} */
    ComboLookupComponent.prototype.pageChanged;
    /** @type {?} */
    ComboLookupComponent.prototype.pageSizeChanged;
    /** @type {?} */
    ComboLookupComponent.prototype.ownSelections;
    /** @type {?} */
    ComboLookupComponent.prototype.loadFinish;
    /** @type {?} */
    ComboLookupComponent.prototype.pageInfo;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype.tt$;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype.loaded$;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._pagination;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._tableCmpRef;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._treeCmpRef;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._searchKeyWords;
    /** @type {?} */
    ComboLookupComponent.prototype.loadDataType;
    /** @type {?} */
    ComboLookupComponent.prototype.el;
    /** @type {?} */
    ComboLookupComponent.prototype.cdr;
    /** @type {?} */
    ComboLookupComponent.prototype.document;
    /** @type {?} */
    ComboLookupComponent.prototype.render;
    /** @type {?} */
    ComboLookupComponent.prototype.comboService;
    /** @type {?} */
    ComboLookupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,