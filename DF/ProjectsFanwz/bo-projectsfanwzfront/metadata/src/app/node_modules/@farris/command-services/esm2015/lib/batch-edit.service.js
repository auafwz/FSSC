import { Injectable, Injector } from '@angular/core';
import { ViewModel, Repository, Entity, AppContext, EntityList } from '@farris/devkit';
import { from, EMPTY, concat, of, Subject } from 'rxjs';
import { concatMap, catchError, tap, switchMap, last, map, delay } from 'rxjs/operators';
import { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { ComponentManagerService } from './component-manager.service';
import { FormLoadingService } from './form-loading/form-loading.service';
import { LanguageService } from './languag.service';
import { FormNotifyService } from './form-notify.service';
// tslint:disable: max-line-length
/**
 * 批量编辑服务
 */
export class BatchEditService {
    constructor(injector, componentManagerService, viewModel, repository, batchEditDialogService, dateService, languageService, formNotifyService) {
        this.injector = injector;
        this.componentManagerService = componentManagerService;
        this.viewModel = viewModel;
        this.repository = repository;
        this.batchEditDialogService = batchEditDialogService;
        this.dateService = dateService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formLoadingService = this.injector.get(FormLoadingService, null);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (!this.formNotifyService) {
            this.formNotifyService = this.injector.get(FormNotifyService, null);
        }
        this.onHelpClose = new Subject();
        this.onHelpClose.subscribe(result => {
            const { frameId = '', mapFields = '', data = [] } = result || {};
            this.onHelpCloseHandler(frameId, mapFields, data);
        });
    }
    /**
     * 打开批量编辑对话框
     * @param frameId frameId
     */
    openBatchEditDialog(frameId) {
        if (!frameId) {
            throw new Error('frameId is required.');
        }
        if (this.batchEditDialogService) {
            let columns = [];
            if (this.viewModel) {
                const gridFrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);
                const gridViewModel = gridFrameContext.viewModel;
                if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {
                    // tslint:disable-next-line: no-string-literal
                    const gridColumnsAttrName = gridViewModel['dataGridColumnsName'];
                    columns = gridViewModel[gridColumnsAttrName];
                }
                else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {
                    columns = gridViewModel['dataGridColumns'];
                }
                const ids = gridViewModel.uiState['ids'] || [];
                if (!ids || ids.length < 1) {
                    this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });
                    return EMPTY;
                }
                const dialogRef = this.batchEditDialogService.batchEdit(columns, {
                    rows: ids.length,
                    onConfirm: (inputs) => {
                        if (Array.isArray(ids) && ids.length > 0) {
                            // console.log('openBatchEditDialog', inputs);
                            const appContext = this.viewModel.frameContext.appContext;
                            appContext.changeDetectionController.detach();
                            inputs.forEach(input => {
                                this.updateBindingData(input, ids);
                            });
                            appContext.changeDetectionController.reattach();
                        }
                        dialogRef.close();
                    }
                });
            }
        }
    }
    /**
     * 打开隐藏帮助
     * @param helpId 帮助id
     */
    openHiddenHelp(helpId) {
        if (!helpId) {
            throw new Error('Argument error,helpId can`t be empty');
        }
        const componentManagerService = this.componentManagerService.getControl(helpId);
        if (componentManagerService) {
            componentManagerService.showDialog();
        }
        else {
            throw new Error(`the component which id is ${helpId} can't be found!`);
        }
    }
    /**
     * 清空帮助勾选（只能挂载到帮助前事件）
     */
    clearHelpSelections() {
        const self = this;
        const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (helpElement) {
            helpElement.displayValue = '';
        }
    }
    /**
     * 勾选当前行
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param primaryKeyValue 帮助主键字段
     */
    checkCurrentRow(frameId, mapFields, primaryKeyValue) {
        const self = this;
        const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (!primaryKeyValue) {
            primaryKeyValue = 'id';
        }
        const mappings = JSON.parse(mapFields);
        if (helpElement) {
            frameId = frameId || this.viewModel.frameContext.frameId;
            if (frameId) {
                const frameContext = this.getFrameContextById(frameId);
                if (frameContext) {
                    const bindingPath = frameContext.viewModel.bindingPath;
                    if (bindingPath) {
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        const bindingList = frameContext.bindingData.getValue(bindingPaths);
                        const currentRow = bindingList.currentItem;
                        const path = mappings[primaryKeyValue];
                        if (path) {
                            const value = this.getValueByPath(currentRow, path);
                            helpElement.displayValue = value;
                        }
                    }
                }
            }
        }
    }
    /**
     * 以帮助勾选数据作为依据，批量新增主表数据
     * @param frameId 主表所在frame的id
     * @param mapFields 帮助字段与主表字段映射
     * @description 以帮助勾选数据作为依据，批量新增主表数据
     */
    batchAppend(frameId, mapFields) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            const defaultValues = [];
            result.forEach((item) => {
                const defaultValue = {};
                Object.keys(mappings).forEach((prop) => {
                    const value = this.getValueByPath(item, prop);
                    const fields = mappings[prop];
                    const groups = fields.split(',').filter(p => p);
                    groups.forEach(group => {
                        const paths = group.split('.').filter(p => p);
                        this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            this.formLoadingService.show();
            return this.repository.batchAppend(defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
        }
        return of(true);
    }
    /**
     * 以帮助勾选数据作为依据，批量新增从表/从从表
     * @param frameId 从表/从从表所在frame的id
     * @param mapFields 帮助字段与从表/从从表字段映射
     * @description 以帮助勾选数据作为依据，批量新增从表/从从表
     */
    batchAppendByPathBasedOnHelpSelections(frameId, mapFields) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            const defaultValues = [];
            result.forEach((item) => {
                const defaultValue = {};
                Object.keys(mappings).forEach((prop) => {
                    const value = this.getValueByPath(item, prop);
                    const fields = mappings[prop];
                    const groups = fields.split(',').filter(p => p);
                    groups.forEach(group => {
                        const paths = group.split('.').filter(p => p);
                        this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            this.formLoadingService.show();
            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
            return this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
        }
        return of(true);
    }
    /**
     * 行内帮助多选批量新增或替换子表数据
     * @param frameId frameId, optional,为空时使用命令执行时所在的上下文
     * @param mapFields 字段映射
     * @returns
     */
    batchAppendBasedOnRowHelpSelections(frameId, mapFields) {
        const self = this;
        let result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            console.error('[batchAppendBasedOnRowHelpSelections]mapFields can`t be empty.');
            return of(true);
        }
        const mappings = JSON.parse(mapFields);
        if (!mappings || !mappings.hasOwnProperty('id')) {
            console.error('[batchAppendBasedOnRowHelpSelections]必须映射id字段。');
            return of(true);
        }
        frameId = frameId || this.viewModel.frameContext.frameId;
        if (!frameId) {
            console.error('[batchAppendBasedOnRowHelpSelections]无效的frameId.');
            return of(true);
        }
        const frameContext = this.getFrameContextById(frameId);
        if (!frameContext) {
            console.error('frameId is invalid!');
            return of(true);
        }
        setTimeout(() => {
            this.endEdit(frameContext).subscribe(() => {
                if (result && Array.isArray(result) && result.length > 0) {
                    const bindingPath = frameContext.viewModel.bindingPath || '/';
                    const bindingPaths = bindingPath.split('/').filter(p => p);
                    const defaultValues = [];
                    // 获取当前行
                    const bindingList = frameContext.bindingData.getValue(bindingPaths);
                    const currentRow = bindingList.currentItem;
                    const currentRowId = bindingList.currentId;
                    const currentEntity = this.getEntityByPath(frameContext, bindingPaths, currentRowId);
                    const headItem = result[0];
                    // 如果仅勾选一条，则应替换当前行的映射
                    if (result.length === 1) {
                        this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                        return of(true);
                    }
                    else {
                        const idMapField = mappings['id'];
                        const sourceItemId = this.getValueByPath(currentEntity, idMapField);
                        // 如果当前行没有映射或勾选结果中找不到当前行的映射
                        if (!sourceItemId || result.findIndex(item => item[bindingList.primaryKey] === sourceItemId) === -1) {
                            // 重新映射当前行
                            this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                            result = result.slice(1);
                        }
                        else if (sourceItemId) {
                            const index = result.findIndex(item => item[bindingList.primaryKey] === sourceItemId);
                            // 重新映射当前行
                            this.mappingRow(result[index], mappings, currentEntity, bindingPath);
                            result.splice(index, 1);
                        }
                        // 当前行处理完成
                        // 处理未映射的行
                        const emptyRows = bindingList.toArray().filter(bindingObject => {
                            const id = this.getValueByPath(bindingObject, mappings[bindingList.primaryKey]);
                            return !id;
                        });
                        if (emptyRows && emptyRows.length > 0) {
                            let rows = result;
                            if (result.length > emptyRows.length) {
                                rows = result.slice(0, emptyRows.length);
                                result = result.slice(emptyRows.length);
                            }
                            else {
                                result = [];
                            }
                            rows.forEach((item, index) => {
                                const targetItem = emptyRows[index];
                                const entity = this.getEntityByPath(frameContext, bindingPaths, targetItem.primaryKeyValue);
                                this.mappingRow(item, mappings, entity, bindingPath);
                            });
                        }
                        // 处理剩余勾选
                        result.forEach((item) => {
                            const defaultValue = {};
                            Object.keys(mappings).forEach((prop) => {
                                const value = this.getValueByPath(item, prop);
                                const fields = mappings[prop];
                                const groups = fields.split(',').filter(p => p);
                                groups.forEach(group => {
                                    const paths = group.split('.').filter(p => p);
                                    this.setValueByPath(defaultValue, paths.join('.'), value);
                                });
                            });
                            defaultValues.push(defaultValue);
                        });
                        if (defaultValues.length > 0) {
                            this.formLoadingService.show();
                            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                            this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide())).subscribe();
                        }
                    }
                }
            });
        }, 100);
        return of(true);
    }
    /**
     * 复制主表数据
     * @param id 要复制的数据id
     * @param fields 要复制的字段
     * @description 仅支持复制主表数据
     * @deprecated 该方法已被废弃，请使用clone方法替代。
     */
    copy(id) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const url = `${baseUri}/service/copymainobjvoaction`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const body = {
            requestInfo,
            dataID: id
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(() => {
            this.formLoadingService.hide();
        }), map((responseInfo) => {
            const returnValue = responseInfo.returnValue;
            const entity = this.repository.buildEntity(returnValue);
            this.repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 复制数据（支持主表、从表、从从表）
     * @param id 要复制的行
     * @param path 请求路径
     * @returns
     */
    clone(id, path) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!path) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        path = path.toLowerCase();
        const bindingPath = this.viewModel.bindingPath;
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const url = `${baseUri}${path}`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const ids = this.buildIds(bindingPath);
        ids.push(id);
        const body = {
            requestInfo,
            dataID: ids.join(',')
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(() => {
            this.formLoadingService.hide();
        }), map((responseInfo) => {
            const returnValue = responseInfo.returnValue;
            let entity = null;
            if (bindingPath.split('/').filter(p => p).length === 0) {
                entity = this.repository.buildEntity(returnValue);
                this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);
            }
            return entity;
        }));
    }
    //#region 旧的实现
    /**
     * 复制行
     * @param frameId frameId
     * @param ignoreFields 复制时忽略字段
     * @param repeat 重复复制次数，默认为1
     */
    copyRow(frameId, ignoreFields, repeat = 1) {
        if (typeof repeat !== 'number') {
            repeat = parseInt(repeat, 10);
        }
        if (repeat < 1) {
            throw new Error('ArgumentError: repeat must >= 1');
        }
        // 获取当前行
        const frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        const primaryValue = frameContext.bindingData.list.currentId;
        const bindingPath = frameContext.viewModel.bindingPath || '/';
        let bindingData = null;
        let currentItem = null;
        if (bindingPath === '/') {
            // 主表直接取当前行
            currentItem = frameContext.bindingData.list.currentItem;
        }
        else {
            // 取从表/从从表当前行
            const paths = bindingPath.split('/').filter(p => p);
            currentItem = frameContext.bindingData.getValue(paths).currentItem;
        }
        bindingData = currentItem.toJSON();
        if (!currentItem.primaryKeyValue) {
            if (this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            }
            return EMPTY;
        }
        const ignoreFieldsArray = ignoreFields.split(',').filter(item => item);
        const sources = new Array(repeat);
        return from(sources).pipe(concatMap(() => {
            let action$ = null;
            if (bindingPath !== '/') {
                const fullPath = this.buildPath(bindingPath, primaryValue);
                action$ = this.repository.appendByPath(fullPath);
            }
            else {
                action$ = this.repository.append();
            }
            return action$.pipe(tap((entity) => {
                // 修正实体主键
                bindingData[entity.primaryKey] = entity.primaryValue;
                // 忽略指定字段
                ignoreFieldsArray.forEach((field) => {
                    const extractedFields = field.split('.').filter(item => item);
                    if (extractedFields.length === 1) {
                        delete bindingData[field];
                    }
                    const parent = extractedFields.slice(0, -1).reduce((prev, current, index) => {
                        return prev[current];
                    }, bindingData);
                    delete parent[extractedFields[extractedFields.length - 1]];
                });
                bindingData = Object.assign({}, entity.toJSON(), bindingData);
                entity.load(bindingData, { loadChild: false });
            }), catchError(() => {
                return EMPTY;
            }));
        }));
    }
    /**
     * 增量多选帮助批量赋值帮助后事件
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param associatedField 关联字段
     */
    afterIncrementalSelectHelpClose(frameId, mapFields, associatedField) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        // tslint:disable-next-line: max-line-length
        // const mapping = '{"id":"userRef.userRef", "name":"name", "sex":"sex","age":"userRef.userRef_Age","address":"userRef.userRef_Address","birthday":"userRef.userRef_Birthday","height":"userRef.userRef_Height","isMarried":"userRef.userRef_IsMarried"}';
        if (!associatedField) {
            throw new Error('associated field can`t be empty.');
        }
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        const mappings = JSON.parse(mapFields);
        const foreignKey = associatedField;
        // 将选择人员保存到uistate中
        const rootFrameContext = this.viewModel.frameContext.root;
        // 不是bindingPath则按frameId处理
        let bindingPath = '/';
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            // 根据bindingPath获取bindingdata中现有数据
            const bindingPaths = bindingPath.split('/').filter(item => item);
            const currentData = this.viewModel.bindingData.getValue(bindingPaths);
            const currentDataArray = currentData.toArray();
            // 找到result中有，但bindingData中没有的，为待新增项
            const appends = [];
            result.reduce((prev, item) => {
                const itemId = item && item[currentData.primaryKey] || null;
                const isExist = currentDataArray.find((bindingObject) => bindingObject[foreignKey][foreignKey] === itemId);
                if (!isExist) {
                    prev.push(item);
                }
                return prev;
            }, appends);
            // 找到bindingData中有，result中没有的，为待删除项
            const removes = [];
            currentDataArray.reduce((results, item) => {
                const index = result.findIndex(selectItem => selectItem[currentData.primaryKey] === item[foreignKey][foreignKey]);
                if (index === -1) {
                    results.push(item.primaryKeyValue);
                }
                return results;
            }, removes);
            // console.log('addItems', appends, 'removeItems', removes);
            // 调用后端接口新增数据
            const addAction$ = from(appends).pipe(concatMap(item => {
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.appendByPath(path).pipe(tap((entity) => {
                    Object.keys(mappings).forEach(prop => {
                        const value = this.getValueByPath(item, prop);
                        const fields = mappings[prop];
                        const groups = fields.split(',').filter(p => p);
                        groups.forEach(group => {
                            const paths = group.split('.').filter(p => p);
                            this.setValueByPath(entity, paths.join('.'), value);
                        });
                    });
                }), catchError(() => {
                    return EMPTY;
                }));
            }));
            const removeAction$ = from(removes).pipe(concatMap(item => {
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.removeByPath(path, item).pipe(tap(() => {
                    const befRepository = this.repository;
                    befRepository.entityManager.removeEntityByPath(path, item);
                }), catchError(() => {
                    return EMPTY;
                }));
            }));
            if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {
                return of(true);
            }
            return concat(addAction$, removeAction$).pipe(catchError(() => EMPTY));
        }
        return of(true);
    }
    // todo:模拟用户操作，待后端接口支持主表批量新增后重写
    /**
     * 多选帮助批量赋值帮助前事件
     */
    beforeMultiSelectHelpOpen() {
        return this.clearHelpSelections();
    }
    /**
     * 多选帮助批量赋值帮助后事件
     * @param frameId 绑定路径
     * @param mapFields 字段映射
     * @param commandFrameId 回调命令所在frameId
     * @param commandName 回调命令
     * @deprecated 模拟用户操作，待批量赋值支持主表后废弃
     */
    afterMultiSelectHelpClose(frameId, mapFields, commandFrameId, commandName) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (result && Array.isArray(result)) {
            // 调用后端接口新增数据
            if (!result || result.length < 1) {
                return of(true);
            }
            this.onHelpClose.next({ frameId, mapFields, data: result, commandFrameId, commandName });
            return of(true);
        }
        return of(true);
    }
    /**
      * 帮助关闭后处理器
      * @param frameId frameid
      * @param mapFields mapFields
      * @param result 帮助数据结果
      */
    onHelpCloseHandler(frameId, mapFields, result) {
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        const mappings = JSON.parse(mapFields);
        // 不是bindingPath则按frameId处理
        let bindingPath = '/';
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // 将选择人员保存到uistate中
        const rootFrameContext = this.viewModel.frameContext.root;
        const befRepository = this.repository;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            const addAction$ = from(result).pipe(concatMap(item => {
                const requestInfo = befRepository.restService.buildRequestInfo();
                if (bindingPaths.length > 0) {
                    const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                    return befRepository.restService.createByPath(path, requestInfo).pipe(tap((responseInfo) => {
                        const data = responseInfo.returnValue;
                        const newEntity = befRepository.entityManager.appendEntityByPath(path, data, data);
                        Object.keys(mappings).forEach(prop => {
                            const value = this.getValueByPath(item, prop);
                            const fields = mappings[prop];
                            const groups = fields.split(',').filter(p => p);
                            groups.forEach(group => {
                                const paths = group.split('.').filter(p => p);
                                this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        return newEntity;
                    }));
                }
                else {
                    return befRepository.restService.create(null, requestInfo).pipe(tap((responseInfo) => {
                        const data = responseInfo.returnValue;
                        const newEntity = this.repository.buildEntity(data);
                        Object.keys(mappings).forEach(prop => {
                            const value = this.getValueByPath(item, prop);
                            const fields = mappings[prop];
                            const groups = fields.split(',').filter(p => p);
                            groups.forEach(group => {
                                const paths = group.split('.').filter(p => p);
                                this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        this.repository.entityCollection.addEntity(newEntity);
                        return newEntity;
                    }));
                }
            }));
            // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);
            if (this.formLoadingService) {
                this.suspendFrameContextEvent(frameId);
                this.formLoadingService.show();
                this.formLoadingService.setSuspend(true);
            }
            return addAction$.pipe(last()).pipe(switchMap(() => {
                const primaryValue = this.viewModel.bindingData.list.currentId;
                if (primaryValue) {
                    return befRepository.updateChangesById(primaryValue);
                }
                else {
                    return of(null);
                }
            })).subscribe(() => {
                if (this.formLoadingService) {
                    this.resumeFrameContextEvent(frameId);
                    this.formLoadingService.setSuspend(false);
                    this.formLoadingService.hide();
                }
            }, () => {
                if (this.formLoadingService) {
                    this.resumeFrameContextEvent(frameId);
                    this.formLoadingService.setSuspend(false);
                    this.formLoadingService.hide();
                }
            });
        }
        return of(null);
    }
    suspendFrameContextEvent(frameId) {
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = true;
        }
    }
    resumeFrameContextEvent(frameId) {
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = false;
            frameContext.appContext.messagePipe.next('bindData');
        }
    }
    //#endregion
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
    getValueByPath(target, path) {
        const paths = path.split('.');
        if (paths.length < 1) {
            return;
        }
        if (paths.length === 1) {
            return target[path];
        }
        let result = null;
        paths.forEach((prop, index) => {
            if (index === 0) {
                result = target && target[prop] || null;
            }
            else {
                result = result && result[prop] || null;
            }
        });
        return result;
    }
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    buildPath(bindingPath, id) {
        let path = '/' + id;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 获取绑定路径的当前行数组
     * @param bindingPath bindingPath
     * @returns
     */
    buildIds(bindingPath) {
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const primaryValue = this.viewModel.bindingData.list.currentId;
        const result = [];
        const paths = [];
        if (bindingPaths.length > 0) {
            result.push(primaryValue);
            // 从表或从从表要复制的行不一定是当前行，用户可以指定
            bindingPaths.pop();
            bindingPaths.forEach((path) => {
                paths.push(path);
                const bindingList = this.viewModel.bindingData.getValue(paths);
                if (bindingList) {
                    result.push(bindingList.currentId);
                }
            });
        }
        return result;
    }
    updateBindingData(input, ids) {
        const { controlType = null, value = null, options = {}, dataType = null } = input || {};
        if (controlType) {
            // 对帮助做特殊处理
            if (controlType === 'lookup') {
                const mapFields = options.mapFields;
                this.updateLookupField(ids, value, mapFields);
            }
            else {
                this.updateSimpleField(ids, value, input);
            }
        }
    }
    updateSimpleField(ids, value, column) {
        if (!column) {
            return;
        }
        const currentColumnType = column.dataType;
        // 存在行编辑器
        let result = value;
        if (currentColumnType === 'date') {
            let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');
            if (!dateStr) {
                dateStr = '0001-01-01T00:00:00';
            }
            result = dateStr;
        }
        else if (currentColumnType === 'number') {
            result = Number(value) || 0;
        }
        const field = column.field;
        ids.forEach(id => {
            this.updateBindingList(id, field, result);
        });
    }
    updateLookupField(ids, helpData, mapFields) {
        if (!mapFields) {
            return;
        }
        let helpFields = Object.keys(mapFields);
        const idIndex = helpFields.findIndex(item => item === 'id');
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = ['id', ...helpFields];
        }
        helpFields.forEach((helpField) => {
            let helpValue = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    helpValue = helpData.map((item) => {
                        return this.getValue(helpField, item);
                    }).join(',');
                }
                else {
                    helpValue = this.getValue(helpField, helpData);
                }
            }
            ids.forEach(id => {
                this.updateBindingList(id, mapFields[helpField], helpValue);
            });
        });
    }
    updateBindingList(primaryValue, propertyName, value) {
        const viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        const propertyNames = propertyName.split('.').filter(item => item);
        const bindingObject = this.bindingList.findById(primaryValue);
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            let targetBindingObject = null;
            const fpaths = propertyNames.slice(0, propertyNames.length - 1);
            const targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(prop => {
                targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject.setValue(targetPropertyName, value, true, true);
        }
    }
    getBindingPathArray() {
        const path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(n => n !== '');
        }
        return [];
    }
    getValue(f, data) {
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((a, b) => {
                return a[b];
            }, data);
        }
        return val;
    }
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.viewModel.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.viewModel.bindingData.getValue(filteredPaths);
    }
    /**
     * 根据映射将数据赋值给bindingData
     * @param data
     * @param mapFields
     * @param bindingData
     */
    mappingRow(data, mapFields, entity, bindingPath) {
        Object.keys(mapFields).forEach((prop) => {
            const value = this.getValueByPath(data, prop);
            const fields = mapFields[prop];
            const groups = fields.split(',').filter(p => p);
            groups.forEach(group => {
                const paths = group.split('.').filter(p => p);
                this.setValueByPath(entity, paths.join('.'), value);
            });
        });
    }
    /**
     * 通过frameId获取对应的组件上下文
     * @param frameId frameId
     * @returns
     */
    getFrameContextById(frameId) {
        if (!frameId) {
            return null;
        }
        const appContext = this.injector.get(AppContext, null);
        let frameContext = null;
        if (appContext) {
            frameContext = appContext.frameContextManager.getFrameContextById(frameId);
        }
        return frameContext;
    }
    getEntityByPath(frameContext, bindingPaths, currentId) {
        bindingPaths = [...bindingPaths];
        const id = frameContext.bindingData.list.currentId;
        const entity = frameContext.repository.entityCollection.getEntityById(id);
        let item = entity;
        const paths = [];
        const tailPath = bindingPaths.pop();
        const parent = bindingPaths.reduce((object, path) => {
            paths.push(path);
            if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {
                const value = object[path];
                if (value && value instanceof EntityList) {
                    const bindingList = frameContext.bindingData.getValue(paths);
                    const currentItemId = bindingList.currentId;
                    return value.get(currentItemId);
                }
                else {
                    return value;
                }
            }
            else {
                return null;
            }
        }, item);
        if (parent instanceof Entity) {
            const list = parent[tailPath];
            if (list) {
                return list.get(currentId);
            }
            else {
                throw new Error(`无效的bindingPath.`);
            }
        }
        else {
            throw new Error(`无效的bindingPath.`);
        }
    }
    endEdit(frameContext) {
        const appContext = frameContext && frameContext.getFormAppContext();
        return of(null).pipe(tap(() => {
            if (appContext) {
                appContext.messagePipe.next({ type: 'endEdit' });
            }
        }), 
        // todo: 不应该使用delay，应该串流
        delay(5));
    }
}
BatchEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BatchEditService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentManagerService },
    { type: ViewModel },
    { type: Repository },
    { type: BatchEditDialogService },
    { type: DateTimeHelperService },
    { type: LanguageService },
    { type: FormNotifyService }
];
//# sourceMappingURL=data:application/json;base64,