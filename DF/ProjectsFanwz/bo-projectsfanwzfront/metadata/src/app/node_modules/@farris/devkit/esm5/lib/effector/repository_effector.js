import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData } from '../binding-data/index';
import { EntityList } from '../entity/index';
import { NAMESPACE } from '../frame/tokens';
import { Repository } from '../repository/index';
/**
 * 实体副作用器
 * @description 将表达式计算结果赋值给实体属性
 */
var RepositoryEffector = /** @class */ (function () {
    function RepositoryEffector(injector, repository, namespace, bindingData) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.bindingData = bindingData;
        this.ns = namespace;
    }
    RepositoryEffector.prototype.effect = function (path, value, options) {
        if (!options || !options.path) {
            throw new Error('repository effector 需要指定行信息。');
        }
        var propertyPath = options.path;
        var rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
        var entity = this.repository.entityCollection.getEntityById(rowId);
        if (rowId && !entity) {
            console.error("\u627E\u4E0D\u5230id\uFF1A" + rowId + "\u5BF9\u5E94\u7684\u5B9E\u4F53\uFF01");
            return;
        }
        // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
        var propName = propertyPath.pop();
        var object = entity;
        for (var index = 1; index < propertyPath.length; index++) {
            var propertyName = propertyPath[index];
            if (object instanceof EntityList) {
                object = object.get(propertyName);
            }
            else {
                object = object[propertyName];
            }
        }
        if (object) {
            if (object[propName] !== value) {
                object[propName] = value;
            }
        }
        else {
            console.error("\u627E\u4E0D\u5230\u5B9E\u4F53\u5BF9\u5E94\u7684\u8DEF\u5F84\uFF1A" + propertyPath.push(propName));
        }
    };
    RepositoryEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RepositoryEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: BindingData }
    ]; };
    return RepositoryEffector;
}());
export { RepositoryEffector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9lZmZlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VmZmVjdG9yL3JlcG9zaXRvcnlfZWZmZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQVUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRDs7O0dBR0c7QUFDSDtJQUdFLDRCQUFvQixRQUFrQixFQUFVLFVBQThCLEVBQTZCLFNBQVMsRUFBVSxXQUF3QjtRQUFsSSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFBNkIsY0FBUyxHQUFULFNBQVMsQ0FBQTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3BKLElBQUksQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxtQ0FBTSxHQUFiLFVBQWMsSUFBWSxFQUFFLEtBQVUsRUFBRSxPQUFpQztRQUN2RSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2xDLElBQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBQ25GLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0JBQVMsS0FBSyx5Q0FBUSxDQUFDLENBQUM7WUFDdEMsT0FBTztTQUNSO1FBQ0QsaUdBQWlHO1FBQ2pHLElBQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNwQyxJQUFJLE1BQU0sR0FBUSxNQUFNLENBQUM7UUFDekIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDeEQsSUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLElBQUksTUFBTSxZQUFZLFVBQVUsRUFBRTtnQkFDaEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMvQjtTQUNGO1FBQ0QsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDMUI7U0FDRjthQUFNO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyx1RUFBYyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBRyxDQUFDLENBQUM7U0FDNUQ7SUFDSCxDQUFDOztnQkFwQ0YsVUFBVTs7OztnQkFWa0IsUUFBUTtnQkFLNUIsVUFBVTtnREFRZ0UsTUFBTSxTQUFDLFNBQVM7Z0JBWjFGLFdBQVc7O0lBOENwQix5QkFBQztDQUFBLEFBckNELElBcUNDO1NBcENZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ0RhdGEgfSBmcm9tICcuLi9iaW5kaW5nLWRhdGEvaW5kZXgnO1xyXG5pbXBvcnQgeyBFbnRpdHksIEVudGl0eUxpc3QgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XHJcbmltcG9ydCB7IE5BTUVTUEFDRSB9IGZyb20gJy4uL2ZyYW1lL3Rva2Vucyc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3J5L2luZGV4JztcclxuLyoqXHJcbiAqIOWunuS9k+WJr+S9nOeUqOWZqFxyXG4gKiBAZGVzY3JpcHRpb24g5bCG6KGo6L6+5byP6K6h566X57uT5p6c6LWL5YC857uZ5a6e5L2T5bGe5oCnXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXBvc2l0b3J5RWZmZWN0b3IgaW1wbGVtZW50cyBFeHByZXNzaW9uLkVmZmVjdG9yIHtcclxuICBwdWJsaWMgbnM6IHN0cmluZztcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT4sIEBJbmplY3QoTkFNRVNQQUNFKSBwcml2YXRlIG5hbWVzcGFjZSwgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpIHtcclxuICAgIHRoaXMubnMgPSBuYW1lc3BhY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZWZmZWN0KHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSwgb3B0aW9uczogRXhwcmVzc2lvbi5FZmZlY3RPcHRpb25zKSB7XHJcbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucGF0aCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcG9zaXRvcnkgZWZmZWN0b3Ig6ZyA6KaB5oyH5a6a6KGM5L+h5oGv44CCJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wZXJ0eVBhdGggPSBvcHRpb25zLnBhdGg7XHJcbiAgICBjb25zdCByb3dJZCA9IHByb3BlcnR5UGF0aFswXSB8fCB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudEl0ZW0ucHJpbWFyeUtleVZhbHVlO1xyXG4gICAgbGV0IGVudGl0eSA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQocm93SWQpO1xyXG4gICAgaWYgKHJvd0lkICYmICFlbnRpdHkpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihg5om+5LiN5YiwaWTvvJoke3Jvd0lkfeWvueW6lOeahOWunuS9k++8gWApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBwcm9wZXJ0eVBhdGggbGlrZSA6IFsxLCBjaGlsZDFzLCAxLjEsIGNoaWxkMnMsIDEuMS4xLHByb3BOYW1lXSBvciBbMSx1ZHQscHJvcE5hbWVdIG9yIFsxLHByb3BdXHJcbiAgICBjb25zdCBwcm9wTmFtZSA9IHByb3BlcnR5UGF0aC5wb3AoKTtcclxuICAgIGxldCBvYmplY3Q6IGFueSA9IGVudGl0eTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBwcm9wZXJ0eVBhdGgubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IHByb3BlcnR5UGF0aFtpbmRleF07XHJcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBFbnRpdHlMaXN0KSB7XHJcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmdldChwcm9wZXJ0eU5hbWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtwcm9wZXJ0eU5hbWVdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAob2JqZWN0KSB7XHJcbiAgICAgIGlmIChvYmplY3RbcHJvcE5hbWVdICE9PSB2YWx1ZSkge1xyXG4gICAgICAgIG9iamVjdFtwcm9wTmFtZV0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcihg5om+5LiN5Yiw5a6e5L2T5a+55bqU55qE6Lev5b6E77yaJHtwcm9wZXJ0eVBhdGgucHVzaChwcm9wTmFtZSl9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19