/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, HostBinding, EventEmitter, ElementRef, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
export class FDropdownDirective {
    /**
     * @param {?} elementRef
     * @param {?} render
     */
    constructor(elementRef, render) {
        this.render = render;
        // tslint:disable-next-line:no-input-rename
        this._internalOpen = false;
        // 计算宽度
        this._calculateMenu = false;
        // 是否自动纠正位置
        this.autoRectify = false;
        this.dpChangeEvent = new EventEmitter();
        this._placement = 'bottom'; // 记录 position
        // 记录 position
        this.isSubDP = false; // 是否是子下拉
        this.isOpenState = new Subject();
        this._seflEl = elementRef.nativeElement;
        this.isOpenState.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (this._internalOpen !== state) {
                this._internalOpen = state;
                if (this._internalOpen) {
                    this.render.addClass(this._seflEl, 'show');
                }
                else {
                    this.render.removeClass(this._seflEl, 'show');
                }
            }
        }));
    }
    // 在外面强制控制关闭状态
    /**
     * @param {?} value
     * @return {?}
     */
    set forceState(value) {
        if (value && value.length) {
            this.close();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set openState(value) {
        this._internalOpen = value[0];
        this.isOpenState.next(value[0]);
    }
    // 是否是子下拉
    /**
     * @param {?} value
     * @return {?}
     */
    set placement(value) {
        // 如果相等
        if (!value) {
            return;
        }
        //
        if (value !== this._placement) {
            /** @type {?} */
            const newClsName = this._getClsName(value);
            /** @type {?} */
            const oldClsName = this._getClsName(this._placement);
            this.render.removeClass(this._seflEl, oldClsName);
            this.render.addClass(this._seflEl, newClsName);
            this._placement = value;
        }
    }
    /**
     * @return {?}
     */
    get placement() {
        return this._placement;
    }
    // @HostBinding('class.show')
    /**
     * @return {?}
     */
    get isOpen() {
        return this._internalOpen;
    }
    /**
     * @return {?}
     */
    get submenuCls() {
        return this.isSubDP;
    }
    /**
     * @return {?}
     */
    get dropdownCls() {
        return !this.isSubDP;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getNativeElement() {
        return this._seflEl;
    }
    /**
     * @private
     * @return {?}
     */
    bindDocumentEvents() {
        //   this.ngzone.runOutsideAngular(() => {
        this.documentClickEventListener = this.onDocumentClick.bind(this);
        document.addEventListener('click', this.documentClickEventListener);
        // 绑定被操作native时触发
        this.selfDefineEventListener = this.onSelfDefineHandler.bind(this);
        this._seflEl.addEventListener('selfClose', this.selfDefineEventListener);
        // });
    }
    /**
     * @private
     * @return {?}
     */
    onSelfDefineHandler() {
        this.close();
    }
    /**
     * @private
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentClickEventListener) {
            document.removeEventListener('click', this.documentClickEventListener);
            this.documentClickEventListener = null;
        }
        if (this.selfDefineEventListener) {
            this._seflEl.removeEventListener('selfClose', this.selfDefineEventListener);
            this.selfDefineEventListener = null;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        // 如果已经关闭，不需要再响应
        if (!this._internalOpen) {
            return;
        }
        if (event.button !== 2 && !this.isEventFromToggle(event)) {
            this.close();
        }
    }
    // 判断menu展开时是否要计算
    /**
     * @return {?}
     */
    needToCalculate() {
        return this.autoRectify && this._calculateMenu;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetCalculate(value) {
        this._calculateMenu = value;
    }
    /**
     * @return {?}
     */
    open() {
        if (!this._internalOpen) {
            this.closeSiblingDropdowns();
            this._calculateMenu = true;
            this.render.addClass(this._seflEl, 'show');
            this.isOpenState.next(true);
            this.dpChangeEvent.emit(true);
            // 执行绑定事件
            this.bindDocumentEvents();
        }
    }
    /**
     * @return {?}
     */
    close() {
        if (this._internalOpen) {
            this._calculateMenu = false;
            this.render.removeClass(this._seflEl, 'show');
            this.isOpenState.next(false);
            this.dpChangeEvent.emit(false);
            this.unbindDocumentEvents();
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this._internalOpen) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    getOpenState() {
        return this.isOpenState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isOpenState.unsubscribe();
        this.unbindDocumentEvents();
    }
    /**
     * @private
     * @return {?}
     */
    closeSiblingDropdowns() {
        /** @type {?} */
        let dpParentEl = this._seflEl.parentNode;
        if (dpParentEl && dpParentEl['className'].indexOf('dropdown-menu') > -1) {
            /** @type {?} */
            let dropdowns = dpParentEl.querySelectorAll('[fDropdown]');
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf('show')) {
                        // 触发事件试试
                        this.compatibleDispatchEvent(dropdowns[k], 'selfClose');
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    compatibleDispatchEvent(eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    }
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    _getClsName(position) {
        /** @type {?} */
        let className = '';
        switch (position) {
            case 'top-right':
            case 'top':
                // 朝上，朝上-朝右
                className = 'dropup';
                break;
            case 'top-left':
                // 朝上-朝左
                className = 'dropup-left';
                break;
            case 'left-bottom':
            case 'left':
                // 横向——朝左——朝下
                className = 'dropleft';
                break;
            case 'left-top':
                // 横向——朝左——朝上
                className = 'dropleft-up';
                break;
            case 'right-bottom':
            case 'right':
                // 横向——朝右——朝下
                className = 'dropright';
                break;
            case 'right-top':
                // 横向——朝右——朝上
                className = 'dropright-up';
                break;
            case 'bottom-left':
                // 朝下——朝左
                className = 'dropdown-left';
                break;
            case 'bottom-right':
                className = 'dropdown';
                break;
            default:
                // 朝下，朝下——朝右
                className = 'dropdown';
        }
        return className;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isEventFromToggle(event) {
        /** @type {?} */
        const result = this.toggleElement && this.toggleElement.contains(event.target);
        return result;
    }
    /**
     * @return {?}
     */
    getRectifyReferenceEl() {
        /** @type {?} */
        var resultWidth = window.innerWidth;
        /** @type {?} */
        var resultHeight = window.innerHeight;
        // 横向计算
        if (this.rectifyReference) {
            resultWidth = this.rectifyReference.getBoundingClientRect().right;
        }
        // 纵向计算
        if (this.rectifyReferenceV) {
            resultWidth = this.rectifyReference.getBoundingClientRect().bottom;
        }
        return { width: resultWidth, height: resultHeight };
    }
}
FDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fDropdown]',
                exportAs: 'fDropdown'
            },] }
];
/** @nocollapse */
FDropdownDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FDropdownDirective.propDecorators = {
    rectifyReference: [{ type: Input }],
    rectifyReferenceV: [{ type: Input }],
    autoRectify: [{ type: Input }],
    forceState: [{ type: Input, args: ['forceState',] }],
    openState: [{ type: Input, args: ['open',] }],
    dpChangeEvent: [{ type: Output }],
    isSubDP: [{ type: Input }],
    placement: [{ type: Input, args: ['placement',] }],
    submenuCls: [{ type: HostBinding, args: ['class.dropdown-submenu',] }],
    dropdownCls: [{ type: HostBinding, args: ['class.dropdown',] }]
};
if (false) {
    /** @type {?} */
    FDropdownDirective.prototype.toggleElement;
    /** @type {?} */
    FDropdownDirective.prototype.documentClickEventListener;
    /** @type {?} */
    FDropdownDirective.prototype.selfDefineEventListener;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._seflEl;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._internalOpen;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._calculateMenu;
    /** @type {?} */
    FDropdownDirective.prototype.rectifyReference;
    /** @type {?} */
    FDropdownDirective.prototype.rectifyReferenceV;
    /** @type {?} */
    FDropdownDirective.prototype.autoRectify;
    /** @type {?} */
    FDropdownDirective.prototype.dpChangeEvent;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype._placement;
    /** @type {?} */
    FDropdownDirective.prototype.isSubDP;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.isOpenState;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FDropdownDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,