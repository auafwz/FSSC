import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { FieldMetadataUtil } from '@farris/devkit';
/**
 * 父子树仓库
 */
class ParentTreeRepository {
    /**
     * 添加兄弟节点
     */
    addSibling(repository, id) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSiblingUri = `${baseUri}/service/parenthierarchycreatesibling`;
        const body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加兄弟节点
     */
    addChild(repository, parentId) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addChildUri = `${baseUri}/service/parenthierarchycreatechildlayer`;
        const body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加子表兄弟节点
     */
    addSubSibling(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubSiblingUri = `${baseUri}/service/childnodeparenthierarchycreatesibling`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    /**
     * 添加子表子节点
     */
    addSubChild(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubChildUri = `${baseUri}/service/childnodeparenthierarchycreatechildlayer`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let paths = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);
            return entity;
        }));
    }
    getPaths(nodes, ids) {
        let paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (let i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + `/${ids[i]}`;
                    paths = paths + `/${nodes[i]}s`;
                }
            }
        }
        return paths;
    }
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    loadByParentId(repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow = false, pagination, frameContext, reload = false) {
        const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        const restService = repository.restService;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        const isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        const entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        const requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map((responseInfo) => {
            const paginationInfo = this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    }
    // tslint:disable-next-line: max-line-length
    loadFullTree(repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const queryUrl = `${baseUri}/service/parentidfulltreequery`;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        const body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType,
            loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap((responseInfo) => {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                const frameContext = context.frameContext;
                const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    const list = responseInfo.returnValue.result;
                    const selectedRowId = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);
                    const hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);
                }
            }
        }), map((responseInfo) => {
            const frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    }
    /**
     * 插入对父节点的过滤
     */
    buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        const parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';
        const parentFilterArray = [
            {
                "FilterField": `${originalHierarchyInfoKey}.Layer`,
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        if (parentElement) {
            parentFilterArray.push({
                "FilterField": `${originalHierarchyInfoKey}.ParentElement`,
                "Value": parentElement,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 0
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    }
    buildEntityFilter(filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter) {
            filter = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].Relation = 0;
        }
        const entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 清空后代实体
     * @description parentHierarchyInfo中layer为要清空后代节点的layer，但里面的parentElement不是父级的id，而是要清空后代节点的id
     */
    clearDescendantEntities(repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow = false) {
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        const nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);
        if (frozenCurrentRow) {
            repository.entityCollection.removeEntities((entity) => {
                const id = entity[entity.primaryKey];
                return nodes.includes(id);
            });
        }
        else {
            repository.entityCollection.removeData((entity) => {
                const id = entity[entity.primaryKey];
                return nodes.includes(id);
            });
        }
    }
    /**
     * 获取某个节点的所有子节点
     * @param repository repository
     * @param hierarchyInfokey hierarchyInfokey
     * @param parentHierarchyInfo parentHierarchyInfo
     */
    getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo) {
        const fparentElement = parentHierarchyInfo.id;
        const flayer = parentHierarchyInfo.layer;
        let nodes = [];
        repository.entityCollection.getAllEntities().forEach(entity => {
            const hierarchyInfo = entity[hierarchyInfokey];
            const parentElement = hierarchyInfo.parentElement;
            const layer = hierarchyInfo.layer;
            const result = layer >= (flayer + 1) && parentElement === fparentElement;
            if (result) {
                const id = entity[entity.primaryKey];
                nodes.push(id);
                const childHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfokey, id);
                const childs = this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);
                if (childs && childs.length > 0) {
                    nodes = nodes.concat(childs);
                }
            }
        });
        return nodes;
    }
    /**
     * 获取实体的分级信息
     */
    getHierarchyInfoById(repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        const entity = repository.entityCollection.getEntityById(id);
        const hierarchyInfoEntity = entity[hierarchyInfokey];
        const result = hierarchyInfoEntity.toJSON();
        result['id'] = id;
        return result;
    }
    getHierarchyInfo(entity, hierarchyInfokey) {
        return entity[hierarchyInfokey];
    }
    /**
     * 获取分级码的原始的字段名
     */
    getOriginalHierarchyInfoKey(repository, hierarchyInfokey) {
        const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    }
    getPaginationInfo(responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    }
    findParent(hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(item => {
            const currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;
        });
    }
    getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository) {
        let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        const ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    }
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    getChildren(repository, hierarchyInfoKey, id) {
        const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        const layer = hierarchyInfo.layer;
        const parentElement = hierarchyInfo.parentElement;
        const entities = repository.entityCollection.getEntities((entity) => {
            const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);
            const matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    }
}
export { ParentTreeRepository };
//# sourceMappingURL=data:application/json;base64,