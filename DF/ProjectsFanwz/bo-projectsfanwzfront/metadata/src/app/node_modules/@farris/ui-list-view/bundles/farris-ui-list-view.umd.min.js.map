{"version":3,"sources":["ng://@farris/ui-list-view/lib/list-view.service.ts","node_modules/tslib/tslib.es6.js","ng://@farris/ui-list-view/lib/template.directive.ts","ng://@farris/ui-list-view/lib/list-view.component.ts","ng://@farris/ui-list-view/lib/component/list-view-checkout.component.ts","ng://@farris/ui-list-view/lib/selected-listitem-formatter.pipe.ts","ng://@farris/ui-list-view/lib/list-view.module.ts"],"names":["ListViewService","Injectable","args","providedIn","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","ListViewHeaderTemplateDirective","Directive","selector","TemplateRef","template","this","ListViewTemplateDirective","ListViewFooterTemplateDirective","ListViewEmptyTemplateDirective","Object","defineProperty","ListViewComponent","prototype","_activeIndex","val","dataInit","_pageList","pager","setPageList","fill","ngOnInit","currentData","data","paginationOptions","id","itemsPerPage","pageSize","currentPage","pageIndex","pageList","totalItems","total","remote","pagerOnServer","ngOnChanges","changes","_this","isFirstChange","checkValues","undefined","differenceBy","currentValue","previousValue","v","enableMorePageSelect","checkRows","checkItems","selectDataListWithOtherPager","ids","map","listidName","checkedItems","ngAfterViewInit","ngAfterContentInit","searchList","searchField","filter","list","result","listValue","values","toString","includes","listdata","searchValue","listSelect","event","listItem","index","checkChangeEvent","checkChange","emit","multipleSelect","selectItemIndex","selectDataList","findIndex","item","getKey","splice","updateDataListForMorePager","find","unshift","clickItem","listClick","checked","onCheckValuesChange","hasOwnProperty","getSelect","changeData","state","sort","sortkeyName","sortType","compare","sortResult","selectRow","primaryValue","row","cdr","markForCheck","KeyName","type","obj1","obj2","val1","val2","getItemActive","onPageChange","page","pageChanged","pageInfo","onPageSizeChange","pageLength","Math","floor","pageSizeChanged","getCurrentData","getSelectData","setData","listviewData","activeIndex","dataItem","detectChanges","active","Array","isArray","indexOf","a","checkItemsChange","items","instance","newCheckeds_1","sameBy","forEach","listCheckAll","listCheckAllCancel","checkValuesChange","onMouseEnter","$event","stopPropagation","mouseInSelectedList","openSelectedList","closeSelectedList","onDelSelectedItem","updateCheckedValues","onClearSelected","onSelectListPanelClose","clearCheckeds","clearAll","_setItemsCheckedStatus","unCheckItems","Component","ElementRef","Renderer2","ChangeDetectorRef","ContentChild","read","ViewChild","Input","Output","HostBinding","el","renderer","showEmpty","emptyTemplate","supportPaging","showSelectedList","selectedItemFormat","cardLayout","EventEmitter","maxSize","directionLinks","autoHide","responsive","labels","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","b","fn","s","Set","has","ListViewCheckoutComponent","handleClick","disabled","checkedChange","originalEvent","SelectedListFormatPipe","transform","formatter","idField_1","listViewRef","d","text","txt","keys","k","join","Pipe","name","ListViewModule","NgModule","declarations","imports","CommonModule","FormsModule","LocaleModule","forRoot","FarrisCommonModule","PaginationModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ListViewService {\r\n\r\n  constructor() { }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n\r\n@Directive({\r\n  selector: '[listViewHeader]'\r\n})\r\nexport class ListViewHeaderTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[listTemplate]'\r\n})\r\nexport class ListViewTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[listViewFooter]'\r\n})\r\nexport class ListViewFooterTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[listViewEmpty]'\r\n})\r\nexport class ListViewEmptyTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}","import {\r\n    Component, OnInit, AfterContentInit, ElementRef, TemplateRef, ContentChild, Output, EventEmitter, Input, Renderer2, ViewChild,\r\n    AfterViewInit, HostBinding, SimpleChanges, OnChanges, ChangeDetectorRef, DoCheck\r\n} from '@angular/core';\r\nimport {\r\n    ListViewHeaderTemplateDirective,\r\n    ListViewTemplateDirective,\r\n    ListViewFooterTemplateDirective,\r\n    ListViewEmptyTemplateDirective,\r\n} from './template.directive';\r\n\r\nimport { PaginationInstance, PaginationControlsComponent } from '@farris/ui-pagination';\r\n\r\n\r\n@Component({\r\n    selector: 'farris-list-view',\r\n    templateUrl: './list-view.component.html',\r\n    styleUrls: ['./list-view.component.scss']\r\n})\r\nexport class ListViewComponent implements OnInit, OnChanges, AfterContentInit, AfterViewInit {\r\n\r\n    @ContentChild(ListViewHeaderTemplateDirective, { read: TemplateRef }) headerTemplate: TemplateRef<any>;\r\n    @ContentChild(ListViewTemplateDirective, { read: TemplateRef }) listTemplate: TemplateRef<any>;\r\n    @ContentChild(ListViewFooterTemplateDirective, { read: TemplateRef }) footerTemplate: TemplateRef<any>;\r\n    @ContentChild(ListViewEmptyTemplateDirective, { read: TemplateRef }) emptyDataTemplate: TemplateRef<any>;\r\n\r\n    @ViewChild('listGroup') listGroup: ElementRef;\r\n\r\n\r\n    @ViewChild('pager') pager: PaginationControlsComponent;\r\n\r\n    // @Input() height:number;\r\n    /** åè¡¨æ°æ® */\r\n    @Input() data = [];\r\n\r\n    @Input() id: string;\r\n\r\n    /** æ°æ®ä¸ºç©ºæ¯å¦å±ç¤ºé»è®¤ */\r\n    @Input() showEmpty = true;\r\n    /** æ¯å¦èªå®ä¹ç©ºæ°æ®æ¨¡æ¿ */\r\n    @Input() emptyTemplate = false;\r\n    /** æ¯å¦æ¯æå¤é é»è®¤ä¸ºfalse */\r\n    @Input() multipleSelect = false;\r\n\r\n    /** æ¯å¦æ¯æåé¡µ é»è®¤false */\r\n    @Input() supportPaging = false;\r\n\r\n    // é»è®¤åé¡µ\r\n    @Input() pagerOnServer = true;\r\n    @Input() pageSize = 10;\r\n    @Input() pageIndex = 1;\r\n    /** å¯ç¨è·¨é¡µå¤é */\r\n    @Input() enableMorePageSelect = false;\r\n    @Input() showSelectedList = false;\r\n    @Input() selectedItemFormat: (item: any) => string = null;\r\n\r\n    // æ¯å¦å¹³éº\r\n    @Input() fill = false;\r\n    // æ¯å¦æ¨ªåæå\r\n    @Input() cardLayout = false;\r\n\r\n    _activeIndex: number;\r\n    get activeIndex() {\r\n        return this._activeIndex;\r\n    }\r\n    @Input() set activeIndex(val) {\r\n        this._activeIndex = val;\r\n        this.dataInit();\r\n    }\r\n\r\n    @Input() listClassName: string;\r\n    /**\r\n     * å¾éå¼\r\n     */\r\n    @Input() checkValues: any[] = [];\r\n    @Output() checkValuesChange: EventEmitter<any[]> = new EventEmitter<any[]>();\r\n\r\n    @Input() checkItems = [];\r\n    @Input() checkItemsChange: EventEmitter<{items: any[], instance: any}> = new EventEmitter<{items: [], instance: any}>();\r\n\r\n    // @Input() borderBottom:boolean = true;\r\n\r\n    private _pageList = [10, 20, 30, 50];\r\n\r\n    get pageList() {\r\n        return this._pageList;\r\n    }\r\n    @Input() set pageList(val) {\r\n        this._pageList = val;\r\n        if (this.pager) {\r\n            this.pager.setPageList(val);\r\n        }\r\n    }\r\n    @Input() total = 0;\r\n\r\n    /** ä½ä¸ºå¯ä¸æ è¯çæ°æ®keyå¼ å¦ææ²¡ä¼  å¯ä¸æ è¯ä¸ºindexå¼ */\r\n    @Input() listidName = 'id';\r\n\r\n    @HostBinding('class.f-listview-fill') get listviewFill() { return this.fill; }\r\n\r\n\r\n    /** ç¹å»æä¸è¡å */\r\n    @Output() listClick = new EventEmitter();\r\n    /** å¤éæ¡ éä¸­ç¶æåå */\r\n    @Output() checkChange = new EventEmitter();\r\n\r\n    // åé¡µäºä»¶\r\n    @Output() pageChanged = new EventEmitter();\r\n    @Output() pageSizeChanged = new EventEmitter();\r\n\r\n    /** å½åå±ç¤ºåè¡¨æ°æ® */\r\n    currentData = [];\r\n\r\n    /** éä¸­çåè¡¨æ°ç» */\r\n    selectDataList = [];\r\n    /** è·¨é¡µå¤éè®°å½ */\r\n    selectDataListWithOtherPager = [];\r\n\r\n    // å½åç¹å»\r\n    public clickItem: any;\r\n\r\n    public maxSize = 7;\r\n    public directionLinks = true;\r\n    public autoHide = false;\r\n    public responsive = true;\r\n    public paginationOptions: PaginationInstance = {\r\n        id: 'Farris-listView-Pagination',\r\n        itemsPerPage: this.pageSize,\r\n        currentPage: this.pageIndex,\r\n        pageList: this.pageList,\r\n        totalItems: this.total\r\n    };\r\n\r\n    public labels: any = {\r\n        previousLabel: ' ',\r\n        nextLabel: ' ',\r\n        screenReaderPaginationLabel: 'Pagination',\r\n        screenReaderPageLabel: 'page',\r\n        screenReaderCurrentLabel: `You're on page`\r\n    };\r\n\r\n    mouseInSelectedList = false;\r\n    openSelectedList = false;\r\n    constructor(private el: ElementRef, private renderer: Renderer2, private cdr: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this.currentData = this.data;\r\n        this.dataInit();\r\n        this.paginationOptions = {\r\n            id: 'Farris-listView-Pagination',\r\n            itemsPerPage: this.pageSize,\r\n            currentPage: this.pageIndex,\r\n            pageList: this.pageList,\r\n            totalItems: this.total,\r\n            remote: this.pagerOnServer\r\n        };\r\n        if (this.id) {\r\n            this.paginationOptions.id = this.paginationOptions.id + this.id;\r\n        }\r\n    }\r\n\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.data && !changes.data.isFirstChange()) {\r\n            this.currentData = this.data;\r\n            this.dataInit();\r\n        }\r\n        if (changes['total'] && this.total && this.paginationOptions) {\r\n            this.paginationOptions['totalItems'] = this.total;\r\n        }\r\n        if (changes['pageIndex'] && this.pageIndex && this.paginationOptions) {\r\n            this.paginationOptions['currentPage'] = this.pageIndex;\r\n        }\r\n        if (changes && changes.checkValues !== undefined && !changes.checkValues.isFirstChange()) {\r\n            const change = this.differenceBy(changes.checkValues.currentValue || [], changes.checkValues.previousValue || [], v => {\r\n                return v;\r\n            });\r\n            if (change) {\r\n                if (!this.enableMorePageSelect) {\r\n                    this.checkRows(this.checkValues);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (changes.checkItems && !changes.checkItems.isFirstChange()) {\r\n            this.selectDataListWithOtherPager = [...this.checkItems];\r\n            const ids = this.checkItems.map(n => n[this.listidName]);\r\n            this.checkedItems(ids, false);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n    }\r\n    ngAfterContentInit() {\r\n\r\n    }\r\n\r\n    /** é»è®¤æç´¢æ¨¡æ¿ ç¹å»æç´¢ */\r\n    searchList(searchField) {\r\n        if (searchField !== '' && this.data && this.data.length) {\r\n            this.currentData = this.data.filter((list) => {\r\n                let result;\r\n                const listValue = Object.values(list);\r\n                for (let i = 0; i < listValue.length; i++) {\r\n                    if (typeof listValue[i] == 'string') {\r\n                        if (listValue[i].toString().includes(searchField)) {\r\n                            result = listValue[i].toString().includes(searchField);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return result;\r\n            });\r\n        } else {\r\n            this.currentData = this.data;\r\n        }\r\n        return { listdata: this.currentData, searchValue: searchField, length: this.currentData.length }\r\n    }\r\n\r\n    /** ç¹å»æä¸åäºä»¶ */\r\n    listSelect(event, listItem, index, checkChangeEvent: boolean = false) {\r\n        if (listItem['unClick'] || listItem['selectDisable']) {\r\n            return;\r\n        } else {\r\n            this.checkChange.emit({ listdata: listItem, index });\r\n            if (this.multipleSelect) {\r\n                if (listItem['checked']) {\r\n                    // æ¯æå¤é å é¤è¯¥éä¸­è¡\r\n                    const selectItemIndex = this.selectDataList.findIndex((item, i) => {\r\n                        return this.getKey(item, i) === this.getKey(listItem, index);\r\n                    });\r\n                    this.selectDataList.splice(selectItemIndex, 1);\r\n                    this.updateDataListForMorePager('remove', listItem);\r\n\r\n                } else {\r\n                    // æ¯æå¤é æå¥è¯¥éä¸­è¡\r\n                    const result = this.selectDataList.find((value, i) => {\r\n                        return this.getKey(value, i) === this.getKey(listItem, index);\r\n                    });\r\n                    if (!result) {\r\n                        this.selectDataList.unshift(listItem);\r\n                        this.updateDataListForMorePager('append', listItem);\r\n                    }\r\n                }\r\n                listItem['checked'] = !listItem['checked'];\r\n\r\n            } else {\r\n                // ä¸æ¯æå¤é æ¿æ¢å½åéä¸­è¡\r\n                this.selectDataList = [];\r\n                this.selectDataList.push(listItem);\r\n            }\r\n            if (!checkChangeEvent) {\r\n                this.clickItem = listItem;\r\n            }\r\n            this.listClick.emit({ data: this.selectDataList, index, checkChangeEvent });\r\n        }\r\n        if (this.multipleSelect) {\r\n            let ids = this.data.filter(item => !!item.checked).map(item => item[this.listidName]);\r\n            if (this.enableMorePageSelect) {\r\n                ids = this.selectDataListWithOtherPager.map(item => item[this.listidName]);\r\n            }\r\n            this.onCheckValuesChange(ids);\r\n        }\r\n    }\r\n\r\n    /** è·å¾æ¯ä¸è¡list å¯ä¸æ è¯ */\r\n    getKey(list, index) {\r\n        if (this.listidName && list.hasOwnProperty(this.listidName)) {\r\n            return list[this.listidName];\r\n        } else {\r\n            return index;\r\n        }\r\n    }\r\n\r\n    /** checkboxç¶æåå */\r\n    getSelect(event, changeData, i) {\r\n        const state = event.checked;\r\n        this.listSelect(state, changeData, i, true);\r\n    }\r\n\r\n    /** æåºäºä»¶ */\r\n    sort(sortkeyName, sortType = 'asc') {\r\n        this.currentData.sort(this.compare(sortkeyName, sortType));\r\n        return { sortResult: { listdata: this.currentData, sortkeyName, sortType } };\r\n    }\r\n\r\n\r\n    public selectRow(primaryValue: any) {\r\n        if (this.currentData && this.currentData.length > 0) {\r\n            const row = this.currentData.find(item => item[this.listidName] === primaryValue);\r\n            if (row) {\r\n                this.clickItem = row;\r\n                this.cdr.markForCheck();\r\n            }\r\n        }\r\n\r\n    }\r\n    private compare(KeyName, type) {\r\n        if (type === 'desc') {\r\n            return (obj1, obj2) => {\r\n                const val1 = obj1[KeyName];\r\n                const val2 = obj2[KeyName];\r\n                if (val2 < val1) {\r\n                    return 1;\r\n                } else if (val2 > val1) {\r\n                    return -1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            };\r\n        }\r\n        if (type === 'asc') {\r\n            return (obj1, obj2) => {\r\n                const val1 = obj1[KeyName];\r\n                const val2 = obj2[KeyName];\r\n                if (val2 > val1) {\r\n                    return 1;\r\n                } else if (val2 < val1) {\r\n                    return -1;\r\n                } else { return 0; }\r\n            };\r\n        }\r\n    }\r\n\r\n    getItemActive(item) {\r\n        // ä¸ç®¡æ¯å¦å¼å¯å¤éï¼å½åè¡åªæä¸è¡\r\n        if (this.listidName && this.clickItem) {\r\n            return item[this.listidName] === this.clickItem[this.listidName];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    onPageChange(page: { pageIndex: number, pageSize: number }) {\r\n        if (this.pageIndex !== page.pageIndex) {\r\n            this.pageIndex = page.pageIndex;\r\n            this.paginationOptions.currentPage = page.pageIndex;\r\n            this.pageChanged.emit({ pageInfo: page });\r\n        }\r\n    }\r\n\r\n    onPageSizeChange(pageSize: number) {\r\n        // console.log(this.pageSize !== pageSize && this.total);\r\n        if (this.pageSize !== pageSize && this.total) {\r\n            this.paginationOptions.itemsPerPage = pageSize;\r\n            this.pageSize = pageSize;\r\n\r\n            const total = this.total;\r\n            let pageLength = Math.floor(total / pageSize);\r\n            if (total % pageSize > 0) {\r\n                pageLength += 1;\r\n            }\r\n\r\n            if (pageLength && this.pageIndex > pageLength) {\r\n                this.pageIndex = pageLength;\r\n                this.paginationOptions.currentPage = this.pageIndex;\r\n            }\r\n\r\n            this.pageSizeChanged.emit({ pageInfo: { pageIndex: this.pageIndex, pageSize } });\r\n        }\r\n    }\r\n\r\n    getCurrentData() {\r\n        return this.currentData;\r\n    }\r\n\r\n    getSelectData() {\r\n        return this.selectDataList;\r\n    }\r\n    /** æ¯æéæ°è®¾ç½®listviewæ°æ® */\r\n    setData(listviewData) {\r\n        this.currentData = listviewData;\r\n        this.data = listviewData;\r\n        this.dataInit();\r\n    }\r\n\r\n    dataInit() {\r\n        if (this.data && this.data.length) {\r\n            this.selectDataList = this.data.filter((list) => {\r\n                return list['checked'];\r\n            });\r\n            if (this.activeIndex >= 0 && this.activeIndex <= (this.data.length - 1)) {\r\n                const dataItem = this.data[this.activeIndex];\r\n                if (dataItem) {\r\n                    this.clickItem = dataItem;\r\n                    this.selectDataList.push(this.clickItem);\r\n                }\r\n            } else if (this.activeIndex < 0) {\r\n                return;\r\n            } else {\r\n                if (!this.selectDataList.length && !this.multipleSelect) {\r\n                    this.selectDataList.push(this.data[0]);\r\n                }\r\n                this.clickItem = this.data[0];\r\n            }\r\n        }\r\n\r\n        this.updateDataListForMorePager();\r\n\r\n\r\n        if (this.cdr) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    private updateDataListForMorePager(active: 'remove'|'append'|'' = '', listItem?: any, emit = true) {\r\n        if (this.multipleSelect && this.enableMorePageSelect) {\r\n\r\n            if (active === 'remove' && listItem) {\r\n                if (!Array.isArray(listItem)) {\r\n                    this.selectDataListWithOtherPager =\r\n                        this.selectDataListWithOtherPager.filter(n => {\r\n                            if (typeof listItem === 'object') {\r\n                                return n[this.listidName] != listItem[this.listidName];\r\n                            } else {\r\n                                return n[this.listidName] != listItem;\r\n                            }\r\n                        });\r\n                } else {\r\n                    this.selectDataListWithOtherPager =\r\n                        this.selectDataListWithOtherPager.filter(n => {\r\n                            return listItem.indexOf(a => a[this.listidName] === n[this.listidName]) === -1;\r\n                        });\r\n                }\r\n\r\n                if (emit) {\r\n                    this.checkItemsChange.emit({items: [...this.selectDataListWithOtherPager], instance: this});\r\n                }\r\n\r\n            } else if (active === 'append') {\r\n                if (!Array.isArray(listItem)) {\r\n                    this.selectDataListWithOtherPager = [...this.selectDataListWithOtherPager, listItem];\r\n                } else {\r\n                    this.selectDataListWithOtherPager = [...this.selectDataListWithOtherPager, ...listItem];\r\n                }\r\n\r\n                if (emit) {\r\n                    this.checkItemsChange.emit({items: [...this.selectDataListWithOtherPager], instance: this});\r\n                }\r\n            } else {\r\n                if (!this.selectDataListWithOtherPager.length) {\r\n                    this.selectDataListWithOtherPager = [...this.selectDataList];\r\n                } else {\r\n\r\n                    const newCheckeds = this.sameBy(this.currentData, this.selectDataListWithOtherPager, (v) => v[this.listidName]);\r\n                    if (newCheckeds && newCheckeds.length) {\r\n                        this.data.forEach(item => {\r\n                            item.checked = newCheckeds.includes(item[this.listidName]);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å¨é */\r\n    listCheckAll() {\r\n        if (this.multipleSelect) {\r\n            this.currentData.forEach(item => {\r\n                item.checked = true;\r\n            });\r\n            this.selectDataList = this.currentData.filter((list) => {\r\n                return list['checked'];\r\n            });\r\n\r\n            this.updateDataListForMorePager('append', this.currentData);\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n    /** åæ¶å¨é */\r\n    listCheckAllCancel() {\r\n        if (this.multipleSelect) {\r\n            this.currentData.forEach(item => {\r\n                item.checked = false;\r\n            });\r\n            this.selectDataList = [];\r\n            this.updateDataListForMorePager('remove', this.currentData);\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * å¾éè¡\r\n     * @param ids ids\r\n     */\r\n    public checkRows(ids: any[]): void {\r\n        if (this.multipleSelect) {\r\n            if (!ids || ids.length < 1) {\r\n                this.listCheckAllCancel();\r\n                return;\r\n            }\r\n            this.data.forEach(item => {\r\n                if (ids.includes(item[this.listidName])) {\r\n                    item.checked = true;\r\n                } else {\r\n                    item.checked = false;\r\n                }\r\n            });\r\n\r\n            // this.onCheckValuesChange(ids);\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n\r\n    private onCheckValuesChange(ids: any[]) {\r\n        this.checkValuesChange.emit(ids);\r\n    }\r\n\r\n    private differenceBy = (a, b, fn) => {\r\n        const s = new Set(b.map(fn));\r\n        return a.map(fn).filter(el => !s.has(el));\r\n    }\r\n\r\n    private sameBy = (a, b, fn) => {\r\n        const s = new Set(b.map(fn));\r\n        return a.map(fn).filter(el => s.has(el));\r\n    }\r\n\r\n\r\n    onMouseEnter($event) {\r\n        $event.stopPropagation();\r\n\r\n        this.mouseInSelectedList = true;\r\n        if (this.selectDataListWithOtherPager && this.selectDataListWithOtherPager.length) {\r\n            this.openSelectedList = !this.openSelectedList;\r\n        } else {\r\n            this.openSelectedList = false;\r\n        }\r\n    }\r\n\r\n\r\n    closeSelectedList() {\r\n        this.openSelectedList = false;\r\n        this.mouseInSelectedList = false;\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    onDelSelectedItem(id: any) {\r\n        this.currentData.forEach(item => {\r\n            if (item[this.listidName] == id) {\r\n                item.checked = false;\r\n            }\r\n        });\r\n\r\n        this.selectDataList = this.selectDataList.filter(n => n[this.listidName] != id);\r\n        this.updateDataListForMorePager('remove', id);\r\n\r\n        this.updateCheckedValues();\r\n\r\n    }\r\n\r\n    onClearSelected($event) {\r\n        // this.clearSelectedItem.emit();\r\n        this.closeSelectedList();\r\n        this.listCheckAllCancel();\r\n\r\n        this.selectDataListWithOtherPager = [];\r\n        this.checkValues = [];\r\n        this.onCheckValuesChange([]);\r\n    }\r\n\r\n    onSelectListPanelClose($event) {\r\n        this.closeSelectedList();\r\n    }\r\n\r\n    private updateCheckedValues(emit = true) {\r\n        if (this.multipleSelect) {\r\n            if (!this.enableMorePageSelect) {\r\n                this.checkValues = this.selectDataList.map(n => n[this.listidName]);\r\n            } else {\r\n                this.checkValues = this.selectDataListWithOtherPager.map(n => n[this.listidName]);\r\n            }\r\n\r\n            if (emit) {\r\n                this.onCheckValuesChange(this.checkValues);\r\n                this.checkItemsChange.emit({ items: this.selectDataListWithOtherPager, instance: this });\r\n            }\r\n        }\r\n    }\r\n\r\n    clearCheckeds(clearAll = true, emit = true) {\r\n        if (this.multipleSelect) {\r\n            this.currentData.forEach(item => {\r\n                item.checked = false;\r\n            });\r\n            this.selectDataList = [];\r\n\r\n            if (clearAll) {\r\n                this.selectDataListWithOtherPager = [];\r\n            } else  {\r\n                this.updateDataListForMorePager('remove', this.currentData);\r\n            }\r\n\r\n            if (emit) {\r\n                this.updateCheckedValues(emit);\r\n            }\r\n\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n\r\n    private _setItemsCheckedStatus( ids: any, checked: boolean, emit: boolean) {\r\n        if (ids && ids.length) {\r\n            const action = checked ? 'append': 'remove';\r\n            ids.forEach(i => {\r\n                let id = i;\r\n                if (typeof i === 'object') {\r\n                    id = i[this.listidName];\r\n                }\r\n\r\n                const item = this.data.find(n => n[this.listidName] === id);\r\n                if (item) {\r\n                    item.checked = checked;\r\n                }\r\n\r\n                if (checked) {\r\n                    this.updateDataListForMorePager('append', i, false);\r\n                } else {\r\n                    this.updateDataListForMorePager('remove', id, false);\r\n                }\r\n            });\r\n\r\n            this.updateCheckedValues(emit);\r\n            this.cdr.markForCheck();\r\n        }\r\n    }\r\n\r\n    unCheckItems(ids: number[] | string[] | object[], emit = false) {\r\n        this._setItemsCheckedStatus(ids, false, emit);\r\n    }\r\n\r\n    checkedItems(ids: object[], emit = false) {\r\n        this._setItemsCheckedStatus(ids, true, emit);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n","import { Component, OnInit, Input,Output,EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'list-view-checkout',\r\n    templateUrl: './list-view-checkout.component.html'\r\n})\r\n\r\nexport class ListViewCheckoutComponent implements OnInit {\r\n    @Input() checked: boolean;\r\n    @Input() id: string;\r\n    @Input() disabled: boolean;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n\r\n    handleClick(event) {\r\n        if (!this.disabled) {\r\n            this.checkedChange.emit({originalEvent: event, checked: !this.checked});\r\n        }\r\n    }\r\n}\r\n","import { ListViewComponent } from './list-view.component';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'formatItems'})\r\nexport class SelectedListFormatPipe implements PipeTransform {\r\n\r\n    constructor( private listViewRef: ListViewComponent ) {}\r\n\r\n    transform(data: any, formatter: any): any {\r\n        if (data) {\r\n\r\n            const idField = this.listViewRef.listidName;\r\n\r\n            if (formatter) {\r\n                data = data.map( d => {\r\n                    return {id: d[idField], text:  formatter(d) };\r\n                });\r\n            } else  {\r\n                data = data.map((d: any) => {\r\n                    const txt = [];\r\n                    const keys = Object.keys(d);\r\n                    keys.forEach(k => {\r\n                        txt.push(d[k]);\r\n                    });\r\n                    return {id: d[idField], text: txt.join(', ') };\r\n                });\r\n            }\r\n\r\n            return data;\r\n        }\r\n\r\n        return [];\r\n    }\r\n}\r\n","import { FarrisCommonModule } from '@farris/ui-common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PaginationModule } from '@farris/ui-pagination';\r\nimport { ListViewComponent } from './list-view.component';\r\nimport { ListViewCheckoutComponent } from './component/list-view-checkout.component';\r\n\r\nimport {\r\n    ListViewHeaderTemplateDirective,\r\n    ListViewTemplateDirective,\r\n    ListViewFooterTemplateDirective,\r\n    ListViewEmptyTemplateDirective\r\n} from './template.directive';\r\nimport { SelectedListFormatPipe } from './selected-listitem-formatter.pipe';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ListViewComponent,\r\n        ListViewCheckoutComponent,\r\n        ListViewHeaderTemplateDirective,\r\n        ListViewTemplateDirective,\r\n        ListViewFooterTemplateDirective,\r\n        ListViewEmptyTemplateDirective,\r\n        SelectedListFormatPipe,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LocaleModule.forRoot(),\r\n        FarrisCommonModule,\r\n        PaginationModule\r\n    ],\r\n    exports: [\r\n        ListViewComponent,\r\n        ListViewCheckoutComponent,\r\n        ListViewHeaderTemplateDirective,\r\n        ListViewTemplateDirective,\r\n        ListViewFooterTemplateDirective,\r\n        ListViewEmptyTemplateDirective,\r\n        SelectedListFormatPipe\r\n    ]\r\n})\r\nexport class ListViewModule { }\r\n"]}