/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, TemplateRef, ContentChild, Output, EventEmitter, Input, Renderer2, ViewChild, HostBinding, ChangeDetectorRef } from '@angular/core';
import { ListViewHeaderTemplateDirective, ListViewTemplateDirective, ListViewFooterTemplateDirective, ListViewEmptyTemplateDirective, } from './template.directive';
import { PaginationControlsComponent } from '@farris/ui-pagination';
var ListViewComponent = /** @class */ (function () {
    function ListViewComponent(el, renderer, cdr) {
        this.el = el;
        this.renderer = renderer;
        this.cdr = cdr;
        // @Input() height:number;
        /**
         * 列表数据
         */
        this.data = [];
        /**
         * 数据为空是否展示默认
         */
        this.showEmpty = true;
        /**
         * 是否自定义空数据模板
         */
        this.emptyTemplate = false;
        /**
         * 是否支持多选 默认为false
         */
        this.multipleSelect = false;
        /**
         * 是否支持分页 默认false
         */
        this.supportPaging = false;
        // 默认分页
        this.pagerOnServer = true;
        this.pageSize = 10;
        this.pageIndex = 1;
        /**
         * 启用跨页多选
         */
        this.enableMorePageSelect = false;
        this.showSelectedList = false;
        this.selectedItemFormat = null;
        // 是否平铺
        this.fill = false;
        // 是否横向排列
        this.cardLayout = false;
        /**
         * 勾选值
         */
        this.checkValues = [];
        this.checkValuesChange = new EventEmitter();
        this.checkItems = [];
        this.checkItemsChange = new EventEmitter();
        // @Input() borderBottom:boolean = true;
        this._pageList = [10, 20, 30, 50];
        this.total = 0;
        /**
         * 作为唯一标识的数据key值 如果没传 唯一标识为index值
         */
        this.listidName = 'id';
        /**
         * 点击某一行后
         */
        this.listClick = new EventEmitter();
        /**
         * 多选框 选中状态变化
         */
        this.checkChange = new EventEmitter();
        // 分页事件
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        /**
         * 当前展示列表数据
         */
        this.currentData = [];
        /**
         * 选中的列表数组
         */
        this.selectDataList = [];
        /**
         * 跨页多选记录
         */
        this.selectDataListWithOtherPager = [];
        this.maxSize = 7;
        this.directionLinks = true;
        this.autoHide = false;
        this.responsive = true;
        this.paginationOptions = {
            id: 'Farris-listView-Pagination',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total
        };
        this.labels = {
            previousLabel: ' ',
            nextLabel: ' ',
            screenReaderPaginationLabel: 'Pagination',
            screenReaderPageLabel: 'page',
            screenReaderCurrentLabel: "You're on page"
        };
        this.mouseInSelectedList = false;
        this.openSelectedList = false;
        this.differenceBy = (/**
         * @param {?} a
         * @param {?} b
         * @param {?} fn
         * @return {?}
         */
        function (a, b, fn) {
            /** @type {?} */
            var s = new Set(b.map(fn));
            return a.map(fn).filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return !s.has(el); }));
        });
        this.sameBy = (/**
         * @param {?} a
         * @param {?} b
         * @param {?} fn
         * @return {?}
         */
        function (a, b, fn) {
            /** @type {?} */
            var s = new Set(b.map(fn));
            return a.map(fn).filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return s.has(el); }));
        });
    }
    Object.defineProperty(ListViewComponent.prototype, "activeIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeIndex;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._activeIndex = val;
            this.dataInit();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewComponent.prototype, "pageList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageList;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._pageList = val;
            if (this.pager) {
                this.pager.setPageList(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListViewComponent.prototype, "listviewFill", {
        get: /**
         * @return {?}
         */
        function () { return this.fill; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ListViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.currentData = this.data;
        this.dataInit();
        this.paginationOptions = {
            id: 'Farris-listView-Pagination',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
        if (this.id) {
            this.paginationOptions.id = this.paginationOptions.id + this.id;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ListViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.data && !changes.data.isFirstChange()) {
            this.currentData = this.data;
            this.dataInit();
        }
        if (changes['total'] && this.total && this.paginationOptions) {
            this.paginationOptions['totalItems'] = this.total;
        }
        if (changes['pageIndex'] && this.pageIndex && this.paginationOptions) {
            this.paginationOptions['currentPage'] = this.pageIndex;
        }
        if (changes && changes.checkValues !== undefined && !changes.checkValues.isFirstChange()) {
            /** @type {?} */
            var change = this.differenceBy(changes.checkValues.currentValue || [], changes.checkValues.previousValue || [], (/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                return v;
            }));
            if (change) {
                if (!this.enableMorePageSelect) {
                    this.checkRows(this.checkValues);
                }
            }
        }
        if (changes.checkItems && !changes.checkItems.isFirstChange()) {
            this.selectDataListWithOtherPager = tslib_1.__spread(this.checkItems);
            /** @type {?} */
            var ids = this.checkItems.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.listidName]; }));
            this.checkedItems(ids, false);
        }
    };
    /**
     * @return {?}
     */
    ListViewComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ListViewComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /** 默认搜索模板 点击搜索 */
    /**
     * 默认搜索模板 点击搜索
     * @param {?} searchField
     * @return {?}
     */
    ListViewComponent.prototype.searchList = /**
     * 默认搜索模板 点击搜索
     * @param {?} searchField
     * @return {?}
     */
    function (searchField) {
        if (searchField !== '' && this.data && this.data.length) {
            this.currentData = this.data.filter((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                /** @type {?} */
                var result;
                /** @type {?} */
                var listValue = Object.values(list);
                for (var i = 0; i < listValue.length; i++) {
                    if (typeof listValue[i] == 'string') {
                        if (listValue[i].toString().includes(searchField)) {
                            result = listValue[i].toString().includes(searchField);
                            break;
                        }
                    }
                }
                return result;
            }));
        }
        else {
            this.currentData = this.data;
        }
        return { listdata: this.currentData, searchValue: searchField, length: this.currentData.length };
    };
    /** 点击某一列事件 */
    /**
     * 点击某一列事件
     * @param {?} event
     * @param {?} listItem
     * @param {?} index
     * @param {?=} checkChangeEvent
     * @return {?}
     */
    ListViewComponent.prototype.listSelect = /**
     * 点击某一列事件
     * @param {?} event
     * @param {?} listItem
     * @param {?} index
     * @param {?=} checkChangeEvent
     * @return {?}
     */
    function (event, listItem, index, checkChangeEvent) {
        var _this = this;
        if (checkChangeEvent === void 0) { checkChangeEvent = false; }
        if (listItem['unClick'] || listItem['selectDisable']) {
            return;
        }
        else {
            this.checkChange.emit({ listdata: listItem, index: index });
            if (this.multipleSelect) {
                if (listItem['checked']) {
                    // 支持多选 删除该选中行
                    /** @type {?} */
                    var selectItemIndex = this.selectDataList.findIndex((/**
                     * @param {?} item
                     * @param {?} i
                     * @return {?}
                     */
                    function (item, i) {
                        return _this.getKey(item, i) === _this.getKey(listItem, index);
                    }));
                    this.selectDataList.splice(selectItemIndex, 1);
                    this.updateDataListForMorePager('remove', listItem);
                }
                else {
                    // 支持多选 插入该选中行
                    /** @type {?} */
                    var result = this.selectDataList.find((/**
                     * @param {?} value
                     * @param {?} i
                     * @return {?}
                     */
                    function (value, i) {
                        return _this.getKey(value, i) === _this.getKey(listItem, index);
                    }));
                    if (!result) {
                        this.selectDataList.unshift(listItem);
                        this.updateDataListForMorePager('append', listItem);
                    }
                }
                listItem['checked'] = !listItem['checked'];
            }
            else {
                // 不支持多选 替换当前选中行
                this.selectDataList = [];
                this.selectDataList.push(listItem);
            }
            if (!checkChangeEvent) {
                this.clickItem = listItem;
            }
            this.listClick.emit({ data: this.selectDataList, index: index, checkChangeEvent: checkChangeEvent });
        }
        if (this.multipleSelect) {
            /** @type {?} */
            var ids = this.data.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !!item.checked; })).map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item[_this.listidName]; }));
            if (this.enableMorePageSelect) {
                ids = this.selectDataListWithOtherPager.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item[_this.listidName]; }));
            }
            this.onCheckValuesChange(ids);
        }
    };
    /** 获得每一行list 唯一标识 */
    /**
     * 获得每一行list 唯一标识
     * @param {?} list
     * @param {?} index
     * @return {?}
     */
    ListViewComponent.prototype.getKey = /**
     * 获得每一行list 唯一标识
     * @param {?} list
     * @param {?} index
     * @return {?}
     */
    function (list, index) {
        if (this.listidName && list.hasOwnProperty(this.listidName)) {
            return list[this.listidName];
        }
        else {
            return index;
        }
    };
    /** checkbox状态变化 */
    /**
     * checkbox状态变化
     * @param {?} event
     * @param {?} changeData
     * @param {?} i
     * @return {?}
     */
    ListViewComponent.prototype.getSelect = /**
     * checkbox状态变化
     * @param {?} event
     * @param {?} changeData
     * @param {?} i
     * @return {?}
     */
    function (event, changeData, i) {
        /** @type {?} */
        var state = event.checked;
        this.listSelect(state, changeData, i, true);
    };
    /** 排序事件 */
    /**
     * 排序事件
     * @param {?} sortkeyName
     * @param {?=} sortType
     * @return {?}
     */
    ListViewComponent.prototype.sort = /**
     * 排序事件
     * @param {?} sortkeyName
     * @param {?=} sortType
     * @return {?}
     */
    function (sortkeyName, sortType) {
        if (sortType === void 0) { sortType = 'asc'; }
        this.currentData.sort(this.compare(sortkeyName, sortType));
        return { sortResult: { listdata: this.currentData, sortkeyName: sortkeyName, sortType: sortType } };
    };
    /**
     * @param {?} primaryValue
     * @return {?}
     */
    ListViewComponent.prototype.selectRow = /**
     * @param {?} primaryValue
     * @return {?}
     */
    function (primaryValue) {
        var _this = this;
        if (this.currentData && this.currentData.length > 0) {
            /** @type {?} */
            var row = this.currentData.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item[_this.listidName] === primaryValue; }));
            if (row) {
                this.clickItem = row;
                this.cdr.markForCheck();
            }
        }
    };
    /**
     * @private
     * @param {?} KeyName
     * @param {?} type
     * @return {?}
     */
    ListViewComponent.prototype.compare = /**
     * @private
     * @param {?} KeyName
     * @param {?} type
     * @return {?}
     */
    function (KeyName, type) {
        if (type === 'desc') {
            return (/**
             * @param {?} obj1
             * @param {?} obj2
             * @return {?}
             */
            function (obj1, obj2) {
                /** @type {?} */
                var val1 = obj1[KeyName];
                /** @type {?} */
                var val2 = obj2[KeyName];
                if (val2 < val1) {
                    return 1;
                }
                else if (val2 > val1) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
        }
        if (type === 'asc') {
            return (/**
             * @param {?} obj1
             * @param {?} obj2
             * @return {?}
             */
            function (obj1, obj2) {
                /** @type {?} */
                var val1 = obj1[KeyName];
                /** @type {?} */
                var val2 = obj2[KeyName];
                if (val2 > val1) {
                    return 1;
                }
                else if (val2 < val1) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ListViewComponent.prototype.getItemActive = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        // 不管是否开启多选，当前行只有一行
        if (this.listidName && this.clickItem) {
            return item[this.listidName] === this.clickItem[this.listidName];
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} page
     * @return {?}
     */
    ListViewComponent.prototype.onPageChange = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (this.pageIndex !== page.pageIndex) {
            this.pageIndex = page.pageIndex;
            this.paginationOptions.currentPage = page.pageIndex;
            this.pageChanged.emit({ pageInfo: page });
        }
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    ListViewComponent.prototype.onPageSizeChange = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        // console.log(this.pageSize !== pageSize && this.total);
        if (this.pageSize !== pageSize && this.total) {
            this.paginationOptions.itemsPerPage = pageSize;
            this.pageSize = pageSize;
            /** @type {?} */
            var total = this.total;
            /** @type {?} */
            var pageLength = Math.floor(total / pageSize);
            if (total % pageSize > 0) {
                pageLength += 1;
            }
            if (pageLength && this.pageIndex > pageLength) {
                this.pageIndex = pageLength;
                this.paginationOptions.currentPage = this.pageIndex;
            }
            this.pageSizeChanged.emit({ pageInfo: { pageIndex: this.pageIndex, pageSize: pageSize } });
        }
    };
    /**
     * @return {?}
     */
    ListViewComponent.prototype.getCurrentData = /**
     * @return {?}
     */
    function () {
        return this.currentData;
    };
    /**
     * @return {?}
     */
    ListViewComponent.prototype.getSelectData = /**
     * @return {?}
     */
    function () {
        return this.selectDataList;
    };
    /** 支持重新设置listview数据 */
    /**
     * 支持重新设置listview数据
     * @param {?} listviewData
     * @return {?}
     */
    ListViewComponent.prototype.setData = /**
     * 支持重新设置listview数据
     * @param {?} listviewData
     * @return {?}
     */
    function (listviewData) {
        this.currentData = listviewData;
        this.data = listviewData;
        this.dataInit();
    };
    /**
     * @return {?}
     */
    ListViewComponent.prototype.dataInit = /**
     * @return {?}
     */
    function () {
        if (this.data && this.data.length) {
            this.selectDataList = this.data.filter((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                return list['checked'];
            }));
            if (this.activeIndex >= 0 && this.activeIndex <= (this.data.length - 1)) {
                /** @type {?} */
                var dataItem = this.data[this.activeIndex];
                if (dataItem) {
                    this.clickItem = dataItem;
                    this.selectDataList.push(this.clickItem);
                }
            }
            else if (this.activeIndex < 0) {
                return;
            }
            else {
                if (!this.selectDataList.length && !this.multipleSelect) {
                    this.selectDataList.push(this.data[0]);
                }
                this.clickItem = this.data[0];
            }
        }
        this.updateDataListForMorePager();
        if (this.cdr) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @private
     * @param {?=} active
     * @param {?=} listItem
     * @param {?=} emit
     * @return {?}
     */
    ListViewComponent.prototype.updateDataListForMorePager = /**
     * @private
     * @param {?=} active
     * @param {?=} listItem
     * @param {?=} emit
     * @return {?}
     */
    function (active, listItem, emit) {
        var _this = this;
        if (active === void 0) { active = ''; }
        if (emit === void 0) { emit = true; }
        if (this.multipleSelect && this.enableMorePageSelect) {
            if (active === 'remove' && listItem) {
                if (!Array.isArray(listItem)) {
                    this.selectDataListWithOtherPager =
                        this.selectDataListWithOtherPager.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            if (typeof listItem === 'object') {
                                return n[_this.listidName] != listItem[_this.listidName];
                            }
                            else {
                                return n[_this.listidName] != listItem;
                            }
                        }));
                }
                else {
                    this.selectDataListWithOtherPager =
                        this.selectDataListWithOtherPager.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return listItem.indexOf((/**
                             * @param {?} a
                             * @return {?}
                             */
                            function (a) { return a[_this.listidName] === n[_this.listidName]; })) === -1;
                        }));
                }
                if (emit) {
                    this.checkItemsChange.emit({ items: tslib_1.__spread(this.selectDataListWithOtherPager), instance: this });
                }
            }
            else if (active === 'append') {
                if (!Array.isArray(listItem)) {
                    this.selectDataListWithOtherPager = tslib_1.__spread(this.selectDataListWithOtherPager, [listItem]);
                }
                else {
                    this.selectDataListWithOtherPager = tslib_1.__spread(this.selectDataListWithOtherPager, listItem);
                }
                if (emit) {
                    this.checkItemsChange.emit({ items: tslib_1.__spread(this.selectDataListWithOtherPager), instance: this });
                }
            }
            else {
                if (!this.selectDataListWithOtherPager.length) {
                    this.selectDataListWithOtherPager = tslib_1.__spread(this.selectDataList);
                }
                else {
                    /** @type {?} */
                    var newCheckeds_1 = this.sameBy(this.currentData, this.selectDataListWithOtherPager, (/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) { return v[_this.listidName]; }));
                    if (newCheckeds_1 && newCheckeds_1.length) {
                        this.data.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            item.checked = newCheckeds_1.includes(item[_this.listidName]);
                        }));
                    }
                }
            }
        }
    };
    /** 全选 */
    /**
     * 全选
     * @return {?}
     */
    ListViewComponent.prototype.listCheckAll = /**
     * 全选
     * @return {?}
     */
    function () {
        if (this.multipleSelect) {
            this.currentData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.checked = true;
            }));
            this.selectDataList = this.currentData.filter((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                return list['checked'];
            }));
            this.updateDataListForMorePager('append', this.currentData);
            this.cdr.markForCheck();
        }
    };
    /** 取消全选 */
    /**
     * 取消全选
     * @return {?}
     */
    ListViewComponent.prototype.listCheckAllCancel = /**
     * 取消全选
     * @return {?}
     */
    function () {
        if (this.multipleSelect) {
            this.currentData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.checked = false;
            }));
            this.selectDataList = [];
            this.updateDataListForMorePager('remove', this.currentData);
            this.cdr.markForCheck();
        }
    };
    /**
     * 勾选行
     * @param ids ids
     */
    /**
     * 勾选行
     * @param {?} ids ids
     * @return {?}
     */
    ListViewComponent.prototype.checkRows = /**
     * 勾选行
     * @param {?} ids ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        if (this.multipleSelect) {
            if (!ids || ids.length < 1) {
                this.listCheckAllCancel();
                return;
            }
            this.data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (ids.includes(item[_this.listidName])) {
                    item.checked = true;
                }
                else {
                    item.checked = false;
                }
            }));
            // this.onCheckValuesChange(ids);
            this.cdr.markForCheck();
        }
    };
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    ListViewComponent.prototype.onCheckValuesChange = /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this.checkValuesChange.emit(ids);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ListViewComponent.prototype.onMouseEnter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.mouseInSelectedList = true;
        if (this.selectDataListWithOtherPager && this.selectDataListWithOtherPager.length) {
            this.openSelectedList = !this.openSelectedList;
        }
        else {
            this.openSelectedList = false;
        }
    };
    /**
     * @return {?}
     */
    ListViewComponent.prototype.closeSelectedList = /**
     * @return {?}
     */
    function () {
        this.openSelectedList = false;
        this.mouseInSelectedList = false;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ListViewComponent.prototype.onDelSelectedItem = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        this.currentData.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item[_this.listidName] == id) {
                item.checked = false;
            }
        }));
        this.selectDataList = this.selectDataList.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n[_this.listidName] != id; }));
        this.updateDataListForMorePager('remove', id);
        this.updateCheckedValues();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ListViewComponent.prototype.onClearSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.clearSelectedItem.emit();
        this.closeSelectedList();
        this.listCheckAllCancel();
        this.selectDataListWithOtherPager = [];
        this.checkValues = [];
        this.onCheckValuesChange([]);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ListViewComponent.prototype.onSelectListPanelClose = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.closeSelectedList();
    };
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    ListViewComponent.prototype.updateCheckedValues = /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        var _this = this;
        if (emit === void 0) { emit = true; }
        if (this.multipleSelect) {
            if (!this.enableMorePageSelect) {
                this.checkValues = this.selectDataList.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.listidName]; }));
            }
            else {
                this.checkValues = this.selectDataListWithOtherPager.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.listidName]; }));
            }
            if (emit) {
                this.onCheckValuesChange(this.checkValues);
                this.checkItemsChange.emit({ items: this.selectDataListWithOtherPager, instance: this });
            }
        }
    };
    /**
     * @param {?=} clearAll
     * @param {?=} emit
     * @return {?}
     */
    ListViewComponent.prototype.clearCheckeds = /**
     * @param {?=} clearAll
     * @param {?=} emit
     * @return {?}
     */
    function (clearAll, emit) {
        if (clearAll === void 0) { clearAll = true; }
        if (emit === void 0) { emit = true; }
        if (this.multipleSelect) {
            this.currentData.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.checked = false;
            }));
            this.selectDataList = [];
            if (clearAll) {
                this.selectDataListWithOtherPager = [];
            }
            else {
                this.updateDataListForMorePager('remove', this.currentData);
            }
            if (emit) {
                this.updateCheckedValues(emit);
            }
            this.cdr.markForCheck();
        }
    };
    /**
     * @private
     * @param {?} ids
     * @param {?} checked
     * @param {?} emit
     * @return {?}
     */
    ListViewComponent.prototype._setItemsCheckedStatus = /**
     * @private
     * @param {?} ids
     * @param {?} checked
     * @param {?} emit
     * @return {?}
     */
    function (ids, checked, emit) {
        var _this = this;
        if (ids && ids.length) {
            /** @type {?} */
            var action = checked ? 'append' : 'remove';
            ids.forEach((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                /** @type {?} */
                var id = i;
                if (typeof i === 'object') {
                    id = i[_this.listidName];
                }
                /** @type {?} */
                var item = _this.data.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.listidName] === id; }));
                if (item) {
                    item.checked = checked;
                }
                if (checked) {
                    _this.updateDataListForMorePager('append', i, false);
                }
                else {
                    _this.updateDataListForMorePager('remove', id, false);
                }
            }));
            this.updateCheckedValues(emit);
            this.cdr.markForCheck();
        }
    };
    /**
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    ListViewComponent.prototype.unCheckItems = /**
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    function (ids, emit) {
        if (emit === void 0) { emit = false; }
        this._setItemsCheckedStatus(ids, false, emit);
    };
    /**
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    ListViewComponent.prototype.checkedItems = /**
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    function (ids, emit) {
        if (emit === void 0) { emit = false; }
        this._setItemsCheckedStatus(ids, true, emit);
    };
    ListViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-list-view',
                    template: "<div class=\"f-list-view\" [ngClass]=\"{'f-list-view-multiple': multipleSelect}\">\r\n    <div class=\"f-list-view-header\" *ngIf=\"headerTemplate\">\r\n        <ng-container [ngTemplateOutlet]=\"headerTemplate\"></ng-container>\r\n    </div>\r\n    <div class=\"f-list-view-content\">\r\n        <ul class=\"f-list-view-group\" [ngClass]=\"{'d-flex flex-wrap': cardLayout}\">\r\n            <ng-container *ngIf=\"currentData&&currentData.length;else emptyData\">\r\n                <li class=\"f-list-view-group-item {{listClassName}}\"\r\n                    *ngFor=\"let list of (supportPaging ? (currentData | paginate: paginationOptions) : currentData); let i = index;let first = first; let last = last\"\r\n                    [id]=\"getKey(list,i)\" (click)=\"listSelect($event,list,i)\"\r\n                    [ngClass]=\"{'f-un-click': list['unClick'],'f-un-select':list['selectDisable'],'f-listview-active':getItemActive(list)}\">\r\n                    <div class=\"f-list-select\" *ngIf=\"multipleSelect\" (click)=\"$event.stopPropagation()\">\r\n                        <list-view-checkout [id]=\"'list-'+getKey(list,i)\"\r\n                            [disabled]=\"list['selectDisable']||list['unClick']\" [checked]=\"list['checked']\"\r\n                            (checkedChange)=\"getSelect($event,list,i)\"></list-view-checkout>\r\n                    </div>\r\n                    <div class=\"f-list-content\">\r\n                        <ng-container [ngTemplateOutlet]=\"listTemplate\"\r\n                            [ngTemplateOutletContext]=\"{ item: list , index:i, selectedItem: clickItem, first:first,last:last }\">\r\n                        </ng-container>\r\n                    </div>\r\n                </li>\r\n            </ng-container>\r\n\r\n            <ng-template #emptyData>\r\n                <!-- \u7A7A\u6570\u636E\u9ED8\u8BA4\u6A21\u677F -->\r\n                <div class=\"f-list-view-emptydata\" *ngIf=\"showEmpty&&!emptyTemplate;else customEmpty\">\r\n                    <p class=\"f-empty-title\">{{ 'listview.emptyMessage' | locale }}</p>\r\n                </div>\r\n                <!-- \u81EA\u5B9A\u4E49\u7A7A\u6570\u636E\u6A21\u677F -->\r\n                <ng-template #customEmpty>\r\n                    <ng-container [ngTemplateOutlet]=\"emptyDataTemplate\"></ng-container>\r\n                </ng-template>\r\n\r\n            </ng-template>\r\n        </ul>\r\n    </div>\r\n    <div class=\"f-list-view-footer\" *ngIf=\"footerTemplate || supportPaging\">\r\n        <ng-container [ngTemplateOutlet]=\"footerTemplate\">\r\n            <div class=\"f-paging-wrapper\" *ngIf=\"supportPaging&&currentData&&currentData.length\">\r\n                <pagination-controls #pager [id]=\"paginationOptions.id\" [maxSize]=\"maxSize\"\r\n                    [directionLinks]=\"directionLinks\" [autoHide]=\"autoHide\" [responsive]=\"responsive\"\r\n                    [previousLabel]=\"labels.previousLabel\" [nextLabel]=\"labels.nextLabel\"\r\n                    [screenReaderPaginationLabel]=\"labels.screenReaderPaginationLabel\"\r\n                    [screenReaderPageLabel]=\"labels.screenReaderPageLabel\"\r\n                    [screenReaderCurrentLabel]=\"labels.screenReaderCurrentLabel\" (pageChange)=\"onPageChange($event)\"\r\n                    (pageSizeChange)=\"onPageSizeChange($event)\" [showSelectedList]=\"showSelectedList && enableMorePageSelect\">\r\n\r\n                    <div class=\"flex-fill\" >\r\n                        <div>\r\n                            <span class=\"badge badge-pill badge-light\" *ngIf=\"showSelectedList\"\r\n                                style=\"cursor:pointer\" [attr.title]=\"'datagrid.selectionData.tooltip' | locale\"\r\n                                [class.badge-primary]=\"mouseInSelectedList\"\r\n                                [innerHTML]=\"'datagrid.selectionData.currentLenth' | locale | replaceX: selectDataListWithOtherPager.length\"\r\n                                (click)=\"onMouseEnter($event)\">\r\n                            </span>\r\n                            <pagination-selected-list *ngIf=\"openSelectedList\"\r\n                                [data]=\"selectDataListWithOtherPager | formatItems: selectedItemFormat\"\r\n                                (close)=\"onSelectListPanelClose($event)\"\r\n                                (remove)=\"onDelSelectedItem($event)\"\r\n                                (clear)=\"onClearSelected($event)\"\r\n                            ></pagination-selected-list>\r\n                        </div>\r\n                    </div>\r\n\r\n                </pagination-controls>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>",
                    styles: [":host{height:100%}:host.f-listview-fill{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;overflow:hidden}:host.f-listview-fill .f-list-view{height:100%}:host.f-listview-fill .f-list-view .f-list-view-header{flex-shrink:0}:host.f-listview-fill .f-list-view .f-list-view-footer{flex-shrink:0}:host.f-listview-fill .f-list-view .f-list-view-content{overflow-y:auto;-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0}:host .f-list-view{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}:host .f-list-view .f-paging-wrapper{padding:14px 0}:host .f-list-view-group-item{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}:host .f-list-view-group-item.f-none-border{border-bottom:0}:host .f-list-view-group-item .f-list-content{-webkit-box-flex:1;flex:1 1 auto;width:100%}:host .f-list-select{padding:0 14px}:host .f-list-view-emptydata .f-empty-title{font-size:14px;line-height:22px;color:#999;padding:20px 0;text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    ListViewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    ListViewComponent.propDecorators = {
        headerTemplate: [{ type: ContentChild, args: [ListViewHeaderTemplateDirective, { read: TemplateRef },] }],
        listTemplate: [{ type: ContentChild, args: [ListViewTemplateDirective, { read: TemplateRef },] }],
        footerTemplate: [{ type: ContentChild, args: [ListViewFooterTemplateDirective, { read: TemplateRef },] }],
        emptyDataTemplate: [{ type: ContentChild, args: [ListViewEmptyTemplateDirective, { read: TemplateRef },] }],
        listGroup: [{ type: ViewChild, args: ['listGroup',] }],
        pager: [{ type: ViewChild, args: ['pager',] }],
        data: [{ type: Input }],
        id: [{ type: Input }],
        showEmpty: [{ type: Input }],
        emptyTemplate: [{ type: Input }],
        multipleSelect: [{ type: Input }],
        supportPaging: [{ type: Input }],
        pagerOnServer: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageIndex: [{ type: Input }],
        enableMorePageSelect: [{ type: Input }],
        showSelectedList: [{ type: Input }],
        selectedItemFormat: [{ type: Input }],
        fill: [{ type: Input }],
        cardLayout: [{ type: Input }],
        activeIndex: [{ type: Input }],
        listClassName: [{ type: Input }],
        checkValues: [{ type: Input }],
        checkValuesChange: [{ type: Output }],
        checkItems: [{ type: Input }],
        checkItemsChange: [{ type: Input }],
        pageList: [{ type: Input }],
        total: [{ type: Input }],
        listidName: [{ type: Input }],
        listviewFill: [{ type: HostBinding, args: ['class.f-listview-fill',] }],
        listClick: [{ type: Output }],
        checkChange: [{ type: Output }],
        pageChanged: [{ type: Output }],
        pageSizeChanged: [{ type: Output }]
    };
    return ListViewComponent;
}());
export { ListViewComponent };
if (false) {
    /** @type {?} */
    ListViewComponent.prototype.headerTemplate;
    /** @type {?} */
    ListViewComponent.prototype.listTemplate;
    /** @type {?} */
    ListViewComponent.prototype.footerTemplate;
    /** @type {?} */
    ListViewComponent.prototype.emptyDataTemplate;
    /** @type {?} */
    ListViewComponent.prototype.listGroup;
    /** @type {?} */
    ListViewComponent.prototype.pager;
    /**
     * 列表数据
     * @type {?}
     */
    ListViewComponent.prototype.data;
    /** @type {?} */
    ListViewComponent.prototype.id;
    /**
     * 数据为空是否展示默认
     * @type {?}
     */
    ListViewComponent.prototype.showEmpty;
    /**
     * 是否自定义空数据模板
     * @type {?}
     */
    ListViewComponent.prototype.emptyTemplate;
    /**
     * 是否支持多选 默认为false
     * @type {?}
     */
    ListViewComponent.prototype.multipleSelect;
    /**
     * 是否支持分页 默认false
     * @type {?}
     */
    ListViewComponent.prototype.supportPaging;
    /** @type {?} */
    ListViewComponent.prototype.pagerOnServer;
    /** @type {?} */
    ListViewComponent.prototype.pageSize;
    /** @type {?} */
    ListViewComponent.prototype.pageIndex;
    /**
     * 启用跨页多选
     * @type {?}
     */
    ListViewComponent.prototype.enableMorePageSelect;
    /** @type {?} */
    ListViewComponent.prototype.showSelectedList;
    /** @type {?} */
    ListViewComponent.prototype.selectedItemFormat;
    /** @type {?} */
    ListViewComponent.prototype.fill;
    /** @type {?} */
    ListViewComponent.prototype.cardLayout;
    /** @type {?} */
    ListViewComponent.prototype._activeIndex;
    /** @type {?} */
    ListViewComponent.prototype.listClassName;
    /**
     * 勾选值
     * @type {?}
     */
    ListViewComponent.prototype.checkValues;
    /** @type {?} */
    ListViewComponent.prototype.checkValuesChange;
    /** @type {?} */
    ListViewComponent.prototype.checkItems;
    /** @type {?} */
    ListViewComponent.prototype.checkItemsChange;
    /**
     * @type {?}
     * @private
     */
    ListViewComponent.prototype._pageList;
    /** @type {?} */
    ListViewComponent.prototype.total;
    /**
     * 作为唯一标识的数据key值 如果没传 唯一标识为index值
     * @type {?}
     */
    ListViewComponent.prototype.listidName;
    /**
     * 点击某一行后
     * @type {?}
     */
    ListViewComponent.prototype.listClick;
    /**
     * 多选框 选中状态变化
     * @type {?}
     */
    ListViewComponent.prototype.checkChange;
    /** @type {?} */
    ListViewComponent.prototype.pageChanged;
    /** @type {?} */
    ListViewComponent.prototype.pageSizeChanged;
    /**
     * 当前展示列表数据
     * @type {?}
     */
    ListViewComponent.prototype.currentData;
    /**
     * 选中的列表数组
     * @type {?}
     */
    ListViewComponent.prototype.selectDataList;
    /**
     * 跨页多选记录
     * @type {?}
     */
    ListViewComponent.prototype.selectDataListWithOtherPager;
    /** @type {?} */
    ListViewComponent.prototype.clickItem;
    /** @type {?} */
    ListViewComponent.prototype.maxSize;
    /** @type {?} */
    ListViewComponent.prototype.directionLinks;
    /** @type {?} */
    ListViewComponent.prototype.autoHide;
    /** @type {?} */
    ListViewComponent.prototype.responsive;
    /** @type {?} */
    ListViewComponent.prototype.paginationOptions;
    /** @type {?} */
    ListViewComponent.prototype.labels;
    /** @type {?} */
    ListViewComponent.prototype.mouseInSelectedList;
    /** @type {?} */
    ListViewComponent.prototype.openSelectedList;
    /**
     * @type {?}
     * @private
     */
    ListViewComponent.prototype.differenceBy;
    /**
     * @type {?}
     * @private
     */
    ListViewComponent.prototype.sameBy;
    /**
     * @type {?}
     * @private
     */
    ListViewComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ListViewComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ListViewComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,