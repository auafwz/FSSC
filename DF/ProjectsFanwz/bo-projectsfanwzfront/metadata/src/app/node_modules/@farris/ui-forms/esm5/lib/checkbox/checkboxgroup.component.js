/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional, Injector } from '@angular/core';
/*
 * @Author: 胡玉洋(Yuyang)
 * @Date: 2019-08-29
 * @LastEditors:  胡玉洋(Yuyang)
 * @LastEditTime: 2019-08-29
 * @QQ: 664927877
 * @Version: v0.0.8
 */
import { Component, Input, forwardRef, Output, EventEmitter } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IdService, CommonUtils } from '@farris/ui-common';
var FarrisCheckboxGroupComponent = /** @class */ (function () {
    function FarrisCheckboxGroupComponent(idSer, inject) {
        this.idSer = idSer;
        this.inject = inject;
        /* radio 数组 */
        this.data = [];
        /* 分隔符 默认逗号*/
        this.separator = ',';
        /* 值类型是否是string */
        this.isStringValue = true;
        this.textField = 'name';
        this.valueField = 'value';
        this.changeValue = new EventEmitter();
        /* checkbox赋值事件 */
        this.setCheckboxData = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        function () { });
        this.controlTouch = (/**
         * @return {?}
         */
        function () { });
        if (this.inject) {
            this.commonUtils = this.inject.get(CommonUtils);
        }
    }
    /**
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 初始化name
        this.name = this.idSer.generate().replace(/-/g, '_');
        this.setCheckboxData.emit(this);
        // todo 取值可以实现promise
        if (this.loadData) {
            this.loadDataSubscription = this.loadData().subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return _this.data = res.data; }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.loadDataSubscription) {
            this.loadDataSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype._getText = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue) {
                return this.commonUtils.getValue(this.textField, item);
            }
            else {
                return item[this.textField];
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype._getValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue) {
                return this.commonUtils.getValue(this.valueField, item);
            }
            else {
                return item[this.valueField];
            }
        }
        else {
            return '';
        }
    };
    /* 选中input值 */
    /* 选中input值 */
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.clickHandler = /* 选中input值 */
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        /** @type {?} */
        var arrValue = this.transformToArr(this.value) || [];
        /** @type {?} */
        var val = String(this._getValue(item));
        if (!arrValue || !arrValue.length) {
            arrValue.push(val);
        }
        else {
            if (arrValue.some((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item == val; }))) {
                arrValue = arrValue.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== val; }));
            }
            else {
                arrValue.push(val);
            }
        }
        // 更新value值
        this.value = this.transformToStr(arrValue);
        // 传值formcontrol
        this.controlChange(this.value);
        this.controlTouch(this.value);
        this.changeValue.emit(this.value);
    };
    /* 被选中 */
    /* 被选中 */
    /**
     * @param {?} item
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.checked = /* 被选中 */
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var val = String(this._getValue(item));
        /** @type {?} */
        var checkedValue = this.transformToArr(this.value);
        // 多值
        return checkedValue.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item == val; }));
    };
    /* 值到数组值的转换 */
    /* 值到数组值的转换 */
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.transformToArr = /* 值到数组值的转换 */
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return [];
        }
        if (!this.isStringValue) {
            return value;
        }
        return value.split(this.separator);
    };
    /* 值到字符串值的转换 */
    /* 值到字符串值的转换 */
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.transformToStr = /* 值到字符串值的转换 */
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var allVals = this.data.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return _this._getValue(n); }));
        /** @type {?} */
        var r = [];
        allVals.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (value.some((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item == n; }))) {
                r.push(n);
            }
        }));
        if (!this.isStringValue) {
            return r;
        }
        return r.join(this.separator);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /* change操作值变化  方法重写*/
    /* change操作值变化  方法重写*/
    /**
     * @param {?} fn
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.registerOnChange = /* change操作值变化  方法重写*/
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlChange = fn;
    };
    /* blur值变化  方法重写*/
    /* blur值变化  方法重写*/
    /**
     * @param {?} fn
     * @return {?}
     */
    FarrisCheckboxGroupComponent.prototype.registerOnTouched = /* blur值变化  方法重写*/
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlTouch = fn;
    };
    FarrisCheckboxGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-checkboxgroup',
                    template: "<div class=\"farris-input-wrap\" [class.farris-checkradio-hor]=\"horizontal\">\r\n    <div\r\n        class=\"custom-control custom-checkbox\"\r\n        *ngFor=\"let item of data; let i = index\"\r\n    >\r\n        <input\r\n            #input\r\n            class=\"custom-control-input\"\r\n            [name]=\"name\"\r\n            id=\"{{ 'checkbox_' + name + i }}\"\r\n            type=\"checkbox\"\r\n            [value]=\"_getValue(item)\"\r\n            (click)=\"clickHandler(item, i)\"\r\n            [checked]=\"checked(item)\"\r\n            [disabled]=\"disable\"\r\n            tabindex=\"{{ tabIndex }}\"\r\n        />\r\n        <label\r\n            class=\"custom-control-label\"\r\n            for=\"{{ 'checkbox_' + name + i }}\"\r\n            title=\"{{_getText(item)}}\"\r\n            >{{ _getText(item) }}</label\r\n        >\r\n    </div>\r\n</div>\r\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return FarrisCheckboxGroupComponent; })),
                            multi: true,
                        }],
                    exportAs: 'FarrisCheckboxGroupComponent'
                }] }
    ];
    /** @nocollapse */
    FarrisCheckboxGroupComponent.ctorParameters = function () { return [
        { type: IdService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FarrisCheckboxGroupComponent.propDecorators = {
        tabIndex: [{ type: Input, args: ['tab-index',] }],
        data: [{ type: Input }],
        type: [{ type: Input }],
        name: [{ type: Input }],
        horizontal: [{ type: Input }],
        separator: [{ type: Input }],
        disable: [{ type: Input }],
        value: [{ type: Input }],
        isStringValue: [{ type: Input }],
        textField: [{ type: Input }],
        valueField: [{ type: Input }],
        loadData: [{ type: Input }],
        changeValue: [{ type: Output }],
        setCheckboxData: [{ type: Output }]
    };
    return FarrisCheckboxGroupComponent;
}());
export { FarrisCheckboxGroupComponent };
if (false) {
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.tabIndex;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.data;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.type;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.name;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.horizontal;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.separator;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.disable;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.value;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.isStringValue;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.textField;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.valueField;
    /**
     * 加载数据事件
     * @type {?}
     */
    FarrisCheckboxGroupComponent.prototype.loadData;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.loadDataSubscription;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.changeValue;
    /** @type {?} */
    FarrisCheckboxGroupComponent.prototype.setCheckboxData;
    /**
     * @type {?}
     * @private
     */
    FarrisCheckboxGroupComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FarrisCheckboxGroupComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    FarrisCheckboxGroupComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    FarrisCheckboxGroupComponent.prototype.idSer;
    /**
     * @type {?}
     * @private
     */
    FarrisCheckboxGroupComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,