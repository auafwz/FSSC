/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var FarrisComponentInstanceService = /** @class */ (function () {
    function FarrisComponentInstanceService() {
        this._state = new WeakMap();
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    FarrisComponentInstanceService.prototype.add = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this._state.set(key, value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FarrisComponentInstanceService.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._state.get(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FarrisComponentInstanceService.prototype.destroy = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this._state.delete(key);
    };
    FarrisComponentInstanceService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FarrisComponentInstanceService.ctorParameters = function () { return []; };
    /** @nocollapse */ FarrisComponentInstanceService.ngInjectableDef = i0.defineInjectable({ factory: function FarrisComponentInstanceService_Factory() { return new FarrisComponentInstanceService(); }, token: FarrisComponentInstanceService, providedIn: "root" });
    return FarrisComponentInstanceService;
}());
export { FarrisComponentInstanceService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisComponentInstanceService.prototype._state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWluc3RhbmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2ZhcnJpcy1pbnN0YW5jZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQztJQU9JO1FBRlEsV0FBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFFaEIsQ0FBQzs7Ozs7O0lBRWhCLDRDQUFHOzs7OztJQUFILFVBQUksR0FBUSxFQUFFLEtBQVU7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsNENBQUc7Ozs7SUFBSCxVQUFJLEdBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsZ0RBQU87Ozs7SUFBUCxVQUFRLEdBQVE7UUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDOztnQkFuQkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7Ozs7eUNBSkQ7Q0FzQkMsQUFwQkQsSUFvQkM7U0FqQlksOEJBQThCOzs7Ozs7SUFFdkMsZ0RBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNDb21wb25lbnRJbnN0YW5jZVNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgX3N0YXRlID0gbmV3IFdlYWtNYXAoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgYWRkKGtleTogYW55LCB2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrZXk6IGFueSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5nZXQoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KGtleTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUuZGVsZXRlKGtleSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==