/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
/** @type {?} */
export const GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
export class DatagridSettingsService {
    /**
     * @param {?} injector
     * @param {?} modalSer
     * @param {?} messager
     * @param {?} idService
     * @param {?} localeSer
     */
    constructor(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this.gridInstance = null;
        this.gridRefs = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    destroy(id) {
        if (id && this.gridRefs && this.gridRefs[id]) {
            delete this.gridRefs[id];
        }
        else {
            this.gridRefs = null;
        }
    }
    /**
     * @param {?} dg
     * @return {?}
     */
    registerGridInstance(dg) {
        if (!dg) {
            console.log('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        const id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    }
    /**
     * @param {?} dgID
     * @return {?}
     */
    getGridInstance(dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    }
    /**
     * @return {?}
     */
    getSearchTypes() {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    }
    /**
     * @param {?} gridInstance
     * @return {?}
     */
    showSimple(gridInstance) {
        /** @type {?} */
        const columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        const searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            let simpleRef = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef.hostView);
            simpleRef.instance.columns = columns;
            simpleRef.instance.seartTypes = searchTypes;
            simpleRef.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef.instance.top = 76;
            }
            document.body.appendChild(simpleRef.location.nativeElement);
            simpleRef.instance.closed.subscribe((/**
             * @return {?}
             */
            () => {
                simpleRef.location.nativeElement.remove();
                simpleRef.destroy();
                simpleRef = null;
            }));
            simpleRef.instance.advanced.subscribe((/**
             * @return {?}
             */
            () => {
                this.showAdvanced(gridInstance);
            }));
            simpleRef.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.target.disabled = true;
                if (this.saving) {
                    return;
                }
                if (!this.saving) {
                    this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef.hostView.detectChanges();
            return simpleRef;
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    show(gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    showAdvanced(gridInstance, opts) {
        /** @type {?} */
        let _editColSortInfo = true;
        /** @type {?} */
        const editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        const showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        const getActiveTabIndex = (/**
         * @return {?}
         */
        () => {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        const activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        const columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        let modalRef = null;
        /** @type {?} */
        const okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        const resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        const defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex
            },
            showButtons: false
        };
        /** @type {?} */
        const modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.target.disabled = true;
            if (this.saving) {
                return;
            }
            if (!this.saving) {
                this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
        }));
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            this.showSimple(gridInstance);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    canSetColumnSort(gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    hasEnableSortColumns(gridInstance) {
        /** @type {?} */
        const sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        (c, r) => {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    }
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    isHeaderGroup(grid) {
        /** @type {?} */
        const flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    }
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
        /** @type {?} */
        const childCols = [];
        /** @type {?} */
        let _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        (c, i) => {
            /** @type {?} */
            let n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    }
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    convertColumns2TreeData(cols, forSort = false) {
        /** @type {?} */
        const columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            c.map((/**
             * @param {?} _
             * @return {?}
             */
            (_) => {
                _.colspan = _.colspan || 1;
                return _;
            }));
            return c;
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            (c, i) => {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    checkViewTreeNodes(treeNodes) {
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        (tn) => {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                this.checkViewTreeNodes(tn.children);
            }
        }));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    convertColumnsToSimple(cols) {
        // 移除设置列
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        (_cols) => {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    resetGridView(gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        const dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            const options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                const newColumns = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    }
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    updateGridView(modalRef, gridInstance, btn = null) {
        /** @type {?} */
        const settings = modalRef.content;
        if (settings) {
            /** @type {?} */
            const key = this.createConfigKey(gridInstance.id);
            const { sortInfo, viewColumns, columnFormat, groupFields } = settings;
            this.saving = true;
            /** @type {?} */
            let groupField = '';
            if (gridInstance.groupRows && groupFields && groupFields.length) {
                groupField = groupFields.join(',');
            }
            gridInstance.groupField = groupField;
            this.setUserConfig(key, { sortInfo, viewColumns, groupField, columnFormat }).subscribe((/**
             * @return {?}
             */
            () => {
                if (btn) {
                    btn.disabled = false;
                }
                this.saving = false;
                modalRef.close();
                if (sortInfo && Object.keys(sortInfo).length) {
                    const { sortName, sortOrder } = sortInfo;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                if (viewColumns && viewColumns.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    cols => {
                        this.updateColumnFormat(cols, columnFormat, gridInstance);
                        return this.newVisibleOrderColumns(cols, viewColumns, columnFormat);
                    }));
                }
                gridInstance.columnsChanged(true);
            }));
        }
        else {
            modalRef.close();
        }
    }
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @return {?}
     */
    newVisibleOrderColumns(cols, viewColumns, columnFormat) {
        /** @type {?} */
        const hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_') {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        let newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === field));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c && c.field && c.field !== '_datagrid-setting-control_'));
    }
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    isNewAddColumn(field, columns) {
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field === field));
    }
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    updateColumnFormat(cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                /** @type {?} */
                const formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field === col.field));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    }
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    createConfigKey(gridId) {
        /** @type {?} */
        const grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            console.log('DatagridSettingService: Can not find the grid instance.');
        }
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    saveUserConfig(gridId) {
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            const { sortName, sortOrder, columns } = gridInstance;
            if (sortName) {
                /** @type {?} */
                const sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            const viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible || n.visible === undefined)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(columns)[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return this.setUserConfig(key, config);
    }
    /**
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    setUserConfig(key, config) {
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        const currentConfig = localStorage.getItem(key);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getUserConfig(key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            const config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                const con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    }
    /**
     * @param {?} gridID
     * @return {?}
     */
    getSettings(gridID) {
        /** @type {?} */
        const key = this.createConfigKey(gridID);
        return this.getUserConfig(key);
    }
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    _saveUserConfig(key, config) {
        try {
            /** @type {?} */
            const userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    resetUserConfig(gridInstance, modalRef) {
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                /** @type {?} */
                const key = this.createConfigKey(gridInstance.id);
                return this.setUserConfig(key, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    _getUserConfig(key) {
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            (ucs) => {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    const c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[this.localeSer.localeId];
                        }
                        else {
                            localStorage.setItem(key, JSON.stringify({ [this.localeSer.localeId]: c }));
                            if (Object.keys(c).indexOf('viewColumns') > -1) {
                                return c;
                            }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            console.error(e);
        }
    }
}
DatagridSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: IdService },
    { type: LocaleService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notSupportHeaderGroupMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /** @type {?} */
    DatagridSettingsService.prototype.httpRestService;
    /** @type {?} */
    DatagridSettingsService.prototype.gridInstance;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
}
//# sourceMappingURL=data:application/json;base64,