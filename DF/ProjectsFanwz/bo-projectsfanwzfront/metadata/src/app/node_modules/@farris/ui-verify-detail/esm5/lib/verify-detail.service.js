/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { VerifyDetailComponent } from './verify-detail.component';
import * as i0 from "@angular/core";
var VerifyDetailService = /** @class */ (function () {
    function VerifyDetailService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    VerifyDetailService.prototype.createVerify = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.clear();
        //if (!this.verifyContainer) {
        /** @type {?} */
        var containerFac = this.cfr.resolveComponentFactory(VerifyDetailComponent);
        /** @type {?} */
        var cmpRef = containerFac.create(this.injector);
        this.appRef.attachView(cmpRef.hostView);
        /** @type {?} */
        var maxHeight;
        if (option.parent) {
            // option.parent.nativeElement.style.position = 'relative';
            maxHeight = option.parent.nativeElement.offsetHeight - 60;
            option.parent.nativeElement.appendChild(cmpRef.location.nativeElement);
        }
        else {
            maxHeight = document.documentElement.clientHeight - 60;
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
        }
        this.verifyContainer = cmpRef;
        this.verifyContainer.instance.maxHeight = maxHeight;
        this.verifyContainer.instance.showList = option.showList;
        this.verifyContainer.instance.showType = option.showType;
        this.verifyContainer.instance.tabList = option.verifyType;
        this.verifyContainer.instance.validatorList = option.verifyList;
        // this.verifyContainer.instance.listshowChange.subscribe((event)=>{
        //   console.log(event);
        // });
        // this.verifyContainer.instance.validatorClick.subscribe((event)=>{
        //   console.log(event);
        // });
        return this.verifyContainer.instance;
        //}
    };
    /**
     * @return {?}
     */
    VerifyDetailService.prototype.clear = /**
     * @return {?}
     */
    function () {
        if (this.verifyContainer) {
            /** @type {?} */
            var el = this.verifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.verifyContainer.destroy();
            this.verifyContainer = undefined;
        }
    };
    VerifyDetailService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    VerifyDetailService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef }
    ]; };
    /** @nocollapse */ VerifyDetailService.ngInjectableDef = i0.defineInjectable({ factory: function VerifyDetailService_Factory() { return new VerifyDetailService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: VerifyDetailService, providedIn: "root" });
    return VerifyDetailService;
}());
export { VerifyDetailService };
if (false) {
    /** @type {?} */
    VerifyDetailService.prototype.verifyContainer;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LWRldGFpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12ZXJpZnktZGV0YWlsLyIsInNvdXJjZXMiOlsibGliL3ZlcmlmeS1kZXRhaWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsY0FBYyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFHbEU7SUFNRSw2QkFDVSxHQUE2QixFQUM3QixRQUFrQixFQUNsQixNQUFzQjtRQUZ0QixRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUM3QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQWdCO0lBQzNCLENBQUM7Ozs7O0lBRU4sMENBQVk7Ozs7SUFBWixVQUFhLE1BQTBCO1FBQ25DLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7O1lBRUwsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMscUJBQXFCLENBQUM7O1lBQ3RFLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztZQUNwQyxTQUFnQjtRQUNwQixJQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUM7WUFDZiwyREFBMkQ7WUFDM0QsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDeEU7YUFDRztZQUNGLFNBQVMsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDdkQsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzRTtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO1FBQzlCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDekQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDekQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDMUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFFaEUsb0VBQW9FO1FBQ3BFLHdCQUF3QjtRQUN4QixNQUFNO1FBQ04sb0VBQW9FO1FBQ3BFLHdCQUF3QjtRQUN4QixNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztRQUN6QyxHQUFHO0lBQ0wsQ0FBQzs7OztJQUVNLG1DQUFLOzs7SUFBWjtRQUNJLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTs7Z0JBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhO1lBQ3RELElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRTtnQkFDZixFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNqQztZQUNELElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7U0FDbEM7SUFDTCxDQUFDOztnQkF0REYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFONEQsd0JBQXdCO2dCQUFsQyxRQUFRO2dCQUF4QixjQUFjOzs7OEJBQWpEO0NBNERDLEFBeERELElBd0RDO1NBckRZLG1CQUFtQjs7O0lBRTlCLDhDQUFxRDs7Ozs7SUFFbkQsa0NBQXFDOzs7OztJQUNyQyx1Q0FBMEI7Ozs7O0lBQzFCLHFDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiwgQXBwbGljYXRpb25SZWYsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmVyaWZ5RGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi92ZXJpZnktZGV0YWlsLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZlcmlmeURldGFpbE9wdGlvbnMgfSBmcm9tICcuL3ZlcmlmeS5vcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFZlcmlmeURldGFpbFNlcnZpY2Uge1xyXG5cclxuICB2ZXJpZnlDb250YWluZXI6IENvbXBvbmVudFJlZjxWZXJpZnlEZXRhaWxDb21wb25lbnQ+O1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBcclxuICAgIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZlxyXG4gICAgKSB7fVxyXG5cclxuICBjcmVhdGVWZXJpZnkob3B0aW9uOlZlcmlmeURldGFpbE9wdGlvbnMpe1xyXG4gICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAvL2lmICghdGhpcy52ZXJpZnlDb250YWluZXIpIHtcclxuICAgICAgICBjb25zdCBjb250YWluZXJGYWMgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShWZXJpZnlEZXRhaWxDb21wb25lbnQpO1xyXG4gICAgICAgIGNvbnN0IGNtcFJlZiA9IGNvbnRhaW5lckZhYy5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjbXBSZWYuaG9zdFZpZXcpO1xyXG4gICAgICAgIGxldCBtYXhIZWlnaHQ6bnVtYmVyO1xyXG4gICAgICAgIGlmKG9wdGlvbi5wYXJlbnQpe1xyXG4gICAgICAgICAgLy8gb3B0aW9uLnBhcmVudC5uYXRpdmVFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgICAgIG1heEhlaWdodCA9IG9wdGlvbi5wYXJlbnQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgLSA2MDtcclxuICAgICAgICAgIG9wdGlvbi5wYXJlbnQubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChjbXBSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICBtYXhIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gNjA7XHJcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQoY21wUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lciA9IGNtcFJlZjtcclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2Uuc2hvd0xpc3QgPSBvcHRpb24uc2hvd0xpc3Q7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2Uuc2hvd1R5cGUgPSBvcHRpb24uc2hvd1R5cGU7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UudGFiTGlzdCA9IG9wdGlvbi52ZXJpZnlUeXBlO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnZhbGlkYXRvckxpc3QgPSBvcHRpb24udmVyaWZ5TGlzdDtcclxuICAgICAgICBcclxuICAgICAgICAvLyB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5saXN0c2hvd0NoYW5nZS5zdWJzY3JpYmUoKGV2ZW50KT0+e1xyXG4gICAgICAgIC8vICAgY29uc29sZS5sb2coZXZlbnQpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIC8vIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLnZhbGlkYXRvckNsaWNrLnN1YnNjcmliZSgoZXZlbnQpPT57XHJcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhldmVudCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlO1xyXG4gICAgLy99XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICAgIGlmICh0aGlzLnZlcmlmeUNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy52ZXJpZnlDb250YWluZXIubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=