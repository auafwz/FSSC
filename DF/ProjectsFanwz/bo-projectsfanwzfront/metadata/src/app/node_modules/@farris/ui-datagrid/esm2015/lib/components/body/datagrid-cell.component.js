/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-31 09:11:02
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, ViewContainerRef, Injector, Inject, forwardRef, Renderer2 } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ColumnFormatService } from '@farris/ui-common/column';
import { Utils } from '../../utils/utils';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridRowDirective } from './datagrid-row.directive';
import { GridCellEditorDirective } from '../editors/cell-editor.directive';
import { DatagridService } from '../../services/datagrid.service';
import { SafePipe } from './../../utils/safe.pipe';
import { TR_PREFIX } from '../../types/constant';
// <ng-container *ngIf="!isEditing && !column.template">
//     <ng-container *ngIf="column.formatter">
//         <span *ngIf="cellFormatterIsFn" [innerHtml]=" column | formatCellData: rowData | safe: 'html'"></span>
//         <span *ngIf="!cellFormatterIsFn">{{  column | formatCellData: rowData }}</span>
//     </ng-container>
//     <span *ngIf="!column.formatter" [class.grid-cell-nowrap]="dg.nowrap" [class.grid-cell-wrap]="!dg.nowrap">{{  column | formatCellData: rowData }}</span>
// </ng-container>
// <span *ngIf="!isEditing && !column.template" cell-content [class.grid-cell-nowrap]="dg.nowrap" [class.grid-cell-wrap]="!dg.nowrap"
//     [rowData]="rowData" [column]="column" [nowrap]="dg.nowrap"></span>
export class DatagridCellComponent {
    /**
     * @param {?} dg
     * @param {?} dr
     * @param {?} el
     * @param {?} cd
     * @param {?} injector
     * @param {?} colFormatSer
     * @param {?} domSanitizer
     */
    constructor(dg, dr, el, cd, injector, colFormatSer, domSanitizer) {
        this.dg = dg;
        this.dr = dr;
        this.el = el;
        this.cd = cd;
        this.injector = injector;
        this.colFormatSer = colFormatSer;
        this.domSanitizer = domSanitizer;
        this.cls = '';
        this.lastColumn = false;
        // @ViewChild('celltip') celltip: DatagridCellTooltipDirective;
        this._isEditing = false;
        this.controlHeight = 'auto';
        this.isSelected = false;
        this._cellEditorTemplate = null;
        this.cellClick = new EventEmitter();
        this.cellDblClick = new EventEmitter();
        this.cellContext = {};
        this.cellStyler = {};
        this.safePipe = null;
        this.ro = null;
        this.canEdit = (/**
         * @return {?}
         */
        () => this.dg.editable && this.dg.editMode === 'cell' && this.column.editor);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.safePipe = new SafePipe(this.domSanitizer);
        this.render = this.injector.get(Renderer2);
        // this.cellSubscription = this.dfs.currentCell$.pipe(
        //     filter((cell: CellInfo) => {
        //         return cell && this.column.editor && cell.rowIndex === this.rowIndex && cell.field === this.column.field;
        //     })
        // ).subscribe((cell: CellInfo) => {
        //     if (cell && this.column.editor) {
        //         this.isEditing = cell.isEditing;
        //         cell.cellRef = this;
        //         cell.column = this.column;
        //         if (!this.cd['destroyed']) {
        //             this.cd.detectChanges();
        //         }
        //     }
        // });
    }
    /**
     * @return {?}
     */
    get isEditing() {
        return this._isEditing;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set isEditing(v) {
        if (this._isEditing === v) {
            return;
        }
        this._isEditing = v;
        if (v) {
            if (!this.dr.form || !Object.keys(this.dr.form.controls).length) {
                this.dr.initFormControl();
            }
            if (this.column.editorTemplate && this.column.editorTemplate.elementRef) {
                this.cellContext.formGroup = this.dr.form;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.el) {
                        /** @type {?} */
                        const input = this.el.nativeElement.querySelector('input,textarea');
                        if (input) {
                            input.focus();
                        }
                    }
                }), 10);
            }
        }
        if (this.column.editor && this.column.editor.type === 'textarea') {
            if (!this.dg.nowrap) {
                this.controlHeight = this.dr.el.nativeElement.offsetHeight;
            }
        }
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    get cellEditorTemplate() {
        return this._cellEditorTemplate;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set cellEditorTemplate(v) {
        this._cellEditorTemplate = v;
        if (v) {
            this.dg.dgs.cellEditorCreated.emit({ editorRef: null, column: this.column, cellEditorRef: null, templateRef: v });
        }
    }
    /**
     * @return {?}
     */
    get value() {
        if (this.rowData && this.column && this.column.field) {
            return Utils.getValue(this.column.field, this.rowData);
        }
        return '';
    }
    /**
     * @return {?}
     */
    get formControl() {
        if (this.cellEditor) {
            return this.cellEditor.componentRef.instance.formControl;
        }
        else if (this.column.editorTemplate) {
            return this.dr.form.get(this.column.field);
        }
        return null;
    }
    /**
     * @return {?}
     */
    get verticalAlign() {
        /** @type {?} */
        let va = 'center';
        switch (this.column.valign) {
            case 'top':
                va = 'flex-start';
                break;
            case 'bottom':
                va = 'flex-end';
                break;
            default:
                va = 'center';
                break;
        }
        return va;
    }
    /**
     * @return {?}
     */
    get horizontalAlign() {
        /** @type {?} */
        let ha = 'flex-start';
        if (this.column.align === 'right') {
            ha = 'flex-end';
        }
        else if (this.column.align === 'center') {
            ha = 'center';
        }
        return ha;
    }
    /**
     * @return {?}
     */
    get cellStyle() {
        /** @type {?} */
        const h = this.dg.nowrap ? '' : '100%';
        /** @type {?} */
        const w = this.lastColumn ? (this.column.width - 6) + 'px' : '100%';
        /** @type {?} */
        const style = {
            // height: h,
            width: w
        };
        if (!this.isEditing) {
            return Object.assign(style, {
                'align-items': this.verticalAlign,
                'justify-content': this.horizontalAlign
            });
        }
        else {
            return Object.assign(style, {
                'justify-content': this.horizontalAlign
            });
        }
    }
    /**
     * @return {?}
     */
    get cellFormatterIsFn() {
        return typeof this.column.formatter === 'function' || this.column.formatter.type === 'boolean';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initCellTemplateContext();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.initCellTemplateContext();
            this.buildCustomCellStyle();
            if (this.formControl) {
                /** @type {?} */
                const val = Utils.getValue(this.column.field, this.rowData);
                this.formControl.setValue(val);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCellTemplateContext() {
        this.cellContext = {
            field: this.column.field,
            rowIndex: this.rowIndex,
            rowData: this.rowData,
            column: this.column,
            instance: this,
            formGroup: this.dr.form,
            tools: {
                utils: this.dg.commonUtils,
                format: this.dg.colFormatSer,
                number: this.dg.colFormatSer['numberhelper'],
                date: this.dg.colFormatSer['datehelper']
            },
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.buildCustomCellStyle();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cellSubscription) {
            this.cellSubscription.unsubscribe();
            this.cellSubscription = null;
        }
        if (this.rowUpdateSubscription) {
            this.rowUpdateSubscription.unsubscribe();
            this.rowUpdateSubscription = null;
        }
    }
    /**
     * @private
     * @param {?=} rowData
     * @return {?}
     */
    buildCustomCellStyle(rowData = null) {
        /** @type {?} */
        const td = this.el.nativeElement.parentNode;
        if (!td.id) {
            td.id = TR_PREFIX + this.dr.rowId + '_' + this.rowIndex + '-' + this.column.field;
        }
        td.id = td.id.replace(/\./g, '_');
        if (this.column.styler) {
            /** @type {?} */
            const _rd = rowData || this.rowData;
            /** @type {?} */
            const cs = this.column.styler(_rd[this.column.field], _rd, this.rowIndex);
            if (cs && Object.keys(cs).length) {
                this.dg.renderCustomStyle(cs, td);
            }
        }
        else {
            this.dg.dgs.removeCssRule('#' + td.id);
        }
    }
    /**
     * @param {?=} val
     * @return {?}
     */
    updateValue(val) {
        if (this.dr.form) {
            // this.rowData = Object.assign(this.rowData, this.dr.form.value);
            Utils.setValue(this.column.field, val, this.rowData);
            // this.rowData = {...this.rowData};
            /** @type {?} */
            const rowid = this.rowData[this.dg.idField];
            /** @type {?} */
            const item = this.dg.data.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.dg.idField] === rowid));
            if (item) {
                Utils.setValue(this.column.field, val, item);
            }
            this.dfs.updateCheckedData(rowid, { [this.column.field]: val });
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        }
    }
}
DatagridCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-body-cell',
                template: `
    <div
     [attr.cell-tooltip]="column.showTips && !isEditing" [attr.tipMode]=" column.tipMode || 'auto'"
     [attr.message]="column | tipmsg: rowData"  [attr.position]=" column?.tipOptions?.position || 'top-left'"
     [attr.tipWidth]="column?.tipOptions?.width" [attr.tipHeight]="column?.tipOptions?.height"
     class="f-datagrid-cell-content" #cellContainer
     [ngStyle]="cellStyle"
    >
        <ng-container *ngIf="!isEditing && !column.template">
            <ng-container *ngIf="column.formatter">
                <span class="cell-text-box" *ngIf="cellFormatterIsFn" [innerHtml]=" column | formatCellData: rowData | safe: 'html'"></span>
                <span class="cell-text-box" *ngIf="!cellFormatterIsFn">{{  column | formatCellData: rowData }}</span>
            </ng-container>
            <span *ngIf="!column.formatter" class="cell-text-box" [class.grid-cell-nowrap]="dg.nowrap" [class.grid-cell-wrap]="!dg.nowrap">{{  column | formatCellData: rowData }}</span>
        </ng-container>

        <ng-container #cellTemplate *ngIf="!isEditing && column.template" [ngTemplateOutlet]="column.template" [ngTemplateOutletContext]="{$implicit: cellContext}"></ng-container>
        <ng-container #cellEditorTemplate *ngIf="isEditing && column.editorTemplate" [ngTemplateOutlet]="column.editorTemplate" [ngTemplateOutletContext]="{$implicit: cellContext}"></ng-container>
        <ng-container #editorTemplate *ngIf="isEditing && !column.editorTemplate" cell-editor [height]="controlHeight" [rowData]="rowData" [value]="value" [column]="column" [group]="dr.form"></ng-container>
    </div>
    `,
                changeDetection: ChangeDetectionStrategy.Default
            }] }
];
/** @nocollapse */
DatagridCellComponent.ctorParameters = () => [
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] },
    { type: DatagridRowDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridRowDirective)),] }] },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: ColumnFormatService },
    { type: DomSanitizer }
];
DatagridCellComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    cls: [{ type: Input }],
    column: [{ type: Input }],
    rowData: [{ type: Input }],
    rowIndex: [{ type: Input }],
    lastColumn: [{ type: Input }],
    isEditing: [{ type: Input }],
    isSelected: [{ type: Input }],
    cellContainer: [{ type: ViewChild, args: ['cellContainer',] }],
    cellTemplateVcr: [{ type: ViewChild, args: ['cellTemplate', { read: ViewContainerRef },] }],
    cellEditorTemplate: [{ type: ViewChild, args: ['cellEditorTemplate', { read: ViewContainerRef },] }],
    cellEditor: [{ type: ViewChild, args: [GridCellEditorDirective,] }],
    cellClick: [{ type: Output }],
    cellDblClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DatagridCellComponent.prototype.width;
    /** @type {?} */
    DatagridCellComponent.prototype.height;
    /** @type {?} */
    DatagridCellComponent.prototype.cls;
    /** @type {?} */
    DatagridCellComponent.prototype.column;
    /** @type {?} */
    DatagridCellComponent.prototype.rowData;
    /** @type {?} */
    DatagridCellComponent.prototype.rowIndex;
    /** @type {?} */
    DatagridCellComponent.prototype.lastColumn;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype._isEditing;
    /** @type {?} */
    DatagridCellComponent.prototype.controlHeight;
    /** @type {?} */
    DatagridCellComponent.prototype.isSelected;
    /** @type {?} */
    DatagridCellComponent.prototype.cellContainer;
    /** @type {?} */
    DatagridCellComponent.prototype.cellTemplateVcr;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype._cellEditorTemplate;
    /** @type {?} */
    DatagridCellComponent.prototype.cellEditor;
    /** @type {?} */
    DatagridCellComponent.prototype.cellClick;
    /** @type {?} */
    DatagridCellComponent.prototype.cellDblClick;
    /** @type {?} */
    DatagridCellComponent.prototype.cellContext;
    /** @type {?} */
    DatagridCellComponent.prototype.cellStyler;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.cellSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.rowUpdateSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.safePipe;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.ro;
    /** @type {?} */
    DatagridCellComponent.prototype.canEdit;
    /** @type {?} */
    DatagridCellComponent.prototype.dg;
    /** @type {?} */
    DatagridCellComponent.prototype.dr;
    /** @type {?} */
    DatagridCellComponent.prototype.el;
    /** @type {?} */
    DatagridCellComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.injector;
    /** @type {?} */
    DatagridCellComponent.prototype.colFormatSer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,