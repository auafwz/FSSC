/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_lookup.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { EMPTY } from 'rxjs';
import { switchMap, map, catchError } from 'rxjs/operators';
import { Repository, FrameContext } from '@farris/devkit';
/**
 * 帮助Rest取数服务
 */
export class BefLookupRestService {
    /**
     * 构造函数
     * @param {?} repository
     * @param {?} frameContext
     */
    constructor(repository, frameContext) {
        this.frameContext = frameContext;
        this.befRepository = (/** @type {?} */ (repository));
    }
    /**
     * @param {?} helpMetadataId
     * @param {?=} data
     * @return {?}
     */
    getData(helpMetadataId, data) {
        /** @type {?} */
        const tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        const labelId = helpMetadataId.split('.')[1];
        data = data || {};
        /** @type {?} */
        const enableExtendLoadMethod = this.ifEnableExtendLoadMethod(helpMetadataId);
        if (enableExtendLoadMethod === true) {
            return this.extendGetHelpData(labelId, tableName, data);
        }
        return this.getHelpData(labelId, tableName, data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    saveUserSettings(data) {
        /** @type {?} */
        const url = '/api/runtime/bcc/v1.0/datagrid/settings';
        return this.befRepository.restService.invoke(url, 'POST', null, { body: data }, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const formAppContext = this.befRepository.appContext.getFormAppContext();
            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getUserSettings(key) {
        /** @type {?} */
        const url = '/api/runtime/bcc/v1.0/datagrid/settings/' + key;
        return this.befRepository.restService.invoke(url, 'GET', null, null, false).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const formAppContext = this.befRepository.appContext.getFormAppContext();
            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    }
    /**
     * 是否启用扩展取数方法
     * @private
     * @param {?} helpMetadataId
     * @return {?}
     */
    ifEnableExtendLoadMethod(helpMetadataId) {
        // 优先使用context里的设置
        if (this.context && this.context.hasOwnProperty('enableExtendLoadMethod')) {
            return this.context.enableExtendLoadMethod;
        }
        // context没有设置时，继续使用通过指令设置的开关
        /** @type {?} */
        let enableExtendLoadMethod = false;
        if (this.frameContext) {
            /** @type {?} */
            const befApiUrl = this.frameContext.repository.apiUri;
            /** @type {?} */
            const enableKey = `${helpMetadataId}@${befApiUrl}`;
            enableExtendLoadMethod = this.frameContext.getParam(enableKey);
        }
        return enableExtendLoadMethod;
    }
    /**
     * 老的帮助取树
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    getHelpData(labelId, tableName, data) {
        /** @type {?} */
        const url = `${this.befRepository.restService.baseUri}/elementhelps/${labelId}`;
        /** @type {?} */
        const update$ = this.befRepository.updateDataAndVariableChanges();
        /** @type {?} */
        const result$ = update$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            // tslint:disable-next-line: max-line-length
            return this.befRepository.restService.invoke(url, 'GET', { nodeCode: tableName, queryParam: JSON.stringify(data) }, null, false).pipe(catchError((/**
             * @param {?} error
             * @return {?}
             */
            error => {
                /** @type {?} */
                const formAppContext = this.befRepository.appContext.getFormAppContext();
                this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
                return EMPTY;
            })));
        })));
        return result$;
    }
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} data
     * @return {?}
     */
    extendGetHelpData(labelId, tableName, data) {
        /** @type {?} */
        const url = `${this.befRepository.restService.baseUri}/extension/elementhelps`;
        /** @type {?} */
        const body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: data,
            requestInfo: this.befRepository.restService.buildRequestInfo()
        };
        /** @type {?} */
        const options = {
            body: body
        };
        /** @type {?} */
        const result$ = this.befRepository.restService.invoke(url, 'PUT', null, options, false, true, true);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        (responseInfo) => {
            return responseInfo && responseInfo.returnValue || null;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const formAppContext = this.befRepository.appContext.getFormAppContext();
            this.befRepository.restService.eventBus.post('Exception', '', 'onException', error, formAppContext);
            return EMPTY;
        })));
    }
    /**
     * @private
     * @param {?} data
     * @param {?=} layer
     * @param {?=} parentPathCode
     * @return {?}
     */
    convert2TreeDataWithPathCode(data, layer = 1, parentPathCode = '01') {
        /** @type {?} */
        let nodes = data.filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d.layer === layer && d.pathcode === parentPathCode));
        if (layer > 1) {
            nodes = data.filter((/**
             * @param {?} d
             * @return {?}
             */
            d => d.layer === layer && d.pathcode.substr(0, (layer - 1) * 2) === parentPathCode));
        }
        if (nodes.length) {
            /** @type {?} */
            const treeNodes = nodes.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    data: n,
                    children: []
                };
            }));
            treeNodes.forEach((/**
             * @param {?} tn
             * @return {?}
             */
            tn => {
                /** @type {?} */
                const _tns = this.convert2TreeDataWithPathCode(data, tn.data.layer + 1, tn.data.pathcode);
                tn.children.push(..._tns);
            }));
            return treeNodes;
        }
    }
}
BefLookupRestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefLookupRestService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefLookupRestService.prototype.befRepository;
    /**
     * 帮助取数上下文
     * @type {?}
     */
    BefLookupRestService.prototype.context;
    /**
     * @type {?}
     * @private
     */
    BefLookupRestService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,