import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { EffectorManager } from '../effector/effector_manager';
import { EntityList } from '../entity/index';
import { Expression } from '../expression/index';
import { ENTITY_TEMPLATE } from '../resolver/index';
import { ExpressionUtil } from '../utils/expression_util';
import { EventHandler } from './event_handler';
var BindingDataValueChangeEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataValueChangeEventHandler, _super);
    function BindingDataValueChangeEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BindingDataValueChangeEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter(function (expressionObject) {
                var deps = expressionObject.deps;
                if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                    return false;
                }
                var eventEntityPaths = _this.getEntityPath(event.path);
                eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);
                return deps.includes(eventEntityPaths.join('/'));
            });
        }
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    BindingDataValueChangeEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 输出副作用
     * @param event event
     * @param expressionObject 表达式
     * @returns
     */
    BindingDataValueChangeEventHandler.prototype.effect = function (event, expressionObject) {
        var e_1, _a;
        // 首先计算当前表达式和事件会影响那些路径
        var effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            return;
        }
        var result = this.analysis(event, expressionObject);
        if (!result) {
            return;
        }
        var eventPaths = this.cleanEventPath(event.path);
        var paths = [];
        if (result.distance === 0) {
            // 值变化之后影响到了一个表内字段或影响到了同级表字段
            if (result.isSameTable === false) {
                // 同级表跳过
                console.warn("[BindingDataValueChangeEventHandler]\u4E0D\u652F\u6301\u591A\u5BF9\u591A\u5173\u7CFB\u3002");
                return;
            }
            var prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);
            var path = prevPaths.concat(result.expressionPropertyNames);
            var currentRows = this.buildCurrentRows(result.eventTablePaths, path);
            paths.push(path);
            this.output(event, expressionObject, currentRows, effector, paths);
        }
        else {
            if (result.eventFromChildren === true) {
                if (result.distance > 1) {
                    return;
                }
                // 下级表值变化影响到了上级表的表达式
                var prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);
                var path = prevPaths.concat(result.expressionPropertyNames);
                paths.push(path);
                var currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);
                this.output(event, expressionObject, currentRows, effector, paths);
            }
            else if (result.eventFromParent === true) {
                if (result.distance > 1) {
                    console.warn("[BindingDataValueChangeEventHandler]\u4E0D\u652F\u6301\u591A\u5BF9\u591A\u5173\u7CFB\u3002");
                    return;
                }
                // 上级表值变化影响到了下级表的表达式
                var prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);
                // 添加下级表nodecode到路径中
                prevPaths.push(result.expressionTablePaths.slice(0).pop());
                // 遍历子表
                var bindingPaths = result.expressionTablePaths;
                var primaryKeyValue = eventPaths[0];
                if (!primaryKeyValue) {
                    return;
                }
                var object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);
                // prevPaths like [1,c,1.1,cc]
                for (var index = 1; index < prevPaths.length; index++) {
                    var propertyName = prevPaths[index];
                    if (object instanceof EntityList) {
                        object = object.get(propertyName);
                    }
                    else {
                        object = object[propertyName];
                    }
                }
                var list = object;
                if (list && list instanceof EntityList) {
                    if (list.count() === 0) {
                        if (expressionObject.type === Expression.ExpressionType.Visible || expressionObject.type === Expression.ExpressionType.Required) {
                            var context = this.buildContext(expressionObject, event);
                            var value = this.perform(expressionObject, context);
                            if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                                return;
                            }
                            expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);
                            if (expressionObject.id) {
                                this.expressionResult.set(expressionObject.id, expressionObject.result);
                            }
                            _super.prototype.effect.call(this, event, expressionObject);
                        }
                    }
                    else {
                        try {
                            for (var list_1 = tslib_1.__values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                                var entity = list_1_1.value;
                                if (entity && entity.primaryValue) {
                                    var path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);
                                    var currentRows = this.buildCurrentRows(result.expressionTablePaths, path);
                                    this.output(event, expressionObject, currentRows, effector, [path]);
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                }
            }
            else {
                // 跨表
            }
        }
    };
    BindingDataValueChangeEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
        var context = this.buildContext(expressionObject, event, null, currentRows);
        var value = this.perform(expressionObject, context);
        if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
            return;
        }
        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);
        ;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, expressionObject, paths);
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    BindingDataValueChangeEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        event = JSON.parse(JSON.stringify(event));
        var result = null;
        var bindingList = this.bindingData.getValue(paths);
        var eventEntityPath = this.getEntityPath(event.path);
        if (bindingList && bindingList.length > 0) {
            var primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            var childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
            if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                primaryValue = event.id || null;
                if (!primaryValue) {
                    primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                }
            }
            if (primaryValue) {
                var bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    };
    BindingDataValueChangeEventHandler.decorators = [
        { type: Injectable }
    ];
    return BindingDataValueChangeEventHandler;
}(EventHandler));
export { BindingDataValueChangeEventHandler };
//# sourceMappingURL=data:application/json;base64,