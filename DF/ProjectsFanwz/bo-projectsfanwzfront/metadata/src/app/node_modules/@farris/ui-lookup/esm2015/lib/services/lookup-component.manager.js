/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, switchMap } from 'rxjs/operators';
import { LookupLeftComponent } from '../lookup-left.component';
export class LookupComponentManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getComponentInstance(type = 'datatable') {
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.multiSelectDT;
        }
        /** @type {?} */
        let ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            const leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    createComponentWithServerData(data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    }
    /**
     * @return {?}
     */
    createFavoriteComponent() {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    createContent(opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        const type = this.ins.getComponentType();
        /** @type {?} */
        const dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        let cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(dtFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(dtFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, { allColumnsTitle: this.ins.allColumnsTitle });
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    }
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    createFavoritesContent(opts) {
        /** @type {?} */
        const type = this.ins.getComponentType();
        /** @type {?} */
        const dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        let cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(dtFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    resizeComponent(type = 'datatable') {
        /** @type {?} */
        const size = {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - 27;
        }
        this.getComponentInstance(type).resize(size);
    }
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    createLeftComponent(ops) {
        /** @type {?} */
        let dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d && d.data) {
                this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            const p = {
                pageInfo: {
                    pageIndex: this.ins.gridOptions.pageIndex,
                    pageSize: this.ins.gridOptions.pageSize
                }
            };
            Object.assign(p, { search: this.ins._searchState });
            return this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.ins.closeLoading();
            this.ins.loadDataWhenOpen = true;
            if (this.ins.useFavorite && !this.ins.isTree()) {
                this.ins.favHelper.updateFavoritesStatus(res.items);
            }
            this.ins.loadDataTableData(res);
            setTimeout((/**
             * @return {?}
             */
            () => {
                // 选中数据
                this.ins.selectionMgr.selectCurrentValue();
                this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    }
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    getNavigationFilter(navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            const result = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                /** @type {?} */
                const k = r.groupField;
                /** @type {?} */
                const dField = r.helpField;
                /** @type {?} */
                const rf = { fieldName: dField, fieldValue: '' };
                rf.fieldValue = k.split('.').reduce((/**
                 * @param {?} o
                 * @param {?} c
                 * @return {?}
                 */
                (o, c) => {
                    return o[c];
                }), navRow);
                result.push(rf);
            }));
            return result;
        }
        return '';
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupComponentManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,