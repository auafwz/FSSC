import { take } from 'rxjs/operators';
import { Injectable, Optional } from '@angular/core';
import { ParamService } from './param.service';
import { RuntimeFrameworkService } from './rtf-service';
import { isObservable } from 'rxjs';
/**
 * 应用参数服务
 * @scope FormModule
 */
export class ApplicationParamService {
    constructor(paramService, runtimeFrameworkService) {
        this.paramService = paramService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        if (!this.runtimeFrameworkService) {
            this.runtimeFrameworkService = new RuntimeFrameworkService();
        }
    }
    /**
     * 解析参数
     */
    parseParams(route, frameworkService, viewModel, callback) {
        const highOrderInvoke = this.highOrderInvoke(callback);
        if (!this.paramService) {
            route.queryParams.pipe(take(1)).subscribe((params) => {
                this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
            });
        }
        else {
            this.paramService.parse().pipe(take(1)).subscribe(params => {
                this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
            });
        }
    }
    /**
     * 设置参数
     */
    setupParams(params, frameworkService, viewModel, callback) {
        const queryParams = this.getParams(params);
        if (!queryParams) {
            callback();
            return;
        }
        // 先设置参数，保证普通路由也能正常执行。
        this.setQueryParams(queryParams, viewModel);
        const funcId = this.getFuncId(queryParams);
        const appId = this.getAppId(queryParams);
        if (!funcId && !appId) {
            callback();
            return;
        }
        if (funcId) {
            this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);
        }
        else {
            callback();
        }
    }
    /**
     * 设置查询参数
     */
    setQueryParams(queryParams, viewModel) {
        const parsedQueryParams = {};
        // 设置表单参数
        // 首先判断是否为弹窗
        const isInDialog = this.isInDialog(viewModel);
        const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
        // 如果是弹窗，弹窗外的参数（无论表单参数或静态参数）不应该覆盖弹窗的参数。弹窗打开时传递的参数相当于局部变量，不应被覆盖
        Object.keys(queryParams).forEach((paramName) => {
            if (!isInDialog) {
                parsedQueryParams[paramName] = queryParams[paramName];
            }
            else {
                if (!uiState.hasOwnProperty(paramName)) {
                    parsedQueryParams[paramName] = queryParams[paramName];
                }
            }
        });
        this.updateUIState(viewModel, parsedQueryParams);
    }
    /**
     * 设置静态参数
     */
    setStaticParams(funcId, queryParams, frameworkService, viewModel, callback) {
        this.runtimeFrameworkService.getMenuParams(funcId, (staicParams) => {
            const staticParamsObj = this.mapStaticParamsToObject(staicParams, queryParams, viewModel);
            if (!staticParamsObj) {
                callback();
                return;
            }
            this.updateUIState(viewModel, staticParamsObj);
            callback();
        });
    }
    /**
     * 将staticParams转换为普通对象
     * @param staticParams，形如：[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]
     * @return 形如：{key1: val1, key2: value2 }
     */
    mapStaticParamsToObject(staticParams, queryParams, viewModel) {
        if (!staticParams) {
            return;
        }
        const inDialog = this.isInDialog(viewModel);
        const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
        const result = {};
        staticParams.forEach((value, key, map) => {
            if (!inDialog) {
                // 静态参数不能覆盖查询参数
                if (!queryParams.hasOwnProperty(key)) {
                    result[key] = value;
                }
            }
            else {
                if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {
                    result[key] = value;
                }
            }
        });
        return result;
    }
    /**
     * 是否在弹窗内
     * @param viewModel viewmodel
     */
    isInDialog(viewModel) {
        let isInDialog = false;
        if (viewModel && viewModel.uiState) {
            // tslint:disable-next-line: max-line-length
            if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {
                isInDialog = true;
            }
        }
        return isInDialog;
    }
    /**
     * 更新UIState
     */
    updateUIState(viewModel, params) {
        if (!viewModel || !params) {
            return;
        }
        const uiState = viewModel.uiState;
        // 兼容使用string传递params对象的场景
        if (typeof params === 'string' && params !== '') {
            params = JSON.parse(params);
        }
        // 在UIState为参数创建属性
        Object.keys(params).forEach((propName) => {
            uiState.setPropertyValue(propName, params[propName]);
            if (propName && propName === 'union_session') {
                let sessionInfo = params[propName];
                this.setSessionInfo(viewModel, sessionInfo);
            }
        });
    }
    setSessionInfo(viewModel, sessionInfo) {
        if (!viewModel || !sessionInfo) {
            return;
        }
        if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {
            sessionInfo = JSON.parse(sessionInfo);
        }
        const token = sessionInfo && sessionInfo.token || null;
        const sessionId = sessionInfo && sessionInfo.sessionId || null;
        if (token) {
            viewModel.frameContext.appContext.Token = token;
        }
        if (sessionId) {
            const befRepository = viewModel.frameContext.repository;
            if (befRepository) {
                befRepository.restService.sessionService.setBeSessionId(sessionId);
            }
        }
    }
    /**
     * 获取功能菜单id
     */
    getFuncId(queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['funcId'];
    }
    /**
     * 获取应用id
     */
    getAppId(queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['appId'];
    }
    /**
     * 获取url参数对象
     * @param queryParams url参数
     */
    getParams(queryParams) {
        if (!queryParams) {
            return {};
        }
        let result = {};
        if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {
            let webFormRouteParams = queryParams['WEB_FORM_ROUTE_PARAMS'];
            if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {
                webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\n').replace(/%09/g, '\\t').replace(/%0D/g, '\\r'));
                result = JSON.parse(webFormRouteParams);
            }
            Object.keys(queryParams).forEach(prop => {
                if (prop !== 'WEB_FORM_ROUTE_PARAMS') {
                    result[prop] = queryParams[prop];
                }
            });
            return result;
        }
        return queryParams;
    }
    highOrderInvoke(callback) {
        return () => {
            try {
                const controlEvent = this.runtimeFrameworkService.getMenuSwitchControlEvent();
                if (controlEvent && isObservable(controlEvent)) {
                    controlEvent.subscribe((event) => {
                        if (event) {
                            event.next('ok');
                        }
                    });
                }
            }
            catch (e) {
                console.warn(e);
            }
            if (callback && typeof callback === 'function') {
                callback();
            }
        };
    }
}
ApplicationParamService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApplicationParamService.ctorParameters = () => [
    { type: ParamService, decorators: [{ type: Optional }] },
    { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,