import { Injectable, Injector } from "@angular/core";
import { AppContextManager, FrameContext } from "@farris/devkit";
import { from, of } from "rxjs";
import { BefRepositoryUtil } from '@farris/bef';
import { concatMap, throwIfEmpty } from "rxjs/operators";
import { ValidationService } from "../validation.service";
import { WorkFlowMessage } from "./work-flow-message";
import { WorkFlowMessageService } from "./work-flow-message.service";
export class WorkFlowMessageHandler {
    constructor(injector, frameContext, workFlowMessageService, workFlowMessage) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.workFlowMessageService = workFlowMessageService;
        this.workFlowMessage = workFlowMessage;
    }
    onComponentInit(frameContext) {
        this.workFlowMessage.addEventListener(this.handle.bind(this));
    }
    handle(message) {
        const source = message.sender;
        const data = message.data;
        const commandName = data.command || null;
        let resultTask = null;
        if (!commandName) {
            return;
        }
        if (commandName == 'wf-required-verification') {
            // 工作流的必填校验
            // 如此获取的是当前组件的校验服务，应该按namespace来区分，不同的namespace需要分别执行校验
            const formFrameContexts = this.getFormFrameContexts();
            resultTask = from(formFrameContexts).pipe(concatMap((frameContext) => {
                var validation = frameContext.injector.get(ValidationService, null);
                if (validation) {
                    return validation.validateAll();
                }
                return of(true);
            }));
        }
        else {
            var command = this.frameContext.viewModel[commandName];
            if (command) {
                resultTask = command(data.arguments);
            }
        }
        if (resultTask) {
            const message = this.buildMessage(true, source, this.isChanged);
            resultTask.pipe(throwIfEmpty()).subscribe((result) => {
                // 向来源方回传消息
                this.workFlowMessageService.send(message);
            }, () => {
                message.data.result = false;
                this.workFlowMessageService.send(message);
            });
        }
    }
    buildMessage(result, target, dataChanged, type = 'message') {
        const message = {
            data: {
                result,
                dataChanged
            },
            type: type,
            target: target,
        };
        return message;
    }
    getFormFrameContexts() {
        const appContextManager = this.injector.get(AppContextManager, null);
        const formFrameContexts = [];
        if (appContextManager) {
            const appContexts = appContextManager.getAppContexts();
            if (appContexts && appContexts.length > 0) {
                appContexts.forEach((appContext) => {
                    const frameContexts = appContext.frameContextManager.getFrameContexts();
                    frameContexts.reduce((contexts, frameContext) => {
                        const namespace = frameContext.namespace;
                        const index = contexts.findIndex((frame) => frame.namespace === namespace);
                        if (index === -1) {
                            const root = frameContext.getVirtualRootFrameContext();
                            contexts.push(root);
                        }
                        return contexts;
                    }, formFrameContexts);
                });
            }
        }
        return formFrameContexts;
    }
    /**
     * 是否有未保存的变更
     */
    get isChanged() {
        const befRepository = this.frameContext.repository;
        return BefRepositoryUtil.isExistUnsaveData(befRepository);
    }
}
WorkFlowMessageHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WorkFlowMessageHandler.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: WorkFlowMessageService },
    { type: WorkFlowMessage }
];
//# sourceMappingURL=data:application/json;base64,