/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ElementRef, ViewChild, ViewContainerRef, ViewEncapsulation, Renderer2 } from '@angular/core';
var TooltipComponent = /** @class */ (function () {
    function TooltipComponent(el, render) {
        this.el = el;
        this.render = render;
        this.contentIsString = true;
        this._tipWidth = '';
        this._tipCls = '';
        /* 位置 */
        this.placement = 'top';
        /* 位置样式 */
        this.positionStyle = {};
    }
    Object.defineProperty(TooltipComponent.prototype, "content", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nfContent;
        },
        /* 普通文本内容 */
        set: /* 普通文本内容 */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this.contentIsString = false;
                this.contentViewf.createEmbeddedView(value);
            }
            else {
                this.contentIsString = true;
                this.nfContent = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipComponent.prototype, "tipWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tipWidth;
        },
        /**因为表单生成没有排除factory,不能使用模板 */
        set: /**
         * 因为表单生成没有排除factory,不能使用模板
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._tipWidth) {
                if (value) {
                    this.render.setStyle(this.innerNode.nativeElement, 'width', value);
                    this.render.setStyle(this.innerNode.nativeElement, 'max-width', 'none');
                }
                else {
                    this.render.removeStyle(this.innerNode.nativeElement, 'width');
                    this.render.removeStyle(this.innerNode.nativeElement, 'max-width');
                }
                this._tipWidth = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TooltipComponent.prototype, "tipCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tipCls;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._tipCls) {
                //移除旧样式
                this._tipCls && this.render.removeClass(this.el.nativeElement, this._tipCls);
                //追加新样式
                value && this.render.addClass(this.el.nativeElement, value);
                this._tipCls = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TooltipComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TooltipComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.hostBoundingClientRect) {
            this.judgeWidth();
            this.calculatePosition(this.hostBoundingClientRect);
        }
    };
    /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     */
    /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     * @return {?}
     */
    TooltipComponent.prototype.judgeWidth = /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     * @return {?}
     */
    function () {
        if (this.innerNode.nativeElement.scrollHeight > this.innerNode.nativeElement.clientHeight) {
            this.render.addClass(this.innerNode.nativeElement, 'tooltip-inner-lg');
        }
    };
    /* 计算tooltip最新位置 */
    /* 计算tooltip最新位置 */
    /**
     * @param {?} hostPosition
     * @return {?}
     */
    TooltipComponent.prototype.calculatePosition = /* 计算tooltip最新位置 */
    /**
     * @param {?} hostPosition
     * @return {?}
     */
    function (hostPosition) {
        /** @type {?} */
        var top = 0;
        /** @type {?} */
        var left = 0;
        /** @type {?} */
        var tooltipSize = this.tooltipNode.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var arrowSize = this.arrowNode.nativeElement.getBoundingClientRect();
        if (this.placement === 'top') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
        }
        else if (this.placement === 'left') {
            top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
            left = hostPosition.left - tooltipSize.width - 2;
        }
        else if (this.placement === 'right') {
            top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
            left = hostPosition.right + 2;
        }
        else if (this.placement === 'bottom') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
        }
        else if (this.placement === 'top-left') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.left;
            this.arrowNode.nativeElement.style.left = '10%';
        }
        else if (this.placement === 'top-right') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.right - tooltipSize.width;
            this.arrowNode.nativeElement.style.right = '10%';
        }
        else if (this.placement === 'right-top') {
            top = hostPosition.top;
            left = hostPosition.right + 2;
            this.arrowNode.nativeElement.style.top = '10%';
        }
        else if (this.placement === 'right-bottom') {
            top = hostPosition.bottom - tooltipSize.height;
            left = hostPosition.right + 2;
            this.arrowNode.nativeElement.style.bottom = '10%';
        }
        else if (this.placement === 'bottom-left') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.left;
            this.arrowNode.nativeElement.style.left = '10%';
        }
        else if (this.placement === 'bottom-right') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.right - tooltipSize.width;
            this.arrowNode.nativeElement.style.right = '10%';
        }
        else if (this.placement === 'left-top') {
            top = hostPosition.top;
            left = hostPosition.left - tooltipSize.width - 2;
            this.arrowNode.nativeElement.style.top = '10%';
        }
        else if (this.placement === 'left-bottom') {
            top = hostPosition.bottom - tooltipSize.height;
            left = hostPosition.left - tooltipSize.width - 2;
            this.arrowNode.nativeElement.style.bottom = '10%';
        }
        this.tooltipNode.nativeElement.style.top = top + 'px';
        this.tooltipNode.nativeElement.style.left = left + 'px';
    };
    /*
    *12个位置名解析
    * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
    */
    /*
        *12个位置名解析
        * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
        */
    /**
     * @return {?}
     */
    TooltipComponent.prototype.offsetDirection = /*
        *12个位置名解析
        * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
        */
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var placement = this.placement;
        if (placement.indexOf('-') !== -1) {
            /** @type {?} */
            var index = placement.indexOf('-');
            return placement.substring(0, index);
        }
        return placement;
    };
    TooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-tooltip',
                    template: "<div #tooltipEle [class]=\"('bs-tooltip-'+offsetDirection())+' tooltip show'\">\r\n    <div #arrowEle class=\"arrow\"></div>\r\n    <div #innerEle class=\"tooltip-inner\">\r\n        <div #contentViewf class=\"tooltip-tmpl\">\r\n            <div *ngIf=\"contentIsString\" class=\"tooltip-text\" [innerHtml]=\"nfContent|tooltipHtml\"></div>\r\n            <ng-container *ngIf=\"!contentIsString\"> {{nfContent}}</ng-container>\r\n        </div>       \r\n    </div>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".bs-tooltip-bottom .arrow,.bs-tooltip-top .arrow{left:50%}.bs-tooltip-left .arrow,.bs-tooltip-right .arrow{top:25%}"]
                }] }
    ];
    /** @nocollapse */
    TooltipComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TooltipComponent.propDecorators = {
        contentViewf: [{ type: ViewChild, args: ['contentViewf', { read: ViewContainerRef },] }],
        tooltipNode: [{ type: ViewChild, args: ['tooltipEle', { read: ElementRef },] }],
        arrowNode: [{ type: ViewChild, args: ['arrowEle', { read: ElementRef },] }],
        innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
        content: [{ type: Input }],
        tipWidth: [{ type: Input }],
        tipCls: [{ type: Input }],
        placement: [{ type: Input }]
    };
    return TooltipComponent;
}());
export { TooltipComponent };
if (false) {
    /** @type {?} */
    TooltipComponent.prototype.contentViewf;
    /** @type {?} */
    TooltipComponent.prototype.tooltipNode;
    /** @type {?} */
    TooltipComponent.prototype.arrowNode;
    /** @type {?} */
    TooltipComponent.prototype.innerNode;
    /** @type {?} */
    TooltipComponent.prototype.contentIsString;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype._tipWidth;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype._tipCls;
    /** @type {?} */
    TooltipComponent.prototype.placement;
    /** @type {?} */
    TooltipComponent.prototype.hostBoundingClientRect;
    /** @type {?} */
    TooltipComponent.prototype.nfContent;
    /** @type {?} */
    TooltipComponent.prototype.positionStyle;
    /** @type {?} */
    TooltipComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,