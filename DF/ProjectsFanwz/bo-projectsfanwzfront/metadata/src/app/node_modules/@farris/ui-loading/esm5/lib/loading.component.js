/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.1.8
 * @Date: 2018-09-18 16:04:05
 * @LastEditTime: 2019-10-17 13:42:45
 */
import { Component, ElementRef, ViewChild, Renderer2, Output, EventEmitter, Input } from '@angular/core';
import { LOADING_STYLES } from './loading.styles';
import { delay, filter } from 'rxjs/operators';
var LoadingComponent = /** @class */ (function () {
    function LoadingComponent(render, el) {
        this.render = render;
        this.el = el;
        this.showMessage = true;
        this.loadingStyleDom = LOADING_STYLES;
        this._isActive = false;
        this.activeSubject = new BehaviorSubject(false);
        this.message = '';
        this.width = 30;
        /**
         * loading 样式
         */
        this.type = 0;
        this.delay = 300;
        this.closed = new EventEmitter();
        this.activedSubscrition = null;
    }
    Object.defineProperty(LoadingComponent.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isActive;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._isActive = val;
            if (this.activeSubject) {
                this.activeSubject.next(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LoadingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.activedSubscrition = this.activeSubject.pipe(filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return n;
        })), delay(this.delay)).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v && _this_1.isActive) {
                // this.animate('f-component-loading fadeIn animated');
                _this_1.render.setStyle(_this_1.loadingContainerEl.nativeElement, 'display', 'block');
                _this_1.render.setStyle(_this_1.loadingBackdrop.nativeElement, 'display', 'block');
                _this_1.setPosition();
            }
        }));
    };
    /**
     * @return {?}
     */
    LoadingComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LoadingComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.activedSubscrition.unsubscribe();
        this.activeSubject.complete();
        this.activeSubject = null;
    };
    /**
     * @return {?}
     */
    LoadingComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        // if (this.loadingBackdrop.nativeElement.parentElement) {
        //     this.render.removeChild(this.el.nativeElement, this.loadingBackdrop.nativeElement);
        // }
        // const waitEle = document.body.querySelector('.farris-loading-backdrop');
        if (this.loadingBackdrop) {
            this.loadingBackdrop.nativeElement.remove();
        }
        this.isActive = false;
        this.render.removeAttribute(this.el.nativeElement, 'class');
        // this.animate('f-component-loading fadeOut animated animated-0.5');
        this.closed.emit(this.isActive);
    };
    /**
     * @private
     * @return {?}
     */
    LoadingComponent.prototype.setPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerWidth = this.loadingContainerEl.nativeElement.clientWidth;
        /** @type {?} */
        var containerHeight = this.loadingContainerEl.nativeElement.clientHeight;
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginTop', -containerHeight / 2 + 'px');
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginLeft', -containerWidth / 2 + 'px');
    };
    /**
     * @private
     * @param {?} animateCls
     * @return {?}
     */
    LoadingComponent.prototype.animate = /**
     * @private
     * @param {?} animateCls
     * @return {?}
     */
    function (animateCls) {
        this.addAnimationEndEvent('webkitAnimationEnd', 'mozAnimationEnd', 'MSAnimationEnd', 'oanimationend', 'animationend');
        this.render.setAttribute(this.el.nativeElement, 'class', animateCls);
    };
    /**
     * @private
     * @param {...?} events
     * @return {?}
     */
    LoadingComponent.prototype.addAnimationEndEvent = /**
     * @private
     * @param {...?} events
     * @return {?}
     */
    function () {
        var events = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            events[_i] = arguments[_i];
        }
        /** @type {?} */
        var _this = this;
        events.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.el.nativeElement.addEventListener(e, (/**
             * @return {?}
             */
            function handler() {
                _this.el.nativeElement.removeEventListener(e, handler);
                // _this.render.removeAttribute(_this.el.nativeElement, 'class');
                ['fadeIn', 'fadeOut', 'animated', 'animated-0.5'].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this.render.removeClass(_this.el.nativeElement, n);
                }));
                _this.closed.emit(_this.isActive);
            }));
        }));
    };
    LoadingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-loading',
                    template: "\n        <div #loadingBackdrop class=\"farris-loading-backdrop loading-wait\" style=\"display: none\"></div>\n        <div #loadingContainerEl class=\"farris-loading\" style=\"display: none\">\n            <div class=\"ng-busy-default-wrapper\">\n                <div class=\"ng-busy-default-sign\" >\n                    <div [style.width]=\"width+ 'px'\" [style.height]=\"width+'px'\" style=\"display: inline-block;margin:4px;\"\n                                [innerHTML]=\"loadingStyleDom[type] | safe: 'html'\"></div>\n                    <div class=\"ng-busy-default-text\" style=\"margin-left:0;\"\n                                 *ngIf=\"showMessage\" [innerHTML]=\"'loading.message' | locale: '' :message | safe: 'html'\"></div>\n                </div>\n            </div>\n        </div>\n    ",
                    styles: [".loading-wait {\n            cursor: wait\n        }\n        .animated-0.5 {\n            -webkit-animation-duration: 0s;\n            animation-duration: 0s;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    LoadingComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    LoadingComponent.propDecorators = {
        showMessage: [{ type: Input }],
        loadingContainerEl: [{ type: ViewChild, args: ['loadingContainerEl',] }],
        loadingBackdrop: [{ type: ViewChild, args: ['loadingBackdrop',] }],
        closed: [{ type: Output }]
    };
    return LoadingComponent;
}());
export { LoadingComponent };
if (false) {
    /** @type {?} */
    LoadingComponent.prototype.showMessage;
    /** @type {?} */
    LoadingComponent.prototype.loadingStyleDom;
    /** @type {?} */
    LoadingComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype._isActive;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.activeSubject;
    /** @type {?} */
    LoadingComponent.prototype.message;
    /** @type {?} */
    LoadingComponent.prototype.width;
    /**
     * loading 样式
     * @type {?}
     */
    LoadingComponent.prototype.type;
    /** @type {?} */
    LoadingComponent.prototype.delay;
    /** @type {?} */
    LoadingComponent.prototype.loadingContainerEl;
    /** @type {?} */
    LoadingComponent.prototype.loadingBackdrop;
    /** @type {?} */
    LoadingComponent.prototype.closed;
    /** @type {?} */
    LoadingComponent.prototype.activedSubscrition;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxvYWRpbmcvIiwic291cmNlcyI6WyJsaWIvbG9hZGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBcUMsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7Ozs7QUFVMUUsT0FBTyxFQUFFLFNBQVMsRUFBVSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBaUIsTUFBTSxFQUFFLFlBQVksRUFBYSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0ksT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUEyQixNQUFNLGdCQUFnQixDQUFDO0FBR3hFO0lBc0RJLDBCQUFvQixNQUFpQixFQUFVLEVBQWM7UUFBekMsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUEzQnBELGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQzVCLG9CQUFlLEdBQUcsY0FBYyxDQUFDO1FBRXpCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsVUFBSyxHQUFHLEVBQUUsQ0FBQzs7OztRQUVYLFNBQUksR0FBRyxDQUFDLENBQUM7UUFFVCxVQUFLLEdBQUcsR0FBRyxDQUFDO1FBZUYsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDM0MsdUJBQWtCLEdBQWlCLElBQUksQ0FBQztJQUd2QyxDQUFDO0lBakJGLHNCQUFJLHNDQUFROzs7O1FBQVo7WUFDSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUIsQ0FBQzs7Ozs7UUFFRCxVQUFhLEdBQVk7WUFDckIsSUFBSSxDQUFDLFNBQVMsR0FB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O0lBQ25ELG1DQUFhOztJQUNiLGlDQUFXOzs7OztJQUVYLGdDQUFTOztJQUVULGlDQUFZOztJQWFaLDhDQUFnRTs7SUFDaEUsMkNBQTBEOztJQUMxRCxrQ0FBMkM7O0lBQzNDLDhDQUF3Qzs7Ozs7SUFDNUIsa0NBQXlCOzs7OztJQUFFLDhCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBDb21wYW55OiBJbnNwdXJcclxuICogQFZlcnNpb246IHYwLjEuOFxyXG4gKiBARGF0ZTogMjAxOC0wOS0xOCAxNjowNDowNVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTE3IDEzOjQyOjQ1XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEVsZW1lbnRSZWYsIFZpZXdDaGlsZCwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMT0FESU5HX1NUWUxFUyB9IGZyb20gJy4vbG9hZGluZy5zdHlsZXMnO1xyXG5pbXBvcnQgeyBkZWxheSwgZmlsdGVyLCBkZWJvdW5jZVRpbWUsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtbG9hZGluZycsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxkaXYgI2xvYWRpbmdCYWNrZHJvcCBjbGFzcz1cImZhcnJpcy1sb2FkaW5nLWJhY2tkcm9wIGxvYWRpbmctd2FpdFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiPjwvZGl2PlxyXG4gICAgICAgIDxkaXYgI2xvYWRpbmdDb250YWluZXJFbCBjbGFzcz1cImZhcnJpcy1sb2FkaW5nXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZy1idXN5LWRlZmF1bHQtd3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5nLWJ1c3ktZGVmYXVsdC1zaWduXCIgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgW3N0eWxlLndpZHRoXT1cIndpZHRoKyAncHgnXCIgW3N0eWxlLmhlaWdodF09XCJ3aWR0aCsncHgnXCIgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7bWFyZ2luOjRweDtcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwibG9hZGluZ1N0eWxlRG9tW3R5cGVdIHwgc2FmZTogJ2h0bWwnXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5nLWJ1c3ktZGVmYXVsdC10ZXh0XCIgc3R5bGU9XCJtYXJnaW4tbGVmdDowO1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwic2hvd01lc3NhZ2VcIiBbaW5uZXJIVE1MXT1cIidsb2FkaW5nLm1lc3NhZ2UnIHwgbG9jYWxlOiAnJyA6bWVzc2FnZSB8IHNhZmU6ICdodG1sJ1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYCxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIGAubG9hZGluZy13YWl0IHtcclxuICAgICAgICAgICAgY3Vyc29yOiB3YWl0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5hbmltYXRlZC0wLjUge1xyXG4gICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMHM7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGBcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIExvYWRpbmdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoKSBzaG93TWVzc2FnZSA9IHRydWU7XHJcbiAgICBsb2FkaW5nU3R5bGVEb20gPSBMT0FESU5HX1NUWUxFUztcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9pc0FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XHJcbiAgICBtZXNzYWdlID0gJyc7XHJcbiAgICB3aWR0aCA9IDMwO1xyXG4gICAgLyoqIGxvYWRpbmcg5qC35byPICovXHJcbiAgICB0eXBlID0gMDtcclxuXHJcbiAgICBkZWxheSA9IDMwMDtcclxuXHJcbiAgICBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWN0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBpc0FjdGl2ZSh2YWw6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IHZhbDtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmVTdWJqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU3ViamVjdC5uZXh0KHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2xvYWRpbmdDb250YWluZXJFbCcpIGxvYWRpbmdDb250YWluZXJFbDogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2xvYWRpbmdCYWNrZHJvcCcpIGxvYWRpbmdCYWNrZHJvcDogRWxlbWVudFJlZjtcclxuICAgIEBPdXRwdXQoKSBjbG9zZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICAgIGFjdGl2ZWRTdWJzY3JpdGlvbjogU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcclxuICAgICAgXHJcbiAgICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlZFN1YnNjcml0aW9uID0gdGhpcy5hY3RpdmVTdWJqZWN0LnBpcGUoXHJcbiAgICAgICAgICAgIGZpbHRlcigobjogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG47XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBkZWxheSh0aGlzLmRlbGF5KVxyXG4gICAgICAgICkuc3Vic2NyaWJlKHYgPT4ge1xyXG4gICAgICAgICAgICBpZiAodiAmJiB0aGlzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmFuaW1hdGUoJ2YtY29tcG9uZW50LWxvYWRpbmcgZmFkZUluIGFuaW1hdGVkJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmxvYWRpbmdDb250YWluZXJFbC5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5sb2FkaW5nQmFja2Ryb3AubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVkU3Vic2NyaXRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZVN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZVN1YmplY3QgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIC8vIGlmICh0aGlzLmxvYWRpbmdCYWNrZHJvcC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2hpbGQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmxvYWRpbmdCYWNrZHJvcC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gY29uc3Qgd2FpdEVsZSA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcignLmZhcnJpcy1sb2FkaW5nLWJhY2tkcm9wJyk7XHJcbiAgICAgICAgaWYgKHRoaXMubG9hZGluZ0JhY2tkcm9wKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0JhY2tkcm9wLm5hdGl2ZUVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnY2xhc3MnKTtcclxuICAgICAgICAvLyB0aGlzLmFuaW1hdGUoJ2YtY29tcG9uZW50LWxvYWRpbmcgZmFkZU91dCBhbmltYXRlZCBhbmltYXRlZC0wLjUnKTtcclxuICAgICAgICB0aGlzLmNsb3NlZC5lbWl0KHRoaXMuaXNBY3RpdmUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyV2lkdGggPSB0aGlzLmxvYWRpbmdDb250YWluZXJFbC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckhlaWdodCA9IHRoaXMubG9hZGluZ0NvbnRhaW5lckVsLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmxvYWRpbmdDb250YWluZXJFbC5uYXRpdmVFbGVtZW50LCAnbWFyZ2luVG9wJywgLWNvbnRhaW5lckhlaWdodCAvIDIgKyAncHgnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmxvYWRpbmdDb250YWluZXJFbC5uYXRpdmVFbGVtZW50LCAnbWFyZ2luTGVmdCcsIC1jb250YWluZXJXaWR0aCAvIDIgKyAncHgnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFuaW1hdGUoYW5pbWF0ZUNsczogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5hZGRBbmltYXRpb25FbmRFdmVudCgnd2Via2l0QW5pbWF0aW9uRW5kJywgJ21vekFuaW1hdGlvbkVuZCcsICdNU0FuaW1hdGlvbkVuZCcsICdvYW5pbWF0aW9uZW5kJywgJ2FuaW1hdGlvbmVuZCcpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdjbGFzcycsIGFuaW1hdGVDbHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkQW5pbWF0aW9uRW5kRXZlbnQoLi4uZXZlbnRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgZXZlbnRzLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgICAgIF90aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihlLCBmdW5jdGlvbiBoYW5kbGVyKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZWwubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgLy8gX3RoaXMucmVuZGVyLnJlbW92ZUF0dHJpYnV0ZShfdGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnY2xhc3MnKTtcclxuICAgICAgICAgICAgICAgIFsnZmFkZUluJywgJ2ZhZGVPdXQnLCAnYW5pbWF0ZWQnLCAnYW5pbWF0ZWQtMC41J10uZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3MoX3RoaXMuZWwubmF0aXZlRWxlbWVudCwgbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlZC5lbWl0KF90aGlzLmlzQWN0aXZlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19