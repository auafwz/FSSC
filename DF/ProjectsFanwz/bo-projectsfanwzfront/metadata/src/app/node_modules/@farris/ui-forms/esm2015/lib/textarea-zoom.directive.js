/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TextareaWordcountDirective } from './textarea-wordcount.directive';
import { NgControl } from '@angular/forms';
import { Directive, ElementRef, Renderer2, Injector, Input, Optional } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { MessagerService } from '@farris/ui-messager';
export class TextareaZoomDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} injector
     * @param {?} wordCountRef
     */
    constructor(el, render, injector, wordCountRef) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.wordCountRef = wordCountRef;
        this.useZoom = true;
        this.dialogWidth = 500;
        this.dialogHeight = 400;
        this.fullscreen = false;
        this.title = '';
        this.value = '';
        this.onMouseEnter = null;
        this.onMouseLeave = null;
        this.onClick = null;
        this.altEnterHandler = null;
        this.zoomButtonElement = null;
        this.messagerService = this.injector.get(MessagerService);
        this.eventManager = this.injector.get(EventManager);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngControl = this.injector.get(NgControl, null);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.useZoom && !changes.useZoom.isFirstChange()) {
            if (this.useZoom) {
                this.createZoomButton();
            }
            else {
                this.destroy();
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.useZoom) {
            this.createZoomButton();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @private
     * @return {?}
     */
    destroy() {
        if (this.onMouseEnter) {
            this.onMouseEnter();
        }
        if (this.onMouseLeave) {
            this.onMouseLeave();
        }
        if (this.onClick) {
            this.onClick();
        }
        if (this.altEnterHandler) {
            this.altEnterHandler();
        }
        if (this.zoomButtonElement) {
            this.zoomButtonElement.remove();
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindEventHandler() {
        this.altEnterHandler = this.eventManager.addEventListener(this.el.nativeElement, 'keydown.alt.enter', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const target = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            const val = target.value + '\n';
            target.value = val;
            event.preventDefault();
            event.stopPropagation();
            return false;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    createZoombarID() {
        /** @type {?} */
        const tagName = this.el.nativeElement.tagName;
        if (this.ngControl) {
            /** @type {?} */
            const ctrlName = this.ngControl.name;
            return `${tagName}_ZOOMBAR_${ctrlName}`;
        }
        else {
            if (this.el.nativeElement.id) {
                return `${tagName}_ZOOMBAR_${this.el.nativeElement.id}`;
            }
        }
        return '';
    }
    /**
     * @private
     * @return {?}
     */
    createZoomButton() {
        /** @type {?} */
        const zoomSPAN = this.render.createElement('span');
        zoomSPAN.className = 'f-icon modal_maximize textarea-zoom';
        zoomSPAN.title = '点击后弹出进行编辑';
        /** @type {?} */
        const id = this.createZoombarID();
        if (id) {
            zoomSPAN.id = id;
        }
        this.render.setStyle(zoomSPAN, 'position', 'absolute');
        this.render.setStyle(zoomSPAN, 'top', '2px');
        this.render.setStyle(zoomSPAN, 'right', '2px');
        this.render.setStyle(zoomSPAN, 'cursor', 'pointer');
        this.el.nativeElement.after(zoomSPAN);
        this.zoomButtonElement = zoomSPAN;
        this.onMouseEnter = this.render.listen(zoomSPAN, 'mouseenter', (/**
         * @return {?}
         */
        () => {
            this.render.setStyle(zoomSPAN, 'fontSize', '22px');
        }));
        this.onMouseLeave = this.render.listen(zoomSPAN, 'mouseleave', (/**
         * @return {?}
         */
        () => {
            this.render.setStyle(zoomSPAN, 'fontSize', '1rem');
        }));
        this.onClick = this.render.listen(zoomSPAN, 'click', (/**
         * @return {?}
         */
        () => {
            this.zoomTextarea();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    zoomTextarea() {
        /** @type {?} */
        const opts = {
            width: this.dialogWidth || 500,
            height: this.dialogHeight || 400,
            showFontSize: true,
            saveSize: true // 启用个性化存储，localStorage
        };
        if (window.localStorage) {
            /** @type {?} */
            const key = this.messagerService.getKeyString();
            /** @type {?} */
            const val = localStorage.getItem(key);
            if (val) {
                /** @type {?} */
                const lastSetting = JSON.parse(val);
                opts.fontSize = lastSetting.fontSize || 18;
                opts.width = lastSetting.width || opts.width;
                opts.height = lastSetting.height || opts.height;
            }
        }
        /** @type {?} */
        const tagName = this.el.nativeElement.tagName;
        /** @type {?} */
        let showText = this.el.nativeElement.value;
        if (this.ngControl) {
            showText = this.ngControl.value;
        }
        else {
            showText = this.el.nativeElement.value;
        }
        showText = this.value || showText;
        if (tagName === 'FARRIS-TEXT' || this.el.nativeElement.readOnly || this.el.nativeElement.disabled) {
            opts.readonly = true;
            opts.showOkButton = false;
            this.messagerService.prompt2(this.title, showText, opts).subscribe();
        }
        else {
            opts.maxLength = this.el.nativeElement.maxLength;
            opts.enableWordCount = this.wordCountRef ? this.wordCountRef.useWordCount : false;
            opts.countType = this.wordCountRef ? this.wordCountRef.countType : 'length';
            this.messagerService.prompt2(this.title, showText, opts).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (typeof v === 'boolean' && !v) {
                    return;
                }
                else {
                    this.ngControl.control.setValue(v);
                    if (this.wordCountRef) {
                        this.wordCountRef.updateWordsCount();
                    }
                }
            }));
        }
    }
}
TextareaZoomDirective.decorators = [
    { type: Directive, args: [{
                selector: '[textarea-zoom]',
            },] }
];
/** @nocollapse */
TextareaZoomDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector },
    { type: TextareaWordcountDirective, decorators: [{ type: Optional }] }
];
TextareaZoomDirective.propDecorators = {
    useZoom: [{ type: Input, args: ['textarea-zoom',] }],
    dialogWidth: [{ type: Input }],
    dialogHeight: [{ type: Input }],
    fullscreen: [{ type: Input }],
    title: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextareaZoomDirective.prototype.useZoom;
    /** @type {?} */
    TextareaZoomDirective.prototype.dialogWidth;
    /** @type {?} */
    TextareaZoomDirective.prototype.dialogHeight;
    /** @type {?} */
    TextareaZoomDirective.prototype.fullscreen;
    /** @type {?} */
    TextareaZoomDirective.prototype.title;
    /** @type {?} */
    TextareaZoomDirective.prototype.value;
    /** @type {?} */
    TextareaZoomDirective.prototype.onMouseEnter;
    /** @type {?} */
    TextareaZoomDirective.prototype.onMouseLeave;
    /** @type {?} */
    TextareaZoomDirective.prototype.onClick;
    /** @type {?} */
    TextareaZoomDirective.prototype.altEnterHandler;
    /** @type {?} */
    TextareaZoomDirective.prototype.zoomButtonElement;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.wordCountRef;
}
//# sourceMappingURL=data:application/json;base64,