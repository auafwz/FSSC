/**
 * @fileoverview added by tsickle
 * Generated from: lib/append-group-org/appendorg.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef, Injector, ViewChild, TemplateRef, HostBinding, NgZone } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import * as _ from 'lodash-es';
import { of } from 'rxjs';
import { CommonUtil } from '../../utils/common.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { switchMap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
var AppendGroupOrgComponent = /** @class */ (function () {
    function AppendGroupOrgComponent(apiService, cdr, injector, ngZone, msgService) {
        var _this = this;
        this.apiService = apiService;
        this.cdr = cdr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.msgService = msgService;
        this.baseCls = true;
        this.primaryField = 'orgId';
        this.pathLength = 4;
        this.originalTreeData = [];
        this.treeListData = [];
        this.treeTableCols = [];
        this.initLoad = true;
        this.beforeClickNode = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.enableHierarchicalLoading) {
                return of(true);
            }
            if (!_this.multiSelect) {
                if (e.rowNode.isSelected) {
                    _this.currentOrgs = [];
                }
                else {
                    _this.currentOrgs = new Array(e.rowNode.node.data);
                }
                return of(false);
            }
            /** @type {?} */
            var param = {
                absOrgType: _this.absOrgType,
                notGetStopOrg: _this.notGetStopOrg,
                getCurUser: false,
                parentID: e.rowNode.id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return _this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data['data'].length > _this.selectedLimit && !e.rowNode.isChecked) {
                    _this.msgService.show('warning', "\u4EB2\uFF0C\u4E00\u6B21\u6027\u9009\u62E9\u4E86\u8D85\u8FC7" + _this.selectedLimit + "\u6761\u6570\u636E~", true);
                    return of(false);
                }
                if (!e.rowNode.isChecked) {
                    data.data.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.currentOrgs) === -1) {
                            _this.currentOrgs.push(item);
                        }
                    }));
                }
                else {
                    _this.currentOrgs.forEach((/**
                     * @param {?} org
                     * @param {?} index
                     * @return {?}
                     */
                    function (org, index) {
                        data.data.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            if (org[_this.primaryField] === item[_this.primaryField]) {
                                _this.currentOrgs.splice(index, 1);
                            }
                        }));
                    }));
                }
                _this.cdr.detectChanges();
                return of(false);
            })));
        });
        this.cdr = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.treeTableCols = [
            { field: 'name', title: '组织名称', template: this.orgName },
            { field: 'code', title: '组织编号' }
        ];
        if (this.initLoad) {
            if (this.enableHierarchicalLoading) {
                this.hlAssembleData();
            }
            else {
                this.assembleData();
            }
            this.initLoad = false;
        }
    };
    /**
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    // 组织树全加载时，选中（取消选中、勾选、取消勾选）树节点时触发
    // 组织树全加载时，选中（取消选中、勾选、取消勾选）树节点时触发
    /**
     * @param {?} e
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.changeSelections = 
    // 组织树全加载时，选中（取消选中、勾选、取消勾选）树节点时触发
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.enableHierarchicalLoading && !!e.originalEvent) {
            this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.toggleChecked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var checkeds = [];
        e && e.instance && e.instance.checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            checkeds.push(item.data);
        }));
        this.currentOrgs = _.cloneDeep(checkeds);
        if (this.currentOrgs.length == 0) {
            this.orgTree.clearCheckeds();
            this.orgTree.clearSelections();
            this.orgTree.detectChanges();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.toggleSelected = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var selected = [];
        e && e.instance && e.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            selected.push(item.data);
        }));
        this.currentOrgs = _.cloneDeep(selected);
        if (this.currentOrgs.length == 0) {
            this.orgTree.clearCheckeds();
            this.orgTree.clearSelections();
            this.orgTree.detectChanges();
        }
    };
    // 分层加载组织树
    // 分层加载组织树
    /**
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.hlAssembleData = 
    // 分层加载组织树
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        /** @type {?} */
        var layerList = [];
        /** @type {?} */
        var layer = this.layer;
        while (layer > 0) {
            layerList.push(layer);
            layer -= 1;
        }
        param.layerList = layerList;
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.data) {
                return;
            }
            _this.originalTreeData = res.data;
            if (res && res.curAbsUser && res.curAbsUser.orgAllPathInfo) {
                /** @type {?} */
                var curUserOrgPath = res.curAbsUser.orgAllPathInfo;
                curUserOrgPath.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, res.data) === -1) {
                        res.data.push(item);
                    }
                }));
            }
            _this.treeListData = _this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            _this.orgTree.loadData(_this.treeListData);
            //this.tickCheckedNodes();
            _this.cdr.detectChanges();
        }));
    };
    // 全加载组织树
    // 全加载组织树
    /**
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.assembleData = 
    // 全加载组织树
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.data) {
                return;
            }
            _this.originalTreeData = res.data;
            _this.treeListData = _this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            _this.orgTree.loadData(_this.treeListData);
            // this.tickCheckedNodes();
            _this.cdr.detectChanges();
        }));
    };
    // 确定组织是否在当前组织树内
    // 确定组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.inTreeList = 
    // 确定组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    function (treeListData, item) {
        for (var i = 0; i < treeListData.length; i++) {
            if (treeListData[i].id === item[this.primaryField]) {
                item.inTreeList = true;
                break;
            }
            if (treeListData[i].children.length) {
                this.inTreeList(treeListData[i].children, item);
            }
        }
    };
    // 在当前组织树内勾选所有已在群组内的组织
    // 在当前组织树内勾选所有已在群组内的组织
    /**
     * @private
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.tickCheckedNodes = 
    // 在当前组织树内勾选所有已在群组内的组织
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ids = [];
        this.currentOrgs.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.inTreeList(_this.treeListData, item);
            if (!!item.inTreeList) {
                ids.push(item[_this.primaryField]);
            }
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (!ids.length) {
                    return;
                }
                if (_this.multiSelect) {
                    _this.orgTree.checkedNodes(ids, true, true);
                }
                else {
                    if (ids.length > 1) {
                        _this.msgService.show('warning', "\u4EB2\uFF0C\u5355\u9009\u6A21\u5F0F\u4E0B\uFF0C\u9009\u4E2D\u4E86" + ids.length + "\u6761\u6570\u636E~", true);
                        return;
                    }
                    _this.orgTree.clearSelections();
                    _this.orgTree.detectChanges();
                    _this.orgTree.selectNode(ids.join());
                }
            }));
        }));
    };
    /**
    * 组织数据转换
    * @param plainSource 接口原始数据
    * @param layer 层级
    * @returns 返回树形接口的数据
    */
    /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    AppendGroupOrgComponent.prototype.dataToTree = /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    function (plainSource, layer, expandedPath) {
        if (expandedPath === void 0) { expandedPath = ''; }
        /** @type {?} */
        var treeSource = this.dealData(plainSource, expandedPath);
        /** @type {?} */
        var parents = treeSource.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.data.layer === layer;
        }));
        this.treeData(parents, treeSource, 1);
        return parents;
    };
    // 预处理组织数据
    // 预处理组织数据
    /**
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.dealData = 
    // 预处理组织数据
    /**
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    function (data, expandedPath) {
        var _this = this;
        if (expandedPath === void 0) { expandedPath = ''; }
        /** @type {?} */
        var pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            var maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (var a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        /** @type {?} */
        var newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var newsDataObj = {
                    data: {
                        orgId: item[_this.primaryField],
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        layer: Number(item.layer),
                        orgAllPath: item.orgAllPath,
                        inFavorites: item.inFavorites
                    },
                    expanded: true,
                    children: []
                };
                // let expanded = [];
                // if (this.enableHierarchicalLoading) {
                //     this.nodeExpanded(newsDataObj, this.treeListData, expanded);
                // }
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1) {
                    newsDataObj.expanded = true;
                }
                else {
                    newsDataObj.expanded = false;
                    if (_this.enableHierarchicalLoading && item.isDetail === '0') {
                        newsDataObj.leaf = false;
                    }
                }
                // todo 分层加载需要
                //if (this.enableHierarchicalLoading && item.isDetail === '0' && Number(item.layer) >= this.layer) {
                //newsDataObj.leaf = false;
                // newsDataObj.expanded = false;
                //}
                newDatas.push(newsDataObj);
            }));
        }
        return newDatas;
    };
    /**
     * 数据转换
     * @param parents 父级节点信息
     * @param treeSource 原始数据信息
     * @param layer 层级
     */
    /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.treeData = /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    function (parents, treeSource, layer) {
        var _this = this;
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        function (parent) {
            /** @type {?} */
            var parentPath = parent['data']['path'];
            /** @type {?} */
            var parentLayer = parent['data']['layer'];
            treeSource.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item && item['data'] && item['data']['path']) {
                    /** @type {?} */
                    var itemPath = item['data']['path'];
                    /** @type {?} */
                    var itemLayer = item['data']['layer'];
                    /** @type {?} */
                    var targetPath = void 0;
                    if (itemPath && itemPath.length > parentPath.length) {
                        targetPath = itemPath.substr(0, Number(layer) * 4);
                    }
                    if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                        parent['children'].push(item);
                    }
                    if (parentPath === targetPath) {
                        _this.treeData([item], treeSource, Number(layer) + 1);
                    }
                }
            }));
        }));
    };
    // 监听组织树展开事件
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.listenTreeExpand = 
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        // 分层加载
        if (this.enableHierarchicalLoading && obj.children.length === 0) {
            this.getOrganizationByParentNode(obj);
        }
    };
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.getOrganizationByParentNode = 
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    function (parentNode) {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            parentID: parentNode.id,
            notGetStopOrg: this.notGetStopOrg,
            getCurUser: false,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.data) {
                /** @type {?} */
                var newDatas_1 = [];
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.originalTreeData) === -1) {
                        item.selectable = true;
                        _this.originalTreeData.push(item);
                    }
                    newDatas_1.push(item);
                }));
                /** @type {?} */
                var nodes = _this.dealData(newDatas_1);
                _this.orgTree.appendChildren(nodes, parentNode);
                _this.orgTree.detectChanges();
                //this.tickCheckedNodes();
            }
        }));
    };
    // 返回已经该节点是否展开过
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.nodeExpanded = 
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    function (item, arr, expanded) {
        for (var i = 0; i < arr.length; i++) {
            if (item.data.id === arr[i].data.id) {
                expanded[0] = arr[i].expanded;
            }
            else if (arr[i].children.length) {
                this.nodeExpanded(item, arr[i].children, expanded);
            }
        }
    };
    // 展开节点
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    AppendGroupOrgComponent.prototype.expandTreeNode = 
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    function (treeData, path, layer) {
        var _this = this;
        treeData.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (path.includes(node.data.path)) {
                _this.orgTree.expandNode(node.data.id);
            }
            if (node.data.layer < layer && node.children.length) {
                _this.expandTreeNode(node.children, path, layer);
            }
        }));
    };
    AppendGroupOrgComponent.decorators = [
        { type: Component, args: [{
                    selector: 'append-group-org',
                    template: "<!--\r\n<div style=\"background: #f9f9fc; display: flex; justify-content: space-between; border-bottom: 1px solid #EAEDF3\">\r\n    <span style=\"line-height: 22px;margin-left: 10px;font-weight: 600;color: #2a87ff;border-bottom: 2px solid #2a87ff;\r\n    padding: 8px 0;\">\u7EC4\u7EC7\u67B6\u6784</span>\r\n    <input-group style=\"width: 240px; margin: 6px 10px 6px 0;\"\r\n        [placeholder]=\"searchPlaceholder\" [(value)]=\"searchText\" [groupText]=\"groupIcon\" (enterHandle)=\"onSearch({pageIndex: 1})\"\r\n        (clickHahndle)=\"onSearch({pageIndex: 1})\" (keyup)=\"listenSearchText($event)\" (clear)=\"searchClear()\">\r\n    </input-group>\r\n</div>\r\n-->\r\n<farris-treetable #orgTree style=\"cursor:pointer\" [width]=\"'100%'\" [data]=\"treeListData\" [idField]=\"primaryField\"\r\n    [columns]=\"treeTableCols\" [singleSelect]=\"!multiSelect\" [showBorder]=\"false\" [showCheckbox]=\"multiSelect\"\r\n    [showIcon]=\"false\" [showHeader]=\"true\" [fixedHeader]=\"true\" [disabled]=\"false\" [fit]=\"true\" [checkOnSelect]=\"true\"\r\n    [striped]=\"true\" [cascadeCheck]=\"cascadeCheck\" [cascadeDown]=\"cascadeDown\" [cascadeUp]=\"cascadeUp\"\r\n    [keepSelect]=\"keepSelect\" [showCheckAll]=\"showCheckAll\" [onlySelectSelf]=\"true\" [beforeClickNode]=\"beforeClickNode\"\r\n    (nodeChecked)=\"changeSelections($event)\" (nodeUnChecked)=\"changeSelections($event)\"\r\n    (nodeSelected)=\"changeSelections($event)\" (nodeUnSelect)=\"changeSelections($event)\"\r\n    (expand)=\"listenTreeExpand($event)\" class=\"fos-treetable\">\r\n</farris-treetable>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F -->\r\n<ng-template #orgName let-ctx>\r\n    <span style=\"font-size: 13px;\" title=\"{{ctx.node.data.name}}\">{{ctx.node.data.name}}</span>\r\n</ng-template>",
                    styles: [":host{height:100%;overflow:hidden;display:-webkit-box;display:flex;background:#fff;width:100%;border-radius:10px;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;border:1px solid #dee1ea}"]
                }] }
    ];
    /** @nocollapse */
    AppendGroupOrgComponent.ctorParameters = function () { return [
        { type: ApiService },
        { type: ChangeDetectorRef },
        { type: Injector },
        { type: NgZone },
        { type: MessagerService }
    ]; };
    AppendGroupOrgComponent.propDecorators = {
        baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
        orgTree: [{ type: ViewChild, args: ['orgTree',] }],
        orgName: [{ type: ViewChild, args: ['orgName',] }],
        primaryField: [{ type: Input }],
        enableHierarchicalLoading: [{ type: Input }],
        notGetStopOrg: [{ type: Input }],
        layer: [{ type: Input }],
        multiSelect: [{ type: Input }],
        absOrgType: [{ type: Input }],
        cascadeCheck: [{ type: Input }],
        cascadeDown: [{ type: Input }],
        cascadeUp: [{ type: Input }],
        keepSelect: [{ type: Input }],
        showCheckAll: [{ type: Input }],
        selectedLimit: [{ type: Input }],
        pathLength: [{ type: Input }]
    };
    return AppendGroupOrgComponent;
}());
export { AppendGroupOrgComponent };
if (false) {
    /** @type {?} */
    AppendGroupOrgComponent.prototype.baseCls;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.orgTree;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.orgName;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.primaryField;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.enableHierarchicalLoading;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.notGetStopOrg;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.layer;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.multiSelect;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.absOrgType;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.cascadeCheck;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.cascadeDown;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.cascadeUp;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.keepSelect;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.showCheckAll;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.selectedLimit;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.pathLength;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.originalTreeData;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.treeListData;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.treeTableCols;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.currentOrgs;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.initLoad;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.beforeClickNode;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.msgService;
}
//# sourceMappingURL=data:application/json;base64,