/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-07 16:31:57
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-27 14:57:22
 * @Company: Inspur
 * @Version: v0.0.1
 */
import * as tslib_1 from "tslib";
/**
 * 使用方法：
 * [data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import { Directive, Optional, Self, Input } from '@angular/core';
import { BindingObject, ViewModel } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
import { isNumber } from 'lodash-es';
var LookupDataMappingDirective = /** @class */ (function () {
    function LookupDataMappingDirective(vm, lookup) {
        this.vm = vm;
        this.lookup = lookup;
        this.target = null;
    }
    LookupDataMappingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.lookup.selectedData.subscribe(function (data) {
            var _mapfields = _this.mapfields || _this.lookup.mapFields;
            _this.mappingData(data, _mapfields);
        });
        this.lookup.clear.subscribe(function () {
            var _mapfields = _this.mapfields || _this.lookup.mapFields;
            _this.mappingData(null, _mapfields);
        });
    };
    /**
     *
     * @param helpData 清空时，值为null
     * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     */
    LookupDataMappingDirective.prototype.mappingData = function (helpData, mapFields) {
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        var appContext = this.vm.frameContext.appContext;
        appContext.changeDetectionController.detach();
        var helpFields = Object.keys(mapFields);
        var basePaths;
        // 映射到目标主键的源字段数组
        var primaryKeys;
        // 目标主键字段数组
        var primaryFields;
        basePaths = this.getBindingPathArray();
        var primaryInfo = this.getMapFieldsPrimaryKey(mapFields, basePaths);
        primaryKeys = primaryInfo && primaryInfo.map(function (item) { return item.primaryKey; }) || [];
        primaryFields = primaryInfo && primaryInfo.map(function (item) { return item.primaryField; }) || [];
        // 对映射中的key进行排序，使映射到目标主键的key排到前面
        helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
        if (!helpData) {
            helpFields.reverse();
        }
        this.mapping(helpFields, mapFields, helpData, primaryFields, basePaths);
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    };
    LookupDataMappingDirective.prototype.mapping = function (sortedKeyFields, mapFields, helpData, targetPrimaryFields, basePaths) {
        var _this = this;
        sortedKeyFields.forEach(function (field) {
            var val = _this.getHelpValue(field, helpData);
            var mappings = mapFields[field].split(',');
            var headMappings = mappings.filter(function (p) { return targetPrimaryFields.includes(p); });
            var leftMappings = mappings.filter(function (p) { return !targetPrimaryFields.includes(p); });
            if (!helpData) {
                mappings = [].concat(leftMappings).concat(headMappings);
            }
            else {
                mappings = [].concat(headMappings).concat(leftMappings);
            }
            _this.updateTarget(mappings, basePaths, helpData, val);
        });
    };
    LookupDataMappingDirective.prototype.updateTarget = function (mappings, basePaths, helpData, value) {
        var _this = this;
        mappings.forEach(function (targetFieldPath) {
            _this.updateTargetValue(basePaths, targetFieldPath, value, helpData);
        });
    };
    LookupDataMappingDirective.prototype.updateTargetValue = function (basePaths, targetFieldPath, value, helpData) {
        if (this.target) {
            var paths = targetFieldPath.split('.');
            this.setValue(this.target, paths, value);
        }
        else {
            var paths = basePaths.concat(targetFieldPath.split('.'));
            if (!helpData) {
                this.vm.bindingData.clearValue(paths, true, true, { frameContext: this.vm.frameContext });
            }
            else {
                this.vm.bindingData.setValue(paths, value, true, true, null, { frameContext: this.vm.frameContext });
            }
        }
    };
    /**
     * 获取帮助字段对应的值
     * @param field 帮助字段
     * @param helpData 帮助数据
     * @returns
     */
    LookupDataMappingDirective.prototype.getHelpValue = function (field, helpData) {
        var _this = this;
        var value = '';
        if (helpData) {
            if (helpData instanceof Array) {
                value = helpData.map(function (item) {
                    return _this.getValue(field, item);
                }).join(',');
            }
            else {
                value = this.getValue(field, helpData);
            }
        }
        return value;
    };
    LookupDataMappingDirective.prototype.getValue = function (f, data) {
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce(function (a, b) {
                return a[b];
            }, data);
        }
        return val;
    };
    LookupDataMappingDirective.prototype.setValue = function (target, paths, value) {
        if (target) {
            if (paths.length <= 1) {
                target[paths[0]] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    LookupDataMappingDirective.prototype.getBindingPathArray = function () {
        var path = this.vm.bindingPath;
        if (path) {
            return path.split('/').filter(function (n) { return n !== ''; });
        }
        return [];
    };
    LookupDataMappingDirective.prototype.isNumberValue = function (field, data) {
        var currentVal = this.getValue(field, data);
        return isNumber(currentVal);
    };
    /**
     *
     * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
     */
    LookupDataMappingDirective.prototype.getMapFieldsPrimaryKey = function (mapFields, bindingPaths) {
        if (!mapFields || Object.keys(mapFields).length < 1) {
            return null;
        }
        var results = [];
        // let primaryField = null;
        try {
            var entityTypeInfo_1 = this.vm.frameContext.repository.entityTypeInfo;
            Object.keys(mapFields).forEach(function (key) {
                var mapField = mapFields[key];
                if (mapField && typeof mapField === 'string') {
                    var mappings = mapField.split(',').filter(function (p) { return p; });
                    mappings.forEach(function (item) {
                        var paths = item.split('.');
                        if (bindingPaths && bindingPaths.length > 0) {
                            paths = bindingPaths.concat(paths);
                        }
                        var propInfo = entityTypeInfo_1.getPropInfoByPath(paths);
                        if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                            results.push({
                                primaryKey: key,
                                primaryField: item
                            });
                        }
                    });
                }
            });
        }
        catch (e) {
            console.error(e);
        }
        return results;
    };
    LookupDataMappingDirective.prototype.sortMapFieldKeys = function (keys, primaryKeys) {
        if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
            return keys;
        }
        primaryKeys = tslib_1.__spread(new Set(primaryKeys));
        // 过滤出非主键映射字段
        keys = keys.filter(function (p) { return !primaryKeys.includes(p); });
        return [].concat(primaryKeys).concat(keys);
    };
    LookupDataMappingDirective.decorators = [
        { type: Directive, args: [{ selector: '[data-mapping]' },] }
    ];
    /** @nocollapse */
    LookupDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    LookupDataMappingDirective.propDecorators = {
        mapfields: [{ type: Input, args: ['data-mapping',] }],
        target: [{ type: Input, args: ['target',] }]
    };
    return LookupDataMappingDirective;
}());
export { LookupDataMappingDirective };
//# sourceMappingURL=data:application/json;base64,