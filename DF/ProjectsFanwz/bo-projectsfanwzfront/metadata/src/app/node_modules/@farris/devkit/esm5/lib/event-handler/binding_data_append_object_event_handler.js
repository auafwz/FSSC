import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression/index";
import { ENTITY_TEMPLATE, STATE_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
var BindingDataAppendObjectEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataAppendObjectEventHandler, _super);
    function BindingDataAppendObjectEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    BindingDataAppendObjectEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            // const fullEventPath = event.path || [];
            // event.path like ["id:7dd77e50-ebed-4639-b483-d12004603640", "formEEUR1E1s"] or undefined or []
            // eventTablePaths like [] or ["子表s"]
            // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方
            // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性
            var groupExpressions = this.expressionObjects.filter(function (expressionObject) {
                if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {
                    return false;
                }
                var eventTablePaths = _this.buildEntityPath(event.path);
                var info = _this.analysis(event, expressionObject);
                if (!info) {
                    return false;
                }
                // const eventEntityPath = this.buildEntityPath(event.path);
                // 主表新增
                if (eventTablePaths.length === 0) {
                    if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {
                        // 认为主表新增时不需要处理聚合函数
                        return false;
                    }
                }
                // 从表或从从表新增
                eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);
                // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增
                // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']
                // 仅处理上级表达式
                if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {
                    return false;
                }
                // 不支持跨表
                if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                    return false;
                }
                var index = expressionObject.deps.findIndex(function (dep) {
                    // 依赖
                    if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                        return false;
                    }
                    var deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                    var dependPathInfo = _this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                    if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {
                        return true;
                    }
                    return false;
                });
                return index === -1 ? false : true;
            });
            var eventTablePaths_1 = this.buildEntityPath(event.path);
            // 事件表中表达式（事件表本身的表达式）
            var relativeExpressions = this.expressionObjects.filter(function (expressionObject) {
                // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式
                if (expressionObject.ns !== event.ns) {
                    return false;
                }
                var expressionPathInfo = _this.getPathInfo(expressionObject.path);
                // 过滤掉非当前表的表达式
                if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths_1.join(Expression.DEPENDENCY_SPLITER)) {
                    return false;
                }
                // 没有依赖的表达式
                if (!expressionObject.deps || expressionObject.deps.length < 1) {
                    return true;
                }
                // 仅依赖State
                var onlyDependOnState = expressionObject.deps.every(function (dep) { return dep.startsWith(STATE_TEMPLATE); });
                // 仅依赖当前表或上级表
                // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {
                //   if (!dep.startsWith(ENTITY_TEMPLATE)) {
                //     return false;
                //   }
                //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);
                //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;
                // });
                // if (onlyDependOnState || onlyDependOnCurrentTable) {
                //   return true;
                // }
                if (onlyDependOnState) {
                    return true;
                }
                var result = _this.analysis(event, expressionObject);
                if (result && result.distance === 0 && result.isSameTable) {
                    return true;
                }
                // 事件表表达式，但依赖下级表的未计算
                return false;
            });
            return groupExpressions.concat(relativeExpressions);
        }
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    BindingDataAppendObjectEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                    console.warn("EventHandler \u8868\u8FBE\u5F0F\u672A\u8BBE\u7F6E\u552F\u4E00\u6807\u8BC6\uFF0C\u65E0\u6CD5\u66F4\u65B0\u8868\u8FBE\u5F0F\u503C\u3002");
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    BindingDataAppendObjectEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    /**
     * 新增副作用器
     * @param event event
     * @param expressionObject 表达式
     * @returns
     */
    BindingDataAppendObjectEventHandler.prototype.effect = function (event, expressionObject) {
        var _this = this;
        var effectTo = expressionObject.bindingType;
        var eventPath = this.cleanEventPath(event.path);
        var effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            return;
        }
        var info = this.analysis(event, expressionObject);
        if (!info) {
            console.warn("[BindingDataAppendObjectEventHandler][analysis]\u83B7\u53D6\u8DEF\u5F84\u4FE1\u606F\u5931\u8D25\u3002");
            return;
        }
        var expressionPaths = expressionObject.path.split('/').filter(function (p) { return p; });
        if (effectTo === Expression.ExpressionBindingType.Field) {
            var paths_1 = [];
            var propertyPaths_1 = expressionPaths.slice(info.expressionTablePaths.length);
            // 新增场景仅需要计算事件表及事件表上面的表
            if (info.distance === 0) {
                if (!info.isSameTable) {
                    return;
                }
                // 表达式和事件在同一个表
                var prevPaths_1 = eventPath.slice(0);
                if (eventPath.length === 1) {
                    // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径
                    if (event.value && Array.isArray(event.value)) {
                        event.value.forEach(function (bindingObject) {
                            paths_1.push([bindingObject.primaryKeyValue].concat(propertyPaths_1));
                        });
                    }
                    else {
                        var path = prevPaths_1.concat(propertyPaths_1);
                        paths_1.push(path);
                    }
                }
                else {
                    // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键
                    if (event.value && Array.isArray(event.value)) {
                        event.value.forEach(function (bindingObject) {
                            paths_1.push(prevPaths_1.concat([bindingObject.primaryKeyValue]).concat(propertyPaths_1));
                        });
                    }
                    else {
                        var bindingList = this.bindingData.getValue(info.eventTablePaths);
                        if (bindingList && bindingList.currentId) {
                            paths_1.push(prevPaths_1.concat(bindingList.currentId).concat(propertyPaths_1));
                        }
                    }
                }
            }
            else {
                // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据
                if (info.eventFromParent === true) {
                    // 在过滤时这种情况的应该就排除掉了
                    console.warn("[BindingDataAppendObjectEventHandler][effect_error]");
                    return;
                }
                else if (info.eventFromChildren === true) {
                    var prevPaths = eventPath.slice(0, eventPath.length - 1);
                    var path = prevPaths.concat(propertyPaths_1);
                    paths_1.push(path);
                }
                else {
                    console.warn("[BindingDataAppendObjectEventHandler][effect_error]");
                    return;
                }
            }
            paths_1.forEach(function (path) {
                var currentRows = _this.buildCurrentRows(info.expressionTablePaths, path);
                _this.output(event, expressionObject, currentRows, effector, [path]);
            });
        }
        else if (effectTo === Expression.ExpressionBindingType.State) {
            console.error('not supported！');
        }
    };
    BindingDataAppendObjectEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
        var context = this.buildContext(expressionObject, event, null, currentRows);
        var value = this.perform(expressionObject, context);
        if (value === undefined) {
            return;
        }
        expressionObject.result = value;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, expressionObject, paths);
    };
    BindingDataAppendObjectEventHandler.decorators = [
        { type: Injectable }
    ];
    return BindingDataAppendObjectEventHandler;
}(EventHandler));
export { BindingDataAppendObjectEventHandler };
//# sourceMappingURL=data:application/json;base64,