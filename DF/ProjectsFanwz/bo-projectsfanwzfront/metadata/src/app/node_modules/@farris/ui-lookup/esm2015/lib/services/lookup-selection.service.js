/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, BehaviorSubject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FavoriteAction } from '../lookup-displaytype';
/**
 * @record
 */
export function SelectionState() { }
if (false) {
    /** @type {?} */
    SelectionState.prototype.selecteditems;
    /** @type {?} */
    SelectionState.prototype.favoriteItems;
    /** @type {?} */
    SelectionState.prototype.quickItems;
}
export class LookupSelectionService {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        this.state = {
            selecteditems: [],
            favoriteItems: [],
            quickItems: []
        };
        this.state$ = new BehaviorSubject(this.state);
        this.selected$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        n => of(n.selecteditems))));
        this.favoriteItems$ = new BehaviorSubject({ items: this.state.favoriteItems, action: null });
        this.quickItems$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        n => of(n.quickItems))));
    }
    /**
     * @private
     * @return {?}
     */
    get idField() {
        return this.ins.idField;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    initFavoriteItems(items) {
        this.state.favoriteItems = items || [];
    }
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    updateFavoriteData(data, action) {
        if (this.ins.savingFaoriteData) {
            // console.log('%c太调皮了吧！', 'color: white');
            return;
        }
        if (action === FavoriteAction.add) {
            this.state.favoriteItems = this.state.favoriteItems.concat([data]);
        }
        else {
            this.state.favoriteItems = this.state.favoriteItems.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] !== data[this.idField]));
        }
        this.favoriteItems$.next({ items: this.state.favoriteItems, action });
    }
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    loadSelections(data) {
        this.state.selecteditems = [...data];
        this.state$.next(this.state);
    }
    /**
     * @return {?}
     */
    getSelections() {
        return [...this.state.selecteditems];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    select(item) {
        if (item) {
            this.state.selecteditems = [...this.state.selecteditems, item];
            this.state$.next(this.state);
        }
    }
    /**
     * @param {?} pathcode
     * @return {?}
     */
    unselectByPathcode(pathcode) {
        const { dataField, pathField } = this.ins.treeInfo;
        this.state.selecteditems = this.state.selecteditems.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return n[dataField][pathField] && n[dataField][pathField].indexOf(pathcode) !== 0;
        }));
    }
    /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    updateSelections(data, checked = true) {
        if (!Array.isArray(data)) {
            data = [data];
        }
        /** @type {?} */
        const items = [...data];
        /** @type {?} */
        const idField = this.idField;
        if (checked) {
            if (this.state.selecteditems && !this.state.selecteditems.length) {
                this.state.selecteditems = items;
            }
            else {
                /** @type {?} */
                const ids = items.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[idField]));
                ids.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    if (!this.state.selecteditems.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r[idField] == n))) {
                        this.state.selecteditems.push(items[i]);
                    }
                }));
            }
        }
        else {
            if (data) {
                /** @type {?} */
                const ids2 = data.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[idField]));
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return ids2.indexOf(n[idField]) === -1;
                }));
            }
        }
        this.state$.next(this.state);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unSelect(id) {
        if (id) {
            if (Array.isArray(id)) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return id.indexOf(n[this.idField]) === -1;
                }));
            }
            else {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField] != id));
            }
            this.state$.next(this.state);
        }
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.state.selecteditems = [];
        this.state$.next(this.state);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.state;
    /** @type {?} */
    LookupSelectionService.prototype.state$;
    /** @type {?} */
    LookupSelectionService.prototype.selected$;
    /** @type {?} */
    LookupSelectionService.prototype.favoriteItems$;
    /** @type {?} */
    LookupSelectionService.prototype.quickItems$;
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,