/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TextareaWordcountDirective } from './textarea-wordcount.directive';
import { NgControl } from '@angular/forms';
import { Directive, ElementRef, Renderer2, Injector, Input, Optional } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { MessagerService } from '@farris/ui-messager';
var TextareaZoomDirective = /** @class */ (function () {
    function TextareaZoomDirective(el, render, injector, wordCountRef) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.wordCountRef = wordCountRef;
        this.useZoom = true;
        this.dialogWidth = 500;
        this.dialogHeight = 400;
        this.fullscreen = false;
        this.title = '';
        this.value = '';
        this.onMouseEnter = null;
        this.onMouseLeave = null;
        this.onClick = null;
        this.altEnterHandler = null;
        this.zoomButtonElement = null;
        this.messagerService = this.injector.get(MessagerService);
        this.eventManager = this.injector.get(EventManager);
    }
    /**
     * @return {?}
     */
    TextareaZoomDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TextareaZoomDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.useZoom && !changes.useZoom.isFirstChange()) {
            if (this.useZoom) {
                this.createZoomButton();
            }
            else {
                this.destroy();
            }
        }
    };
    /**
     * @return {?}
     */
    TextareaZoomDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.useZoom) {
            this.createZoomButton();
        }
    };
    /**
     * @return {?}
     */
    TextareaZoomDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @private
     * @return {?}
     */
    TextareaZoomDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onMouseEnter) {
            this.onMouseEnter();
        }
        if (this.onMouseLeave) {
            this.onMouseLeave();
        }
        if (this.onClick) {
            this.onClick();
        }
        if (this.altEnterHandler) {
            this.altEnterHandler();
        }
        if (this.zoomButtonElement) {
            this.zoomButtonElement.remove();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextareaZoomDirective.prototype.bindEventHandler = /**
     * @private
     * @return {?}
     */
    function () {
        this.altEnterHandler = this.eventManager.addEventListener(this.el.nativeElement, 'keydown.alt.enter', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var target = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            var val = target.value + '\n';
            target.value = val;
            event.preventDefault();
            event.stopPropagation();
            return false;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TextareaZoomDirective.prototype.createZoombarID = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tagName = this.el.nativeElement.tagName;
        if (this.ngControl) {
            /** @type {?} */
            var ctrlName = this.ngControl.name;
            return tagName + "_ZOOMBAR_" + ctrlName;
        }
        else {
            if (this.el.nativeElement.id) {
                return tagName + "_ZOOMBAR_" + this.el.nativeElement.id;
            }
        }
        return '';
    };
    /**
     * @private
     * @return {?}
     */
    TextareaZoomDirective.prototype.createZoomButton = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var zoomSPAN = this.render.createElement('span');
        zoomSPAN.className = 'f-icon modal_maximize textarea-zoom';
        zoomSPAN.title = '点击后弹出进行编辑';
        /** @type {?} */
        var id = this.createZoombarID();
        if (id) {
            zoomSPAN.id = id;
        }
        this.render.setStyle(zoomSPAN, 'position', 'absolute');
        this.render.setStyle(zoomSPAN, 'top', '2px');
        this.render.setStyle(zoomSPAN, 'right', '2px');
        this.render.setStyle(zoomSPAN, 'cursor', 'pointer');
        this.el.nativeElement.after(zoomSPAN);
        this.zoomButtonElement = zoomSPAN;
        this.onMouseEnter = this.render.listen(zoomSPAN, 'mouseenter', (/**
         * @return {?}
         */
        function () {
            _this.render.setStyle(zoomSPAN, 'fontSize', '22px');
        }));
        this.onMouseLeave = this.render.listen(zoomSPAN, 'mouseleave', (/**
         * @return {?}
         */
        function () {
            _this.render.setStyle(zoomSPAN, 'fontSize', '1rem');
        }));
        this.onClick = this.render.listen(zoomSPAN, 'click', (/**
         * @return {?}
         */
        function () {
            _this.zoomTextarea();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TextareaZoomDirective.prototype.zoomTextarea = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var opts = {
            width: this.dialogWidth || 500,
            height: this.dialogHeight || 400,
            showFontSize: true,
            saveSize: true // 启用个性化存储，localStorage
        };
        if (window.localStorage) {
            /** @type {?} */
            var key = this.messagerService.getKeyString();
            /** @type {?} */
            var val = localStorage.getItem(key);
            if (val) {
                /** @type {?} */
                var lastSetting = JSON.parse(val);
                opts.fontSize = lastSetting.fontSize || 18;
                opts.width = lastSetting.width || opts.width;
                opts.height = lastSetting.height || opts.height;
            }
        }
        /** @type {?} */
        var tagName = this.el.nativeElement.tagName;
        /** @type {?} */
        var showText = this.el.nativeElement.value;
        if (this.ngControl) {
            showText = this.ngControl.value;
        }
        else {
            showText = this.el.nativeElement.value;
        }
        showText = this.value || showText;
        if (tagName === 'FARRIS-TEXT' || this.el.nativeElement.readOnly || this.el.nativeElement.disabled) {
            opts.readonly = true;
            opts.showOkButton = false;
            this.messagerService.prompt2(this.title, showText, opts).subscribe();
        }
        else {
            opts.maxLength = this.el.nativeElement.maxLength;
            opts.enableWordCount = this.wordCountRef ? this.wordCountRef.useWordCount : false;
            opts.countType = this.wordCountRef ? this.wordCountRef.countType : 'length';
            this.messagerService.prompt2(this.title, showText, opts).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (typeof v === 'boolean' && !v) {
                    return;
                }
                else {
                    _this.ngControl.control.setValue(v);
                    if (_this.wordCountRef) {
                        _this.wordCountRef.updateWordsCount();
                    }
                }
            }));
        }
    };
    TextareaZoomDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[textarea-zoom]',
                },] }
    ];
    /** @nocollapse */
    TextareaZoomDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector },
        { type: TextareaWordcountDirective, decorators: [{ type: Optional }] }
    ]; };
    TextareaZoomDirective.propDecorators = {
        useZoom: [{ type: Input, args: ['textarea-zoom',] }],
        dialogWidth: [{ type: Input }],
        dialogHeight: [{ type: Input }],
        fullscreen: [{ type: Input }],
        title: [{ type: Input }],
        value: [{ type: Input }]
    };
    return TextareaZoomDirective;
}());
export { TextareaZoomDirective };
if (false) {
    /** @type {?} */
    TextareaZoomDirective.prototype.useZoom;
    /** @type {?} */
    TextareaZoomDirective.prototype.dialogWidth;
    /** @type {?} */
    TextareaZoomDirective.prototype.dialogHeight;
    /** @type {?} */
    TextareaZoomDirective.prototype.fullscreen;
    /** @type {?} */
    TextareaZoomDirective.prototype.title;
    /** @type {?} */
    TextareaZoomDirective.prototype.value;
    /** @type {?} */
    TextareaZoomDirective.prototype.onMouseEnter;
    /** @type {?} */
    TextareaZoomDirective.prototype.onMouseLeave;
    /** @type {?} */
    TextareaZoomDirective.prototype.onClick;
    /** @type {?} */
    TextareaZoomDirective.prototype.altEnterHandler;
    /** @type {?} */
    TextareaZoomDirective.prototype.zoomButtonElement;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TextareaZoomDirective.prototype.wordCountRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEtem9vbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZvcm1zLyIsInNvdXJjZXMiOlsibGliL3RleHRhcmVhLXpvb20uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBVSxLQUFLLEVBQ0YsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQ7SUFxQkksK0JBQW9CLEVBQWMsRUFBVSxNQUFpQixFQUFVLFFBQWtCLEVBQ3pELFlBQXdDO1FBRHBELE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN6RCxpQkFBWSxHQUFaLFlBQVksQ0FBNEI7UUFsQmhELFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDOUIsZ0JBQVcsR0FBRyxHQUFHLENBQUM7UUFDbEIsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFDbkIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUVwQixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2Ysb0JBQWUsR0FBRyxJQUFJLENBQUM7UUFFdkIsc0JBQWlCLEdBQUcsSUFBSSxDQUFDO1FBT3JCLElBQUksQ0FBQyxlQUFlLEdB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O3FCQUFNO29CQUNILEtBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbkMsSUFBSSxLQUFJLENBQUMsWUFBWSxFQUFFO3dCQUNuQixLQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLENBQUM7cUJBQ3hDO2lCQUNKO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7O2dCQWhMSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjtpQkFDOUI7Ozs7Z0JBUG1CLFVBQVU7Z0JBQUUsU0FBUztnQkFBRSxRQUFRO2dCQUYxQywwQkFBMEIsdUJBNkJsQixRQUFROzs7MEJBbEJwQixLQUFLLFNBQUMsZUFBZTs4QkFDckIsS0FBSzsrQkFDTCxLQUFLOzZCQUNMLEtBQUs7d0JBQ0wsS0FBSzt3QkFDTCxLQUFLOztJQXlLViw0QkFBQztDQUFBLEFBbExELElBa0xDO1NBL0tZLHFCQUFxQjs7O0lBQzlCLHdDQUF1Qzs7SUFDdkMsNENBQTJCOztJQUMzQiw2Q0FBNEI7O0lBQzVCLDJDQUE0Qjs7SUFDNUIsc0NBQW9COztJQUNwQixzQ0FBb0I7O0lBRXBCLDZDQUFvQjs7SUFDcEIsNkNBQW9COztJQUNwQix3Q0FBZTs7SUFDZixnREFBdUI7O0lBRXZCLGtEQUF5Qjs7Ozs7SUFFekIsZ0RBQXlDOzs7OztJQUN6Qyw2Q0FBbUM7Ozs7O0lBQ25DLDBDQUE2Qjs7Ozs7SUFDakIsbUNBQXNCOzs7OztJQUFFLHVDQUF5Qjs7Ozs7SUFBRSx5Q0FBMEI7Ozs7O0lBQzdFLDZDQUE0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRhcmVhV29yZGNvdW50RGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0YXJlYS13b3JkY291bnQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IsIE9uSW5pdCwgSW5wdXQsXHJcbiAgICAgICAgICAgIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3RleHRhcmVhLXpvb21dJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRleHRhcmVhWm9vbURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCd0ZXh0YXJlYS16b29tJykgdXNlWm9vbSA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBkaWFsb2dXaWR0aCA9IDUwMDtcclxuICAgIEBJbnB1dCgpIGRpYWxvZ0hlaWdodCA9IDQwMDtcclxuICAgIEBJbnB1dCgpIGZ1bGxzY3JlZW4gPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIHRpdGxlID0gJyc7XHJcbiAgICBASW5wdXQoKSB2YWx1ZSA9ICcnO1xyXG5cclxuICAgIG9uTW91c2VFbnRlciA9IG51bGw7XHJcbiAgICBvbk1vdXNlTGVhdmUgPSBudWxsO1xyXG4gICAgb25DbGljayA9IG51bGw7XHJcbiAgICBhbHRFbnRlckhhbmRsZXIgPSBudWxsO1xyXG5cclxuICAgIHpvb21CdXR0b25FbGVtZW50ID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VyU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcjtcclxuICAgIHByaXZhdGUgbmdDb250cm9sOiBOZ0NvbnRyb2w7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIHByaXZhdGUgd29yZENvdW50UmVmOiBUZXh0YXJlYVdvcmRjb3VudERpcmVjdGl2ZSApIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VyU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE1lc3NhZ2VyU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIgPSB0aGlzLmluamVjdG9yLmdldChFdmVudE1hbmFnZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMubmdDb250cm9sID0gdGhpcy5pbmplY3Rvci5nZXQoTmdDb250cm9sLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMudXNlWm9vbSAmJiAhY2hhbmdlcy51c2Vab29tLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy51c2Vab29tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVpvb21CdXR0b24oKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy51c2Vab29tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlWm9vbUJ1dHRvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub25Nb3VzZUVudGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZUVudGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9uTW91c2VMZWF2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uTW91c2VMZWF2ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMub25DbGljaykge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2xpY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYWx0RW50ZXJIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWx0RW50ZXJIYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy56b29tQnV0dG9uRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnpvb21CdXR0b25FbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJpbmRFdmVudEhhbmRsZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hbHRFbnRlckhhbmRsZXIgPSB0aGlzLmV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2tleWRvd24uYWx0LmVudGVyJyxcclxuICAgICAgICAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKGV2ZW50LnRhcmdldCBhcyBhbnkpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0YXJnZXQudmFsdWUgKyAnXFxuJztcclxuICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlWm9vbWJhcklEKCkge1xyXG4gICAgICAgIGNvbnN0IHRhZ05hbWUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudGFnTmFtZTtcclxuICAgICAgICBpZiAodGhpcy5uZ0NvbnRyb2wpIHtcclxuICAgICAgICAgICAgY29uc3QgY3RybE5hbWUgPSB0aGlzLm5nQ29udHJvbC5uYW1lO1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7dGFnTmFtZX1fWk9PTUJBUl8ke2N0cmxOYW1lfWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5pZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RhZ05hbWV9X1pPT01CQVJfJHt0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaWR9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVab29tQnV0dG9uKCkge1xyXG4gICAgICAgIGNvbnN0IHpvb21TUEFOID0gdGhpcy5yZW5kZXIuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIHpvb21TUEFOLmNsYXNzTmFtZSA9ICdmLWljb24gbW9kYWxfbWF4aW1pemUgdGV4dGFyZWEtem9vbSc7XHJcbiAgICAgICAgem9vbVNQQU4udGl0bGUgPSAn54K55Ye75ZCO5by55Ye66L+b6KGM57yW6L6RJztcclxuXHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmNyZWF0ZVpvb21iYXJJRCgpO1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICB6b29tU1BBTi5pZCA9IGlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUoem9vbVNQQU4sICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHpvb21TUEFOLCAndG9wJywgJzJweCcpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHpvb21TUEFOLCAncmlnaHQnLCAnMnB4Jyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUoem9vbVNQQU4sICdjdXJzb3InLCAncG9pbnRlcicpO1xyXG5cclxuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYWZ0ZXIoem9vbVNQQU4pO1xyXG5cclxuICAgICAgICB0aGlzLnpvb21CdXR0b25FbGVtZW50ID0gem9vbVNQQU47XHJcblxyXG4gICAgICAgIHRoaXMub25Nb3VzZUVudGVyID0gdGhpcy5yZW5kZXIubGlzdGVuKHpvb21TUEFOLCAnbW91c2VlbnRlcicsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUoem9vbVNQQU4sICdmb250U2l6ZScsICcyMnB4Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmUgPSB0aGlzLnJlbmRlci5saXN0ZW4oem9vbVNQQU4sICdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh6b29tU1BBTiwgJ2ZvbnRTaXplJywgJzFyZW0nKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5yZW5kZXIubGlzdGVuKHpvb21TUEFOLCAnY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbVRleHRhcmVhKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB6b29tVGV4dGFyZWEoKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0czogYW55ID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5kaWFsb2dXaWR0aCB8fCA1MDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5kaWFsb2dIZWlnaHQgfHwgNDAwLFxyXG4gICAgICAgICAgICBzaG93Rm9udFNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIHNhdmVTaXplOiB0cnVlICAgIC8vIOWQr+eUqOS4quaAp+WMluWtmOWCqO+8jGxvY2FsU3RvcmFnZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMubWVzc2FnZXJTZXJ2aWNlLmdldEtleVN0cmluZygpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0U2V0dGluZyA9IEpTT04ucGFyc2UodmFsKTtcclxuICAgICAgICAgICAgICAgIG9wdHMuZm9udFNpemUgPSBsYXN0U2V0dGluZy5mb250U2l6ZSB8fCAxODtcclxuICAgICAgICAgICAgICAgIG9wdHMud2lkdGggPSBsYXN0U2V0dGluZy53aWR0aCB8fCBvcHRzLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgb3B0cy5oZWlnaHQgPSBsYXN0U2V0dGluZy5oZWlnaHQgfHwgb3B0cy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRhZ05hbWUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudGFnTmFtZTtcclxuICAgICAgICBsZXQgc2hvd1RleHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMubmdDb250cm9sKSB7XHJcbiAgICAgICAgICAgIHNob3dUZXh0ID0gdGhpcy5uZ0NvbnRyb2wudmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2hvd1RleHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaG93VGV4dCA9IHRoaXMudmFsdWUgfHwgc2hvd1RleHQ7XHJcblxyXG5cclxuICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ0ZBUlJJUy1URVhUJyB8fCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVhZE9ubHkgfHwgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIG9wdHMucmVhZG9ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBvcHRzLnNob3dPa0J1dHRvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VyU2VydmljZS5wcm9tcHQyKHRoaXMudGl0bGUsIHNob3dUZXh0LCBvcHRzKS5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRzLm1heExlbmd0aCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5tYXhMZW5ndGg7XHJcbiAgICAgICAgICAgIG9wdHMuZW5hYmxlV29yZENvdW50ID0gdGhpcy53b3JkQ291bnRSZWYgPyB0aGlzLndvcmRDb3VudFJlZi51c2VXb3JkQ291bnQgOiBmYWxzZTtcclxuICAgICAgICAgICAgb3B0cy5jb3VudFR5cGUgPSB0aGlzLndvcmRDb3VudFJlZiA/IHRoaXMud29yZENvdW50UmVmLmNvdW50VHlwZSA6ICdsZW5ndGgnO1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VyU2VydmljZS5wcm9tcHQyKHRoaXMudGl0bGUsIHNob3dUZXh0LCBvcHRzKS5zdWJzY3JpYmUodiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJyAmJiAhdikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZ0NvbnRyb2wuY29udHJvbC5zZXRWYWx1ZSh2KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53b3JkQ291bnRSZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JkQ291bnRSZWYudXBkYXRlV29yZHNDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=