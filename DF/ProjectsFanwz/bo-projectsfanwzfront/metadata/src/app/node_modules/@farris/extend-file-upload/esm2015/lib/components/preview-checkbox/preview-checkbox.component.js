/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/preview-checkbox/preview-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
export class PreviewCheckboxComponent {
    constructor() {
        this.cls1 = true;
        this.cls2 = true;
        this.cls3 = true;
        this.checked = false;
        this.disabled = false;
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    clickHandler(event) {
        event.stopPropagation();
        if (!this.disabled) {
            this.checked = !this.checked;
            this.checkedChange.emit({ checked: this.checked, id: this.id });
        }
    }
}
PreviewCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'f-file-preview-checkbox',
                template: "<div class=\"custom-control custom-checkbox f-checkradio-single  m-0\" >\r\n  <input class=\"custom-control-input\" type=\"checkbox\"  [checked]=\"checked\" />\r\n  <label class=\"custom-control-label\" (click)=\"clickHandler($event)\"></label>\r\n</div>"
            }] }
];
/** @nocollapse */
PreviewCheckboxComponent.ctorParameters = () => [];
PreviewCheckboxComponent.propDecorators = {
    cls1: [{ type: HostBinding, args: ['class.align-middle',] }],
    cls2: [{ type: HostBinding, args: ['class.d-inline-flex',] }],
    cls3: [{ type: HostBinding, args: ['class.preview-checkbox',] }],
    checked: [{ type: Input }],
    id: [{ type: Input }],
    disabled: [{ type: Input }],
    checkedChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PreviewCheckboxComponent.prototype.cls1;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.cls2;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.cls3;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.checked;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.id;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.disabled;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.checkedChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3ByZXZpZXctY2hlY2tib3gvcHJldmlldy1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU81RixNQUFNLE9BQU8sd0JBQXdCO0lBV25DO1FBVm1DLFNBQUksR0FBQyxJQUFJLENBQUM7UUFDVCxTQUFJLEdBQUMsSUFBSSxDQUFDO1FBQ1AsU0FBSSxHQUFDLElBQUksQ0FBQztRQUV4QyxZQUFPLEdBQVUsS0FBSyxDQUFDO1FBRXZCLGFBQVEsR0FBVSxLQUFLLENBQUM7UUFFdkIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTdCLENBQUM7Ozs7SUFFakIsUUFBUSxLQUFLLENBQUM7Ozs7O0lBRWQsWUFBWSxDQUFDLEtBQUs7UUFDaEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUMsRUFBRSxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO1NBQzdEO0lBQ0gsQ0FBQzs7O1lBMUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQywwUUFBZ0Q7YUFFakQ7Ozs7O21CQUVFLFdBQVcsU0FBQyxvQkFBb0I7bUJBQ2hDLFdBQVcsU0FBQyxxQkFBcUI7bUJBQ2pDLFdBQVcsU0FBQyx3QkFBd0I7c0JBRXBDLEtBQUs7aUJBQ0wsS0FBSzt1QkFDTCxLQUFLOzRCQUVMLE1BQU07Ozs7SUFSUCx3Q0FBNkM7O0lBQzdDLHdDQUE4Qzs7SUFDOUMsd0NBQWlEOztJQUVqRCwyQ0FBZ0M7O0lBQ2hDLHNDQUFvQjs7SUFDcEIsNENBQWlDOztJQUVqQyxpREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmLWZpbGUtcHJldmlldy1jaGVja2JveCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3ByZXZpZXctY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogW11cclxufSlcclxuZXhwb3J0IGNsYXNzIFByZXZpZXdDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hbGlnbi1taWRkbGUnKSBjbHMxPXRydWU7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5kLWlubGluZS1mbGV4JykgY2xzMj10cnVlO1xyXG4gIEBIb3N0QmluZGluZygnY2xhc3MucHJldmlldy1jaGVja2JveCcpIGNsczM9dHJ1ZTtcclxuICBcclxuICBASW5wdXQoKSBjaGVja2VkOiBib29sZWFuPWZhbHNlO1xyXG4gIEBJbnB1dCgpIGlkOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW49ZmFsc2U7XHJcblxyXG4gIEBPdXRwdXQoKSBjaGVja2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICBjbGlja0hhbmRsZXIoZXZlbnQpIHtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgIHRoaXMuY2hlY2tlZD0hdGhpcy5jaGVja2VkO1xyXG4gICAgICB0aGlzLmNoZWNrZWRDaGFuZ2UuZW1pdCh7Y2hlY2tlZDogdGhpcy5jaGVja2VkLGlkOnRoaXMuaWR9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19