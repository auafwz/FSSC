import { Injectable, ElementRef } from '@angular/core';
import { StateMachine } from '@farris/devkit';
// tslint:disable: max-line-length
/**
 * 状态机服务
 * @scope FrameComponent
 */
class StateMachineService {
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        this._clsDefaultName = 'f-form-state-default';
        this._initLoad = true;
        if (this.stateMachine.initialState.name === 'init') {
            window.setTimeout(() => {
                this.initFormState();
            }, 0);
        }
    }
    transit(action) {
        if (action && typeof this.stateMachine[action] === 'function') {
            this.stateMachine[action]();
            this._currentFrameContext = this['context'] && this['context']['frameContext'];
            if (this._initLoad) {
                this.initFormState();
                this._initLoad = false;
            }
            if (!this._currentFrameContext) {
                return;
            }
            const currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);
            if (!!currentRootFrameContext) {
                this.toggleFormState(action, currentRootFrameContext);
            }
        }
    }
    getCurrentRootFrameContext(currentFrameContext) {
        let currentRootFrameContext;
        this.getAllRootFrameContext().forEach((rootFc) => {
            if (currentFrameContext.namespace === rootFc.namespace) {
                currentRootFrameContext = rootFc;
            }
        });
        return currentRootFrameContext;
    }
    getFrameContextManagerMap() {
        if (this.stateMachine && this.stateMachine.frameContext) {
            const appContext = this.stateMachine.frameContext.appContext;
            if (appContext) {
                const frameContextManager = appContext.frameContextManager;
                return frameContextManager.getFrameContextMap();
            }
        }
        return null;
        // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();
    }
    getAllRootFrameContext() {
        const rootFrameContextArr = [];
        this.getFrameContextManagerMap().forEach(item => {
            if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {
                rootFrameContextArr.push(item);
            }
        });
        return rootFrameContextArr;
    }
    initFormState() {
        if (!this.getFrameContextManagerMap()) {
            return;
        }
        this.getAllRootFrameContext().forEach((rootFc) => {
            const rootComponent = rootFc.injector.get(ElementRef, null) || null;
            if (!rootComponent || !rootComponent.nativeElement) {
                return;
            }
            if (!rootComponent.nativeElement.className.includes(this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {
                this.addCssClass(rootComponent, this._clsDefaultName);
            }
        });
    }
    toggleFormState(action, frameContext) {
        const rootComponent = frameContext.injector.get(ElementRef, null) || null;
        if (!rootComponent || !rootComponent.nativeElement || !action) {
            return;
        }
        action = action.toLowerCase();
        if (action && ['create', 'edit'].includes(action)) {
            if (action === 'create') {
                this.addCssClass(rootComponent, 'f-form-state-create');
            }
            else if (action === 'edit') {
                this.addCssClass(rootComponent, 'f-form-state-edit');
            }
            this.removeCssClass(rootComponent, this._clsDefaultName);
        }
        else {
            ['f-form-state-create', 'f-form-state-edit'].forEach(item => this.removeCssClass(rootComponent, item));
            this.addCssClass(rootComponent, this._clsDefaultName);
        }
    }
    addCssClass(elementRef, className) {
        if (!elementRef || !className || !elementRef.nativeElement) {
            return;
        }
        const originalClassName = elementRef.nativeElement.className || '';
        if (!originalClassName.includes(className)) {
            elementRef.nativeElement.className = `${originalClassName} ${className}`;
        }
    }
    removeCssClass(elementRef, className) {
        if (!elementRef || !className || !elementRef.nativeElement) {
            return;
        }
        const originalClassName = elementRef.nativeElement.className || '';
        if (originalClassName.includes(className)) {
            elementRef.nativeElement.className = originalClassName.split(' ').filter(p => p && p !== className).join(' ');
        }
    }
    getFormRootComponent() {
        if (this.stateMachine && this.stateMachine.frameContext) {
            const viewContext = this.stateMachine.frameContext;
            if (viewContext) {
                const virtualRootContext = viewContext.getVirtualRootFrameContext();
                if (virtualRootContext) {
                    const injector = virtualRootContext.injector;
                    if (typeof injector.get === 'function') {
                        return injector.get(ElementRef, null);
                    }
                }
            }
        }
        return null;
        // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;
    }
}
StateMachineService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
StateMachineService.ctorParameters = () => [
    { type: StateMachine }
];
export { StateMachineService };
//# sourceMappingURL=data:application/json;base64,