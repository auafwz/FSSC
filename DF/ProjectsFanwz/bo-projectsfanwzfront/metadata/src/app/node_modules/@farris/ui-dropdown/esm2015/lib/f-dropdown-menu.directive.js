/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ElementRef, Input } from '@angular/core';
import { FDropdownDirective } from './f-dropdown.directive';
export class FDropdownMenuDirective {
    /**
     * @param {?} elementRef
     * @param {?} dropdown
     */
    constructor(elementRef, dropdown) {
        this.elementRef = elementRef;
        this.dropdown = dropdown;
        this._docRect = { width: 0, height: 0 };
        this.showDropdownMenu = true;
        // 内部使用，在不变更依赖的情况下，触发改变
        this.dpIsOpen = false;
        /** @type {?} */
        var me = this;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            me.dpIsOpen = me.dropdown.isOpen;
            me.openStateChange();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @private
     * @param {?} pment
     * @return {?}
     */
    getRealPlacement(pment) {
        /** @type {?} */
        var result = 'bottom-right';
        switch (pment) {
            case 'top':
                result = 'top-right';
                break;
            case 'left':
                result = 'left-bottom';
                break;
            case 'right':
                result = 'right-bottom';
                break;
            case 'bottom':
                result = 'bottom-right';
                break;
            default:
                result = pment;
        }
        return result;
    }
    /**
     * @private
     * @return {?}
     */
    openStateChange() {
        if (this.dpIsOpen) {
            if (this.elementRef.nativeElement.className.indexOf('show') < 0) {
                this.elementRef.nativeElement.className += ' show';
                if (this.dropdown.needToCalculate()) {
                    this._docRect = this.dropdown.getRectifyReferenceEl();
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.changeDirection();
                }), 0);
            }
        }
        else {
            if (this.elementRef.nativeElement.className.indexOf('show') > -1) {
                this.elementRef.nativeElement.className = this.elementRef.nativeElement.className.replace(' show', ' ');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeDirection() {
        if (this.dropdown.needToCalculate()) {
            /** @type {?} */
            const rect = this.elementRef.nativeElement.getBoundingClientRect();
            /** @type {?} */
            let placement = this.dropdown.placement;
            /** @type {?} */
            let newplacement = this.getRealPlacement(placement);
            placement = newplacement;
            //
            if (newplacement.indexOf('right') > -1 &&
                rect.right > this._docRect.width) {
                placement = placement.replace('right', 'left');
            }
            if (newplacement.indexOf('left') > -1 &&
                rect.left - rect.width < 0) {
                placement = placement.replace('left', 'right');
            }
            if (newplacement.indexOf('bottom') > -1 &&
                rect.bottom > this._docRect.height) {
                placement = placement.replace('down', 'up');
            }
            if (newplacement.indexOf('up') > -1 &&
                rect.bottom - rect.height < 0) {
                placement = placement.replace('up', 'bottom');
            }
            if (newplacement !== this.dropdown.placement) {
                this.dropdown.placement = newplacement;
            }
            if (placement !== newplacement) {
                this.dropdown.placement = placement;
            }
            this.dropdown.resetCalculate(false);
        }
    }
}
FDropdownMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fDropdownMenu]'
            },] }
];
/** @nocollapse */
FDropdownMenuDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FDropdownDirective }
];
FDropdownMenuDirective.propDecorators = {
    showDropdownMenu: [{ type: HostBinding, args: ['class.dropdown-menu',] }],
    dpIsOpen: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype._docRect;
    /** @type {?} */
    FDropdownMenuDirective.prototype.showDropdownMenu;
    /** @type {?} */
    FDropdownMenuDirective.prototype.dpIsOpen;
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FDropdownMenuDirective.prototype.dropdown;
}
//# sourceMappingURL=data:application/json;base64,