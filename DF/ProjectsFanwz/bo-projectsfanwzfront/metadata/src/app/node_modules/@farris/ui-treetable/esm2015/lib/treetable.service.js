/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
export class TreetableService {
    constructor() {
        this.selectionSource = new Subject();
        this.dblClickSource = new Subject();
        this.changeCheckboxStatus = new Subject();
        this.removeNode = new Subject();
        this.insertNode = new Subject();
        this.updateNode = new Subject();
        this.selectionSource$ = this.selectionSource.asObservable();
        this.dblClickSource$ = this.dblClickSource.asObservable();
        this.changeCheckboxStatus$ = this.changeCheckboxStatus.asObservable();
        this.insertNode$ = this.insertNode.asObservable();
        this.removeNode$ = this.removeNode.asObservable();
        this.updateNode$ = this.updateNode.asObservable();
    }
    /**
     * @param {?=} selected
     * @return {?}
     */
    onSelectionChange(selected) {
        this.selectionSource.next(selected);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onDblClick(rowNode) {
        this.dblClickSource.next(rowNode);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onChangeCheckboxStatus(rowNode) {
        this.changeCheckboxStatus.next(rowNode);
    }
    /**
     * @param {?} treeNode
     * @param {?=} parent
     * @return {?}
     */
    onInsert(treeNode, parent) {
        this.insertNode.next(treeNode);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onRemove(rowNode) {
        this.removeNode.next(rowNode);
    }
    /**
     * @param {?} rowNode
     * @return {?}
     */
    onUpdate(rowNode) {
        this.updateNode.next(rowNode);
    }
    /**
     * @param {?} col
     * @param {?} tt
     * @return {?}
     */
    columnIsVisible(col, tt) {
        if (col.visible === undefined) {
            return true;
        }
        if (typeof col.visible === 'function') {
            return col.visible(tt);
        }
        return col.visible;
    }
    /**
     * @param {?} columns
     * @param {?} tt
     * @return {?}
     */
    checkColumnsForGroupHeader(columns, tt) {
        /** @type {?} */
        let _columns = [];
        if (columns && columns.length) {
            _columns = this.getDataColumns(columns);
        }
        return {
            columns: _columns
        };
    }
    /**
     * @private
     * @param {?} cols
     * @param {?} length
     * @return {?}
     */
    getDataFields(cols, length) {
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let j = 0;
        cols.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const colspan = n.colspan || 1;
            if (i + colspan <= length) {
                i += colspan;
                j++;
            }
        }));
        return cols.splice(0, j);
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    getDataColumns(cols) {
        if (!cols || !cols.length) {
            return [];
        }
        /** @type {?} */
        let fields = [];
        for (let i = 0; i < cols.length; i++) {
            /** @type {?} */
            let _cols = cols[i];
            if (cols[i] && !cols[i].length) {
                _cols = [...fields];
                fields = [];
            }
            _cols.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (!n.field && n.colspan && n.colspan > 1) {
                    this.getDataFields(cols[i + 1], n.colspan).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        if (!fields.includes((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => f.field === d.field))) {
                            fields.push(d);
                        }
                    }));
                }
                else {
                    if (!fields.includes((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f.field === n.field))) {
                        fields.push(n);
                    }
                }
            }));
        }
        return fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.colspan || n.colspan === 1));
    }
}
TreetableService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.selectionSource;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.dblClickSource;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.changeCheckboxStatus;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.removeNode;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.insertNode;
    /**
     * @type {?}
     * @private
     */
    TreetableService.prototype.updateNode;
    /** @type {?} */
    TreetableService.prototype.selectionSource$;
    /** @type {?} */
    TreetableService.prototype.dblClickSource$;
    /** @type {?} */
    TreetableService.prototype.changeCheckboxStatus$;
    /** @type {?} */
    TreetableService.prototype.insertNode$;
    /** @type {?} */
    TreetableService.prototype.removeNode$;
    /** @type {?} */
    TreetableService.prototype.updateNode$;
}
//# sourceMappingURL=data:application/json;base64,