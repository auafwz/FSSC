/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_extend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { throwError, of, EMPTY } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { RequestInfoUtil, ResponseInfoUtil } from './utils';
import { BackEndMessageUtil } from './utils/back_end_message.util';
import { BefSessionManager } from './session/bef_session_manager';
// tslint:disable: max-line-length tslint:disable: no-string-literal
var 
// tslint:disable: max-line-length tslint:disable: no-string-literal
BefProxyExtend = /** @class */ (function () {
    function BefProxyExtend(context) {
        this.context = context;
    }
    /**
     * 请求结果返回
     * @param response response
     * @param ignoreChanges 忽略变更
     */
    /**
     * 请求结果返回
     * @param {?} response response
     * @param {?=} ignoreChanges 忽略变更
     * @param {?=} options
     * @return {?}
     */
    BefProxyExtend.prototype.onResponse = /**
     * 请求结果返回
     * @param {?} response response
     * @param {?=} ignoreChanges 忽略变更
     * @param {?=} options
     * @return {?}
     */
    function (response, ignoreChanges, options) {
        if (response && response.innerDataChange && ignoreChanges !== true) {
            this.context.handleDataChangeDetails(response.innerDataChange);
        }
        if (response && response.innerVariableChange) {
            this.context.handleVariableChangeDetail(response.innerVariableChange);
        }
        /** @type {?} */
        var messages = ResponseInfoUtil.parseBackEndMessage(response);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        this.context.clearAllEntityChanges();
        /** @type {?} */
        var requestInfo = RequestInfoUtil.getRequestInfo(options);
        /** @type {?} */
        var variableChange = requestInfo && requestInfo.variableChange;
        this.context.clearAllVariableChanges(variableChange);
        if (response && response.hasOwnProperty('returnValue')) {
            return response.returnValue;
        }
        else {
            return response;
        }
    };
    /**
     * 发生错误
     * @param error error
     * @param selfHandError 自定义错误处理
     * @param ignoreError 忽略错误
     */
    /**
     * 发生错误
     * @param {?} error error
     * @param {?} selfHandError 自定义错误处理
     * @param {?} ignoreError 忽略错误
     * @return {?}
     */
    BefProxyExtend.prototype.onError = /**
     * 发生错误
     * @param {?} error error
     * @param {?} selfHandError 自定义错误处理
     * @param {?} ignoreError 忽略错误
     * @return {?}
     */
    function (error, selfHandError, ignoreError) {
        var e_1, _a;
        /** @type {?} */
        var formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        var applicationId = formAppContext.ApplicationId;
        /** @type {?} */
        var loadingServices = window['DEVKIT_LOADING_SERVICE'];
        /** @type {?} */
        var messages = ResponseInfoUtil.parseBackEndError(error);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {
            try {
                for (var loadingServices_1 = tslib_1.__values(loadingServices), loadingServices_1_1 = loadingServices_1.next(); !loadingServices_1_1.done; loadingServices_1_1 = loadingServices_1.next()) {
                    var loadingService = loadingServices_1_1.value;
                    if (typeof (loadingService.clearAll) === 'function') {
                        loadingService.clearAll();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (loadingServices_1_1 && !loadingServices_1_1.done && (_a = loadingServices_1.return)) _a.call(loadingServices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            var eventBus = this.context.restService.eventBus;
            /** @type {?} */
            var applicationContext = window[applicationId] || {};
            /** @type {?} */
            var isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            var messages_1 = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            var bizMessages = BackEndMessageUtil.getFormlessMessages(messages_1);
            /** @type {?} */
            var isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            var needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            var willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages_1, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error: error, formAppContext: formAppContext });
            if (!!eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    };
    /**
     * 扩展http headers
     * @param headers headers
     */
    /**
     * 扩展http headers
     * @param {?} headers headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefProxyExtend.prototype.extendHeaders = /**
     * 扩展http headers
     * @param {?} headers headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (headers, runtimeContext) {
        var _this = this;
        /** @type {?} */
        var formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        var $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);
        return $getSessionId.pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        function (sessionId) {
            headers = _this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);
            return of(headers);
        })));
    };
    /**
     * 扩展请求参数
     * @param params 参数
     */
    /**
     * 扩展请求参数
     * @param {?} url
     * @param {?} params 参数
     * @return {?}
     */
    BefProxyExtend.prototype.extendUrl = /**
     * 扩展请求参数
     * @param {?} url
     * @param {?} params 参数
     * @return {?}
     */
    function (url, params) {
        if (!params) {
            return url;
        }
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                var value = JSON.stringify(params[key]);
                if (url.indexOf('?') === -1) {
                    url = url + "?" + key + "=" + value;
                }
                else {
                    url = url + "&" + key + "=" + value;
                }
            }
        }
        return url;
    };
    /**
     * 扩展请求体
     * @param body body
     */
    /**
     * 扩展请求体
     * @param {?} body body
     * @return {?}
     */
    BefProxyExtend.prototype.extendBody = /**
     * 扩展请求体
     * @param {?} body body
     * @return {?}
     */
    function (body) {
        var _this = this;
        if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {
            return body;
        }
        Object.keys(body).forEach((/**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            if (name === 'requestInfo') {
                body['requestInfo'] = _this.context.restService.buildRequestInfo();
            }
        }));
        // 兼容J版后端body只有一个key时body只传value的情况
        if (Object.keys(body).length === 1) {
            body = Object.values(body)[0];
        }
        return body;
    };
    /**
     * @param {?} response
     * @return {?}
     */
    BefProxyExtend.prototype.parseHeaders = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        /** @type {?} */
        var sessionIdKey = 'BEFSessionID';
        if (response.headers && response.headers.has(sessionIdKey)) {
            this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));
        }
    };
    return BefProxyExtend;
}());
// tslint:disable: max-line-length tslint:disable: no-string-literal
export { BefProxyExtend };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefProxyExtend.prototype.context;
}
//# sourceMappingURL=data:application/json;base64,