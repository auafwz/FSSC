/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-personnel-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
const personnelSelectorDefautOption = {
    absOrgType: 'System_organization',
    // 数据源类型
    readonly: false,
    // 是否只读
    placeholder: '请选择',
    viewType: 'tag',
    busNum: 'common',
    idField: 'userId'
};
export class DatagridPersonnelSelectorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} rts
     * @param {?} utils
     * @param {?} injector
     */
    constructor(render, el, rts, utils, injector) {
        super(render, el, injector);
        this.rts = rts;
        this.utils = utils;
        this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        (helpData, mapFields, dataObj) => {
            if (mapFields) {
                /** @type {?} */
                const helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                (f) => {
                    /** @type {?} */
                    let val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} h
                             * @return {?}
                             */
                            (h) => {
                                return this.utils.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = this.utils.getValue(f, helpData);
                        }
                    }
                    mapFields[f].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    (ff) => {
                        /** @type {?} */
                        const field = trim(ff);
                        this.utils.setValue(dataObj, field, val);
                    }));
                }));
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        // 这里添加了过滤 this.options 中null、undefined,万一 jit 生成了 undefined 的呢，
        this.options = Object.assign({}, personnelSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        (itemValue) => isUndefined(itemValue) || isNull(itemValue))));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.el.nativeElement;
        super.ngAfterViewInit();
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            (fieldPath) => {
                return this.utils.setValue(fieldPath.join('.'), this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            (fieldPath) => {
                return this.utils.getValue(fieldPath.join('.'), this.bindingData, true);
            });
        }
    }
    /**
     * @return {?}
     */
    inputClear() {
        this.updateControlValue(null);
        this.instance.clear.emit();
        if (this.options.inputClear) {
            this.options.inputClear();
        }
    }
    /**
     * @param {?} removedItem
     * @return {?}
     */
    tagRemoved(removedItem) {
        /** @type {?} */
        const mapFields = this.instance.mapFields;
        /** @type {?} */
        const helpFields = Object.keys(mapFields);
        /** @type {?} */
        const bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        const selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            let value = this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            const vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            (v, i) => {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            this.utils.setValue(this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    }
    /**
     * @param {?} changeData
     * @return {?}
     */
    selectionsChange(changeData) {
        /** @type {?} */
        const formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    }
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    updateControlValue(selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    }
    /**
     * @return {?}
     */
    formSelectedRowData() {
        /** @type {?} */
        let selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            const defaultDisplayName = this.instance.displayField ? item[this.instance.displayField] : `[${item.code}]${item.name}`;
            /** @type {?} */
            const displayName = this.instance.formatFn ? this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridPersonnelSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-personnel-selector',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
            <farris-personnel-selector #selection
            style="width: 100%"
            [placeholder]="options.placeholder"
            [enableQuick]="false"
            [readonly]="options.readonly"
            [absOrgType]="options.absOrgType"
            [viewType]="options.viewType"
            [multiSelect]="options.multiSelect"
            [busNum]="options.busNum"
            [mapFields]="options.mapFields"
            [formatFn]="options.formatter"
            [formControlName]="column.field"
            [idField]="options.idField"
            [displayField]="options.textField"
            (inputClear)="inputClear()"
            (selectionsChange)="selectionsChange($event)"
            (tagRemoved)="tagRemoved($event)"
            >
            </farris-personnel-selector>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridPersonnelSelectorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: RuntimeStateService },
    { type: CommonUtils },
    { type: Injector }
];
DatagridPersonnelSelectorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['selection',] }]
};
if (false) {
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.instance;
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.bindingData;
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    DatagridPersonnelSelectorComponent.prototype.rts;
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.utils;
}
/** @type {?} */
export const PersonnelSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'PersonnelSelector', value: DatagridPersonnelSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,