/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Renderer2, ChangeDetectorRef, HostBinding, Output, EventEmitter, NgZone } from "@angular/core";
import { ResponseToolbarDropDown, ResponseToolbarItem, ResponseToolbarGroup } from "../model/response-toolbar.model";
import { FResizedDirective } from "../resized/f-resized.directive";
import { Subject, Observable } from "rxjs";
import { debounceTime } from "rxjs/operators";
import { LocaleService } from "@farris/ui-locale";
import ResizeObserver from "resize-observer-polyfill";
export class ResponseToolbarComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} cd
     * @param {?} localeService
     */
    constructor(el, render, cd, localeService) {
        this.render = render;
        this.cd = cd;
        this.localeService = localeService;
        this.frtCls = true;
        this.prCls = true;
        // 传递点击事件
        this.rtClickEvent = new EventEmitter();
        // 辅助计算宽度数据
        this.auxiliaryDatas = [];
        // 控制父元素滚动的样式
        //  private _dpState = false;
        //
        this.ro = null;
        // 记录容器宽度
        this.containerWidthRecord = 0;
        // 记录变化
        this.needResponseChanges = 0;
        this.referEl = null;
        this.dpState = [false];
        // 用来内部记录
        this._auxiliary = -1;
        this.resizeGroups = [];
        // 记录格式化后的数据
        this.toolbarDatas = [];
        this.distanceThreshold = 20;
        this.isUpdateTBView = false;
        this._stateDatas = new Subject();
        this._btnVisibleDatas = new Subject();
        this.clickThrottleTime = 350;
        this.clickItems = new Subject();
        this.rtSize = "";
        /*强制方向，默认为空值，可以有top、bottom，朝上、朝下。
             * 使用场景：工具栏内部的下拉，需要朝上或者需要朝下展开，统一控制
             */
        this.popDirection = "";
        // right按钮靠右 left按钮靠左
        this.btnAlign = "right";
        this.ngZone = null;
        this._selfEl = el.nativeElement;
        if (el.nativeElement.parentElement) {
            this.referEl = el.nativeElement.parentElement;
        }
    }
    // 内部记录格式化后的初始数据-------------------------暂时不用
    // _toolbarDatas: Array<ResponseToolbarItem | ResponseToolbarDropDown> = [];
    /**
     * @param {?} values
     * @return {?}
     */
    set groups(values) {
        if (values) {
            this.resizeGroups = [];
            values.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => {
                this.resizeGroups.push(new ResponseToolbarGroup(group.id, group.name));
                // 还没有计算预置排序
            }));
        }
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set datas(values) {
        if (values) {
            this.toolbarDatas = this._formatData(values);
            this.needResponseChanges++;
            // 处理分组数据
            this._reOrganizeResizeGroups();
        }
    }
    // 按钮的禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    set btnState(values) {
        this._stateDatas = values;
    }
    // 按钮的查看状态
    /**
     * @param {?} values
     * @return {?}
     */
    set btnVisible(values) {
        this._btnVisibleDatas = values;
    }
    /*尺寸：有sm,lg,空值，默认是空值 */
    /**
     * @param {?} btnSize
     * @return {?}
     */
    set buttonSize(btnSize) {
        if (btnSize != this.rtSize) {
            this.rtSize &&
                this.render.removeClass(this._selfEl, "f-response-toolbar-" + this.rtSize);
            this.rtSize = btnSize;
            this.rtSize &&
                this.render.addClass(this._selfEl, "f-response-toolbar-" + this.rtSize);
        }
    }
    /**
     * @return {?}
     */
    get buttonSize() {
        return this.rtSize;
    }
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    ngDoCheck() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 去掉overflow之后
        this.render.addClass(this.auxiliaryContainerEl.nativeElement, "response-toolbar-hidden-element");
        // 按钮的禁用状态
        this._stateDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.changeState(data);
        }));
        // 按钮的可见状态
        this._btnVisibleDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.changeVisible(data);
        }));
        this.observerElement();
        // 拦截点击事件只传递第一次点击事件的处理操作交给parent来处理
        this.clickSubscription = this.clickItems
            .pipe(debounceTime(this.clickThrottleTime))
            .subscribe((/**
         * @param {?} eventDatas
         * @return {?}
         */
        (eventDatas) => {
            this.rtClickEvent.emit(eventDatas);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.unobserve(this.resizedContainerEl.nativeElement);
            this.ro = null;
        }
        if (this.clickSubscription) {
            this.clickSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.needResponseChanges > 0) {
            this.needResponseChanges--;
            this.responseResize();
        }
        else if (this.auxiliaryDatas.length > 0) {
            this._calculate(true, this.auxiliaryContainerEl.nativeElement.offsetWidth);
        }
    }
    // 因为旧模板带有这个方法
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) { }
    /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     * @private
     * @return {?}
     */
    observerElement() {
        if (!this.ngZone) {
            /** @type {?} */
            const moduleInjector = this.cd["_view"].root.ngModule.injector;
            this.ngZone = moduleInjector.get(NgZone, null);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            (entries, observer) => {
                /** @type {?} */
                const tempWidth = entries[0].contentRect.width;
                if (Math.abs(tempWidth - this.containerWidthRecord) >
                    this.distanceThreshold) {
                    this.responseResize();
                    this.containerWidthRecord = tempWidth;
                }
            }));
            this.ro.observe(this.resizedContainerEl.nativeElement);
        }));
    }
    /**
     * 强制转换方向
     * @param {?} selfDefinePL
     * @param {?} defaultPL
     * @return {?}
     */
    getPlacement(selfDefinePL, defaultPL) {
        /** @type {?} */
        let oldDirection = selfDefinePL ? selfDefinePL : defaultPL;
        if (!this.popDirection) {
            return oldDirection;
        }
        /** @type {?} */
        var plRelation = { bottom: "top", top: "bottom" };
        oldDirection = oldDirection == "left" ? "left-bottom" : oldDirection;
        oldDirection = oldDirection == "right" ? "right-bottom" : oldDirection;
        /** @type {?} */
        let newDirection = oldDirection.replace(plRelation[this.popDirection], this.popDirection);
        return newDirection;
    }
    /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     * @return {?}
     */
    responseResize() {
        /** @type {?} */
        const _distance = this._getDistance();
        if (_distance > 0) {
            // 如果分组都已经处理完,再出现滚动条不管
            /** @type {?} */
            const _tempIndex = this._getFirstUnResponsedIndex();
            if (_tempIndex < 0) {
                return;
            }
            // 所有第一层下拉都収折
            this.dpState = [false];
            for (let k = _tempIndex; k < this.resizeGroups.length; k++) {
                /** @type {?} */
                const _tempGroup = this.resizeGroups[k];
                this._auxiliary = k;
                if (_tempGroup.isResponsing()) {
                    this._calculate();
                }
                else {
                    // 如果还未开始处理响应式
                    /** @type {?} */
                    const _tempDP = new ResponseToolbarDropDown({
                        text: _tempGroup.name,
                        id: _tempGroup.id,
                        placement: this.popDirection
                            ? this.popDirection + "-left"
                            : "bottom-left",
                        width: _tempGroup.getWidth()
                    });
                    // 已经处理过宽度
                    if (_tempDP.getWidth()) {
                        this.auxiliaryDatas = [_tempDP];
                        this._calculate(true, _tempDP.getWidth());
                    }
                    else {
                        // 更新辅助数据
                        this.auxiliaryDatas.push(_tempDP);
                        this.cd.detectChanges();
                    }
                }
            }
        }
        else {
            // 寻找最后一个处理响应式的元素
            /** @type {?} */
            const _tempIndex = this._getLastResponseIndex();
            if (_tempIndex < 0) {
                return;
            }
            // 临时存储数据
            /** @type {?} */
            let _tempToolbarDatas = [].concat(this.toolbarDatas);
            // 如果已经开始处理响应式
            for (let k = _tempIndex; k >= 0; k--) {
                /** @type {?} */
                const result = this._restitute(_tempToolbarDatas, k);
                _tempToolbarDatas = [].concat(result["data"]);
                if (!result["continueTo"]) {
                    break;
                }
            }
            // 更新数据
            this.toolbarDatas = [].concat(_tempToolbarDatas);
            // 所有第一层下拉都収折
            this.dpState = [false];
            this.cd.detectChanges();
        }
    }
    // 下拉的展开收起状态
    /**
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    dpSectionState(state, id) {
        if (state) {
            // 展开状态下
            /** @type {?} */
            let dropdowns = this.resizedContentEl.nativeElement.querySelectorAll("[fDropdown]");
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf("show") &&
                        dropdowns[k].id != id) {
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                        this.compatibleDispatchEvent(dropdowns[k], "selfClose");
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    compatibleDispatchEvent(eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    }
    // 修改启用禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    changeState(values) {
        /** @type {?} */
        const idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const state = values[id];
            /** @type {?} */
            const item = this._findItemByID(id, this.toolbarDatas);
            if (item) {
                item["disabled"] = state;
            }
        }));
        this.cd.detectChanges();
    }
    /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param {?} values
     * @return {?}
     */
    changeVisible(values) {
        /** @type {?} */
        const idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const visible = values[id];
            /** @type {?} */
            const item = this._findItemByID(id, this.toolbarDatas);
            if (item) {
                item["visible"] = visible;
            }
        }));
        // 遍历循环,更新数据
        this.toolbarDatas.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            // 如果是下拉
            if (item["isDP"]) {
                this._checkDropdownVisible(values, item);
            }
        }));
        this.needResponseChanges++;
        // 更新
        //this.cd.markForCheck();
        this.cd.detectChanges();
    }
    /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @private
     * @param {?} outsideVisibleArrays 从组件外传入的可见状态对象
     * @param {?} dropdownItem 下拉元素
     * @return {?}
     */
    _checkDropdownVisible(outsideVisibleArrays, dropdownItem) {
        //如果没有被强制设置状态
        if (!outsideVisibleArrays.hasOwnProperty(dropdownItem["id"])) {
            // 下拉元素不可见，判断是否有可见子元素
            if (!dropdownItem["visible"] &&
                this._hasVisibleItem(dropdownItem["children"], true)) {
                dropdownItem["visible"] = true;
            }
            // 下拉元素是可见，判断是否有子元素都不可见
            if (dropdownItem["visible"] &&
                !this._hasVisibleItem(dropdownItem["children"], true)) {
                dropdownItem["visible"] = false;
            }
        }
        dropdownItem.children.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item["isDP"]) {
                this._checkDropdownVisible(outsideVisibleArrays, item);
            }
        }));
    }
    /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @private
     * @param {?} datas 待检查数据
     * @param {?} visible 可见状态
     * @return {?}
     */
    _hasVisibleItem(datas, visible) {
        /** @type {?} */
        const findIndex = datas.findIndex((/**
         * @param {?} childItem
         * @return {?}
         */
        childItem => {
            if (childItem["visible"] == visible) {
                return true;
            }
            return false;
        }));
        if (findIndex > -1) {
            return true;
        }
        return false;
    }
    /**
     * 捕获点击
     * @param {?} ev
     * @return {?}
     */
    clickItem(ev) {
        // 如果是分离的下拉按钮
        if (this.elhasSpecialCls(ev.target, "dropdown-toggle-split")) {
            ev.stopImmediatePropagation();
        }
        // 判断是否点击到需要处理事件的元素上,按钮、下拉按钮
        /** @type {?} */
        var clickEvEl = this.findBtnOrTogglerItemFromClick(ev.target);
        if (clickEvEl) {
            /** @type {?} */
            let tempID = clickEvEl["id"];
            // 修改模板，id调整到下拉整体上
            if (!tempID &&
                this.elhasSpecialCls(clickEvEl["parentNode"], "f-rt-dropdown")) {
                tempID = clickEvEl["parentNode"].id;
            }
            if (tempID) {
                /** @type {?} */
                const tempItem = this._findItemByID(tempID, this.toolbarDatas);
                // 如果元素禁用
                if (tempItem["disabled"]) {
                    // 禁止向上传递
                    ev.stopImmediatePropagation();
                }
                else {
                    this.clickItems.next({
                        id: tempID,
                        text: tempItem["text"],
                        hidden: tempItem["hidden"]
                    });
                }
            }
        }
        else {
            ev.stopImmediatePropagation();
        }
    }
    /**
     * @private
     * @param {?} clickTarget
     * @return {?}
     */
    findBtnOrTogglerItemFromClick(clickTarget) {
        // 父级标签是否是body,是着停止返回集合,反之继续
        if (this.elhasSpecialCls(clickTarget)) {
            return clickTarget;
        }
        else if (clickTarget.parentNode.hasOwnProperty("className") &&
            clickTarget.parentNode.className.indexOf("f-response-content") < 0) {
            /** @type {?} */
            var parentN = clickTarget.parentNode;
            if (this.elhasSpecialCls(parentN)) {
                return parentN;
            }
            else {
                return this.findBtnOrTogglerItemFromClick(parentN);
            }
        }
        // 返回集合,结束
        return null;
    }
    /**
     * @private
     * @param {?} el
     * @param {?=} clsName
     * @return {?}
     */
    elhasSpecialCls(el, clsName = "") {
        if (el) {
            /** @type {?} */
            var classNameList = el.classList;
            /** @type {?} */
            var findCls = false;
            for (var k = 0; k < classNameList.length; k++) {
                if (clsName) {
                    if (classNameList[k] == clsName) {
                        findCls = true;
                        break;
                    }
                }
                else {
                    if (classNameList[k] == "f-rt-btn" ||
                        classNameList[k] == "f-rt-toggle") {
                        findCls = true;
                        break;
                    }
                }
            }
            return findCls;
        }
        return false;
    }
    /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     * @private
     * @return {?}
     */
    _reOrganizeResizeGroups() {
        // 处理分组数据
        //  if (this.resizeGroups.length === 0) {
        /** @type {?} */
        let moreText = "更多";
        if (this.localeService) {
            moreText = this.localeService.getValue("responseToolbar.more");
        }
        /** @type {?} */
        const defaultResizeGroup = new ResponseToolbarGroup("toolbar-group-1", moreText);
        for (let i = this.toolbarDatas.length - 1; i >= 0; i--) {
            defaultResizeGroup.setPreset(this.toolbarDatas[i]["id"]);
        }
        this.resizeGroups = [].concat(defaultResizeGroup);
        // this.cd.markForCheck();
        this.cd.detectChanges();
    }
    /**
     * 内容与容器的差值
     * @private
     * @return {?}
     */
    _getDistance() {
        return (this.resizedContentEl.nativeElement.offsetWidth -
            this.resizedContainerEl.nativeElement.offsetWidth);
    }
    /**
     * 根据返回结果判断是否继续
     * @private
     * @param {?} originalData
     * @param {?} groupIndex
     * @return {?}
     */
    _restitute(originalData, groupIndex) {
        /** @type {?} */
        const tempGroup = this.resizeGroups[groupIndex];
        // 滚动条和内容的距离
        /** @type {?} */
        let tempDistance = this._getDistance();
        // 计算最后一个下拉的宽度
        /** @type {?} */
        const tempGroupData = originalData[this._findIndexByID(originalData, tempGroup.id)];
        // 找到还原的位置
        /** @type {?} */
        const tempPresetIndex = [].concat(tempGroup.responsedIndex);
        // 排除原下拉子元素被计算
        for (let j = tempPresetIndex.length - 1; j >= 0; j--) {
            if (tempDistance >= 0) {
                break;
            }
            // 从下拉中移除
            /** @type {?} */
            const tempChildData = tempGroupData.children[0];
            /** @type {?} */
            const specialDistance = j === 0 ? tempGroupData.getWidth() : 0;
            tempDistance =
                tempDistance +
                    (tempChildData.getWidth() ? tempChildData.getWidth() : 0) -
                    specialDistance;
            if (tempDistance >= 0) {
                break;
            }
            else {
                // 更新下拉
                tempGroupData.removeChild();
                // 插入到原位置
                originalData.splice(tempPresetIndex[j], 0, tempChildData);
                // 更新位置
                tempGroup.removeResponsed(j);
                if (j === 0) {
                    originalData.splice(this._findIndexByID(originalData, tempGroup.id), 1);
                }
            }
        }
        return {
            continueTo: tempDistance > 0 ? true : false,
            data: originalData
        };
    }
    /**
     * 开始计算
     * @private
     * @param {?=} auxiliary
     * @param {?=} tGroupWidth
     * @return {?}
     */
    _calculate(auxiliary = false, tGroupWidth = 0) {
        if (this._auxiliary < 0) {
            return;
        }
        // 记录需要修改的下拉
        /** @type {?} */
        let tempDP;
        // 滚动条和内容的距离
        /** @type {?} */
        let tempDistance = this._getDistance() + tGroupWidth;
        // 临时存储数据
        /** @type {?} */
        const tempToolbarDatas = [].concat(this.toolbarDatas);
        /** @type {?} */
        const tempGroup = this.resizeGroups[this._auxiliary];
        if (auxiliary) {
            tempDP = this.auxiliaryDatas.pop();
            tempDP.setWidth(tGroupWidth);
            tempGroup.setWidth(tGroupWidth);
        }
        else {
            tempDP =
                tempToolbarDatas[this._findIndexByID(tempToolbarDatas, tempGroup.id)];
        }
        // 当前剩余隐藏
        for (let j = tempGroup.responsedIndex.length; j < tempGroup.presetId.length; j++) {
            if (tempDistance <= 0) {
                break;
            }
            // 计算在当前数据中的位置，根据这个位置可以找宽度
            /** @type {?} */
            const tempOldIndex = (/** @type {?} */ (this._findIndexByID(this.toolbarDatas, tempGroup.presetId[j])));
            /** @type {?} */
            const tempNewIndex = (/** @type {?} */ (this._findIndexByID(tempToolbarDatas, tempGroup.presetId[j])));
            // 计算按钮宽度
            /** @type {?} */
            let tempWidth = (/** @type {?} */ (this.toolbarDatas[tempOldIndex].getWidth()));
            if (tempWidth === 0) {
                // 按钮宽度未曾被计算过
                tempWidth = this._getWidthFromElementsById(tempGroup.presetId[j]);
                tempToolbarDatas[tempNewIndex].setWidth(tempWidth);
            }
            else if (tempWidth === false) {
                // 按钮被隐藏
                tempWidth = 0;
            }
            tempDP.addChild(tempToolbarDatas[tempNewIndex]);
            // 移除
            tempToolbarDatas.splice(tempNewIndex, 1);
            // 保存位置用于还原
            tempGroup.setResponsed(tempNewIndex);
            tempDistance = tempDistance - tempWidth;
        }
        if (auxiliary && tempDP.hasChild()) {
            // 插入
            tempToolbarDatas.push(tempDP);
        }
        this._auxiliary = -1;
        this.toolbarDatas = [].concat(tempToolbarDatas);
        this.cd.detectChanges();
    }
    /**
     * 根据id找到实际显示元素的宽度
     * @private
     * @param {?} findId
     * @return {?}
     */
    _getWidthFromElementsById(findId) {
        /** @type {?} */
        const parentEl = this.resizedContentEl.nativeElement;
        /** @type {?} */
        const childLen = parentEl.children.length;
        /** @type {?} */
        let result = 0;
        for (var k = 0; k < childLen; k++) {
            if (parentEl.children[k].id === findId) {
                result = parentEl.children[k].offsetWidth;
                break;
            }
        }
        return result;
    }
    /**
     * 格式化数据
     * @private
     * @param {?} datas
     * @param {?=} idPrefix
     * @return {?}
     */
    _formatData(datas, idPrefix = "response") {
        /** @type {?} */
        const result = [];
        datas.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            if (item.isDP) {
                // 如果是下拉
                if (item.hasOwnProperty("children") &&
                    item["children"].length) {
                    /** @type {?} */
                    const children = [].concat(item["children"]);
                    item.children = [];
                    /** @type {?} */
                    const dpItem = new ResponseToolbarDropDown(Object.assign({ id: idPrefix + "_" + index }, item));
                    result.push(dpItem);
                    dpItem.children = this._formatData(children, idPrefix + "_" + index);
                }
                else {
                    result.push(new ResponseToolbarDropDown(Object.assign({ id: idPrefix + "_" + index }, item)));
                }
            }
            else {
                // 非下拉
                result.push(new ResponseToolbarItem(Object.assign({ id: idPrefix + "_" + index }, item)));
            }
        }));
        return result;
    }
    /**
     * 找到第一个未处理完响应式的元素
     * @private
     * @return {?}
     */
    _getFirstUnResponsedIndex() {
        /** @type {?} */
        const tempUnResponsedIndex = this.resizeGroups.findIndex((/**
         * @param {?} group
         * @return {?}
         */
        group => {
            if (group.isResponsed()) {
                return false;
            }
            return true;
        }));
        return tempUnResponsedIndex;
    }
    /**
     * 寻找最后一个处理响应式的元素
     * @private
     * @return {?}
     */
    _getLastResponseIndex() {
        /** @type {?} */
        const tempResponsingIndex = this.resizeGroups.findIndex((/**
         * @param {?} group
         * @return {?}
         */
        group => {
            if (!group.isResponsing()) {
                return true;
            }
            return false;
        }));
        // 所有组元素都已处理完响应式
        if (tempResponsingIndex === -1) {
            return this.resizeGroups.length - 1;
        }
        // 所有组元素都未开始处理响应式
        return tempResponsingIndex > 1 ? tempResponsingIndex - 1 : -1;
    }
    /**
     * 找到group形成的下拉，在数据中的位置
     * @private
     * @param {?} datas
     * @param {?} id
     * @return {?}
     */
    _findIndexByID(datas, id) {
        /** @type {?} */
        const result = datas.findIndex((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            if (item["id"] === id) {
                return true;
            }
            return false;
        }));
        return result;
    }
    /**
     * 根据ID寻找Item
     * @private
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    _findItemByID(id, data) {
        /** @type {?} */
        let tempResult = null;
        /** @type {?} */
        const tempIndex = data.findIndex((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            if (item["id"] === id) {
                tempResult = item;
                return true;
            }
            // 如果是下拉，层级下拉
            if (item["isDP"]) {
                /** @type {?} */
                const tempItem = this._findItemByID(id, item["children"]);
                if (tempItem) {
                    tempResult = tempItem;
                    return true;
                }
            }
            return false;
        }));
        return tempResult;
    }
}
ResponseToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: "f-response-toolbar",
                template: "<!-- <div class=\"border bg-primary\" style=\"height:40px;position: relative;\"> -->\r\n<div #auxiliaryContainer class=\"response-toolbar-hidden-element\">\r\n    <ng-container *ngFor=\"let dataItem of auxiliaryDatas\">\r\n        <div class=\"btn-group\" *ngIf=\"dataItem.visible&&dataItem.isDP\" id=\"{{ dataItem.id }}\">\r\n            <button type=\"button\" class=\"btn dropdown-toggle dropdown-toggle-split  f-rt-toggle\"\r\n                [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"dataItem.class\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n             <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n            </button>\r\n        </div>\r\n        <button type=\"button\" class=\"btn f-rt-btn\" [class.f-btn-ml]=\"btnAlign=='right'\"\r\n            [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"dataItem.class\" id=\"{{ dataItem.id }}\"\r\n            *ngIf=\"dataItem.visible&&!dataItem.isDP\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n            <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n        </button>\r\n    </ng-container>\r\n</div>\r\n<div fResized #resizedContainer (resizedEvent)=\"onResize($event)\" class=\"d-flex flex-nowrap\"\r\n    [ngClass]=\"{'justify-content-end':btnAlign=='right','justify-content-start':btnAlign=='left'}\">\r\n    <div class=\"d-inline-block f-response-content\" style=\"white-space: nowrap;\" #resizedContent\r\n        (click)=\"clickItem($event)\">\r\n        <ng-container *ngFor=\"let dataItem of toolbarDatas\">\r\n            <ng-container *ngIf=\"dataItem.visible && dataItem.isDP\">\r\n                <ng-container *ngTemplateOutlet=\"\r\n                        dropdownTmpl;\r\n                        context: { $implicit: dataItem }\r\n                    \"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dataItem.visible && !dataItem.isDP&&dataItem.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\"\r\n                    [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" id=\"{{ dataItem.id }}\"\r\n                    [ngClass]=\"dataItem.class\" [class.disabled]=\"dataItem.disabled\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\"\r\n                    [farrisTooltip]=\"dataItem.tipsEnable\" [content]=\"dataItem.tipsText\">\r\n                    <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n                </button>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dataItem.visible && !dataItem.isDP&&!dataItem.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\"\r\n                    [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" id=\"{{ dataItem.id }}\"\r\n                    [ngClass]=\"dataItem.class\" [class.disabled]=\"dataItem.disabled\"  [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- </div> -->\r\n\r\n<!--\u7B2C\u4E00\u5C42\u4E0B\u62C9-->\r\n<ng-template #dropdownTmpl let-data>\r\n    <div class=\"btn-group f-rt-dropdown\" id=\"{{ data.id }}\" fDropdown\r\n        [placement]=\"getPlacement(data['placement'],'bottom')\" (dpChangeEvent)=\"dpSectionState($event,data.id)\"\r\n        [rectifyReference]=\"referEl\" [forceState]=\"dpState\" [autoRectify]=\"true\" [class.f-btn-ml]=\"btnAlign=='right'\"\r\n        [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"data['dropdownCls']\">\r\n        <!--\u542F\u7528\u4E0B\u62C9\u5206\u5F00\u6309\u94AE-->\r\n        <ng-container *ngIf=\"data.split\">\r\n            <ng-container *ngIf=\"data.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\" [ngClass]=\"data.class\" [class.disabled]=\"data.disabled\"\r\n                    [farrisTooltip]=\"data.tipsEnable\" [content]=\"data.tipsText\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n                </button>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!data.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\" [ngClass]=\"data.class\" [class.disabled]=\"data.disabled\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n                </button>\r\n            </ng-container>\r\n            <button class=\"btn dropdown-toggle dropdown-toggle-split\" [ngClass]=\"data.class\" fDropdownToggle></button>\r\n        </ng-container>\r\n        <!--\u4E0D\u542F\u7528\u4E0B\u62C9\u5206\u5F00\u6309\u94AE-->\r\n        <ng-container *ngIf=\"!data.split&&data.tipsEnable\">\r\n            <button type=\"button\" fDropdownToggle class=\"btn f-rt-toggle\" [farrisTooltip]=\"data.tipsEnable\"\r\n                [content]=\"data.tipsText\" [ngClass]=\"data.class + ' dropdown-toggle'\" [dpDisabled]=\"data.disabled\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n            </button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!data.split&&!data.tipsEnable\">\r\n            <button type=\"button\" fDropdownToggle class=\"btn f-rt-toggle\" [ngClass]=\"data.class + ' dropdown-toggle'\"\r\n                [dpDisabled]=\"data.disabled\"  [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n            </button>\r\n        </ng-container>\r\n        <ul class=\"dropdown-menu\" fDropdownMenu [ngClass]=\"data.menuCls\" id=\"{{ data.id }}_menu\">\r\n            <ng-container *ngFor=\"let item of data.children\">\r\n                <ng-container *ngIf=\"item.visible && item.isDP\">\r\n                    <ng-container *ngTemplateOutlet=\"\r\n                            dropdownSubTmpl;\r\n                            context: { $implicit: item }\r\n                        \"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.visible&&!item.isDP&&item.tipsEnable\">\r\n                    <li class=\"dropdown-item  f-rt-btn\" id=\"{{ item.id }}\" [class.disabled]=\"item.disabled\"\r\n                        [farrisTooltip]=\"item.tipsEnable\" [content]=\"item.tipsText\">\r\n                        {{ item.text }}\r\n                    </li>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.visible&&!item.isDP&&!item.tipsEnable\">\r\n                    <li class=\"dropdown-item  f-rt-btn\" id=\"{{ item.id }}\" [class.disabled]=\"item.disabled\">\r\n                        {{ item.text }}\r\n                    </li>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ul>\r\n    </div>\r\n</ng-template>\r\n<!--\u7B2C\u4E8C\u5C42\u4E0B\u62C9-->\r\n<ng-template #dropdownSubTmpl let-subData>\r\n    <li class=\"dropdown-submenu f-rt-dropdown\" fDropdown [isSubDP]=\"true\"\r\n        [placement]=\"getPlacement(subData['placement'],'right')\" [autoRectify]=\"true\" [rectifyReference]=\"referEl\"\r\n        [ngClass]=\"subData['dropdownCls']\" id=\"{{ subData.id }}\">\r\n        <ng-container *ngIf=\"subData.split\">\r\n            <ng-container *ngIf=\"subData.tipsEnable\">\r\n                <span class=\"dropdown-item f-rt-btn\" [class.disabled]=\"subData['disabled']\" [ngClass]=\"subData['class']\"\r\n                    [farrisTooltip]=\"subData.tipsEnable\" [content]=\"subData.tipsText\">{{ subData.text }}</span>\r\n                <span class=\"dropdown-toggle dropdown-toggle-split f-rt-toggle\" fDropdownToggle></span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!subData.tipsEnable\">\r\n                <span class=\"dropdown-item f-rt-btn\" [class.disabled]=\"subData['disabled']\"\r\n                    [ngClass]=\"subData['class']\">{{ subData.text }}</span>\r\n                <span class=\"dropdown-toggle dropdown-toggle-split f-rt-toggle\" fDropdownToggle></span>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!subData.split\">\r\n            <ng-container *ngIf=\"subData.tipsEnable\">\r\n                <span class=\"dropdown-item  dropdown-toggle f-rt-toggle\" [dpDisabled]=\"subData['disabled']\"\r\n                    [farrisTooltip]=\"subData.tipsEnable\" [content]=\"subData.tipsText\" [ngClass]=\"subData['class']\"\r\n                    fDropdownToggle>{{ subData.text }}</span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!subData.tipsEnable\">\r\n                <span class=\"dropdown-item  dropdown-toggle f-rt-toggle\" [dpDisabled]=\"subData['disabled']\"\r\n                    [ngClass]=\"subData['class']\" fDropdownToggle>{{ subData.text }}</span>\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n\r\n        <ul class=\"dropdown-menu\" fDropdownMenu [ngClass]=\"subData.menuCls\" id=\"{{ subData.id }}_submenu\">\r\n            <ng-container *ngFor=\"let subItem of subData.children\">\r\n                <ng-container *ngIf=\"subItem.visible && subItem.isDP\">\r\n                    <ng-container *ngTemplateOutlet=\"\r\n                            dropdownSubTmpl;\r\n                            context: { $implicit: subItem }\r\n                        \"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"subItem.visible && !subItem.isDP\">\r\n                    <ng-container *ngIf=\"subItem.tipsEnable\">\r\n                        <li [farrisTooltip]=\"subItem.tipsEnable\" [content]=\"subItem.tipsText\"\r\n                            class=\"dropdown-item f-rt-btn\" id=\"{{ subItem.id }}\" [class.disabled]=\"subItem.disabled\">\r\n                            {{ subItem.text }}\r\n                        </li>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!subItem.tipsEnable\">\r\n                        <li class=\"dropdown-item f-rt-btn\" id=\"{{ subItem.id }}\" [class.disabled]=\"subItem.disabled\">\r\n                            {{ subItem.text }}\r\n                        </li>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ul>\r\n    </li>\r\n</ng-template>",
                styles: [":host .response-toolbar-hidden-element{position:fixed;z-index:200;visibility:hidden;top:-87px}"]
            }] }
];
/** @nocollapse */
ResponseToolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: LocaleService }
];
ResponseToolbarComponent.propDecorators = {
    frtCls: [{ type: HostBinding, args: ["class.f-response-toolbar",] }],
    prCls: [{ type: HostBinding, args: ["class.position-relative",] }],
    resizedContainerEl: [{ type: ViewChild, args: ["resizedContainer",] }],
    auxiliaryContainerEl: [{ type: ViewChild, args: ["auxiliaryContainer",] }],
    resizedContentEl: [{ type: ViewChild, args: ["resizedContent",] }],
    resizedContainerDirective: [{ type: ViewChild, args: ["resizedContainer", { read: FResizedDirective },] }],
    rtClickEvent: [{ type: Output }],
    groups: [{ type: Input }],
    datas: [{ type: Input }],
    btnState: [{ type: Input }],
    btnVisible: [{ type: Input }],
    clickThrottleTime: [{ type: Input }],
    buttonSize: [{ type: Input }],
    popDirection: [{ type: Input }],
    btnAlign: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ResponseToolbarComponent.prototype.frtCls;
    /** @type {?} */
    ResponseToolbarComponent.prototype.prCls;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizedContainerEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.auxiliaryContainerEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizedContentEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizedContainerDirective;
    /** @type {?} */
    ResponseToolbarComponent.prototype.rtClickEvent;
    /** @type {?} */
    ResponseToolbarComponent.prototype.auxiliaryDatas;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.containerWidthRecord;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.needResponseChanges;
    /** @type {?} */
    ResponseToolbarComponent.prototype.referEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.dpState;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype._auxiliary;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype._selfEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizeGroups;
    /** @type {?} */
    ResponseToolbarComponent.prototype.toolbarDatas;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.distanceThreshold;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.isUpdateTBView;
    /** @type {?} */
    ResponseToolbarComponent.prototype._stateDatas;
    /** @type {?} */
    ResponseToolbarComponent.prototype._btnVisibleDatas;
    /** @type {?} */
    ResponseToolbarComponent.prototype.clickThrottleTime;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.clickItems;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.clickSubscription;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.rtSize;
    /** @type {?} */
    ResponseToolbarComponent.prototype.popDirection;
    /** @type {?} */
    ResponseToolbarComponent.prototype.btnAlign;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.cd;
    /** @type {?} */
    ResponseToolbarComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,