/**
 * CommandBus相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CommandHandlerFactory } from './command_handler_factory';
/**
 * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
 */
var CommandBus = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CommandBus(handlerFactory) {
        this.handlerFactory = handlerFactory;
        this.executingCommands = [];
        this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
    }
    /**
     * 派发命令
     * @param command 要派发的命令
     */
    CommandBus.prototype.dispatch = function (command) {
        var _this = this;
        var commandResult$ = new Subject();
        this.executeCommand(command).subscribe({
            next: function (lastTaskResult) {
                commandResult$.next(lastTaskResult);
                commandResult$.complete();
            },
            complete: function () {
                commandResult$.complete();
                _this.removeCommandFromExecutingQueue(command);
            },
            error: function (error) {
                commandResult$.error(error);
                _this.removeCommandFromExecutingQueue(command, !_this.is401Error(error));
            }
        });
        return commandResult$;
    };
    /**
     * 执行命令并返回最后一个任务的执行结果流
     */
    CommandBus.prototype.executeCommand = function (command) {
        this.addCommandToExecutingQueue(command);
        var commandName = command.name;
        var handler = this.handlerFactory.create(commandName);
        var lastTaskResult$ = handler.execute(command);
        return lastTaskResult$;
    };
    /**
     * 添加到执行队列
     */
    CommandBus.prototype.addCommandToExecutingQueue = function (command) {
        this.executingCommands.push(command);
        this.executingCommandCount$.next(this.executingCommands.length);
    };
    /**
     * 从执行队列中移除
     */
    CommandBus.prototype.removeCommandFromExecutingQueue = function (command, postOrNot) {
        if (postOrNot === void 0) { postOrNot = true; }
        this.executingCommands = this.executingCommands.filter(function (executingCommand) {
            return executingCommand !== command;
        });
        if (postOrNot === true) {
            this.executingCommandCount$.next(this.executingCommands.length);
        }
    };
    CommandBus.prototype.is401Error = function (error) {
        // 如果error为空，不认为是401错误
        return error && error.status === 401;
    };
    CommandBus.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandBus.ctorParameters = function () { return [
        { type: CommandHandlerFactory }
    ]; };
    return CommandBus;
}());
export { CommandBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUdILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEU7O0dBRUc7QUFDSDtJQWtCRTs7T0FFRztJQUNILG9CQUFtQixjQUFxQztRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVEOzs7T0FHRztJQUNJLDZCQUFRLEdBQWYsVUFBZ0IsT0FBZ0I7UUFBaEMsaUJBaUJDO1FBaEJDLElBQU0sY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDckMsSUFBSSxFQUFFLFVBQUMsY0FBbUI7Z0JBQ3hCLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3BDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1QixDQUFDO1lBQ0QsUUFBUSxFQUFFO2dCQUNSLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUIsS0FBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFDRCxLQUFLLEVBQUUsVUFBQyxLQUFVO2dCQUNoQixjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixLQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLENBQUM7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSyxtQ0FBYyxHQUF0QixVQUF1QixPQUFnQjtRQUNyQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNqQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RCxJQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFHRDs7T0FFRztJQUNLLCtDQUEwQixHQUFsQyxVQUFtQyxPQUFnQjtRQUNqRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7T0FFRztJQUNLLG9EQUErQixHQUF2QyxVQUF3QyxPQUFnQixFQUFFLFNBQXlCO1FBQXpCLDBCQUFBLEVBQUEsZ0JBQXlCO1FBQ2pGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFVBQUMsZ0JBQXlCO1lBQy9FLE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVPLCtCQUFVLEdBQWxCLFVBQW1CLEtBQXdCO1FBQ3pDLHNCQUFzQjtRQUN0QixPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQztJQUN2QyxDQUFDOztnQkFyRkYsVUFBVTs7OztnQkFMRixxQkFBcUI7O0lBNEY5QixpQkFBQztDQUFBLEFBdkZELElBdUZDO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbW1hbmRCdXPnm7jlhbPlrprkuYlcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kJztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogQ29tbWFuZEJ1c+eUqOS6jua0vuWPkUNvbW1hbmTvvIzlroPmjqXlj5fkuIDkuKpDb21tYW5k5a6e5L6L77yM5p+l5om+5a+55bqU55qEQ29tbWFuZEhhbmRsZXLvvIzlubbmiafooYzjgIJcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQ29tbWFuZEJ1cyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIGhhbmRsZXLlt6XljoJcclxuICAgKi9cclxuICBwcml2YXRlIGhhbmRsZXJGYWN0b3J5OiBDb21tYW5kSGFuZGxlckZhY3Rvcnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIOato+WcqOaJp+ihjOeahOWRveS7pOaVsOmHj+a1ge+8iOivt+WLv+S9v+eUqO+8jOWQjuaenOiHqui0n++8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBleGVjdXRpbmdDb21tYW5kQ291bnQkOiBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPjtcclxuXHJcbiAgLyoqXHJcbiAgICog5q2j5Zyo5omn6KGM55qE5ZG95Luk5pWw6YePXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleGVjdXRpbmdDb21tYW5kczogQ29tbWFuZFtdO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoaGFuZGxlckZhY3Rvcnk6IENvbW1hbmRIYW5kbGVyRmFjdG9yeSkge1xyXG4gICAgdGhpcy5oYW5kbGVyRmFjdG9yeSA9IGhhbmRsZXJGYWN0b3J5O1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcyA9IFtdO1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kQ291bnQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa0vuWPkeWRveS7pFxyXG4gICAqIEBwYXJhbSBjb21tYW5kIOimgea0vuWPkeeahOWRveS7pFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwYXRjaChjb21tYW5kOiBDb21tYW5kKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGNvbW1hbmRSZXN1bHQkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQoY29tbWFuZCkuc3Vic2NyaWJlKHtcclxuICAgICAgbmV4dDogKGxhc3RUYXNrUmVzdWx0OiBhbnkpID0+IHtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5uZXh0KGxhc3RUYXNrUmVzdWx0KTtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5jb21wbGV0ZSgpO1xyXG4gICAgICB9LFxyXG4gICAgICBjb21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgIGNvbW1hbmRSZXN1bHQkLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQpO1xyXG4gICAgICB9LFxyXG4gICAgICBlcnJvcjogKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICBjb21tYW5kUmVzdWx0JC5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQsICF0aGlzLmlzNDAxRXJyb3IoZXJyb3IpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY29tbWFuZFJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiafooYzlkb3ku6Tlubbov5Tlm57mnIDlkI7kuIDkuKrku7vliqHnmoTmiafooYznu5PmnpzmtYFcclxuICAgKi9cclxuICBwcml2YXRlIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IENvbW1hbmQpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhpcy5hZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kKTtcclxuICAgIGNvbnN0IGNvbW1hbmROYW1lID0gY29tbWFuZC5uYW1lO1xyXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlckZhY3RvcnkuY3JlYXRlKGNvbW1hbmROYW1lKTtcclxuICAgIGNvbnN0IGxhc3RUYXNrUmVzdWx0JCA9IGhhbmRsZXIuZXhlY3V0ZShjb21tYW5kKTtcclxuICAgIHJldHVybiBsYXN0VGFza1Jlc3VsdCQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog5re75Yqg5Yiw5omn6KGM6Zif5YiXXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kOiBDb21tYW5kKSB7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLnB1c2goY29tbWFuZCk7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQubmV4dCh0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDku47miafooYzpmJ/liJfkuK3np7vpmaRcclxuICAgKi9cclxuICBwcml2YXRlIHJlbW92ZUNvbW1hbmRGcm9tRXhlY3V0aW5nUXVldWUoY29tbWFuZDogQ29tbWFuZCwgcG9zdE9yTm90OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcyA9IHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMuZmlsdGVyKChleGVjdXRpbmdDb21tYW5kOiBDb21tYW5kKSA9PiB7XHJcbiAgICAgIHJldHVybiBleGVjdXRpbmdDb21tYW5kICE9PSBjb21tYW5kO1xyXG4gICAgfSk7XHJcbiAgICBpZiAocG9zdE9yTm90ID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZENvdW50JC5uZXh0KHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMubGVuZ3RoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXM0MDFFcnJvcihlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcclxuICAgIC8vIOWmguaenGVycm9y5Li656m677yM5LiN6K6k5Li65pivNDAx6ZSZ6K+vXHJcbiAgICByZXR1cm4gZXJyb3IgJiYgZXJyb3Iuc3RhdHVzID09PSA0MDE7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZEJ1cyB9O1xyXG4iXX0=