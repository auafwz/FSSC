/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class VirtualizedLoaderService {
    /**
     * @param {?} tt
     */
    constructor(tt) {
        this.tt = tt;
    }
    /**
     * @return {?}
     */
    getTableHeight() {
        return this.tt.height;
    }
    /**
     * @return {?}
     */
    getTableHeaderHeight() {
        return this.tt.headerBox.nativeElement.getBoundingClientRect().height;
    }
    /**
     * @return {?}
     */
    getTableBodyHeight() {
        return this.tt.height - this.getTableHeaderHeight();
    }
    /**
     * @return {?}
     */
    getTableWidth() {
        return this.tt.width;
    }
    /**
     * @return {?}
     */
    getRowHeight() {
        return this.tt.rowHeight;
    }
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    getRowNodes(scrollTop) {
        /** @type {?} */
        const minTop = scrollTop;
        /** @type {?} */
        const maxTop = minTop + this.getTableHeight();
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        const rows = [];
        /** @type {?} */
        let topHideHeight = 0;
        /** @type {?} */
        let bottomHideHeight = 0;
        const { rowNodes } = this.tt.state;
        /** @type {?} */
        const rowHeight = this.getRowHeight();
        // console.time('循环所有节点');
        for (let i = 0; i < rowNodes.length; i++) {
            /** @type {?} */
            const n = rowNodes[i];
            if (!n.visible) {
                continue;
            }
            top += rowHeight;
            if (top + rowHeight < minTop) {
                topHideHeight += rowHeight;
                continue;
            }
            else {
                if (top > maxTop) {
                    bottomHideHeight += rowHeight;
                    continue;
                }
            }
            rows.push(n);
        }
        // console.timeEnd('循环所有节点');
        return {
            data: rows,
            topHideHeight,
            bottomHideHeight
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    VirtualizedLoaderService.prototype.tt;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbGl6ZWQtbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRyZWV0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi92aXJ0dWFsaXplZC1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBV0EsTUFBTSxPQUFPLHdCQUF3Qjs7OztJQUNqQyxZQUFvQixFQUFzQjtRQUF0QixPQUFFLEdBQUYsRUFBRSxDQUFvQjtJQUFHLENBQUM7Ozs7SUFFOUMsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDMUIsQ0FBQzs7OztJQUNELG9CQUFvQjtRQUNoQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUMxRSxDQUFDOzs7O0lBQ0Qsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUN4RCxDQUFDOzs7O0lBQ0QsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLFNBQWlCOztjQUNuQixNQUFNLEdBQUcsU0FBUzs7Y0FDbEIsTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFOztZQUV6QyxHQUFHLEdBQUcsQ0FBQzs7Y0FDTCxJQUFJLEdBQUcsRUFBRTs7WUFDWCxhQUFhLEdBQUcsQ0FBQzs7WUFDakIsZ0JBQWdCLEdBQUcsQ0FBQztjQUVsQixFQUFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSzs7Y0FDM0IsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFFckMsMEJBQTBCO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQkFDaEMsQ0FBQyxHQUFZLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2IsU0FBUzthQUNaO1lBQ0QsR0FBRyxJQUFJLFNBQVMsQ0FBQztZQUNqQixJQUFJLEdBQUcsR0FBRyxTQUFTLEdBQUcsTUFBTSxFQUFFO2dCQUMxQixhQUFhLElBQUksU0FBUyxDQUFDO2dCQUMzQixTQUFTO2FBQ1o7aUJBQU07Z0JBQ0gsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFO29CQUNkLGdCQUFnQixJQUFJLFNBQVMsQ0FBQztvQkFDOUIsU0FBUztpQkFDWjthQUNKO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoQjtRQUNELDZCQUE2QjtRQUU3QixPQUFPO1lBQ0gsSUFBSSxFQUFFLElBQUk7WUFDVixhQUFhO1lBQ2IsZ0JBQWdCO1NBQ25CLENBQUM7SUFDTixDQUFDO0NBQ0o7Ozs7OztJQTFEZSxzQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA1LTIzIDEwOjI3OjA5XHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTA5LTAyIDA5OjA4OjI1XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBUcmVlVGFibGVDb21wb25lbnQgfSBmcm9tICcuL3RyZWV0YWJsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBSb3dOb2RlIH0gZnJvbSAnLi90eXBlcy90cmVlbm9kZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVmlydHVhbGl6ZWRMb2FkZXJTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdHQ6IFRyZWVUYWJsZUNvbXBvbmVudCkge31cclxuXHJcbiAgICBnZXRUYWJsZUhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50dC5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBnZXRUYWJsZUhlYWRlckhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50dC5oZWFkZXJCb3gubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBnZXRUYWJsZUJvZHlIZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHQuaGVpZ2h0IC0gdGhpcy5nZXRUYWJsZUhlYWRlckhlaWdodCgpO1xyXG4gICAgfVxyXG4gICAgZ2V0VGFibGVXaWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50dC53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb3dIZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHQucm93SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJvd05vZGVzKHNjcm9sbFRvcDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgbWluVG9wID0gc2Nyb2xsVG9wO1xyXG4gICAgICAgIGNvbnN0IG1heFRvcCA9IG1pblRvcCArIHRoaXMuZ2V0VGFibGVIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgbGV0IHRvcCA9IDA7XHJcbiAgICAgICAgY29uc3Qgcm93cyA9IFtdO1xyXG4gICAgICAgIGxldCB0b3BIaWRlSGVpZ2h0ID0gMDtcclxuICAgICAgICBsZXQgYm90dG9tSGlkZUhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IHtyb3dOb2RlcyB9ID0gdGhpcy50dC5zdGF0ZTtcclxuICAgICAgICBjb25zdCByb3dIZWlnaHQgPSB0aGlzLmdldFJvd0hlaWdodCgpO1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLnRpbWUoJ+W+queOr+aJgOacieiKgueCuScpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbjogUm93Tm9kZSA9IHJvd05vZGVzW2ldO1xyXG4gICAgICAgICAgICBpZiAoICFuLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvcCArPSByb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmICh0b3AgKyByb3dIZWlnaHQgPCBtaW5Ub3ApIHtcclxuICAgICAgICAgICAgICAgIHRvcEhpZGVIZWlnaHQgKz0gcm93SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9wID4gbWF4VG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tSGlkZUhlaWdodCArPSByb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJvd3MucHVzaChuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS50aW1lRW5kKCflvqrnjq/miYDmnInoioLngrknKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGF0YTogcm93cyxcclxuICAgICAgICAgICAgdG9wSGlkZUhlaWdodCxcclxuICAgICAgICAgICAgYm90dG9tSGlkZUhlaWdodFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19