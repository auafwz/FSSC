/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, HostBinding } from '@angular/core';
import { FilterGridComponent } from './filter-grid.component';
export class FilterFooterComponent {
    /**
     * @param {?} grid
     */
    constructor(grid) {
        this.grid = grid;
        this.cls = 'f-filter-footer';
        this.addFilter = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.moveTop = new EventEmitter();
        this.movePrev = new EventEmitter();
        this.moveNext = new EventEmitter();
        this.moveBottom = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onAddFilter() {
        this.addFilter.emit();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clearFilter.emit();
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        this.moveTop.emit();
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        this.movePrev.emit();
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        this.moveNext.emit();
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        this.moveBottom.emit();
    }
    /**
     * @return {?}
     */
    canUse() {
        if (this.grid.currentCondition) {
            return this.grid.conditions.length > 1;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveUp() {
        if (this.canUse()) {
            return this.grid.currentCondition.index > 0;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveDown() {
        if (this.canUse()) {
            return this.grid.currentCondition.index < this.grid.conditions.length - 1;
        }
        return false;
    }
}
FilterFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-footer',
                template: `
    <div class="footer-container">
        <button type="button" (click)="onAddFilter()"
            class="k-button k-button-icontext k-flat "><span class="k-icon k-i-add"></span> {{ 'filterEditor.addWhere' | locale }}</button>
        <button type="button" (click)="onClear()" [disabled]="!grid.conditions.length"
            class="k-button k-button-icontext k-flat "><span class="k-icon k-i-delete"></span> {{ 'filterEditor.clear' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMoveTop()"
            class="k-button k-button-icontext k-flat "><span class="k-icon k-i-arrow-end-up"></span>
            {{'filterEditor.moveTop' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMovePrev()"
            class="k-button k-button-icontext k-flat "><span class="k-icon k-i-arrow-60-up"></span>
            {{'filterEditor.moveUp' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveNext()"
            class="k-button k-button-icontext k-flat "><span class="k-icon k-i-arrow-60-down"></span>
            {{'filterEditor.moveDown' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveBottom()"
            class="k-button k-button-icontext k-flat"><span class="k-icon k-i-arrow-end-down"></span>
            {{'filterEditor.moveBottom' | locale }}</button>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterFooterComponent.ctorParameters = () => [
    { type: FilterGridComponent }
];
FilterFooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    addFilter: [{ type: Output }],
    clearFilter: [{ type: Output }],
    moveTop: [{ type: Output }],
    movePrev: [{ type: Output }],
    moveNext: [{ type: Output }],
    moveBottom: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FilterFooterComponent.prototype.cls;
    /** @type {?} */
    FilterFooterComponent.prototype.addFilter;
    /** @type {?} */
    FilterFooterComponent.prototype.clearFilter;
    /** @type {?} */
    FilterFooterComponent.prototype.moveTop;
    /** @type {?} */
    FilterFooterComponent.prototype.movePrev;
    /** @type {?} */
    FilterFooterComponent.prototype.moveNext;
    /** @type {?} */
    FilterFooterComponent.prototype.moveBottom;
    /** @type {?} */
    FilterFooterComponent.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWZvb3Rlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZm9vdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQTBCOUQsTUFBTSxPQUFPLHFCQUFxQjs7OztJQVc5QixZQUFtQixJQUF5QjtRQUF6QixTQUFJLEdBQUosSUFBSSxDQUFxQjtRQVZ0QixRQUFHLEdBQUcsaUJBQWlCLENBQUM7UUFFcEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWpDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRU0sQ0FBQzs7OztJQUVqRCxRQUFRLEtBQUssQ0FBQzs7OztJQUVkLFdBQVc7UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFDRCxVQUFVO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBQ0QsWUFBWTtRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7OztJQUdELE1BQU07UUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFNBQVM7UUFDTCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUM3RTtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQW5GSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW1CVDthQUNKOzs7O1lBeEJRLG1CQUFtQjs7O2tCQTJCdkIsV0FBVyxTQUFDLE9BQU87d0JBRW5CLE1BQU07MEJBQ04sTUFBTTtzQkFFTixNQUFNO3VCQUNOLE1BQU07dUJBQ04sTUFBTTt5QkFDTixNQUFNOzs7O0lBUlAsb0NBQThDOztJQUU5QywwQ0FBeUM7O0lBQ3pDLDRDQUEyQzs7SUFFM0Msd0NBQXVDOztJQUN2Qyx5Q0FBd0M7O0lBQ3hDLHlDQUF3Qzs7SUFDeEMsMkNBQTBDOztJQUU5QixxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlckdyaWRDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1ncmlkLmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWZvb3RlcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImZvb3Rlci1jb250YWluZXJcIj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAoY2xpY2spPVwib25BZGRGaWx0ZXIoKVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1hZGRcIj48L3NwYW4+IHt7ICdmaWx0ZXJFZGl0b3IuYWRkV2hlcmUnIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cIm9uQ2xlYXIoKVwiIFtkaXNhYmxlZF09XCIhZ3JpZC5jb25kaXRpb25zLmxlbmd0aFwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1kZWxldGVcIj48L3NwYW4+IHt7ICdmaWx0ZXJFZGl0b3IuY2xlYXInIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgW2Rpc2FibGVkXT1cIiFjYW5Nb3ZlVXAoKVwiIChjbGljayk9XCJvbk1vdmVUb3AoKVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1hcnJvdy1lbmQtdXBcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIHt7J2ZpbHRlckVkaXRvci5tb3ZlVG9wJyB8IGxvY2FsZSB9fTwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIFtkaXNhYmxlZF09XCIhY2FuTW92ZVVwKClcIiAoY2xpY2spPVwib25Nb3ZlUHJldigpXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvbiBrLWJ1dHRvbi1pY29udGV4dCBrLWZsYXQgXCI+PHNwYW4gY2xhc3M9XCJrLWljb24gay1pLWFycm93LTYwLXVwXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICB7eydmaWx0ZXJFZGl0b3IubW92ZVVwJyB8IGxvY2FsZSB9fTwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIFtkaXNhYmxlZF09XCIhY2FuTW92ZURvd24oKVwiIChjbGljayk9XCJvbk1vdmVOZXh0KClcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImstYnV0dG9uIGstYnV0dG9uLWljb250ZXh0IGstZmxhdCBcIj48c3BhbiBjbGFzcz1cImstaWNvbiBrLWktYXJyb3ctNjAtZG93blwiPjwvc3Bhbj5cclxuICAgICAgICAgICAge3snZmlsdGVyRWRpdG9yLm1vdmVEb3duJyB8IGxvY2FsZSB9fTwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIFtkaXNhYmxlZF09XCIhY2FuTW92ZURvd24oKVwiIChjbGljayk9XCJvbk1vdmVCb3R0b20oKVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0XCI+PHNwYW4gY2xhc3M9XCJrLWljb24gay1pLWFycm93LWVuZC1kb3duXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICB7eydmaWx0ZXJFZGl0b3IubW92ZUJvdHRvbScgfCBsb2NhbGUgfX08L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlckZvb3RlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xzID0gJ2YtZmlsdGVyLWZvb3Rlcic7XHJcblxyXG4gICAgQE91dHB1dCgpIGFkZEZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBjbGVhckZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgbW92ZVRvcCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBtb3ZlUHJldiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBtb3ZlTmV4dCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBtb3ZlQm90dG9tID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBncmlkOiBGaWx0ZXJHcmlkQ29tcG9uZW50KSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICAgIG9uQWRkRmlsdGVyKCkge1xyXG4gICAgICAgIHRoaXMuYWRkRmlsdGVyLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW92ZVRvcCgpIHtcclxuICAgICAgICB0aGlzLm1vdmVUb3AuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgb25Nb3ZlUHJldigpIHtcclxuICAgICAgICB0aGlzLm1vdmVQcmV2LmVtaXQoKTtcclxuICAgIH1cclxuICAgIG9uTW92ZU5leHQoKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlTmV4dC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBvbk1vdmVCb3R0b20oKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlQm90dG9tLmVtaXQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY2FuVXNlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmdyaWQuY3VycmVudENvbmRpdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmNvbmRpdGlvbnMubGVuZ3RoID4gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5Nb3ZlVXAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuVXNlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5jdXJyZW50Q29uZGl0aW9uLmluZGV4ID4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5Nb3ZlRG93bigpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5Vc2UoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmN1cnJlbnRDb25kaXRpb24uaW5kZXggPCB0aGlzLmdyaWQuY29uZGl0aW9ucy5sZW5ndGggLSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==