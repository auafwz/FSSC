/**
 * CommandBus相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CommandHandlerFactory } from './command_handler_factory';
/**
 * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
 */
class CommandBus {
    /**
     * 构造函数
     */
    constructor(handlerFactory) {
        this.handlerFactory = handlerFactory;
        this.executingCommands = [];
        this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
    }
    /**
     * 派发命令
     * @param command 要派发的命令
     */
    dispatch(command) {
        const commandResult$ = new Subject();
        this.executeCommand(command).subscribe({
            next: (lastTaskResult) => {
                commandResult$.next(lastTaskResult);
                commandResult$.complete();
            },
            complete: () => {
                commandResult$.complete();
                this.removeCommandFromExecutingQueue(command);
            },
            error: (error) => {
                commandResult$.error(error);
                this.removeCommandFromExecutingQueue(command, !this.is401Error(error));
            }
        });
        return commandResult$;
    }
    /**
     * 执行命令并返回最后一个任务的执行结果流
     */
    executeCommand(command) {
        this.addCommandToExecutingQueue(command);
        const commandName = command.name;
        const handler = this.handlerFactory.create(commandName);
        const lastTaskResult$ = handler.execute(command);
        return lastTaskResult$;
    }
    /**
     * 添加到执行队列
     */
    addCommandToExecutingQueue(command) {
        this.executingCommands.push(command);
        this.executingCommandCount$.next(this.executingCommands.length);
    }
    /**
     * 从执行队列中移除
     */
    removeCommandFromExecutingQueue(command, postOrNot = true) {
        this.executingCommands = this.executingCommands.filter((executingCommand) => {
            return executingCommand !== command;
        });
        if (postOrNot === true) {
            this.executingCommandCount$.next(this.executingCommands.length);
        }
    }
    is401Error(error) {
        // 如果error为空，不认为是401错误
        return error && error.status === 401;
    }
}
CommandBus.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandBus.ctorParameters = () => [
    { type: CommandHandlerFactory }
];
export { CommandBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUdILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHNUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFbEU7O0dBRUc7QUFDSCxNQUNNLFVBQVU7SUFpQmQ7O09BRUc7SUFDSCxZQUFtQixjQUFxQztRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLGVBQWUsQ0FBUyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFFBQVEsQ0FBQyxPQUFnQjtRQUM5QixNQUFNLGNBQWMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3JDLElBQUksRUFBRSxDQUFDLGNBQW1CLEVBQUUsRUFBRTtnQkFDNUIsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDcEMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzVCLENBQUM7WUFDRCxRQUFRLEVBQUUsR0FBRyxFQUFFO2dCQUNiLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELENBQUM7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDcEIsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLCtCQUErQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RSxDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssY0FBYyxDQUFDLE9BQWdCO1FBQ3JDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUdEOztPQUVHO0lBQ0ssMEJBQTBCLENBQUMsT0FBZ0I7UUFDakQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7O09BRUc7SUFDSywrQkFBK0IsQ0FBQyxPQUFnQixFQUFFLFlBQXFCLElBQUk7UUFDakYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBeUIsRUFBRSxFQUFFO1lBQ25GLE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUF3QjtRQUN6QyxzQkFBc0I7UUFDdEIsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUM7SUFDdkMsQ0FBQzs7O1lBckZGLFVBQVU7Ozs7WUFMRixxQkFBcUI7O0FBOEY5QixPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29tbWFuZEJ1c+ebuOWFs+WumuS5iVxyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmQnO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlckZhY3RvcnkgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9mYWN0b3J5JztcclxuXHJcbi8qKlxyXG4gKiBDb21tYW5kQnVz55So5LqO5rS+5Y+RQ29tbWFuZO+8jOWug+aOpeWPl+S4gOS4qkNvbW1hbmTlrp7kvovvvIzmn6Xmib7lr7nlupTnmoRDb21tYW5kSGFuZGxlcu+8jOW5tuaJp+ihjOOAglxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDb21tYW5kQnVzIHtcclxuXHJcbiAgLyoqXHJcbiAgICogaGFuZGxlcuW3peWOglxyXG4gICAqL1xyXG4gIHByaXZhdGUgaGFuZGxlckZhY3Rvcnk6IENvbW1hbmRIYW5kbGVyRmFjdG9yeTtcclxuXHJcbiAgLyoqXHJcbiAgICog5q2j5Zyo5omn6KGM55qE5ZG95Luk5pWw6YeP5rWB77yI6K+35Yu/5L2/55So77yM5ZCO5p6c6Ieq6LSf77yJXHJcbiAgICovXHJcbiAgcHVibGljIGV4ZWN1dGluZ0NvbW1hbmRDb3VudCQ6IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+O1xyXG5cclxuICAvKipcclxuICAgKiDmraPlnKjmiafooYznmoTlkb3ku6TmlbDph49cclxuICAgKi9cclxuICBwcml2YXRlIGV4ZWN1dGluZ0NvbW1hbmRzOiBDb21tYW5kW107XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihoYW5kbGVyRmFjdG9yeTogQ29tbWFuZEhhbmRsZXJGYWN0b3J5KSB7XHJcbiAgICB0aGlzLmhhbmRsZXJGYWN0b3J5ID0gaGFuZGxlckZhY3Rvcnk7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzID0gW107XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4odGhpcy5leGVjdXRpbmdDb21tYW5kcy5sZW5ndGgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rS+5Y+R5ZG95LukXHJcbiAgICogQHBhcmFtIGNvbW1hbmQg6KaB5rS+5Y+R55qE5ZG95LukXHJcbiAgICovXHJcbiAgcHVibGljIGRpc3BhdGNoKGNvbW1hbmQ6IENvbW1hbmQpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgY29tbWFuZFJlc3VsdCQgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZChjb21tYW5kKS5zdWJzY3JpYmUoe1xyXG4gICAgICBuZXh0OiAobGFzdFRhc2tSZXN1bHQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbW1hbmRSZXN1bHQkLm5leHQobGFzdFRhc2tSZXN1bHQpO1xyXG4gICAgICAgIGNvbW1hbmRSZXN1bHQkLmNvbXBsZXRlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgY29tbWFuZFJlc3VsdCQuY29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUNvbW1hbmRGcm9tRXhlY3V0aW5nUXVldWUoY29tbWFuZCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGVycm9yOiAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbW1hbmRSZXN1bHQkLmVycm9yKGVycm9yKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUNvbW1hbmRGcm9tRXhlY3V0aW5nUXVldWUoY29tbWFuZCwgIXRoaXMuaXM0MDFFcnJvcihlcnJvcikpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjb21tYW5kUmVzdWx0JDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJp+ihjOWRveS7pOW5tui/lOWbnuacgOWQjuS4gOS4quS7u+WKoeeahOaJp+ihjOe7k+aenOa1gVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXhlY3V0ZUNvbW1hbmQoY29tbWFuZDogQ29tbWFuZCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICB0aGlzLmFkZENvbW1hbmRUb0V4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQpO1xyXG4gICAgY29uc3QgY29tbWFuZE5hbWUgPSBjb21tYW5kLm5hbWU7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5oYW5kbGVyRmFjdG9yeS5jcmVhdGUoY29tbWFuZE5hbWUpO1xyXG4gICAgY29uc3QgbGFzdFRhc2tSZXN1bHQkID0gaGFuZGxlci5leGVjdXRlKGNvbW1hbmQpO1xyXG4gICAgcmV0dXJuIGxhc3RUYXNrUmVzdWx0JDtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqDliLDmiafooYzpmJ/liJdcclxuICAgKi9cclxuICBwcml2YXRlIGFkZENvbW1hbmRUb0V4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQ6IENvbW1hbmQpIHtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMucHVzaChjb21tYW5kKTtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZENvdW50JC5uZXh0KHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS7juaJp+ihjOmYn+WIl+S4reenu+mZpFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVtb3ZlQ29tbWFuZEZyb21FeGVjdXRpbmdRdWV1ZShjb21tYW5kOiBDb21tYW5kLCBwb3N0T3JOb3Q6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzID0gdGhpcy5leGVjdXRpbmdDb21tYW5kcy5maWx0ZXIoKGV4ZWN1dGluZ0NvbW1hbmQ6IENvbW1hbmQpID0+IHtcclxuICAgICAgcmV0dXJuIGV4ZWN1dGluZ0NvbW1hbmQgIT09IGNvbW1hbmQ7XHJcbiAgICB9KTtcclxuICAgIGlmIChwb3N0T3JOb3QgPT09IHRydWUpIHtcclxuICAgICAgdGhpcy5leGVjdXRpbmdDb21tYW5kQ291bnQkLm5leHQodGhpcy5leGVjdXRpbmdDb21tYW5kcy5sZW5ndGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpczQwMUVycm9yKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge1xyXG4gICAgLy8g5aaC5p6cZXJyb3LkuLrnqbrvvIzkuI3orqTkuLrmmK80MDHplJnor69cclxuICAgIHJldHVybiBlcnJvciAmJiBlcnJvci5zdGF0dXMgPT09IDQwMTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBDb21tYW5kQnVzIH07XHJcbiJdfQ==