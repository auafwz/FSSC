/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LanguageTextboxService } from './language-textbox.service';
/*
* @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-03-12 15:46:47
 * @LastEditTime: 2019-04-08 18:46:53
 */
import { Component, Input, ViewChild, ElementRef, ComponentFactoryResolver, Injector, ApplicationRef, NgZone, Renderer2, ViewEncapsulation, forwardRef, Optional, Self } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, RequiredValidator } from '@angular/forms';
import { InputGroupComponent } from '@farris/ui-input-group';
import { LanguageTextPanelComponent } from './language-textbox-panel.component';
import { LocaleService } from '@farris/ui-locale';
import { ChangeDetectorRef } from '@angular/core';
/** @type {?} */
export const LANGUAGE_TEXTBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => LanguageTextboxComponent)),
    multi: true
};
export class LanguageTextboxComponent {
    /**
     * @param {?} el
     * @param {?} cfr
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} applicationRef
     * @param {?} renderer
     * @param {?} requiredValidator
     * @param {?} cd
     */
    constructor(el, cfr, injector, ngZone, applicationRef, renderer, requiredValidator, cd) {
        this.el = el;
        this.cfr = cfr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.applicationRef = applicationRef;
        this.renderer = renderer;
        this.requiredValidator = requiredValidator;
        this.cd = cd;
        this.disabled = false;
        this.readonly = false;
        this.editable = false;
        this.enableClear = false;
        this.languages = [];
        this.panelHeight = 260;
        this.panelWidth = 365;
        /**
         * 面板输入框根据LOCALE_ID 自动获得焦点
         * 设为 false 时，仅第1个获得焦点
         */
        this.autoFocus = true;
        this.openOnFocus = true;
        this.groupIcon = '<span class="f-icon f-icon-yxs_earth"></span>';
        this.currentLanguageItem = undefined;
        this.data = {};
        this.value = '';
        this.onTextBoxclickHandler = null;
        this.lts = null;
        this.onModelChange = (/**
         * @param {?=} obj
         * @return {?}
         */
        (obj) => { });
        this.onModelTouched = (/**
         * @param {?=} obj
         * @return {?}
         */
        (obj) => { });
        this.localeService = this.injector.get(LocaleService);
        this.lts = this.injector.get(LanguageTextboxService, null);
        if (!this.lts) {
            this.lts = new LanguageTextboxService();
        }
        this.lts.hide$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.hideDropDownPanel();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.editable) {
            this.editable = this.languages && this.languages.length && this.languages.length === 1;
        }
        this.bindLanguageInfo(this.languages);
        this.onTextBoxclickHandler = this.renderer.listen(this.input.textbox.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            if (this.editable) {
                this.hideDropDownPanel();
                return;
            }
            if (!this.comboPanelRef) {
                this.showDropDownPanel();
            }
        }));
        this.ngCtrl = this.injector.get(NgControl, null);
        this.registerKeyDown();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.languages && !changes.languages.isFirstChange()) {
            this.bindLanguageInfo(changes.languages.currentValue);
            this.setValue();
        }
    }
    /**
     * @private
     * @param {?} languages
     * @return {?}
     */
    bindLanguageInfo(languages) {
        if (languages && languages.length) {
            if (!this.currentLanguage) {
                /** @type {?} */
                const runtimeLanguageCode = this.localeService.localeId;
                if (runtimeLanguageCode) {
                    /** @type {?} */
                    const defaultLang = languages.find((/**
                     * @param {?} l
                     * @return {?}
                     */
                    l => l.code === runtimeLanguageCode));
                    if (defaultLang) {
                        this.currentLanguage = defaultLang.code;
                        this.currentLanguageItem = defaultLang;
                    }
                    else {
                        if (languages.length) {
                            this.currentLanguage = languages[0].code;
                            this.currentLanguageItem = languages[0];
                        }
                    }
                }
                else {
                    console.warn('当前上下文环境未取到语言代码。');
                }
            }
            else {
                this.currentLanguageItem = this.getLanguageItem(this.currentLanguage);
            }
        }
        else {
            // throw new Error(`Can not find the '[languages]' data.`);
            console.warn(`Please set  the '[languages]' data.`);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.onKeyDownHandler) {
            this.onKeyDownHandler();
        }
        this.hideDropDownPanel();
        if (this.onTextBoxclickHandler) {
            this.onTextBoxclickHandler();
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerKeyDown() {
        /** @type {?} */
        const textEl = this.input.textbox.nativeElement;
        this.onKeyDownHandler = this.renderer.listen(textEl, 'keydown', this.onKeyDown.bind(this));
        // this.ngZone.runOutsideAngular(() => {
        // });
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    onKeyDown($event) {
        if ($event) {
            $event.stopPropagation();
            /** @type {?} */
            const keyCode = $event.keyCode;
            // F2
            if (keyCode === 113) {
                this.showDropDownPanel();
            }
            if (keyCode !== 38 && keyCode !== 40) {
                return;
            }
            /** @type {?} */
            const languageItemIndex = this.languages.findIndex((/**
             * @param {?} l
             * @return {?}
             */
            l => l.code === this.currentLanguageItem.code));
            switch (keyCode) {
                case 38:
                    if (languageItemIndex === 0) {
                        this.currentLanguageItem = this.languages[this.languages.length - 1];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex - 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
                case 40:
                    if (languageItemIndex === this.languages.length - 1) {
                        this.currentLanguageItem = this.languages[0];
                    }
                    else {
                        this.currentLanguageItem = this.languages[languageItemIndex + 1];
                    }
                    this.currentLanguage = this.currentLanguageItem.code;
                    break;
            }
            this.setValue();
            this.cd.markForCheck();
            this.cd.detectChanges();
            // this.input.cd.detectChanges();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.input.setFocusToEnd();
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        $event.stopPropagation();
        if (this.openOnFocus) {
            this.showDropDownPanel();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        $event.stopPropagation();
        // this.hideDropDownPanel();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onIconClick($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
            $event.originalEvent.preventDefault();
        }
        if (!this.comboPanelRef) {
            this.showDropDownPanel();
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    getCliecntRect() {
        /** @type {?} */
        const rect = this.input.el.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const winWidth = window.innerWidth;
        /** @type {?} */
        const winHeight = window.innerHeight;
        /** @type {?} */
        let posleft = rect.left;
        if (winWidth - posleft < this.panelWidth) {
            posleft = posleft + rect.width - this.panelWidth;
        }
        /** @type {?} */
        let postop = rect.top;
        if (winHeight - postop < this.panelHeight) {
            postop = postop - rect.height;
        }
        else {
            postop = postop + rect.height;
        }
        return {
            left: posleft,
            // + rect.width - this.panelWidth
            top: postop,
            height: this.panelHeight,
            width: this.panelWidth
        };
    }
    /**
     * @private
     * @return {?}
     */
    updateLangOrder() {
        /** @type {?} */
        let idx = -1;
        /** @type {?} */
        const curritem = this.languages.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            /** @type {?} */
            const f = n.code === this.localeService.localeId;
            if (f) {
                idx = i;
            }
            return f;
        }));
        if (curritem) {
            /** @type {?} */
            const _item = Object.assign({}, curritem);
            this.languages.splice(idx, 1);
            this.languages.unshift(_item);
        }
    }
    /**
     * @return {?}
     */
    showDropDownPanel() {
        if (!this.languages || this.languages.length === 1) {
            return;
        }
        if (this.readonly || this.disabled) {
            return;
        }
        if (!this.comboPanelRef) {
            /** @type {?} */
            const compFac = this.cfr.resolveComponentFactory(LanguageTextPanelComponent);
            this.comboPanelRef = compFac.create(this.injector);
            this.applicationRef.attachView(this.comboPanelRef.hostView);
            Object.assign(this.comboPanelRef.instance, this.getCliecntRect());
            /** @type {?} */
            const panelRefEl = this.comboPanelRef.location.nativeElement;
            document.body.appendChild(panelRefEl);
            this.renderer.addClass(panelRefEl, 'overlay-pane');
            // this.renderer.setStyle(panelRefEl, 'width', '100vw');
            // this.renderer.setStyle(panelRefEl, 'height', '100vh');
            this.renderer.setStyle(panelRefEl, 'z-index', '99999999');
            this.renderer.setStyle(panelRefEl, 'left', '0');
            this.renderer.setStyle(panelRefEl, 'top', '0');
            this.globalListener = this.registerListenClick();
            // 根据上下文语言，自动调整语言列表的顺序，将当前语言设为第1个
            this.updateLangOrder();
            this.comboPanelRef.instance.items = this.languages;
            this.comboPanelRef.instance.languageInputRef = this;
            this.comboPanelRef.instance.data = Object.assign({}, this.data);
            this.comboPanelRef.instance.currentItem = this.currentLanguageItem;
            this.comboPanelRef.instance.itemClick.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // this.currentLanguageItem = item;
                // this.currentLanguage = item.code;
                this.data = Object.assign({}, data);
                this.hideDropDownPanel();
                this.setValue();
            }));
            this.comboPanelRef.instance.hidePanel.subscribe((/**
             * @return {?}
             */
            () => {
                this.hideDropDownPanel();
            }));
            this.comboPanelRef.instance.showPanel.subscribe((/**
             * @param {?} panelIns
             * @return {?}
             */
            (panelIns) => {
                panelIns.setInputFocus();
            }));
            this.comboPanelRef.instance.show(this);
            this.lts.setActivePane(this);
        }
        else {
            this.hideDropDownPanel();
        }
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    getLanguageItem(code) {
        return this.languages.find((/**
         * @param {?} l
         * @return {?}
         */
        l => l.code === code));
    }
    /**
     * @return {?}
     */
    onClear() { }
    /**
     * @param {?=} val
     * @return {?}
     */
    onChanges(val) {
        this.data[this.currentLanguage] = this.value;
        this.onModelChange(Object.assign({}, this.data));
        this.onModelTouched(Object.assign({}, this.data));
    }
    /**
     * @return {?}
     */
    setValue() {
        if (this.data) {
            this.value = this.data[this.currentLanguage] || '';
        }
        else {
            this.value = '';
        }
        this.onChanges();
        this.cd.detectChanges();
    }
    /**
     * @private
     * @return {?}
     */
    removeGlobalListener() {
        if (this.globalListener) {
            this.globalListener();
            this.globalListener = null;
        }
    }
    /**
     * @private
     * @param {?} action
     * @param {?} fn
     * @return {?}
     */
    iframeEventHandle(action, fn) {
        /** @type {?} */
        const iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            for (const iframe of iframes) {
                /** @type {?} */
                const iframeDoc = iframe.contentDocument;
                if (iframeDoc) {
                    iframeDoc[action]('mousedown', fn);
                    iframeDoc[action]('mousewheel', fn);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerListenClick() {
        /** @type {?} */
        const removePanel = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!this.comboPanelRef) {
                return;
            }
            /** @type {?} */
            const targets = [this.comboPanelRef.location.nativeElement, this.el.nativeElement];
            if (targets.some((/**
             * @param {?} t
             * @return {?}
             */
            t => t.contains(event.target)))) {
                return;
            }
            this.hideDropDownPanel();
        });
        document.body.addEventListener('mousedown', removePanel, true);
        document.body.addEventListener('mousewheel', removePanel, true);
        this.iframeEventHandle('addEventListener', removePanel);
        return (/**
         * @return {?}
         */
        () => {
            document.body.removeEventListener('mousedown', removePanel, true);
            document.body.removeEventListener('mousewheel', removePanel, true);
            this.iframeEventHandle('removeEventListener', removePanel);
        });
        // return this.renderer.listen('document', 'click', (event: any) => {
        //     if (!this.comboPanelRef) {
        //         return;
        //     }
        //     const targets = [this.comboPanelRef.location.nativeElement, this.el.nativeElement];
        //     if (targets.some(t => t.contains(event.target))) {
        //         return;
        //     }
        //     this.hideDropDownPanel();
        // });
    }
    /**
     * @return {?}
     */
    hideDropDownPanel() {
        if (this.comboPanelRef && this.comboPanelRef.instance) {
            // if (this.comboPanelRef.instance.opened) {
            //     this.comboPanelRef.instance.hide();
            // }
            this.comboPanelRef.instance.opened = false;
            /** @type {?} */
            const componentEl = this.comboPanelRef.location.nativeElement;
            if (componentEl.parentNode) {
                componentEl.parentNode.removeChild(componentEl);
            }
            this.removeGlobalListener();
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.input.focus();
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.comboPanelRef) {
                        this.comboPanelRef.destroy();
                        this.comboPanelRef = null;
                    }
                }), 100);
            }));
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (obj && Object.keys(obj).length) {
            this.data = obj;
            this.value = obj[this.currentLanguage];
        }
        else {
            this.data = {};
            this.value = '';
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
LanguageTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'language-textbox',
                template: `
        <input-group #input
            [customCls] = "'farris-language-textbox'"
            [groupText]="groupIcon"
            [disabled]="disabled"
            [readonly]="readonly"
            [editable]="editable"
            [(ngModel)]="value"
            [enableClear]="false"
            [value]="value"
            (valueChange)="onChanges($event)"
            (clear)="onClear()"
            (clickHandle)="onIconClick($event)"
            (focusHandle)="onFocus($event)"
        >
        </input-group>
    `,
                providers: [LANGUAGE_TEXTBOX_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None,
                styles: [`
        .farris-language-textbox .input-group-text {
            padding-right: 3px;
        }
        .farris-language-textbox .input-group-text .language-text {
            padding-right: 3px;
        }
        `]
            }] }
];
/** @nocollapse */
LanguageTextboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: NgZone },
    { type: ApplicationRef },
    { type: Renderer2 },
    { type: RequiredValidator, decorators: [{ type: Optional }, { type: Self }] },
    { type: ChangeDetectorRef }
];
LanguageTextboxComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    enableClear: [{ type: Input }],
    languages: [{ type: Input }],
    currentLanguage: [{ type: Input }],
    panelHeight: [{ type: Input }],
    panelWidth: [{ type: Input }],
    autoFocus: [{ type: Input }],
    input: [{ type: ViewChild, args: ['input',] }],
    openOnFocus: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LanguageTextboxComponent.prototype.disabled;
    /** @type {?} */
    LanguageTextboxComponent.prototype.readonly;
    /** @type {?} */
    LanguageTextboxComponent.prototype.editable;
    /** @type {?} */
    LanguageTextboxComponent.prototype.enableClear;
    /** @type {?} */
    LanguageTextboxComponent.prototype.languages;
    /** @type {?} */
    LanguageTextboxComponent.prototype.currentLanguage;
    /** @type {?} */
    LanguageTextboxComponent.prototype.panelHeight;
    /** @type {?} */
    LanguageTextboxComponent.prototype.panelWidth;
    /**
     * 面板输入框根据LOCALE_ID 自动获得焦点
     * 设为 false 时，仅第1个获得焦点
     * @type {?}
     */
    LanguageTextboxComponent.prototype.autoFocus;
    /** @type {?} */
    LanguageTextboxComponent.prototype.input;
    /** @type {?} */
    LanguageTextboxComponent.prototype.openOnFocus;
    /** @type {?} */
    LanguageTextboxComponent.prototype.groupIcon;
    /** @type {?} */
    LanguageTextboxComponent.prototype.comboPanelRef;
    /** @type {?} */
    LanguageTextboxComponent.prototype.currentLanguageItem;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.globalListener;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.ngCtrl;
    /** @type {?} */
    LanguageTextboxComponent.prototype.value;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onKeyDownHandler;
    /** @type {?} */
    LanguageTextboxComponent.prototype.localeService;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onTextBoxclickHandler;
    /** @type {?} */
    LanguageTextboxComponent.prototype.lts;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onModelChange;
    /** @type {?} */
    LanguageTextboxComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.requiredValidator;
    /**
     * @type {?}
     * @private
     */
    LanguageTextboxComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,