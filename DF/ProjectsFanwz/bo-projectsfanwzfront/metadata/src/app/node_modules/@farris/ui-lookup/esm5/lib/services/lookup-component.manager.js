/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, switchMap } from 'rxjs/operators';
import { LookupLeftComponent } from '../lookup-left.component';
var LookupComponentManager = /** @class */ (function () {
    function LookupComponentManager(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.getComponentInstance = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.multiSelectDT;
        }
        /** @type {?} */
        var ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            var leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    LookupComponentManager.prototype.createComponentWithServerData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    };
    /**
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoriteComponent = /**
     * @return {?}
     */
    function () {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            var favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createContent = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(dtFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(dtFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, { allColumnsTitle: this.ins.allColumnsTitle });
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    };
    // 创建收藏CMP
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoritesContent = 
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(dtFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.resizeComponent = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        /** @type {?} */
        var size = {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - 27;
        }
        this.getComponentInstance(type).resize(size);
    };
    /** 创建左侧组件 */
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    LookupComponentManager.prototype.createLeftComponent = /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    function (ops) {
        var _this = this;
        /** @type {?} */
        var dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d && d.data) {
                _this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: _this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                _this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            var p = {
                pageInfo: {
                    pageIndex: _this.ins.gridOptions.pageIndex,
                    pageSize: _this.ins.gridOptions.pageSize
                }
            };
            Object.assign(p, { search: _this.ins._searchState });
            return _this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.ins.closeLoading();
            _this.ins.loadDataWhenOpen = true;
            if (_this.ins.useFavorite && !_this.ins.isTree()) {
                _this.ins.favHelper.updateFavoritesStatus(res.items);
            }
            _this.ins.loadDataTableData(res);
            setTimeout((/**
             * @return {?}
             */
            function () {
                // 选中数据
                _this.ins.selectionMgr.selectCurrentValue();
                _this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    };
    // 获取关联数据, 右侧数据中 关联各字段的值
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    LookupComponentManager.prototype.getNavigationFilter = 
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    function (navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            var result_1 = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                /** @type {?} */
                var k = r.groupField;
                /** @type {?} */
                var dField = r.helpField;
                /** @type {?} */
                var rf = { fieldName: dField, fieldValue: '' };
                rf.fieldValue = k.split('.').reduce((/**
                 * @param {?} o
                 * @param {?} c
                 * @return {?}
                 */
                function (o, c) {
                    return o[c];
                }), navRow);
                result_1.push(rf);
            }));
            return result_1;
        }
        return '';
    };
    return LookupComponentManager;
}());
export { LookupComponentManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupComponentManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,