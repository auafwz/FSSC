/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { UploadServerService, UploadStatus } from '@farris/extend-file-upload';
import { Observable, forkJoin } from 'rxjs';
import { UploadService, GspFormUploadListEntity, GspFormRemoveListEntity, GspFormDocInfo, GspFormUploadEntity, OperatingModes } from '@gsp-svc/formdoc-upload';
import { FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-svc/formdoc-upload";
import * as i2 from "./ffileupload-adapt-unifile.config";
export class FfileuploadAdaptUnifileService extends UploadServerService {
    /**
     * @param {?} uploadSer
     * @param {?} configSer
     */
    constructor(uploadSer, configSer) {
        super();
        this.uploadSer = uploadSer;
        this.configSer = configSer;
        // 暂时用于简单合并
        this.bufferSize = 1024 * 1024; // 1024 * 1024
        this.uploadedChunk = {};
        this.fileTotalChunk = {};
        this.extendData = this.configSer.getConfig();
    }
    /**
     * @private
     * @return {?}
     */
    uuid() {
        /** @type {?} */
        let S4 = (/**
         * @return {?}
         */
        function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        /** @type {?} */
        let nGuid = S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4();
        return nGuid;
    }
    /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    remove(files, event, extendService) {
        return this.innerRemoveList(files, event, extendService);
    }
    /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    innerRemoveList(files, event, extendService = null) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            let removeFileInfo = new GspFormRemoveListEntity;
            /** @type {?} */
            let metadataIdList = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            fileItem => {
                if (fileItem['response']) {
                    metadataIdList.push(fileItem['response']['metadataId']);
                }
            }));
            removeFileInfo.mode = this.getFinallyConfig('mode', extendService);
            /** @type {?} */
            let rootId = this.getFinallyConfig('rootId', extendService);
            removeFileInfo.metadataIdList = [].concat(metadataIdList);
            this.uploadSer.removeList(metadataIdList, rootId).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                // 没有需要整合的服务器端返回数据
                observer.next({ type: 'removed', files: files });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                observer.error(error);
                observer.complete();
            }), (/**
             * @return {?}
             */
            () => {
                observer.complete();
            }));
        }));
    }
    /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    upload(files, event, extendService) {
        return this.innerUploadList(files, event, extendService);
    }
    /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    innerUploadList(files, event, extendService) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            let uploadInfo = new GspFormUploadListEntity;
            uploadInfo.formId = this.getFinallyConfig('formId', extendService);
            uploadInfo.mode = this.getFinallyConfig('mode', extendService);
            /** @type {?} */
            let rootId = this.getFinallyConfig('rootId', extendService);
            uploadInfo.docInfoList = [];
            /** @type {?} */
            let readerObserable = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            (fileItem) => {
                /** @type {?} */
                let sub = new Observable((/**
                 * @param {?} obser
                 * @return {?}
                 */
                obser => {
                    /** @type {?} */
                    let reader = new FileReader();
                    // 暂不处理异常
                    reader.readAsBinaryString(fileItem.nativeFile);
                    reader.onload = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        let info = (/** @type {?} */ ({ 'fileName': '', 'fileContent': '' }));
                        info['fileName'] = fileItem.name;
                        info['fileContent'] = btoa(reader.result.toString());
                        // 如果data里有数据，并且属性是配置的扩展属性
                        if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                            // 
                            info['extProperty'] = event['data']['extProperty'];
                        }
                        uploadInfo.docInfoList.push(info);
                        obser.next();
                        obser.complete();
                    });
                }));
                readerObserable.push(sub);
            }));
            forkJoin(readerObserable).subscribe((/**
             * @param {?} datas
             * @return {?}
             */
            datas => {
                //     metadataId: string;
                //  fileName: string;
                this.uploadSer.uploadList(uploadInfo, rootId).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result.error) {
                        // 此接口一旦出现问题，所有附件都上传不通过
                        observer.error(this.errorInfoFormat(result.error, files));
                        observer.complete();
                        return;
                    }
                    // 合并返回结果到此处
                    result.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        /** @type {?} */
                        var findIndex = this.findFileIndexByFileName(files, item.fileName);
                        if (findIndex > -1) {
                            files[findIndex]['response'] = item;
                            files[findIndex]['progress']['status'] = UploadStatus.Done;
                        }
                    }));
                    observer.next({ type: 'done', files: files });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    observer.error(this.errorInfoFormat(error, files));
                    observer.complete();
                }), (/**
                 * @return {?}
                 */
                () => {
                    observer.complete();
                }));
            }));
        }));
    }
    ;
    /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    multipartUpload(file, event, extendService) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            // let fileInfo: FileInfo;
            /** @type {?} */
            let uuid = this.uuid();
            // let uuid = UUID.UUID();
            //reader.readAsBinaryString(selectedFile);
            //reader.onload = (e) => {
            /** @type {?} */
            let fileName = file.name;
            // fileInfo = {
            //   id: uuid,
            //   name: fileName,
            //   type: file.type,
            //   source: "",
            //   size: this.formatFileSize(file.size),
            //   fileSize: file.size,
            //   picListDisplayName: this.getMultipartDisplayName(fileName),
            //   queueListDisplayName: fileName,
            //   //content: reader.result.toString(),
            //   hasUploaded: false,
            //   mouseOn: false,
            //   selectd: false,
            //   isUploading: true,
            //   uploadResult: false,
            //   uploadProcess: 0,
            //   errorMessage: "",
            //   extensionDropListId: 0,
            //   extensionName: ""
            // }
            /** @type {?} */
            let chunkTotal = Math.ceil(file.size / this.bufferSize);
            // 标记当前附件总的分片数
            this.fileTotalChunk[uuid] = chunkTotal;
            /** @type {?} */
            let chunkIndex = 0;
            // 标记当前附件成功的分片数
            this.uploadedChunk[uuid] = 0;
            while (chunkIndex < chunkTotal) {
                /** @type {?} */
                let uploadInfo = new GspFormUploadEntity;
                uploadInfo.mode = OperatingModes.Temp;
                uploadInfo.formId = this.getFinallyConfig('formId', extendService);
                uploadInfo.rootId = this.getFinallyConfig('rootId', extendService);
                /** @type {?} */
                let docInfo = new GspFormDocInfo;
                docInfo.fileName = fileName;
                docInfo.metadataId = uuid;
                docInfo.total = chunkTotal;
                // 如果data里有数据，并且属性是配置的扩展属性
                if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                    docInfo['extProperty'] = (/** @type {?} */ (event['data']['extProperty']));
                }
                // 下一个文件大小
                /** @type {?} */
                let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, file.size);
                // File类型
                /** @type {?} */
                let fileData = file['nativeFile'].slice(chunkIndex * this.bufferSize, nextSize);
                // 读取文件
                /** @type {?} */
                let reader = new FileReader();
                reader.readAsBinaryString(fileData);
                /** @type {?} */
                let innerIndex = chunkIndex;
                reader.onload = (/**
                 * @return {?}
                 */
                () => {
                    // 附件上传
                    docInfo.fileContent = btoa(reader.result.toString());
                    docInfo.index = innerIndex;
                    uploadInfo.docInfo = docInfo;
                    /** @type {?} */
                    let info = uploadInfo;
                    this.uploadSer.uploadFile(info).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        if (result && result.error) {
                            // 分片上传有返回结果就是报错了
                            observer.error(this.errorInfoFormat(result.error, [file]));
                            observer.complete();
                            return;
                        }
                        else {
                            this.uploadedChunk[uuid]++;
                            if (this.uploadedChunk[docInfo.metadataId] == this.fileTotalChunk[docInfo.metadataId]) {
                                // 判断是所有分片都上传完成
                                file.progress = {
                                    status: UploadStatus.Done,
                                    data: {
                                        percentage: 100
                                    }
                                };
                                file.response = docInfo;
                                delete this.uploadedChunk[uuid];
                                delete this.fileTotalChunk[uuid];
                                observer.next({ type: 'done', files: [file] });
                                observer.complete();
                            }
                            else {
                                // 分片上传正常
                                /** @type {?} */
                                const percentage = Number.parseInt((this.uploadedChunk[uuid] / this.fileTotalChunk[uuid] * 100).toFixed(0));
                                // 判断未上传完成
                                file.progress = {
                                    status: UploadStatus.Uploading,
                                    data: {
                                        percentage: percentage
                                    }
                                };
                                observer.next({ type: 'uploading', files: [file] });
                            }
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        delete this.uploadedChunk[uuid];
                        delete this.fileTotalChunk[uuid];
                        observer.error(this.errorInfoFormat(error, [file]));
                        observer.complete();
                    }));
                });
                chunkIndex = chunkIndex + 1;
            }
        }));
    }
    /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    formatFileSize(size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    }
    /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    getMultipartDisplayName(fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            let headContent = fileName.substring(0, 2);
            /** @type {?} */
            let tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
            return headContent + "…" + tailContent;
        }
    }
    /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    errorInfoFormat(error, files) {
        // 
        /** @type {?} */
        let errorFiles = files.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return { id: item.id, name: item.name };
        }));
        if (error) {
            return Object.assign(error, { files: errorFiles }, { message: error['Message'] || error['extensionMessage'] || '上传失败', type: 'error' });
        }
        else {
            return Object.assign({ files: errorFiles }, { message: '上传失败', type: 'error' });
        }
    }
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    getFinallyConfig(key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        return this.extendData[key];
    }
    /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    findFileIndexByFileName(files, fileName) {
        // 按照肯定能找到文件来处理
        /** @type {?} */
        let findIndex = files.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        file => file.name == fileName));
        return findIndex;
    }
}
// 1024 * 1024
FfileuploadAdaptUnifileService.previous = 0;
FfileuploadAdaptUnifileService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FfileuploadAdaptUnifileService.ctorParameters = () => [
    { type: UploadService },
    { type: FFileUploadAdaptUnifileConfigService }
];
/** @nocollapse */ FfileuploadAdaptUnifileService.ngInjectableDef = i0.defineInjectable({ factory: function FfileuploadAdaptUnifileService_Factory() { return new FfileuploadAdaptUnifileService(i0.inject(i1.UploadService), i0.inject(i2.FFileUploadAdaptUnifileConfigService)); }, token: FfileuploadAdaptUnifileService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.previous;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.extendData;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.bufferSize;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadedChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.fileTotalChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadSer;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.configSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,