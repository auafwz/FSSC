/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 11:07:01
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-02 15:23:45
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Renderer2, ElementRef, Input, Injector, NgZone, HostBinding } from '@angular/core';
import { DatagridComponent, ValidatorMessagerService, DatagridFacadeService } from '@farris/ui-datagrid';
var DatagridBaseEditorDirective = /** @class */ (function () {
    function DatagridBaseEditorDirective(render, el, injector) {
        var _this = this;
        this.render = render;
        this.el = el;
        this.injector = injector;
        this.placeholder = '';
        // 组件高度
        this.height = '';
        this.options = {};
        /**
         * 是否正在向server 发送请求
         */
        this.pending = false;
        /**
         * 禁止事件冒泡
         */
        this.stopPropagation = true;
        /**
         * 默认焦点
         */
        this.focus = true;
        this.validators = [];
        this._editorClickEvent = null;
        this.cls = 'datagrid-editor';
        this.width = '100%';
        this.eventParams = (/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var rowData = null;
            /** @type {?} */
            var rowId = null;
            if (_this.dr) {
                rowData = _this.dr.rowData;
                rowId = _this.dr.rowId;
            }
            return {
                rowData: rowData,
                rowId: rowId,
                value: $event,
                form: _this.group,
                formControl: _this.formControl
            };
        });
        this.vms = this.injector.get(ValidatorMessagerService);
        this.dg = this.injector.get(DatagridComponent);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.ngZone = this.injector.get(NgZone);
    }
    Object.defineProperty(DatagridBaseEditorDirective.prototype, "dr", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dg.selectedRow.dr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.column && this.column.editor) {
            this.options = this.column.editor.options;
            this.validators = this.column.editor.validators || [];
            // 启用任意输入后，字符最大长度属性值验证
            // 当maxLength <= 0 时认为此属性无效
            if (this.options && this.options.nosearch !== undefined && this.options.nosearch) {
                if (this.options.maxLength !== undefined && this.options.maxLength <= 0) {
                    this.options.maxLength = undefined;
                }
            }
        }
        this.clickEvent = this.render.listen(this.el.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            _this.dg['focusElement'] = _this.inputElement;
        }));
        this.mouseDownEvent = this.render.listen(this.el.nativeElement, 'mousedown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this._editorClickEvent = e;
        }));
        this.mouseUpEvent = this.render.listen(this.el.nativeElement, 'mouseup', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this._editorClickEvent = null;
        }));
        // this.dblClickEvent = this.render.listen(this.el.nativeElement, 'dblclick', (e: MouseEvent) => {
        //     e.stopPropagation();
        //     e.preventDefault();
        // });
        if (this.group) {
            this.formControl = (/** @type {?} */ (this.group.controls[this.column.field]));
            if (this.formControl) {
                this.formControl.valueChanges.subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    var _a;
                    // console.log(val, this.formControl, this.group);
                    // 记录变更集
                    if (!_this.formControl.pristine) {
                        /** @type {?} */
                        var rowId = _this.dg.selectedRow ? _this.dg.selectedRow.id : '';
                        if (rowId) {
                            /** @type {?} */
                            var keyField = _this.dg.idField;
                            /** @type {?} */
                            var changeData = (_a = {}, _a[keyField] = rowId, _a[_this.column.field] = val, _a);
                            _this.dfs.appendChanges(changeData);
                        }
                    }
                    _this.setErrorMessage();
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setFocus();
        if (this['instance']) {
            this['instance'].inDatagrid = true;
        }
        this.setErrorMessage();
        this.render.listen(this.inputElement, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.ctrlKey || e.shiftKey) {
                e.stopPropagation();
            }
        }));
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.dblClickEvent) {
            this.dblClickEvent();
        }
        if (this.mouseDownEvent) {
            this.mouseDownEvent();
        }
        if (this.mouseUpEvent) {
            this.mouseUpEvent();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.setErrorMessage = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.formControl && this.formControl.invalid) {
            Object.keys(this.formControl.errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.errorMessage = _this.vms.getValidatorErrorMessage(key, _this.validators);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.setFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.focus) {
            return;
        }
        if (this.inputElement && this.dg.editMode === 'cell') {
            if (this.ngZone) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.dg.selectOnEditing) {
                            if (_this.inputElement.select) {
                                _this.inputElement.select();
                            }
                        }
                        else {
                            _this.inputElement.focus();
                        }
                        _this.dg['focusElement'] = _this.inputElement;
                    }));
                }));
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventParams($event));
        }
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.startPending = /**
     * @return {?}
     */
    function () {
        this.pending = true;
        this.dg.pending = true;
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.endPending = /**
     * @return {?}
     */
    function () {
        this.pending = false;
        this.dg.pending = false;
    };
    DatagridBaseEditorDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'datagrid-editor',
                },] }
    ];
    /** @nocollapse */
    DatagridBaseEditorDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridBaseEditorDirective.propDecorators = {
        placeholder: [{ type: Input }],
        height: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class',] }],
        width: [{ type: HostBinding, args: ['style.width',] }]
    };
    return DatagridBaseEditorDirective;
}());
export { DatagridBaseEditorDirective };
if (false) {
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.placeholder;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.height;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.controlId;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.type;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.options;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.group;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.column;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.formControl;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.inputElement;
    /**
     * 是否正在向server 发送请求
     * @type {?}
     */
    DatagridBaseEditorDirective.prototype.pending;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.errorMessage;
    /**
     * 禁止事件冒泡
     * @type {?}
     */
    DatagridBaseEditorDirective.prototype.stopPropagation;
    /**
     * 默认焦点
     * @type {?}
     */
    DatagridBaseEditorDirective.prototype.focus;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.clickEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.mouseDownEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.mouseUpEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.dblClickEvent;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.vms;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.dg;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.dfs;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.validators;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.ngZone;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype._editorClickEvent;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.cls;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.width;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.eventParams;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.render;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.el;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,