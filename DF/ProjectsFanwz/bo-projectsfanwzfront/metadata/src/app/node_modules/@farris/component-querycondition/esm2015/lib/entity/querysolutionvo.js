/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { QueryConditionConvert } from "./querycondition";
/**
 * 查询方案实体类
 */
export class QuerySolutionVo {
    constructor() {
        /**
         * 是否默认查询方案
         * 初始时，为false
         */
        this.isDefault = false;
        this.isChanged = false;
    }
}
if (false) {
    /**
     * 唯一性标识
     * @type {?}
     */
    QuerySolutionVo.prototype.id;
    /**
     * 所属ID，例如所属表单ID
     * @type {?}
     */
    QuerySolutionVo.prototype.belongId;
    /**
     * 查询方案编号
     * @type {?}
     */
    QuerySolutionVo.prototype.code;
    /**
     * 查询方案名称
     * @type {?}
     */
    QuerySolutionVo.prototype.name;
    /**
     * 查询条件
     * @type {?}
     */
    QuerySolutionVo.prototype.queryConditions;
    /**
     * 是否系统预置查询方案
     * @type {?}
     */
    QuerySolutionVo.prototype.isSystem;
    /**
     * 是否默认查询方案
     * 初始时，为false
     * @type {?}
     */
    QuerySolutionVo.prototype.isDefault;
    /** @type {?} */
    QuerySolutionVo.prototype.isChanged;
    /**
     * 类型： pre是上次查询
     * @type {?}
     */
    QuerySolutionVo.prototype.type;
}
/**
 * 查询方案实体类序列化与反序列化器
 */
export class QuerySolutionVoConvertor {
    /**
     * 序列化
     * @param {?} obj 查询方案实体
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let querySolutionVo = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["id"] = querySolutionVo.id;
        jobj["belongId"] = querySolutionVo.belongId;
        jobj["code"] = querySolutionVo.code;
        jobj["name"] = querySolutionVo.name;
        jobj["isSystem"] = querySolutionVo.isSystem;
        jobj["isDefault"] = querySolutionVo.isDefault;
        jobj["type"] = querySolutionVo.type;
        if (querySolutionVo.queryConditions && querySolutionVo.queryConditions.length > 0) {
            /** @type {?} */
            let jArray = [];
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            querySolutionVo.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                jArray.push(convertor.convertJObject(element));
            }));
            //向服务端发送数据时，发送query condition list的json string
            jobj["queryConditionString"] = JSON.stringify(jArray);
        }
        return jobj;
    }
    /**
     * 反序列化(初始化)
     * @param {?} jobj 查询方案序列化后的Object
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let querySolutionVo = new QuerySolutionVo();
        querySolutionVo.id = jobj["id"];
        querySolutionVo.code = jobj["code"];
        querySolutionVo.name = jobj["name"];
        querySolutionVo.belongId = jobj["belongId"];
        querySolutionVo.isSystem = jobj["isSystem"];
        querySolutionVo.isDefault = jobj["isDefault"];
        querySolutionVo.type = jobj.hasOwnProperty('type') ? jobj["type"] : '';
        querySolutionVo.queryConditions = new Array();
        //服务器端返回的query condition list实际是 json string
        /** @type {?} */
        const queryConditionString = jobj["queryConditionString"];
        if (queryConditionString) {
            /** @type {?} */
            const conditionJarry = JSON.parse(queryConditionString);
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            conditionJarry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                querySolutionVo.queryConditions.push(convertor.initFromJobject(element));
            }));
        }
        return querySolutionVo;
    }
    /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatFromJobject(jobj) {
        /** @type {?} */
        let queryConditions = new Array();
        /** @type {?} */
        let conditionJarry;
        if (typeof jobj == 'string') {
            conditionJarry = JSON.parse(jobj);
        }
        else {
            conditionJarry = jobj;
        }
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        conditionJarry.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.initFromJobject(element));
        }));
        return queryConditions;
    }
    /**
     * 存入缓存中
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatConvertJObject(jobj) {
        /** @type {?} */
        let queryConditions = [];
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        jobj.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.convertJObject(element));
        }));
        return queryConditions;
    }
}
//# sourceMappingURL=data:application/json;base64,