/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { KitField } from './KitField';
import { DataType } from './DataType';
/**
 * @abstract
 */
var /**
 * @abstract
 */
BillSchemaFieldBase = /** @class */ (function (_super) {
    tslib_1.__extends(BillSchemaFieldBase, _super);
    function BillSchemaFieldBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dataType = DataType.Unknow;
        _this.extendProperties = {};
        _this.length = 0;
        _this.precision = 0;
        _this.scale = 0;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    BillSchemaFieldBase.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.fieldType = null;
        this.dataType = DataType.Unknow;
        this.caption = null;
        this.extendProperties = {};
        this.length = 0;
        this.precision = 0;
        this.scale = 0;
    };
    /**
     * @return {?}
     */
    BillSchemaFieldBase.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "type", this.fieldType);
        if (this.dataType != DataType.String) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "data", this.dataType);
        }
        BpmnModelJsonHelper.SetAttributeValue(obj, "cap", this.caption);
        BpmnModelJsonHelper.SetAttributeValue(obj, "props", Object.assign({}, this.extendProperties));
        BpmnModelJsonHelper.SetAttributeValue(obj, "length", this.length);
        BpmnModelJsonHelper.SetAttributeValue(obj, "precision", this.precision);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BillSchemaFieldBase.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.fieldType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "type");
        /** @type {?} */
        var data = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "data");
        if (data == null) {
            this.dataType = DataType.String;
        }
        else {
            this.dataType = DataType[data];
        }
        this.dataType = DataType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "data")];
        this.caption = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "cap");
        this.extendProperties = BpmnModelJsonHelper.GetAttributeValue(obj, "props");
        this.length = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "length");
        this.precision = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "precision");
        this.scale = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "scale");
    };
    return BillSchemaFieldBase;
}(KitField));
/**
 * @abstract
 */
export { BillSchemaFieldBase };
if (false) {
    /** @type {?} */
    BillSchemaFieldBase.prototype.fieldType;
    /** @type {?} */
    BillSchemaFieldBase.prototype.dataType;
    /** @type {?} */
    BillSchemaFieldBase.prototype.caption;
    /** @type {?} */
    BillSchemaFieldBase.prototype.extendProperties;
    /** @type {?} */
    BillSchemaFieldBase.prototype.attachedField;
    /** @type {?} */
    BillSchemaFieldBase.prototype.length;
    /** @type {?} */
    BillSchemaFieldBase.prototype.precision;
    /** @type {?} */
    BillSchemaFieldBase.prototype.scale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYUZpZWxkQmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsU2NoZW1hRmllbGRCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7O0FBRXRDOzs7O0lBQWtELCtDQUFRO0lBQTFEO1FBQUEscUVBK0RDO1FBN0RHLGNBQVEsR0FBYSxRQUFRLENBQUMsTUFBTSxDQUFDO1FBRXJDLHNCQUFnQixHQUE4QixFQUFFLENBQUM7UUFFakQsWUFBTSxHQUFXLENBQUMsQ0FBQztRQUNuQixlQUFTLEdBQVcsQ0FBQyxDQUFDO1FBQ3RCLFdBQUssR0FBVyxDQUFDLENBQUM7O0lBdUR0QixDQUFDOzs7OztJQXJEYSxpREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBRTNCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7Ozs7SUFFTSxpREFBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFbkUsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbEMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDckU7UUFFRCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFFOUYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGdEQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDOztZQUN4RSxJQUFJLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztRQUNyRSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7U0FDbkM7YUFBTTtZQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFekUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU1RSxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsS0FBSyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQUFDLEFBL0RELENBQWtELFFBQVEsR0ErRHpEOzs7Ozs7O0lBOURHLHdDQUFrQjs7SUFDbEIsdUNBQXFDOztJQUNyQyxzQ0FBZ0I7O0lBQ2hCLCtDQUFpRDs7SUFDakQsNENBQW9DOztJQUNwQyxxQ0FBbUI7O0lBQ25CLHdDQUFzQjs7SUFDdEIsb0NBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uL0JwbW5Nb2RlbEpzb25IZWxwZXInO1xyXG5pbXBvcnQgeyBLaXRGaWVsZCB9IGZyb20gJy4vS2l0RmllbGQnO1xyXG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4vRGF0YVR5cGUnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJpbGxTY2hlbWFGaWVsZEJhc2UgZXh0ZW5kcyBLaXRGaWVsZCB7XHJcbiAgICBmaWVsZFR5cGU6IHN0cmluZztcclxuICAgIGRhdGFUeXBlOiBEYXRhVHlwZSA9IERhdGFUeXBlLlVua25vdztcclxuICAgIGNhcHRpb246IHN0cmluZztcclxuICAgIGV4dGVuZFByb3BlcnRpZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcclxuICAgIGF0dGFjaGVkRmllbGQ/OiBCaWxsU2NoZW1hRmllbGRCYXNlO1xyXG4gICAgbGVuZ3RoOiBudW1iZXIgPSAwO1xyXG4gICAgcHJlY2lzaW9uOiBudW1iZXIgPSAwO1xyXG4gICAgc2NhbGU6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmZpZWxkVHlwZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kYXRhVHlwZSA9IERhdGFUeXBlLlVua25vdztcclxuICAgICAgICB0aGlzLmNhcHRpb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kUHJvcGVydGllcyA9IHt9O1xyXG5cclxuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5wcmVjaXNpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ0eXBlXCIsIHRoaXMuZmllbGRUeXBlKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YVR5cGUgIT0gRGF0YVR5cGUuU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImRhdGFcIiwgdGhpcy5kYXRhVHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjYXBcIiwgdGhpcy5jYXB0aW9uKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicHJvcHNcIiwgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5leHRlbmRQcm9wZXJ0aWVzKSk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImxlbmd0aFwiLCB0aGlzLmxlbmd0aCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicHJlY2lzaW9uXCIsIHRoaXMucHJlY2lzaW9uKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzY2FsZVwiLCB0aGlzLnNjYWxlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5maWVsZFR5cGUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInR5cGVcIik7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImRhdGFcIik7XHJcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFUeXBlID0gRGF0YVR5cGUuU3RyaW5nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBEYXRhVHlwZVtkYXRhXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YVR5cGUgPSBEYXRhVHlwZVtCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImRhdGFcIildO1xyXG4gICAgICAgIHRoaXMuY2FwdGlvbiA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY2FwXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmV4dGVuZFByb3BlcnRpZXMgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJwcm9wc1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNOdW1iZXIob2JqLCBcImxlbmd0aFwiKTtcclxuICAgICAgICB0aGlzLnByZWNpc2lvbiA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc051bWJlcihvYmosIFwicHJlY2lzaW9uXCIpO1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNOdW1iZXIob2JqLCBcInNjYWxlXCIpO1xyXG4gICAgfVxyXG59Il19