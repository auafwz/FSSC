/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { KitField } from './KitField';
import { DataType } from './DataType';
/**
 * @abstract
 */
export class BillSchemaFieldBase extends KitField {
    constructor() {
        super(...arguments);
        this.dataType = DataType.Unknow;
        this.extendProperties = {};
        this.length = 0;
        this.precision = 0;
        this.scale = 0;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.fieldType = null;
        this.dataType = DataType.Unknow;
        this.caption = null;
        this.extendProperties = {};
        this.length = 0;
        this.precision = 0;
        this.scale = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "type", this.fieldType);
        if (this.dataType != DataType.String) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "data", this.dataType);
        }
        BpmnModelJsonHelper.SetAttributeValue(obj, "cap", this.caption);
        BpmnModelJsonHelper.SetAttributeValue(obj, "props", Object.assign({}, this.extendProperties));
        BpmnModelJsonHelper.SetAttributeValue(obj, "length", this.length);
        BpmnModelJsonHelper.SetAttributeValue(obj, "precision", this.precision);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.fieldType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "type");
        /** @type {?} */
        let data = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "data");
        if (data == null) {
            this.dataType = DataType.String;
        }
        else {
            this.dataType = DataType[data];
        }
        this.dataType = DataType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "data")];
        this.caption = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "cap");
        this.extendProperties = BpmnModelJsonHelper.GetAttributeValue(obj, "props");
        this.length = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "length");
        this.precision = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "precision");
        this.scale = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "scale");
    }
}
if (false) {
    /** @type {?} */
    BillSchemaFieldBase.prototype.fieldType;
    /** @type {?} */
    BillSchemaFieldBase.prototype.dataType;
    /** @type {?} */
    BillSchemaFieldBase.prototype.caption;
    /** @type {?} */
    BillSchemaFieldBase.prototype.extendProperties;
    /** @type {?} */
    BillSchemaFieldBase.prototype.attachedField;
    /** @type {?} */
    BillSchemaFieldBase.prototype.length;
    /** @type {?} */
    BillSchemaFieldBase.prototype.precision;
    /** @type {?} */
    BillSchemaFieldBase.prototype.scale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYUZpZWxkQmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsU2NoZW1hRmllbGRCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7Ozs7QUFFdEMsTUFBTSxPQUFnQixtQkFBb0IsU0FBUSxRQUFRO0lBQTFEOztRQUVJLGFBQVEsR0FBYSxRQUFRLENBQUMsTUFBTSxDQUFDO1FBRXJDLHFCQUFnQixHQUE4QixFQUFFLENBQUM7UUFFakQsV0FBTSxHQUFXLENBQUMsQ0FBQztRQUNuQixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBQ3RCLFVBQUssR0FBVyxDQUFDLENBQUM7SUF1RHRCLENBQUM7Ozs7O0lBckRhLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUUzQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDOzs7O0lBRU0sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRW5FLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2xDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBRTlGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzs7WUFDeEUsSUFBSSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7UUFDckUsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1NBQ25DO2FBQU07WUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsQztRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXpFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFNUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQztDQUNKOzs7SUE5REcsd0NBQWtCOztJQUNsQix1Q0FBcUM7O0lBQ3JDLHNDQUFnQjs7SUFDaEIsK0NBQWlEOztJQUNqRCw0Q0FBb0M7O0lBQ3BDLHFDQUFtQjs7SUFDbkIsd0NBQXNCOztJQUN0QixvQ0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcbmltcG9ydCB7IEtpdEZpZWxkIH0gZnJvbSAnLi9LaXRGaWVsZCc7XHJcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi9EYXRhVHlwZSc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmlsbFNjaGVtYUZpZWxkQmFzZSBleHRlbmRzIEtpdEZpZWxkIHtcclxuICAgIGZpZWxkVHlwZTogc3RyaW5nO1xyXG4gICAgZGF0YVR5cGU6IERhdGFUeXBlID0gRGF0YVR5cGUuVW5rbm93O1xyXG4gICAgY2FwdGlvbjogc3RyaW5nO1xyXG4gICAgZXh0ZW5kUHJvcGVydGllczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gICAgYXR0YWNoZWRGaWVsZD86IEJpbGxTY2hlbWFGaWVsZEJhc2U7XHJcbiAgICBsZW5ndGg6IG51bWJlciA9IDA7XHJcbiAgICBwcmVjaXNpb246IG51bWJlciA9IDA7XHJcbiAgICBzY2FsZTogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZmllbGRUeXBlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRhdGFUeXBlID0gRGF0YVR5cGUuVW5rbm93O1xyXG4gICAgICAgIHRoaXMuY2FwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5leHRlbmRQcm9wZXJ0aWVzID0ge307XHJcblxyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLnByZWNpc2lvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInR5cGVcIiwgdGhpcy5maWVsZFR5cGUpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kYXRhVHlwZSAhPSBEYXRhVHlwZS5TdHJpbmcpIHtcclxuICAgICAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZGF0YVwiLCB0aGlzLmRhdGFUeXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNhcFwiLCB0aGlzLmNhcHRpb24pO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJwcm9wc1wiLCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmV4dGVuZFByb3BlcnRpZXMpKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibGVuZ3RoXCIsIHRoaXMubGVuZ3RoKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJwcmVjaXNpb25cIiwgdGhpcy5wcmVjaXNpb24pO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlXCIsIHRoaXMuc2NhbGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmZpZWxkVHlwZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidHlwZVwiKTtcclxuICAgICAgICBsZXQgZGF0YSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiZGF0YVwiKTtcclxuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBEYXRhVHlwZS5TdHJpbmc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhVHlwZSA9IERhdGFUeXBlW2RhdGFdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kYXRhVHlwZSA9IERhdGFUeXBlW0JwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiZGF0YVwiKV07XHJcbiAgICAgICAgdGhpcy5jYXB0aW9uID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjYXBcIik7XHJcblxyXG4gICAgICAgIHRoaXMuZXh0ZW5kUHJvcGVydGllcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInByb3BzXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmxlbmd0aCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc051bWJlcihvYmosIFwibGVuZ3RoXCIpO1xyXG4gICAgICAgIHRoaXMucHJlY2lzaW9uID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTnVtYmVyKG9iaiwgXCJwcmVjaXNpb25cIik7XHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc051bWJlcihvYmosIFwic2NhbGVcIik7XHJcbiAgICB9XHJcbn0iXX0=