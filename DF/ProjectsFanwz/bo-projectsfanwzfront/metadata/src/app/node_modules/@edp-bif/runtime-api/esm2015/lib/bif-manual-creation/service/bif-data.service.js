/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, } from '@angular/common/http';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { Repository } from '@farris/devkit';
import { FormSettings } from '@edp-bif/common-api';
import { GeneralTextEntity } from '@edp-bif/common-api';
import { FormCreateResult, FormUpdateResult } from '../../ref';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { FormGetBillCreationProcessEntityExResult } from '../../entity/form-rest/FormGetBillCreationProcessEntityExResult';
import { FormBillCreationProcessExecutorResult } from '../../entity/form-rest/FormBillCreationProcessExecutorResult';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
export class BifDataService {
    /**
     * @param {?} httpClient
     * @param {?} repository
     */
    constructor(httpClient, repository) {
        this.httpClient = httpClient;
        this.getBillCreationProcessEntityExByIdUrl = "/api/runtime/aif/v1.0/manualcreationbill/getbillcreationprocessentityex";
        this.getBillCreationProcessEntityExByIdMethod = "GET";
        this.getBillCreationProcessEntityExUrl = "/api/runtime/aif/v1.0/manualcreationbill/getbillcreationprocessentityexes";
        this.getBillCreationProcessEntityExMethod = "POST";
        this.executeBillCreationProcessUrl = "/api/runtime/aif/v1.0/manualcreationbill/executebillcreationprocess";
        this.executeBillCreationProcessMethod = "POST";
        this.formCreateUrl = "/api/runtime/aif/v1.0/form/create";
        this.formCreateMethod = "POST";
        this.formUpdateUrl = "/api/runtime/aif/v1.0/form/update";
        this.formUpdateMethod = "POST";
        this.generalTextUrl = "/api/runtime/aif/v1.0/generaltext";
        this.generalTextMethod = "GET";
        this.repository = (/** @type {?} */ (repository));
    }
    /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByUpBillVoId4Push(upBillVoId) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.manualCreationMode = ManualCreationMode.Push;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.billCreationProcessEntityExes;
        })));
    }
    /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByDownBillVoId4Pull(downBillVoId) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.Pull;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.billCreationProcessEntityExes;
        })));
    }
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPush(upBillVoId, downBillVoId) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPush;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.billCreationProcessEntityExes;
        })));
    }
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPull(upBillVoId, downBillVoId) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPull;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.billCreationProcessEntityExes;
        })));
    }
    /**
     * 获取单据流生单流程实体
     * @param {?} processId
     * @return {?}
     */
    getSlimBillCreationProcessEntityExById(processId) {
        /** @type {?} */
        const getCreationRuleById$ = this.repository.proxy.request(`${this.getBillCreationProcessEntityExByIdUrl}/${processId}`, this.getBillCreationProcessEntityExByIdMethod, null);
        return getCreationRuleById$;
    }
    /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    getFormSettingsById(formSettingsId) {
        if (formSettingsId == null || formSettingsId.trim() == "") {
            throw "FormSettingsId为空";
        }
        /** @type {?} */
        const formSettings$ = this.repository.proxy.request(`${this.generalTextUrl}/${formSettingsId}`, this.generalTextMethod, null, { responseType: "text" });
        return formSettings$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const generateText = new GeneralTextEntity();
            generateText.LoadFromJson(data);
            /** @type {?} */
            const formSettings = new FormSettings();
            formSettings.LoadFromJson(generateText.text);
            return formSettings;
        })));
    }
    /**
     * 执行单据流生单流程
     * @param {?} args
     * @return {?}
     */
    executeBillCreationProcess(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const executeCreationRule$ = this.repository.proxy.request(this.executeBillCreationProcessUrl, this.executeBillCreationProcessMethod, null, {
            body: body,
            responseType: 'text'
        });
        return executeCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJson(data);
            return res;
        })));
    }
    /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    createEntityDatas(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const options = {
            body: body,
            responseType: 'text'
        };
        /** @type {?} */
        const create$ = this.repository.proxy.request(this.formCreateUrl, this.formCreateMethod, null, options);
        return create$.pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const result = new FormCreateResult();
            result.LoadFromJson(res);
            /** @type {?} */
            const entities = result.entityDataList.map((/**
             * @param {?} entityStr
             * @return {?}
             */
            (entityStr) => {
                /** @type {?} */
                const newEntity = this.repository.buildEntity(JSON.parse(entityStr));
                this.appendInitialData(newEntity, newEntity);
                return newEntity;
            }));
            /** @type {?} */
            let origin = this.repository.entityCollection.getAllEntities();
            if (origin == null || origin.length == 0) {
                this.repository.entityCollection.loadEntities(entities);
            }
            else {
                this.repository.entityCollection.addEntities(entities);
            }
            return of(result);
        })));
    }
    /**
     * 修改单据
     * @param {?} args 表单更新参数
     * @return {?}
     */
    updateEntityDatas(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        const update$ = this.repository.proxy.request(this.formUpdateUrl, this.formUpdateMethod, null, options);
        return update$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const res = new FormUpdateResult();
            res.LoadFromJson(data);
            return res;
        })));
    }
    /**
     * 查询单据生单流程扩展实体
     * @private
     * @param {?} args 查询参数
     * @return {?}
     */
    getSlimBillCreationProcessEntityExes(args) {
        if (args == null) {
            throw "args不可为空";
        }
        if (typeof args == "string") {
            if (args == "") {
                throw "args不可为空";
            }
            /** @type {?} */
            const temp = new FormGetBillCreationProcessEntityExArgs();
            temp.LoadFromJson(args);
            args = temp;
        }
        /** @type {?} */
        const getEntity$ = this.repository.proxy.request(this.getBillCreationProcessEntityExUrl, this.getBillCreationProcessEntityExMethod, null, { body: args.ConvertToJson(), responseType: "text" });
        return getEntity$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const result = new FormGetBillCreationProcessEntityExResult();
            result.LoadFromJson(data);
            return result;
        })));
    }
    /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    appendInitialData(entity, initialData) {
        /** @type {?} */
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}
BifDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifDataService.ctorParameters = () => [
    { type: HttpClient },
    { type: Repository }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExByIdUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExByIdMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.executeBillCreationProcessUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.executeBillCreationProcessMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formCreateUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formCreateMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formUpdateUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formUpdateMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,