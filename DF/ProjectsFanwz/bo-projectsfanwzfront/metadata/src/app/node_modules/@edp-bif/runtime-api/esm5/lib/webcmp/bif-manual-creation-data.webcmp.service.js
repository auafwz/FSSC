/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/bif-manual-creation-data.webcmp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { throwError } from 'rxjs';
import { MessagerService } from "@farris/ui-messager";
import { BindingData, ViewModel, FrameContext } from "@farris/devkit";
import { FormBillCreationProcessExecutorArgs } from '../entity/form-rest/FormBillCreationProcessExecutorArgs';
import { BifDataService } from '../bif-manual-creation/service/bif-data.service';
import { FormCreateArgs, FormUpdateArgs } from '../ref';
/**
 * 手工生单数据服务类
 */
var BifManualCreationDataWebCmpService = /** @class */ (function () {
    function BifManualCreationDataWebCmpService(dataService, bindingData, messagerService, viewModel, frameContext) {
        this.dataService = dataService;
        this.bindingData = bindingData;
        this.messagerService = messagerService;
        this.viewModel = viewModel;
        this.frameContext = frameContext;
    }
    /**
     * 根据生单流程Id查找指定的生单流程
     * @param processId 单据流生单流程 Id
     * @returns creationProcess 生单流程 @type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    /**
     * 根据生单流程Id查找指定的生单流程
     * @param {?} processId 单据流生单流程 Id
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    BifManualCreationDataWebCmpService.prototype.getSlimBillCreationProcessEntityExById = /**
     * 根据生单流程Id查找指定的生单流程
     * @param {?} processId 单据流生单流程 Id
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    function (processId) {
        return this.dataService.getSlimBillCreationProcessEntityExById(processId);
    };
    /**
     * 查询表单配置
     * @param formSettingsId 表单配置Id
     * @returns formSettings 表单配置 @type { Observable<FormSettings> }
     */
    /**
     * 查询表单配置
     * @param {?} formSettingsId 表单配置Id
     * @return {?} formSettings 表单配置 \@type { Observable<FormSettings> }
     */
    BifManualCreationDataWebCmpService.prototype.getFormSettingsById = /**
     * 查询表单配置
     * @param {?} formSettingsId 表单配置Id
     * @return {?} formSettings 表单配置 \@type { Observable<FormSettings> }
     */
    function (formSettingsId) {
        return this.dataService.getFormSettingsById(formSettingsId);
    };
    /**
     * 执行生单流程
     * @param entities 参与生单的来源单据列表
     * @param creationProcessId 单据流生单流程 Id
     * @param creationRuleId 生单规则Id（生单流程实体中记录）
     * @returns creationResult 生单结果 @type { Observable<FormBillCreationProcessExecutorResult> }
     */
    /**
     * 执行生单流程
     * @param {?} entities 参与生单的来源单据列表
     * @param {?} creationProcessId 单据流生单流程 Id
     * @param {?} creationRuleId 生单规则Id（生单流程实体中记录）
     * @param {?} targetDataIds
     * @return {?} creationResult 生单结果 \@type { Observable<FormBillCreationProcessExecutorResult> }
     */
    BifManualCreationDataWebCmpService.prototype.executeBillCreationProcess = /**
     * 执行生单流程
     * @param {?} entities 参与生单的来源单据列表
     * @param {?} creationProcessId 单据流生单流程 Id
     * @param {?} creationRuleId 生单规则Id（生单流程实体中记录）
     * @param {?} targetDataIds
     * @return {?} creationResult 生单结果 \@type { Observable<FormBillCreationProcessExecutorResult> }
     */
    function (entities, creationProcessId, creationRuleId, targetDataIds) {
        if (entities == null) {
            throw "entities is null.";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        //创建执行生单流程参数对象
        /** @type {?} */
        var args = new FormBillCreationProcessExecutorArgs();
        args.billCreationProcessId = creationProcessId;
        args.creationRuleId = creationRuleId;
        //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
        //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
        args.sourceVoEntityDatas = entities.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return JSON.stringify(item.toJSON(false, true)); }));
        //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
        args.targetVoDataIds = targetDataIds;
        return this.dataService.executeBillCreationProcess(args);
    };
    /**
     * 创建实体数据（RetrieveDefault至缓存）
     * @param formVoId 表单绑定VO Id
     * @param res 生单流程执行结果
     * @returns formCreateResult 创建实体数据返回结果 @type { Observable<FormCreateResult> }
     */
    /**
     * 创建实体数据（RetrieveDefault至缓存）
     * @param {?} formVoId 表单绑定VO Id
     * @param {?} res 生单流程执行结果
     * @return {?} formCreateResult 创建实体数据返回结果 \@type { Observable<FormCreateResult> }
     */
    BifManualCreationDataWebCmpService.prototype.createEntityDatas = /**
     * 创建实体数据（RetrieveDefault至缓存）
     * @param {?} formVoId 表单绑定VO Id
     * @param {?} res 生单流程执行结果
     * @return {?} formCreateResult 创建实体数据返回结果 \@type { Observable<FormCreateResult> }
     */
    function (formVoId, res) {
        /** @type {?} */
        var args = new FormCreateArgs();
        args.formVoId = formVoId;
        //获取生单流程执行结果
        args.rpcCreationRuleExecutorResult = res.creationRuleExecutorResult.ConvertToJson();
        //创建实体数据
        return this.dataService.createEntityDatas(args);
    };
    /**
     * 更新实体数据
     * @param res 生单流程执行结果
     * @returns formUpdateResult 更新实体数据返回结果 @type { Observable<FormUpdateResult> }
     */
    /**
     * 更新实体数据
     * @param {?} res 生单流程执行结果
     * @return {?} formUpdateResult 更新实体数据返回结果 \@type { Observable<FormUpdateResult> }
     */
    BifManualCreationDataWebCmpService.prototype.updateEntityDatas = /**
     * 更新实体数据
     * @param {?} res 生单流程执行结果
     * @return {?} formUpdateResult 更新实体数据返回结果 \@type { Observable<FormUpdateResult> }
     */
    function (res) {
        /** @type {?} */
        var args = new FormUpdateArgs();
        //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
        if (res.conditionResult.conditionExecutionResult == true) {
            //生单结果不为空
            if (res.creationRuleExecutorResult && res.creationRuleExecutorResult.mappingResults && res.creationRuleExecutorResult.mappingResults.length > 0) {
                args.rpcCreationRuleExecutorResult = res.creationRuleExecutorResult.ConvertToJson();
                return this.dataService.updateEntityDatas(args);
            }
            else {
                return throwError("creationRuleExecutorResult is empty!");
            }
        }
        else {
            return throwError("conditionExecutionResult is false!");
        }
    };
    BifManualCreationDataWebCmpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifManualCreationDataWebCmpService.ctorParameters = function () { return [
        { type: BifDataService },
        { type: BindingData },
        { type: MessagerService },
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: FrameContext, decorators: [{ type: Optional }] }
    ]; };
    return BifManualCreationDataWebCmpService;
}());
export { BifManualCreationDataWebCmpService };
if (false) {
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.dataService;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.bindingData;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.messagerService;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.viewModel;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,