/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/bif-manual-creation-source.webcmp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { MessagerService } from "@farris/ui-messager";
import { BindingData, ViewModel, FrameContext } from "@farris/devkit";
import { FormBillCreationProcessExecutorArgs } from '../entity/form-rest/FormBillCreationProcessExecutorArgs';
import { BifDataService } from '../bif-manual-creation/service/bif-data.service';
import { BifSourceUiService } from '../bif-manual-creation/service/bif-source-ui.service';
/**
 * 手工生单来源端服务类
 */
export class BifManualCreationSourceWebCmpService {
    /**
     * @param {?} sourceUiService
     * @param {?} dataService
     * @param {?} bindingData
     * @param {?} messagerService
     * @param {?} viewModel
     * @param {?} frameContext
     */
    constructor(sourceUiService, dataService, bindingData, messagerService, viewModel, frameContext) {
        this.sourceUiService = sourceUiService;
        this.dataService = dataService;
        this.bindingData = bindingData;
        this.messagerService = messagerService;
        this.viewModel = viewModel;
        this.frameContext = frameContext;
    }
    /**
     * 下推，根据来源VO Id打开生单流程选择器并执行选中的生单流程
     *
     * @param {?} sourceVoId 单据流来源视图对象 Id
     * @param {?} entities 参与生单的来源单据列表
     * @param {?} targetCommand 目标单据'单据流加载'命令的编号
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} customSelectorModuleUrl 自定义选择器url
     * @param {?=} extParams1 打开生单流程选择器弹窗扩展参数
     * @param {?=} extParams2 打开目标单据制单界面扩展参数
     * @return {?}
     */
    pushBySourceVoId(sourceVoId, entities, targetCommand, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1, extParams2) {
        if (entities == null) {
            throw "entities is null.";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams1 = extParams1 === "" || extParams1 == null ? undefined : extParams1;
        extParams2 = extParams2 === "" || extParams2 == null ? undefined : extParams2;
        //打开生单流程选择器
        this.sourceUiService.openBillCreationProcessSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1).subscribe((/**
         * @param {?} cp
         * @return {?}
         */
        (cp) => {
            //查询表单配置
            this.dataService.getFormSettingsById(cp.formSettingsId).subscribe((/**
             * @param {?} formSettings
             * @return {?}
             */
            (formSettings) => {
                //创建执行生单流程参数对象
                /** @type {?} */
                const args = new FormBillCreationProcessExecutorArgs();
                args.billCreationProcessId = cp.id;
                args.creationRuleId = cp.creationRuleId;
                //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
                //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
                args.sourceVoEntityDatas = entities.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => JSON.stringify(item.toJSON(false, true))));
                //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
                args.targetVoDataIds = [];
                //执行生单流程
                this.dataService.executeBillCreationProcess(args).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
                    if (result.conditionResult.conditionExecutionResult == true) {
                        //生单结果不为空
                        if (result.creationRuleExecutorResult && result.creationRuleExecutorResult.mappingResults && result.creationRuleExecutorResult.mappingResults.length > 0) {
                            //打开目标单据制单界面
                            this.sourceUiService.openTargetForm(formSettings, result, Object.assign({ action: targetCommand }, extParams2));
                        }
                        else {
                            this.messagerService.error("生单结果为空");
                        }
                    }
                    else {
                        //为false时可得到配置的错误提示信息
                        this.messagerService.error(result.conditionResult.message || "生单流程执行出错");
                    }
                }));
            }));
        }));
    }
    /**
     * 特定下推，根据来源VO Id和目标VO Id打开生单流程选择器并执行选中的生单流程
     *
     * @param {?} sourceVoId 单据流来源视图对象 Id
     * @param {?} targetVoId 单据流目标视图对象 Id
     * @param {?} entities 参与生单的来源单据列表
     * @param {?} targetCommand 目标单据'单据流加载'命令的编号
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} customSelectorModuleUrl 自定义选择器url
     * @param {?=} extParams1 打开生单流程选择器弹窗扩展参数
     * @param {?=} extParams2 打开目标单据制单界面扩展参数
     * @return {?}
     */
    pushBySourceVoIdAndTargetVoId(sourceVoId, targetVoId, entities, targetCommand, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1, extParams2) {
        if (entities == null) {
            throw "entities is null.";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams1 = extParams1 === "" || extParams1 == null ? undefined : extParams1;
        extParams2 = extParams2 === "" || extParams2 == null ? undefined : extParams2;
        //打开生单流程选择器
        this.sourceUiService.openBillCreationProcessSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1).subscribe((/**
         * @param {?} cp
         * @return {?}
         */
        (cp) => {
            //查询表单配置
            this.dataService.getFormSettingsById(cp.formSettingsId).subscribe((/**
             * @param {?} formSettings
             * @return {?}
             */
            (formSettings) => {
                //创建执行生单流程参数对象
                /** @type {?} */
                const args = new FormBillCreationProcessExecutorArgs();
                args.billCreationProcessId = cp.id;
                args.creationRuleId = cp.creationRuleId;
                //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
                //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
                args.sourceVoEntityDatas = entities.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => JSON.stringify(item.toJSON(false, true))));
                //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
                args.targetVoDataIds = [];
                //执行生单流程
                this.dataService.executeBillCreationProcess(args).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
                    if (result.conditionResult.conditionExecutionResult == true) {
                        //生单结果不为空
                        if (result.creationRuleExecutorResult && result.creationRuleExecutorResult.mappingResults && result.creationRuleExecutorResult.mappingResults.length > 0) {
                            //打开目标单据制单界面
                            this.sourceUiService.openTargetForm(formSettings, result, Object.assign({ action: targetCommand }, extParams2));
                        }
                        else {
                            this.messagerService.error("生单结果为空");
                        }
                    }
                    else {
                        //为false时可得到配置的错误提示信息
                        this.messagerService.error(result.conditionResult.message || "生单流程执行出错");
                    }
                }));
            }));
        }));
    }
    /**
     * 特定下推，根据生单流程ID执行选中的生单流程
     *
     * @param {?} processId 单据流生单流程 Id
     * @param {?} entities 参与生单的来源单据列表
     * @param {?} targetCommand 目标单据'单据流加载'命令的编号
     * @param {?=} extParams 打开目标单据制单界面扩展参数
     * @return {?}
     */
    pushByCreationProcessId(processId, entities, targetCommand, extParams) {
        if (entities == null) {
            throw "entities is null.";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        extParams = extParams === "" || extParams == null ? undefined : extParams;
        //查找生单流程
        this.dataService.getSlimBillCreationProcessEntityExById(processId).subscribe((/**
         * @param {?} cp
         * @return {?}
         */
        (cp) => {
            //查询表单配置
            this.dataService.getFormSettingsById(cp.formSettingsId).subscribe((/**
             * @param {?} formSettings
             * @return {?}
             */
            (formSettings) => {
                //创建执行生单流程参数对象
                /** @type {?} */
                const args = new FormBillCreationProcessExecutorArgs();
                args.billCreationProcessId = cp.id;
                args.creationRuleId = cp.creationRuleId;
                //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
                //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
                args.sourceVoEntityDatas = entities.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => JSON.stringify(item.toJSON(false, true))));
                //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
                args.targetVoDataIds = [];
                //执行生单流程
                this.dataService.executeBillCreationProcess(args).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
                    if (result.conditionResult.conditionExecutionResult == true) {
                        //生单结果不为空
                        if (result.creationRuleExecutorResult && result.creationRuleExecutorResult.mappingResults && result.creationRuleExecutorResult.mappingResults.length > 0) {
                            //打开目标单据制单界面
                            this.sourceUiService.openTargetForm(formSettings, result, Object.assign({ action: targetCommand }, extParams));
                        }
                        else {
                            this.messagerService.error("生单结果为空");
                        }
                    }
                    else {
                        //为false时可得到配置的错误提示信息
                        this.messagerService.error(result.conditionResult.message || "生单流程执行出错");
                    }
                }));
            }));
        }));
    }
    /**
     * 根据来源VO Id打开生单流程选择器选择生单流程
     * @param {?} sourceVoId 来源VO Id
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 模态框配置
     * @param {?=} customSelectorModuleUrl 自定义选择器Url
     * @param {?=} extParams 扩展参数
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    openBillCreationProcessSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams = extParams === "" || extParams == null ? undefined : extParams;
        return this.sourceUiService.openBillCreationProcessSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 根据来源VO Id和目标VO Id打开生单流程选择器选择生单流程
     * @param {?} sourceVoId 来源VO Id
     * @param {?} targetVoId 目标VO Id
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 模态框配置
     * @param {?=} customSelectorModuleUrl 自定义选择器Url
     * @param {?=} extParams 扩展参数
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    openBillCreationProcessSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams = extParams === "" || extParams == null ? undefined : extParams;
        //打开生单流程选择器
        return this.sourceUiService.openBillCreationProcessSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 打开目标单据制单界面
     * @param {?} formSettings 表单配置
     * @param {?} result 生单流程执行结果
     * @param {?} targetCommand 目标表单命令
     * @param {?} extParams 扩展参数
     * @return {?}
     */
    openTargetForm(formSettings, result, targetCommand, extParams) {
        this.sourceUiService.openTargetForm(formSettings, result, Object.assign({ action: targetCommand }, extParams));
    }
}
BifManualCreationSourceWebCmpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifManualCreationSourceWebCmpService.ctorParameters = () => [
    { type: BifSourceUiService },
    { type: BifDataService },
    { type: BindingData },
    { type: MessagerService },
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: FrameContext, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.sourceUiService;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.dataService;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.bindingData;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.messagerService;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.viewModel;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,