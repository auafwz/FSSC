/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/ConditionResult.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from "@edp-aif/common-api";
var ConditionResult = /** @class */ (function (_super) {
    tslib_1.__extends(ConditionResult, _super);
    function ConditionResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    ConditionResult.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.conditionExecutionResult = false;
        this.message = null;
    };
    /**
     * @return {?}
     */
    ConditionResult.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "conditionExecutionResult", this.conditionExecutionResult);
        BpmnModelJsonHelper.SetAttributeValue(obj, "message", this.message);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ConditionResult.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.conditionExecutionResult = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "conditionExecutionResult");
        this.message = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "message");
    };
    return ConditionResult;
}(JsonConvertableImpl));
export { ConditionResult };
if (false) {
    /** @type {?} */
    ConditionResult.prototype.conditionExecutionResult;
    /** @type {?} */
    ConditionResult.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uUmVzdWx0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L0NvbmRpdGlvblJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRTtJQUFxQywyQ0FBbUI7SUFBeEQ7O0lBdUJBLENBQUM7Ozs7O0lBbkJhLDZDQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQztRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDOzs7O0lBRU0sNkNBQW1COzs7SUFBMUI7O1lBQ1EsR0FBRyxHQUFPLGlCQUFNLG1CQUFtQixXQUFFO1FBQ3pDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0RyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sNENBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLHdCQUF3QixHQUFHLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBQ2hILElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTCxzQkFBQztBQUFELENBQUMsQUF2QkQsQ0FBcUMsbUJBQW1CLEdBdUJ2RDs7OztJQXRCRyxtREFBa0M7O0lBQ2xDLGtDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tIFwiQGVkcC1haWYvY29tbW9uLWFwaVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbmRpdGlvblJlc3VsdCBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgY29uZGl0aW9uRXhlY3V0aW9uUmVzdWx0OiBib29sZWFuO1xyXG4gICAgbWVzc2FnZTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkV4ZWN1dGlvblJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmo6IHt9ID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNvbmRpdGlvbkV4ZWN1dGlvblJlc3VsdFwiLCB0aGlzLmNvbmRpdGlvbkV4ZWN1dGlvblJlc3VsdCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWVzc2FnZVwiLCB0aGlzLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5jb25kaXRpb25FeGVjdXRpb25SZXN1bHQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNCb29sZWFuKG9iaiwgXCJjb25kaXRpb25FeGVjdXRpb25SZXN1bHRcIik7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJtZXNzYWdlXCIpO1xyXG4gICAgfVxyXG5cclxufSJdfQ==