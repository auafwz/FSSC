/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, } from '@angular/common/http';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { Repository } from '@farris/devkit';
import { FormSettings } from '@edp-bif/common-api';
import { GeneralTextEntity } from '@edp-bif/common-api';
import { FormCreateResult, FormUpdateResult } from '../../ref';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { FormGetBillCreationProcessEntityExResult } from '../../entity/form-rest/FormGetBillCreationProcessEntityExResult';
import { FormBillCreationProcessExecutorResult } from '../../entity/form-rest/FormBillCreationProcessExecutorResult';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
var BifDataService = /** @class */ (function () {
    function BifDataService(httpClient, repository) {
        this.httpClient = httpClient;
        this.getBillCreationProcessEntityExByIdUrl = "/api/runtime/aif/v1.0/manualcreationbill/getbillcreationprocessentityex";
        this.getBillCreationProcessEntityExByIdMethod = "GET";
        this.getBillCreationProcessEntityExUrl = "/api/runtime/aif/v1.0/manualcreationbill/getbillcreationprocessentityexes";
        this.getBillCreationProcessEntityExMethod = "POST";
        this.executeBillCreationProcessUrl = "/api/runtime/aif/v1.0/manualcreationbill/executebillcreationprocess";
        this.executeBillCreationProcessMethod = "POST";
        this.formCreateUrl = "/api/runtime/aif/v1.0/form/create";
        this.formCreateMethod = "POST";
        this.formUpdateUrl = "/api/runtime/aif/v1.0/form/update";
        this.formUpdateMethod = "POST";
        this.generalTextUrl = "/api/runtime/aif/v1.0/generaltext";
        this.generalTextMethod = "GET";
        this.repository = (/** @type {?} */ (repository));
    }
    /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByUpBillVoId4Push = /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (upBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.manualCreationMode = ManualCreationMode.Push;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })));
    };
    /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByDownBillVoId4Pull = /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (downBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.Pull;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })));
    };
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPush = /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (upBillVoId, downBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPush;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })));
    };
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPull = /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (upBillVoId, downBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPull;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })));
    };
    /**
     * 获取单据流生单流程实体
     */
    /**
     * 获取单据流生单流程实体
     * @param {?} processId
     * @return {?}
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExById = /**
     * 获取单据流生单流程实体
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        /** @type {?} */
        var getCreationRuleById$ = this.repository.proxy.request(this.getBillCreationProcessEntityExByIdUrl + "/" + processId, this.getBillCreationProcessEntityExByIdMethod, null);
        return getCreationRuleById$;
    };
    /**
     * 获取表单配置实体
     * @param formSettingsId
     */
    /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    BifDataService.prototype.getFormSettingsById = /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    function (formSettingsId) {
        if (formSettingsId == null || formSettingsId.trim() == "") {
            throw "FormSettingsId为空";
        }
        /** @type {?} */
        var formSettings$ = this.repository.proxy.request(this.generalTextUrl + "/" + formSettingsId, this.generalTextMethod, null, { responseType: "text" });
        return formSettings$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var generateText = new GeneralTextEntity();
            generateText.LoadFromJson(data);
            /** @type {?} */
            var formSettings = new FormSettings();
            formSettings.LoadFromJson(generateText.text);
            return formSettings;
        })));
    };
    /**
     * 执行单据流生单流程
     */
    /**
     * 执行单据流生单流程
     * @param {?} args
     * @return {?}
     */
    BifDataService.prototype.executeBillCreationProcess = /**
     * 执行单据流生单流程
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var executeCreationRule$ = this.repository.proxy.request(this.executeBillCreationProcessUrl, this.executeBillCreationProcessMethod, null, {
            body: body,
            responseType: 'text'
        });
        return executeCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJson(data);
            return res;
        })));
    };
    /**
     * 创建单据
     */
    /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    BifDataService.prototype.createEntityDatas = /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: 'text'
        };
        /** @type {?} */
        var create$ = this.repository.proxy.request(this.formCreateUrl, this.formCreateMethod, null, options);
        return create$.pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var result = new FormCreateResult();
            result.LoadFromJson(res);
            /** @type {?} */
            var entities = result.entityDataList.map((/**
             * @param {?} entityStr
             * @return {?}
             */
            function (entityStr) {
                /** @type {?} */
                var newEntity = _this.repository.buildEntity(JSON.parse(entityStr));
                _this.appendInitialData(newEntity, newEntity);
                return newEntity;
            }));
            /** @type {?} */
            var origin = _this.repository.entityCollection.getAllEntities();
            if (origin == null || origin.length == 0) {
                _this.repository.entityCollection.loadEntities(entities);
            }
            else {
                _this.repository.entityCollection.addEntities(entities);
            }
            return of(result);
        })));
    };
    /**
     * 修改单据
     * @param args 表单更新参数
     */
    /**
     * 修改单据
     * @param {?} args 表单更新参数
     * @return {?}
     */
    BifDataService.prototype.updateEntityDatas = /**
     * 修改单据
     * @param {?} args 表单更新参数
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        var update$ = this.repository.proxy.request(this.formUpdateUrl, this.formUpdateMethod, null, options);
        return update$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var res = new FormUpdateResult();
            res.LoadFromJson(data);
            return res;
        })));
    };
    /**
     * 查询单据生单流程扩展实体
     * @param args 查询参数
     */
    /**
     * 查询单据生单流程扩展实体
     * @private
     * @param {?} args 查询参数
     * @return {?}
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExes = /**
     * 查询单据生单流程扩展实体
     * @private
     * @param {?} args 查询参数
     * @return {?}
     */
    function (args) {
        if (args == null) {
            throw "args不可为空";
        }
        if (typeof args == "string") {
            if (args == "") {
                throw "args不可为空";
            }
            /** @type {?} */
            var temp = new FormGetBillCreationProcessEntityExArgs();
            temp.LoadFromJson(args);
            args = temp;
        }
        /** @type {?} */
        var getEntity$ = this.repository.proxy.request(this.getBillCreationProcessEntityExUrl, this.getBillCreationProcessEntityExMethod, null, { body: args.ConvertToJson(), responseType: "text" });
        return getEntity$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var result = new FormGetBillCreationProcessEntityExResult();
            result.LoadFromJson(data);
            return result;
        })));
    };
    /**
     * 参考farris/bef EntityUtil实现
     * @param entity
     * @param initialData
     */
    /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    BifDataService.prototype.appendInitialData = /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    function (entity, initialData) {
        /** @type {?} */
        var data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    };
    BifDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifDataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Repository }
    ]; };
    return BifDataService;
}());
export { BifDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExByIdUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExByIdMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.executeBillCreationProcessUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.executeBillCreationProcessMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formCreateUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formCreateMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formUpdateUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formUpdateMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlmLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpZi1tYW51YWwtY3JlYXRpb24vc2VydmljZS9iaWYtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxHQUFHLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2hELE9BQU8sRUFBRSxVQUFVLEVBQVUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHeEQsT0FBTyxFQUFrQixnQkFBZ0IsRUFBa0IsZ0JBQWdCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0YsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDdkgsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFFM0gsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sOERBQThELENBQUM7QUFDckgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFL0U7SUFxQkksd0JBQ1ksVUFBc0IsRUFDOUIsVUFBOEI7UUFEdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXBCakIsMENBQXFDLEdBQUcseUVBQXlFLENBQUM7UUFDbEgsNkNBQXdDLEdBQUcsS0FBSyxDQUFDO1FBRWpELHNDQUFpQyxHQUFXLDJFQUEyRSxDQUFDO1FBQ3hILHlDQUFvQyxHQUFXLE1BQU0sQ0FB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OERBQXVFOzs7OztJQUV2RSx1REFBK0g7Ozs7O0lBQy9ILDBEQUFtRTs7Ozs7SUFFbkUsdUNBQTZFOzs7OztJQUM3RSwwQ0FBbUQ7Ozs7O0lBRW5ELHVDQUE2RTs7Ozs7SUFDN0UsMENBQW1EOzs7OztJQUVuRCx3Q0FBOEU7Ozs7O0lBQzlFLDJDQUFtRDs7Ozs7SUFFbkQsb0NBQTBDOzs7OztJQUV0QyxvQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2JlZic7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnksIEVudGl0eSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuXHJcbmltcG9ydCB7IEZvcm1TZXR0aW5ncyB9IGZyb20gJ0BlZHAtYmlmL2NvbW1vbi1hcGknO1xyXG5pbXBvcnQgeyBHZW5lcmFsVGV4dEVudGl0eSB9IGZyb20gJ0BlZHAtYmlmL2NvbW1vbi1hcGknO1xyXG5pbXBvcnQgeyBJUnRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4IH0gZnJvbSAnQGVkcC1iaWYvY29tbW9uLWFwaSc7XHJcblxyXG5pbXBvcnQgeyBGb3JtQ3JlYXRlQXJncywgRm9ybUNyZWF0ZVJlc3VsdCwgRm9ybVVwZGF0ZUFyZ3MsIEZvcm1VcGRhdGVSZXN1bHQgfSBmcm9tICcuLi8uLi9yZWYnO1xyXG5cclxuaW1wb3J0IHsgRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeEFyZ3MgfSBmcm9tICcuLi8uLi9lbnRpdHkvZm9ybS1yZXN0L0Zvcm1HZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhBcmdzJztcclxuaW1wb3J0IHsgRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFJlc3VsdCB9IGZyb20gJy4uLy4uL2VudGl0eS9mb3JtLXJlc3QvRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFJlc3VsdCc7XHJcbmltcG9ydCB7IEZvcm1CaWxsQ3JlYXRpb25Qcm9jZXNzRXhlY3V0b3JBcmdzIH0gZnJvbSAnLi4vLi4vZW50aXR5L2Zvcm0tcmVzdC9Gb3JtQmlsbENyZWF0aW9uUHJvY2Vzc0V4ZWN1dG9yQXJncyc7XHJcbmltcG9ydCB7IEZvcm1CaWxsQ3JlYXRpb25Qcm9jZXNzRXhlY3V0b3JSZXN1bHQgfSBmcm9tICcuLi8uLi9lbnRpdHkvZm9ybS1yZXN0L0Zvcm1CaWxsQ3JlYXRpb25Qcm9jZXNzRXhlY3V0b3JSZXN1bHQnO1xyXG5pbXBvcnQgeyBNYW51YWxDcmVhdGlvbk1vZGUgfSBmcm9tICcuLi8uLi9lbnRpdHkvZm9ybS1yZXN0L01hbnVhbENyZWF0aW9uTW9kZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCaWZEYXRhU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeEJ5SWRVcmwgPSBcIi9hcGkvcnVudGltZS9haWYvdjEuMC9tYW51YWxjcmVhdGlvbmJpbGwvZ2V0YmlsbGNyZWF0aW9ucHJvY2Vzc2VudGl0eWV4XCI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeEJ5SWRNZXRob2QgPSBcIkdFVFwiO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4VXJsOiBzdHJpbmcgPSBcIi9hcGkvcnVudGltZS9haWYvdjEuMC9tYW51YWxjcmVhdGlvbmJpbGwvZ2V0YmlsbGNyZWF0aW9ucHJvY2Vzc2VudGl0eWV4ZXNcIjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4TWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4ZWN1dGVCaWxsQ3JlYXRpb25Qcm9jZXNzVXJsOiBzdHJpbmcgPSBcIi9hcGkvcnVudGltZS9haWYvdjEuMC9tYW51YWxjcmVhdGlvbmJpbGwvZXhlY3V0ZWJpbGxjcmVhdGlvbnByb2Nlc3NcIjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXhlY3V0ZUJpbGxDcmVhdGlvblByb2Nlc3NNZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9ybUNyZWF0ZVVybDogc3RyaW5nID0gXCIvYXBpL3J1bnRpbWUvYWlmL3YxLjAvZm9ybS9jcmVhdGVcIjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9ybUNyZWF0ZU1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmb3JtVXBkYXRlVXJsOiBzdHJpbmcgPSBcIi9hcGkvcnVudGltZS9haWYvdjEuMC9mb3JtL3VwZGF0ZVwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmb3JtVXBkYXRlTWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdlbmVyYWxUZXh0VXJsOiBzdHJpbmcgPSBcIi9hcGkvcnVudGltZS9haWYvdjEuMC9nZW5lcmFsdGV4dFwiO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmFsVGV4dE1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcclxuXHJcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PjtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcclxuICAgICAgICByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT4sXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkgPSByZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8RW50aXR5PjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruS4iua4uCBWTyBJZOiOt+WPluWNleaNrua1geeUn+WNlea1geeoi+WunuS9k+WIl+ihqOOAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cEJpbGxWb0lkIOS4iua4uCBWTyBJZOOAglxyXG4gICAgICogQHJldHVybiDnrKblkIjmnaHku7bnmoTljZXmja7mtYHnlJ/ljZXmtYHnqIvlrp7kvZPliJfooajjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFNsaW1CaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhlc0J5VXBCaWxsVm9JZDRQdXNoKHVwQmlsbFZvSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SVJ0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFtdPiB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IG5ldyBGb3JtR2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4QXJncygpO1xyXG4gICAgICAgIGFyZ3MudXBCaWxsVm9JZCA9IHVwQmlsbFZvSWQ7XHJcbiAgICAgICAgYXJncy5tYW51YWxDcmVhdGlvbk1vZGUgPSBNYW51YWxDcmVhdGlvbk1vZGUuUHVzaDtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4ZXMoYXJncykucGlwZShcclxuICAgICAgICAgICAgbWFwKFxyXG4gICAgICAgICAgICAgICAgKHJlczogRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuYmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4ZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5LiL5ri4IFZPIElk6I635Y+W5Y2V5o2u5rWB55Sf5Y2V5rWB56iL5a6e5L2T5YiX6KGo44CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRvd25CaWxsVm9JZCDkuIvmuLggVk8gSWTjgIJcclxuICAgICAqIEByZXR1cm4g56ym5ZCI5p2h5Lu255qE5Y2V5o2u5rWB55Sf5Y2V5rWB56iL5a6e5L2T5YiX6KGo44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4ZXNCeURvd25CaWxsVm9JZDRQdWxsKGRvd25CaWxsVm9JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxJUnRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4W10+IHtcclxuICAgICAgICBjb25zdCBhcmdzID0gbmV3IEZvcm1HZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhBcmdzKCk7XHJcbiAgICAgICAgYXJncy5kb3duQmlsbFZvSWQgPSBkb3duQmlsbFZvSWQ7XHJcbiAgICAgICAgYXJncy5tYW51YWxDcmVhdGlvbk1vZGUgPSBNYW51YWxDcmVhdGlvbk1vZGUuUHVsbDtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4ZXMoYXJncykucGlwZShcclxuICAgICAgICAgICAgbWFwKFxyXG4gICAgICAgICAgICAgICAgKHJlczogRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuYmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4ZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5LiK5ri4IFZPIElk5ZKM5LiL5ri4IFZPIElk6I635Y+W5Y2V5o2u5rWB55Sf5Y2V5rWB56iL5a6e5L2T5YiX6KGo44CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVwQmlsbFZvSWQg5LiK5ri4IFZPIElk44CCXHJcbiAgICAgKiBAcGFyYW0gZG93bkJpbGxWb0lkIOS4i+a4uCBWTyBJZOOAglxyXG4gICAgICogQHJldHVybiDnrKblkIjmnaHku7bnmoTljZXmja7mtYHnlJ/ljZXmtYHnqIvlrp7kvZPliJfooajjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFNsaW1CaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhlc0J5VXBCaWxsVm9JZEFuZERvd25CaWxsVm9JZDRTcGVjaWZpY1B1c2godXBCaWxsVm9JZDogc3RyaW5nLCBkb3duQmlsbFZvSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SVJ0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFtdPiB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IG5ldyBGb3JtR2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4QXJncygpO1xyXG4gICAgICAgIGFyZ3MudXBCaWxsVm9JZCA9IHVwQmlsbFZvSWQ7XHJcbiAgICAgICAgYXJncy5kb3duQmlsbFZvSWQgPSBkb3duQmlsbFZvSWQ7XHJcbiAgICAgICAgYXJncy5tYW51YWxDcmVhdGlvbk1vZGUgPSBNYW51YWxDcmVhdGlvbk1vZGUuU3BlY2lmaWNQdXNoO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFNsaW1CaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhlcyhhcmdzKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoXHJcbiAgICAgICAgICAgICAgICAocmVzOiBGb3JtR2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4UmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5iaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7kuIrmuLggVk8gSWTlkozkuIvmuLggVk8gSWTojrflj5bljZXmja7mtYHnlJ/ljZXmtYHnqIvlrp7kvZPliJfooajjgIJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXBCaWxsVm9JZCDkuIrmuLggVk8gSWTjgIJcclxuICAgICAqIEBwYXJhbSBkb3duQmlsbFZvSWQg5LiL5ri4IFZPIElk44CCXHJcbiAgICAgKiBAcmV0dXJuIOespuWQiOadoeS7tueahOWNleaNrua1geeUn+WNlea1geeoi+WunuS9k+WIl+ihqOOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeGVzQnlVcEJpbGxWb0lkQW5kRG93bkJpbGxWb0lkNFNwZWNpZmljUHVsbCh1cEJpbGxWb0lkOiBzdHJpbmcsIGRvd25CaWxsVm9JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxJUnRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4W10+IHtcclxuICAgICAgICBjb25zdCBhcmdzID0gbmV3IEZvcm1HZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhBcmdzKCk7XHJcbiAgICAgICAgYXJncy51cEJpbGxWb0lkID0gdXBCaWxsVm9JZDtcclxuICAgICAgICBhcmdzLmRvd25CaWxsVm9JZCA9IGRvd25CaWxsVm9JZDtcclxuICAgICAgICBhcmdzLm1hbnVhbENyZWF0aW9uTW9kZSA9IE1hbnVhbENyZWF0aW9uTW9kZS5TcGVjaWZpY1B1bGw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeGVzKGFyZ3MpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChcclxuICAgICAgICAgICAgICAgIChyZXM6IEZvcm1HZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeGVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWNleaNrua1geeUn+WNlea1geeoi+WunuS9k1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeEJ5SWQocHJvY2Vzc0lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPElSdFNsaW1CaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXg+IHtcclxuICAgICAgICBjb25zdCBnZXRDcmVhdGlvblJ1bGVCeUlkJDogT2JzZXJ2YWJsZTxJUnRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4PiA9IHRoaXMucmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KGAke3RoaXMuZ2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4QnlJZFVybH0vJHtwcm9jZXNzSWR9YCwgdGhpcy5nZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhCeUlkTWV0aG9kLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gZ2V0Q3JlYXRpb25SdWxlQnlJZCQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5booajljZXphY3nva7lrp7kvZNcclxuICAgICAqIEBwYXJhbSBmb3JtU2V0dGluZ3NJZCBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZvcm1TZXR0aW5nc0J5SWQoZm9ybVNldHRpbmdzSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Rm9ybVNldHRpbmdzPiB7XHJcbiAgICAgICAgaWYgKGZvcm1TZXR0aW5nc0lkID09IG51bGwgfHwgZm9ybVNldHRpbmdzSWQudHJpbSgpID09IFwiXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJGb3JtU2V0dGluZ3NJZOS4uuepulwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZm9ybVNldHRpbmdzJDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gdGhpcy5yZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QoYCR7dGhpcy5nZW5lcmFsVGV4dFVybH0vJHtmb3JtU2V0dGluZ3NJZH1gLCB0aGlzLmdlbmVyYWxUZXh0TWV0aG9kLCBudWxsLCB7IHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIgfSk7XHJcbiAgICAgICAgcmV0dXJuIGZvcm1TZXR0aW5ncyQucGlwZShcclxuICAgICAgICAgICAgbWFwKFxyXG4gICAgICAgICAgICAgICAgKGRhdGE6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlVGV4dCA9IG5ldyBHZW5lcmFsVGV4dEVudGl0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVGV4dC5Mb2FkRnJvbUpzb24oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybVNldHRpbmdzID0gbmV3IEZvcm1TZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1TZXR0aW5ncy5Mb2FkRnJvbUpzb24oZ2VuZXJhdGVUZXh0LnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtU2V0dGluZ3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omn6KGM5Y2V5o2u5rWB55Sf5Y2V5rWB56iLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleGVjdXRlQmlsbENyZWF0aW9uUHJvY2VzcyhhcmdzOiBGb3JtQmlsbENyZWF0aW9uUHJvY2Vzc0V4ZWN1dG9yQXJncyk6IE9ic2VydmFibGU8Rm9ybUJpbGxDcmVhdGlvblByb2Nlc3NFeGVjdXRvclJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBhcmdzLkNvbnZlcnRUb0pzb24oKTtcclxuICAgICAgICBjb25zdCBleGVjdXRlQ3JlYXRpb25SdWxlJCA9IHRoaXMucmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHRoaXMuZXhlY3V0ZUJpbGxDcmVhdGlvblByb2Nlc3NVcmwsIHRoaXMuZXhlY3V0ZUJpbGxDcmVhdGlvblByb2Nlc3NNZXRob2QsIG51bGwsIHtcclxuICAgICAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCdcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZXhlY3V0ZUNyZWF0aW9uUnVsZSQucGlwZShcclxuICAgICAgICAgICAgbWFwKFxyXG4gICAgICAgICAgICAgICAgKGRhdGE6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IG5ldyBGb3JtQmlsbENyZWF0aW9uUHJvY2Vzc0V4ZWN1dG9yUmVzdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLkxvYWRGcm9tSnNvbihkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuWNleaNrlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3JlYXRlRW50aXR5RGF0YXMoYXJnczogRm9ybUNyZWF0ZUFyZ3MpOiBPYnNlcnZhYmxlPEZvcm1DcmVhdGVSZXN1bHQ+IHtcclxuICAgICAgICBjb25zdCBib2R5ID0gYXJncy5Db252ZXJ0VG9Kc29uKCk7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZSQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IHRoaXMucmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHRoaXMuZm9ybUNyZWF0ZVVybCwgdGhpcy5mb3JtQ3JlYXRlTWV0aG9kLCBudWxsLCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlJC5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoXHJcbiAgICAgICAgICAgICAgICAocmVzOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRm9ybUNyZWF0ZVJlc3VsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5Mb2FkRnJvbUpzb24ocmVzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRpdGllczogRW50aXR5W10gPSByZXN1bHQuZW50aXR5RGF0YUxpc3QubWFwKChlbnRpdHlTdHI6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdFbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdHkoSlNPTi5wYXJzZShlbnRpdHlTdHIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRJbml0aWFsRGF0YShuZXdFbnRpdHksIG5ld0VudGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdFbnRpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9yaWdpbiA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEFsbEVudGl0aWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbiA9PSBudWxsIHx8IG9yaWdpbi5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5sb2FkRW50aXRpZXMoZW50aXRpZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0aWVzKGVudGl0aWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS/ruaUueWNleaNrlxyXG4gICAgICogQHBhcmFtIGFyZ3Mg6KGo5Y2V5pu05paw5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVFbnRpdHlEYXRhcyhhcmdzOiBGb3JtVXBkYXRlQXJncyk6IE9ic2VydmFibGU8Rm9ybVVwZGF0ZVJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBhcmdzLkNvbnZlcnRUb0pzb24oKTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6IFwidGV4dFwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB1cGRhdGUkID0gdGhpcy5yZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QodGhpcy5mb3JtVXBkYXRlVXJsLCB0aGlzLmZvcm1VcGRhdGVNZXRob2QsIG51bGwsIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiB1cGRhdGUkLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChcclxuICAgICAgICAgICAgICAgIChkYXRhOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXM6IEZvcm1VcGRhdGVSZXN1bHQgPSBuZXcgRm9ybVVwZGF0ZVJlc3VsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5Mb2FkRnJvbUpzb24oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6Xor6LljZXmja7nlJ/ljZXmtYHnqIvmianlsZXlrp7kvZNcclxuICAgICAqIEBwYXJhbSBhcmdzIOafpeivouWPguaVsFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFNsaW1CaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhlcyhhcmdzOiBGb3JtR2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4QXJncyB8IHN0cmluZyk6IE9ic2VydmFibGU8Rm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFJlc3VsdD4ge1xyXG4gICAgICAgIGlmIChhcmdzID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJhcmdz5LiN5Y+v5Li656m6XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgYXJncyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChhcmdzID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IFwiYXJnc+S4jeWPr+S4uuepulwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBuZXcgRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeEFyZ3MoKTtcclxuICAgICAgICAgICAgdGVtcC5Mb2FkRnJvbUpzb24oYXJncyk7XHJcbiAgICAgICAgICAgIGFyZ3MgPSB0ZW1wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBnZXRFbnRpdHkkID0gdGhpcy5yZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QodGhpcy5nZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhVcmwsIHRoaXMuZ2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4TWV0aG9kLCBudWxsLCB7IGJvZHk6IGFyZ3MuQ29udmVydFRvSnNvbigpLCByZXNwb25zZVR5cGU6IFwidGV4dFwiIH0pO1xyXG4gICAgICAgIHJldHVybiBnZXRFbnRpdHkkLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChcclxuICAgICAgICAgICAgICAgIChkYXRhOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeFJlc3VsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5Mb2FkRnJvbUpzb24oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICog5Y+C6ICDZmFycmlzL2JlZiBFbnRpdHlVdGls5a6e546wXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5IFxyXG4gICAgICogQHBhcmFtIGluaXRpYWxEYXRhIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwcGVuZEluaXRpYWxEYXRhKGVudGl0eSwgaW5pdGlhbERhdGEpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbERhdGEpO1xyXG4gICAgICAgIGRlbGV0ZSBkYXRhLmlkO1xyXG4gICAgICAgIGRlbGV0ZSBkYXRhLnBhcmVudElEO1xyXG4gICAgICAgIGVudGl0eVsnaW5pdGlhbERhdGEnXSA9IGRhdGE7XHJcbiAgICB9XHJcbn0iXX0=