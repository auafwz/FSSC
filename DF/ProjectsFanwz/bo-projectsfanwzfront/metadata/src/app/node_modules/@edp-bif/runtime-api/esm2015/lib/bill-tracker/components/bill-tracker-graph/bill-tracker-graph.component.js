/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/bill-tracker-graph/bill-tracker-graph.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Output, EventEmitter, Inject, LOCALE_ID, Input, ViewContainerRef, Injector, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { Graph } from '../../mxgraph-ext/Graph';
import { mxEvent, mxGraphHandler, mxEventObject, mxGraphSelectionModel, mxConstants, mxImage, mxClient, mxGuide, mxPolyline, mxLayoutManager, mxConnectionHandler, mxEllipse, mxHandle, mxVertexHandler, mxPoint, mxPrintPreview } from "../../../ref/mxgraph";
import { BillTrackerArgs } from '../../config/bill-tracker-args';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { BillTrackerDirection } from '../../config/bill-tracker-direction';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerConstant } from '../../config/bill-tracker-constant';
import { RevertCompactTreeLayout } from '../../mxgraph-ext/RevertCompactTreeLayout';
import { CompactTreeLayout } from '../../mxgraph-ext/CompactTreeLayout';
import { EntryCellData } from '../../../entity/tracking/cell-data/EntryCellData';
import { UpCellData } from '../../../entity/tracking/cell-data/UpCellData';
import { DownCellData } from '../../../entity/tracking/cell-data/DownCellData';
import { BillTrackingSettings } from '@edp-bif/common-api';
import { NotifyService } from '@farris/ui-notify';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { CellOverlay } from '../../mxgraph-ext/CellOverlay';
import { CellOverlayState } from '../../mxgraph-ext/CellOverlayState';
import { Events } from '../../mxgraph-ext/Events';
import { billTrackerCellCss } from '../../config/bill-tracker-cell-css';
import { addCustomCSS } from '../../utils/addCustomCSS';
import { Outline } from '../../mxgraph-ext/Outline';
// 在head中添加节点样式
addCustomCSS(billTrackerCellCss);
export class BillTrackerGraphComponent {
    /**
     * @param {?} args
     * @param {?} localeId
     * @param {?} dataService
     * @param {?} notify
     * @param {?} messager
     * @param {?} loading
     * @param {?} modal
     * @param {?} vcr
     * @param {?} inj
     * @param {?} cfr
     * @param {?} cdr
     */
    constructor(args, localeId, dataService, notify, messager, loading, modal, vcr, inj, cfr, cdr) {
        this.dataService = dataService;
        this.notify = notify;
        this.messager = messager;
        this.loading = loading;
        this.modal = modal;
        this.vcr = vcr;
        this.inj = inj;
        this.cfr = cfr;
        this.cdr = cdr;
        this.selectEventEmitter = new EventEmitter();
        this.stateChangeEventEmitter = new EventEmitter();
        this.hspace = 80;
        this.vspace = 28;
        this.defaultWidth = 250;
        this.defaultHeight = 138;
        this.nodeWidth = this.defaultWidth;
        this.nodeHeight = this.defaultHeight;
        this.defaultNonEntryImage = (!mxClient.IS_SVG) ? BillTrackerConstant.IMAGE_PATH + '/non-entry-bill.png' : BillTrackerConstant.IMAGE_PATH + '/non-entry-bill.svg';
        this.defaultEntryImage = (!mxClient.IS_SVG) ? BillTrackerConstant.IMAGE_PATH + '/entry-bill.png' : BillTrackerConstant.IMAGE_PATH + '/entry-bill.svg';
        this.defaultOverlayWidth = 26;
        this.defaultOverlayHeight = 26;
        this.overlayWidth = this.defaultOverlayWidth;
        this.overlayHeight = this.defaultOverlayHeight;
        this.defaultUpSearchImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-plus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultDownSearchImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-plus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultUpFolderImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-minus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultDownFolderImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-minus.svg', this.overlayWidth, this.overlayHeight);
        this.upSearchImage = this.defaultUpSearchImage;
        this.downSearchImage = this.defaultDownSearchImage;
        this.upFolderImage = this.defaultUpFolderImage;
        this.downFolderImage = this.defaultDownFolderImage;
        this.upSearchOffset = new mxPoint(-50, 0);
        this.downSearchOffset = new mxPoint(50, 0);
        /**
         * 正在加载中的单据节点请求数
         */
        this.numCellsAddingReq = 0;
        this.localePipe = new BillTrackerLocalePipe(localeId);
        this.dataInfoService = new BillTrackerDataInfoService();
        this.billTrackerArgs = args;
        /** @type {?} */
        const graphOptions = this.billTrackerArgs.graphOptions;
        this.graphOptions = graphOptions;
        /** @type {?} */
        const gridOptions = this.billTrackerArgs.gridOptions;
        this.gridOptions = gridOptions;
        this.upSearchImage = graphOptions && graphOptions.upSearchImage ? new mxImage(graphOptions.upSearchImage, this.overlayWidth, this.overlayHeight) : this.upSearchImage;
        this.downSearchImage = graphOptions && graphOptions.downSearchImage ? new mxImage(graphOptions.downSearchImage, this.overlayWidth, this.overlayHeight) : this.downSearchImage;
        this.upFolderImage = graphOptions && graphOptions.upFolderImage ? new mxImage(graphOptions.upFolderImage, this.overlayWidth, this.overlayHeight) : this.upFolderImage;
        this.downFolderImage = graphOptions && graphOptions.downFolderImage ? new mxImage(graphOptions.downFolderImage, this.overlayWidth, this.overlayHeight) : this.downFolderImage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.graph = this.createGraph();
        this.createLayout(this.graph);
        this.layoutManager = new mxLayoutManager(this.graph);
        this.outline = new Outline(this.graph, this.mxOutlineContainer.nativeElement);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?=} sizeDidChange
     * @return {?}
     */
    refresh(sizeDidChange = true) {
        if (sizeDidChange && this.graph != null) {
            this.graph.sizeDidChange();
        }
    }
    /**
     * @return {?}
     */
    paint() {
        this.paintGraph(this.graph);
    }
    /**
     * @param {?} modalRef
     * @return {?}
     */
    setModalRef(modalRef) {
        this.modalRef = modalRef;
        if (this.modalRef != null) {
            this.modalRef.dialog.instance.closed.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                this.graph && this.graph.destroy();
            }));
            // todo: 临时解决弹窗模式下先刷新出入口节点问题
            /** @type {?} */
            let flag = 0;
            this.modalRef.dialog.instance.resized.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                if (flag >= 2) {
                    this.refresh();
                }
                flag++;
            }));
        }
    }
    /**
     * @return {?}
     */
    createGraph() {
        //启用mxGuide
        mxGraphHandler.prototype.guidesEnabled = true;
        //禁用mxgraph容器内上下文菜单
        mxEvent.disableContextMenu(this.mxContainerER.nativeElement);
        mxGraphHandler.prototype.scrollOnMove = false;
        mxGraphHandler.prototype.scaleGrid = true;
        //修改节点选中后处理器图片及填充色
        mxConstants.HANDLE_FILLCOLOR = '#29b6f2';
        mxHandle.prototype.createShape = (/**
         * @param {?} html
         * @return {?}
         */
        function (html) {
            /** @type {?} */
            const bounds = new mxEllipse(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);
            return new mxEllipse(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);
        });
        mxVertexHandler.prototype.handleImage = (!mxClient.IS_SVG) ? new mxImage(BillTrackerConstant.IMAGE_PATH + '/handle-main.png', mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE) : Graph.createSvgImage(18, 18, '<circle cx="9" cy="9" r="3" stroke="#fff" fill="' + Graph.handleFill + '" stroke-width="1"/>');
        mxConstants.DEFAULT_VALID_COLOR = '#FFFFFF';
        mxConstants.HIGHLIGHT_STROKEWIDTH = 1;
        //修改mxGuide默认配置
        mxConstants.GUIDE_COLOR = '#0088cf';
        mxGuide.prototype.createGuideShape = (/**
         * @param {?} horizontal
         * @return {?}
         */
        (horizontal) => new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH));
        //设置节点选中线框宽度
        mxConstants.VERTEX_SELECTION_STROKEWIDTH = 1;
        mxConstants.VERTEX_SELECTION_COLOR = '#3E8DFF';
        mxConstants.VERTEX_SELECTION_DASHED = false;
        //修改线宽
        mxConnectionHandler.prototype.getEdgeWidth = (/**
         * @param {?} valid
         * @return {?}
         */
        (valid) => 1);
        mxConstants.VALID_COLOR = '#00CD66';
        //创建mxGraph
        /** @type {?} */
        const graph = new Graph(this.mxContainerER.nativeElement, undefined, undefined, undefined);
        graph.graphOptions = this.graphOptions;
        graph.gridOptions = this.gridOptions;
        //添加自定义监听器
        this.addListener(graph);
        return graph;
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    createLayout(graph) {
        /** @type {?} */
        const upLayout = new RevertCompactTreeLayout(graph, true);
        upLayout.levelDistance = this.hspace;
        upLayout.edgeRouting = false;
        upLayout.resetEdges = false;
        this.upLayout = upLayout;
        /** @type {?} */
        const downLayout = new CompactTreeLayout(graph, true);
        downLayout.levelDistance = this.hspace;
        downLayout.edgeRouting = false;
        downLayout.resetEdges = true;
        this.downLayout = downLayout;
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    addListener(graph) {
        /** @type {?} */
        const autoAdjustHandler = (/**
         * @return {?}
         */
        () => {
            window.setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.graph != null) {
                    this.refresh();
                }
            }), 0);
        });
        mxEvent.addListener(window, 'resize', autoAdjustHandler);
        /** @type {?} */
        const wheelResizeHandler = (/**
         * @param {?} evt
         * @param {?} up
         * @return {?}
         */
        (evt, up) => {
            // window下Ctrl按下，Mac下Command按下
            if (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) {
                if (up) {
                    this.zoomIn();
                }
                else {
                    this.zoomOut();
                }
                mxEvent.consume(evt);
                return false;
            }
        });
        mxEvent.addMouseWheelListener(wheelResizeHandler, this.mxContainerER.nativeElement);
        graph.getSelectionModel().addListener(mxEvent.CHANGE, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            if (!(sender instanceof mxGraphSelectionModel)) {
                return;
            }
            /** @type {?} */
            let selectionModel = sender;
            //若未选中节点或者选中节点数不为1
            if (selectionModel.cells == null || selectionModel.cells.length != 1) {
                this.selectEventEmitter.emit(null);
                return;
            }
            /** @type {?} */
            let selectedCell = selectionModel.cells[0];
            //选中的是边
            if (selectedCell.edge || !selectedCell.vertex) {
                return;
            }
            this.selectEventEmitter.emit(selectedCell);
        }));
        graph.addListener(Events.CLICK_FIRST_SUMMARY, (/**
         * @param {?} serder
         * @param {?} evt
         * @return {?}
         */
        (serder, evt) => {
            /** @type {?} */
            const cell = evt.getProperty("cell");
            this.stateChangeEventEmitter.emit({
                type: Events.CLICK_FIRST_SUMMARY,
                data: cell
            });
        }));
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    paintGraph(graph) {
        graph.getModel().beginUpdate();
        this.entry = this.paintEntry(graph);
        this.afterPaintGraph(this.graph, this.entry);
        graph.getModel().endUpdate();
    }
    /**
     * @param {?} graph
     * @param {?} entry
     * @return {?}
     */
    afterPaintGraph(graph, entry) {
        if (entry == null) {
            return;
        }
        // 默认选中入口节点
        this.billTrackerArgs.gridOptions.showEntryData && graph.setSelectionCell(this.entry);
        // 默认展示一层？
        /** @type {?} */
        const canTrackingResult = this.billTrackerArgs.canTrackingResult;
        if (this.billTrackerArgs.graphOptions.showDownBills == true) {
            canTrackingResult.canDownTracking && this.entry.downCellOverlay && this.entry.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
        }
        if (this.billTrackerArgs.graphOptions.showUpBills == true) {
            canTrackingResult.canUpTracking && this.entry.upCellOverlay && this.entry.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
        }
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    paintEntry(graph) {
        /** @type {?} */
        let entry = null;
        if (this.billTrackerArgs == null || this.billTrackerArgs.canTrackingResult == null) {
            return entry;
        }
        /** @type {?} */
        const canTrackingResult = this.billTrackerArgs.canTrackingResult;
        /** @type {?} */
        const info = this.dataService.buildEntryBillInfo(canTrackingResult);
        /** @type {?} */
        const dataInfo = info.billDataInfos[0];
        /** @type {?} */
        let bts = new BillTrackingSettings();
        bts.LoadFromJson(canTrackingResult.billTrackingSettings);
        /** @type {?} */
        const parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let x0 = 0;
            /** @type {?} */
            let y0 = 0;
            /** @type {?} */
            let bts = new BillTrackingSettings();
            if (info && info.billTrackingSettings) {
                bts.LoadFromJson(info.billTrackingSettings);
            }
            /** @type {?} */
            let customStyle = "";
            entry = graph.insertBillCell(parent, null, dataInfo, info, true, x0, y0, this.nodeWidth, this.nodeHeight, `billNode;billNodeEntry;${customStyle}`);
            /** @type {?} */
            let geometry = graph.getModel().getGeometry(entry);
            /** @type {?} */
            let size = graph.getPreferredSizeForCell(entry);
            this.entryCellData = new EntryCellData();
            this.setCellData(this.entryCellData, entry);
            this.entryCellData.canTrackingResult = canTrackingResult;
            entry.data = this.entryCellData;
            // 添加上查下查按钮
            if (canTrackingResult.canDownTracking) {
                /** @type {?} */
                const overlay = this.addDownOverlay(graph, entry, true);
                entry.downCellOverlay = overlay;
            }
            if (canTrackingResult.canUpTracking) {
                /** @type {?} */
                const overlay = this.addUpOverlay(graph, entry, true);
                entry.upCellOverlay = overlay;
            }
            this.upParent = parent.clone();
            this.downParent = parent.clone();
            graph.addCells([this.upParent, this.downParent], parent);
        }
        finally {
            graph.getModel().endUpdate();
        }
        return entry;
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    addUpOverlay(graph, cell, resetView = false) {
        /** @type {?} */
        let upSearch = new CellOverlay(this.upSearchImage, this.localePipe.transform("upSearch"), mxConstants.ALIGN_LEFT, mxConstants.ALIGN_MIDDLE, this.upSearchOffset, "hand");
        upSearch.state = CellOverlayState.Search;
        /** @type {?} */
        const upSearchHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            graph.getModel().beginUpdate();
            this.addUpAssoCell(graph, cell, resetView);
            upSearch.removeListener(upSearchHandler);
            upSearch.tooltip = this.localePipe.transform("folder");
            upSearch.image = this.upFolderImage;
            upSearch.state = CellOverlayState.Fold;
            upSearch.addListener(mxEvent.CLICK, upFolderHandler);
            graph.removeCellOverlay(cell, upSearch);
            graph.addCellOverlay(cell, upSearch);
            graph.getModel().endUpdate();
        });
        /** @type {?} */
        const upFolderHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            graph.getModel().beginUpdate();
            this.removeAssoCell(graph, cell, BillTrackerDirection.Up);
            upSearch.removeListener(upFolderHandler);
            upSearch.tooltip = this.localePipe.transform("upSearch");
            upSearch.image = this.upSearchImage;
            upSearch.state = CellOverlayState.Search;
            upSearch.addListener(mxEvent.CLICK, upSearchHandler);
            graph.removeCellOverlay(cell, upSearch);
            graph.addCellOverlay(cell, upSearch);
            graph.model.endUpdate();
        });
        upSearch.addListener(mxEvent.CLICK, upSearchHandler);
        graph.removeCellOverlay(cell, upSearch);
        graph.addCellOverlay(cell, upSearch);
        return upSearch;
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    addDownOverlay(graph, cell, resetView = false) {
        /** @type {?} */
        let downSearch = new CellOverlay(this.downSearchImage, this.localePipe.transform("downSearch"), mxConstants.ALIGN_RIGHT, mxConstants.ALIGN_MIDDLE, this.downSearchOffset, "hand");
        downSearch.state = CellOverlayState.Search;
        /** @type {?} */
        const downSearchHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            graph.getModel().beginUpdate();
            this.addDownAssoCell(graph, cell, resetView);
            downSearch.image = this.downFolderImage;
            downSearch.tooltip = this.localePipe.transform("folder");
            downSearch.state = CellOverlayState.Fold;
            downSearch.removeListener(downSearchHandler);
            downSearch.addListener(mxEvent.CLICK, downFolderHandler);
            graph.removeCellOverlay(cell, downSearch);
            graph.addCellOverlay(cell, downSearch);
            // graph.refresh(cell);
            graph.getModel().endUpdate();
        });
        /** @type {?} */
        const downFolderHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            graph.getModel().beginUpdate();
            this.removeAssoCell(graph, cell, BillTrackerDirection.Down);
            downSearch.image = this.downSearchImage;
            downSearch.tooltip = this.localePipe.transform("downSearch");
            downSearch.state = CellOverlayState.Search;
            downSearch.removeListener(downFolderHandler);
            downSearch.addListener(mxEvent.CLICK, downSearchHandler);
            graph.removeCellOverlay(cell, downSearch);
            graph.addCellOverlay(cell, downSearch);
            // graph.refresh(cell);
            graph.getModel().endUpdate();
        });
        downSearch.addListener(mxEvent.CLICK, downSearchHandler);
        graph.removeCellOverlay(cell, downSearch);
        graph.addCellOverlay(cell, downSearch);
        return downSearch;
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    addUpAssoCell(graph, cell, resetView = false) {
        graph.getModel().beginUpdate();
        /** @type {?} */
        const args = this.dataService.buildGetUpBillsInfoArgs(cell);
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.numCellsAddingReq++;
        this.dataService.getUpBillsInfo(args).subscribe((/**
         * @param {?} infos
         * @return {?}
         */
        (infos) => {
            /** @type {?} */
            let parent = graph.getDefaultParent();
            /** @type {?} */
            let newCells = [];
            // graph.getModel().beginUpdate();
            try {
                for (let info of infos) {
                    for (let dataInfo of info.billDataInfos) {
                        /** @type {?} */
                        let billCell = null;
                        /** @type {?} */
                        let bts = new BillTrackingSettings();
                        if (info && info.billTrackingSettings) {
                            bts.LoadFromJson(info.billTrackingSettings);
                        }
                        /** @type {?} */
                        let customStyle = "";
                        billCell = graph.insertBillCell(this.upParent, null, dataInfo, info, false, cell.geometry.x - this.hspace, cell.geometry.y, this.nodeWidth, this.nodeHeight, `billNode;${customStyle}`);
                        newCells.push(billCell);
                    }
                }
                this.calCellsPosition(graph, cell, newCells, BillTrackerDirection.Up);
                for (let nc of newCells) {
                    if (nc.billDataInfo.canContinueTracking) {
                        /** @type {?} */
                        const ol = this.addUpOverlay(graph, nc);
                        nc.upCellOverlay = ol;
                    }
                    graph.insertEdge(parent, null, '', nc, cell, "billAssociation;");
                }
                /** @type {?} */
                const oldGeo = this.entry.getGeometry().clone();
                this.upLayout.execute(this.upParent, this.entry);
                /** @type {?} */
                const newGeo = this.entry.getGeometry().clone();
                /** @type {?} */
                const dx = oldGeo.x - newGeo.x;
                /** @type {?} */
                const dy = oldGeo.y - newGeo.y;
                this.restoreEntryPosition(graph, this.entry, dx, dy);
                /** @type {?} */
                const cellData = (/** @type {?} */ (cell.data));
                cellData.ups.length = 0;
                for (let nc of newCells) {
                    /** @type {?} */
                    const cd = new UpCellData();
                    this.setCellData(cd, nc);
                    nc.data = cd;
                    cd.down = cellData;
                    cellData.ups.push(cd);
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
            // 重绘画布大小
            resetView && graph.fireEvent(new mxEventObject(Events.RESET_GRAPH_VIEW));
            this.numCellsAddingReq--;
            // 自定义单据节点插入并移位后事件
            this.graph.fireEvent(new mxEventObject(Events.BILL_CELLS_ADDED_AND_MOVED, 'cells', newCells, 'parent', this.upParent));
            this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.numCellsAddingReq--;
            this.loading.close();
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    addDownAssoCell(graph, cell, resetView = false) {
        graph.getModel().beginUpdate();
        /** @type {?} */
        const args = this.dataService.buildGetDownBillsInfoArgs(cell);
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.numCellsAddingReq++;
        this.dataService.getDownBillsInfo(args).subscribe((/**
         * @param {?} infos
         * @return {?}
         */
        (infos) => {
            /** @type {?} */
            let model = graph.getModel();
            /** @type {?} */
            let parent = graph.getDefaultParent();
            /** @type {?} */
            let newCells = [];
            // graph.getModel().beginUpdate();
            try {
                for (let info of infos) {
                    for (let dataInfo of info.billDataInfos) {
                        /** @type {?} */
                        let billCell = null;
                        /** @type {?} */
                        let bts = new BillTrackingSettings();
                        if (info && info.billTrackingSettings) {
                            bts.LoadFromJson(info.billTrackingSettings);
                        }
                        /** @type {?} */
                        let customStyle = "";
                        billCell = graph.insertBillCell(this.downParent, null, dataInfo, info, false, cell.geometry.x + this.hspace, cell.geometry.y, this.nodeWidth, this.nodeHeight, `billNode;${customStyle}`);
                        newCells.push(billCell);
                    }
                }
                this.calCellsPosition(graph, cell, newCells, BillTrackerDirection.Down);
                for (let nc of newCells) {
                    if (nc.billDataInfo.canContinueTracking) {
                        /** @type {?} */
                        const ol = this.addDownOverlay(graph, nc);
                        nc.downCellOverlay = ol;
                    }
                    graph.insertEdge(parent, null, '', cell, nc, "billAssociation;");
                }
                /** @type {?} */
                const oldGeo = this.entry.getGeometry().clone();
                this.downLayout.execute(this.downParent, this.entry);
                /** @type {?} */
                const newGeo = this.entry.getGeometry().clone();
                /** @type {?} */
                const dx = oldGeo.x - newGeo.x;
                /** @type {?} */
                const dy = oldGeo.y - newGeo.y;
                this.restoreEntryPosition(graph, this.entry, dx, dy);
                /** @type {?} */
                const cellData = (/** @type {?} */ (cell.data));
                cellData.downs.length = 0;
                for (let nc of newCells) {
                    /** @type {?} */
                    const cd = new DownCellData();
                    this.setCellData(cd, nc);
                    nc.data = cd;
                    cd.up = cellData;
                    cellData.downs.push(cd);
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
            // 重绘画布大小
            resetView && graph.fireEvent(new mxEventObject(Events.RESET_GRAPH_VIEW));
            this.numCellsAddingReq--;
            // 自定义单据节点插入并移位后事件
            this.graph.fireEvent(new mxEventObject(Events.BILL_CELLS_ADDED_AND_MOVED, 'cells', newCells, 'parent', this.downParent));
            this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.numCellsAddingReq--;
            this.loading.close();
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} dir
     * @return {?}
     */
    removeAssoCell(graph, cell, dir) {
        /** @type {?} */
        const model = graph.getModel();
        /** @type {?} */
        const parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let assoCells = [];
            if (dir == BillTrackerDirection.Down) {
                /** @type {?} */
                let edges = model.getOutgoingEdges(cell);
                /** @type {?} */
                let i = 0;
                while (edges && edges.length > 0 && i < edges.length) {
                    if (edges[i].target && edges[i].target != this.entry) {
                        assoCells.push((/** @type {?} */ (edges[i].target)));
                        edges.push(...model.getOutgoingEdges(edges[i].target));
                    }
                    i++;
                }
            }
            else if (dir == BillTrackerDirection.Up) {
                /** @type {?} */
                let edges = model.getIncomingEdges(cell);
                /** @type {?} */
                let i = 0;
                while (edges && edges.length > 0 && i < edges.length) {
                    if (edges[i].source && edges[i].source != this.entry) {
                        assoCells.push((/** @type {?} */ (edges[i].source)));
                        edges.push(...model.getIncomingEdges(edges[i].source));
                    }
                    i++;
                }
            }
            if (dir == BillTrackerDirection.Down) {
                ((/** @type {?} */ (cell.data))).downs.length = 0;
            }
            else if (dir == BillTrackerDirection.Up) {
                ((/** @type {?} */ (cell.data))).ups.length = 0;
            }
            graph.removeCells(assoCells);
            /** @type {?} */
            const oldGeo = this.entry.getGeometry().clone();
            this.upLayout.execute(this.upParent, this.entry);
            /** @type {?} */
            const newGeo = this.entry.getGeometry().clone();
            /** @type {?} */
            const dx = oldGeo.x - newGeo.x;
            /** @type {?} */
            const dy = oldGeo.y - newGeo.y;
            this.restoreEntryPosition(graph, this.entry, dx, dy);
            /** @type {?} */
            const oldGeo2 = this.entry.getGeometry().clone();
            this.downLayout.execute(this.downParent, this.entry);
            /** @type {?} */
            const newGeo2 = this.entry.getGeometry().clone();
            /** @type {?} */
            const dx2 = oldGeo2.x - newGeo2.x;
            /** @type {?} */
            const dy2 = oldGeo2.y - newGeo2.y;
            this.restoreEntryPosition(graph, this.entry, dx2, dy2);
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} graph
     * @param {?} entry
     * @param {?} dx
     * @param {?} dy
     * @return {?}
     */
    restoreEntryPosition(graph, entry, dx, dy) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let vertices = null;
            vertices = [entry, ...graph.getChildCells(this.upParent, true, false), ...graph.getChildCells(this.downParent, true, false)];
            graph.moveCells(vertices, dx, dy);
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @param {?} dir
     * @return {?}
     */
    calCellsPosition(graph, cell, newCells, dir) {
        if (dir == BillTrackerDirection.Down) {
            this.resetDownCellsPosition(graph, cell, newCells);
        }
        else if (dir == BillTrackerDirection.Up) {
            this.resetUpCellsPosition(graph, cell, newCells);
        }
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    resetDownCellsPosition(graph, cell, newCells) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let targets = graph.getOutgoingEdges(cell).map((/**
             * @param {?} edge
             * @return {?}
             */
            edge => edge.target));
            /** @type {?} */
            let deals = targets;
            //按纵坐标从大到小排序
            /** @type {?} */
            let temp = deals.sort((/**
             * @param {?} c1
             * @param {?} c2
             * @return {?}
             */
            (c1, c2) => c1.geometry && c2.geometry ? c2.geometry.y - c1.geometry.y : Number.MIN_VALUE));
            //最小纵坐标
            /** @type {?} */
            let minY = temp.length > 0 ? temp[temp.length - 1].geometry.y : cell.geometry.y;
            //最大纵坐标
            /** @type {?} */
            let maxY = temp.length > 0 ? temp[0].geometry.y : cell.geometry.y;
            //依次修改新插入节点的纵坐标
            for (let i = 0; i < newCells.length; i++) {
                maxY = deals.length > 0 ? maxY + this.vspace : maxY;
                graph.translateCell(newCells[i], 0, maxY - newCells[i].geometry.y);
                deals.push(newCells[i]);
            }
            /** @type {?} */
            let midY = (maxY + minY) / 2;
            /** @type {?} */
            let diffY = cell.geometry.y - midY;
            //依次修改所有点纵坐标
            deals.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                graph.translateCell(c, 0, diffY);
            }));
            minY += diffY;
            maxY += diffY;
            midY += diffY;
            // 将<=midY的节点全部上移至minY-diffY,>=midY下移至maxY + diffY
            for (let key in graph.model.cells) {
                if (graph.model.cells[key] == graph.model.root || graph.model.cells[key].geometry == null || graph.model.cells[key].edge == true) {
                    continue;
                }
                if (graph.model.cells[key] == cell || newCells.indexOf((/** @type {?} */ (graph.model.cells[key]))) != -1) {
                    continue;
                }
                if (graph.model.cells[key] == this.entry) {
                    continue;
                }
                if (graph.model.cells[key].geometry.x < this.entry.geometry.x) {
                    continue;
                }
                /** @type {?} */
                const c = graph.model.cells[key];
                /** @type {?} */
                let geo = c.geometry;
                graph.translateCell(c, 0, geo.y <= cell.geometry.y ? minY - (cell.geometry.y - geo.y) - geo.y : maxY + (geo.y - cell.geometry.y) - geo.y);
            }
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    resetUpCellsPosition(graph, cell, newCells) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let sources = graph.getIncomingEdges(cell).map((/**
             * @param {?} edge
             * @return {?}
             */
            edge => edge.source));
            /** @type {?} */
            let deals = sources;
            //按纵坐标从大到小排序
            /** @type {?} */
            let temp = deals.sort((/**
             * @param {?} c1
             * @param {?} c2
             * @return {?}
             */
            (c1, c2) => c1.geometry && c2.geometry ? c2.geometry.y - c1.geometry.y : Number.MIN_VALUE));
            //最小纵坐标
            /** @type {?} */
            let minY = temp.length > 0 ? temp[temp.length - 1].geometry.y : cell.geometry.y;
            //最大纵坐标
            /** @type {?} */
            let maxY = temp.length > 0 ? temp[0].geometry.y : cell.geometry.y;
            //依次修改新插入节点的纵坐标
            for (let i = 0; i < newCells.length; i++) {
                maxY = deals.length > 0 ? maxY + this.vspace : maxY;
                graph.translateCell(newCells[i], 0, maxY - newCells[i].geometry.y);
                deals.push(newCells[i]);
            }
            /** @type {?} */
            let midY = (maxY + minY) / 2;
            /** @type {?} */
            let diffY = cell.geometry.y - midY;
            //依次修改所有点纵坐标
            deals.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                graph.translateCell(c, 0, diffY);
            }));
            minY += diffY;
            maxY += diffY;
            midY += diffY;
            // 将<=midY的节点全部上移至minY-diffY,>=midY下移至maxY + diffY
            for (let key in graph.model.cells) {
                if (graph.model.cells[key] == graph.model.root || graph.model.cells[key].geometry == null || graph.model.cells[key].edge == true) {
                    continue;
                }
                if (graph.model.cells[key] == cell || newCells.indexOf((/** @type {?} */ (graph.model.cells[key]))) != -1) {
                    continue;
                }
                if (graph.model.cells[key] == this.entry) {
                    continue;
                }
                if (graph.model.cells[key].geometry.x > this.entry.geometry.x) {
                    continue;
                }
                /** @type {?} */
                const c = graph.model.cells[key];
                /** @type {?} */
                let geo = c.geometry;
                graph.translateCell(c, 0, geo.y <= cell.geometry.y ? minY - (cell.geometry.y - geo.y) - geo.y : maxY + (geo.y - cell.geometry.y) - geo.y);
            }
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} cellData
     * @param {?} cell
     * @return {?}
     */
    setCellData(cellData, cell) {
        cellData.billInfo = cell.billInfo;
        cellData.billDataInfo = cell.billDataInfo;
        cellData.visible = true;
        cellData.diagramInfo.x = cell.geometry.x;
        cellData.diagramInfo.y = cell.geometry.y;
        cellData.diagramInfo.width = cell.geometry.width;
        cellData.diagramInfo.height = cell.geometry.height;
        cellData.diagramInfo.extProps = {
            style: cell.style
        };
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.graph.zoomOut();
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.graph.zoomIn();
    }
    /**
     * @return {?}
     */
    zoomActual() {
        this.graph.zoomActual();
    }
    /**
     * @return {?}
     */
    getZoomScale() {
        return Math.round(this.graph.view.scale * 100);
    }
    /**
     * @return {?}
     */
    print() {
        /** @type {?} */
        const preview = new mxPrintPreview(this.graph, 1);
        preview.printOverlays = true;
        preview.printControls = true;
        preview.printBackgroundImage = true;
        preview.open(billTrackerCellCss);
    }
    /**
     * @param {?} direction
     * @param {?=} all
     * @return {?}
     */
    expand(direction, all = false) {
        if (all) {
            this.expandAll(direction);
            return;
        }
        if (direction == BillTrackerDirection.Up) {
            /** @type {?} */
            const cells = [this.entry];
            this.upParent.children && cells.push(...this.upParent.children);
            cells.forEach((/**
             * @param {?} cell
             * @return {?}
             */
            (cell) => {
                if (cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search) {
                    cell.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                }
            }));
        }
        else if (direction == BillTrackerDirection.Down) {
            /** @type {?} */
            const cells = [this.entry];
            this.downParent.children && cells.push(...this.downParent.children);
            cells.forEach((/**
             * @param {?} cell
             * @return {?}
             */
            (cell) => {
                if (cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search) {
                    cell.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                }
            }));
        }
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    expandAll(direction) {
        if (direction != BillTrackerDirection.Up && direction != BillTrackerDirection.Down) {
            return;
        }
        // 单据节点添加并移位后事件监听器
        /** @type {?} */
        let afterBillCellsAddedAndMoved = null;
        if (direction == BillTrackerDirection.Up) {
            afterBillCellsAddedAndMoved = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const cells = [this.entry];
                this.upParent.children && cells.push(...this.upParent.children);
                /** @type {?} */
                const canTrackUpCells = cells.filter((/**
                 * @param {?} cell
                 * @return {?}
                 */
                (cell) => {
                    return cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search;
                }));
                // 没有可上查节点且没有正在执行的上查请求时删除监听器
                if (canTrackUpCells == null || canTrackUpCells.length == 0) {
                    if (this.numCellsAddingReq === 0) {
                        // console.log("移除监听器");
                        this.graph.removeListener(afterBillCellsAddedAndMoved);
                        console.timeEnd("ExpandAll");
                    }
                }
                else {
                    canTrackUpCells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    (cell) => {
                        if (cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search) {
                            cell.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                        }
                    }));
                }
            });
        }
        else if (direction == BillTrackerDirection.Down) {
            afterBillCellsAddedAndMoved = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const cells = [this.entry];
                this.downParent.children && cells.push(...this.downParent.children);
                /** @type {?} */
                const canTrackDownCells = cells.filter((/**
                 * @param {?} cell
                 * @return {?}
                 */
                (cell) => {
                    return cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search;
                }));
                // 没有可下查节点且没有正在执行的下查请求时删除监听器
                if (canTrackDownCells == null || canTrackDownCells.length == 0) {
                    if (this.numCellsAddingReq === 0) {
                        // console.log("移除监听器");
                        this.graph.removeListener(afterBillCellsAddedAndMoved);
                        console.timeEnd("ExpandAll");
                    }
                }
                else {
                    canTrackDownCells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    (cell) => {
                        if (cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search) {
                            cell.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                        }
                    }));
                }
            });
        }
        console.time("ExpandAll");
        // 添加监听器
        // console.log("添加监听器");
        this.graph.addListener("billCellsAddedAndMoved", afterBillCellsAddedAndMoved);
        // 直接触发一次展开事件
        afterBillCellsAddedAndMoved();
    }
}
BillTrackerGraphComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-bill-tracker-graph',
                template: "<div #mxContainer id=\"mx-container\" class=\"mx-container-ng\">\r\n\r\n</div>\r\n\r\n<div #mxOutlineContainer id=\"mx-outline-container\" class=\"mx-outline-container\" [style.top]=\"modalRef?'50px':null\">\r\n\r\n</div>",
                styles: [".mx-container-ng{position:absolute;top:0;left:0;bottom:0;right:0;cursor:default;overflow:auto;padding-right:16px;padding-bottom:16px;margin:4px}.mx-outline-container{z-index:1;position:absolute;overflow:hidden;top:20px;right:20px;width:160px;height:120px;background:#fff;border:1px solid #d3d3d3}"]
            }] }
];
/** @nocollapse */
BillTrackerGraphComponent.ctorParameters = () => [
    { type: BillTrackerArgs },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: BillTrackerDataService },
    { type: NotifyService },
    { type: MessagerService },
    { type: LoadingService },
    { type: BsModalService },
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
BillTrackerGraphComponent.propDecorators = {
    mxContainerER: [{ type: ViewChild, args: ["mxContainer",] }],
    mxOutlineContainer: [{ type: ViewChild, args: ["mxOutlineContainer",] }],
    selectEventEmitter: [{ type: Output, args: ["select",] }],
    stateChangeEventEmitter: [{ type: Output, args: ["stateChange",] }],
    billTrackerArgs: [{ type: Input, args: ["billTrackerArgs",] }]
};
if (false) {
    /** @type {?} */
    BillTrackerGraphComponent.prototype.localePipe;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.mxContainerER;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.mxOutlineContainer;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.selectEventEmitter;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.stateChangeEventEmitter;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.billTrackerArgs;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.graphOptions;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.gridOptions;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.modalRef;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.graph;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.hspace;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.vspace;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upLayout;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downLayout;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.outline;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.entryCellData;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.layoutManager;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.entry;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upParent;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downParent;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.nodeWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.nodeHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultNonEntryImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultEntryImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultOverlayWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultOverlayHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.overlayWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.overlayHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultUpSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultDownSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultUpFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultDownFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upSearchOffset;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downSearchOffset;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.dataInfoService;
    /**
     * 正在加载中的单据节点请求数
     * @type {?}
     */
    BillTrackerGraphComponent.prototype.numCellsAddingReq;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.dataService;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.notify;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.messager;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.loading;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.modal;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.vcr;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.inj;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.cfr;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,