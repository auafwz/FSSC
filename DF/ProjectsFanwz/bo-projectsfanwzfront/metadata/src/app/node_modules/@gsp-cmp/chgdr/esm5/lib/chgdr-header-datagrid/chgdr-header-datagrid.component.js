/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { ChgdrService } from '../service/chgdr.service';
import { ChangeDataQueryResult } from '../model/change-data-query-result';
import { ErrorUtil } from '../util/error.util';
import { tap } from 'rxjs/operators';
import { forkJoin, of } from 'rxjs';
import { MapUtil } from '../util/map.util';
import { ChgdrInnerService } from '../service/chgdr-inner.service';
var ChgdrHeaderDatagridComponent = /** @class */ (function () {
    function ChgdrHeaderDatagridComponent(chgdrService, messageService, notifyService, ref, chgdrInnerService, injector) {
        this.chgdrService = chgdrService;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.ref = ref;
        this.chgdrInnerService = chgdrInnerService;
        this.injector = injector;
        this.baseCls = true;
        this.showDataId = true;
        this.headers = [];
        this.dataCodeFields = [];
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.resetColumnAndData(null, []);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!changes.chgdrs) {
            //如果chgdrs没有更新，则直接返回
            return;
        }
        /** @type {?} */
        var prevEntityId = this.getEntityId(changes.chgdrs.previousValue);
        /** @type {?} */
        var curEntityId = this.getEntityId(changes.chgdrs.currentValue);
        /** @type {?} */
        var requests = [
            this.updateChgdrConfigHandler(curEntityId),
            this.updateDataCodeFields(prevEntityId, curEntityId)
        ];
        forkJoin(requests).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var chgdrDatas = changes.chgdrs.currentValue;
            if (!!chgdrDatas) {
                _this.formatHeaders(chgdrDatas.headers);
            }
            //如果业务实体变更，则重置列信息
            if (curEntityId != null && curEntityId != prevEntityId) {
                _this.resetColumnAndData(curEntityId, chgdrDatas.headers);
            }
            else {
                _this.headers = chgdrDatas.headers;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error("获取BE【" + curEntityId + "】的配置的业务变更日志的业务编号失败：", err);
            _this.messageService.error("获取业务编号配置失败：" + ErrorUtil.getErrorMessage(err));
        }));
    };
    /** 更新业务实体元数据 */
    /**
     * 更新业务实体元数据
     * @private
     * @param {?} entityId
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.updateChgdrConfigHandler = /**
     * 更新业务实体元数据
     * @private
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        var _this = this;
        if (entityId) {
            return this.chgdrInnerService.getChgdrConfigHandler(entityId).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.chgdrConfigHandler = data; })));
        }
        else {
            return of(this.chgdrConfigHandler);
        }
    };
    /**
     * 更新dataCodeField数据
     * @param prevEntityId 原BeId
     * @param curEntityId 当前BeId
     */
    /**
     * 更新dataCodeField数据
     * @param {?} prevEntityId 原BeId
     * @param {?} curEntityId 当前BeId
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.updateDataCodeFields = /**
     * 更新dataCodeField数据
     * @param {?} prevEntityId 原BeId
     * @param {?} curEntityId 当前BeId
     * @return {?}
     */
    function (prevEntityId, curEntityId) {
        var _this = this;
        if (curEntityId != null && curEntityId != prevEntityId) {
            //只有发生变更时才更新
            return this.chgdrService.getRootEntityDataCodeFields(curEntityId).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.dataCodeFields = data || []; })));
        }
        else {
            //否则直接返回当前值
            return of(this.dataCodeFields);
        }
    };
    /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     */
    /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     * @private
     * @param {?} headers
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.formatHeaders = /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     * @private
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        var _this = this;
        if (!headers) {
            return;
        }
        headers.forEach((/**
         * @param {?} header
         * @return {?}
         */
        function (header) {
            /** @type {?} */
            var dataCodeObj;
            _this.formatDataCodeMap(header.dataCode);
            if (header.dataCode && header.dataCode.size == 1 && header.dataCode.has("_$dataCode")) {
                //兼容老数据
                //老数据dataCode为自由文本
                dataCodeObj = {};
                if (_this.dataCodeFields && _this.dataCodeFields.length > 0) {
                    dataCodeObj[_this.dataCodeFields[0].fieldLabelId] = header.dataCode.get("_$dataCode");
                }
            }
            else {
                dataCodeObj = MapUtil.convertMapToObject(header.dataCode);
            }
            ((/** @type {?} */ (header))).dataCodeObj = dataCodeObj;
        }));
    };
    /** 格式化业务主键Map */
    /**
     * 格式化业务主键Map
     * @private
     * @param {?} dataCode
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.formatDataCodeMap = /**
     * 格式化业务主键Map
     * @private
     * @param {?} dataCode
     * @return {?}
     */
    function (dataCode) {
        var _this = this;
        if (!dataCode || !this.chgdrConfigHandler) {
            return;
        }
        Array.from(dataCode.keys()).forEach((/**
         * @param {?} fieldLabelId
         * @return {?}
         */
        function (fieldLabelId) {
            /** @type {?} */
            var value = dataCode.get(fieldLabelId);
            /** @type {?} */
            var formatedValue = _this.chgdrConfigHandler.formatMainObjectFieldValue(value, fieldLabelId);
            dataCode.set(fieldLabelId, formatedValue);
        }));
    };
    /**
     * @private
     * @param {?} chgdrs
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.getEntityId = /**
     * @private
     * @param {?} chgdrs
     * @return {?}
     */
    function (chgdrs) {
        if (!chgdrs || !chgdrs.headers || chgdrs.headers.length == 0) {
            return null;
        }
        else {
            return chgdrs.headers[0].entityId;
        }
    };
    /**
     * @private
     * @param {?} entityId
     * @param {?} headers
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.resetColumnAndData = /**
     * @private
     * @param {?} entityId
     * @param {?} headers
     * @return {?}
     */
    function (entityId, headers) {
        /** @type {?} */
        var columns = [
            { field: 'userName', width: 130, title: '用户' },
            { field: 'changeTime', width: 130, title: '时间', formatter: { type: 'datetime', options: { format: 'yyyy年MM月dd日 HH:mm:ss' } } },
            { field: 'operateType.name', width: 60, title: '操作类型' },
            { field: 'dataId', width: 130, title: '技术主键', visible: this.showDataId }
        ];
        //{field: 'dataCode', width: 130, title: '业务编号'},
        // {field: 'reason', width: 130, title: '变更原因'},
        this.dataCodeFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var column = {
                field: "dataCodeObj." + field.fieldLabelId,
                title: field.fieldName,
                width: 130
            };
            columns.push(column);
        }));
        /** @type {?} */
        var opColumn = { title: '操作', width: 130, template: this.opCell, halign: 'center', align: 'center' };
        columns.push(opColumn);
        //因为datagrid不允许同时变更data和column，因此手动触发脏检查避免出错
        //先在空数据的基础上变更列
        this.headers = [];
        this.ref.detectChanges();
        this.columns = columns;
        this.ref.detectChanges();
        //在重新赋值数据
        this.headers = headers;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.onPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.pageChanged.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.onPageSizeChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.pageSizeChanged.emit($event);
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.showChangeDetail = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        /** @type {?} */
        var header = ctx.rowData;
        if (!header) {
            return;
        }
        this.chgdrService.getChangeData(header.id, header.changeTime).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (!data) {
                _this.notifyService.error("未找到编号为【" + header.id + "】的变更日志");
            }
            else {
                _this.currentChgdrData = data;
                _this.chgdrInfoDialog.show();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error("查询业务变更日志出错", error);
            _this.messageService.error("查询业务变更日志出错：" + ErrorUtil.getErrorMessage(error));
        }));
    };
    ChgdrHeaderDatagridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-chgdr-header-datagrid',
                    template: "<farris-datagrid #chgdrGrid idField=\"id\" [columns]=\"columns\" [data]=\"headers\"\n  showLineNumber=\"true\" [fit]=\"true\" [fitColumns]=\"true\" \n  [pagination]=\"true\" [pageSize]=\"20\" [showPageList]=\"false\" [pageIndex]=\"chgdrs.pageIndex\" [total]=\"chgdrs.total\"\n  (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\n>\n</farris-datagrid>\n<ng-template #opCell let-ctx>\n  <a href=\"javascript: void(0);\" (click)=\"showChangeDetail(ctx)\">\u53D8\u66F4\u8BE6\u60C5</a>\n</ng-template>\n\n<!-- \u67E5\u770B\u53D8\u66F4\u65E5\u5FD7\u7684\u5F39\u7A97 -->\n<farris-dialog #chgdrInfoDialog\n  title=\"\u53D8\u66F4\u65E5\u5FD7\u8BE6\u60C5\"\n  [width]=\"1100\"\n  [height]=\"600\"\n  [showMaxButton]=\"true\"\n  [resizable]=\"true\"\n  [showButtons]=\"false\"\n>\n  <chgdr-data-viewer [data]=\"currentChgdrData\"></chgdr-data-viewer>\n</farris-dialog>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ChgdrHeaderDatagridComponent.ctorParameters = function () { return [
        { type: ChgdrService },
        { type: MessagerService },
        { type: NotifyService },
        { type: ChangeDetectorRef },
        { type: ChgdrInnerService },
        { type: Injector }
    ]; };
    ChgdrHeaderDatagridComponent.propDecorators = {
        baseCls: [{ type: HostBinding, args: ['class.f-utils-fill',] }],
        chgdrs: [{ type: Input }],
        showDataId: [{ type: Input }],
        pageChanged: [{ type: Output }],
        pageSizeChanged: [{ type: Output }],
        opCell: [{ type: ViewChild, args: ['opCell',] }],
        chgdrInfoDialog: [{ type: ViewChild, args: ["chgdrInfoDialog",] }]
    };
    return ChgdrHeaderDatagridComponent;
}());
export { ChgdrHeaderDatagridComponent };
if (false) {
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.baseCls;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.chgdrs;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.showDataId;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.headers;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.dataCodeFields;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.chgdrConfigHandler;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.pageChanged;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.pageSizeChanged;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.opCell;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.chgdrInfoDialog;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.columns;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.currentChgdrData;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.chgdrService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.chgdrInnerService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,