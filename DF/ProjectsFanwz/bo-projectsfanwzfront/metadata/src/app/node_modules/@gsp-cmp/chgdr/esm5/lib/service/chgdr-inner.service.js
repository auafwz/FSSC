/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ChgdrConfigHandler } from './chgdr-config-handler';
import { ChgdrConfigService } from './chgdr-config.service';
import { ChgdrMetadataService } from './chgdr-metadata.service';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@gsp-lcm/metadatart-selector";
import * as i3 from "./chgdr-metadata.service";
import * as i4 from "./chgdr-config.service";
var ChgdrInnerService = /** @class */ (function () {
    function ChgdrInnerService(http, sessionService, metadataService, chgdrMetadataService, chgdrConfigService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.chgdrMetadataService = chgdrMetadataService;
        this.chgdrConfigService = chgdrConfigService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /** 获取BE元数据 */
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    ChgdrInnerService.prototype.getChgdrConfigHandler = /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    function (beId) {
        var _this = this;
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            var be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            /** @type {?} */
            var requests = [];
            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));
            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));
            return forkJoin(requests).pipe(map((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var be = data[0];
                /** @type {?} */
                var entityConfigs = data[1] || [];
                /** @type {?} */
                var handler = new ChgdrConfigHandler(be, entityConfigs);
                _this.beMetadataCache.set(beId, handler);
                return handler;
            })));
        }
    };
    ChgdrInnerService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ChgdrInnerService.ctorParameters = function () { return [
        { type: HttpService },
        { type: SessionService },
        { type: GSPMetadataRTService },
        { type: ChgdrMetadataService },
        { type: ChgdrConfigService },
        { type: Injector }
    ]; };
    /** @nocollapse */ ChgdrInnerService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrInnerService_Factory() { return new ChgdrInnerService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i2.GSPMetadataRTService), i0.inject(i3.ChgdrMetadataService), i0.inject(i4.ChgdrConfigService), i0.inject(i0.INJECTOR)); }, token: ChgdrInnerService, providedIn: "root" });
    return ChgdrInnerService;
}());
export { ChgdrInnerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.beMetadataCache;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.chgdrMetadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.chgdrConfigService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItaW5uZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hnZHItaW5uZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFPMUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQUVoRTtJQUlJLDJCQUFvQixJQUFpQixFQUN6QixjQUE4QixFQUM5QixlQUFxQyxFQUNyQyxvQkFBMEMsRUFDMUMsa0JBQXNDLEVBQ3RDLFFBQWtCO1FBTFYsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUN6QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsb0JBQWUsR0FBZixlQUFlLENBQXNCO1FBQ3JDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBUHRCLG9CQUFlLEdBQW9DLElBQUksR0FBRyxFQUFFLENBQUM7SUFRakUsQ0FBQztJQUVMLGNBQWM7Ozs7OztJQUNQLGlEQUFxQjs7Ozs7SUFBNUIsVUFBNkIsSUFBWTtRQUF6QyxpQkFpQkM7UUFoQkcsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTs7Z0JBQzVCLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdkMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakI7YUFBTTs7Z0JBQ0MsUUFBUSxHQUFHLEVBQUU7WUFDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRTlELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1lBQUMsVUFBQSxJQUFJOztvQkFDN0IsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7O29CQUNaLGFBQWEsR0FBeUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7O29CQUNuRCxPQUFPLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDO2dCQUN6RCxLQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hDLE9BQU8sT0FBTyxDQUFDO1lBQ25CLENBQUMsRUFBQyxDQUFDLENBQUM7U0FDUDtJQUNMLENBQUM7O2dCQTlCSixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O2dCQWZ6QixXQUFXO2dCQUFFLGNBQWM7Z0JBRTNCLG9CQUFvQjtnQkFXcEIsb0JBQW9CO2dCQURwQixrQkFBa0I7Z0JBYk4sUUFBUTs7OzRCQUE3QjtDQStDQyxBQS9CRCxJQStCQztTQTlCWSxpQkFBaUI7Ozs7OztJQUMxQiw0Q0FBcUU7Ozs7O0lBRXpELGlDQUF5Qjs7Ozs7SUFDakMsMkNBQXNDOzs7OztJQUN0Qyw0Q0FBNkM7Ozs7O0lBQzdDLGlEQUFrRDs7Ozs7SUFDbEQsK0NBQThDOzs7OztJQUM5QyxxQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSwgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgR1NQQnVzaW5lc3NFbnRpdHkgfSBmcm9tICdAZ3NwLWJlZi9nc3AtYmUtbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBHU1BNZXRhZGF0YVJUU2VydmljZSB9IGZyb20gJ0Bnc3AtbGNtL21ldGFkYXRhcnQtc2VsZWN0b3InO1xyXG5pbXBvcnQgeyBmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENoYW5nZURhdGFIZWFkZXIgfSBmcm9tICcuLi9tb2RlbC9jaGFuZ2UtZGF0YS1oZWFkZXInO1xyXG5pbXBvcnQgeyBDaGFuZ2VEYXRhUXVlcnlQYXJhbSB9IGZyb20gJy4uL21vZGVsL2NoYW5nZS1kYXRhLXF1ZXJ5LXBhcmFtJztcclxuaW1wb3J0IHsgQ2hnTG9nQ29uZmlnRW50aXR5IH0gZnJvbSAnLi4vbW9kZWwvY2hnZHItY29uZmlnLWVudGl0eSc7XHJcbmltcG9ydCB7IENoZ0xvZ0NvbmZpZ0ZpZWxkIH0gZnJvbSAnLi4vbW9kZWwvY2hnZHItY29uZmlnLWZpZWxkJztcclxuaW1wb3J0IHsgT3BlcmF0ZVR5cGUgfSBmcm9tICcuLi9tb2RlbC9vcGVyYXRlLXR5cGUnO1xyXG5pbXBvcnQgeyBNYXBVdGlsIH0gZnJvbSAnLi4vdXRpbC9tYXAudXRpbCc7XHJcbmltcG9ydCB7IENoZ2RyQ29uZmlnSGFuZGxlciB9IGZyb20gJy4vY2hnZHItY29uZmlnLWhhbmRsZXInO1xyXG5pbXBvcnQgeyBDaGdkckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2NoZ2RyLWNvbmZpZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hnZHJNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL2NoZ2RyLW1ldGFkYXRhLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIENoZ2RySW5uZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgYmVNZXRhZGF0YUNhY2hlOiBNYXA8c3RyaW5nLCBDaGdkckNvbmZpZ0hhbmRsZXI+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBtZXRhZGF0YVNlcnZpY2U6IEdTUE1ldGFkYXRhUlRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY2hnZHJNZXRhZGF0YVNlcnZpY2U6IENoZ2RyTWV0YWRhdGFTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY2hnZHJDb25maWdTZXJ2aWNlOiBDaGdkckNvbmZpZ1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkgeyB9XHJcblxyXG4gICAgLyoqIOiOt+WPlkJF5YWD5pWw5o2uICovXHJcbiAgICBwdWJsaWMgZ2V0Q2hnZHJDb25maWdIYW5kbGVyKGJlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Q2hnZHJDb25maWdIYW5kbGVyPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuYmVNZXRhZGF0YUNhY2hlLmhhcyhiZUlkKSkge1xyXG4gICAgICAgICAgICBsZXQgYmUgPSB0aGlzLmJlTWV0YWRhdGFDYWNoZS5nZXQoYmVJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvZihiZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHJlcXVlc3RzID0gW107XHJcbiAgICAgICAgICAgIHJlcXVlc3RzLnB1c2godGhpcy5jaGdkck1ldGFkYXRhU2VydmljZS5nZXRHU1BCdXNpbmVzc0VudGl0eShiZUlkKSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RzLnB1c2godGhpcy5jaGdkckNvbmZpZ1NlcnZpY2UuZ2V0QmVDaGdkckNvbmZpZyhiZUlkKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZm9ya0pvaW4ocmVxdWVzdHMpLnBpcGUobWFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmUgPSBkYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZW50aXR5Q29uZmlnczogQ2hnTG9nQ29uZmlnRW50aXR5W10gPSBkYXRhWzFdIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IG5ldyBDaGdkckNvbmZpZ0hhbmRsZXIoYmUsIGVudGl0eUNvbmZpZ3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZU1ldGFkYXRhQ2FjaGUuc2V0KGJlSWQsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXI7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19