/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from './chgdr-data';
var ChgdrDataBuilder = /** @class */ (function () {
    function ChgdrDataBuilder() {
    }
    /**
     * @param {?} data
     * @param {?} handler
     * @return {?}
     */
    ChgdrDataBuilder.prototype.buildChgdrData = /**
     * @param {?} data
     * @param {?} handler
     * @return {?}
     */
    function (data, handler) {
        var _this = this;
        this.handler = handler;
        //初始化变更日志基本信息
        /** @type {?} */
        var chgdrData = new ChgdrData();
        chgdrData.entityName = this.handler.getBeName();
        chgdrData.operateType = data.operateType;
        chgdrData.userName = data.userName;
        chgdrData.dataId = data.dataId;
        chgdrData.dataCode = data.dataCode;
        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());
        chgdrData.reason = data.reason;
        chgdrData.changeTime = data.changeTime;
        chgdrData.entityNodes = [];
        //分层组织变更日志行
        /** @type {?} */
        var rowNodes = [];
        !!data.rows && data.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            if (!row) {
                return;
            }
            /** @type {?} */
            var rowNode = new ChgdrDataRowNode();
            rowNode.id = row.id;
            rowNode.parentDataId = row.parentDataId;
            rowNode.dataId = row.dataId;
            rowNode.dataCode = row.dataCode;
            rowNode.dataCodes = _this.buildDataCodes(row.dataCode, row.entityCode);
            rowNode.entityCode = row.entityCode;
            rowNode.entityName = _this.handler.getEntityNameOrDefault(row.entityCode);
            rowNode.operateType = row.operateType;
            rowNode.entityNodes = [];
            //组织列的变更信息
            /** @type {?} */
            var changeColumnKeys = _this.extractChangeColumnKeys(row);
            /** @type {?} */
            var columnValueChanges = [];
            changeColumnKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var column = new ChangeColumnItem();
                column.fieldLabel = key;
                column.fieldName = _this.handler.getEntityFieldNameOrDefault(row.entityCode, key);
                column.oldValue = _this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);
                column.newValue = _this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);
                /** @type {?} */
                var ele = _this.handler.getElement(row.entityCode, key);
                if (ele) {
                    //判断是否是关联字段
                    column.hasAssociation = ele.ObjectType == "Association" && ele.IsUdt == false;
                    column.isAssociationRefField = ele.IsRefElement;
                    /** @type {?} */
                    var parentElement = _this.handler.getParentElement(row.entityCode, key);
                    if (parentElement) {
                        column.belongFieldLabelId = parentElement.LabelID;
                    }
                }
                columnValueChanges.push(column);
            }));
            //变更值排序
            _this.handler.sort(columnValueChanges, row.entityCode, (/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.fieldLabel; }));
            //合并关联带出字段
            /** @type {?} */
            var columnMap = new Map();
            columnValueChanges.forEach((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                columnMap.set(column.fieldLabel, column);
            }));
            //1. 移除所有关联带出字段，并附加到其所属关联字段的children属性上
            columnValueChanges = columnValueChanges.filter((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                if (column.isAssociationRefField) {
                    /** @type {?} */
                    var parentColumn = columnMap.get(column.belongFieldLabelId);
                    if (parentColumn) {
                        //找到父级字段则添加为父
                        parentColumn.children.push(column);
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }));
            //2. 转换关联字段，将其子级的变更值拼接作为其变更值
            columnValueChanges = columnValueChanges.map((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                if (column.hasAssociation && column.children.length > 0) {
                    //如果是关联字段，且存在关联带出字段
                    /** @type {?} */
                    var virtualColumn = Object.assign(new ChangeColumnItem(), column);
                    virtualColumn.originalColumnItem = column;
                    virtualColumn.oldValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    function (child) { return child.oldValue; })).join(";");
                    virtualColumn.newValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    function (child) { return child.newValue; })).join(";");
                    return virtualColumn;
                }
                else {
                    return column;
                }
            }));
            rowNode.changes = columnValueChanges;
            rowNodes.push(rowNode);
        }));
        /**
         * dataId与变更行的Map
         * @type {?}
         */
        var dataIdRowMap = new Map();
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return dataIdRowMap.set(node.dataId, node); }));
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (!node.parentDataId) {
                //根节点
                /** @type {?} */
                var entityNode = _this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
                return;
            }
            /** @type {?} */
            var parentRowNode = dataIdRowMap.get(node.parentDataId);
            if (!!parentRowNode) {
                //上级节点存在的节点
                /** @type {?} */
                var entityNode = parentRowNode.entityNodes.find((/**
                 * @param {?} en
                 * @return {?}
                 */
                function (en) { return en.entityCode == node.entityCode; }));
                if (!entityNode) {
                    entityNode = _this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                    parentRowNode.entityNodes.push(entityNode);
                }
                entityNode.rows.push(node);
            }
            else {
                //上级节点不存在的节点
                //TODO 上级节点不存在的节点是否需要构造完整的上级结构？
                /** @type {?} */
                var entityNode = _this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
            }
        }));
        return chgdrData;
    };
    /**
     * @private
     * @param {?} dataCode
     * @param {?} entityCode
     * @return {?}
     */
    ChgdrDataBuilder.prototype.buildDataCodes = /**
     * @private
     * @param {?} dataCode
     * @param {?} entityCode
     * @return {?}
     */
    function (dataCode, entityCode) {
        var _this = this;
        /** @type {?} */
        var dataCodes = [];
        dataCode && dataCode.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            /** @type {?} */
            var dataCodeField = new DataCodeField();
            if (key == "_$dataCode") {
                dataCodeField.fieldLabelId = "dataCode";
                dataCodeField.fieldName = "业务编号";
                dataCodeField.fieldValue = value;
            }
            else {
                dataCodeField.fieldLabelId = key;
                dataCodeField.fieldName = _this.handler.getEntityFieldNameOrDefault(entityCode, key);
                dataCodeField.fieldValue = _this.handler.formatFieldValue(value, entityCode, key);
            }
            dataCodes.push(dataCodeField);
        }));
        //业务编号排序
        this.handler.sort(dataCodes, entityCode, (/**
         * @param {?} dataCode
         * @return {?}
         */
        function (dataCode) { return dataCode.fieldLabelId; }));
        return dataCodes;
    };
    /** 得到新旧内容中所有的key */
    /**
     * 得到新旧内容中所有的key
     * @private
     * @param {?} row
     * @return {?}
     */
    ChgdrDataBuilder.prototype.extractChangeColumnKeys = /**
     * 得到新旧内容中所有的key
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var keysSet = new Set();
        row.oldContent && row.oldContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) { return keysSet.add(key); }));
        row.newContent && row.newContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) { return keysSet.add(key); }));
        /** @type {?} */
        var keys = Array.from(keysSet.keys());
        return keys;
    };
    /**
     * @private
     * @param {?} entityCode
     * @param {?} entityName
     * @return {?}
     */
    ChgdrDataBuilder.prototype.genChgdrDataEntityNode = /**
     * @private
     * @param {?} entityCode
     * @param {?} entityName
     * @return {?}
     */
    function (entityCode, entityName) {
        /** @type {?} */
        var node = new ChgdrDataEntityNode();
        node.entityCode = entityCode;
        node.entityName = entityName;
        node.rows = [];
        return node;
    };
    return ChgdrDataBuilder;
}());
export { ChgdrDataBuilder };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrDataBuilder.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,