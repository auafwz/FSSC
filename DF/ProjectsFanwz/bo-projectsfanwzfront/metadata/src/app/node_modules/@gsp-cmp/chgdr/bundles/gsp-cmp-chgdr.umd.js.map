{"version":3,"file":"gsp-cmp-chgdr.umd.js.map","sources":["ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data-builder.ts","ng://@gsp-cmp/chgdr/lib/util/guid.util.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-tree-builder.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-metadata.service.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-config.service.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-config-handler.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-inner.service.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data-viewer.component.ts","ng://@gsp-cmp/chgdr/lib/model/operate-type.ts","node_modules/tslib/tslib.es6.js","ng://@gsp-cmp/chgdr/lib/util/map.util.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr.service.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-query-param.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-query-result.ts","ng://@gsp-cmp/chgdr/lib/util/error.util.ts","ng://@gsp-cmp/chgdr/lib/util/time.util.ts","ng://@gsp-cmp/chgdr/lib/chgdr-list/chgdr-list.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-row-grid/chgdr-row-grid.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-list-dialog-content/chgdr-list-dialog-content.component.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-list-ui.service.ts","ng://@gsp-cmp/chgdr/lib/chgdr-header-datagrid/chgdr-header-datagrid.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr.module.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-header.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-row.ts"],"sourcesContent":["import { OperateType } from '../model/operate-type';\r\n\r\n/** åºæ¬ä¿¡æ¯ */\r\nexport class ChgdrData {\r\n    entityName: string;\r\n    userName: string;\r\n    operateType: OperateType;\r\n    reason: string;\r\n    dataId: string;\r\n    dataCode: Map<string, string>;\r\n    dataCodes: DataCodeField[];\r\n    changeTime: Date;\r\n    /** æ¬åæ´æ¥å¿çæ ¹èç¹ */\r\n    entityNodes: ChgdrDataEntityNode[];\r\n}\r\n\r\n/** åçåæ´çå®ä½èç¹ */\r\nexport class ChgdrDataEntityNode {\r\n    entityCode: string;\r\n    entityName: string;\r\n    rows: ChgdrDataRowNode[];\r\n}\r\n\r\n/** åçåæ´çè¡ */\r\nexport class ChgdrDataRowNode {\r\n    id: string;\r\n    entityCode: string;\r\n    entityName: string;\r\n    parentDataId: string;\r\n    dataId: string;\r\n    dataCode: Map<string, string>;\r\n    dataCodes: DataCodeField[];\r\n    operateType: OperateType;\r\n    changes: ChangeColumnItem[];\r\n    /** åçåæ´çè¡çä¸çº§å®ä½ */\r\n    entityNodes: ChgdrDataEntityNode[];\r\n}\r\n\r\nexport class ChangeColumnItem {\r\n    fieldLabel: string;\r\n    fieldName: string;\r\n    oldValue: string;\r\n    newValue: string;\r\n    /** æ¯å¦å³èå­æ®µ */\r\n    hasAssociation: boolean;\r\n    /** åå§å³èå­æ®µ */\r\n    originalColumnItem: ChangeColumnItem;\r\n    /** æ¯å¦å³èå¸¦åºå­æ®µ */\r\n    isAssociationRefField: boolean;\r\n    /** å³èå¸¦åºå­æ®µæå±çå­æ®µ */\r\n    belongFieldLabelId: string;\r\n    /** å¦æå½åå­æ®µä¸ºå³èå­æ®µï¼åå±æ§ä¸ºå½åå­æ®µçå³èå¸¦åºå­æ®µ */\r\n    children: ChangeColumnItem[] = [];\r\n}\r\n\r\nexport class DataCodeField {\r\n    fieldLabelId: string;\r\n    fieldName: string;\r\n    fieldValue: string;\r\n}","import { isToday, format } from 'date-fns';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { IGSPCommonObject, IGSPCommonElement, GSPAssociation, GSPCommonElement, GSPElementDataType, GSPElementObjectType, GSPEnumValue } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from './chgdr-data';\r\nimport { ChgdrConfigHandler } from '../service/chgdr-config-handler';\r\n\r\nexport class ChgdrDataBuilder {\r\n    private handler: ChgdrConfigHandler;\r\n\r\n    buildChgdrData(data: ChangeDataHeader, handler: ChgdrConfigHandler): ChgdrData {\r\n        this.handler = handler;\r\n        //åå§ååæ´æ¥å¿åºæ¬ä¿¡æ¯\r\n        let chgdrData = new ChgdrData();\r\n        chgdrData.entityName = this.handler.getBeName();\r\n        chgdrData.operateType = data.operateType;\r\n        chgdrData.userName = data.userName;\r\n        chgdrData.dataId = data.dataId;\r\n        chgdrData.dataCode = data.dataCode;\r\n        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());\r\n        chgdrData.reason = data.reason;\r\n        chgdrData.changeTime = data.changeTime;\r\n        chgdrData.entityNodes = [];\r\n\r\n        //åå±ç»ç»åæ´æ¥å¿è¡\r\n        let rowNodes: ChgdrDataRowNode[] = [];\r\n        !!data.rows && data.rows.forEach(row => {\r\n            if (!row) {\r\n                return;\r\n            }\r\n            let rowNode = new ChgdrDataRowNode();\r\n            rowNode.id = row.id;\r\n            rowNode.parentDataId = row.parentDataId;\r\n            rowNode.dataId = row.dataId;\r\n            rowNode.dataCode = row.dataCode;\r\n            rowNode.dataCodes = this.buildDataCodes(row.dataCode, row.entityCode);\r\n            rowNode.entityCode = row.entityCode;\r\n            rowNode.entityName = this.handler.getEntityNameOrDefault(row.entityCode);\r\n            rowNode.operateType = row.operateType;\r\n            rowNode.entityNodes = [];\r\n\r\n            //ç»ç»åçåæ´ä¿¡æ¯\r\n            let changeColumnKeys: string[] = this.extractChangeColumnKeys(row);\r\n            let columnValueChanges: ChangeColumnItem[] = [];\r\n            changeColumnKeys.forEach((key) => {\r\n                let column = new ChangeColumnItem();\r\n                column.fieldLabel = key;\r\n                column.fieldName = this.handler.getEntityFieldNameOrDefault(row.entityCode, key);\r\n                column.oldValue = this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);\r\n                column.newValue = this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);\r\n\r\n                let ele: IGSPCommonElement = this.handler.getElement(row.entityCode, key);\r\n                if (ele) {\r\n                    //å¤æ­æ¯å¦æ¯å³èå­æ®µ\r\n                    column.hasAssociation = ele.ObjectType == \"Association\" && ele.IsUdt == false;\r\n                    column.isAssociationRefField = ele.IsRefElement;\r\n                    let parentElement = this.handler.getParentElement(row.entityCode, key);\r\n                    if (parentElement) {\r\n                        column.belongFieldLabelId = parentElement.LabelID;\r\n                    }\r\n                }\r\n\r\n                columnValueChanges.push(column);\r\n            })\r\n            //åæ´å¼æåº\r\n            this.handler.sort(columnValueChanges, row.entityCode, (column)=>column.fieldLabel);\r\n\r\n            //åå¹¶å³èå¸¦åºå­æ®µ\r\n            let columnMap: Map<string, ChangeColumnItem> = new Map();\r\n            columnValueChanges.forEach((column) => {\r\n                columnMap.set(column.fieldLabel, column);\r\n            });\r\n            //1. ç§»é¤ææå³èå¸¦åºå­æ®µï¼å¹¶éå å°å¶æå±å³èå­æ®µçchildrenå±æ§ä¸\r\n            columnValueChanges = columnValueChanges.filter((column) => {\r\n                if (column.isAssociationRefField) {\r\n                    let parentColumn: ChangeColumnItem = columnMap.get(column.belongFieldLabelId);\r\n                    if (parentColumn) {\r\n                        //æ¾å°ç¶çº§å­æ®µåæ·»å ä¸ºç¶\r\n                        parentColumn.children.push(column);\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n            //2. è½¬æ¢å³èå­æ®µï¼å°å¶å­çº§çåæ´å¼æ¼æ¥ä½ä¸ºå¶åæ´å¼\r\n            columnValueChanges = columnValueChanges.map<ChangeColumnItem>(column => {\r\n                if (column.hasAssociation && column.children.length > 0) {\r\n                    //å¦ææ¯å³èå­æ®µï¼ä¸å­å¨å³èå¸¦åºå­æ®µ\r\n                    let virtualColumn: ChangeColumnItem = Object.assign(new ChangeColumnItem(), column);\r\n                    virtualColumn.originalColumnItem = column;\r\n                    virtualColumn.oldValue = column.children.map(child => child.oldValue).join(\";\");\r\n                    virtualColumn.newValue = column.children.map(child => child.newValue).join(\";\");\r\n                    return virtualColumn;\r\n                } else {\r\n                    return column;\r\n                }\r\n            });\r\n\r\n            rowNode.changes = columnValueChanges;\r\n\r\n            rowNodes.push(rowNode);\r\n        });\r\n\r\n        /** dataIdä¸åæ´è¡çMap */\r\n        let dataIdRowMap: Map<string, ChgdrDataRowNode> = new Map();\r\n        rowNodes.forEach(node => dataIdRowMap.set(node.dataId, node));\r\n\r\n        rowNodes.forEach(node => {\r\n            if (!node.parentDataId) {\r\n                //æ ¹èç¹\r\n                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                entityNode.rows.push(node);\r\n                chgdrData.entityNodes.push(entityNode);\r\n                return;\r\n            }\r\n            let parentRowNode = dataIdRowMap.get(node.parentDataId);\r\n            if (!!parentRowNode) {\r\n                //ä¸çº§èç¹å­å¨çèç¹\r\n                let entityNode = parentRowNode.entityNodes.find(en => en.entityCode == node.entityCode);\r\n                if (!entityNode) {\r\n                    entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                    parentRowNode.entityNodes.push(entityNode);\r\n                }\r\n                entityNode.rows.push(node);\r\n            } else {\r\n                //ä¸çº§èç¹ä¸å­å¨çèç¹\r\n                //TODO ä¸çº§èç¹ä¸å­å¨çèç¹æ¯å¦éè¦æé å®æ´çä¸çº§ç»æï¼\r\n                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                entityNode.rows.push(node);\r\n                chgdrData.entityNodes.push(entityNode);\r\n            }\r\n        })\r\n\r\n        return chgdrData;\r\n    }\r\n\r\n    private buildDataCodes(dataCode: Map<string, string>, entityCode: string): DataCodeField[] {\r\n        let dataCodes: DataCodeField[] = [];\r\n        dataCode && dataCode.forEach((value, key) => {\r\n            let dataCodeField: DataCodeField = new DataCodeField();\r\n            if (key == \"_$dataCode\") {\r\n                dataCodeField.fieldLabelId = \"dataCode\";\r\n                dataCodeField.fieldName = \"ä¸å¡ç¼å·\";\r\n                dataCodeField.fieldValue = value;\r\n            } else {\r\n                dataCodeField.fieldLabelId = key;\r\n                dataCodeField.fieldName = this.handler.getEntityFieldNameOrDefault(entityCode, key);\r\n                dataCodeField.fieldValue = this.handler.formatFieldValue(value, entityCode, key);\r\n            }\r\n            dataCodes.push(dataCodeField);\r\n        })\r\n\r\n        //ä¸å¡ç¼å·æåº\r\n        this.handler.sort(dataCodes, entityCode, (dataCode)=>dataCode.fieldLabelId);\r\n\r\n        return dataCodes;\r\n    }\r\n\r\n    /** å¾å°æ°æ§åå®¹ä¸­ææçkey */\r\n    private extractChangeColumnKeys(row: ChangeDataRow): string[] {\r\n        let keysSet: Set<string> = new Set();\r\n        row.oldContent && row.oldContent.forEach((value, key) => keysSet.add(key));\r\n        row.newContent && row.newContent.forEach((value, key) => keysSet.add(key));\r\n        const keys: string[] = Array.from(keysSet.keys());\r\n        return keys;\r\n    }\r\n\r\n\r\n    private genChgdrDataEntityNode(entityCode: string, entityName: string): ChgdrDataEntityNode {\r\n        let node = new ChgdrDataEntityNode();\r\n        node.entityCode = entityCode;\r\n        node.entityName = entityName;\r\n        node.rows = [];\r\n        return node;\r\n    }\r\n\r\n}","export class Guid {\r\n  static newGuid() {\r\n    const initString = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\r\n    const result = initString.replace(/[xy]/g, (c) => {\r\n      return this.convert(c);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private static convert(c) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const r = Math.random() * 16 | 0;\r\n    // tslint:disable-next-line:no-bitwise\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  }\r\n}\r\n","import { Guid } from '../util/guid.util';\r\nimport { ChgdrData, ChgdrDataRowNode } from './chgdr-data';\r\n\r\n// åèï¼ Farris TreeTableçèç¹ç»æ\r\n// export interface TreeNode {\r\n//     id?: string;\r\n//     data: any;\r\n//     /** å¶å­èç¹å¾æ  */\r\n//     icon?: any;\r\n//     /** èç¹å±å¼å¾æ  */\r\n//     expandedIcon?: any;\r\n//     /** èç¹æå å¾æ  */\r\n//     collapsedIcon?: any;\r\n//     /** å­èç¹ */\r\n//     children?: TreeNode[];\r\n//     /** æ¯å¦ä¸ºå¶å­èç¹ */\r\n//     leaf?: boolean;\r\n//     /** æ¯å¦å±å¼ */\r\n//     expanded?: boolean;\r\n//     type?: string;\r\n//     /** ç¶èç¹ */\r\n//     parent?: TreeNode;\r\n//     /** æ¯å¦åè®¸éä¸­ */\r\n//     selectable?: boolean;\r\n//  }\r\n\r\nexport class ChgdrTreeNode {\r\n    // æ éç½®ä¸­è®¾ç½®äºidFieldçæåµä¸ï¼idä¼è¢«èªå¨èµå¼ä¸ºdata[idField]çå¼ãæä»¥å¨æ­¤è®¾ç½®å¿é¡»è®¾ç½®ä¸ºä¸data.idä¸­ç¸åã\r\n    /** èç¹IDï¼ç¨äºåé¨å¤çï¼è¯·å¿ä½¿ç¨ */\r\n    id: string;\r\n    /** èç¹åç§° */\r\n    name: string;\r\n\r\n    /** ç¶èç¹ */\r\n    parent: ChgdrTreeNode;\r\n    /** å­èç¹åè¡¨ */\r\n    children: ChgdrTreeNode[];\r\n\r\n    /** æ¯å¦å±å¼ */\r\n    expanded: boolean;\r\n    /** æ¯å¦éè */\r\n    hidden: boolean;\r\n\r\n    /** å±ç¤ºæ ç»æç¨çæ°æ®å®ä½ */\r\n    data: any;\r\n    chgdrRow: ChgdrDataRowNode;\r\n    chgdrData: ChgdrData;\r\n    isRoot: boolean;\r\n}\r\n\r\nexport class ChgdrTreeBuilder {\r\n    private chgdrData: ChgdrData;\r\n\r\n    public build(chgdrData: ChgdrData): ChgdrTreeNode[] {\r\n        this.chgdrData = chgdrData;\r\n        if (chgdrData.entityNodes.length == 0) {\r\n            console.warn(\"æ åæ´æ¥å¿\");\r\n            return [];\r\n        }\r\n        let rootEntityNode = chgdrData.entityNodes[0];\r\n        let rootRows = rootEntityNode.rows;\r\n        if (rootRows.length == 0) {\r\n            console.warn(\"æ æ ¹åæ´æ¥å¿è¡\");\r\n            return [];\r\n        }\r\n        let rootRow = rootRows[0];\r\n\r\n        let node = this.rowToNode(rootRow);\r\n        node.isRoot = true;\r\n        node.expanded = true;\r\n\r\n        return [node];\r\n    }\r\n\r\n    private rowToNode(row: ChgdrDataRowNode): ChgdrTreeNode {\r\n        const node: ChgdrTreeNode = new ChgdrTreeNode();\r\n        node.id = Guid.newGuid();\r\n        node.name = this.buildTreeNodeName(row);\r\n        node.data = {\r\n            id: node.id,\r\n            name: node.name\r\n        };\r\n        node.chgdrRow = row;\r\n        node.chgdrData = this.chgdrData;\r\n        node.children = [];\r\n        row.entityNodes.forEach(entityNode => {\r\n            entityNode.rows.forEach(childRow => {\r\n                const childNode: ChgdrTreeNode = this.rowToNode(childRow);\r\n                childNode.parent = node;\r\n                node.children.push(childNode);\r\n            })\r\n        })\r\n        return node;\r\n    }\r\n\r\n    private buildTreeNodeName(row: ChgdrDataRowNode): string{\r\n        let dataCodeName;\r\n        if(row.dataCodes && row.dataCodes.length>0){\r\n            dataCodeName = row.dataCodes[0].fieldValue;\r\n        }\r\n        if(dataCodeName){\r\n            return row.entityName + \"-\" + dataCodeName + \"ã\" + row.operateType.getName() + \"ã\";\r\n        }else{\r\n            return row.entityName + \"ã\" + row.operateType.getName() + \"ã\";\r\n        }\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { MapUtil } from '../util/map.util';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrMetadataService {\r\n  private beMetadataCache: Map<string, GSPBusinessEntity> = new Map();\r\n\r\n  constructor(private http: HttpService,\r\n    private sessionService: SessionService,\r\n    private metadataService: GSPMetadataRTService,\r\n    private injector: Injector) { }\r\n\r\n    /** è·åBEåæ°æ® */\r\n    public getGSPBusinessEntity(beId: string):Observable<GSPBusinessEntity>{\r\n      if(this.beMetadataCache.has(beId)){\r\n        let be = this.beMetadataCache.get(beId);\r\n        return of(be);\r\n      }else{\r\n        return this.metadataService.GetMetadataRT(beId).pipe(map(metadata => {\r\n          const be: GSPBusinessEntity = JSON.parse(metadata.content);\r\n          this.beMetadataCache.set(beId, be);\r\n          return be;\r\n        }));\r\n      }\r\n    }\r\n\r\n  // public getBeMetadataAndUdts(beId: string): Observable<any> {\r\n  //   this.metadataService.GetMetadataRT(beId).subscribe((metadata) => {\r\n  //     const be: GSPBusinessEntity = JSON.parse(metadata.content);\r\n  //     let udtids:string[] = this.getAllUdtIds(be.MainObject);\r\n  //     this.metadataService.\r\n  //   });\r\n  // }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { ChgdrInnerService } from './chgdr-inner.service';\r\n\r\nconst CHGDR_CONFIG_ROUTER = '/api/runtime/bcc/v1.0/chgdr/config';\r\nconst CHGDR_CONFIG_GET_BY_BIZOBJID_AND_MODELID = `${CHGDR_CONFIG_ROUTER}/{bizObjId}/{modelId}`;\r\n\r\nconst ServerIP = '/';\r\nconst chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrConfigService {\r\n\r\n    constructor(private http: HttpService,\r\n        private sessionService: SessionService,\r\n        private injector: Injector) {\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®ä¸å¡å®ä½IDè·åææçéç½®ä¿¡æ¯\r\n     */\r\n    getBeChgdrConfig(beId: string): Observable<ChgLogConfigEntity[]> {\r\n        let queryUrl = `${chgdrUrl}/config?beId=${beId}`;\r\n        return (<Observable<ChgLogConfigEntity[]>><unknown>this.http.get(queryUrl)).pipe(tap(data => {\r\n            let configEntities: ChgLogConfigEntity[] = data || [];\r\n            configEntities.forEach(entity => {\r\n                //å¤çå­æ®µé¡ºåºå·\r\n                let fields: Array<ChgLogConfigField> = entity.fields || [];\r\n                //èµäºèæ°æ®é»è®¤é¡ºåºå·\r\n                fields.forEach((field, index) => {\r\n                    if (field.showIndex === undefined || field.showIndex === null) {\r\n                        field.showIndex = index;\r\n                    }\r\n                });\r\n                //æç§é¡ºåºå·æåº\r\n                entity.fields = fields.sort((a, b) => a.showIndex - b.showIndex);\r\n                //æ ¹æ®æåºç»æéç½®é¡ºåºå·\r\n                fields.forEach((field, index) => {\r\n                    field.showIndex = index;\r\n                })\r\n            })\r\n        }));\r\n    }\r\n}","import { isToday, format } from 'date-fns';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { IGSPCommonObject, IGSPCommonElement, GSPAssociation, GSPCommonElement, GSPElementDataType, GSPElementObjectType, GSPEnumValue } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from '../chgdr-data-viewer/chgdr-data';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\n\r\nexport class ChgdrConfigHandler {\r\n    private be: GSPBusinessEntity;\r\n    private entityCodeMap: Map<string, IGSPCommonObject> = new Map();\r\n    private entityFieldMap: Map<string, IGSPCommonElement> = new Map();\r\n    private entityFieldShowOrderMap: Map<string, number> = new Map();\r\n    private entityFieldParentMap: Map<string, IGSPCommonElement> = new Map();\r\n\r\n    private entityConfigs: ChgLogConfigEntity[];\r\n    private entityFieldConfigMap: Map<string, ChgLogConfigField> = new Map();\r\n\r\n    public constructor(be: GSPBusinessEntity, entityConfigs: ChgLogConfigEntity[]) {\r\n        //åå§åææBEå¯¹è±¡ä¿¡æ¯\r\n        this.be = be;\r\n        if (!!be) {\r\n            let mainObject = be.MainObject;\r\n            this.updateEntityMap(mainObject, this.entityCodeMap, this.entityFieldMap);\r\n        }\r\n\r\n        //åå§åéç½®ä¿¡æ¯\r\n        this.entityConfigs = entityConfigs || [];\r\n        this.updateEntityConfigs();\r\n\r\n        //æ´æ°æ¾ç¤ºé¡ºåº\r\n        this.updateShowIndex();\r\n    }\r\n\r\n    /** æ´æ°æ¾ç¤ºé¡ºåºå· */\r\n    private updateShowIndex() {\r\n        let entityFieldShowOrderMap: Map<string, number> = new Map();\r\n        //é¦åç¨BEå­æ®µé¡ºåºèµäºåå§é¡ºåºï¼é¿åéç½®ä¸­æ é¡ºåºå·é ææ¾ç¤ºéä¹±\r\n        this.entityFieldMap.forEach((value, key) => {\r\n            entityFieldShowOrderMap.set(key, entityFieldShowOrderMap.size);\r\n        });\r\n        //ç¶åç¨éç½®é¡ºåºæ¿ä»£åå§é¡ºåº\r\n        this.entityFieldConfigMap.forEach((value, key) => {\r\n            if (value.showIndex !== undefined && value.showIndex !== null) {\r\n                entityFieldShowOrderMap.set(key, value.showIndex);\r\n            }\r\n        })\r\n\r\n        this.entityFieldShowOrderMap = entityFieldShowOrderMap;\r\n    }\r\n\r\n    /** æ´æ°éç½®ä¿¡æ¯çç¸å³æ°æ® */\r\n    private updateEntityConfigs() {\r\n        let fieldConfigMap: Map<string, ChgLogConfigField> = new Map();\r\n        this.entityConfigs.forEach(entityConfig => {\r\n            let tabCode = entityConfig.tabCode;\r\n            (entityConfig.fields || []).forEach(field => {\r\n                let fieldLabel = field.fieldLabelId;\r\n                let key = tabCode + \"#\" + fieldLabel;\r\n                fieldConfigMap.set(key, field);\r\n            })\r\n        });\r\n        this.entityFieldConfigMap = fieldConfigMap;\r\n    }\r\n\r\n    private updateEntityMap(entity: IGSPCommonObject, entityCodeMap: Map<string, IGSPCommonObject>, entityFieldMap: Map<string, IGSPCommonElement>) {\r\n        if (!entity) {\r\n            return;\r\n        }\r\n        entityCodeMap.set(entity.Code, entity);\r\n\r\n        //å®ä½å¯¹è±¡çå­æ®µä¿¡æ¯\r\n        entity.ContainElements.forEach(ele => {\r\n            this.updateEntityFieldMap(entity, ele, null, entityFieldMap);\r\n        })\r\n\r\n        //å¤çå­èç¹ä¿¡æ¯\r\n        let children: IGSPCommonObject[] = entity.ContainChildObjects;\r\n        if (!children || !children.length) {\r\n            return;\r\n        }\r\n\r\n        children.forEach(childEntity => {\r\n            this.updateEntityMap(childEntity, entityCodeMap, entityFieldMap);\r\n        })\r\n    }\r\n\r\n    /** æ´æ°BEèç¹çæå®å­æ®µä¿¡æ¯ï¼å¦æè¯¥å­æ®µæ¯å³èå­æ®µï¼åæ¶æ´æ°å¶å¸¦åºå­æ®µ */\r\n    private updateEntityFieldMap(entity: IGSPCommonObject, element: IGSPCommonElement, parentElement: IGSPCommonElement, entityFieldMap: Map<string, IGSPCommonElement>): void {\r\n        let key = entity.Code + \"#\" + element.LabelID;\r\n        entityFieldMap.set(key, element);\r\n        if (parentElement) {\r\n            this.entityFieldParentMap.set(key, parentElement);\r\n        }\r\n\r\n        const childAssociations: GSPAssociation[] = element.ChildAssociations;\r\n        if (!!childAssociations && childAssociations.length > 0) {\r\n            childAssociations.forEach(childAssociation => {\r\n                const refElementCollection: GSPCommonElement[] = childAssociation.RefElementCollection;\r\n                if (!!refElementCollection && refElementCollection.length > 0) {\r\n                    refElementCollection.forEach(rele => {\r\n                        this.updateEntityFieldMap(entity, rele, element, entityFieldMap);\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public sort(items: any[], entityCode: string, fieldLabelIdFunc: (item: any) => string) {\r\n        items.sort((a, b) => {\r\n            const aKey = entityCode + \"#\" + fieldLabelIdFunc(a);\r\n            const bKey = entityCode + \"#\" + fieldLabelIdFunc(b);\r\n            if (!this.entityFieldShowOrderMap.has(aKey) && !this.entityFieldShowOrderMap.has(bKey)) {\r\n                //å¦æåæ¹åæ é¡ºåºå·ï¼åæç§èªç¶æåº\r\n                return aKey.localeCompare(bKey);\r\n            } else if (!this.entityFieldShowOrderMap.has(aKey)) {\r\n                //å¦ææä¸æ¹æ é¡ºåºå·ï¼åæ é¡ºåºå·çé å\r\n                return -1;\r\n            } else if (!this.entityFieldShowOrderMap.has(bKey)) {\r\n                //å¦ææä¸æ¹æ é¡ºåºå·ï¼åæ é¡ºåºå·çé å\r\n                return 1;\r\n            } else {\r\n                //å¦æä¸¤æ¹é½æé¡ºåºå·ï¼åæç§é¡ºåºå·æåº\r\n                const aOrder = this.entityFieldShowOrderMap.get(aKey);\r\n                const bOrder = this.entityFieldShowOrderMap.get(bKey);\r\n                return aOrder - bOrder;\r\n            }\r\n        });\r\n    }\r\n\r\n    /** æ ¼å¼åä¸»å¯¹è±¡èç¹ä¸­å­æ®µçå¼ */\r\n    public formatMainObjectFieldValue(originalValue: string, fieldLabelId: string) {\r\n        let entityCode = this.getMainObjectCode();\r\n        return this.formatFieldValue(originalValue, entityCode, fieldLabelId);\r\n    }\r\n\r\n    /** æ ¼å¼åå­æ®µå¼ */\r\n    public formatFieldValue(originalValue: string, entityCode: string, fieldLabelId: string): string {\r\n        let element: IGSPCommonElement = this.getElement(entityCode, fieldLabelId);\r\n        if (!element) {\r\n            console.error(\"æªæ¾å°ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ã\");\r\n            return originalValue;\r\n        }\r\n        if (!element) {\r\n            return originalValue;\r\n        }\r\n\r\n        try {\r\n            //å¤çåå²éççæ°å­æ ¼å¼\r\n            if ((element.MDataType == GSPElementDataType.Decimal || element.MDataType == GSPElementDataType.Integer)\r\n                && originalValue && originalValue.toLowerCase().includes(\"e\")) {\r\n                //å¦æå­æ®µæ¯æ°å­ç±»åï¼ä¸æ¯ç§å­¦è®¡æ°æ³æ ¼å¼\r\n                //è½¬ä¸ºåè¿å¶æ ¼å¼æ¾ç¤º\r\n                let num = Number(originalValue);\r\n                if (isNaN(num)) {\r\n                    console.log(\"ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ãçå¼ä¸æ¯ææçæ°å­æ ¼å¼ï¼\" + originalValue);\r\n                    return originalValue;\r\n                } else {\r\n                    let result = this.toNonExponential(num);\r\n                    return result;\r\n                }\r\n            }\r\n\r\n            //å¤çå¸å°å¼ç±»å\r\n            if (element.MDataType == GSPElementDataType.Boolean) {\r\n                //æ³¨æï¼new Boolean(\"false\") == true\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    return originalValue;\r\n                } else if (originalValue.toLowerCase() == \"false\") {\r\n                    return \"å¦\";\r\n                } else if (originalValue.toLowerCase() == \"true\") {\r\n                    return \"æ¯\";\r\n                } else {\r\n                    return originalValue;\r\n                }\r\n            }\r\n\r\n            //å¤çæ¥ææ ¼å¼\r\n            if (element.MDataType == GSPElementDataType.Date) {\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //ä¸åå«å¼ï¼ç´æ¥è¿ååå§å¼\r\n                    return originalValue;\r\n                } else {\r\n                    let date = new Date(originalValue);\r\n                    let str = format(date, \"yyyy-MM-dd\");\r\n                    return str;\r\n                }\r\n            }\r\n\r\n            //å¤çæ¥ææ¶é´æ ¼å¼\r\n            if (element.MDataType == GSPElementDataType.DateTime) {\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //ä¸åå«å¼ï¼ç´æ¥è¿ååå§å¼\r\n                    return originalValue;\r\n                } else {\r\n                    let date = new Date(originalValue);\r\n                    let str = format(date, \"yyyy-MM-dd HH:mm:ss\");\r\n                    return str;\r\n                }\r\n            }\r\n\r\n            //å¤çæä¸¾æ ¼å¼\r\n            if (element.ObjectType == GSPElementObjectType.Enum) {\r\n                let enumValues: GSPEnumValue[] = element.ContainEnumValues || [];\r\n                let enumValue = enumValues.find(item => item.Value == originalValue);\r\n                if (enumValue) {\r\n                    return enumValue.Name;\r\n                } else if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //å¦ææ¾ä¸å°å¯¹åºçæä¸¾é¡¹ï¼å¹¶ä¸åå§å¼ä¸ºç©ºï¼è¯´ææªèµå¼ï¼ä¸æ¥é\r\n                    return originalValue;\r\n                } else {\r\n                    //æå°å¼å¸¸\r\n                    console.log(\"ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ãçå¼æªæ¾å°å¹éçæä¸¾é¡¹ï¼\" + originalValue);\r\n                    return originalValue;\r\n                }\r\n            }\r\n\r\n            return originalValue;\r\n        } catch (error) {\r\n            console.error(\"ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ãçå¼ã\" + originalValue + \"ãæ ¼å¼ååºéï¼\", error);\r\n            return originalValue;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** JavaScriptä¸­ç§å­¦è®¡æ°æ³è½¬åä¸ºæ°å¼å­ç¬¦ä¸²å½¢å¼ã\r\n     * ä»¥ä¸ä¸¤ç§æåµï¼JavaScript ä¼èªå¨å°æ°å¼è½¬ä¸ºç§å­¦è®¡æ°æ³è¡¨ç¤º\r\n     * (1) å°äº1ä¸å°æ°ç¹åé¢å¸¦æ6ä¸ª0ä»¥ä¸çæµ®ç¹æ°å¼ï¼\r\n     * (2) æ´æ°ä½æ°å­å¤äº21ä½ï¼\r\n     * é¦åççæ´æ°ä½æ°å­å¤äº21ä½çæåµï¼å¶å®è¿ä¸ªä¸è¬ä¸ä¼ç¢°å°ï¼æ´æ°ä½æ°å­å¤äº21ä½å·²ç»è¶åºäº JavaScript ç²¾ç¡®æ´æ°èå´ã\r\n     * è¿ä¸ªæ¹æ³ç¨äºå¤çå°æ°é®é¢\r\n     * fromï¼https://www.cnblogs.com/xianfengzhike/p/9939029.html */\r\n    private toNonExponential(num) {\r\n        var m = num.toExponential().match(/\\d(?:\\.(\\d*))?e([+-]\\d+)/);\r\n        return num.toFixed(Math.max(0, (m[1] || '').length - m[2]));\r\n    }\r\n\r\n    public getBeName(): string {\r\n        return this.be ? this.be.Name : null;\r\n    }\r\n\r\n    public getMainObjectCode(): string {\r\n        return this.be && this.be.MainObject ? this.be.MainObject.Code : null;\r\n    }\r\n\r\n    public getElement(entityCode: string, fieldLabelId: string): IGSPCommonElement {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        return this.entityFieldMap.get(key);\r\n    }\r\n\r\n    public getParentElement(entityCode: string, fieldLabelId: string): IGSPCommonElement {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        return this.entityFieldParentMap.get(key);\r\n    }\r\n\r\n    public getEntityNameOrDefault(entityCode: string) {\r\n        let entity = this.entityCodeMap.get(entityCode);\r\n        return !!entity ? entity.Name : entityCode;\r\n    }\r\n\r\n    public getEntityFieldNameOrDefault(entityCode: string, fieldLabelId: string) {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        let fieldConfig = this.entityFieldConfigMap.get(key);\r\n        if (fieldConfig && fieldConfig.fieldName && fieldConfig.fieldName != \"\") {\r\n            //ä¼åè¿åéç½®çåç§°\r\n            return fieldConfig.fieldName;\r\n        }\r\n        //å¦æä¸å­å¨éç½®åç§°ï¼åè¿åBEå­æ®µåç§°\r\n        let ele = this.entityFieldMap.get(key);\r\n        return !!ele ? ele.Name : fieldLabelId;\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrConfigHandler } from './chgdr-config-handler';\r\nimport { ChgdrConfigService } from './chgdr-config.service';\r\nimport { ChgdrMetadataService } from './chgdr-metadata.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrInnerService {\r\n    private beMetadataCache: Map<string, ChgdrConfigHandler> = new Map();\r\n\r\n    constructor(private http: HttpService,\r\n        private sessionService: SessionService,\r\n        private metadataService: GSPMetadataRTService,\r\n        private chgdrMetadataService: ChgdrMetadataService,\r\n        private chgdrConfigService: ChgdrConfigService,\r\n        private injector: Injector\r\n    ) { }\r\n\r\n    /** è·åBEåæ°æ® */\r\n    public getChgdrConfigHandler(beId: string): Observable<ChgdrConfigHandler> {\r\n        if (this.beMetadataCache.has(beId)) {\r\n            let be = this.beMetadataCache.get(beId);\r\n            return of(be);\r\n        } else {\r\n            let requests = [];\r\n            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));\r\n            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));\r\n\r\n            return forkJoin(requests).pipe(map(data => {\r\n                const be = data[0];\r\n                const entityConfigs: ChgLogConfigEntity[] = data[1] || [];\r\n                const handler = new ChgdrConfigHandler(be, entityConfigs);\r\n                this.beMetadataCache.set(beId, handler);\r\n                return handler;\r\n            }));\r\n        }\r\n    }\r\n}\r\n","import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeColumnItem, ChgdrData, ChgdrDataEntityNode, ChgdrDataRowNode } from './chgdr-data';\r\nimport { GSPAssociation, GSPCommonElement, GSPCommonObject, IGSPCommonElement, IGSPCommonObject } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { ChgdrDataBuilder } from './chgdr-data-builder';\r\nimport { ChgdrTreeBuilder, ChgdrTreeNode } from './chgdr-tree-builder';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { ChgdrMetadataService } from '../service/chgdr-metadata.service';\r\nimport { ChgdrConfigService } from '../service/chgdr-config.service';\r\nimport { forkJoin } from 'rxjs';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgdrInnerService } from '../service/chgdr-inner.service';\r\n\r\n@Component({\r\n  selector: 'chgdr-data-viewer',\r\n  templateUrl: './chgdr-data-viewer.component.html',\r\n  styleUrls: ['./chgdr-data-viewer.component.css']\r\n})\r\nexport class ChgdrDataViewerComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  data: ChangeDataHeader;\r\n  @Input() showDataId: boolean = false;\r\n  @ViewChild(\"treeTable\")\r\n  private treeTableComponent: TreeTableComponent\r\n\r\n  treeConfig: any = {\r\n    idField: 'id',\r\n    columns: [\r\n      { field: 'name', title: 'Name', width: 200 }\r\n    ],\r\n    /** å¶å­èç¹å¾æ  */\r\n    leafIcon: 'f-icon f-icon-page-title-type text-info mr-2',\r\n    /** èç¹å±å¼å¾æ  */\r\n    expandIcon: 'f-iconÂ f-icon-file-folder-open text-info mr-2',\r\n    /** èç¹æå å¾æ  */\r\n    collapseIcon: 'f-iconÂ f-icon-file-folder-close text-info mr-2',\r\n    showLevel: -1,\r\n    disabled: false,\r\n    init: false,\r\n    selectValues: []\r\n  };\r\n\r\n  chgdrData: ChgdrData;\r\n  treeData: ChgdrTreeNode[];\r\n  currentNode: ChgdrTreeNode;\r\n\r\n  constructor(private metadataService: GSPMetadataRTService,\r\n    private injector: Injector,\r\n    private chgdrMetadataService: ChgdrMetadataService,\r\n    private chgdrConfigService: ChgdrConfigService,\r\n    private chgdrInnerService: ChgdrInnerService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!!this.data) {\r\n      let beId = this.data.entityId;\r\n      this.chgdrInnerService.getChgdrConfigHandler(beId).subscribe(handler=>{\r\n        this.chgdrData = new ChgdrDataBuilder().buildChgdrData(this.data, handler);\r\n        this.treeData = new ChgdrTreeBuilder().build(this.chgdrData);\r\n        if (this.treeTableComponent) {\r\n          //ç§»é¤å·²éä¸­é¡¹ã\r\n          //é¿åæ´æ¢æ°æ®æºåï¼treeGridæ¾ä¸å°ä¹åçéä¸­æ°æ®ï¼å¯¼è´æ§å¶å°åè­¦\r\n          this.treeTableComponent.clearSelections();\r\n        }\r\n        setTimeout(() => {\r\n          this.treeTableComponent.selectNode(this.treeData[0].id);\r\n        }, 0);\r\n      })\r\n    }\r\n  }\r\n\r\n  public handleTreeSelection($event): void {\r\n    const node: ChgdrTreeNode = $event.node;\r\n    if (this.currentNode != null && this.currentNode.id == node.id) {\r\n      //å¦æéä¸­ç¸åèç¹ï¼ç´æ¥è¿å\r\n      return;\r\n    }\r\n    this.currentNode = node;\r\n  }\r\n}\r\n","export class OperateType {\r\n    /** æ°å¢ */\r\n    static ADD: OperateType = new OperateType(0, \"ADD\", \"æ°å¢\");\r\n    /** ä¿®æ¹ */\r\n    static MODIFY: OperateType = new OperateType(1, \"MODIFY\", \"ä¿®æ¹\");\r\n    /** å é¤ */\r\n    static DELETE: OperateType = new OperateType(2, \"DELETE\", \"å é¤\");\r\n\r\n    private constructor(public ordinal: number, public code: string, public name: string) {\r\n    }\r\n\r\n    public getOrdinal() {\r\n        return this.ordinal;\r\n    }\r\n\r\n    public getCode() {\r\n        return this.code;\r\n    }\r\n\r\n    public getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public static values(): OperateType[] {\r\n        return [OperateType.ADD, OperateType.MODIFY, OperateType.DELETE];\r\n    }\r\n\r\n    public toJson() {\r\n        return this.code;\r\n    }\r\n\r\n    public static parse(obj: any): OperateType {\r\n        if (obj === undefined || obj === null) {\r\n            return null;\r\n        }\r\n        if (obj instanceof OperateType) {\r\n            return obj;\r\n        }\r\n        if (typeof obj === \"string\") {\r\n            return OperateType.values().find(ot => ot.code == obj);\r\n        }\r\n        if (typeof obj === \"number\") {\r\n            return OperateType.values().find(ot => ot.ordinal == obj);\r\n        }\r\n        if (!!obj.code) {\r\n            return OperateType.values().find(ot => ot.code == obj.code);\r\n        }\r\n        return null;\r\n    }\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class MapUtil {\r\n    /** å°Mapè½¬ä¸ºObjectï¼ä¾¿äºåºååãï¼å ä¸ºJSON.stringfy(Map)è¿åçå¼æ»ä¸º{}ï¼ */\r\n    static convertMapToObject(map: Map<String, any>) {\r\n        if (!map) {\r\n            return null;\r\n        }\r\n        let obj = Object.create(null);\r\n        map.forEach((value, key: any) => {\r\n            obj[key] = value;\r\n        })\r\n        return obj;\r\n    }\r\n\r\n    /** å°Objectè½¬ä¸ºMapï¼å ä¸ºJSON.parseæ æ³è¯å«ç±»åï¼ååºååååªè½æ¯Objectç±»å */\r\n    static convertObjectToMap(obj: any): Map<string, any> {\r\n        if (obj === undefined || obj === null) {\r\n            return null;\r\n        }\r\n\r\n        let strMap = new Map();\r\n        for (let k of Object.keys(obj)) {\r\n            strMap.set(k, obj[k]);\r\n        }\r\n        return strMap;\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ChangeDataHeader } from '../model/change-data-header';\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\nimport { OperateType } from '../model/operate-type';\nimport { MapUtil } from '../util/map.util';\n\nconst ServerIP = '/';\nconst chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChgdrService {\n  private rootDataCodeFieldsMap: Map<string, ChgLogConfigField[]> = new Map();\n\n  constructor(private http: HttpService,\n    private sessionService: SessionService,\n    private injector: Injector) { }\n\n  public queryChangeDataHeader(currentQueryParam: ChangeDataQueryParam): Observable<any> {\n    let obj: any = Object.assign({}, currentQueryParam);\n    if (currentQueryParam.dataCode) {\n      obj.dataCode = MapUtil.convertMapToObject(currentQueryParam.dataCode);\n    }\n\n    let json = JSON.stringify(obj);\n    let queryParam = encodeURIComponent(json);\n    let url = `${chgdrUrl}?queryParam=${queryParam}`;\n    return this.http.get(url).pipe(map(data => {\n      if (!data) {\n        return data;\n      }\n      let queryResult: ChangeDataQueryResult = <ChangeDataQueryResult><unknown>data;\n      queryResult && queryResult.headers && queryResult.headers.forEach(header => {\n        //TODO å¾å ï¼å¼å®¹èæ°æ®æ ¼å¼\n        if (typeof header.dataCode == \"string\") {\n          header.dataCode = JSON.parse(header.dataCode);\n        }\n\n        header.dataCode = MapUtil.convertObjectToMap(header.dataCode);\n        header.changeTime = this.toDate(header.changeTime);\n        header.operateType = OperateType.parse(header.operateType);\n      })\n      return queryResult;\n    }));\n  }\n\n  public getRootEntityDataCodeFields(beId: string): Observable<ChgLogConfigField[]> {\n    if (!beId) {\n      return of([]);\n    }\n    if (this.rootDataCodeFieldsMap.has(beId)) {\n      //ç´æ¥ä»ç¼å­ä¸­è·å\n      return of(this.rootDataCodeFieldsMap.get(beId));\n    } else {\n      //è·åç»æå¹¶å­å¥ç¼å­\n      let url = `${chgdrUrl}/rootDataCodeFields?beId=${beId}`;\n      return (<Observable<ChgLogConfigField[]>><unknown>(this.http.get(url)))\n        .pipe(tap(data => this.rootDataCodeFieldsMap.set(beId, data)));\n    }\n  }\n\n  /** å°å­ç¬¦ä¸²ææ°å­è½¬ä¸ºDate */\n  private toDate(date: any): Date {\n    if (typeof date == \"string\") {\n      return new Date(date);\n    } else if (typeof date == \"number\") {\n      return new Date(date);\n    } else {\n      return date;\n    }\n  }\n\n  public getChangeData(id: string, changeTime: Date): Observable<any> {\n    let json = JSON.stringify(changeTime);\n    let queryParam = encodeURIComponent(json);\n    let url = `${chgdrUrl}/${id}?changeTime=${queryParam}`;\n    return this.http.get(url).pipe(map(data => {\n      if (!data) {\n        return data;\n      }\n      let sh: ChangeDataHeader = <ChangeDataHeader><unknown>data;\n      //TODO å¾å ï¼å¼å®¹èæ°æ®æ ¼å¼\n      if (typeof sh.dataCode == \"string\") {\n        sh.dataCode = JSON.parse(sh.dataCode);\n      }\n      sh.dataCode = MapUtil.convertObjectToMap(sh.dataCode);\n      sh.changeTime = this.toDate(sh.changeTime);\n      sh.operateType = OperateType.parse(sh.operateType);\n\n      sh.rows = sh.rows || [];\n\n      sh.rows.forEach(row => {\n        if (!row) {\n          return;\n        }\n        row.operateType = OperateType.parse(row.operateType);\n        //TODO å¾å ï¼å¼å®¹èæ°æ®æ ¼å¼\n        if (typeof row.dataCode == \"string\") {\n          row.dataCode = JSON.parse(row.dataCode);\n        }\n        row.dataCode = MapUtil.convertObjectToMap(row.dataCode);\n        row.oldContent = <Map<string, string>>MapUtil.convertObjectToMap(row.oldContent) || new Map();\n        row.newContent = <Map<string, string>>MapUtil.convertObjectToMap(row.newContent) || new Map();\n      });\n      return sh;\n    }));\n  }\n}\n","export class ChangeDataQueryParam {\r\n    /** ç¨æ·ID */\r\n    userId: string;\r\n    /** å®ä½ID */\r\n    entityId: string;\r\n    /** æ°æ®ä¸»é® */\r\n    dataId: string;\r\n    /** æ°æ®ç¼å· */\r\n    dataCode: Map<string, string>;\r\n    /** åæ´æ¶é´-èµ·å§ */\r\n    changeTimeStart: Date;\r\n    /** åæ´æ¶é´-ç»æ */\r\n    changeTimeEnd: Date;\r\n    /** æ¯é¡µæ°é */\r\n    pageSize: number;\r\n    /** é¡µç ï¼ä»1å¼å§ */\r\n    pageIndex: number;\r\n}","import { ChangeDataHeader } from './change-data-header';\r\n\r\nexport class ChangeDataQueryResult {\r\n    /** å½åé¡µé¢ï¼ä»1å¼å§ */\r\n    pageIndex: number;\r\n    /** æ¯é¡µæ°é */\r\n    pageSize: number;\r\n    /** æ»æ¡æ° */\r\n    total: number;\r\n    /** å½åé¡µæ°æ® */\r\n    headers: ChangeDataHeader[];\r\n}","export class ErrorUtil {\r\n    static getErrorMessage(e: any) {\r\n        if (!e) {\r\n            return \"\";\r\n        } else if (!e.error) {\r\n            return \"\";\r\n        } else if (!e.error.Message) {\r\n            return \"\";\r\n        } else {\r\n            return e.error.Message;\r\n        }\r\n    }\r\n}","export class TimeUtil{\r\n    public static getStartTimeInDay(date:Date){\r\n        let d:Date = new Date(date);\r\n        d.setHours(0);\r\n        d.setMinutes(0);\r\n        d.setSeconds(0);\r\n        d.setMilliseconds(0);\r\n        return d;\r\n    }\r\n\r\n    public static getEndTimeInDay(date:Date){\r\n        let d:Date = new Date(date);\r\n        d.setHours(23);\r\n        d.setMinutes(59);\r\n        d.setSeconds(59);\r\n        d.setMilliseconds(999);\r\n        return d;\r\n    }\r\n}","import { Component, HostBinding, Injector, Input, OnChanges, OnInit, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { DialogComponent } from '@farris/ui-dialog';\nimport { MessagerService } from '@farris/ui-messager';\nimport { NotifyService } from '@farris/ui-notify';\nimport { ChgdrService } from '../service/chgdr.service';\nimport { ChangeDataHeader } from '../model/change-data-header';\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\nimport { OperateType } from '../model/operate-type';\nimport { ErrorUtil } from '../util/error.util';\nimport { TimeUtil } from '../util/time.util';\n\n@Component({\n  selector: 'chgdr-list',\n  templateUrl: './chgdr-list.component.html',\n  styleUrls: ['./chgdr-list.component.css']\n})\nexport class ChgdrListComponent implements OnInit, OnChanges {\n  @HostBinding('class.f-utils-fill-flex-column') baseCls = true;\n\n  @Input()\n  /** ä¸å¡å®ä½ID */\n  entityId: string;\n  @Input()\n  /** æ°æ®ID */\n  dataId: string;\n  @Input()\n  /** åæ´æ¶é´-èµ·å§ */\n  changeTimeStart: Date;\n  @Input()\n  /** åæ´æ¶é´-ç»æ */\n  changeTimeEnd: Date;\n\n  private currentQueryParam: ChangeDataQueryParam;\n  chgdrs: ChangeDataQueryResult;\n\n  constructor(private chgdrService: ChgdrService,\n    private messageService: MessagerService,\n    private notifyService: NotifyService,\n    private injector: Injector) { }\n\n  ngOnInit() {\n    let chgdrs = new ChangeDataQueryResult();\n    chgdrs.total = 0;\n    chgdrs.pageSize = 20;\n    chgdrs.pageIndex = 1;\n    chgdrs.headers = [];\n    this.chgdrs = chgdrs;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.changeTimeStart && !this.changeTimeEnd) {\n      //æªå½å¥åæ´æ¶é´èå´ï¼åæ¥è¯¢æè¿ä¸å¨ç\n      this.changeTimeEnd = TimeUtil.getEndTimeInDay(new Date());\n      this.changeTimeStart = TimeUtil.getStartTimeInDay(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000));\n    } else if (!this.changeTimeEnd) {\n      //å¦ææªè®¾ç½®æªè³æ¶é´ï¼åä¸å¼å§æ¶é´ç¸å\n      this.changeTimeEnd = TimeUtil.getEndTimeInDay(this.changeTimeStart);\n    } else if (!this.changeTimeStart) {\n      //å¦ææªè®¾ç½®å¼å§æ¶é´ï¼åä¸æªè³æ¶é´ç¸å\n      this.changeTimeStart = TimeUtil.getEndTimeInDay(this.changeTimeEnd);\n    }\n    if (!!this.entityId) {\n      let param = this.buildQueryParam();\n      this.doQuery(param);\n    }\n  }\n\n  public query(){\n    let param = this.buildQueryParam();\n    this.doQuery(param);\n  }\n\n  private buildQueryParam() {\n    let param = new ChangeDataQueryParam();\n    param.pageIndex = 1;\n    param.pageSize = 20;\n    param.entityId = this.entityId;\n    param.dataId = this.dataId;\n    param.changeTimeStart = this.changeTimeStart;\n    param.changeTimeEnd = this.changeTimeEnd;\n    return param;\n  }\n\n  private doQuery(param) {\n    this.chgdrService.queryChangeDataHeader(param).subscribe(data => {\n      this.currentQueryParam = param;\n      this.chgdrs = data;\n    }, error => {\n      console.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºé\", error);\n      this.messageService.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºéï¼\" + ErrorUtil.getErrorMessage(error));\n    });\n  }\n\n  onPageChanged($event) {\n    if (!$event) {\n      return;\n    }\n\n    if ($event.pageIndex) {\n      this.currentQueryParam.pageIndex = $event.pageIndex;\n    }\n    if ($event.pageSize) {\n      this.currentQueryParam.pageSize = $event.pageSize;\n    }\n    this.doQuery(this.currentQueryParam);\n  }\n\n  onPageSizeChanged($event) {\n    this.currentQueryParam.pageSize = $event;\n    this.doQuery(this.currentQueryParam);\n  }\n}\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-row-baseinfo-form',\r\n  templateUrl: './chgdr-row-baseinfo-form.component.html',\r\n  styleUrls: ['./chgdr-row-baseinfo-form.component.css']\r\n})\r\nexport class ChgdrRowBaseinfoFormComponent implements OnInit {\r\n  @Input()\r\n  chgdrTreeNode:ChgdrTreeNode;\r\n  @Input() showDataId:boolean = false;\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { ChangeColumnItem, ChgdrDataRowNode } from '../chgdr-data-viewer/chgdr-data';\r\nimport { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';\r\nimport { OperateType } from '../model/operate-type';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-row-grid',\r\n  templateUrl: './chgdr-row-grid.component.html',\r\n  styleUrls: ['./chgdr-row-grid.component.css']\r\n})\r\nexport class ChgdrRowGridComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  chgdrTreeNode: ChgdrTreeNode;\r\n  @ViewChild(\"chgdrRowGrid\")\r\n  dataGrid: DatagridComponent;\r\n\r\n  columns: any[];\r\n  data: ChangeColumnItem[];\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  ngOnInit() {\r\n    this.columns = [\r\n      { field: 'fieldName', width: 130, title: 'å­æ®µå' },\r\n      { field: 'oldValue', width: 130, title: 'åå¼', showTips: true },\r\n      { field: 'newValue', width: 130, title: 'åæ´å¼', showTips: true }\r\n    ];\r\n    let oldValueField = this.columns[1];\r\n    let newValueField = this.columns[2];\r\n\r\n    if (!!this.chgdrTreeNode) {\r\n      //æ ¹æ®åå§çåæ´ç±»åæ´æ¹æ¾ç¤ºåçä¿¡æ¯\r\n      //æ­¤å¤ä¸è½ç´æ¥è°ç¨DataGridç»ä»¶çæ¹æ³æ´æ¹ï¼å ä¸ºæ­¤å¤å°æªåå»ºDataGrid\r\n      let type: OperateType = this.chgdrTreeNode.chgdrRow.operateType;\r\n      if (type == OperateType.ADD) {\r\n        oldValueField.visible = false;\r\n        newValueField.title = \"å¼\";\r\n      } else if (type == OperateType.DELETE) {\r\n        newValueField.visible = false;\r\n        oldValueField.title = \"å¼\";\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    //åæ¥åæ´è¡ç±»å\r\n    let oldType: OperateType;\r\n    if (!changes.chgdrTreeNode) {\r\n      oldType = null;\r\n    } else if (!changes.chgdrTreeNode.previousValue) {\r\n      oldType = null;\r\n    } else {\r\n      oldType = changes.chgdrTreeNode.previousValue.chgdrRow.operateType;\r\n    }\r\n\r\n    //ç°å¨åæ´è¡ç±»å\r\n    let newType: OperateType;\r\n    if (!changes.chgdrTreeNode) {\r\n      newType = null;\r\n    } else if (!changes.chgdrTreeNode.currentValue) {\r\n      newType = null;\r\n    } else {\r\n      newType = changes.chgdrTreeNode.currentValue.chgdrRow.operateType;\r\n    }\r\n\r\n    if (oldType == newType || !this.dataGrid || !this.dataGrid.columns) {\r\n      //å¦ææ°èç±»åä¸è´(æDataGridå°æªåå»º)ï¼åä¸åå¨\r\n      //do nothing\r\n    } else if (newType == OperateType.ADD) {\r\n      this.dataGrid.showColumn(\"newValue\");\r\n      this.dataGrid.hideColumn(\"oldValue\");\r\n      this.dataGrid.setColumnTitle(\"newValue\", \"å¼\");\r\n    } else if (newType == OperateType.DELETE) {\r\n      this.dataGrid.showColumn(\"oldValue\");\r\n      this.dataGrid.hideColumn(\"newValue\");\r\n      this.dataGrid.setColumnTitle(\"oldValue\", \"å¼\");\r\n    } else {\r\n      this.dataGrid.showColumn(\"oldValue\");\r\n      this.dataGrid.showColumn(\"newValue\");\r\n      this.dataGrid.setColumnTitle(\"oldValue\", \"åå¼\");\r\n      this.dataGrid.setColumnTitle(\"newValue\", \"åæ´å¼\");\r\n    }\r\n\r\n    if (changes.chgdrTreeNode && changes.chgdrTreeNode.currentValue) {\r\n      this.data = changes.chgdrTreeNode.currentValue.chgdrRow.changes;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-chgdr-list-dialog-content',\n  templateUrl: './chgdr-list-dialog-content.component.html',\n  styleUrls: ['./chgdr-list-dialog-content.component.css']\n})\nexport class ChgdrListDialogContentComponent implements OnInit {\n  @Input()\n  /** ä¸å¡å®ä½ID */\n  entityId: string;\n  @Input()\n  /** æ°æ®ID */\n  dataId: string;\n\n  constructor(private injector: Injector) { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { ChgdrListDialogContentComponent } from '../chgdr-list-dialog-content/chgdr-list-dialog-content.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrListUiService {\r\n\r\n    constructor(\r\n        private resolver: ComponentFactoryResolver,\r\n        private injector: Injector,\r\n        private modalService: BsModalService,\r\n        private messagerService: MessagerService\r\n    ) { }\r\n\r\n    showDialog(entityId: string, dataId: string) {\r\n        return this.create(entityId, dataId);\r\n    }\r\n\r\n    private create(entityId: string, dataId: string) {\r\n        if(!entityId){\r\n            console.error(\"åå»ºä¸å¡åæ´æ¥å¿åè¡¨ç»ä»¶å¤±è´¥ï¼ä¸å¡å®ä½ä¸è½ä¸ºç©ºï¼è¯·æ£æ¥\", entityId, dataId);\r\n            return;\r\n        }\r\n\r\n        let fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        let modalConfig = {\r\n            title: 'åæ´æ¥å¿åè¡¨',\r\n            width: 1000,\r\n            height: 550,\r\n            resizable: true,\r\n            showButtons: false,\r\n            showMaxButton: true\r\n        }\r\n\r\n        cmpRef.instance.entityId = entityId;\r\n        cmpRef.instance.dataId = dataId;\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n    }\r\n\r\n}\r\n","import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { DataColumn } from '@farris/ui-common/column';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { ChgdrService } from '../service/chgdr.service';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { ErrorUtil } from '../util/error.util';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { tap } from 'rxjs/operators';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrMetadataService } from '../service/chgdr-metadata.service';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { GSPCommonElement } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChgdrInnerService } from '../service/chgdr-inner.service';\r\nimport { ChgdrConfigHandler } from '../service/chgdr-config-handler';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-header-datagrid',\r\n  templateUrl: './chgdr-header-datagrid.component.html',\r\n  styleUrls: ['./chgdr-header-datagrid.component.css']\r\n})\r\nexport class ChgdrHeaderDatagridComponent implements OnInit {\r\n  @HostBinding('class.f-utils-fill') baseCls = true;\r\n  @Input() chgdrs: ChangeDataQueryResult;\r\n  @Input() showDataId: boolean = true;\r\n  headers: ChangeDataHeader[] = [];\r\n  dataCodeFields: ChgLogConfigField[] = [];\r\n  private chgdrConfigHandler: ChgdrConfigHandler;\r\n  @Output()\r\n  pageChanged: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  pageSizeChanged: EventEmitter<number> = new EventEmitter();\r\n\r\n  // è·åå®ä¹çååæ ¼æ¨¡æ¿\r\n  @ViewChild('opCell') opCell: TemplateRef<any>;\r\n  @ViewChild(\"chgdrInfoDialog\")\r\n  chgdrInfoDialog: DialogComponent;\r\n\r\n  columns: any[];\r\n\r\n  currentChgdrData: ChangeDataHeader;\r\n\r\n  constructor(private chgdrService: ChgdrService,\r\n    private messageService: MessagerService,\r\n    private notifyService: NotifyService,\r\n    private ref: ChangeDetectorRef,\r\n    private chgdrInnerService: ChgdrInnerService,\r\n    private injector: Injector) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.resetColumnAndData(null, []);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!changes.chgdrs) {\r\n      //å¦æchgdrsæ²¡ææ´æ°ï¼åç´æ¥è¿å\r\n      return;\r\n    }\r\n\r\n    let prevEntityId = this.getEntityId(changes.chgdrs.previousValue);\r\n    let curEntityId = this.getEntityId(changes.chgdrs.currentValue);\r\n    let requests = [\r\n      this.updateChgdrConfigHandler(curEntityId),\r\n      this.updateDataCodeFields(prevEntityId, curEntityId)\r\n    ]\r\n    forkJoin(requests).subscribe(data => {\r\n      let chgdrDatas: ChangeDataQueryResult = changes.chgdrs.currentValue;\r\n      if (!!chgdrDatas) {\r\n        this.formatHeaders(chgdrDatas.headers);\r\n      }\r\n\r\n      //å¦æä¸å¡å®ä½åæ´ï¼åéç½®åä¿¡æ¯\r\n      if (curEntityId != null && curEntityId != prevEntityId) {\r\n        this.resetColumnAndData(curEntityId, chgdrDatas.headers);\r\n      } else {\r\n        this.headers = chgdrDatas.headers;\r\n      }\r\n    }, err => {\r\n      console.error(\"è·åBEã\" + curEntityId + \"ãçéç½®çä¸å¡åæ´æ¥å¿çä¸å¡ç¼å·å¤±è´¥ï¼\", err);\r\n      this.messageService.error(\"è·åä¸å¡ç¼å·éç½®å¤±è´¥ï¼\" + ErrorUtil.getErrorMessage(err));\r\n    });\r\n  }\r\n\r\n  /** æ´æ°ä¸å¡å®ä½åæ°æ® */\r\n  private updateChgdrConfigHandler(entityId: string) {\r\n    if (entityId) {\r\n      return this.chgdrInnerService.getChgdrConfigHandler(entityId).pipe(tap(data => this.chgdrConfigHandler = data));\r\n    } else {\r\n      return of(this.chgdrConfigHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ´æ°dataCodeFieldæ°æ®\r\n   * @param prevEntityId åBeId\r\n   * @param curEntityId å½åBeId\r\n   */\r\n  updateDataCodeFields(prevEntityId: string, curEntityId: string) {\r\n    if (curEntityId != null && curEntityId != prevEntityId) {\r\n      //åªæåçåæ´æ¶ææ´æ°\r\n      return this.chgdrService.getRootEntityDataCodeFields(curEntityId).pipe(tap(data => this.dataCodeFields = data || []));\r\n    } else {\r\n      //å¦åç´æ¥è¿åå½åå¼\r\n      return of(this.dataCodeFields);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ ¼å¼åheadersãä¸»è¦æ¯è§£æå¶ä¸­çdataCodeï¼å°å¶è½¬ä¸ºObject\r\n   * ä½¿ç¨dataCodeObjå­æ¾dataCodeè§£æåçç»æ\r\n   * dataCodeObjå±æ§å¨ChangeDataHeaderä¸­ä¸å­å¨ï¼æ­¤å¤éè¿å¼ºå¶èµå¼ä½¿ç¨ï¼å¹¶ä¸åªéäºè¯¥å¤ä½¿ç¨ã\r\n   */\r\n  private formatHeaders(headers: ChangeDataHeader[]) {\r\n    if (!headers) {\r\n      return;\r\n    }\r\n    headers.forEach(header => {\r\n      let dataCodeObj: any;\r\n      this.formatDataCodeMap(header.dataCode);\r\n      if (header.dataCode && header.dataCode.size == 1 && header.dataCode.has(\"_$dataCode\")) {\r\n        //å¼å®¹èæ°æ®\r\n        //èæ°æ®dataCodeä¸ºèªç±ææ¬\r\n        dataCodeObj = {};\r\n        if (this.dataCodeFields && this.dataCodeFields.length > 0) {\r\n          dataCodeObj[this.dataCodeFields[0].fieldLabelId] = header.dataCode.get(\"_$dataCode\");\r\n        }\r\n      } else {\r\n        dataCodeObj = MapUtil.convertMapToObject(header.dataCode);\r\n      }\r\n      (<any>header).dataCodeObj = dataCodeObj;\r\n    })\r\n  }\r\n\r\n  /** æ ¼å¼åä¸å¡ä¸»é®Map */\r\n  private formatDataCodeMap(dataCode: Map<string, string>): void {\r\n    if (!dataCode || !this.chgdrConfigHandler) {\r\n      return;\r\n    }\r\n    Array.from(dataCode.keys()).forEach(fieldLabelId => {\r\n      let value = dataCode.get(fieldLabelId);\r\n      let formatedValue = this.chgdrConfigHandler.formatMainObjectFieldValue(value, fieldLabelId);\r\n      dataCode.set(fieldLabelId, formatedValue);\r\n    })\r\n  }\r\n\r\n  private getEntityId(chgdrs: ChangeDataQueryResult): string {\r\n    if (!chgdrs || !chgdrs.headers || chgdrs.headers.length == 0) {\r\n      return null;\r\n    } else {\r\n      return chgdrs.headers[0].entityId;\r\n    }\r\n  }\r\n\r\n  private resetColumnAndData(entityId: string, headers: ChangeDataHeader[]) {\r\n    let columns: any[] = [\r\n      { field: 'userName', width: 130, title: 'ç¨æ·' },\r\n      { field: 'changeTime', width: 130, title: 'æ¶é´', formatter: { type: 'datetime', options: { format: 'yyyyå¹´MMæddæ¥ HH:mm:ss' } } },\r\n      { field: 'operateType.name', width: 60, title: 'æä½ç±»å' },\r\n      { field: 'dataId', width: 130, title: 'ææ¯ä¸»é®', visible: this.showDataId }];\r\n    //{field: 'dataCode', width: 130, title: 'ä¸å¡ç¼å·'},\r\n    // {field: 'reason', width: 130, title: 'åæ´åå '},\r\n    this.dataCodeFields.forEach((field) => {\r\n      let column: DataColumn = {\r\n        field: \"dataCodeObj.\" + field.fieldLabelId,\r\n        title: field.fieldName,\r\n        width: 130\r\n      };\r\n      columns.push(column);\r\n    })\r\n    let opColumn = { title: 'æä½', width: 130, template: this.opCell, halign: 'center', align: 'center' };\r\n    columns.push(opColumn);\r\n\r\n    //å ä¸ºdatagridä¸åè®¸åæ¶åæ´dataåcolumnï¼å æ­¤æå¨è§¦åèæ£æ¥é¿ååºé\r\n    //åå¨ç©ºæ°æ®çåºç¡ä¸åæ´å\r\n    this.headers = [];\r\n    this.ref.detectChanges();\r\n    this.columns = columns;\r\n    this.ref.detectChanges();\r\n    //å¨éæ°èµå¼æ°æ®\r\n    this.headers = headers;\r\n  }\r\n\r\n  onPageChanged($event) {\r\n    this.pageChanged.emit($event);\r\n  }\r\n\r\n  onPageSizeChanged($event) {\r\n    this.pageSizeChanged.emit($event);\r\n  }\r\n\r\n  showChangeDetail(ctx) {\r\n    let header: ChangeDataHeader = ctx.rowData;\r\n    if (!header) {\r\n      return;\r\n    }\r\n    this.chgdrService.getChangeData(header.id, header.changeTime).subscribe(data => {\r\n      if (!data) {\r\n        this.notifyService.error(\"æªæ¾å°ç¼å·ä¸ºã\" + header.id + \"ãçåæ´æ¥å¿\");\r\n      } else {\r\n        this.currentChgdrData = data;\r\n        this.chgdrInfoDialog.show();\r\n      }\r\n    }, error => {\r\n      console.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºé\", error);\r\n      this.messageService.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºéï¼\" + ErrorUtil.getErrorMessage(error));\r\n    })\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule, registerLocaleData } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { SplitterModule } from \"@farris/ui-splitter\";\r\nimport { AngularDraggableModule } from '@farris/ui-draggable';\r\nimport { DatagridModule } from \"@farris/ui-datagrid\";\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { FarrisSectionModule } from \"@farris/ui-section\";\r\nimport { MessagerModule, MessagerService } from '@farris/ui-messager';\r\nimport { NotifyModule, NotifyService } from '@farris/ui-notify';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\n\r\nimport { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';\r\nimport { MetadataRTSelectModule, SelectMetadataRTComponent, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';\r\n\r\nimport { ChgdrDataViewerComponent } from './chgdr-data-viewer/chgdr-data-viewer.component';\r\n\r\nimport zh from '@angular/common/locales/zh';\r\nimport { ChgdrListComponent } from './chgdr-list/chgdr-list.component';\r\nimport { ChgdrRowBaseinfoFormComponent } from './chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component';\r\nimport { ChgdrRowGridComponent } from './chgdr-row-grid/chgdr-row-grid.component';\r\nimport { ChgdrListUiService } from './service/chgdr-list-ui.service';\r\nimport { ChgdrListDialogContentComponent } from './chgdr-list-dialog-content/chgdr-list-dialog-content.component';\r\nimport { ChgdrHeaderDatagridComponent } from './chgdr-header-datagrid/chgdr-header-datagrid.component';\r\nimport { ChgdrMetadataService } from './service/chgdr-metadata.service';\r\nimport { ChgdrConfigService } from './service/chgdr-config.service';\r\nimport { ChgdrInnerService } from './service/chgdr-inner.service';\r\nimport { ChgdrService } from '../public-api';\r\nregisterLocaleData(zh);\r\n\r\n@NgModule({\r\n  declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    SplitterModule,\r\n    AngularDraggableModule,\r\n    DatagridModule,\r\n    TreeTableModule,\r\n    FarrisSectionModule,\r\n    MessagerModule.forRoot(),\r\n    NotifyModule,\r\n    FarrisDialogModule,\r\n    FarrisDatePickerModule,\r\n    MetadataRTSelectModule,\r\n    GSPMetadataRTServiceModule.forRoot('')\r\n  ],\r\n  providers: [\r\n    MessagerService,\r\n    NotifyService,\r\n    HttpService,\r\n    SessionService,\r\n    CacheService,\r\n    ChgdrListUiService,\r\n    ChgdrMetadataService,\r\n    ChgdrConfigService,\r\n    ChgdrInnerService,\r\n    ChgdrService\r\n  ],\r\n  entryComponents: [\r\n    ChgdrDataViewerComponent,\r\n    ChgdrListComponent,\r\n    ChgdrListDialogContentComponent\r\n  ],\r\n  exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]\r\n})\r\nexport class ChgdrModule { }\r\n","import { ChangeDataRow } from './change-data-row';\r\nimport { OperateType } from './operate-type';\r\n\r\nexport class ChangeDataHeader {\r\n    id: string;\r\n    /**\r\n     * ç¨æ·ID\r\n     */\r\n    userId: string;\r\n    /**\r\n     * ç¨æ·ç¼å·\r\n     */\r\n    userCode: string;\r\n    /**\r\n     * ç¨æ·åç§°\r\n     */\r\n    userName: string;\r\n    /**\r\n     * å®ä½ID\r\n     */\r\n    entityId: string;\r\n    /**\r\n     * æ°æ®ä¸»é®\r\n     */\r\n    dataId: string;\r\n    /**\r\n     * æ°æ®ç¼å·\r\n     */\r\n    dataCode: Map<string, string>;\r\n    /**\r\n     * åæ´æ¶é´\r\n     */\r\n    changeTime: Date;\r\n    /**\r\n     * åæ´ç±»å\r\n     */\r\n    operateType: OperateType;\r\n    /**\r\n     * åæ´åå \r\n     */\r\n    reason: string;\r\n\r\n    /**\r\n     * åæ´è¡åè¡¨\r\n     */\r\n    rows: ChangeDataRow[];\r\n}","import { OperateType } from './operate-type';\r\n\r\nexport class ChangeDataRow {\r\n    id: string;\r\n    /**\r\n     * headeråç \r\n     */\r\n    headerId: string;\r\n    /**\r\n     * å®ä½ç¼å·\r\n     */\r\n    entityCode: string;\r\n    /**\r\n     * æ°æ®ä¸»é®\r\n     */\r\n    dataId: string;\r\n    /**\r\n     * æ°æ®ç¼å·\r\n     */\r\n    dataCode: Map<string, string>;\r\n    /**\r\n     * æä½ç±»å\r\n     */\r\n    operateType: OperateType;\r\n    /**\r\n     * æ§åå®¹\r\n     */\r\n    oldContent: Map<string, string>;\r\n    /**\r\n     * æ°åå®¹\r\n     */\r\n    newContent: Map<string, string>;\r\n    /**\r\n     * ç¶æ°æ®ä¸»é®\r\n     */\r\n    parentDataId: string;\r\n}"],"names":["of","map","Injectable","HttpService","SessionService","GSPMetadataRTService","Injector","tap","GSPElementDataType","format","GSPElementObjectType","forkJoin","Component","Input","ViewChild","tslib_1.__values","ServerIP","chgdrUrl","MessagerService","NotifyService","HostBinding","ComponentFactoryResolver","BsModalService","EventEmitter","ChangeDetectorRef","Output","registerLocaleData","NgModule","CommonModule","FormsModule","SplitterModule","AngularDraggableModule","DatagridModule","TreeTableModule","FarrisSectionModule","MessagerModule","NotifyModule","FarrisDialogModule","FarrisDatePickerModule","MetadataRTSelectModule","GSPMetadataRTServiceModule","CacheService"],"mappings":"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"}
