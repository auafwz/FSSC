/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ChgdrConfigHandler } from './chgdr-config-handler';
import { ChgdrConfigService } from './chgdr-config.service';
import { ChgdrMetadataService } from './chgdr-metadata.service';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@gsp-lcm/metadatart-selector";
import * as i3 from "./chgdr-metadata.service";
import * as i4 from "./chgdr-config.service";
export class ChgdrInnerService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} metadataService
     * @param {?} chgdrMetadataService
     * @param {?} chgdrConfigService
     * @param {?} injector
     */
    constructor(http, sessionService, metadataService, chgdrMetadataService, chgdrConfigService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.chgdrMetadataService = chgdrMetadataService;
        this.chgdrConfigService = chgdrConfigService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    getChgdrConfigHandler(beId) {
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            let be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            /** @type {?} */
            let requests = [];
            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));
            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));
            return forkJoin(requests).pipe(map((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                /** @type {?} */
                const be = data[0];
                /** @type {?} */
                const entityConfigs = data[1] || [];
                /** @type {?} */
                const handler = new ChgdrConfigHandler(be, entityConfigs);
                this.beMetadataCache.set(beId, handler);
                return handler;
            })));
        }
    }
}
ChgdrInnerService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrInnerService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: GSPMetadataRTService },
    { type: ChgdrMetadataService },
    { type: ChgdrConfigService },
    { type: Injector }
];
/** @nocollapse */ ChgdrInnerService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrInnerService_Factory() { return new ChgdrInnerService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i2.GSPMetadataRTService), i0.inject(i3.ChgdrMetadataService), i0.inject(i4.ChgdrConfigService), i0.inject(i0.INJECTOR)); }, token: ChgdrInnerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.beMetadataCache;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.chgdrMetadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.chgdrConfigService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItaW5uZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hnZHItaW5uZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFPMUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQUdoRSxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7Ozs7SUFHMUIsWUFBb0IsSUFBaUIsRUFDekIsY0FBOEIsRUFDOUIsZUFBcUMsRUFDckMsb0JBQTBDLEVBQzFDLGtCQUFzQyxFQUN0QyxRQUFrQjtRQUxWLFNBQUksR0FBSixJQUFJLENBQWE7UUFDekIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLG9CQUFlLEdBQWYsZUFBZSxDQUFzQjtRQUNyQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVB0QixvQkFBZSxHQUFvQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBUWpFLENBQUM7Ozs7OztJQUdFLHFCQUFxQixDQUFDLElBQVk7UUFDckMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTs7Z0JBQzVCLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdkMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakI7YUFBTTs7Z0JBQ0MsUUFBUSxHQUFHLEVBQUU7WUFDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRTlELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUU7O3NCQUNoQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzs7c0JBQ1osYUFBYSxHQUF5QixJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTs7c0JBQ25ELE9BQU8sR0FBRyxJQUFJLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxhQUFhLENBQUM7Z0JBQ3pELElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDeEMsT0FBTyxPQUFPLENBQUM7WUFDbkIsQ0FBQyxFQUFDLENBQUMsQ0FBQztTQUNQO0lBQ0wsQ0FBQzs7O1lBOUJKLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7WUFmekIsV0FBVztZQUFFLGNBQWM7WUFFM0Isb0JBQW9CO1lBV3BCLG9CQUFvQjtZQURwQixrQkFBa0I7WUFiTixRQUFROzs7Ozs7OztJQWtCekIsNENBQXFFOzs7OztJQUV6RCxpQ0FBeUI7Ozs7O0lBQ2pDLDJDQUFzQzs7Ozs7SUFDdEMsNENBQTZDOzs7OztJQUM3QyxpREFBa0Q7Ozs7O0lBQ2xELCtDQUE4Qzs7Ozs7SUFDOUMscUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IEdTUEJ1c2luZXNzRW50aXR5IH0gZnJvbSAnQGdzcC1iZWYvZ3NwLWJlLW1ldGFkYXRhJztcclxuaW1wb3J0IHsgR1NQTWV0YWRhdGFSVFNlcnZpY2UgfSBmcm9tICdAZ3NwLWxjbS9tZXRhZGF0YXJ0LXNlbGVjdG9yJztcclxuaW1wb3J0IHsgZm9ya0pvaW4sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDaGFuZ2VEYXRhSGVhZGVyIH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtaGVhZGVyJztcclxuaW1wb3J0IHsgQ2hhbmdlRGF0YVF1ZXJ5UGFyYW0gfSBmcm9tICcuLi9tb2RlbC9jaGFuZ2UtZGF0YS1xdWVyeS1wYXJhbSc7XHJcbmltcG9ydCB7IENoZ0xvZ0NvbmZpZ0VudGl0eSB9IGZyb20gJy4uL21vZGVsL2NoZ2RyLWNvbmZpZy1lbnRpdHknO1xyXG5pbXBvcnQgeyBDaGdMb2dDb25maWdGaWVsZCB9IGZyb20gJy4uL21vZGVsL2NoZ2RyLWNvbmZpZy1maWVsZCc7XHJcbmltcG9ydCB7IE9wZXJhdGVUeXBlIH0gZnJvbSAnLi4vbW9kZWwvb3BlcmF0ZS10eXBlJztcclxuaW1wb3J0IHsgTWFwVXRpbCB9IGZyb20gJy4uL3V0aWwvbWFwLnV0aWwnO1xyXG5pbXBvcnQgeyBDaGdkckNvbmZpZ0hhbmRsZXIgfSBmcm9tICcuL2NoZ2RyLWNvbmZpZy1oYW5kbGVyJztcclxuaW1wb3J0IHsgQ2hnZHJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9jaGdkci1jb25maWcuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZ2RyTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9jaGdkci1tZXRhZGF0YS5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBDaGdkcklubmVyU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGJlTWV0YWRhdGFDYWNoZTogTWFwPHN0cmluZywgQ2hnZHJDb25maWdIYW5kbGVyPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbWV0YWRhdGFTZXJ2aWNlOiBHU1BNZXRhZGF0YVJUU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNoZ2RyTWV0YWRhdGFTZXJ2aWNlOiBDaGdkck1ldGFkYXRhU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNoZ2RyQ29uZmlnU2VydmljZTogQ2hnZHJDb25maWdTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHsgfVxyXG5cclxuICAgIC8qKiDojrflj5ZCReWFg+aVsOaNriAqL1xyXG4gICAgcHVibGljIGdldENoZ2RyQ29uZmlnSGFuZGxlcihiZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPENoZ2RyQ29uZmlnSGFuZGxlcj4ge1xyXG4gICAgICAgIGlmICh0aGlzLmJlTWV0YWRhdGFDYWNoZS5oYXMoYmVJZCkpIHtcclxuICAgICAgICAgICAgbGV0IGJlID0gdGhpcy5iZU1ldGFkYXRhQ2FjaGUuZ2V0KGJlSWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gb2YoYmUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCByZXF1ZXN0cyA9IFtdO1xyXG4gICAgICAgICAgICByZXF1ZXN0cy5wdXNoKHRoaXMuY2hnZHJNZXRhZGF0YVNlcnZpY2UuZ2V0R1NQQnVzaW5lc3NFbnRpdHkoYmVJZCkpO1xyXG4gICAgICAgICAgICByZXF1ZXN0cy5wdXNoKHRoaXMuY2hnZHJDb25maWdTZXJ2aWNlLmdldEJlQ2hnZHJDb25maWcoYmVJZCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZvcmtKb2luKHJlcXVlc3RzKS5waXBlKG1hcChkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlID0gZGF0YVswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVudGl0eUNvbmZpZ3M6IENoZ0xvZ0NvbmZpZ0VudGl0eVtdID0gZGF0YVsxXSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgQ2hnZHJDb25maWdIYW5kbGVyKGJlLCBlbnRpdHlDb25maWdzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmVNZXRhZGF0YUNhY2hlLnNldChiZUlkLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==