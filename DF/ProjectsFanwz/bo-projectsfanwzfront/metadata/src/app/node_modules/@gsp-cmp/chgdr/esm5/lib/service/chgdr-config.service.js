/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
/** @type {?} */
var CHGDR_CONFIG_ROUTER = '/api/runtime/bcc/v1.0/chgdr/config';
/** @type {?} */
var CHGDR_CONFIG_GET_BY_BIZOBJID_AND_MODELID = CHGDR_CONFIG_ROUTER + "/{bizObjId}/{modelId}";
/** @type {?} */
var ServerIP = '/';
/** @type {?} */
var chgdrUrl = ServerIP + "api/runtime/chgdr/v1.0";
var ChgdrConfigService = /** @class */ (function () {
    function ChgdrConfigService(http, sessionService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.injector = injector;
    }
    /**
     * 根据业务实体ID获取所有的配置信息
     */
    /**
     * 根据业务实体ID获取所有的配置信息
     * @param {?} beId
     * @return {?}
     */
    ChgdrConfigService.prototype.getBeChgdrConfig = /**
     * 根据业务实体ID获取所有的配置信息
     * @param {?} beId
     * @return {?}
     */
    function (beId) {
        /** @type {?} */
        var queryUrl = chgdrUrl + "/config?beId=" + beId;
        return ((/** @type {?} */ ((/** @type {?} */ (this.http.get(queryUrl)))))).pipe(tap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var configEntities = data || [];
            configEntities.forEach((/**
             * @param {?} entity
             * @return {?}
             */
            function (entity) {
                //处理字段顺序号
                /** @type {?} */
                var fields = entity.fields || [];
                //赋予老数据默认顺序号
                fields.forEach((/**
                 * @param {?} field
                 * @param {?} index
                 * @return {?}
                 */
                function (field, index) {
                    if (field.showIndex === undefined || field.showIndex === null) {
                        field.showIndex = index;
                    }
                }));
                //按照顺序号排序
                entity.fields = fields.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) { return a.showIndex - b.showIndex; }));
                //根据排序结果重置顺序号
                fields.forEach((/**
                 * @param {?} field
                 * @param {?} index
                 * @return {?}
                 */
                function (field, index) {
                    field.showIndex = index;
                }));
            }));
        })));
    };
    ChgdrConfigService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ChgdrConfigService.ctorParameters = function () { return [
        { type: HttpService },
        { type: SessionService },
        { type: Injector }
    ]; };
    /** @nocollapse */ ChgdrConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrConfigService_Factory() { return new ChgdrConfigService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i0.INJECTOR)); }, token: ChgdrConfigService, providedIn: "root" });
    return ChgdrConfigService;
}());
export { ChgdrConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC9jaGdkci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2NoZ2RyLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztJQUsvQixtQkFBbUIsR0FBRyxvQ0FBb0M7O0lBQzFELHdDQUF3QyxHQUFNLG1CQUFtQiwwQkFBdUI7O0lBRXhGLFFBQVEsR0FBRyxHQUFHOztJQUNkLFFBQVEsR0FBTSxRQUFRLDJCQUF3QjtBQUVwRDtJQUdJLDRCQUFvQixJQUFpQixFQUN6QixjQUE4QixFQUM5QixRQUFrQjtRQUZWLFNBQUksR0FBSixJQUFJLENBQWE7UUFDekIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDOUIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCw2Q0FBZ0I7Ozs7O0lBQWhCLFVBQWlCLElBQVk7O1lBQ3JCLFFBQVEsR0FBTSxRQUFRLHFCQUFnQixJQUFNO1FBQ2hELE9BQU8sQ0FBQyxtQkFBa0MsbUJBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUEsRUFBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUk7O2dCQUNqRixjQUFjLEdBQXlCLElBQUksSUFBSSxFQUFFO1lBQ3JELGNBQWMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxNQUFNOzs7b0JBRXJCLE1BQU0sR0FBNkIsTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFO2dCQUMxRCxZQUFZO2dCQUNaLE1BQU0sQ0FBQyxPQUFPOzs7OztnQkFBQyxVQUFDLEtBQUssRUFBRSxLQUFLO29CQUN4QixJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO3dCQUMzRCxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztxQkFDM0I7Z0JBQ0wsQ0FBQyxFQUFDLENBQUM7Z0JBQ0gsU0FBUztnQkFDVCxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJOzs7OztnQkFBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQXpCLENBQXlCLEVBQUMsQ0FBQztnQkFDakUsYUFBYTtnQkFDYixNQUFNLENBQUMsT0FBTzs7Ozs7Z0JBQUMsVUFBQyxLQUFLLEVBQUUsS0FBSztvQkFDeEIsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQzVCLENBQUMsRUFBQyxDQUFBO1lBQ04sQ0FBQyxFQUFDLENBQUE7UUFDTixDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7Z0JBaENKLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0JBYnpCLFdBQVc7Z0JBQUUsY0FBYztnQkFGZixRQUFROzs7NkJBQTdCO0NBZ0RDLEFBakNELElBaUNDO1NBaENZLGtCQUFrQjs7Ozs7O0lBRWYsa0NBQXlCOzs7OztJQUNqQyw0Q0FBc0M7Ozs7O0lBQ3RDLHNDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBIZWFkZXJzLCBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSwgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDaGdMb2dDb25maWdFbnRpdHkgfSBmcm9tICcuLi9tb2RlbC9jaGdkci1jb25maWctZW50aXR5JztcclxuaW1wb3J0IHsgQ2hnTG9nQ29uZmlnRmllbGQgfSBmcm9tICcuLi9tb2RlbC9jaGdkci1jb25maWctZmllbGQnO1xyXG5pbXBvcnQgeyBDaGdkcklubmVyU2VydmljZSB9IGZyb20gJy4vY2hnZHItaW5uZXIuc2VydmljZSc7XHJcblxyXG5jb25zdCBDSEdEUl9DT05GSUdfUk9VVEVSID0gJy9hcGkvcnVudGltZS9iY2MvdjEuMC9jaGdkci9jb25maWcnO1xyXG5jb25zdCBDSEdEUl9DT05GSUdfR0VUX0JZX0JJWk9CSklEX0FORF9NT0RFTElEID0gYCR7Q0hHRFJfQ09ORklHX1JPVVRFUn0ve2Jpek9iaklkfS97bW9kZWxJZH1gO1xyXG5cclxuY29uc3QgU2VydmVySVAgPSAnLyc7XHJcbmNvbnN0IGNoZ2RyVXJsID0gYCR7U2VydmVySVB9YXBpL3J1bnRpbWUvY2hnZHIvdjEuMGA7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQ2hnZHJDb25maWdTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7kuJrliqHlrp7kvZNJROiOt+WPluaJgOacieeahOmFjee9ruS/oeaBr1xyXG4gICAgICovXHJcbiAgICBnZXRCZUNoZ2RyQ29uZmlnKGJlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Q2hnTG9nQ29uZmlnRW50aXR5W10+IHtcclxuICAgICAgICBsZXQgcXVlcnlVcmwgPSBgJHtjaGdkclVybH0vY29uZmlnP2JlSWQ9JHtiZUlkfWA7XHJcbiAgICAgICAgcmV0dXJuICg8T2JzZXJ2YWJsZTxDaGdMb2dDb25maWdFbnRpdHlbXT4+PHVua25vd24+dGhpcy5odHRwLmdldChxdWVyeVVybCkpLnBpcGUodGFwKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBsZXQgY29uZmlnRW50aXRpZXM6IENoZ0xvZ0NvbmZpZ0VudGl0eVtdID0gZGF0YSB8fCBbXTtcclxuICAgICAgICAgICAgY29uZmlnRW50aXRpZXMuZm9yRWFjaChlbnRpdHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy/lpITnkIblrZfmrrXpobrluo/lj7dcclxuICAgICAgICAgICAgICAgIGxldCBmaWVsZHM6IEFycmF5PENoZ0xvZ0NvbmZpZ0ZpZWxkPiA9IGVudGl0eS5maWVsZHMgfHwgW107XHJcbiAgICAgICAgICAgICAgICAvL+i1i+S6iOiAgeaVsOaNrum7mOiupOmhuuW6j+WPt1xyXG4gICAgICAgICAgICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5zaG93SW5kZXggPT09IHVuZGVmaW5lZCB8fCBmaWVsZC5zaG93SW5kZXggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuc2hvd0luZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL+aMieeFp+mhuuW6j+WPt+aOkuW6j1xyXG4gICAgICAgICAgICAgICAgZW50aXR5LmZpZWxkcyA9IGZpZWxkcy5zb3J0KChhLCBiKSA9PiBhLnNob3dJbmRleCAtIGIuc2hvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgIC8v5qC55o2u5o6S5bqP57uT5p6c6YeN572u6aG65bqP5Y+3XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQuc2hvd0luZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxufSJdfQ==