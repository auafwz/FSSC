/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, Input, ViewChild } from '@angular/core';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { ChangeDataHeader } from '../model/change-data-header';
import { ChgdrDataBuilder } from './chgdr-data-builder';
import { ChgdrTreeBuilder } from './chgdr-tree-builder';
import { TreeTableComponent } from '@farris/ui-treetable';
import { ChgdrMetadataService } from '../service/chgdr-metadata.service';
import { ChgdrConfigService } from '../service/chgdr-config.service';
import { ChgdrInnerService } from '../service/chgdr-inner.service';
export class ChgdrDataViewerComponent {
    /**
     * @param {?} metadataService
     * @param {?} injector
     * @param {?} chgdrMetadataService
     * @param {?} chgdrConfigService
     * @param {?} chgdrInnerService
     */
    constructor(metadataService, injector, chgdrMetadataService, chgdrConfigService, chgdrInnerService) {
        this.metadataService = metadataService;
        this.injector = injector;
        this.chgdrMetadataService = chgdrMetadataService;
        this.chgdrConfigService = chgdrConfigService;
        this.chgdrInnerService = chgdrInnerService;
        this.showDataId = false;
        this.treeConfig = {
            idField: 'id',
            columns: [
                { field: 'name', title: 'Name', width: 200 }
            ],
            /**
             * 叶子节点图标
             */
            leafIcon: 'f-icon f-icon-page-title-type text-info mr-2',
            /**
             * 节点展开图标
             */
            expandIcon: 'f-icon f-icon-file-folder-open text-info mr-2',
            /**
             * 节点折叠图标
             */
            collapseIcon: 'f-icon f-icon-file-folder-close text-info mr-2',
            showLevel: -1,
            disabled: false,
            init: false,
            selectValues: []
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!!this.data) {
            /** @type {?} */
            let beId = this.data.entityId;
            this.chgdrInnerService.getChgdrConfigHandler(beId).subscribe((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                this.chgdrData = new ChgdrDataBuilder().buildChgdrData(this.data, handler);
                this.treeData = new ChgdrTreeBuilder().build(this.chgdrData);
                if (this.treeTableComponent) {
                    //移除已选中项。
                    //避免更换数据源后，treeGrid找不到之前的选中数据，导致控制台告警
                    this.treeTableComponent.clearSelections();
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.treeTableComponent.selectNode(this.treeData[0].id);
                }), 0);
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleTreeSelection($event) {
        /** @type {?} */
        const node = $event.node;
        if (this.currentNode != null && this.currentNode.id == node.id) {
            //如果选中相同节点，直接返回
            return;
        }
        this.currentNode = node;
    }
}
ChgdrDataViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'chgdr-data-viewer',
                template: "<farris-splitter *ngIf=\"!!chgdrData\" class=\"row flex-fill farris-split-section\" style=\"margin: 0px;\">\r\n  <farris-splitter-pane [ngResizable]=true [rzMinWidth]=\"250\" [rzHandles]=\"'e'\" style=\"padding:0.3rem 0 0.3rem 0.3rem;\"\r\n    class=\"d-flex flex-column farris-lsection f-col-w4\">\r\n    <farris-treetable #treeTable class=\"f-utils-fill\" style=\"overflow-y: auto;\" [columns]=\"treeConfig.columns\" [showBorder]=\"false\" [showHeader]=\"false\"\r\n      [data]=\"treeData\" [idField]=\"treeConfig.idField\" [singleSelect]=\"true\" [showCheckbox]=\"false\"\r\n      [showIcon]=\"true\" [disabled]=\"treeConfig.disabled\" [checkOnSelect]=\"true\"\r\n      (nodeSelected)=\"handleTreeSelection($event)\" [leafIcon]=\"treeConfig.leafIcon\"\r\n      [expandIcon]=\"treeConfig.expandIcon\" [collapseIcon]=\"treeConfig.collapseIcon\"\r\n      [selectValues]=\"treeConfig.selectValues\">\r\n    </farris-treetable>\r\n  </farris-splitter-pane>\r\n  <farris-splitter-pane class=\"farris-rsection farris-overflow-y-auto f-utils-fill-flex-column\" style=\"padding:0 0 0 0.3rem\">\r\n    <farris-section mainTitle=\"\u57FA\u672C\u4FE1\u606F\" [enableMaximize]=\"false\" [enableAccordion]=\"'default'\">\r\n      <lib-chgdr-row-baseinfo-form [chgdrTreeNode]=\"currentNode\" [showDataId]=\"showDataId\"></lib-chgdr-row-baseinfo-form>\r\n    </farris-section>\r\n    <farris-section mainTitle=\"\u53D8\u66F4\u8BE6\u60C5\" [enableMaximize]=\"false\" [fill]=\"true\" class=\"pt-0\">\r\n      <lib-chgdr-row-grid *ngIf=\"!!currentNode && currentNode.chgdrRow.changes.length>0\" [chgdrTreeNode]=\"currentNode\" class=\"f-utils-fill\"></lib-chgdr-row-grid>\r\n      <div class=\"f-datagrid-norecords\" *ngIf=\"!currentNode || currentNode.chgdrRow.changes.length==0\" style=\"height: 250px;\">\r\n        <div class=\"f-datagrid-norecords-content\" style=\"width: 100%;\">\r\n            \u65E0\u6570\u636E\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n  </farris-splitter-pane>\r\n</farris-splitter>",
                styles: [":host{display:-webkit-box;display:flex;height:100%}"]
            }] }
];
/** @nocollapse */
ChgdrDataViewerComponent.ctorParameters = () => [
    { type: GSPMetadataRTService },
    { type: Injector },
    { type: ChgdrMetadataService },
    { type: ChgdrConfigService },
    { type: ChgdrInnerService }
];
ChgdrDataViewerComponent.propDecorators = {
    data: [{ type: Input }],
    showDataId: [{ type: Input }],
    treeTableComponent: [{ type: ViewChild, args: ["treeTable",] }]
};
if (false) {
    /** @type {?} */
    ChgdrDataViewerComponent.prototype.data;
    /** @type {?} */
    ChgdrDataViewerComponent.prototype.showDataId;
    /**
     * @type {?}
     * @private
     */
    ChgdrDataViewerComponent.prototype.treeTableComponent;
    /** @type {?} */
    ChgdrDataViewerComponent.prototype.treeConfig;
    /** @type {?} */
    ChgdrDataViewerComponent.prototype.chgdrData;
    /** @type {?} */
    ChgdrDataViewerComponent.prototype.treeData;
    /** @type {?} */
    ChgdrDataViewerComponent.prototype.currentNode;
    /**
     * @type {?}
     * @private
     */
    ChgdrDataViewerComponent.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrDataViewerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ChgdrDataViewerComponent.prototype.chgdrMetadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrDataViewerComponent.prototype.chgdrConfigService;
    /**
     * @type {?}
     * @private
     */
    ChgdrDataViewerComponent.prototype.chgdrInnerService;
}
//# sourceMappingURL=data:application/json;base64,