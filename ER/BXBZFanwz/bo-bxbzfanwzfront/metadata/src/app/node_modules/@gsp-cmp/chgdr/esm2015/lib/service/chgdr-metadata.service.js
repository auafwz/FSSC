/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@gsp-lcm/metadatart-selector";
export class ChgdrMetadataService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} metadataService
     * @param {?} injector
     */
    constructor(http, sessionService, metadataService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    getGSPBusinessEntity(beId) {
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            let be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            return this.metadataService.GetMetadataRT(beId).pipe(map((/**
             * @param {?} metadata
             * @return {?}
             */
            metadata => {
                /** @type {?} */
                const be = JSON.parse(metadata.content);
                this.beMetadataCache.set(beId, be);
                return be;
            })));
        }
    }
}
ChgdrMetadataService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrMetadataService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: GSPMetadataRTService },
    { type: Injector }
];
/** @nocollapse */ ChgdrMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrMetadataService_Factory() { return new ChgdrMetadataService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i2.GSPMetadataRTService), i0.inject(i0.INJECTOR)); }, token: ChgdrMetadataService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.beMetadataCache;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItbWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hnZHItbWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQU8sTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVExQyxNQUFNLE9BQU8sb0JBQW9COzs7Ozs7O0lBRy9CLFlBQW9CLElBQWlCLEVBQzNCLGNBQThCLEVBQzlCLGVBQXFDLEVBQ3JDLFFBQWtCO1FBSFIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUMzQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsb0JBQWUsR0FBZixlQUFlLENBQXNCO1FBQ3JDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFMcEIsb0JBQWUsR0FBbUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUtwQyxDQUFDOzs7Ozs7SUFHeEIsb0JBQW9CLENBQUMsSUFBWTtRQUN0QyxJQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDOztnQkFDNUIsRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUN2QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO2FBQUk7WUFDSCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1lBQUMsUUFBUSxDQUFDLEVBQUU7O3NCQUM1RCxFQUFFLEdBQXNCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFDMUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUMsRUFBQyxDQUFDLENBQUM7U0FDTDtJQUNILENBQUM7OztZQXJCSixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBWHpCLFdBQVc7WUFBRSxjQUFjO1lBRTNCLG9CQUFvQjtZQUhSLFFBQVE7Ozs7Ozs7O0lBYzNCLCtDQUFvRTs7Ozs7SUFFeEQsb0NBQXlCOzs7OztJQUNuQyw4Q0FBc0M7Ozs7O0lBQ3RDLCtDQUE2Qzs7Ozs7SUFDN0Msd0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IEdTUEJ1c2luZXNzRW50aXR5IH0gZnJvbSAnQGdzcC1iZWYvZ3NwLWJlLW1ldGFkYXRhJztcclxuaW1wb3J0IHsgR1NQTWV0YWRhdGFSVFNlcnZpY2UgfSBmcm9tICdAZ3NwLWxjbS9tZXRhZGF0YXJ0LXNlbGVjdG9yJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENoYW5nZURhdGFIZWFkZXIgfSBmcm9tICcuLi9tb2RlbC9jaGFuZ2UtZGF0YS1oZWFkZXInO1xyXG5pbXBvcnQgeyBDaGFuZ2VEYXRhUXVlcnlQYXJhbSB9IGZyb20gJy4uL21vZGVsL2NoYW5nZS1kYXRhLXF1ZXJ5LXBhcmFtJztcclxuaW1wb3J0IHsgQ2hnTG9nQ29uZmlnRmllbGQgfSBmcm9tICcuLi9tb2RlbC9jaGdkci1jb25maWctZmllbGQnO1xyXG5pbXBvcnQgeyBPcGVyYXRlVHlwZSB9IGZyb20gJy4uL21vZGVsL29wZXJhdGUtdHlwZSc7XHJcbmltcG9ydCB7IE1hcFV0aWwgfSBmcm9tICcuLi91dGlsL21hcC51dGlsJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBDaGdkck1ldGFkYXRhU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBiZU1ldGFkYXRhQ2FjaGU6IE1hcDxzdHJpbmcsIEdTUEJ1c2luZXNzRW50aXR5PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZSxcclxuICAgIHByaXZhdGUgc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtZXRhZGF0YVNlcnZpY2U6IEdTUE1ldGFkYXRhUlRTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHsgfVxyXG5cclxuICAgIC8qKiDojrflj5ZCReWFg+aVsOaNriAqL1xyXG4gICAgcHVibGljIGdldEdTUEJ1c2luZXNzRW50aXR5KGJlSWQ6IHN0cmluZyk6T2JzZXJ2YWJsZTxHU1BCdXNpbmVzc0VudGl0eT57XHJcbiAgICAgIGlmKHRoaXMuYmVNZXRhZGF0YUNhY2hlLmhhcyhiZUlkKSl7XHJcbiAgICAgICAgbGV0IGJlID0gdGhpcy5iZU1ldGFkYXRhQ2FjaGUuZ2V0KGJlSWQpO1xyXG4gICAgICAgIHJldHVybiBvZihiZSk7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YVJUKGJlSWQpLnBpcGUobWFwKG1ldGFkYXRhID0+IHtcclxuICAgICAgICAgIGNvbnN0IGJlOiBHU1BCdXNpbmVzc0VudGl0eSA9IEpTT04ucGFyc2UobWV0YWRhdGEuY29udGVudCk7XHJcbiAgICAgICAgICB0aGlzLmJlTWV0YWRhdGFDYWNoZS5zZXQoYmVJZCwgYmUpO1xyXG4gICAgICAgICAgcmV0dXJuIGJlO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAvLyBwdWJsaWMgZ2V0QmVNZXRhZGF0YUFuZFVkdHMoYmVJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAvLyAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLkdldE1ldGFkYXRhUlQoYmVJZCkuc3Vic2NyaWJlKChtZXRhZGF0YSkgPT4ge1xyXG4gIC8vICAgICBjb25zdCBiZTogR1NQQnVzaW5lc3NFbnRpdHkgPSBKU09OLnBhcnNlKG1ldGFkYXRhLmNvbnRlbnQpO1xyXG4gIC8vICAgICBsZXQgdWR0aWRzOnN0cmluZ1tdID0gdGhpcy5nZXRBbGxVZHRJZHMoYmUuTWFpbk9iamVjdCk7XHJcbiAgLy8gICAgIHRoaXMubWV0YWRhdGFTZXJ2aWNlLlxyXG4gIC8vICAgfSk7XHJcbiAgLy8gfVxyXG59XHJcbiJdfQ==