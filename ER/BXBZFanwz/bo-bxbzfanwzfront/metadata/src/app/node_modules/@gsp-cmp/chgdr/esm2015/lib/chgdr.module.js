/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule, registerLocaleData } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { SplitterModule } from "@farris/ui-splitter";
import { AngularDraggableModule } from '@farris/ui-draggable';
import { DatagridModule } from "@farris/ui-datagrid";
import { TreeTableModule } from '@farris/ui-treetable';
import { FarrisSectionModule } from "@farris/ui-section";
import { MessagerModule, MessagerService } from '@farris/ui-messager';
import { NotifyModule, NotifyService } from '@farris/ui-notify';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { ChgdrDataViewerComponent } from './chgdr-data-viewer/chgdr-data-viewer.component';
import zh from '@angular/common/locales/zh';
import { ChgdrListComponent } from './chgdr-list/chgdr-list.component';
import { ChgdrRowBaseinfoFormComponent } from './chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component';
import { ChgdrRowGridComponent } from './chgdr-row-grid/chgdr-row-grid.component';
import { ChgdrListUiService } from './service/chgdr-list-ui.service';
import { ChgdrListDialogContentComponent } from './chgdr-list-dialog-content/chgdr-list-dialog-content.component';
import { ChgdrHeaderDatagridComponent } from './chgdr-header-datagrid/chgdr-header-datagrid.component';
import { ChgdrMetadataService } from './service/chgdr-metadata.service';
import { ChgdrConfigService } from './service/chgdr-config.service';
import { ChgdrInnerService } from './service/chgdr-inner.service';
import { ChgdrService } from '../public-api';
registerLocaleData(zh);
export class ChgdrModule {
}
ChgdrModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    SplitterModule,
                    AngularDraggableModule,
                    DatagridModule,
                    TreeTableModule,
                    FarrisSectionModule,
                    MessagerModule.forRoot(),
                    NotifyModule,
                    FarrisDialogModule,
                    FarrisDatePickerModule,
                    MetadataRTSelectModule,
                    GSPMetadataRTServiceModule.forRoot('')
                ],
                providers: [
                    MessagerService,
                    NotifyService,
                    HttpService,
                    SessionService,
                    CacheService,
                    ChgdrListUiService,
                    ChgdrMetadataService,
                    ChgdrConfigService,
                    ChgdrInnerService,
                    ChgdrService
                ],
                entryComponents: [
                    ChgdrDataViewerComponent,
                    ChgdrListComponent,
                    ChgdrListDialogContentComponent
                ],
                exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvY2hnZHIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRS9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxzQkFBc0IsRUFBNkIsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU3SCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUUzRixPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUM1RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUNsSCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBc0N2QixNQUFNLE9BQU8sV0FBVzs7O1lBcEN2QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsd0JBQXdCLEVBQUUsa0JBQWtCLEVBQUUsNkJBQTZCLEVBQUUscUJBQXFCLEVBQUUsK0JBQStCLEVBQUUsNEJBQTRCLENBQUM7Z0JBQ2pMLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxzQkFBc0I7b0JBQ3RCLGNBQWM7b0JBQ2QsZUFBZTtvQkFDZixtQkFBbUI7b0JBQ25CLGNBQWMsQ0FBQyxPQUFPLEVBQUU7b0JBQ3hCLFlBQVk7b0JBQ1osa0JBQWtCO29CQUNsQixzQkFBc0I7b0JBQ3RCLHNCQUFzQjtvQkFDdEIsMEJBQTBCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztpQkFDdkM7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULGVBQWU7b0JBQ2YsYUFBYTtvQkFDYixXQUFXO29CQUNYLGNBQWM7b0JBQ2QsWUFBWTtvQkFDWixrQkFBa0I7b0JBQ2xCLG9CQUFvQjtvQkFDcEIsa0JBQWtCO29CQUNsQixpQkFBaUI7b0JBQ2pCLFlBQVk7aUJBQ2I7Z0JBQ0QsZUFBZSxFQUFFO29CQUNmLHdCQUF3QjtvQkFDeEIsa0JBQWtCO29CQUNsQiwrQkFBK0I7aUJBQ2hDO2dCQUNELE9BQU8sRUFBRSxDQUFDLHdCQUF3QixFQUFFLGtCQUFrQixFQUFFLDRCQUE0QixDQUFDO2FBQ3RGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCByZWdpc3RlckxvY2FsZURhdGEgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IFNwbGl0dGVyTW9kdWxlIH0gZnJvbSBcIkBmYXJyaXMvdWktc3BsaXR0ZXJcIjtcclxuaW1wb3J0IHsgQW5ndWxhckRyYWdnYWJsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZHJhZ2dhYmxlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRNb2R1bGUgfSBmcm9tIFwiQGZhcnJpcy91aS1kYXRhZ3JpZFwiO1xyXG5pbXBvcnQgeyBUcmVlVGFibGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRyZWV0YWJsZSc7XHJcbmltcG9ydCB7IEZhcnJpc1NlY3Rpb25Nb2R1bGUgfSBmcm9tIFwiQGZhcnJpcy91aS1zZWN0aW9uXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VyTW9kdWxlLCBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlLCBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5cclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIFNlc3Npb25TZXJ2aWNlLCBDYWNoZVNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgTWV0YWRhdGFSVFNlbGVjdE1vZHVsZSwgU2VsZWN0TWV0YWRhdGFSVENvbXBvbmVudCwgR1NQTWV0YWRhdGFSVFNlcnZpY2VNb2R1bGUgfSBmcm9tICdAZ3NwLWxjbS9tZXRhZGF0YXJ0LXNlbGVjdG9yJztcclxuXHJcbmltcG9ydCB7IENoZ2RyRGF0YVZpZXdlckNvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItZGF0YS12aWV3ZXIvY2hnZHItZGF0YS12aWV3ZXIuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB6aCBmcm9tICdAYW5ndWxhci9jb21tb24vbG9jYWxlcy96aCc7XHJcbmltcG9ydCB7IENoZ2RyTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItbGlzdC9jaGdkci1saXN0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyUm93QmFzZWluZm9Gb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1yb3ctYmFzZWluZm8tZm9ybS9jaGdkci1yb3ctYmFzZWluZm8tZm9ybS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGdkclJvd0dyaWRDb21wb25lbnQgfSBmcm9tICcuL2NoZ2RyLXJvdy1ncmlkL2NoZ2RyLXJvdy1ncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyTGlzdFVpU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9jaGdkci1saXN0LXVpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1saXN0LWRpYWxvZy1jb250ZW50L2NoZ2RyLWxpc3QtZGlhbG9nLWNvbnRlbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hnZHJIZWFkZXJEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItaGVhZGVyLWRhdGFncmlkL2NoZ2RyLWhlYWRlci1kYXRhZ3JpZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGdkck1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9jaGdkci1tZXRhZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hnZHJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2NoZ2RyLWNvbmZpZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hnZHJJbm5lclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvY2hnZHItaW5uZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZ2RyU2VydmljZSB9IGZyb20gJy4uL3B1YmxpYy1hcGknO1xyXG5yZWdpc3RlckxvY2FsZURhdGEoemgpO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtDaGdkckRhdGFWaWV3ZXJDb21wb25lbnQsIENoZ2RyTGlzdENvbXBvbmVudCwgQ2hnZHJSb3dCYXNlaW5mb0Zvcm1Db21wb25lbnQsIENoZ2RyUm93R3JpZENvbXBvbmVudCwgQ2hnZHJMaXN0RGlhbG9nQ29udGVudENvbXBvbmVudCwgQ2hnZHJIZWFkZXJEYXRhZ3JpZENvbXBvbmVudF0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgRm9ybXNNb2R1bGUsXHJcbiAgICBTcGxpdHRlck1vZHVsZSxcclxuICAgIEFuZ3VsYXJEcmFnZ2FibGVNb2R1bGUsXHJcbiAgICBEYXRhZ3JpZE1vZHVsZSxcclxuICAgIFRyZWVUYWJsZU1vZHVsZSxcclxuICAgIEZhcnJpc1NlY3Rpb25Nb2R1bGUsXHJcbiAgICBNZXNzYWdlck1vZHVsZS5mb3JSb290KCksXHJcbiAgICBOb3RpZnlNb2R1bGUsXHJcbiAgICBGYXJyaXNEaWFsb2dNb2R1bGUsXHJcbiAgICBGYXJyaXNEYXRlUGlja2VyTW9kdWxlLFxyXG4gICAgTWV0YWRhdGFSVFNlbGVjdE1vZHVsZSxcclxuICAgIEdTUE1ldGFkYXRhUlRTZXJ2aWNlTW9kdWxlLmZvclJvb3QoJycpXHJcbiAgXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIE1lc3NhZ2VyU2VydmljZSxcclxuICAgIE5vdGlmeVNlcnZpY2UsXHJcbiAgICBIdHRwU2VydmljZSxcclxuICAgIFNlc3Npb25TZXJ2aWNlLFxyXG4gICAgQ2FjaGVTZXJ2aWNlLFxyXG4gICAgQ2hnZHJMaXN0VWlTZXJ2aWNlLFxyXG4gICAgQ2hnZHJNZXRhZGF0YVNlcnZpY2UsXHJcbiAgICBDaGdkckNvbmZpZ1NlcnZpY2UsXHJcbiAgICBDaGdkcklubmVyU2VydmljZSxcclxuICAgIENoZ2RyU2VydmljZVxyXG4gIF0sXHJcbiAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICBDaGdkckRhdGFWaWV3ZXJDb21wb25lbnQsXHJcbiAgICBDaGdkckxpc3RDb21wb25lbnQsXHJcbiAgICBDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbQ2hnZHJEYXRhVmlld2VyQ29tcG9uZW50LCBDaGdkckxpc3RDb21wb25lbnQsIENoZ2RySGVhZGVyRGF0YWdyaWRDb21wb25lbnRdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaGdkck1vZHVsZSB7IH1cclxuIl19