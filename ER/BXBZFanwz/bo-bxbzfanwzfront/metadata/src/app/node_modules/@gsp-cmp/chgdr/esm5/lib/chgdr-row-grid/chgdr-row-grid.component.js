/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, Input, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';
import { OperateType } from '../model/operate-type';
var ChgdrRowGridComponent = /** @class */ (function () {
    function ChgdrRowGridComponent(injector) {
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ChgdrRowGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [
            { field: 'fieldName', width: 130, title: '字段名' },
            { field: 'oldValue', width: 130, title: '原值', showTips: true },
            { field: 'newValue', width: 130, title: '变更值', showTips: true }
        ];
        /** @type {?} */
        var oldValueField = this.columns[1];
        /** @type {?} */
        var newValueField = this.columns[2];
        if (!!this.chgdrTreeNode) {
            //根据初始的变更类型更改显示列的信息
            //此处不能直接调用DataGrid组件的方法更改，因为此处尚未创建DataGrid
            /** @type {?} */
            var type = this.chgdrTreeNode.chgdrRow.operateType;
            if (type == OperateType.ADD) {
                oldValueField.visible = false;
                newValueField.title = "值";
            }
            else if (type == OperateType.DELETE) {
                newValueField.visible = false;
                oldValueField.title = "值";
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChgdrRowGridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        //原来变更行类型
        /** @type {?} */
        var oldType;
        if (!changes.chgdrTreeNode) {
            oldType = null;
        }
        else if (!changes.chgdrTreeNode.previousValue) {
            oldType = null;
        }
        else {
            oldType = changes.chgdrTreeNode.previousValue.chgdrRow.operateType;
        }
        //现在变更行类型
        /** @type {?} */
        var newType;
        if (!changes.chgdrTreeNode) {
            newType = null;
        }
        else if (!changes.chgdrTreeNode.currentValue) {
            newType = null;
        }
        else {
            newType = changes.chgdrTreeNode.currentValue.chgdrRow.operateType;
        }
        if (oldType == newType || !this.dataGrid || !this.dataGrid.columns) {
            //如果新老类型一致(或DataGrid尚未创建)，则不变动
            //do nothing
        }
        else if (newType == OperateType.ADD) {
            this.dataGrid.showColumn("newValue");
            this.dataGrid.hideColumn("oldValue");
            this.dataGrid.setColumnTitle("newValue", "值");
        }
        else if (newType == OperateType.DELETE) {
            this.dataGrid.showColumn("oldValue");
            this.dataGrid.hideColumn("newValue");
            this.dataGrid.setColumnTitle("oldValue", "值");
        }
        else {
            this.dataGrid.showColumn("oldValue");
            this.dataGrid.showColumn("newValue");
            this.dataGrid.setColumnTitle("oldValue", "原值");
            this.dataGrid.setColumnTitle("newValue", "变更值");
        }
        if (changes.chgdrTreeNode && changes.chgdrTreeNode.currentValue) {
            this.data = changes.chgdrTreeNode.currentValue.chgdrRow.changes;
        }
    };
    ChgdrRowGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-chgdr-row-grid',
                    template: "<farris-datagrid \r\n   #chgdrRowGrid \r\n   idField=\"fieldLabel\" \r\n   [columns]=\"columns\" \r\n   [data]=\"data\" \r\n   [fit]=\"true\"\r\n   [fitColumns]=\"true\"\r\n   [pagination]=\"false\" \r\n>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ChgdrRowGridComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ChgdrRowGridComponent.propDecorators = {
        chgdrTreeNode: [{ type: Input }],
        dataGrid: [{ type: ViewChild, args: ["chgdrRowGrid",] }]
    };
    return ChgdrRowGridComponent;
}());
export { ChgdrRowGridComponent };
if (false) {
    /** @type {?} */
    ChgdrRowGridComponent.prototype.chgdrTreeNode;
    /** @type {?} */
    ChgdrRowGridComponent.prototype.dataGrid;
    /** @type {?} */
    ChgdrRowGridComponent.prototype.columns;
    /** @type {?} */
    ChgdrRowGridComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    ChgdrRowGridComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,