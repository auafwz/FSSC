/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from './chgdr-data';
export class ChgdrDataBuilder {
    /**
     * @param {?} data
     * @param {?} handler
     * @return {?}
     */
    buildChgdrData(data, handler) {
        this.handler = handler;
        //初始化变更日志基本信息
        /** @type {?} */
        let chgdrData = new ChgdrData();
        chgdrData.entityName = this.handler.getBeName();
        chgdrData.operateType = data.operateType;
        chgdrData.userName = data.userName;
        chgdrData.dataId = data.dataId;
        chgdrData.dataCode = data.dataCode;
        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());
        chgdrData.reason = data.reason;
        chgdrData.changeTime = data.changeTime;
        chgdrData.entityNodes = [];
        //分层组织变更日志行
        /** @type {?} */
        let rowNodes = [];
        !!data.rows && data.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            if (!row) {
                return;
            }
            /** @type {?} */
            let rowNode = new ChgdrDataRowNode();
            rowNode.id = row.id;
            rowNode.parentDataId = row.parentDataId;
            rowNode.dataId = row.dataId;
            rowNode.dataCode = row.dataCode;
            rowNode.dataCodes = this.buildDataCodes(row.dataCode, row.entityCode);
            rowNode.entityCode = row.entityCode;
            rowNode.entityName = this.handler.getEntityNameOrDefault(row.entityCode);
            rowNode.operateType = row.operateType;
            rowNode.entityNodes = [];
            //组织列的变更信息
            /** @type {?} */
            let changeColumnKeys = this.extractChangeColumnKeys(row);
            /** @type {?} */
            let columnValueChanges = [];
            changeColumnKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                /** @type {?} */
                let column = new ChangeColumnItem();
                column.fieldLabel = key;
                column.fieldName = this.handler.getEntityFieldNameOrDefault(row.entityCode, key);
                column.oldValue = this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);
                column.newValue = this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);
                /** @type {?} */
                let ele = this.handler.getElement(row.entityCode, key);
                if (ele) {
                    //判断是否是关联字段
                    column.hasAssociation = ele.ObjectType == "Association" && ele.IsUdt == false;
                    column.isAssociationRefField = ele.IsRefElement;
                    /** @type {?} */
                    let parentElement = this.handler.getParentElement(row.entityCode, key);
                    if (parentElement) {
                        column.belongFieldLabelId = parentElement.LabelID;
                    }
                }
                columnValueChanges.push(column);
            }));
            //变更值排序
            this.handler.sort(columnValueChanges, row.entityCode, (/**
             * @param {?} column
             * @return {?}
             */
            (column) => column.fieldLabel));
            //合并关联带出字段
            /** @type {?} */
            let columnMap = new Map();
            columnValueChanges.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                columnMap.set(column.fieldLabel, column);
            }));
            //1. 移除所有关联带出字段，并附加到其所属关联字段的children属性上
            columnValueChanges = columnValueChanges.filter((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                if (column.isAssociationRefField) {
                    /** @type {?} */
                    let parentColumn = columnMap.get(column.belongFieldLabelId);
                    if (parentColumn) {
                        //找到父级字段则添加为父
                        parentColumn.children.push(column);
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }));
            //2. 转换关联字段，将其子级的变更值拼接作为其变更值
            columnValueChanges = columnValueChanges.map((/**
             * @param {?} column
             * @return {?}
             */
            column => {
                if (column.hasAssociation && column.children.length > 0) {
                    //如果是关联字段，且存在关联带出字段
                    /** @type {?} */
                    let virtualColumn = Object.assign(new ChangeColumnItem(), column);
                    virtualColumn.originalColumnItem = column;
                    virtualColumn.oldValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => child.oldValue)).join(";");
                    virtualColumn.newValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => child.newValue)).join(";");
                    return virtualColumn;
                }
                else {
                    return column;
                }
            }));
            rowNode.changes = columnValueChanges;
            rowNodes.push(rowNode);
        }));
        /**
         * dataId与变更行的Map
         * @type {?}
         */
        let dataIdRowMap = new Map();
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => dataIdRowMap.set(node.dataId, node)));
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (!node.parentDataId) {
                //根节点
                /** @type {?} */
                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
                return;
            }
            /** @type {?} */
            let parentRowNode = dataIdRowMap.get(node.parentDataId);
            if (!!parentRowNode) {
                //上级节点存在的节点
                /** @type {?} */
                let entityNode = parentRowNode.entityNodes.find((/**
                 * @param {?} en
                 * @return {?}
                 */
                en => en.entityCode == node.entityCode));
                if (!entityNode) {
                    entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                    parentRowNode.entityNodes.push(entityNode);
                }
                entityNode.rows.push(node);
            }
            else {
                //上级节点不存在的节点
                //TODO 上级节点不存在的节点是否需要构造完整的上级结构？
                /** @type {?} */
                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
            }
        }));
        return chgdrData;
    }
    /**
     * @private
     * @param {?} dataCode
     * @param {?} entityCode
     * @return {?}
     */
    buildDataCodes(dataCode, entityCode) {
        /** @type {?} */
        let dataCodes = [];
        dataCode && dataCode.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let dataCodeField = new DataCodeField();
            if (key == "_$dataCode") {
                dataCodeField.fieldLabelId = "dataCode";
                dataCodeField.fieldName = "业务编号";
                dataCodeField.fieldValue = value;
            }
            else {
                dataCodeField.fieldLabelId = key;
                dataCodeField.fieldName = this.handler.getEntityFieldNameOrDefault(entityCode, key);
                dataCodeField.fieldValue = this.handler.formatFieldValue(value, entityCode, key);
            }
            dataCodes.push(dataCodeField);
        }));
        //业务编号排序
        this.handler.sort(dataCodes, entityCode, (/**
         * @param {?} dataCode
         * @return {?}
         */
        (dataCode) => dataCode.fieldLabelId));
        return dataCodes;
    }
    /**
     * 得到新旧内容中所有的key
     * @private
     * @param {?} row
     * @return {?}
     */
    extractChangeColumnKeys(row) {
        /** @type {?} */
        let keysSet = new Set();
        row.oldContent && row.oldContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => keysSet.add(key)));
        row.newContent && row.newContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => keysSet.add(key)));
        /** @type {?} */
        const keys = Array.from(keysSet.keys());
        return keys;
    }
    /**
     * @private
     * @param {?} entityCode
     * @param {?} entityName
     * @return {?}
     */
    genChgdrDataEntityNode(entityCode, entityName) {
        /** @type {?} */
        let node = new ChgdrDataEntityNode();
        node.entityCode = entityCode;
        node.entityName = entityName;
        node.rows = [];
        return node;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrDataBuilder.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItZGF0YS1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvY2hnZHItZGF0YS12aWV3ZXIvY2hnZHItZGF0YS1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFNQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUdqSCxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7SUFHekIsY0FBYyxDQUFDLElBQXNCLEVBQUUsT0FBMkI7UUFDOUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7OztZQUVuQixTQUFTLEdBQUcsSUFBSSxTQUFTLEVBQUU7UUFDL0IsU0FBUyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hELFNBQVMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN6QyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDbkMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQy9CLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNuQyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztRQUMzRixTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0IsU0FBUyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDOzs7WUFHdkIsUUFBUSxHQUF1QixFQUFFO1FBQ3JDLENBQUMsQ0FB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RTtRQUNwQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNmLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FFSjs7Ozs7O0lBM0tHLG1DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVG9kYXksIGZvcm1hdCB9IGZyb20gJ2RhdGUtZm5zJztcclxuaW1wb3J0IHsgR1NQQnVzaW5lc3NFbnRpdHkgfSBmcm9tICdAZ3NwLWJlZi9nc3AtYmUtbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBJR1NQQ29tbW9uT2JqZWN0LCBJR1NQQ29tbW9uRWxlbWVudCwgR1NQQXNzb2NpYXRpb24sIEdTUENvbW1vbkVsZW1lbnQsIEdTUEVsZW1lbnREYXRhVHlwZSwgR1NQRWxlbWVudE9iamVjdFR5cGUsIEdTUEVudW1WYWx1ZSB9IGZyb20gJ0Bnc3AtYmVmL2dzcC1jbS1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IENoYW5nZURhdGFIZWFkZXIgfSBmcm9tICcuLi9tb2RlbC9jaGFuZ2UtZGF0YS1oZWFkZXInO1xyXG5pbXBvcnQgeyBDaGFuZ2VEYXRhUm93IH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtcm93JztcclxuaW1wb3J0IHsgTWFwVXRpbCB9IGZyb20gJy4uL3V0aWwvbWFwLnV0aWwnO1xyXG5pbXBvcnQgeyBDaGdkckRhdGEsIENoZ2RyRGF0YVJvd05vZGUsIENoYW5nZUNvbHVtbkl0ZW0sIENoZ2RyRGF0YUVudGl0eU5vZGUsIERhdGFDb2RlRmllbGQgfSBmcm9tICcuL2NoZ2RyLWRhdGEnO1xyXG5pbXBvcnQgeyBDaGdkckNvbmZpZ0hhbmRsZXIgfSBmcm9tICcuLi9zZXJ2aWNlL2NoZ2RyLWNvbmZpZy1oYW5kbGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDaGdkckRhdGFCdWlsZGVyIHtcclxuICAgIHByaXZhdGUgaGFuZGxlcjogQ2hnZHJDb25maWdIYW5kbGVyO1xyXG5cclxuICAgIGJ1aWxkQ2hnZHJEYXRhKGRhdGE6IENoYW5nZURhdGFIZWFkZXIsIGhhbmRsZXI6IENoZ2RyQ29uZmlnSGFuZGxlcik6IENoZ2RyRGF0YSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgICAgICAvL+WIneWni+WMluWPmOabtOaXpeW/l+WfuuacrOS/oeaBr1xyXG4gICAgICAgIGxldCBjaGdkckRhdGEgPSBuZXcgQ2hnZHJEYXRhKCk7XHJcbiAgICAgICAgY2hnZHJEYXRhLmVudGl0eU5hbWUgPSB0aGlzLmhhbmRsZXIuZ2V0QmVOYW1lKCk7XHJcbiAgICAgICAgY2hnZHJEYXRhLm9wZXJhdGVUeXBlID0gZGF0YS5vcGVyYXRlVHlwZTtcclxuICAgICAgICBjaGdkckRhdGEudXNlck5hbWUgPSBkYXRhLnVzZXJOYW1lO1xyXG4gICAgICAgIGNoZ2RyRGF0YS5kYXRhSWQgPSBkYXRhLmRhdGFJZDtcclxuICAgICAgICBjaGdkckRhdGEuZGF0YUNvZGUgPSBkYXRhLmRhdGFDb2RlO1xyXG4gICAgICAgIGNoZ2RyRGF0YS5kYXRhQ29kZXMgPSB0aGlzLmJ1aWxkRGF0YUNvZGVzKGRhdGEuZGF0YUNvZGUsIHRoaXMuaGFuZGxlci5nZXRNYWluT2JqZWN0Q29kZSgpKTtcclxuICAgICAgICBjaGdkckRhdGEucmVhc29uID0gZGF0YS5yZWFzb247XHJcbiAgICAgICAgY2hnZHJEYXRhLmNoYW5nZVRpbWUgPSBkYXRhLmNoYW5nZVRpbWU7XHJcbiAgICAgICAgY2hnZHJEYXRhLmVudGl0eU5vZGVzID0gW107XHJcblxyXG4gICAgICAgIC8v5YiG5bGC57uE57uH5Y+Y5pu05pel5b+X6KGMXHJcbiAgICAgICAgbGV0IHJvd05vZGVzOiBDaGdkckRhdGFSb3dOb2RlW10gPSBbXTtcclxuICAgICAgICAhIWRhdGEucm93cyAmJiBkYXRhLnJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXJvdykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCByb3dOb2RlID0gbmV3IENoZ2RyRGF0YVJvd05vZGUoKTtcclxuICAgICAgICAgICAgcm93Tm9kZS5pZCA9IHJvdy5pZDtcclxuICAgICAgICAgICAgcm93Tm9kZS5wYXJlbnREYXRhSWQgPSByb3cucGFyZW50RGF0YUlkO1xyXG4gICAgICAgICAgICByb3dOb2RlLmRhdGFJZCA9IHJvdy5kYXRhSWQ7XHJcbiAgICAgICAgICAgIHJvd05vZGUuZGF0YUNvZGUgPSByb3cuZGF0YUNvZGU7XHJcbiAgICAgICAgICAgIHJvd05vZGUuZGF0YUNvZGVzID0gdGhpcy5idWlsZERhdGFDb2Rlcyhyb3cuZGF0YUNvZGUsIHJvdy5lbnRpdHlDb2RlKTtcclxuICAgICAgICAgICAgcm93Tm9kZS5lbnRpdHlDb2RlID0gcm93LmVudGl0eUNvZGU7XHJcbiAgICAgICAgICAgIHJvd05vZGUuZW50aXR5TmFtZSA9IHRoaXMuaGFuZGxlci5nZXRFbnRpdHlOYW1lT3JEZWZhdWx0KHJvdy5lbnRpdHlDb2RlKTtcclxuICAgICAgICAgICAgcm93Tm9kZS5vcGVyYXRlVHlwZSA9IHJvdy5vcGVyYXRlVHlwZTtcclxuICAgICAgICAgICAgcm93Tm9kZS5lbnRpdHlOb2RlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy/nu4Tnu4fliJfnmoTlj5jmm7Tkv6Hmga9cclxuICAgICAgICAgICAgbGV0IGNoYW5nZUNvbHVtbktleXM6IHN0cmluZ1tdID0gdGhpcy5leHRyYWN0Q2hhbmdlQ29sdW1uS2V5cyhyb3cpO1xyXG4gICAgICAgICAgICBsZXQgY29sdW1uVmFsdWVDaGFuZ2VzOiBDaGFuZ2VDb2x1bW5JdGVtW10gPSBbXTtcclxuICAgICAgICAgICAgY2hhbmdlQ29sdW1uS2V5cy5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBuZXcgQ2hhbmdlQ29sdW1uSXRlbSgpO1xyXG4gICAgICAgICAgICAgICAgY29sdW1uLmZpZWxkTGFiZWwgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4uZmllbGROYW1lID0gdGhpcy5oYW5kbGVyLmdldEVudGl0eUZpZWxkTmFtZU9yRGVmYXVsdChyb3cuZW50aXR5Q29kZSwga2V5KTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5vbGRWYWx1ZSA9IHRoaXMuaGFuZGxlci5mb3JtYXRGaWVsZFZhbHVlKHJvdy5vbGRDb250ZW50LmdldChrZXkpLCByb3cuZW50aXR5Q29kZSwga2V5KTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5uZXdWYWx1ZSA9IHRoaXMuaGFuZGxlci5mb3JtYXRGaWVsZFZhbHVlKHJvdy5uZXdDb250ZW50LmdldChrZXkpLCByb3cuZW50aXR5Q29kZSwga2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZWxlOiBJR1NQQ29tbW9uRWxlbWVudCA9IHRoaXMuaGFuZGxlci5nZXRFbGVtZW50KHJvdy5lbnRpdHlDb2RlLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8v5Yik5pat5piv5ZCm5piv5YWz6IGU5a2X5q61XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmhhc0Fzc29jaWF0aW9uID0gZWxlLk9iamVjdFR5cGUgPT0gXCJBc3NvY2lhdGlvblwiICYmIGVsZS5Jc1VkdCA9PSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uaXNBc3NvY2lhdGlvblJlZkZpZWxkID0gZWxlLklzUmVmRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50RWxlbWVudCA9IHRoaXMuaGFuZGxlci5nZXRQYXJlbnRFbGVtZW50KHJvdy5lbnRpdHlDb2RlLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5iZWxvbmdGaWVsZExhYmVsSWQgPSBwYXJlbnRFbGVtZW50LkxhYmVsSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbHVtblZhbHVlQ2hhbmdlcy5wdXNoKGNvbHVtbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8v5Y+Y5pu05YC85o6S5bqPXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlci5zb3J0KGNvbHVtblZhbHVlQ2hhbmdlcywgcm93LmVudGl0eUNvZGUsIChjb2x1bW4pPT5jb2x1bW4uZmllbGRMYWJlbCk7XHJcblxyXG4gICAgICAgICAgICAvL+WQiOW5tuWFs+iBlOW4puWHuuWtl+autVxyXG4gICAgICAgICAgICBsZXQgY29sdW1uTWFwOiBNYXA8c3RyaW5nLCBDaGFuZ2VDb2x1bW5JdGVtPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgY29sdW1uVmFsdWVDaGFuZ2VzLmZvckVhY2goKGNvbHVtbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uTWFwLnNldChjb2x1bW4uZmllbGRMYWJlbCwgY29sdW1uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vMS4g56e76Zmk5omA5pyJ5YWz6IGU5bim5Ye65a2X5q6177yM5bm26ZmE5Yqg5Yiw5YW25omA5bGe5YWz6IGU5a2X5q6155qEY2hpbGRyZW7lsZ7mgKfkuIpcclxuICAgICAgICAgICAgY29sdW1uVmFsdWVDaGFuZ2VzID0gY29sdW1uVmFsdWVDaGFuZ2VzLmZpbHRlcigoY29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmlzQXNzb2NpYXRpb25SZWZGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnRDb2x1bW46IENoYW5nZUNvbHVtbkl0ZW0gPSBjb2x1bW5NYXAuZ2V0KGNvbHVtbi5iZWxvbmdGaWVsZExhYmVsSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/mib7liLDniLbnuqflrZfmrrXliJnmt7vliqDkuLrniLZcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29sdW1uLmNoaWxkcmVuLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLzIuIOi9rOaNouWFs+iBlOWtl+aute+8jOWwhuWFtuWtkOe6p+eahOWPmOabtOWAvOaLvOaOpeS9nOS4uuWFtuWPmOabtOWAvFxyXG4gICAgICAgICAgICBjb2x1bW5WYWx1ZUNoYW5nZXMgPSBjb2x1bW5WYWx1ZUNoYW5nZXMubWFwPENoYW5nZUNvbHVtbkl0ZW0+KGNvbHVtbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmhhc0Fzc29jaWF0aW9uICYmIGNvbHVtbi5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzmmK/lhbPogZTlrZfmrrXvvIzkuJTlrZjlnKjlhbPogZTluKblh7rlrZfmrrVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmlydHVhbENvbHVtbjogQ2hhbmdlQ29sdW1uSXRlbSA9IE9iamVjdC5hc3NpZ24obmV3IENoYW5nZUNvbHVtbkl0ZW0oKSwgY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsQ29sdW1uLm9yaWdpbmFsQ29sdW1uSXRlbSA9IGNvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsQ29sdW1uLm9sZFZhbHVlID0gY29sdW1uLmNoaWxkcmVuLm1hcChjaGlsZCA9PiBjaGlsZC5vbGRWYWx1ZSkuam9pbihcIjtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlydHVhbENvbHVtbi5uZXdWYWx1ZSA9IGNvbHVtbi5jaGlsZHJlbi5tYXAoY2hpbGQgPT4gY2hpbGQubmV3VmFsdWUpLmpvaW4oXCI7XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aXJ0dWFsQ29sdW1uO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJvd05vZGUuY2hhbmdlcyA9IGNvbHVtblZhbHVlQ2hhbmdlcztcclxuXHJcbiAgICAgICAgICAgIHJvd05vZGVzLnB1c2gocm93Tm9kZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qKiBkYXRhSWTkuI7lj5jmm7TooYznmoRNYXAgKi9cclxuICAgICAgICBsZXQgZGF0YUlkUm93TWFwOiBNYXA8c3RyaW5nLCBDaGdkckRhdGFSb3dOb2RlPiA9IG5ldyBNYXAoKTtcclxuICAgICAgICByb3dOb2Rlcy5mb3JFYWNoKG5vZGUgPT4gZGF0YUlkUm93TWFwLnNldChub2RlLmRhdGFJZCwgbm9kZSkpO1xyXG5cclxuICAgICAgICByb3dOb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIW5vZGUucGFyZW50RGF0YUlkKSB7XHJcbiAgICAgICAgICAgICAgICAvL+agueiKgueCuVxyXG4gICAgICAgICAgICAgICAgbGV0IGVudGl0eU5vZGUgPSB0aGlzLmdlbkNoZ2RyRGF0YUVudGl0eU5vZGUobm9kZS5lbnRpdHlDb2RlLCBub2RlLmVudGl0eU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgZW50aXR5Tm9kZS5yb3dzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBjaGdkckRhdGEuZW50aXR5Tm9kZXMucHVzaChlbnRpdHlOb2RlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcGFyZW50Um93Tm9kZSA9IGRhdGFJZFJvd01hcC5nZXQobm9kZS5wYXJlbnREYXRhSWQpO1xyXG4gICAgICAgICAgICBpZiAoISFwYXJlbnRSb3dOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvL+S4iue6p+iKgueCueWtmOWcqOeahOiKgueCuVxyXG4gICAgICAgICAgICAgICAgbGV0IGVudGl0eU5vZGUgPSBwYXJlbnRSb3dOb2RlLmVudGl0eU5vZGVzLmZpbmQoZW4gPT4gZW4uZW50aXR5Q29kZSA9PSBub2RlLmVudGl0eUNvZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlbnRpdHlOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5Tm9kZSA9IHRoaXMuZ2VuQ2hnZHJEYXRhRW50aXR5Tm9kZShub2RlLmVudGl0eUNvZGUsIG5vZGUuZW50aXR5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Um93Tm9kZS5lbnRpdHlOb2Rlcy5wdXNoKGVudGl0eU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW50aXR5Tm9kZS5yb3dzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL+S4iue6p+iKgueCueS4jeWtmOWcqOeahOiKgueCuVxyXG4gICAgICAgICAgICAgICAgLy9UT0RPIOS4iue6p+iKgueCueS4jeWtmOWcqOeahOiKgueCueaYr+WQpumcgOimgeaehOmAoOWujOaVtOeahOS4iue6p+e7k+aehO+8n1xyXG4gICAgICAgICAgICAgICAgbGV0IGVudGl0eU5vZGUgPSB0aGlzLmdlbkNoZ2RyRGF0YUVudGl0eU5vZGUobm9kZS5lbnRpdHlDb2RlLCBub2RlLmVudGl0eU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgZW50aXR5Tm9kZS5yb3dzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBjaGdkckRhdGEuZW50aXR5Tm9kZXMucHVzaChlbnRpdHlOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBjaGdkckRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZERhdGFDb2RlcyhkYXRhQ29kZTogTWFwPHN0cmluZywgc3RyaW5nPiwgZW50aXR5Q29kZTogc3RyaW5nKTogRGF0YUNvZGVGaWVsZFtdIHtcclxuICAgICAgICBsZXQgZGF0YUNvZGVzOiBEYXRhQ29kZUZpZWxkW10gPSBbXTtcclxuICAgICAgICBkYXRhQ29kZSAmJiBkYXRhQ29kZS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhQ29kZUZpZWxkOiBEYXRhQ29kZUZpZWxkID0gbmV3IERhdGFDb2RlRmllbGQoKTtcclxuICAgICAgICAgICAgaWYgKGtleSA9PSBcIl8kZGF0YUNvZGVcIikge1xyXG4gICAgICAgICAgICAgICAgZGF0YUNvZGVGaWVsZC5maWVsZExhYmVsSWQgPSBcImRhdGFDb2RlXCI7XHJcbiAgICAgICAgICAgICAgICBkYXRhQ29kZUZpZWxkLmZpZWxkTmFtZSA9IFwi5Lia5Yqh57yW5Y+3XCI7XHJcbiAgICAgICAgICAgICAgICBkYXRhQ29kZUZpZWxkLmZpZWxkVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRhdGFDb2RlRmllbGQuZmllbGRMYWJlbElkID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgZGF0YUNvZGVGaWVsZC5maWVsZE5hbWUgPSB0aGlzLmhhbmRsZXIuZ2V0RW50aXR5RmllbGROYW1lT3JEZWZhdWx0KGVudGl0eUNvZGUsIGtleSk7XHJcbiAgICAgICAgICAgICAgICBkYXRhQ29kZUZpZWxkLmZpZWxkVmFsdWUgPSB0aGlzLmhhbmRsZXIuZm9ybWF0RmllbGRWYWx1ZSh2YWx1ZSwgZW50aXR5Q29kZSwga2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkYXRhQ29kZXMucHVzaChkYXRhQ29kZUZpZWxkKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvL+S4muWKoee8luWPt+aOkuW6j1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5zb3J0KGRhdGFDb2RlcywgZW50aXR5Q29kZSwgKGRhdGFDb2RlKT0+ZGF0YUNvZGUuZmllbGRMYWJlbElkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGFDb2RlcztcclxuICAgIH1cclxuXHJcbiAgICAvKiog5b6X5Yiw5paw5pen5YaF5a655Lit5omA5pyJ55qEa2V5ICovXHJcbiAgICBwcml2YXRlIGV4dHJhY3RDaGFuZ2VDb2x1bW5LZXlzKHJvdzogQ2hhbmdlRGF0YVJvdyk6IHN0cmluZ1tdIHtcclxuICAgICAgICBsZXQga2V5c1NldDogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgcm93Lm9sZENvbnRlbnQgJiYgcm93Lm9sZENvbnRlbnQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ga2V5c1NldC5hZGQoa2V5KSk7XHJcbiAgICAgICAgcm93Lm5ld0NvbnRlbnQgJiYgcm93Lm5ld0NvbnRlbnQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ga2V5c1NldC5hZGQoa2V5KSk7XHJcbiAgICAgICAgY29uc3Qga2V5czogc3RyaW5nW10gPSBBcnJheS5mcm9tKGtleXNTZXQua2V5cygpKTtcclxuICAgICAgICByZXR1cm4ga2V5cztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBnZW5DaGdkckRhdGFFbnRpdHlOb2RlKGVudGl0eUNvZGU6IHN0cmluZywgZW50aXR5TmFtZTogc3RyaW5nKTogQ2hnZHJEYXRhRW50aXR5Tm9kZSB7XHJcbiAgICAgICAgbGV0IG5vZGUgPSBuZXcgQ2hnZHJEYXRhRW50aXR5Tm9kZSgpO1xyXG4gICAgICAgIG5vZGUuZW50aXR5Q29kZSA9IGVudGl0eUNvZGU7XHJcbiAgICAgICAgbm9kZS5lbnRpdHlOYW1lID0gZW50aXR5TmFtZTtcclxuICAgICAgICBub2RlLnJvd3MgPSBbXTtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuXHJcbn0iXX0=