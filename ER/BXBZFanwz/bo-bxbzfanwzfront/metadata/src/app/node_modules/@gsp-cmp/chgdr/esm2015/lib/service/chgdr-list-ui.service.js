/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ChgdrListDialogContentComponent } from '../chgdr-list-dialog-content/chgdr-list-dialog-content.component';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "@farris/ui-messager";
export class ChgdrListUiService {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} messagerService
     */
    constructor(resolver, injector, modalService, messagerService) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.messagerService = messagerService;
    }
    /**
     * @param {?} entityId
     * @param {?} dataId
     * @return {?}
     */
    showDialog(entityId, dataId) {
        return this.create(entityId, dataId);
    }
    /**
     * @private
     * @param {?} entityId
     * @param {?} dataId
     * @return {?}
     */
    create(entityId, dataId) {
        if (!entityId) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", entityId, dataId);
            return;
        }
        /** @type {?} */
        let fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);
        /** @type {?} */
        let cmpRef = fac.create(this.injector);
        /** @type {?} */
        let modalConfig = {
            title: '变更日志列表',
            width: 1000,
            height: 550,
            resizable: true,
            showButtons: false,
            showMaxButton: true
        };
        cmpRef.instance.entityId = entityId;
        cmpRef.instance.dataId = dataId;
        /** @type {?} */
        let dialog = this.modalService.show(cmpRef, modalConfig);
    }
}
ChgdrListUiService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrListUiService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService }
];
/** @nocollapse */ ChgdrListUiService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrListUiService_Factory() { return new ChgdrListUiService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i1.BsModalService), i0.inject(i2.MessagerService)); }, token: ChgdrListUiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItbGlzdC11aS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9jaGdkci1saXN0LXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sa0VBQWtFLENBQUM7Ozs7QUFHbkgsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7OztJQUUzQixZQUNZLFFBQWtDLEVBQ2xDLFFBQWtCLEVBQ2xCLFlBQTRCLEVBQzVCLGVBQWdDO1FBSGhDLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQzVCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUN4QyxDQUFDOzs7Ozs7SUFFTCxVQUFVLENBQUMsUUFBZ0IsRUFBRSxNQUFjO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Ozs7OztJQUVPLE1BQU0sQ0FBQyxRQUFnQixFQUFFLE1BQWM7UUFDM0MsSUFBRyxDQUFDLFFBQVEsRUFBQztZQUNULE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQy9ELE9BQU87U0FDVjs7WUFFRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQywrQkFBK0IsQ0FBQzs7WUFDNUUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7WUFDbEMsV0FBVyxHQUFHO1lBQ2QsS0FBSyxFQUFFLFFBQVE7WUFDZixLQUFLLEVBQUUsSUFBSTtZQUNYLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLElBQUk7WUFDZixXQUFXLEVBQUUsS0FBSztZQUNsQixhQUFhLEVBQUUsSUFBSTtTQUN0QjtRQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNwQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7O1lBQzVCLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDO0lBQzVELENBQUM7OztZQWxDSixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBTGIsd0JBQXdCO1lBQUUsUUFBUTtZQUU5QyxjQUFjO1lBRGQsZUFBZTs7Ozs7Ozs7SUFRaEIsc0NBQTBDOzs7OztJQUMxQyxzQ0FBMEI7Ozs7O0lBQzFCLDBDQUFvQzs7Ozs7SUFDcEMsNkNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgQ2hnZHJMaXN0RGlhbG9nQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4uL2NoZ2RyLWxpc3QtZGlhbG9nLWNvbnRlbnQvY2hnZHItbGlzdC1kaWFsb2ctY29udGVudC5jb21wb25lbnQnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIENoZ2RyTGlzdFVpU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG1lc3NhZ2VyU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIHNob3dEaWFsb2coZW50aXR5SWQ6IHN0cmluZywgZGF0YUlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUoZW50aXR5SWQsIGRhdGFJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGUoZW50aXR5SWQ6IHN0cmluZywgZGF0YUlkOiBzdHJpbmcpIHtcclxuICAgICAgICBpZighZW50aXR5SWQpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5Yib5bu65Lia5Yqh5Y+Y5pu05pel5b+X5YiX6KGo57uE5Lu25aSx6LSl77yM5Lia5Yqh5a6e5L2T5LiN6IO95Li656m677yM6K+35qOA5p+lXCIsIGVudGl0eUlkLCBkYXRhSWQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZmFjID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50KTtcclxuICAgICAgICBsZXQgY21wUmVmID0gZmFjLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICBsZXQgbW9kYWxDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn5Y+Y5pu05pel5b+X5YiX6KGoJyxcclxuICAgICAgICAgICAgd2lkdGg6IDEwMDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogNTUwLFxyXG4gICAgICAgICAgICByZXNpemFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogdHJ1ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY21wUmVmLmluc3RhbmNlLmVudGl0eUlkID0gZW50aXR5SWQ7XHJcbiAgICAgICAgY21wUmVmLmluc3RhbmNlLmRhdGFJZCA9IGRhdGFJZDtcclxuICAgICAgICBsZXQgZGlhbG9nID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSZWYsIG1vZGFsQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19