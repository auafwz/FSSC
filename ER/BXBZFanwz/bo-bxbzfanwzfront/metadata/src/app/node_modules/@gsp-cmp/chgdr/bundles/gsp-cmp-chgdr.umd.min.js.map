{"version":3,"sources":["ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data-builder.ts","ng://@gsp-cmp/chgdr/lib/util/guid.util.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-tree-builder.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-metadata.service.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-config.service.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-config-handler.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-inner.service.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data-viewer.component.ts","ng://@gsp-cmp/chgdr/lib/model/operate-type.ts","ng://@gsp-cmp/chgdr/lib/util/map.util.ts","node_modules/tslib/tslib.es6.js","ng://@gsp-cmp/chgdr/lib/service/chgdr.service.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-query-param.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-query-result.ts","ng://@gsp-cmp/chgdr/lib/util/error.util.ts","ng://@gsp-cmp/chgdr/lib/util/time.util.ts","ng://@gsp-cmp/chgdr/lib/chgdr-list/chgdr-list.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-row-grid/chgdr-row-grid.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-list-dialog-content/chgdr-list-dialog-content.component.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-list-ui.service.ts","ng://@gsp-cmp/chgdr/lib/chgdr-header-datagrid/chgdr-header-datagrid.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr.module.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-header.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-row.ts"],"names":["ChgdrData","ChgdrDataEntityNode","ChgdrDataRowNode","ChangeColumnItem","this","children","DataCodeField","ChgdrDataBuilder","prototype","buildChgdrData","data","handler","_this","chgdrData","entityName","getBeName","operateType","userName","dataId","dataCode","dataCodes","buildDataCodes","getMainObjectCode","reason","changeTime","entityNodes","rowNodes","rows","forEach","row","rowNode","id","parentDataId","entityCode","getEntityNameOrDefault","changeColumnKeys","extractChangeColumnKeys","columnValueChanges","key","column","fieldLabel","fieldName","getEntityFieldNameOrDefault","oldValue","formatFieldValue","oldContent","get","newValue","newContent","ele","getElement","hasAssociation","ObjectType","IsUdt","isAssociationRefField","IsRefElement","parentElement","getParentElement","belongFieldLabelId","LabelID","push","sort","columnMap","Map","set","filter","parentColumn","map","length","virtualColumn","Object","assign","originalColumnItem","child","join","changes","dataIdRowMap","node","entityNode","genChgdrDataEntityNode","parentRowNode","find","en","value","dataCodeField","fieldLabelId","fieldValue","keysSet","Set","add","Array","from","keys","Guid","newGuid","replace","c","convert","r","Math","random","toString","ChgdrTreeNode","ChgdrTreeBuilder","build","console","warn","rootRows","rootRow","rowToNode","isRoot","expanded","name","buildTreeNodeName","chgdrRow","childRow","childNode","parent","dataCodeName","getName","ChgdrMetadataService","getGSPBusinessEntity","beId","beMetadataCache","has","be","of","metadataService","GetMetadataRT","pipe","metadata","JSON","parse","content","Injectable","args","providedIn","HttpService","SessionService","GSPMetadataRTService","Injector","http","sessionService","injector","ChgdrConfigService","getBeChgdrConfig","queryUrl","chgdrUrl","tap","entity","fields","field","index","showIndex","undefined","a","b","ChgdrConfigHandler","updateShowIndex","entityFieldShowOrderMap","entityFieldMap","size","entityFieldConfigMap","updateEntityConfigs","fieldConfigMap","entityConfigs","entityConfig","tabCode","updateEntityMap","entityCodeMap","Code","ContainElements","updateEntityFieldMap","ContainChildObjects","childEntity","element","entityFieldParentMap","childAssociations","ChildAssociations","childAssociation","refElementCollection","RefElementCollection","rele","items","fieldLabelIdFunc","aKey","bKey","localeCompare","formatMainObjectFieldValue","originalValue","error","ID","Name","MDataType","GSPElementDataType","Decimal","Integer","toLowerCase","includes","num","Number","isNaN","log","toNonExponential","Boolean","Date","date","format","DateTime","GSPElementObjectType","Enum","enumValue","ContainEnumValues","item","Value","m","toExponential","match","toFixed","max","MainObject","fieldConfig","mainObject","ChgdrInnerService","getChgdrConfigHandler","requests","chgdrMetadataService","chgdrConfigService","forkJoin","ChgdrDataViewerComponent","ngOnInit","ngOnChanges","entityId","chgdrInnerService","subscribe","treeData","treeTableComponent","clearSelections","setTimeout","selectNode","handleTreeSelection","$event","currentNode","Component","selector","template","Input","ViewChild","showDataId","treeConfig","idField","columns","title","width","leafIcon","expandIcon","collapseIcon","showLevel","disabled","init","selectValues","OperateType","getOrdinal","ordinal","getCode","code","values","ADD","MODIFY","DELETE","toJson","obj","ot","MapUtil","convertMapToObject","create","convertObjectToMap","strMap","_b","__values","o","Symbol","iterator","i","call","next","done","tslib_1.__values","_c","k","ServerIP","ChgdrService","queryChangeDataHeader","currentQueryParam","json","stringify","queryParam","encodeURIComponent","url","queryResult","headers","header","toDate","getRootEntityDataCodeFields","rootDataCodeFieldsMap","getChangeData","sh","ChangeDataQueryParam","ChangeDataQueryResult","ErrorUtil","getErrorMessage","e","Message","TimeUtil","getStartTimeInDay","d","setHours","setMinutes","setSeconds","setMilliseconds","getEndTimeInDay","ChgdrListComponent","chgdrs","total","pageSize","pageIndex","changeTimeStart","changeTimeEnd","getTime","param","buildQueryParam","doQuery","query","chgdrService","messageService","onPageChanged","onPageSizeChanged","MessagerService","NotifyService","HostBinding","notifyService","baseCls","ChgdrRowBaseinfoFormComponent","ChgdrRowGridComponent","showTips","oldValueField","newValueField","chgdrTreeNode","type","visible","newType","previousValue","currentValue","dataGrid","showColumn","hideColumn","setColumnTitle","ChgdrListDialogContentComponent","ChgdrListUiService","showDialog","cmpRef","resolver","resolveComponentFactory","instance","modalService","show","height","resizable","showButtons","showMaxButton","ComponentFactoryResolver","BsModalService","messagerService","ChgdrHeaderDatagridComponent","resetColumnAndData","prevEntityId","getEntityId","curEntityId","updateChgdrConfigHandler","updateDataCodeFields","chgdrDatas","formatHeaders","err","chgdrConfigHandler","dataCodeFields","dataCodeObj","formatDataCodeMap","formatedValue","formatter","options","opColumn","opCell","halign","align","ref","detectChanges","pageChanged","emit","pageSizeChanged","showChangeDetail","ctx","rowData","currentChgdrData","chgdrInfoDialog","ChangeDetectorRef","Output","EventEmitter","common","registerLocaleData","zh","ChgdrModule$$1","NgModule","declarations","imports","CommonModule","FormsModule","SplitterModule","AngularDraggableModule","DatagridModule","TreeTableModule","FarrisSectionModule","MessagerModule","forRoot","NotifyModule","FarrisDialogModule","FarrisDatePickerModule","MetadataRTSelectModule","GSPMetadataRTServiceModule","providers","CacheService","entryComponents","exports","ChangeDataHeader","ChangeDataRow"],"mappings":"+hDAGA,MAAA,SAAAA,SAcA,SAAAC,SAOA,SAAAC,OAcAC,EAAA,SAAAA,KAcIC,KAAAC,SAA+B,IAGnCC,EAAA,SAAAA,OC9CAC,GAGIA,EAAAC,UAAAC,eAAA,SAAeC,EAAwBC,GAAvC,IAAAC,EAAAR,KACIA,KAAKO,QAAUA,MAEXE,EAAY,IAAIb,EACpBa,EAAUC,WAAaV,KAAKO,QAAQI,YACpCF,EAAUG,YAAcN,EAAKM,YAC7BH,EAAUI,SAAWP,EAAKO,SAC1BJ,EAAUK,OAASR,EAAKQ,OACxBL,EAAUM,SAAWT,EAAKS,SAC1BN,EAAUO,UAAYhB,KAAKiB,eAAeX,EAAKS,SAAUf,KAAKO,QAAQW,qBACtET,EAAUU,OAASb,EAAKa,OACxBV,EAAUW,WAAad,EAAKc,WAC5BX,EAAUY,YAAc,OAGpBC,EAA+B,GACjChB,EAAKiB,MAAQjB,EAAKiB,KAAKC,QAAO,SAACC,GAC7B,GAAKA,EAAL,KAGIC,EAAU,IAAI5B,EAClB4B,EAAQC,GAAKF,EAAIE,GACjBD,EAAQE,aAAeH,EAAIG,aAC3BF,EAAQZ,OAASW,EAAIX,OACrBY,EAAQX,SAAWU,EAAIV,SACvBW,EAAQV,UAAYR,EAAKS,eAAeQ,EAAIV,SAAUU,EAAII,YAC1DH,EAAQG,WAAaJ,EAAII,WACzBH,EAAQhB,WAAaF,EAAKD,QAAQuB,uBAAuBL,EAAII,YAC7DH,EAAQd,YAAca,EAAIb,YAC1Bc,EAAQL,YAAc,OAGlBU,EAA6BvB,EAAKwB,wBAAwBP,GAC1DQ,EAAyC,GAC7CF,EAAiBP,QAAO,SAAEU,OAClBC,EAAS,IAAIpC,EACjBoC,EAAOC,WAAaF,EACpBC,EAAOE,UAAY7B,EAAKD,QAAQ+B,4BAA4Bb,EAAII,WAAYK,GAC5EC,EAAOI,SAAW/B,EAAKD,QAAQiC,iBAAiBf,EAAIgB,WAAWC,IAAIR,GAAMT,EAAII,WAAYK,GACzFC,EAAOQ,SAAWnC,EAAKD,QAAQiC,iBAAiBf,EAAImB,WAAWF,IAAIR,GAAMT,EAAII,WAAYK,OAErFW,EAAyBrC,EAAKD,QAAQuC,WAAWrB,EAAII,WAAYK,GACrE,GAAIW,EAAK,CAELV,EAAOY,eAAmC,eAAlBF,EAAIG,YAA4C,GAAbH,EAAII,MAC/Dd,EAAOe,sBAAwBL,EAAIM,iBAC/BC,EAAgB5C,EAAKD,QAAQ8C,iBAAiB5B,EAAII,WAAYK,GAC9DkB,IACAjB,EAAOmB,mBAAqBF,EAAcG,SAIlDtB,EAAmBuB,KAAKrB,KAG5B3B,EAAKD,QAAQkD,KAAKxB,EAAoBR,EAAII,WAAU,SAAGM,GAAS,OAAAA,EAAOC,iBAGnEsB,EAA2C,IAAIC,IACnD1B,EAAmBT,QAAO,SAAEW,GACxBuB,EAAUE,IAAIzB,EAAOC,WAAYD,KAkBrCF,GAfAA,EAAqBA,EAAmB4B,OAAM,SAAE1B,GAC5C,GAAIA,EAAOe,sBAAuB,KAC1BY,EAAiCJ,EAAUhB,IAAIP,EAAOmB,oBAC1D,OAAIQ,IAEAA,EAAa7D,SAASuD,KAAKrB,IACpB,GAKX,OAAO,KAIyB4B,IAAG,SAAmB5B,GAC1D,GAAIA,EAAOY,gBAA2C,EAAzBZ,EAAOlC,SAAS+D,OAAY,KAEjDC,EAAkCC,OAAOC,OAAO,IAAIpE,EAAoBoC,GAI5E,OAHA8B,EAAcG,mBAAqBjC,EACnC8B,EAAc1B,SAAWJ,EAAOlC,SAAS8D,IAAG,SAACM,GAAS,OAAAA,EAAM9B,WAAU+B,KAAK,KAC3EL,EAActB,SAAWR,EAAOlC,SAAS8D,IAAG,SAACM,GAAS,OAAAA,EAAM1B,WAAU2B,KAAK,KACpEL,EAEP,OAAO9B,IAIfT,EAAQ6C,QAAUtC,EAElBX,EAASkC,KAAK9B,UAId8C,EAA8C,IAAIb,IA6BtD,OA5BArC,EAASE,QAAO,SAACiD,GAAQ,OAAAD,EAAaZ,IAAIa,EAAK3D,OAAQ2D,KAEvDnD,EAASE,QAAO,SAACiD,GACb,IAAKA,EAAK7C,aAKN,OAHI8C,EAAalE,EAAKmE,uBAAuBF,EAAK5C,WAAY4C,EAAK/D,aACxDa,KAAKiC,KAAKiB,QACrBhE,EAAUY,YAAYmC,KAAKkB,OAevBA,EAZJE,EAAgBJ,EAAa9B,IAAI+B,EAAK7C,cACpCgD,IAEEF,EAAaE,EAAcvD,YAAYwD,KAAI,SAACC,GAAM,OAAAA,EAAGjD,YAAc4C,EAAK5C,gBAExE6C,EAAalE,EAAKmE,uBAAuBF,EAAK5C,WAAY4C,EAAK/D,YAC/DkE,EAAcvD,YAAYmC,KAAKkB,IAEnCA,EAAWnD,KAAKiC,KAAKiB,MAIjBC,EAAalE,EAAKmE,uBAAuBF,EAAK5C,WAAY4C,EAAK/D,aACxDa,KAAKiC,KAAKiB,GACrBhE,EAAUY,YAAYmC,KAAKkB,MAI5BjE,GAGHN,EAAAC,UAAAa,eAAR,SAAuBF,EAA+Bc,GAAtD,IAAArB,EAAAR,KACQgB,EAA6B,GAkBjC,OAjBAD,GAAYA,EAASS,QAAO,SAAEuD,EAAO7C,OAC7B8C,EAA+B,IAAI9E,EAC5B,cAAPgC,GACA8C,EAAcC,aAAe,WAC7BD,EAAc3C,UAAY,OAC1B2C,EAAcE,WAAaH,IAE3BC,EAAcC,aAAe/C,EAC7B8C,EAAc3C,UAAY7B,EAAKD,QAAQ+B,4BAA4BT,EAAYK,GAC/E8C,EAAcE,WAAa1E,EAAKD,QAAQiC,iBAAiBuC,EAAOlD,EAAYK,IAEhFlB,EAAUwC,KAAKwB,KAInBhF,KAAKO,QAAQkD,KAAKzC,EAAWa,EAAU,SAAGd,GAAW,OAAAA,EAASkE,eAEvDjE,GAIHb,EAAAC,UAAA4B,wBAAR,SAAgCP,OACxB0D,EAAuB,IAAIC,IAI/B,OAHA3D,EAAIgB,YAAchB,EAAIgB,WAAWjB,QAAO,SAAEuD,EAAO7C,GAAQ,OAAAiD,EAAQE,IAAInD,KACrET,EAAImB,YAAcnB,EAAImB,WAAWpB,QAAO,SAAEuD,EAAO7C,GAAQ,OAAAiD,EAAQE,IAAInD,KAC9CoD,MAAMC,KAAKJ,EAAQK,SAKtCrF,EAAAC,UAAAuE,uBAAR,SAA+B9C,EAAoBnB,OAC3C+D,EAAO,IAAI5E,EAIf,OAHA4E,EAAK5C,WAAaA,EAClB4C,EAAK/D,WAAaA,EAClB+D,EAAKlD,KAAO,GACLkD,GAGftE,GA5KA,SAAAA,KCTA,IAAAsF,GACSA,EAAAC,QAAP,WAAA,IAAAlF,EAAAR,KAKE,MAJmB,uCACO2F,QAAQ,QAAO,SAAGC,GAC1C,OAAOpF,EAAKqF,QAAQD,MAKTH,EAAAI,QAAf,SAAuBD,OAEfE,EAAoB,GAAhBC,KAAKC,SAAgB,EAG/B,OADgB,MAANJ,EAAYE,EAAS,EAAJA,EAAU,GAC5BG,SAAS,KAEtBR,GAhBA,SAAAA,KC0BA,MAAA,SAAAS,OAwBAC,GAGWA,EAAA/F,UAAAgG,MAAP,SAAa3F,GAET,GAAoC,IADpCT,KAAKS,UAAYA,GACHY,YAAY2C,OAEtB,OADAqC,QAAQC,KAAK,SACN,OAGPC,EADiB9F,EAAUY,YAAY,GACbE,KAC9B,GAAuB,GAAnBgF,EAASvC,OAET,OADAqC,QAAQC,KAAK,WACN,OAEPE,EAAUD,EAAS,GAEnB9B,EAAOzE,KAAKyG,UAAUD,GAI1B,OAHA/B,EAAKiC,QAAS,EACdjC,EAAKkC,UAAW,EAET,CAAClC,IAGJ0B,EAAA/F,UAAAqG,UAAR,SAAkBhF,GAAlB,IAAAjB,EAAAR,KACUyE,EAAsB,IAAIyB,EAiBhC,OAhBAzB,EAAK9C,GAAK8D,EAAKC,UACfjB,EAAKmC,KAAO5G,KAAK6G,kBAAkBpF,GACnCgD,EAAKnE,KAAO,CACRqB,GAAI8C,EAAK9C,GACTiF,KAAMnC,EAAKmC,MAEfnC,EAAKqC,SAAWrF,EAChBgD,EAAKhE,UAAYT,KAAKS,UACtBgE,EAAKxE,SAAW,GAChBwB,EAAIJ,YAAYG,QAAO,SAACkD,GACpBA,EAAWnD,KAAKC,QAAO,SAACuF,OACdC,EAA2BxG,EAAKiG,UAAUM,IAChDC,EAAUC,OAASxC,GACdxE,SAASuD,KAAKwD,OAGpBvC,GAGH0B,EAAA/F,UAAAyG,kBAAR,SAA0BpF,OAClByF,EAIJ,OAHGzF,EAAIT,WAAkC,EAArBS,EAAIT,UAAUgD,SAC9BkD,EAAezF,EAAIT,UAAU,GAAGkE,YAEjCgC,EACQzF,EAAIf,WAAa,IAAMwG,EAAe,IAAMzF,EAAIb,YAAYuG,UAAY,IAExE1F,EAAIf,WAAa,IAAMe,EAAIb,YAAYuG,UAAY,KAGtEhB,GAxDA,SAAAA,KClDA,IAAAiB,GAsBWA,EAAAhH,UAAAiH,qBAAP,SAA4BC,GAA5B,IAAA9G,EAAAR,KACE,GAAGA,KAAKuH,gBAAgBC,IAAIF,GAAM,KAC5BG,EAAKzH,KAAKuH,gBAAgB7E,IAAI4E,GAClC,OAAOI,EAAAA,GAAGD,GAEV,OAAOzH,KAAK2H,gBAAgBC,cAAcN,GAAMO,KAAK9D,EAAAA,IAAG,SAAC+D,OACjDL,EAAwBM,KAAKC,MAAMF,EAASG,SAElD,OADAzH,EAAK+G,gBAAgB3D,IAAI0D,EAAMG,GACxBA,0BAlBhBS,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAXjBC,EAAAA,mBAAaC,EAAAA,sBAEbC,EAAAA,4BAHYC,EAAAA,4NAgBnB,SAAApB,EAAoBqB,EACVC,EACAf,EACAgB,GAHU3I,KAAAyI,KAAAA,EACVzI,KAAA0I,eAAAA,EACA1I,KAAA2H,gBAAAA,EACA3H,KAAA2I,SAAAA,EALF3I,KAAAuH,gBAAkD,IAAI5D,QCChEiF,GAWIA,EAAAxI,UAAAyI,iBAAA,SAAiBvB,OACTwB,EAAcC,uCAAwBzB,EAC1C,OAAmDtH,KAAKyI,KAAK/F,IAAIoG,GAAWjB,KAAKmB,EAAAA,IAAG,SAAC1I,IACtCA,GAAQ,IACpCkB,QAAO,SAACyH,OAEfC,EAAmCD,EAAOC,QAAU,GAExDA,EAAO1H,QAAO,SAAE2H,EAAOC,GACfD,EAAME,YAAcC,WAAiC,OAApBH,EAAME,YACvCF,EAAME,UAAYD,KAI1BH,EAAOC,OAASA,EAAOzF,KAAI,SAAE8F,EAAGC,GAAM,OAAAD,EAAEF,UAAYG,EAAEH,YAEtDH,EAAO1H,QAAO,SAAE2H,EAAOC,GACnBD,EAAME,UAAYD,8BA5BrClB,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAbjBC,EAAAA,mBAAaC,EAAAA,sBAFDE,EAAAA,2LAkBjB,SAAAI,EAAoBH,EACRC,EACAC,GAFQ3I,KAAAyI,KAAAA,EACRzI,KAAA0I,eAAAA,EACA1I,KAAA2I,SAAAA,ECVhB,IAAAc,GA2BYA,EAAArJ,UAAAsJ,gBAAR,eACQC,EAA+C,IAAIhG,IAEvD3D,KAAK4J,eAAepI,QAAO,SAAEuD,EAAO7C,GAChCyH,EAAwB/F,IAAI1B,EAAKyH,EAAwBE,QAG7D7J,KAAK8J,qBAAqBtI,QAAO,SAAEuD,EAAO7C,GAClC6C,EAAMsE,YAAcC,WAAiC,OAApBvE,EAAMsE,WACvCM,EAAwB/F,IAAI1B,EAAK6C,EAAMsE,aAI/CrJ,KAAK2J,wBAA0BA,GAI3BF,EAAArJ,UAAA2J,oBAAR,eACQC,EAAiD,IAAIrG,IACzD3D,KAAKiK,cAAczI,QAAO,SAAC0I,OACnBC,EAAUD,EAAaC,SAC1BD,EAAahB,QAAU,IAAI1H,QAAO,SAAC2H,OAC5B/G,EAAa+G,EAAMlE,aACnB/C,EAAMiI,EAAU,IAAM/H,EAC1B4H,EAAepG,IAAI1B,EAAKiH,OAGhCnJ,KAAK8J,qBAAuBE,GAGxBP,EAAArJ,UAAAgK,gBAAR,SAAwBnB,EAA0BoB,EAA8CT,GAAhG,IAAApJ,EAAAR,KACI,GAAKiJ,EAAL,CAGAoB,EAAczG,IAAIqF,EAAOqB,KAAMrB,GAG/BA,EAAOsB,gBAAgB/I,QAAO,SAACqB,GAC3BrC,EAAKgK,qBAAqBvB,EAAQpG,EAAK,KAAM+G,SAI7C3J,EAA+BgJ,EAAOwB,oBACrCxK,GAAaA,EAAS+D,QAI3B/D,EAASuB,QAAO,SAACkJ,GACblK,EAAK4J,gBAAgBM,EAAaL,EAAeT,OAKjDH,EAAArJ,UAAAoK,qBAAR,SAA6BvB,EAA0B0B,EAA4BvH,EAAkCwG,GAArH,IAAApJ,EAAAR,KACQkC,EAAM+G,EAAOqB,KAAO,IAAMK,EAAQpH,QACtCqG,EAAehG,IAAI1B,EAAKyI,GACpBvH,GACApD,KAAK4K,qBAAqBhH,IAAI1B,EAAKkB,OAGjCyH,EAAsCF,EAAQG,kBAC9CD,GAAgD,EAA3BA,EAAkB7G,QACzC6G,EAAkBrJ,QAAO,SAACuJ,OAChBC,EAA2CD,EAAiBE,qBAC5DD,GAAsD,EAA9BA,EAAqBhH,QAC/CgH,EAAqBxJ,QAAO,SAAC0J,GACzB1K,EAAKgK,qBAAqBvB,EAAQiC,EAAMP,EAASf,QAO9DH,EAAArJ,UAAAqD,KAAP,SAAY0H,EAActJ,EAAoBuJ,GAA9C,IAAA5K,EAAAR,KACImL,EAAM1H,KAAI,SAAE8F,EAAGC,OACL6B,EAAOxJ,EAAa,IAAMuJ,EAAiB7B,GAC3C+B,EAAOzJ,EAAa,IAAMuJ,EAAiB5B,GACjD,OAAKhJ,EAAKmJ,wBAAwBnC,IAAI6D,IAAU7K,EAAKmJ,wBAAwBnC,IAAI8D,GAGrE9K,EAAKmJ,wBAAwBnC,IAAI6D,GAGjC7K,EAAKmJ,wBAAwBnC,IAAI8D,GAK1B9K,EAAKmJ,wBAAwBjH,IAAI2I,GACjC7K,EAAKmJ,wBAAwBjH,IAAI4I,GAJzC,GAHC,EAHDD,EAAKE,cAAcD,MAiB/B7B,EAAArJ,UAAAoL,2BAAP,SAAkCC,EAAuBxG,OACjDpD,EAAa7B,KAAKkB,oBACtB,OAAOlB,KAAKwC,iBAAiBiJ,EAAe5J,EAAYoD,IAIrDwE,EAAArJ,UAAAoC,iBAAP,SAAwBiJ,EAAuB5J,EAAoBoD,OAC3D0F,EAA6B3K,KAAK8C,WAAWjB,EAAYoD,GAC7D,IAAK0F,EAED,OADAtE,QAAQqF,MAAM,WAAa1L,KAAKyH,GAAGkE,GAAK,IAAM3L,KAAKyH,GAAGmE,KAAO,OAAS/J,EAAa,QAAUoD,EAAe,KACrGwG,EAEX,IAAKd,EACD,OAAOc,EAGX,IAEI,IAAKd,EAAQkB,WAAaC,EAAAA,mBAAmBC,SAAWpB,EAAQkB,WAAaC,EAAAA,mBAAmBE,UACzFP,GAAiBA,EAAcQ,cAAcC,SAAS,KAAM,KAG3DC,EAAMC,OAAOX,GACjB,OAAIY,MAAMF,IACN9F,QAAQiG,IAAI,QAAUtM,KAAKyH,GAAGkE,GAAK,IAAM3L,KAAKyH,GAAGmE,KAAO,OAAS/J,EAAa,QAAUoD,EAAe,gBAAkBwG,GAClHA,GAEMzL,KAAKuM,iBAAiBJ,GAM3C,GAAIxB,EAAQkB,WAAaC,EAAAA,mBAAmBU,QAExC,OAAsB,OAAlBf,GAA0BA,IAAkBnC,WAAqC,GAAxBmC,EAAczH,OAChEyH,EAC+B,SAA/BA,EAAcQ,cACd,IAC+B,QAA/BR,EAAcQ,cACd,IAEAR,EAKf,GAAId,EAAQkB,WAAaC,EAAAA,mBAAmBW,KAAM,CAC9C,GAAsB,OAAlBhB,GAA0BA,IAAkBnC,WAAqC,GAAxBmC,EAAczH,OAEvE,OAAOyH,MAEHiB,EAAO,IAAID,KAAKhB,GAEpB,OADUkB,EAAAA,OAAOD,EAAM,cAM/B,GAAI/B,EAAQkB,WAAaC,EAAAA,mBAAmBc,SACxC,OAAsB,OAAlBnB,GAA0BA,IAAkBnC,WAAqC,GAAxBmC,EAAczH,OAEhEyH,GAEHiB,EAAO,IAAID,KAAKhB,GACVkB,EAAAA,OAAOD,EAAM,wBAM/B,GAAI/B,EAAQ3H,YAAc6J,EAAAA,qBAAqBC,KAe/C,OAAOrB,MAbCsB,GAD6BpC,EAAQqC,mBAAqB,IACnCnI,KAAI,SAACoI,GAAQ,OAAAA,EAAKC,OAASzB,IACtD,OAAIsB,EACOA,EAAUnB,MACQ,OAAlBH,GAA0BA,IAAkBnC,WAAqC,GAAxBmC,EAAczH,QAK9EqC,QAAQiG,IAAI,QAAUtM,KAAKyH,GAAGkE,GAAK,IAAM3L,KAAKyH,GAAGmE,KAAO,OAAS/J,EAAa,QAAUoD,EAAe,gBAAkBwG,GAHlHA,GASjB,MAAOC,GAEL,OADArF,QAAQqF,MAAM,QAAU1L,KAAKyH,GAAGkE,GAAK,IAAM3L,KAAKyH,GAAGmE,KAAO,OAAS/J,EAAa,QAAUoD,EAAe,OAASwG,EAAgB,UAAWC,GACtID,IAaPhC,EAAArJ,UAAAmM,iBAAR,SAAyBJ,OACjBgB,EAAIhB,EAAIiB,gBAAgBC,MAAM,4BAClC,OAAOlB,EAAImB,QAAQvH,KAAKwH,IAAI,GAAIJ,EAAE,IAAM,IAAInJ,OAASmJ,EAAE,MAGpD1D,EAAArJ,UAAAO,UAAP,WACI,OAAOX,KAAKyH,GAAKzH,KAAKyH,GAAGmE,KAAO,MAG7BnC,EAAArJ,UAAAc,kBAAP,WACI,OAAOlB,KAAKyH,IAAMzH,KAAKyH,GAAG+F,WAAaxN,KAAKyH,GAAG+F,WAAWlD,KAAO,MAG9Db,EAAArJ,UAAA0C,WAAP,SAAkBjB,EAAoBoD,OAC9B/C,EAAML,EAAa,IAAMoD,EAC7B,OAAOjF,KAAK4J,eAAelH,IAAIR,IAG5BuH,EAAArJ,UAAAiD,iBAAP,SAAwBxB,EAAoBoD,OACpC/C,EAAML,EAAa,IAAMoD,EAC7B,OAAOjF,KAAK4K,qBAAqBlI,IAAIR,IAGlCuH,EAAArJ,UAAA0B,uBAAP,SAA8BD,OACtBoH,EAASjJ,KAAKqK,cAAc3H,IAAIb,GACpC,OAASoH,EAASA,EAAO2C,KAAO/J,GAG7B4H,EAAArJ,UAAAkC,4BAAP,SAAmCT,EAAoBoD,OAC/C/C,EAAML,EAAa,IAAMoD,EACzBwI,EAAczN,KAAK8J,qBAAqBpH,IAAIR,GAChD,GAAIuL,GAAeA,EAAYpL,WAAsC,IAAzBoL,EAAYpL,UAEpD,OAAOoL,EAAYpL,cAGnBQ,EAAM7C,KAAK4J,eAAelH,IAAIR,GAClC,OAASW,EAAMA,EAAI+I,KAAO3G,GAElCwE,GA9PI,SAAAA,EAAmBhC,EAAuBwC,GAGtC,GAXIjK,KAAAqK,cAA+C,IAAI1G,IACnD3D,KAAA4J,eAAiD,IAAIjG,IACrD3D,KAAA2J,wBAA+C,IAAIhG,IACnD3D,KAAA4K,qBAAuD,IAAIjH,IAG3D3D,KAAA8J,qBAAuD,IAAInG,IAI/D3D,KAAKyH,GAAKA,EACA,KACFiG,EAAajG,EAAG+F,WACpBxN,KAAKoK,gBAAgBsD,EAAY1N,KAAKqK,cAAerK,KAAK4J,gBAI9D5J,KAAKiK,cAAgBA,GAAiB,GACtCjK,KAAK+J,sBAGL/J,KAAK0J,kBCjCb,IAAAiE,GA6BWA,EAAAvN,UAAAwN,sBAAP,SAA6BtG,GAA7B,IAAA9G,EAAAR,KACI,GAAIA,KAAKuH,gBAAgBC,IAAIF,GAAO,KAC5BG,EAAKzH,KAAKuH,gBAAgB7E,IAAI4E,GAClC,OAAOI,EAAAA,GAAGD,OAENoG,EAAW,GAIf,OAHAA,EAASrK,KAAKxD,KAAK8N,qBAAqBzG,qBAAqBC,IAC7DuG,EAASrK,KAAKxD,KAAK+N,mBAAmBlF,iBAAiBvB,IAEhD0G,EAAAA,SAASH,GAAUhG,KAAK9D,EAAAA,IAAG,SAACzD,OACzBmH,EAAKnH,EAAK,GACV2J,EAAsC3J,EAAK,IAAM,GACjDC,EAAU,IAAIkJ,EAAmBhC,EAAIwC,GAE3C,OADAzJ,EAAK+G,gBAAgB3D,IAAI0D,EAAM/G,GACxBA,0BA3BtB2H,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAfjBC,EAAAA,mBAAaC,EAAAA,sBAEbC,EAAAA,4BAWAnB,SADAwB,SAbYJ,EAAAA,oPAoBjB,SAAAmF,EAAoBlF,EACRC,EACAf,EACAmG,EACAC,EACApF,GALQ3I,KAAAyI,KAAAA,EACRzI,KAAA0I,eAAAA,EACA1I,KAAA2H,gBAAAA,EACA3H,KAAA8N,qBAAAA,EACA9N,KAAA+N,mBAAAA,EACA/N,KAAA2I,SAAAA,EAPJ3I,KAAAuH,gBAAmD,IAAI5D,IClBnE,IAAAsK,GAuDEA,EAAA7N,UAAA8N,SAAA,aAGAD,EAAA7N,UAAA+N,YAAA,SAAY5J,GAAZ,IAAA/D,EAAAR,KACE,GAAMA,KAAKM,KAAM,KACXgH,EAAOtH,KAAKM,KAAK8N,SACrBpO,KAAKqO,kBAAkBT,sBAAsBtG,GAAMgH,UAAS,SAAC/N,GAC3DC,EAAKC,WAAY,IAAIN,GAAmBE,eAAeG,EAAKF,KAAMC,GAClEC,EAAK+N,UAAW,IAAIpI,GAAmBC,MAAM5F,EAAKC,WAC9CD,EAAKgO,oBAGPhO,EAAKgO,mBAAmBC,kBAE1BC,WAAU,WACRlO,EAAKgO,mBAAmBG,WAAWnO,EAAK+N,SAAS,GAAG5M,KACnD,OAKFsM,EAAA7N,UAAAwO,oBAAP,SAA2BC,OACnBpK,EAAsBoK,EAAOpK,KACX,MAApBzE,KAAK8O,aAAuB9O,KAAK8O,YAAYnN,IAAM8C,EAAK9C,KAI5D3B,KAAK8O,YAAcrK,wBAlEtBsK,EAAAA,UAAS5G,KAAA,CAAC,CACT6G,SAAU,oBACVC,SAAA,q8DAjBO1G,EAAAA,4BADWC,EAAAA,gBAUXpB,SACAwB,SAGA+E,mCAQNuB,EAAAA,0BAEAA,EAAAA,kCACAC,EAAAA,UAAShH,KAAA,CAAC,gBA2Db8F,GAnCE,SAAAA,EAAoBtG,EACVgB,EACAmF,EACAC,EACAM,GAJUrO,KAAA2H,gBAAAA,EACV3H,KAAA2I,SAAAA,EACA3I,KAAA8N,qBAAAA,EACA9N,KAAA+N,mBAAAA,EACA/N,KAAAqO,kBAAAA,EA7BDrO,KAAAoP,YAAsB,EAI/BpP,KAAAqP,WAAkB,CAChBC,QAAS,KACTC,QAAS,CACP,CAAEpG,MAAO,OAAQqG,MAAO,OAAQC,MAAO,MAGzCC,SAAU,+CAEVC,WAAY,gDAEZC,aAAc,iDACdC,WAAY,EACZC,UAAU,EACVC,MAAM,EACNC,aAAc,IC1ClB,IAAAC,GAWWA,EAAA7P,UAAA8P,WAAP,WACI,OAAOlQ,KAAKmQ,SAGTF,EAAA7P,UAAAgQ,QAAP,WACI,OAAOpQ,KAAKqQ,MAGTJ,EAAA7P,UAAA+G,QAAP,WACI,OAAOnH,KAAK4G,MAGFqJ,EAAAK,OAAd,WACI,MAAO,CAACL,EAAYM,IAAKN,EAAYO,OAAQP,EAAYQ,SAGtDR,EAAA7P,UAAAsQ,OAAP,WACI,OAAO1Q,KAAKqQ,MAGFJ,EAAAjI,MAAd,SAAoB2I,GAChB,OAAIA,IAAQrH,WAAqB,OAARqH,EACd,KAEPA,aAAeV,EACRU,EAEQ,iBAARA,EACAV,EAAYK,SAASzL,KAAI,SAAC+L,GAAM,OAAAA,EAAGP,MAAQM,IAEnC,iBAARA,EACAV,EAAYK,SAASzL,KAAI,SAAC+L,GAAM,OAAAA,EAAGT,SAAWQ,IAEnDA,EAAIN,KACCJ,EAAYK,SAASzL,KAAI,SAAC+L,GAAM,OAAAA,EAAGP,MAAQM,EAAIN,OAEnD,MA7CJJ,EAAAM,IAAmB,IAAIN,EAAY,EAAG,MAAO,MAE7CA,EAAAO,OAAsB,IAAIP,EAAY,EAAG,SAAU,MAEnDA,EAAAQ,OAAsB,IAAIR,EAAY,EAAG,SAAU,MA2C9DA,GAzCI,SAAAA,EAA2BE,EAAwBE,EAAqBzJ,GAA7C5G,KAAAmQ,QAAAA,EAAwBnQ,KAAAqQ,KAAAA,EAAqBrQ,KAAA4G,KAAAA,ECR5E,IAAAiK,GAEWA,EAAAC,mBAAP,SAA0B/M,GACtB,IAAKA,EACD,OAAO,SAEP4M,EAAMzM,OAAO6M,OAAO,MAIxB,OAHAhN,EAAIvC,QAAO,SAAEuD,EAAO7C,GAChByO,EAAIzO,GAAO6C,IAER4L,GAIJE,EAAAG,mBAAP,SAA0BL,WACtB,GAAIA,IAAQrH,WAAqB,OAARqH,EACrB,OAAO,SAGPM,EAAS,IAAItN,QACjB,IAAc,IAAAuN,ECNtB,SA4FgBC,EAASC,GACrB,IAAIjE,EAAsB,mBAAXkE,QAAyBD,EAAEC,OAAOC,UAAWC,EAAI,EAChE,OAAIpE,EAAUA,EAAEqE,KAAKJ,GACd,CACHK,KAAM,WAEF,OADIL,GAAKG,GAAKH,EAAEpN,SAAQoN,OAAI,GACrB,CAAErM,MAAOqM,GAAKA,EAAEG,KAAMG,MAAON,KD5F1BO,CAAAzN,OAAOsB,KAAKmL,IAAIiB,EAAAV,EAAAO,QAAAG,EAAAF,KAAAE,EAAAV,EAAAO,OAAE,CAA3B,IAAII,EAACD,EAAA7M,MACNkM,EAAOrN,IAAIiO,EAAGlB,EAAIkB,yGAEtB,OAAOZ,GAEfJ,GAzBA,SAAAA,SEYM9H,EAAc+I,0BAEpBC,GAUSA,EAAA3R,UAAA4R,sBAAP,SAA6BC,GAA7B,IAAAzR,EAAAR,KACM2Q,EAAWzM,OAAOC,OAAO,GAAI8N,GAC7BA,EAAkBlR,WACpB4P,EAAI5P,SAAW8P,EAAQC,mBAAmBmB,EAAkBlR,eAG1DmR,EAAOnK,KAAKoK,UAAUxB,GACtByB,EAAaC,mBAAmBH,GAChCI,EAASvJ,EAAQ,eAAeqJ,EACpC,OAAOpS,KAAKyI,KAAK/F,IAAI4P,GAAKzK,KAAK9D,EAAAA,IAAG,SAACzD,GACjC,IAAKA,EACH,OAAOA,MAELiS,EAAW,EAWf,OAVAA,GAAeA,EAAYC,SAAWD,EAAYC,QAAQhR,QAAO,SAACiR,GAElC,iBAAnBA,EAAO1R,WAChB0R,EAAO1R,SAAWgH,KAAKC,MAAMyK,EAAO1R,WAGtC0R,EAAO1R,SAAW8P,EAAQG,mBAAmByB,EAAO1R,UACpD0R,EAAOrR,WAAaZ,EAAKkS,OAAOD,EAAOrR,YACvCqR,EAAO7R,YAAcqP,EAAYjI,MAAMyK,EAAO7R,eAEzC2R,MAIJR,EAAA3R,UAAAuS,4BAAP,SAAmCrL,GAAnC,IAAA9G,EAAAR,KACE,IAAKsH,EACH,OAAOI,EAAAA,GAAG,IAEZ,GAAI1H,KAAK4S,sBAAsBpL,IAAIF,GAEjC,OAAOI,EAAAA,GAAG1H,KAAK4S,sBAAsBlQ,IAAI4E,QAGrCgL,EAASvJ,EAAQ,4BAA4BzB,EACjD,OAAmDtH,KAAKyI,KAAK/F,IAAI4P,GAC9DzK,KAAKmB,EAAAA,IAAG,SAAC1I,GAAQ,OAAAE,EAAKoS,sBAAsBhP,IAAI0D,EAAMhH,OAKrDyR,EAAA3R,UAAAsS,OAAR,SAAehG,GACb,MAAmB,iBAARA,EACF,IAAID,KAAKC,GACQ,iBAARA,EACT,IAAID,KAAKC,GAETA,GAIJqF,EAAA3R,UAAAyS,cAAP,SAAqBlR,EAAYP,GAAjC,IAAAZ,EAAAR,KACMkS,EAAOnK,KAAKoK,UAAU/Q,GACtBgR,EAAaC,mBAAmBH,GAChCI,EAASvJ,EAAQ,IAAIpH,EAAE,eAAeyQ,EAC1C,OAAOpS,KAAKyI,KAAK/F,IAAI4P,GAAKzK,KAAK9D,EAAAA,IAAG,SAACzD,GACjC,IAAKA,EACH,OAAOA,MAELwS,EAAE,EAwBN,MAtB0B,iBAAfA,EAAG/R,WACZ+R,EAAG/R,SAAWgH,KAAKC,MAAM8K,EAAG/R,WAE9B+R,EAAG/R,SAAW8P,EAAQG,mBAAmB8B,EAAG/R,UAC5C+R,EAAG1R,WAAaZ,EAAKkS,OAAOI,EAAG1R,YAC/B0R,EAAGlS,YAAcqP,EAAYjI,MAAM8K,EAAGlS,aAEtCkS,EAAGvR,KAAOuR,EAAGvR,MAAQ,GAErBuR,EAAGvR,KAAKC,QAAO,SAACC,GACTA,IAGLA,EAAIb,YAAcqP,EAAYjI,MAAMvG,EAAIb,aAEb,iBAAhBa,EAAIV,WACbU,EAAIV,SAAWgH,KAAKC,MAAMvG,EAAIV,WAEhCU,EAAIV,SAAW8P,EAAQG,mBAAmBvP,EAAIV,UAC9CU,EAAIgB,WAAkCoO,EAAQG,mBAAmBvP,EAAIgB,aAAe,IAAIkB,IACxFlC,EAAImB,WAAkCiO,EAAQG,mBAAmBvP,EAAImB,aAAe,IAAIe,OAEnFmP,0BAhGZ5K,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAdLC,EAAAA,mBAAaC,EAAAA,sBADDE,EAAAA,2LAoBnB,SAAAuJ,EAAoBtJ,EACVC,EACAC,GAFU3I,KAAAyI,KAAAA,EACVzI,KAAA0I,eAAAA,EACA1I,KAAA2I,SAAAA,EAJF3I,KAAA4S,sBAA0D,IAAIjP,IClBxE,IAAAoP,EAAA,SAAAA,OCEAC,EAAA,SAAAA,OCFAC,GACWA,EAAAC,gBAAP,SAAuBC,GACnB,OAAKA,GAEOA,EAAEzH,OAEFyH,EAAEzH,MAAM0H,QAGTD,EAAEzH,MAAM0H,QANR,IASnBH,GAZA,SAAAA,KCAA,IAAAI,IACkBA,GAAAC,kBAAd,SAAgC5G,OACxB6G,EAAS,IAAI9G,KAAKC,GAKtB,OAJA6G,EAAEC,SAAS,GACXD,EAAEE,WAAW,GACbF,EAAEG,WAAW,GACbH,EAAEI,gBAAgB,GACXJ,GAGGF,GAAAO,gBAAd,SAA8BlH,OACtB6G,EAAS,IAAI9G,KAAKC,GAKtB,OAJA6G,EAAEC,SAAS,IACXD,EAAEE,WAAW,IACbF,EAAEG,WAAW,IACbH,EAAEI,gBAAgB,KACXJ,GAEfF,IAlBA,SAAAA,MCAA,IAAAQ,IAyCEA,GAAAzT,UAAA8N,SAAA,eACM4F,EAAS,IAAId,EACjBc,EAAOC,MAAQ,EACfD,EAAOE,SAAW,GAClBF,EAAOG,UAAY,EACnBH,EAAOtB,QAAU,GACjBxS,KAAK8T,OAASA,GAGhBD,GAAAzT,UAAA+N,YAAA,SAAY5J,GAYV,GAXKvE,KAAKkU,iBAAoBlU,KAAKmU,cAIvBnU,KAAKmU,cAGLnU,KAAKkU,kBAEflU,KAAKkU,gBAAkBb,GAASO,gBAAgB5T,KAAKmU,gBAHrDnU,KAAKmU,cAAgBd,GAASO,gBAAgB5T,KAAKkU,kBAJnDlU,KAAKmU,cAAgBd,GAASO,gBAAgB,IAAInH,MAClDzM,KAAKkU,gBAAkBb,GAASC,kBAAkB,IAAI7G,MAAK,IAAIA,MAAO2H,UAAY,UAQ9EpU,KAAKoO,SAAU,KACfiG,EAAQrU,KAAKsU,kBACjBtU,KAAKuU,QAAQF,KAIVR,GAAAzT,UAAAoU,MAAP,eACMH,EAAQrU,KAAKsU,kBACjBtU,KAAKuU,QAAQF,IAGPR,GAAAzT,UAAAkU,gBAAR,eACMD,EAAQ,IAAItB,EAOhB,OANAsB,EAAMJ,UAAY,EAClBI,EAAML,SAAW,GACjBK,EAAMjG,SAAWpO,KAAKoO,SACtBiG,EAAMvT,OAASd,KAAKc,OACpBuT,EAAMH,gBAAkBlU,KAAKkU,gBAC7BG,EAAMF,cAAgBnU,KAAKmU,cACpBE,GAGDR,GAAAzT,UAAAmU,QAAR,SAAgBF,GAAhB,IAAA7T,EAAAR,KACEA,KAAKyU,aAAazC,sBAAsBqC,GAAO/F,UAAS,SAAChO,GACvDE,EAAKyR,kBAAoBoC,EACzB7T,EAAKsT,OAASxT,GACf,SAAEoL,GACDrF,QAAQqF,MAAM,aAAcA,GAC5BlL,EAAKkU,eAAehJ,MAAM,cAAgBuH,EAAUC,gBAAgBxH,OAIxEmI,GAAAzT,UAAAuU,cAAA,SAAc9F,GACPA,IAIDA,EAAOoF,YACTjU,KAAKiS,kBAAkBgC,UAAYpF,EAAOoF,WAExCpF,EAAOmF,WACThU,KAAKiS,kBAAkB+B,SAAWnF,EAAOmF,UAE3ChU,KAAKuU,QAAQvU,KAAKiS,qBAGpB4B,GAAAzT,UAAAwU,kBAAA,SAAkB/F,GAChB7O,KAAKiS,kBAAkB+B,SAAWnF,EAClC7O,KAAKuU,QAAQvU,KAAKiS,yCAlGrBlD,EAAAA,UAAS5G,KAAA,CAAC,CACT6G,SAAU,aACVC,SAAA,moFAVO8C,SAFA8C,EAAAA,uBACAC,EAAAA,qBAHwBtM,EAAAA,8CAkB9BuM,EAAAA,YAAW5M,KAAA,CAAC,oDAEZ+G,EAAAA,sBAGAA,EAAAA,+BAGAA,EAAAA,6BAGAA,EAAAA,SAmFH2E,IA5EE,SAAAA,GAAoBY,EACVC,EACAM,EACArM,GAHU3I,KAAAyU,aAAAA,EACVzU,KAAA0U,eAAAA,EACA1U,KAAAgV,cAAAA,EACAhV,KAAA2I,SAAAA,EArBqC3I,KAAAiV,SAAU,EClB3D,IAAAC,IAeEA,GAAA9U,UAAA8N,SAAA,kCAZDa,EAAAA,UAAS5G,KAAA,CAAC,CACT6G,SAAU,8BACVC,SAAA,wyGALkBzG,EAAAA,oDASjB0G,EAAAA,0BAEAA,EAAAA,SAMHgG,IAJE,SAAAA,GAAoBvM,GAAA3I,KAAA2I,SAAAA,EAFX3I,KAAAoP,YAAqB,ECXhC,IAAA+F,IAsBEA,GAAA/U,UAAA8N,SAAA,WACElO,KAAKuP,QAAU,CACb,CAAEpG,MAAO,YAAasG,MAAO,IAAKD,MAAO,OACzC,CAAErG,MAAO,WAAYsG,MAAO,IAAKD,MAAO,KAAM4F,UAAU,GACxD,CAAEjM,MAAO,WAAYsG,MAAO,IAAKD,MAAO,MAAO4F,UAAU,QAEvDC,EAAgBrV,KAAKuP,QAAQ,GAC7B+F,EAAgBtV,KAAKuP,QAAQ,GAEjC,GAAMvP,KAAKuV,cAAe,KAGpBC,EAAoBxV,KAAKuV,cAAczO,SAASlG,YAChD4U,GAAQvF,EAAYM,KACtB8E,EAAcI,SAAU,EACxBH,EAAc9F,MAAQ,KACbgG,GAAQvF,EAAYQ,SAC7B6E,EAAcG,SAAU,EACxBJ,EAAc7F,MAAQ,OAK5B2F,GAAA/U,UAAA+N,YAAA,SAAY5J,OAYNmR,GATCnR,EAAQgR,eAEDhR,EAAQgR,cAAcI,cAGtBpR,EAAQgR,cAAcI,cAAc7O,SAASlG,YAJ7C,QAcV8U,EALGnR,EAAQgR,eAEDhR,EAAQgR,cAAcK,aAGtBrR,EAAQgR,cAAcK,aAAa9O,SAASlG,YAJ5C,OAOeZ,KAAK6V,UAAa7V,KAAK6V,SAAStG,UAGhDmG,GAAWzF,EAAYM,KAChCvQ,KAAK6V,SAASC,WAAW,YACzB9V,KAAK6V,SAASE,WAAW,YACzB/V,KAAK6V,SAASG,eAAe,WAAY,MAChCN,GAAWzF,EAAYQ,QAChCzQ,KAAK6V,SAASC,WAAW,YACzB9V,KAAK6V,SAASE,WAAW,YACzB/V,KAAK6V,SAASG,eAAe,WAAY,OAEzChW,KAAK6V,SAASC,WAAW,YACzB9V,KAAK6V,SAASC,WAAW,YACzB9V,KAAK6V,SAASG,eAAe,WAAY,MACzChW,KAAK6V,SAASG,eAAe,WAAY,SAGvCzR,EAAQgR,eAAiBhR,EAAQgR,cAAcK,eACjD5V,KAAKM,KAAOiE,EAAQgR,cAAcK,aAAa9O,SAASvC,+BA/E7DwK,EAAAA,UAAS5G,KAAA,CAAC,CACT6G,SAAU,qBACVC,SAAA,6PARkBzG,EAAAA,oDAYjB0G,EAAAA,wBAEAC,EAAAA,UAAShH,KAAA,CAAC,mBA2EbgN,IArEE,SAAAA,GAAoBxM,GAAA3I,KAAA2I,SAAAA,ECpBtB,IAAAsN,IAiBEA,GAAA7V,UAAA8N,SAAA,kCAfDa,EAAAA,UAAS5G,KAAA,CAAC,CACT6G,SAAU,gCACVC,SAAA,4KAJkBzG,EAAAA,+CAQjB0G,EAAAA,sBAGAA,EAAAA,SASH+G,IALE,SAAAA,GAAoBtN,GAAA3I,KAAA2I,SAAAA,ECftB,IAAAuN,IAeIA,GAAA9V,UAAA+V,WAAA,SAAW/H,EAAkBtN,GACzB,OAAOd,KAAK+Q,OAAO3C,EAAUtN,IAGzBoV,GAAA9V,UAAA2Q,OAAR,SAAe3C,EAAkBtN,GAC7B,GAAIsN,EAAJ,KAMIgI,EADMpW,KAAKqW,SAASC,wBAAwBL,IAC/BlF,OAAO/Q,KAAK2I,UAU7ByN,EAAOG,SAASnI,SAAWA,EAC3BgI,EAAOG,SAASzV,OAASA,EACZd,KAAKwW,aAAaC,KAAKL,EAXlB,CACd5G,MAAO,SACPC,MAAO,IACPiH,OAAQ,IACRC,WAAW,EACXC,aAAa,EACbC,eAAe,SAZfxQ,QAAQqF,MAAM,8BAA+B0C,EAAUtN,yBAhBlEoH,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,qDALL0O,EAAAA,gCAA0BtO,EAAAA,gBAEtCuO,EAAAA,sBADAlC,EAAAA,+OAOL,SAAAqB,GACYG,EACA1N,EACA6N,EACAQ,GAHAhX,KAAAqW,SAAAA,EACArW,KAAA2I,SAAAA,EACA3I,KAAAwW,aAAAA,EACAxW,KAAAgX,gBAAAA,ECZhB,IAAAC,IAuDEA,GAAA7W,UAAA8N,SAAA,WACElO,KAAKkX,mBAAmB,KAAM,KAGhCD,GAAA7W,UAAA+N,YAAA,SAAY5J,GAAZ,IAAA/D,EAAAR,KACE,GAAKuE,EAAQuP,OAAb,KAKIqD,EAAenX,KAAKoX,YAAY7S,EAAQuP,OAAO6B,eAC/C0B,EAAcrX,KAAKoX,YAAY7S,EAAQuP,OAAO8B,cAC9C/H,EAAW,CACb7N,KAAKsX,yBAAyBD,GAC9BrX,KAAKuX,qBAAqBJ,EAAcE,IAE1CrJ,EAAAA,SAASH,GAAUS,UAAS,SAAChO,OACvBkX,EAAoCjT,EAAQuP,OAAO8B,aACjD4B,GACJhX,EAAKiX,cAAcD,EAAWhF,SAIb,MAAf6E,GAAuBA,GAAeF,EACxC3W,EAAK0W,mBAAmBG,EAAaG,EAAWhF,SAEhDhS,EAAKgS,QAAUgF,EAAWhF,SAE7B,SAAEkF,GACDrR,QAAQqF,MAAM,QAAU2L,EAAc,sBAAuBK,GAC7DlX,EAAKkU,eAAehJ,MAAM,cAAgBuH,EAAUC,gBAAgBwE,QAKhET,GAAA7W,UAAAkX,yBAAR,SAAiClJ,GAAjC,IAAA5N,EAAAR,KACE,OAAIoO,EACKpO,KAAKqO,kBAAkBT,sBAAsBQ,GAAUvG,KAAKmB,EAAAA,IAAG,SAAC1I,GAAQ,OAAAE,EAAKmX,mBAAqBrX,KAElGoH,EAAAA,GAAG1H,KAAK2X,qBASnBV,GAAA7W,UAAAmX,qBAAA,SAAqBJ,EAAsBE,GAA3C,IAAA7W,EAAAR,KACE,OAAmB,MAAfqX,GAAuBA,GAAeF,EAEjCnX,KAAKyU,aAAa9B,4BAA4B0E,GAAaxP,KAAKmB,EAAAA,IAAG,SAAC1I,GAAQ,OAAAE,EAAKoX,eAAiBtX,GAAQ,MAG1GoH,EAAAA,GAAG1H,KAAK4X,iBASXX,GAAA7W,UAAAqX,cAAR,SAAsBjF,GAAtB,IAAAhS,EAAAR,KACOwS,GAGLA,EAAQhR,QAAO,SAACiR,OACVoF,EACJrX,EAAKsX,kBAAkBrF,EAAO1R,UAC1B0R,EAAO1R,UAAoC,GAAxB0R,EAAO1R,SAAS8I,MAAa4I,EAAO1R,SAASyG,IAAI,eAGtEqQ,EAAc,GACVrX,EAAKoX,gBAA+C,EAA7BpX,EAAKoX,eAAe5T,SAC7C6T,EAAYrX,EAAKoX,eAAe,GAAG3S,cAAgBwN,EAAO1R,SAAS2B,IAAI,gBAGzEmV,EAAchH,EAAQC,mBAAmB2B,EAAO1R,UAElD,EAAc8W,YAAcA,KAKxBZ,GAAA7W,UAAA0X,kBAAR,SAA0B/W,GAA1B,IAAAP,EAAAR,KACOe,GAAaf,KAAK2X,oBAGvBrS,MAAMC,KAAKxE,EAASyE,QAAQhE,QAAO,SAACyD,OAC9BF,EAAQhE,EAAS2B,IAAIuC,GACrB8S,EAAgBvX,EAAKmX,mBAAmBnM,2BAA2BzG,EAAOE,GAC9ElE,EAAS6C,IAAIqB,EAAc8S,MAIvBd,GAAA7W,UAAAgX,YAAR,SAAoBtD,GAClB,OAAKA,GAAWA,EAAOtB,SAAoC,GAAzBsB,EAAOtB,QAAQxO,OAGxC8P,EAAOtB,QAAQ,GAAGpE,SAFlB,MAMH6I,GAAA7W,UAAA8W,mBAAR,SAA2B9I,EAAkBoE,OACvCjD,EAAiB,CACnB,CAAEpG,MAAO,WAAYsG,MAAO,IAAKD,MAAO,MACxC,CAAErG,MAAO,aAAcsG,MAAO,IAAKD,MAAO,KAAMwI,UAAW,CAAExC,KAAM,WAAYyC,QAAS,CAAEtL,OAAQ,0BAClG,CAAExD,MAAO,mBAAoBsG,MAAO,GAAID,MAAO,QAC/C,CAAErG,MAAO,SAAUsG,MAAO,IAAKD,MAAO,OAAQiG,QAASzV,KAAKoP,aAG9DpP,KAAK4X,eAAepW,QAAO,SAAE2H,OACvBhH,EAAqB,CACvBgH,MAAO,eAAiBA,EAAMlE,aAC9BuK,MAAOrG,EAAM9G,UACboN,MAAO,KAETF,EAAQ/L,KAAKrB,SAEX+V,EAAW,CAAE1I,MAAO,KAAMC,MAAO,IAAKR,SAAUjP,KAAKmY,OAAQC,OAAQ,SAAUC,MAAO,UAC1F9I,EAAQ/L,KAAK0U,GAIblY,KAAKwS,QAAU,GACfxS,KAAKsY,IAAIC,gBACTvY,KAAKuP,QAAUA,EACfvP,KAAKsY,IAAIC,gBAETvY,KAAKwS,QAAUA,GAGjByE,GAAA7W,UAAAuU,cAAA,SAAc9F,GACZ7O,KAAKwY,YAAYC,KAAK5J,IAGxBoI,GAAA7W,UAAAwU,kBAAA,SAAkB/F,GAChB7O,KAAK0Y,gBAAgBD,KAAK5J,IAG5BoI,GAAA7W,UAAAuY,iBAAA,SAAiBC,GAAjB,IAAApY,EAAAR,KACMyS,EAA2BmG,EAAIC,QAC9BpG,GAGLzS,KAAKyU,aAAa5B,cAAcJ,EAAO9Q,GAAI8Q,EAAOrR,YAAYkN,UAAS,SAAChO,GACjEA,GAGHE,EAAKsY,iBAAmBxY,EACxBE,EAAKuY,gBAAgBtC,QAHrBjW,EAAKwU,cAActJ,MAAM,UAAY+G,EAAO9Q,GAAK,WAKpD,SAAE+J,GACDrF,QAAQqF,MAAM,aAAcA,GAC5BlL,EAAKkU,eAAehJ,MAAM,cAAgBuH,EAAUC,gBAAgBxH,4BA7LzEqD,EAAAA,UAAS5G,KAAA,CAAC,CACT6G,SAAU,4BACVC,SAAA,uzBAlBO8C,SAFA8C,EAAAA,uBACAC,EAAAA,qBAJAkE,EAAAA,yBAkBArL,SAlByDnF,EAAAA,8CA2B/DuM,EAAAA,YAAW5M,KAAA,CAAC,sCACZ+G,EAAAA,0BACAA,EAAAA,2BAIA+J,EAAAA,gCAEAA,EAAAA,uBAIA9J,EAAAA,UAAShH,KAAA,CAAC,mCACVgH,EAAAA,UAAShH,KAAA,CAAC,sBA8Kb8O,IAvKE,SAAAA,GAAoBxC,EACVC,EACAM,EACAsD,EACAjK,EACA1F,GALU3I,KAAAyU,aAAAA,EACVzU,KAAA0U,eAAAA,EACA1U,KAAAgV,cAAAA,EACAhV,KAAAsY,IAAAA,EACAtY,KAAAqO,kBAAAA,EACArO,KAAA2I,SAAAA,EAzByB3I,KAAAiV,SAAU,EAEpCjV,KAAAoP,YAAsB,EAC/BpP,KAAAwS,QAA8B,GAC9BxS,KAAA4X,eAAsC,GAGtC5X,KAAAwY,YAAoC,IAAIU,EAAAA,aAExClZ,KAAA0Y,gBAAwC,IAAIQ,EAAAA,aCpC9CC,EAAAC,mBA+BmBC,GAEnB,IAAAC,yBAACC,EAAAA,SAAQpR,KAAA,CAAC,CACRqR,aAAc,CAACvL,EAA0B4F,GAAoBqB,GAA+BC,GAAuBc,GAAiCgB,IACpJwC,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,eACAC,EAAAA,uBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,oBACAC,EAAAA,eAAeC,UACfC,EAAAA,aACAC,EAAAA,mBACAC,EAAAA,uBACAC,EAAAA,uBACAC,EAAAA,2BAA2BL,QAAQ,KAErCM,UAAW,CACT3F,EAAAA,gBACAC,EAAAA,cACAzM,EAAAA,YACAC,EAAAA,eACAmS,EAAAA,aACAvE,GACA9O,EACAwB,EACA+E,EACAoE,GAEF2I,gBAAiB,CACfzM,EACA4F,GACAoC,IAEF0E,QAAS,CAAC1M,EAA0B4F,GAAoBoD,QAE/BqC,IApC3B,SAAAA,MC9BA,IAAAsB,GAAA,SAAAA,OCDAC,GAAA,SAAAA","sourcesContent":["import { OperateType } from '../model/operate-type';\r\n\r\n/** åºæ¬ä¿¡æ¯ */\r\nexport class ChgdrData {\r\n    entityName: string;\r\n    userName: string;\r\n    operateType: OperateType;\r\n    reason: string;\r\n    dataId: string;\r\n    dataCode: Map<string, string>;\r\n    dataCodes: DataCodeField[];\r\n    changeTime: Date;\r\n    /** æ¬åæ´æ¥å¿çæ ¹èç¹ */\r\n    entityNodes: ChgdrDataEntityNode[];\r\n}\r\n\r\n/** åçåæ´çå®ä½èç¹ */\r\nexport class ChgdrDataEntityNode {\r\n    entityCode: string;\r\n    entityName: string;\r\n    rows: ChgdrDataRowNode[];\r\n}\r\n\r\n/** åçåæ´çè¡ */\r\nexport class ChgdrDataRowNode {\r\n    id: string;\r\n    entityCode: string;\r\n    entityName: string;\r\n    parentDataId: string;\r\n    dataId: string;\r\n    dataCode: Map<string, string>;\r\n    dataCodes: DataCodeField[];\r\n    operateType: OperateType;\r\n    changes: ChangeColumnItem[];\r\n    /** åçåæ´çè¡çä¸çº§å®ä½ */\r\n    entityNodes: ChgdrDataEntityNode[];\r\n}\r\n\r\nexport class ChangeColumnItem {\r\n    fieldLabel: string;\r\n    fieldName: string;\r\n    oldValue: string;\r\n    newValue: string;\r\n    /** æ¯å¦å³èå­æ®µ */\r\n    hasAssociation: boolean;\r\n    /** åå§å³èå­æ®µ */\r\n    originalColumnItem: ChangeColumnItem;\r\n    /** æ¯å¦å³èå¸¦åºå­æ®µ */\r\n    isAssociationRefField: boolean;\r\n    /** å³èå¸¦åºå­æ®µæå±çå­æ®µ */\r\n    belongFieldLabelId: string;\r\n    /** å¦æå½åå­æ®µä¸ºå³èå­æ®µï¼åå±æ§ä¸ºå½åå­æ®µçå³èå¸¦åºå­æ®µ */\r\n    children: ChangeColumnItem[] = [];\r\n}\r\n\r\nexport class DataCodeField {\r\n    fieldLabelId: string;\r\n    fieldName: string;\r\n    fieldValue: string;\r\n}","import { isToday, format } from 'date-fns';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { IGSPCommonObject, IGSPCommonElement, GSPAssociation, GSPCommonElement, GSPElementDataType, GSPElementObjectType, GSPEnumValue } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from './chgdr-data';\r\nimport { ChgdrConfigHandler } from '../service/chgdr-config-handler';\r\n\r\nexport class ChgdrDataBuilder {\r\n    private handler: ChgdrConfigHandler;\r\n\r\n    buildChgdrData(data: ChangeDataHeader, handler: ChgdrConfigHandler): ChgdrData {\r\n        this.handler = handler;\r\n        //åå§ååæ´æ¥å¿åºæ¬ä¿¡æ¯\r\n        let chgdrData = new ChgdrData();\r\n        chgdrData.entityName = this.handler.getBeName();\r\n        chgdrData.operateType = data.operateType;\r\n        chgdrData.userName = data.userName;\r\n        chgdrData.dataId = data.dataId;\r\n        chgdrData.dataCode = data.dataCode;\r\n        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());\r\n        chgdrData.reason = data.reason;\r\n        chgdrData.changeTime = data.changeTime;\r\n        chgdrData.entityNodes = [];\r\n\r\n        //åå±ç»ç»åæ´æ¥å¿è¡\r\n        let rowNodes: ChgdrDataRowNode[] = [];\r\n        !!data.rows && data.rows.forEach(row => {\r\n            if (!row) {\r\n                return;\r\n            }\r\n            let rowNode = new ChgdrDataRowNode();\r\n            rowNode.id = row.id;\r\n            rowNode.parentDataId = row.parentDataId;\r\n            rowNode.dataId = row.dataId;\r\n            rowNode.dataCode = row.dataCode;\r\n            rowNode.dataCodes = this.buildDataCodes(row.dataCode, row.entityCode);\r\n            rowNode.entityCode = row.entityCode;\r\n            rowNode.entityName = this.handler.getEntityNameOrDefault(row.entityCode);\r\n            rowNode.operateType = row.operateType;\r\n            rowNode.entityNodes = [];\r\n\r\n            //ç»ç»åçåæ´ä¿¡æ¯\r\n            let changeColumnKeys: string[] = this.extractChangeColumnKeys(row);\r\n            let columnValueChanges: ChangeColumnItem[] = [];\r\n            changeColumnKeys.forEach((key) => {\r\n                let column = new ChangeColumnItem();\r\n                column.fieldLabel = key;\r\n                column.fieldName = this.handler.getEntityFieldNameOrDefault(row.entityCode, key);\r\n                column.oldValue = this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);\r\n                column.newValue = this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);\r\n\r\n                let ele: IGSPCommonElement = this.handler.getElement(row.entityCode, key);\r\n                if (ele) {\r\n                    //å¤æ­æ¯å¦æ¯å³èå­æ®µ\r\n                    column.hasAssociation = ele.ObjectType == \"Association\" && ele.IsUdt == false;\r\n                    column.isAssociationRefField = ele.IsRefElement;\r\n                    let parentElement = this.handler.getParentElement(row.entityCode, key);\r\n                    if (parentElement) {\r\n                        column.belongFieldLabelId = parentElement.LabelID;\r\n                    }\r\n                }\r\n\r\n                columnValueChanges.push(column);\r\n            })\r\n            //åæ´å¼æåº\r\n            this.handler.sort(columnValueChanges, row.entityCode, (column)=>column.fieldLabel);\r\n\r\n            //åå¹¶å³èå¸¦åºå­æ®µ\r\n            let columnMap: Map<string, ChangeColumnItem> = new Map();\r\n            columnValueChanges.forEach((column) => {\r\n                columnMap.set(column.fieldLabel, column);\r\n            });\r\n            //1. ç§»é¤ææå³èå¸¦åºå­æ®µï¼å¹¶éå å°å¶æå±å³èå­æ®µçchildrenå±æ§ä¸\r\n            columnValueChanges = columnValueChanges.filter((column) => {\r\n                if (column.isAssociationRefField) {\r\n                    let parentColumn: ChangeColumnItem = columnMap.get(column.belongFieldLabelId);\r\n                    if (parentColumn) {\r\n                        //æ¾å°ç¶çº§å­æ®µåæ·»å ä¸ºç¶\r\n                        parentColumn.children.push(column);\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n            //2. è½¬æ¢å³èå­æ®µï¼å°å¶å­çº§çåæ´å¼æ¼æ¥ä½ä¸ºå¶åæ´å¼\r\n            columnValueChanges = columnValueChanges.map<ChangeColumnItem>(column => {\r\n                if (column.hasAssociation && column.children.length > 0) {\r\n                    //å¦ææ¯å³èå­æ®µï¼ä¸å­å¨å³èå¸¦åºå­æ®µ\r\n                    let virtualColumn: ChangeColumnItem = Object.assign(new ChangeColumnItem(), column);\r\n                    virtualColumn.originalColumnItem = column;\r\n                    virtualColumn.oldValue = column.children.map(child => child.oldValue).join(\";\");\r\n                    virtualColumn.newValue = column.children.map(child => child.newValue).join(\";\");\r\n                    return virtualColumn;\r\n                } else {\r\n                    return column;\r\n                }\r\n            });\r\n\r\n            rowNode.changes = columnValueChanges;\r\n\r\n            rowNodes.push(rowNode);\r\n        });\r\n\r\n        /** dataIdä¸åæ´è¡çMap */\r\n        let dataIdRowMap: Map<string, ChgdrDataRowNode> = new Map();\r\n        rowNodes.forEach(node => dataIdRowMap.set(node.dataId, node));\r\n\r\n        rowNodes.forEach(node => {\r\n            if (!node.parentDataId) {\r\n                //æ ¹èç¹\r\n                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                entityNode.rows.push(node);\r\n                chgdrData.entityNodes.push(entityNode);\r\n                return;\r\n            }\r\n            let parentRowNode = dataIdRowMap.get(node.parentDataId);\r\n            if (!!parentRowNode) {\r\n                //ä¸çº§èç¹å­å¨çèç¹\r\n                let entityNode = parentRowNode.entityNodes.find(en => en.entityCode == node.entityCode);\r\n                if (!entityNode) {\r\n                    entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                    parentRowNode.entityNodes.push(entityNode);\r\n                }\r\n                entityNode.rows.push(node);\r\n            } else {\r\n                //ä¸çº§èç¹ä¸å­å¨çèç¹\r\n                //TODO ä¸çº§èç¹ä¸å­å¨çèç¹æ¯å¦éè¦æé å®æ´çä¸çº§ç»æï¼\r\n                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                entityNode.rows.push(node);\r\n                chgdrData.entityNodes.push(entityNode);\r\n            }\r\n        })\r\n\r\n        return chgdrData;\r\n    }\r\n\r\n    private buildDataCodes(dataCode: Map<string, string>, entityCode: string): DataCodeField[] {\r\n        let dataCodes: DataCodeField[] = [];\r\n        dataCode && dataCode.forEach((value, key) => {\r\n            let dataCodeField: DataCodeField = new DataCodeField();\r\n            if (key == \"_$dataCode\") {\r\n                dataCodeField.fieldLabelId = \"dataCode\";\r\n                dataCodeField.fieldName = \"ä¸å¡ç¼å·\";\r\n                dataCodeField.fieldValue = value;\r\n            } else {\r\n                dataCodeField.fieldLabelId = key;\r\n                dataCodeField.fieldName = this.handler.getEntityFieldNameOrDefault(entityCode, key);\r\n                dataCodeField.fieldValue = this.handler.formatFieldValue(value, entityCode, key);\r\n            }\r\n            dataCodes.push(dataCodeField);\r\n        })\r\n\r\n        //ä¸å¡ç¼å·æåº\r\n        this.handler.sort(dataCodes, entityCode, (dataCode)=>dataCode.fieldLabelId);\r\n\r\n        return dataCodes;\r\n    }\r\n\r\n    /** å¾å°æ°æ§åå®¹ä¸­ææçkey */\r\n    private extractChangeColumnKeys(row: ChangeDataRow): string[] {\r\n        let keysSet: Set<string> = new Set();\r\n        row.oldContent && row.oldContent.forEach((value, key) => keysSet.add(key));\r\n        row.newContent && row.newContent.forEach((value, key) => keysSet.add(key));\r\n        const keys: string[] = Array.from(keysSet.keys());\r\n        return keys;\r\n    }\r\n\r\n\r\n    private genChgdrDataEntityNode(entityCode: string, entityName: string): ChgdrDataEntityNode {\r\n        let node = new ChgdrDataEntityNode();\r\n        node.entityCode = entityCode;\r\n        node.entityName = entityName;\r\n        node.rows = [];\r\n        return node;\r\n    }\r\n\r\n}","export class Guid {\r\n  static newGuid() {\r\n    const initString = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\r\n    const result = initString.replace(/[xy]/g, (c) => {\r\n      return this.convert(c);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private static convert(c) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const r = Math.random() * 16 | 0;\r\n    // tslint:disable-next-line:no-bitwise\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  }\r\n}\r\n","import { Guid } from '../util/guid.util';\r\nimport { ChgdrData, ChgdrDataRowNode } from './chgdr-data';\r\n\r\n// åèï¼ Farris TreeTableçèç¹ç»æ\r\n// export interface TreeNode {\r\n//     id?: string;\r\n//     data: any;\r\n//     /** å¶å­èç¹å¾æ  */\r\n//     icon?: any;\r\n//     /** èç¹å±å¼å¾æ  */\r\n//     expandedIcon?: any;\r\n//     /** èç¹æå å¾æ  */\r\n//     collapsedIcon?: any;\r\n//     /** å­èç¹ */\r\n//     children?: TreeNode[];\r\n//     /** æ¯å¦ä¸ºå¶å­èç¹ */\r\n//     leaf?: boolean;\r\n//     /** æ¯å¦å±å¼ */\r\n//     expanded?: boolean;\r\n//     type?: string;\r\n//     /** ç¶èç¹ */\r\n//     parent?: TreeNode;\r\n//     /** æ¯å¦åè®¸éä¸­ */\r\n//     selectable?: boolean;\r\n//  }\r\n\r\nexport class ChgdrTreeNode {\r\n    // æ éç½®ä¸­è®¾ç½®äºidFieldçæåµä¸ï¼idä¼è¢«èªå¨èµå¼ä¸ºdata[idField]çå¼ãæä»¥å¨æ­¤è®¾ç½®å¿é¡»è®¾ç½®ä¸ºä¸data.idä¸­ç¸åã\r\n    /** èç¹IDï¼ç¨äºåé¨å¤çï¼è¯·å¿ä½¿ç¨ */\r\n    id: string;\r\n    /** èç¹åç§° */\r\n    name: string;\r\n\r\n    /** ç¶èç¹ */\r\n    parent: ChgdrTreeNode;\r\n    /** å­èç¹åè¡¨ */\r\n    children: ChgdrTreeNode[];\r\n\r\n    /** æ¯å¦å±å¼ */\r\n    expanded: boolean;\r\n    /** æ¯å¦éè */\r\n    hidden: boolean;\r\n\r\n    /** å±ç¤ºæ ç»æç¨çæ°æ®å®ä½ */\r\n    data: any;\r\n    chgdrRow: ChgdrDataRowNode;\r\n    chgdrData: ChgdrData;\r\n    isRoot: boolean;\r\n}\r\n\r\nexport class ChgdrTreeBuilder {\r\n    private chgdrData: ChgdrData;\r\n\r\n    public build(chgdrData: ChgdrData): ChgdrTreeNode[] {\r\n        this.chgdrData = chgdrData;\r\n        if (chgdrData.entityNodes.length == 0) {\r\n            console.warn(\"æ åæ´æ¥å¿\");\r\n            return [];\r\n        }\r\n        let rootEntityNode = chgdrData.entityNodes[0];\r\n        let rootRows = rootEntityNode.rows;\r\n        if (rootRows.length == 0) {\r\n            console.warn(\"æ æ ¹åæ´æ¥å¿è¡\");\r\n            return [];\r\n        }\r\n        let rootRow = rootRows[0];\r\n\r\n        let node = this.rowToNode(rootRow);\r\n        node.isRoot = true;\r\n        node.expanded = true;\r\n\r\n        return [node];\r\n    }\r\n\r\n    private rowToNode(row: ChgdrDataRowNode): ChgdrTreeNode {\r\n        const node: ChgdrTreeNode = new ChgdrTreeNode();\r\n        node.id = Guid.newGuid();\r\n        node.name = this.buildTreeNodeName(row);\r\n        node.data = {\r\n            id: node.id,\r\n            name: node.name\r\n        };\r\n        node.chgdrRow = row;\r\n        node.chgdrData = this.chgdrData;\r\n        node.children = [];\r\n        row.entityNodes.forEach(entityNode => {\r\n            entityNode.rows.forEach(childRow => {\r\n                const childNode: ChgdrTreeNode = this.rowToNode(childRow);\r\n                childNode.parent = node;\r\n                node.children.push(childNode);\r\n            })\r\n        })\r\n        return node;\r\n    }\r\n\r\n    private buildTreeNodeName(row: ChgdrDataRowNode): string{\r\n        let dataCodeName;\r\n        if(row.dataCodes && row.dataCodes.length>0){\r\n            dataCodeName = row.dataCodes[0].fieldValue;\r\n        }\r\n        if(dataCodeName){\r\n            return row.entityName + \"-\" + dataCodeName + \"ã\" + row.operateType.getName() + \"ã\";\r\n        }else{\r\n            return row.entityName + \"ã\" + row.operateType.getName() + \"ã\";\r\n        }\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { MapUtil } from '../util/map.util';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrMetadataService {\r\n  private beMetadataCache: Map<string, GSPBusinessEntity> = new Map();\r\n\r\n  constructor(private http: HttpService,\r\n    private sessionService: SessionService,\r\n    private metadataService: GSPMetadataRTService,\r\n    private injector: Injector) { }\r\n\r\n    /** è·åBEåæ°æ® */\r\n    public getGSPBusinessEntity(beId: string):Observable<GSPBusinessEntity>{\r\n      if(this.beMetadataCache.has(beId)){\r\n        let be = this.beMetadataCache.get(beId);\r\n        return of(be);\r\n      }else{\r\n        return this.metadataService.GetMetadataRT(beId).pipe(map(metadata => {\r\n          const be: GSPBusinessEntity = JSON.parse(metadata.content);\r\n          this.beMetadataCache.set(beId, be);\r\n          return be;\r\n        }));\r\n      }\r\n    }\r\n\r\n  // public getBeMetadataAndUdts(beId: string): Observable<any> {\r\n  //   this.metadataService.GetMetadataRT(beId).subscribe((metadata) => {\r\n  //     const be: GSPBusinessEntity = JSON.parse(metadata.content);\r\n  //     let udtids:string[] = this.getAllUdtIds(be.MainObject);\r\n  //     this.metadataService.\r\n  //   });\r\n  // }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { ChgdrInnerService } from './chgdr-inner.service';\r\n\r\nconst CHGDR_CONFIG_ROUTER = '/api/runtime/bcc/v1.0/chgdr/config';\r\nconst CHGDR_CONFIG_GET_BY_BIZOBJID_AND_MODELID = `${CHGDR_CONFIG_ROUTER}/{bizObjId}/{modelId}`;\r\n\r\nconst ServerIP = '/';\r\nconst chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrConfigService {\r\n\r\n    constructor(private http: HttpService,\r\n        private sessionService: SessionService,\r\n        private injector: Injector) {\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®ä¸å¡å®ä½IDè·åææçéç½®ä¿¡æ¯\r\n     */\r\n    getBeChgdrConfig(beId: string): Observable<ChgLogConfigEntity[]> {\r\n        let queryUrl = `${chgdrUrl}/config?beId=${beId}`;\r\n        return (<Observable<ChgLogConfigEntity[]>><unknown>this.http.get(queryUrl)).pipe(tap(data => {\r\n            let configEntities: ChgLogConfigEntity[] = data || [];\r\n            configEntities.forEach(entity => {\r\n                //å¤çå­æ®µé¡ºåºå·\r\n                let fields: Array<ChgLogConfigField> = entity.fields || [];\r\n                //èµäºèæ°æ®é»è®¤é¡ºåºå·\r\n                fields.forEach((field, index) => {\r\n                    if (field.showIndex === undefined || field.showIndex === null) {\r\n                        field.showIndex = index;\r\n                    }\r\n                });\r\n                //æç§é¡ºåºå·æåº\r\n                entity.fields = fields.sort((a, b) => a.showIndex - b.showIndex);\r\n                //æ ¹æ®æåºç»æéç½®é¡ºåºå·\r\n                fields.forEach((field, index) => {\r\n                    field.showIndex = index;\r\n                })\r\n            })\r\n        }));\r\n    }\r\n}","import { isToday, format } from 'date-fns';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { IGSPCommonObject, IGSPCommonElement, GSPAssociation, GSPCommonElement, GSPElementDataType, GSPElementObjectType, GSPEnumValue } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from '../chgdr-data-viewer/chgdr-data';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\n\r\nexport class ChgdrConfigHandler {\r\n    private be: GSPBusinessEntity;\r\n    private entityCodeMap: Map<string, IGSPCommonObject> = new Map();\r\n    private entityFieldMap: Map<string, IGSPCommonElement> = new Map();\r\n    private entityFieldShowOrderMap: Map<string, number> = new Map();\r\n    private entityFieldParentMap: Map<string, IGSPCommonElement> = new Map();\r\n\r\n    private entityConfigs: ChgLogConfigEntity[];\r\n    private entityFieldConfigMap: Map<string, ChgLogConfigField> = new Map();\r\n\r\n    public constructor(be: GSPBusinessEntity, entityConfigs: ChgLogConfigEntity[]) {\r\n        //åå§åææBEå¯¹è±¡ä¿¡æ¯\r\n        this.be = be;\r\n        if (!!be) {\r\n            let mainObject = be.MainObject;\r\n            this.updateEntityMap(mainObject, this.entityCodeMap, this.entityFieldMap);\r\n        }\r\n\r\n        //åå§åéç½®ä¿¡æ¯\r\n        this.entityConfigs = entityConfigs || [];\r\n        this.updateEntityConfigs();\r\n\r\n        //æ´æ°æ¾ç¤ºé¡ºåº\r\n        this.updateShowIndex();\r\n    }\r\n\r\n    /** æ´æ°æ¾ç¤ºé¡ºåºå· */\r\n    private updateShowIndex() {\r\n        let entityFieldShowOrderMap: Map<string, number> = new Map();\r\n        //é¦åç¨BEå­æ®µé¡ºåºèµäºåå§é¡ºåºï¼é¿åéç½®ä¸­æ é¡ºåºå·é ææ¾ç¤ºéä¹±\r\n        this.entityFieldMap.forEach((value, key) => {\r\n            entityFieldShowOrderMap.set(key, entityFieldShowOrderMap.size);\r\n        });\r\n        //ç¶åç¨éç½®é¡ºåºæ¿ä»£åå§é¡ºåº\r\n        this.entityFieldConfigMap.forEach((value, key) => {\r\n            if (value.showIndex !== undefined && value.showIndex !== null) {\r\n                entityFieldShowOrderMap.set(key, value.showIndex);\r\n            }\r\n        })\r\n\r\n        this.entityFieldShowOrderMap = entityFieldShowOrderMap;\r\n    }\r\n\r\n    /** æ´æ°éç½®ä¿¡æ¯çç¸å³æ°æ® */\r\n    private updateEntityConfigs() {\r\n        let fieldConfigMap: Map<string, ChgLogConfigField> = new Map();\r\n        this.entityConfigs.forEach(entityConfig => {\r\n            let tabCode = entityConfig.tabCode;\r\n            (entityConfig.fields || []).forEach(field => {\r\n                let fieldLabel = field.fieldLabelId;\r\n                let key = tabCode + \"#\" + fieldLabel;\r\n                fieldConfigMap.set(key, field);\r\n            })\r\n        });\r\n        this.entityFieldConfigMap = fieldConfigMap;\r\n    }\r\n\r\n    private updateEntityMap(entity: IGSPCommonObject, entityCodeMap: Map<string, IGSPCommonObject>, entityFieldMap: Map<string, IGSPCommonElement>) {\r\n        if (!entity) {\r\n            return;\r\n        }\r\n        entityCodeMap.set(entity.Code, entity);\r\n\r\n        //å®ä½å¯¹è±¡çå­æ®µä¿¡æ¯\r\n        entity.ContainElements.forEach(ele => {\r\n            this.updateEntityFieldMap(entity, ele, null, entityFieldMap);\r\n        })\r\n\r\n        //å¤çå­èç¹ä¿¡æ¯\r\n        let children: IGSPCommonObject[] = entity.ContainChildObjects;\r\n        if (!children || !children.length) {\r\n            return;\r\n        }\r\n\r\n        children.forEach(childEntity => {\r\n            this.updateEntityMap(childEntity, entityCodeMap, entityFieldMap);\r\n        })\r\n    }\r\n\r\n    /** æ´æ°BEèç¹çæå®å­æ®µä¿¡æ¯ï¼å¦æè¯¥å­æ®µæ¯å³èå­æ®µï¼åæ¶æ´æ°å¶å¸¦åºå­æ®µ */\r\n    private updateEntityFieldMap(entity: IGSPCommonObject, element: IGSPCommonElement, parentElement: IGSPCommonElement, entityFieldMap: Map<string, IGSPCommonElement>): void {\r\n        let key = entity.Code + \"#\" + element.LabelID;\r\n        entityFieldMap.set(key, element);\r\n        if (parentElement) {\r\n            this.entityFieldParentMap.set(key, parentElement);\r\n        }\r\n\r\n        const childAssociations: GSPAssociation[] = element.ChildAssociations;\r\n        if (!!childAssociations && childAssociations.length > 0) {\r\n            childAssociations.forEach(childAssociation => {\r\n                const refElementCollection: GSPCommonElement[] = childAssociation.RefElementCollection;\r\n                if (!!refElementCollection && refElementCollection.length > 0) {\r\n                    refElementCollection.forEach(rele => {\r\n                        this.updateEntityFieldMap(entity, rele, element, entityFieldMap);\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public sort(items: any[], entityCode: string, fieldLabelIdFunc: (item: any) => string) {\r\n        items.sort((a, b) => {\r\n            const aKey = entityCode + \"#\" + fieldLabelIdFunc(a);\r\n            const bKey = entityCode + \"#\" + fieldLabelIdFunc(b);\r\n            if (!this.entityFieldShowOrderMap.has(aKey) && !this.entityFieldShowOrderMap.has(bKey)) {\r\n                //å¦æåæ¹åæ é¡ºåºå·ï¼åæç§èªç¶æåº\r\n                return aKey.localeCompare(bKey);\r\n            } else if (!this.entityFieldShowOrderMap.has(aKey)) {\r\n                //å¦ææä¸æ¹æ é¡ºåºå·ï¼åæ é¡ºåºå·çé å\r\n                return -1;\r\n            } else if (!this.entityFieldShowOrderMap.has(bKey)) {\r\n                //å¦ææä¸æ¹æ é¡ºåºå·ï¼åæ é¡ºåºå·çé å\r\n                return 1;\r\n            } else {\r\n                //å¦æä¸¤æ¹é½æé¡ºåºå·ï¼åæç§é¡ºåºå·æåº\r\n                const aOrder = this.entityFieldShowOrderMap.get(aKey);\r\n                const bOrder = this.entityFieldShowOrderMap.get(bKey);\r\n                return aOrder - bOrder;\r\n            }\r\n        });\r\n    }\r\n\r\n    /** æ ¼å¼åä¸»å¯¹è±¡èç¹ä¸­å­æ®µçå¼ */\r\n    public formatMainObjectFieldValue(originalValue: string, fieldLabelId: string) {\r\n        let entityCode = this.getMainObjectCode();\r\n        return this.formatFieldValue(originalValue, entityCode, fieldLabelId);\r\n    }\r\n\r\n    /** æ ¼å¼åå­æ®µå¼ */\r\n    public formatFieldValue(originalValue: string, entityCode: string, fieldLabelId: string): string {\r\n        let element: IGSPCommonElement = this.getElement(entityCode, fieldLabelId);\r\n        if (!element) {\r\n            console.error(\"æªæ¾å°ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ã\");\r\n            return originalValue;\r\n        }\r\n        if (!element) {\r\n            return originalValue;\r\n        }\r\n\r\n        try {\r\n            //å¤çåå²éççæ°å­æ ¼å¼\r\n            if ((element.MDataType == GSPElementDataType.Decimal || element.MDataType == GSPElementDataType.Integer)\r\n                && originalValue && originalValue.toLowerCase().includes(\"e\")) {\r\n                //å¦æå­æ®µæ¯æ°å­ç±»åï¼ä¸æ¯ç§å­¦è®¡æ°æ³æ ¼å¼\r\n                //è½¬ä¸ºåè¿å¶æ ¼å¼æ¾ç¤º\r\n                let num = Number(originalValue);\r\n                if (isNaN(num)) {\r\n                    console.log(\"ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ãçå¼ä¸æ¯ææçæ°å­æ ¼å¼ï¼\" + originalValue);\r\n                    return originalValue;\r\n                } else {\r\n                    let result = this.toNonExponential(num);\r\n                    return result;\r\n                }\r\n            }\r\n\r\n            //å¤çå¸å°å¼ç±»å\r\n            if (element.MDataType == GSPElementDataType.Boolean) {\r\n                //æ³¨æï¼new Boolean(\"false\") == true\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    return originalValue;\r\n                } else if (originalValue.toLowerCase() == \"false\") {\r\n                    return \"å¦\";\r\n                } else if (originalValue.toLowerCase() == \"true\") {\r\n                    return \"æ¯\";\r\n                } else {\r\n                    return originalValue;\r\n                }\r\n            }\r\n\r\n            //å¤çæ¥ææ ¼å¼\r\n            if (element.MDataType == GSPElementDataType.Date) {\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //ä¸åå«å¼ï¼ç´æ¥è¿ååå§å¼\r\n                    return originalValue;\r\n                } else {\r\n                    let date = new Date(originalValue);\r\n                    let str = format(date, \"yyyy-MM-dd\");\r\n                    return str;\r\n                }\r\n            }\r\n\r\n            //å¤çæ¥ææ¶é´æ ¼å¼\r\n            if (element.MDataType == GSPElementDataType.DateTime) {\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //ä¸åå«å¼ï¼ç´æ¥è¿ååå§å¼\r\n                    return originalValue;\r\n                } else {\r\n                    let date = new Date(originalValue);\r\n                    let str = format(date, \"yyyy-MM-dd HH:mm:ss\");\r\n                    return str;\r\n                }\r\n            }\r\n\r\n            //å¤çæä¸¾æ ¼å¼\r\n            if (element.ObjectType == GSPElementObjectType.Enum) {\r\n                let enumValues: GSPEnumValue[] = element.ContainEnumValues || [];\r\n                let enumValue = enumValues.find(item => item.Value == originalValue);\r\n                if (enumValue) {\r\n                    return enumValue.Name;\r\n                } else if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //å¦ææ¾ä¸å°å¯¹åºçæä¸¾é¡¹ï¼å¹¶ä¸åå§å¼ä¸ºç©ºï¼è¯´ææªèµå¼ï¼ä¸æ¥é\r\n                    return originalValue;\r\n                } else {\r\n                    //æå°å¼å¸¸\r\n                    console.log(\"ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ãçå¼æªæ¾å°å¹éçæä¸¾é¡¹ï¼\" + originalValue);\r\n                    return originalValue;\r\n                }\r\n            }\r\n\r\n            return originalValue;\r\n        } catch (error) {\r\n            console.error(\"ä¸å¡å®ä½ã\" + this.be.ID + \"-\" + this.be.Name + \"ãèç¹ã\" + entityCode + \"ãçå­æ®µã\" + fieldLabelId + \"ãçå¼ã\" + originalValue + \"ãæ ¼å¼ååºéï¼\", error);\r\n            return originalValue;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** JavaScriptä¸­ç§å­¦è®¡æ°æ³è½¬åä¸ºæ°å¼å­ç¬¦ä¸²å½¢å¼ã\r\n     * ä»¥ä¸ä¸¤ç§æåµï¼JavaScript ä¼èªå¨å°æ°å¼è½¬ä¸ºç§å­¦è®¡æ°æ³è¡¨ç¤º\r\n     * (1) å°äº1ä¸å°æ°ç¹åé¢å¸¦æ6ä¸ª0ä»¥ä¸çæµ®ç¹æ°å¼ï¼\r\n     * (2) æ´æ°ä½æ°å­å¤äº21ä½ï¼\r\n     * é¦åççæ´æ°ä½æ°å­å¤äº21ä½çæåµï¼å¶å®è¿ä¸ªä¸è¬ä¸ä¼ç¢°å°ï¼æ´æ°ä½æ°å­å¤äº21ä½å·²ç»è¶åºäº JavaScript ç²¾ç¡®æ´æ°èå´ã\r\n     * è¿ä¸ªæ¹æ³ç¨äºå¤çå°æ°é®é¢\r\n     * fromï¼https://www.cnblogs.com/xianfengzhike/p/9939029.html */\r\n    private toNonExponential(num) {\r\n        var m = num.toExponential().match(/\\d(?:\\.(\\d*))?e([+-]\\d+)/);\r\n        return num.toFixed(Math.max(0, (m[1] || '').length - m[2]));\r\n    }\r\n\r\n    public getBeName(): string {\r\n        return this.be ? this.be.Name : null;\r\n    }\r\n\r\n    public getMainObjectCode(): string {\r\n        return this.be && this.be.MainObject ? this.be.MainObject.Code : null;\r\n    }\r\n\r\n    public getElement(entityCode: string, fieldLabelId: string): IGSPCommonElement {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        return this.entityFieldMap.get(key);\r\n    }\r\n\r\n    public getParentElement(entityCode: string, fieldLabelId: string): IGSPCommonElement {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        return this.entityFieldParentMap.get(key);\r\n    }\r\n\r\n    public getEntityNameOrDefault(entityCode: string) {\r\n        let entity = this.entityCodeMap.get(entityCode);\r\n        return !!entity ? entity.Name : entityCode;\r\n    }\r\n\r\n    public getEntityFieldNameOrDefault(entityCode: string, fieldLabelId: string) {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        let fieldConfig = this.entityFieldConfigMap.get(key);\r\n        if (fieldConfig && fieldConfig.fieldName && fieldConfig.fieldName != \"\") {\r\n            //ä¼åè¿åéç½®çåç§°\r\n            return fieldConfig.fieldName;\r\n        }\r\n        //å¦æä¸å­å¨éç½®åç§°ï¼åè¿åBEå­æ®µåç§°\r\n        let ele = this.entityFieldMap.get(key);\r\n        return !!ele ? ele.Name : fieldLabelId;\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrConfigHandler } from './chgdr-config-handler';\r\nimport { ChgdrConfigService } from './chgdr-config.service';\r\nimport { ChgdrMetadataService } from './chgdr-metadata.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrInnerService {\r\n    private beMetadataCache: Map<string, ChgdrConfigHandler> = new Map();\r\n\r\n    constructor(private http: HttpService,\r\n        private sessionService: SessionService,\r\n        private metadataService: GSPMetadataRTService,\r\n        private chgdrMetadataService: ChgdrMetadataService,\r\n        private chgdrConfigService: ChgdrConfigService,\r\n        private injector: Injector\r\n    ) { }\r\n\r\n    /** è·åBEåæ°æ® */\r\n    public getChgdrConfigHandler(beId: string): Observable<ChgdrConfigHandler> {\r\n        if (this.beMetadataCache.has(beId)) {\r\n            let be = this.beMetadataCache.get(beId);\r\n            return of(be);\r\n        } else {\r\n            let requests = [];\r\n            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));\r\n            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));\r\n\r\n            return forkJoin(requests).pipe(map(data => {\r\n                const be = data[0];\r\n                const entityConfigs: ChgLogConfigEntity[] = data[1] || [];\r\n                const handler = new ChgdrConfigHandler(be, entityConfigs);\r\n                this.beMetadataCache.set(beId, handler);\r\n                return handler;\r\n            }));\r\n        }\r\n    }\r\n}\r\n","import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeColumnItem, ChgdrData, ChgdrDataEntityNode, ChgdrDataRowNode } from './chgdr-data';\r\nimport { GSPAssociation, GSPCommonElement, GSPCommonObject, IGSPCommonElement, IGSPCommonObject } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { ChgdrDataBuilder } from './chgdr-data-builder';\r\nimport { ChgdrTreeBuilder, ChgdrTreeNode } from './chgdr-tree-builder';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { ChgdrMetadataService } from '../service/chgdr-metadata.service';\r\nimport { ChgdrConfigService } from '../service/chgdr-config.service';\r\nimport { forkJoin } from 'rxjs';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgdrInnerService } from '../service/chgdr-inner.service';\r\n\r\n@Component({\r\n  selector: 'chgdr-data-viewer',\r\n  templateUrl: './chgdr-data-viewer.component.html',\r\n  styleUrls: ['./chgdr-data-viewer.component.css']\r\n})\r\nexport class ChgdrDataViewerComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  data: ChangeDataHeader;\r\n  @Input() showDataId: boolean = false;\r\n  @ViewChild(\"treeTable\")\r\n  private treeTableComponent: TreeTableComponent\r\n\r\n  treeConfig: any = {\r\n    idField: 'id',\r\n    columns: [\r\n      { field: 'name', title: 'Name', width: 200 }\r\n    ],\r\n    /** å¶å­èç¹å¾æ  */\r\n    leafIcon: 'f-icon f-icon-page-title-type text-info mr-2',\r\n    /** èç¹å±å¼å¾æ  */\r\n    expandIcon: 'f-iconÂ f-icon-file-folder-open text-info mr-2',\r\n    /** èç¹æå å¾æ  */\r\n    collapseIcon: 'f-iconÂ f-icon-file-folder-close text-info mr-2',\r\n    showLevel: -1,\r\n    disabled: false,\r\n    init: false,\r\n    selectValues: []\r\n  };\r\n\r\n  chgdrData: ChgdrData;\r\n  treeData: ChgdrTreeNode[];\r\n  currentNode: ChgdrTreeNode;\r\n\r\n  constructor(private metadataService: GSPMetadataRTService,\r\n    private injector: Injector,\r\n    private chgdrMetadataService: ChgdrMetadataService,\r\n    private chgdrConfigService: ChgdrConfigService,\r\n    private chgdrInnerService: ChgdrInnerService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!!this.data) {\r\n      let beId = this.data.entityId;\r\n      this.chgdrInnerService.getChgdrConfigHandler(beId).subscribe(handler=>{\r\n        this.chgdrData = new ChgdrDataBuilder().buildChgdrData(this.data, handler);\r\n        this.treeData = new ChgdrTreeBuilder().build(this.chgdrData);\r\n        if (this.treeTableComponent) {\r\n          //ç§»é¤å·²éä¸­é¡¹ã\r\n          //é¿åæ´æ¢æ°æ®æºåï¼treeGridæ¾ä¸å°ä¹åçéä¸­æ°æ®ï¼å¯¼è´æ§å¶å°åè­¦\r\n          this.treeTableComponent.clearSelections();\r\n        }\r\n        setTimeout(() => {\r\n          this.treeTableComponent.selectNode(this.treeData[0].id);\r\n        }, 0);\r\n      })\r\n    }\r\n  }\r\n\r\n  public handleTreeSelection($event): void {\r\n    const node: ChgdrTreeNode = $event.node;\r\n    if (this.currentNode != null && this.currentNode.id == node.id) {\r\n      //å¦æéä¸­ç¸åèç¹ï¼ç´æ¥è¿å\r\n      return;\r\n    }\r\n    this.currentNode = node;\r\n  }\r\n}\r\n","export class OperateType {\r\n    /** æ°å¢ */\r\n    static ADD: OperateType = new OperateType(0, \"ADD\", \"æ°å¢\");\r\n    /** ä¿®æ¹ */\r\n    static MODIFY: OperateType = new OperateType(1, \"MODIFY\", \"ä¿®æ¹\");\r\n    /** å é¤ */\r\n    static DELETE: OperateType = new OperateType(2, \"DELETE\", \"å é¤\");\r\n\r\n    private constructor(public ordinal: number, public code: string, public name: string) {\r\n    }\r\n\r\n    public getOrdinal() {\r\n        return this.ordinal;\r\n    }\r\n\r\n    public getCode() {\r\n        return this.code;\r\n    }\r\n\r\n    public getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public static values(): OperateType[] {\r\n        return [OperateType.ADD, OperateType.MODIFY, OperateType.DELETE];\r\n    }\r\n\r\n    public toJson() {\r\n        return this.code;\r\n    }\r\n\r\n    public static parse(obj: any): OperateType {\r\n        if (obj === undefined || obj === null) {\r\n            return null;\r\n        }\r\n        if (obj instanceof OperateType) {\r\n            return obj;\r\n        }\r\n        if (typeof obj === \"string\") {\r\n            return OperateType.values().find(ot => ot.code == obj);\r\n        }\r\n        if (typeof obj === \"number\") {\r\n            return OperateType.values().find(ot => ot.ordinal == obj);\r\n        }\r\n        if (!!obj.code) {\r\n            return OperateType.values().find(ot => ot.code == obj.code);\r\n        }\r\n        return null;\r\n    }\r\n}","export class MapUtil {\r\n    /** å°Mapè½¬ä¸ºObjectï¼ä¾¿äºåºååãï¼å ä¸ºJSON.stringfy(Map)è¿åçå¼æ»ä¸º{}ï¼ */\r\n    static convertMapToObject(map: Map<String, any>) {\r\n        if (!map) {\r\n            return null;\r\n        }\r\n        let obj = Object.create(null);\r\n        map.forEach((value, key: any) => {\r\n            obj[key] = value;\r\n        })\r\n        return obj;\r\n    }\r\n\r\n    /** å°Objectè½¬ä¸ºMapï¼å ä¸ºJSON.parseæ æ³è¯å«ç±»åï¼ååºååååªè½æ¯Objectç±»å */\r\n    static convertObjectToMap(obj: any): Map<string, any> {\r\n        if (obj === undefined || obj === null) {\r\n            return null;\r\n        }\r\n\r\n        let strMap = new Map();\r\n        for (let k of Object.keys(obj)) {\r\n            strMap.set(k, obj[k]);\r\n        }\r\n        return strMap;\r\n    }\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ChangeDataHeader } from '../model/change-data-header';\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\nimport { OperateType } from '../model/operate-type';\nimport { MapUtil } from '../util/map.util';\n\nconst ServerIP = '/';\nconst chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChgdrService {\n  private rootDataCodeFieldsMap: Map<string, ChgLogConfigField[]> = new Map();\n\n  constructor(private http: HttpService,\n    private sessionService: SessionService,\n    private injector: Injector) { }\n\n  public queryChangeDataHeader(currentQueryParam: ChangeDataQueryParam): Observable<any> {\n    let obj: any = Object.assign({}, currentQueryParam);\n    if (currentQueryParam.dataCode) {\n      obj.dataCode = MapUtil.convertMapToObject(currentQueryParam.dataCode);\n    }\n\n    let json = JSON.stringify(obj);\n    let queryParam = encodeURIComponent(json);\n    let url = `${chgdrUrl}?queryParam=${queryParam}`;\n    return this.http.get(url).pipe(map(data => {\n      if (!data) {\n        return data;\n      }\n      let queryResult: ChangeDataQueryResult = <ChangeDataQueryResult><unknown>data;\n      queryResult && queryResult.headers && queryResult.headers.forEach(header => {\n        //TODO å¾å ï¼å¼å®¹èæ°æ®æ ¼å¼\n        if (typeof header.dataCode == \"string\") {\n          header.dataCode = JSON.parse(header.dataCode);\n        }\n\n        header.dataCode = MapUtil.convertObjectToMap(header.dataCode);\n        header.changeTime = this.toDate(header.changeTime);\n        header.operateType = OperateType.parse(header.operateType);\n      })\n      return queryResult;\n    }));\n  }\n\n  public getRootEntityDataCodeFields(beId: string): Observable<ChgLogConfigField[]> {\n    if (!beId) {\n      return of([]);\n    }\n    if (this.rootDataCodeFieldsMap.has(beId)) {\n      //ç´æ¥ä»ç¼å­ä¸­è·å\n      return of(this.rootDataCodeFieldsMap.get(beId));\n    } else {\n      //è·åç»æå¹¶å­å¥ç¼å­\n      let url = `${chgdrUrl}/rootDataCodeFields?beId=${beId}`;\n      return (<Observable<ChgLogConfigField[]>><unknown>(this.http.get(url)))\n        .pipe(tap(data => this.rootDataCodeFieldsMap.set(beId, data)));\n    }\n  }\n\n  /** å°å­ç¬¦ä¸²ææ°å­è½¬ä¸ºDate */\n  private toDate(date: any): Date {\n    if (typeof date == \"string\") {\n      return new Date(date);\n    } else if (typeof date == \"number\") {\n      return new Date(date);\n    } else {\n      return date;\n    }\n  }\n\n  public getChangeData(id: string, changeTime: Date): Observable<any> {\n    let json = JSON.stringify(changeTime);\n    let queryParam = encodeURIComponent(json);\n    let url = `${chgdrUrl}/${id}?changeTime=${queryParam}`;\n    return this.http.get(url).pipe(map(data => {\n      if (!data) {\n        return data;\n      }\n      let sh: ChangeDataHeader = <ChangeDataHeader><unknown>data;\n      //TODO å¾å ï¼å¼å®¹èæ°æ®æ ¼å¼\n      if (typeof sh.dataCode == \"string\") {\n        sh.dataCode = JSON.parse(sh.dataCode);\n      }\n      sh.dataCode = MapUtil.convertObjectToMap(sh.dataCode);\n      sh.changeTime = this.toDate(sh.changeTime);\n      sh.operateType = OperateType.parse(sh.operateType);\n\n      sh.rows = sh.rows || [];\n\n      sh.rows.forEach(row => {\n        if (!row) {\n          return;\n        }\n        row.operateType = OperateType.parse(row.operateType);\n        //TODO å¾å ï¼å¼å®¹èæ°æ®æ ¼å¼\n        if (typeof row.dataCode == \"string\") {\n          row.dataCode = JSON.parse(row.dataCode);\n        }\n        row.dataCode = MapUtil.convertObjectToMap(row.dataCode);\n        row.oldContent = <Map<string, string>>MapUtil.convertObjectToMap(row.oldContent) || new Map();\n        row.newContent = <Map<string, string>>MapUtil.convertObjectToMap(row.newContent) || new Map();\n      });\n      return sh;\n    }));\n  }\n}\n","export class ChangeDataQueryParam {\r\n    /** ç¨æ·ID */\r\n    userId: string;\r\n    /** å®ä½ID */\r\n    entityId: string;\r\n    /** æ°æ®ä¸»é® */\r\n    dataId: string;\r\n    /** æ°æ®ç¼å· */\r\n    dataCode: Map<string, string>;\r\n    /** åæ´æ¶é´-èµ·å§ */\r\n    changeTimeStart: Date;\r\n    /** åæ´æ¶é´-ç»æ */\r\n    changeTimeEnd: Date;\r\n    /** æ¯é¡µæ°é */\r\n    pageSize: number;\r\n    /** é¡µç ï¼ä»1å¼å§ */\r\n    pageIndex: number;\r\n}","import { ChangeDataHeader } from './change-data-header';\r\n\r\nexport class ChangeDataQueryResult {\r\n    /** å½åé¡µé¢ï¼ä»1å¼å§ */\r\n    pageIndex: number;\r\n    /** æ¯é¡µæ°é */\r\n    pageSize: number;\r\n    /** æ»æ¡æ° */\r\n    total: number;\r\n    /** å½åé¡µæ°æ® */\r\n    headers: ChangeDataHeader[];\r\n}","export class ErrorUtil {\r\n    static getErrorMessage(e: any) {\r\n        if (!e) {\r\n            return \"\";\r\n        } else if (!e.error) {\r\n            return \"\";\r\n        } else if (!e.error.Message) {\r\n            return \"\";\r\n        } else {\r\n            return e.error.Message;\r\n        }\r\n    }\r\n}","export class TimeUtil{\r\n    public static getStartTimeInDay(date:Date){\r\n        let d:Date = new Date(date);\r\n        d.setHours(0);\r\n        d.setMinutes(0);\r\n        d.setSeconds(0);\r\n        d.setMilliseconds(0);\r\n        return d;\r\n    }\r\n\r\n    public static getEndTimeInDay(date:Date){\r\n        let d:Date = new Date(date);\r\n        d.setHours(23);\r\n        d.setMinutes(59);\r\n        d.setSeconds(59);\r\n        d.setMilliseconds(999);\r\n        return d;\r\n    }\r\n}","import { Component, HostBinding, Injector, Input, OnChanges, OnInit, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { DialogComponent } from '@farris/ui-dialog';\nimport { MessagerService } from '@farris/ui-messager';\nimport { NotifyService } from '@farris/ui-notify';\nimport { ChgdrService } from '../service/chgdr.service';\nimport { ChangeDataHeader } from '../model/change-data-header';\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\nimport { OperateType } from '../model/operate-type';\nimport { ErrorUtil } from '../util/error.util';\nimport { TimeUtil } from '../util/time.util';\n\n@Component({\n  selector: 'chgdr-list',\n  templateUrl: './chgdr-list.component.html',\n  styleUrls: ['./chgdr-list.component.css']\n})\nexport class ChgdrListComponent implements OnInit, OnChanges {\n  @HostBinding('class.f-utils-fill-flex-column') baseCls = true;\n\n  @Input()\n  /** ä¸å¡å®ä½ID */\n  entityId: string;\n  @Input()\n  /** æ°æ®ID */\n  dataId: string;\n  @Input()\n  /** åæ´æ¶é´-èµ·å§ */\n  changeTimeStart: Date;\n  @Input()\n  /** åæ´æ¶é´-ç»æ */\n  changeTimeEnd: Date;\n\n  private currentQueryParam: ChangeDataQueryParam;\n  chgdrs: ChangeDataQueryResult;\n\n  constructor(private chgdrService: ChgdrService,\n    private messageService: MessagerService,\n    private notifyService: NotifyService,\n    private injector: Injector) { }\n\n  ngOnInit() {\n    let chgdrs = new ChangeDataQueryResult();\n    chgdrs.total = 0;\n    chgdrs.pageSize = 20;\n    chgdrs.pageIndex = 1;\n    chgdrs.headers = [];\n    this.chgdrs = chgdrs;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.changeTimeStart && !this.changeTimeEnd) {\n      //æªå½å¥åæ´æ¶é´èå´ï¼åæ¥è¯¢æè¿ä¸å¨ç\n      this.changeTimeEnd = TimeUtil.getEndTimeInDay(new Date());\n      this.changeTimeStart = TimeUtil.getStartTimeInDay(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000));\n    } else if (!this.changeTimeEnd) {\n      //å¦ææªè®¾ç½®æªè³æ¶é´ï¼åä¸å¼å§æ¶é´ç¸å\n      this.changeTimeEnd = TimeUtil.getEndTimeInDay(this.changeTimeStart);\n    } else if (!this.changeTimeStart) {\n      //å¦ææªè®¾ç½®å¼å§æ¶é´ï¼åä¸æªè³æ¶é´ç¸å\n      this.changeTimeStart = TimeUtil.getEndTimeInDay(this.changeTimeEnd);\n    }\n    if (!!this.entityId) {\n      let param = this.buildQueryParam();\n      this.doQuery(param);\n    }\n  }\n\n  public query(){\n    let param = this.buildQueryParam();\n    this.doQuery(param);\n  }\n\n  private buildQueryParam() {\n    let param = new ChangeDataQueryParam();\n    param.pageIndex = 1;\n    param.pageSize = 20;\n    param.entityId = this.entityId;\n    param.dataId = this.dataId;\n    param.changeTimeStart = this.changeTimeStart;\n    param.changeTimeEnd = this.changeTimeEnd;\n    return param;\n  }\n\n  private doQuery(param) {\n    this.chgdrService.queryChangeDataHeader(param).subscribe(data => {\n      this.currentQueryParam = param;\n      this.chgdrs = data;\n    }, error => {\n      console.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºé\", error);\n      this.messageService.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºéï¼\" + ErrorUtil.getErrorMessage(error));\n    });\n  }\n\n  onPageChanged($event) {\n    if (!$event) {\n      return;\n    }\n\n    if ($event.pageIndex) {\n      this.currentQueryParam.pageIndex = $event.pageIndex;\n    }\n    if ($event.pageSize) {\n      this.currentQueryParam.pageSize = $event.pageSize;\n    }\n    this.doQuery(this.currentQueryParam);\n  }\n\n  onPageSizeChanged($event) {\n    this.currentQueryParam.pageSize = $event;\n    this.doQuery(this.currentQueryParam);\n  }\n}\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-row-baseinfo-form',\r\n  templateUrl: './chgdr-row-baseinfo-form.component.html',\r\n  styleUrls: ['./chgdr-row-baseinfo-form.component.css']\r\n})\r\nexport class ChgdrRowBaseinfoFormComponent implements OnInit {\r\n  @Input()\r\n  chgdrTreeNode:ChgdrTreeNode;\r\n  @Input() showDataId:boolean = false;\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { ChangeColumnItem, ChgdrDataRowNode } from '../chgdr-data-viewer/chgdr-data';\r\nimport { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';\r\nimport { OperateType } from '../model/operate-type';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-row-grid',\r\n  templateUrl: './chgdr-row-grid.component.html',\r\n  styleUrls: ['./chgdr-row-grid.component.css']\r\n})\r\nexport class ChgdrRowGridComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  chgdrTreeNode: ChgdrTreeNode;\r\n  @ViewChild(\"chgdrRowGrid\")\r\n  dataGrid: DatagridComponent;\r\n\r\n  columns: any[];\r\n  data: ChangeColumnItem[];\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  ngOnInit() {\r\n    this.columns = [\r\n      { field: 'fieldName', width: 130, title: 'å­æ®µå' },\r\n      { field: 'oldValue', width: 130, title: 'åå¼', showTips: true },\r\n      { field: 'newValue', width: 130, title: 'åæ´å¼', showTips: true }\r\n    ];\r\n    let oldValueField = this.columns[1];\r\n    let newValueField = this.columns[2];\r\n\r\n    if (!!this.chgdrTreeNode) {\r\n      //æ ¹æ®åå§çåæ´ç±»åæ´æ¹æ¾ç¤ºåçä¿¡æ¯\r\n      //æ­¤å¤ä¸è½ç´æ¥è°ç¨DataGridç»ä»¶çæ¹æ³æ´æ¹ï¼å ä¸ºæ­¤å¤å°æªåå»ºDataGrid\r\n      let type: OperateType = this.chgdrTreeNode.chgdrRow.operateType;\r\n      if (type == OperateType.ADD) {\r\n        oldValueField.visible = false;\r\n        newValueField.title = \"å¼\";\r\n      } else if (type == OperateType.DELETE) {\r\n        newValueField.visible = false;\r\n        oldValueField.title = \"å¼\";\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    //åæ¥åæ´è¡ç±»å\r\n    let oldType: OperateType;\r\n    if (!changes.chgdrTreeNode) {\r\n      oldType = null;\r\n    } else if (!changes.chgdrTreeNode.previousValue) {\r\n      oldType = null;\r\n    } else {\r\n      oldType = changes.chgdrTreeNode.previousValue.chgdrRow.operateType;\r\n    }\r\n\r\n    //ç°å¨åæ´è¡ç±»å\r\n    let newType: OperateType;\r\n    if (!changes.chgdrTreeNode) {\r\n      newType = null;\r\n    } else if (!changes.chgdrTreeNode.currentValue) {\r\n      newType = null;\r\n    } else {\r\n      newType = changes.chgdrTreeNode.currentValue.chgdrRow.operateType;\r\n    }\r\n\r\n    if (oldType == newType || !this.dataGrid || !this.dataGrid.columns) {\r\n      //å¦ææ°èç±»åä¸è´(æDataGridå°æªåå»º)ï¼åä¸åå¨\r\n      //do nothing\r\n    } else if (newType == OperateType.ADD) {\r\n      this.dataGrid.showColumn(\"newValue\");\r\n      this.dataGrid.hideColumn(\"oldValue\");\r\n      this.dataGrid.setColumnTitle(\"newValue\", \"å¼\");\r\n    } else if (newType == OperateType.DELETE) {\r\n      this.dataGrid.showColumn(\"oldValue\");\r\n      this.dataGrid.hideColumn(\"newValue\");\r\n      this.dataGrid.setColumnTitle(\"oldValue\", \"å¼\");\r\n    } else {\r\n      this.dataGrid.showColumn(\"oldValue\");\r\n      this.dataGrid.showColumn(\"newValue\");\r\n      this.dataGrid.setColumnTitle(\"oldValue\", \"åå¼\");\r\n      this.dataGrid.setColumnTitle(\"newValue\", \"åæ´å¼\");\r\n    }\r\n\r\n    if (changes.chgdrTreeNode && changes.chgdrTreeNode.currentValue) {\r\n      this.data = changes.chgdrTreeNode.currentValue.chgdrRow.changes;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-chgdr-list-dialog-content',\n  templateUrl: './chgdr-list-dialog-content.component.html',\n  styleUrls: ['./chgdr-list-dialog-content.component.css']\n})\nexport class ChgdrListDialogContentComponent implements OnInit {\n  @Input()\n  /** ä¸å¡å®ä½ID */\n  entityId: string;\n  @Input()\n  /** æ°æ®ID */\n  dataId: string;\n\n  constructor(private injector: Injector) { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { ChgdrListDialogContentComponent } from '../chgdr-list-dialog-content/chgdr-list-dialog-content.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrListUiService {\r\n\r\n    constructor(\r\n        private resolver: ComponentFactoryResolver,\r\n        private injector: Injector,\r\n        private modalService: BsModalService,\r\n        private messagerService: MessagerService\r\n    ) { }\r\n\r\n    showDialog(entityId: string, dataId: string) {\r\n        return this.create(entityId, dataId);\r\n    }\r\n\r\n    private create(entityId: string, dataId: string) {\r\n        if(!entityId){\r\n            console.error(\"åå»ºä¸å¡åæ´æ¥å¿åè¡¨ç»ä»¶å¤±è´¥ï¼ä¸å¡å®ä½ä¸è½ä¸ºç©ºï¼è¯·æ£æ¥\", entityId, dataId);\r\n            return;\r\n        }\r\n\r\n        let fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        let modalConfig = {\r\n            title: 'åæ´æ¥å¿åè¡¨',\r\n            width: 1000,\r\n            height: 550,\r\n            resizable: true,\r\n            showButtons: false,\r\n            showMaxButton: true\r\n        }\r\n\r\n        cmpRef.instance.entityId = entityId;\r\n        cmpRef.instance.dataId = dataId;\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n    }\r\n\r\n}\r\n","import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { DataColumn } from '@farris/ui-common/column';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { ChgdrService } from '../service/chgdr.service';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { ErrorUtil } from '../util/error.util';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { tap } from 'rxjs/operators';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrMetadataService } from '../service/chgdr-metadata.service';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { GSPCommonElement } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChgdrInnerService } from '../service/chgdr-inner.service';\r\nimport { ChgdrConfigHandler } from '../service/chgdr-config-handler';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-header-datagrid',\r\n  templateUrl: './chgdr-header-datagrid.component.html',\r\n  styleUrls: ['./chgdr-header-datagrid.component.css']\r\n})\r\nexport class ChgdrHeaderDatagridComponent implements OnInit {\r\n  @HostBinding('class.f-utils-fill') baseCls = true;\r\n  @Input() chgdrs: ChangeDataQueryResult;\r\n  @Input() showDataId: boolean = true;\r\n  headers: ChangeDataHeader[] = [];\r\n  dataCodeFields: ChgLogConfigField[] = [];\r\n  private chgdrConfigHandler: ChgdrConfigHandler;\r\n  @Output()\r\n  pageChanged: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  pageSizeChanged: EventEmitter<number> = new EventEmitter();\r\n\r\n  // è·åå®ä¹çååæ ¼æ¨¡æ¿\r\n  @ViewChild('opCell') opCell: TemplateRef<any>;\r\n  @ViewChild(\"chgdrInfoDialog\")\r\n  chgdrInfoDialog: DialogComponent;\r\n\r\n  columns: any[];\r\n\r\n  currentChgdrData: ChangeDataHeader;\r\n\r\n  constructor(private chgdrService: ChgdrService,\r\n    private messageService: MessagerService,\r\n    private notifyService: NotifyService,\r\n    private ref: ChangeDetectorRef,\r\n    private chgdrInnerService: ChgdrInnerService,\r\n    private injector: Injector) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.resetColumnAndData(null, []);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!changes.chgdrs) {\r\n      //å¦æchgdrsæ²¡ææ´æ°ï¼åç´æ¥è¿å\r\n      return;\r\n    }\r\n\r\n    let prevEntityId = this.getEntityId(changes.chgdrs.previousValue);\r\n    let curEntityId = this.getEntityId(changes.chgdrs.currentValue);\r\n    let requests = [\r\n      this.updateChgdrConfigHandler(curEntityId),\r\n      this.updateDataCodeFields(prevEntityId, curEntityId)\r\n    ]\r\n    forkJoin(requests).subscribe(data => {\r\n      let chgdrDatas: ChangeDataQueryResult = changes.chgdrs.currentValue;\r\n      if (!!chgdrDatas) {\r\n        this.formatHeaders(chgdrDatas.headers);\r\n      }\r\n\r\n      //å¦æä¸å¡å®ä½åæ´ï¼åéç½®åä¿¡æ¯\r\n      if (curEntityId != null && curEntityId != prevEntityId) {\r\n        this.resetColumnAndData(curEntityId, chgdrDatas.headers);\r\n      } else {\r\n        this.headers = chgdrDatas.headers;\r\n      }\r\n    }, err => {\r\n      console.error(\"è·åBEã\" + curEntityId + \"ãçéç½®çä¸å¡åæ´æ¥å¿çä¸å¡ç¼å·å¤±è´¥ï¼\", err);\r\n      this.messageService.error(\"è·åä¸å¡ç¼å·éç½®å¤±è´¥ï¼\" + ErrorUtil.getErrorMessage(err));\r\n    });\r\n  }\r\n\r\n  /** æ´æ°ä¸å¡å®ä½åæ°æ® */\r\n  private updateChgdrConfigHandler(entityId: string) {\r\n    if (entityId) {\r\n      return this.chgdrInnerService.getChgdrConfigHandler(entityId).pipe(tap(data => this.chgdrConfigHandler = data));\r\n    } else {\r\n      return of(this.chgdrConfigHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ´æ°dataCodeFieldæ°æ®\r\n   * @param prevEntityId åBeId\r\n   * @param curEntityId å½åBeId\r\n   */\r\n  updateDataCodeFields(prevEntityId: string, curEntityId: string) {\r\n    if (curEntityId != null && curEntityId != prevEntityId) {\r\n      //åªæåçåæ´æ¶ææ´æ°\r\n      return this.chgdrService.getRootEntityDataCodeFields(curEntityId).pipe(tap(data => this.dataCodeFields = data || []));\r\n    } else {\r\n      //å¦åç´æ¥è¿åå½åå¼\r\n      return of(this.dataCodeFields);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ ¼å¼åheadersãä¸»è¦æ¯è§£æå¶ä¸­çdataCodeï¼å°å¶è½¬ä¸ºObject\r\n   * ä½¿ç¨dataCodeObjå­æ¾dataCodeè§£æåçç»æ\r\n   * dataCodeObjå±æ§å¨ChangeDataHeaderä¸­ä¸å­å¨ï¼æ­¤å¤éè¿å¼ºå¶èµå¼ä½¿ç¨ï¼å¹¶ä¸åªéäºè¯¥å¤ä½¿ç¨ã\r\n   */\r\n  private formatHeaders(headers: ChangeDataHeader[]) {\r\n    if (!headers) {\r\n      return;\r\n    }\r\n    headers.forEach(header => {\r\n      let dataCodeObj: any;\r\n      this.formatDataCodeMap(header.dataCode);\r\n      if (header.dataCode && header.dataCode.size == 1 && header.dataCode.has(\"_$dataCode\")) {\r\n        //å¼å®¹èæ°æ®\r\n        //èæ°æ®dataCodeä¸ºèªç±ææ¬\r\n        dataCodeObj = {};\r\n        if (this.dataCodeFields && this.dataCodeFields.length > 0) {\r\n          dataCodeObj[this.dataCodeFields[0].fieldLabelId] = header.dataCode.get(\"_$dataCode\");\r\n        }\r\n      } else {\r\n        dataCodeObj = MapUtil.convertMapToObject(header.dataCode);\r\n      }\r\n      (<any>header).dataCodeObj = dataCodeObj;\r\n    })\r\n  }\r\n\r\n  /** æ ¼å¼åä¸å¡ä¸»é®Map */\r\n  private formatDataCodeMap(dataCode: Map<string, string>): void {\r\n    if (!dataCode || !this.chgdrConfigHandler) {\r\n      return;\r\n    }\r\n    Array.from(dataCode.keys()).forEach(fieldLabelId => {\r\n      let value = dataCode.get(fieldLabelId);\r\n      let formatedValue = this.chgdrConfigHandler.formatMainObjectFieldValue(value, fieldLabelId);\r\n      dataCode.set(fieldLabelId, formatedValue);\r\n    })\r\n  }\r\n\r\n  private getEntityId(chgdrs: ChangeDataQueryResult): string {\r\n    if (!chgdrs || !chgdrs.headers || chgdrs.headers.length == 0) {\r\n      return null;\r\n    } else {\r\n      return chgdrs.headers[0].entityId;\r\n    }\r\n  }\r\n\r\n  private resetColumnAndData(entityId: string, headers: ChangeDataHeader[]) {\r\n    let columns: any[] = [\r\n      { field: 'userName', width: 130, title: 'ç¨æ·' },\r\n      { field: 'changeTime', width: 130, title: 'æ¶é´', formatter: { type: 'datetime', options: { format: 'yyyyå¹´MMæddæ¥ HH:mm:ss' } } },\r\n      { field: 'operateType.name', width: 60, title: 'æä½ç±»å' },\r\n      { field: 'dataId', width: 130, title: 'ææ¯ä¸»é®', visible: this.showDataId }];\r\n    //{field: 'dataCode', width: 130, title: 'ä¸å¡ç¼å·'},\r\n    // {field: 'reason', width: 130, title: 'åæ´åå '},\r\n    this.dataCodeFields.forEach((field) => {\r\n      let column: DataColumn = {\r\n        field: \"dataCodeObj.\" + field.fieldLabelId,\r\n        title: field.fieldName,\r\n        width: 130\r\n      };\r\n      columns.push(column);\r\n    })\r\n    let opColumn = { title: 'æä½', width: 130, template: this.opCell, halign: 'center', align: 'center' };\r\n    columns.push(opColumn);\r\n\r\n    //å ä¸ºdatagridä¸åè®¸åæ¶åæ´dataåcolumnï¼å æ­¤æå¨è§¦åèæ£æ¥é¿ååºé\r\n    //åå¨ç©ºæ°æ®çåºç¡ä¸åæ´å\r\n    this.headers = [];\r\n    this.ref.detectChanges();\r\n    this.columns = columns;\r\n    this.ref.detectChanges();\r\n    //å¨éæ°èµå¼æ°æ®\r\n    this.headers = headers;\r\n  }\r\n\r\n  onPageChanged($event) {\r\n    this.pageChanged.emit($event);\r\n  }\r\n\r\n  onPageSizeChanged($event) {\r\n    this.pageSizeChanged.emit($event);\r\n  }\r\n\r\n  showChangeDetail(ctx) {\r\n    let header: ChangeDataHeader = ctx.rowData;\r\n    if (!header) {\r\n      return;\r\n    }\r\n    this.chgdrService.getChangeData(header.id, header.changeTime).subscribe(data => {\r\n      if (!data) {\r\n        this.notifyService.error(\"æªæ¾å°ç¼å·ä¸ºã\" + header.id + \"ãçåæ´æ¥å¿\");\r\n      } else {\r\n        this.currentChgdrData = data;\r\n        this.chgdrInfoDialog.show();\r\n      }\r\n    }, error => {\r\n      console.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºé\", error);\r\n      this.messageService.error(\"æ¥è¯¢ä¸å¡åæ´æ¥å¿åºéï¼\" + ErrorUtil.getErrorMessage(error));\r\n    })\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule, registerLocaleData } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { SplitterModule } from \"@farris/ui-splitter\";\r\nimport { AngularDraggableModule } from '@farris/ui-draggable';\r\nimport { DatagridModule } from \"@farris/ui-datagrid\";\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { FarrisSectionModule } from \"@farris/ui-section\";\r\nimport { MessagerModule, MessagerService } from '@farris/ui-messager';\r\nimport { NotifyModule, NotifyService } from '@farris/ui-notify';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\n\r\nimport { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';\r\nimport { MetadataRTSelectModule, SelectMetadataRTComponent, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';\r\n\r\nimport { ChgdrDataViewerComponent } from './chgdr-data-viewer/chgdr-data-viewer.component';\r\n\r\nimport zh from '@angular/common/locales/zh';\r\nimport { ChgdrListComponent } from './chgdr-list/chgdr-list.component';\r\nimport { ChgdrRowBaseinfoFormComponent } from './chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component';\r\nimport { ChgdrRowGridComponent } from './chgdr-row-grid/chgdr-row-grid.component';\r\nimport { ChgdrListUiService } from './service/chgdr-list-ui.service';\r\nimport { ChgdrListDialogContentComponent } from './chgdr-list-dialog-content/chgdr-list-dialog-content.component';\r\nimport { ChgdrHeaderDatagridComponent } from './chgdr-header-datagrid/chgdr-header-datagrid.component';\r\nimport { ChgdrMetadataService } from './service/chgdr-metadata.service';\r\nimport { ChgdrConfigService } from './service/chgdr-config.service';\r\nimport { ChgdrInnerService } from './service/chgdr-inner.service';\r\nimport { ChgdrService } from '../public-api';\r\nregisterLocaleData(zh);\r\n\r\n@NgModule({\r\n  declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    SplitterModule,\r\n    AngularDraggableModule,\r\n    DatagridModule,\r\n    TreeTableModule,\r\n    FarrisSectionModule,\r\n    MessagerModule.forRoot(),\r\n    NotifyModule,\r\n    FarrisDialogModule,\r\n    FarrisDatePickerModule,\r\n    MetadataRTSelectModule,\r\n    GSPMetadataRTServiceModule.forRoot('')\r\n  ],\r\n  providers: [\r\n    MessagerService,\r\n    NotifyService,\r\n    HttpService,\r\n    SessionService,\r\n    CacheService,\r\n    ChgdrListUiService,\r\n    ChgdrMetadataService,\r\n    ChgdrConfigService,\r\n    ChgdrInnerService,\r\n    ChgdrService\r\n  ],\r\n  entryComponents: [\r\n    ChgdrDataViewerComponent,\r\n    ChgdrListComponent,\r\n    ChgdrListDialogContentComponent\r\n  ],\r\n  exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]\r\n})\r\nexport class ChgdrModule { }\r\n","import { ChangeDataRow } from './change-data-row';\r\nimport { OperateType } from './operate-type';\r\n\r\nexport class ChangeDataHeader {\r\n    id: string;\r\n    /**\r\n     * ç¨æ·ID\r\n     */\r\n    userId: string;\r\n    /**\r\n     * ç¨æ·ç¼å·\r\n     */\r\n    userCode: string;\r\n    /**\r\n     * ç¨æ·åç§°\r\n     */\r\n    userName: string;\r\n    /**\r\n     * å®ä½ID\r\n     */\r\n    entityId: string;\r\n    /**\r\n     * æ°æ®ä¸»é®\r\n     */\r\n    dataId: string;\r\n    /**\r\n     * æ°æ®ç¼å·\r\n     */\r\n    dataCode: Map<string, string>;\r\n    /**\r\n     * åæ´æ¶é´\r\n     */\r\n    changeTime: Date;\r\n    /**\r\n     * åæ´ç±»å\r\n     */\r\n    operateType: OperateType;\r\n    /**\r\n     * åæ´åå \r\n     */\r\n    reason: string;\r\n\r\n    /**\r\n     * åæ´è¡åè¡¨\r\n     */\r\n    rows: ChangeDataRow[];\r\n}","import { OperateType } from './operate-type';\r\n\r\nexport class ChangeDataRow {\r\n    id: string;\r\n    /**\r\n     * headeråç \r\n     */\r\n    headerId: string;\r\n    /**\r\n     * å®ä½ç¼å·\r\n     */\r\n    entityCode: string;\r\n    /**\r\n     * æ°æ®ä¸»é®\r\n     */\r\n    dataId: string;\r\n    /**\r\n     * æ°æ®ç¼å·\r\n     */\r\n    dataCode: Map<string, string>;\r\n    /**\r\n     * æä½ç±»å\r\n     */\r\n    operateType: OperateType;\r\n    /**\r\n     * æ§åå®¹\r\n     */\r\n    oldContent: Map<string, string>;\r\n    /**\r\n     * æ°åå®¹\r\n     */\r\n    newContent: Map<string, string>;\r\n    /**\r\n     * ç¶æ°æ®ä¸»é®\r\n     */\r\n    parentDataId: string;\r\n}"]}