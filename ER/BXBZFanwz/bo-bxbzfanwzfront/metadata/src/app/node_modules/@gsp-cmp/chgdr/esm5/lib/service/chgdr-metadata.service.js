/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@gsp-lcm/metadatart-selector";
var ChgdrMetadataService = /** @class */ (function () {
    function ChgdrMetadataService(http, sessionService, metadataService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /** 获取BE元数据 */
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    ChgdrMetadataService.prototype.getGSPBusinessEntity = /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    function (beId) {
        var _this = this;
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            var be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            return this.metadataService.GetMetadataRT(beId).pipe(map((/**
             * @param {?} metadata
             * @return {?}
             */
            function (metadata) {
                /** @type {?} */
                var be = JSON.parse(metadata.content);
                _this.beMetadataCache.set(beId, be);
                return be;
            })));
        }
    };
    ChgdrMetadataService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ChgdrMetadataService.ctorParameters = function () { return [
        { type: HttpService },
        { type: SessionService },
        { type: GSPMetadataRTService },
        { type: Injector }
    ]; };
    /** @nocollapse */ ChgdrMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrMetadataService_Factory() { return new ChgdrMetadataService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i2.GSPMetadataRTService), i0.inject(i0.INJECTOR)); }, token: ChgdrMetadataService, providedIn: "root" });
    return ChgdrMetadataService;
}());
export { ChgdrMetadataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.beMetadataCache;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItbWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hnZHItbWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQU8sTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQU8xQztJQUlFLDhCQUFvQixJQUFpQixFQUMzQixjQUE4QixFQUM5QixlQUFxQyxFQUNyQyxRQUFrQjtRQUhSLFNBQUksR0FBSixJQUFJLENBQWE7UUFDM0IsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLG9CQUFlLEdBQWYsZUFBZSxDQUFzQjtRQUNyQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTHBCLG9CQUFlLEdBQW1DLElBQUksR0FBRyxFQUFFLENBQUM7SUFLcEMsQ0FBQztJQUUvQixjQUFjOzs7Ozs7SUFDUCxtREFBb0I7Ozs7O0lBQTNCLFVBQTRCLElBQVk7UUFBeEMsaUJBV0M7UUFWQyxJQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDOztnQkFDNUIsRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUN2QyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO2FBQUk7WUFDSCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1lBQUMsVUFBQSxRQUFROztvQkFDekQsRUFBRSxHQUFzQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7Z0JBQzFELEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDbkMsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLEVBQUMsQ0FBQyxDQUFDO1NBQ0w7SUFDSCxDQUFDOztnQkFyQkosVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnQkFYekIsV0FBVztnQkFBRSxjQUFjO2dCQUUzQixvQkFBb0I7Z0JBSFIsUUFBUTs7OytCQUE3QjtDQTBDQyxBQTlCRCxJQThCQztTQTdCWSxvQkFBb0I7Ozs7OztJQUMvQiwrQ0FBb0U7Ozs7O0lBRXhELG9DQUF5Qjs7Ozs7SUFDbkMsOENBQXNDOzs7OztJQUN0QywrQ0FBNkM7Ozs7O0lBQzdDLHdDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlLCBTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBHU1BCdXNpbmVzc0VudGl0eSB9IGZyb20gJ0Bnc3AtYmVmL2dzcC1iZS1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhUlRTZXJ2aWNlIH0gZnJvbSAnQGdzcC1sY20vbWV0YWRhdGFydC1zZWxlY3Rvcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDaGFuZ2VEYXRhSGVhZGVyIH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtaGVhZGVyJztcclxuaW1wb3J0IHsgQ2hhbmdlRGF0YVF1ZXJ5UGFyYW0gfSBmcm9tICcuLi9tb2RlbC9jaGFuZ2UtZGF0YS1xdWVyeS1wYXJhbSc7XHJcbmltcG9ydCB7IENoZ0xvZ0NvbmZpZ0ZpZWxkIH0gZnJvbSAnLi4vbW9kZWwvY2hnZHItY29uZmlnLWZpZWxkJztcclxuaW1wb3J0IHsgT3BlcmF0ZVR5cGUgfSBmcm9tICcuLi9tb2RlbC9vcGVyYXRlLXR5cGUnO1xyXG5pbXBvcnQgeyBNYXBVdGlsIH0gZnJvbSAnLi4vdXRpbC9tYXAudXRpbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQ2hnZHJNZXRhZGF0YVNlcnZpY2Uge1xyXG4gIHByaXZhdGUgYmVNZXRhZGF0YUNhY2hlOiBNYXA8c3RyaW5nLCBHU1BCdXNpbmVzc0VudGl0eT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgbWV0YWRhdGFTZXJ2aWNlOiBHU1BNZXRhZGF0YVJUU2VydmljZSxcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7IH1cclxuXHJcbiAgICAvKiog6I635Y+WQkXlhYPmlbDmja4gKi9cclxuICAgIHB1YmxpYyBnZXRHU1BCdXNpbmVzc0VudGl0eShiZUlkOiBzdHJpbmcpOk9ic2VydmFibGU8R1NQQnVzaW5lc3NFbnRpdHk+e1xyXG4gICAgICBpZih0aGlzLmJlTWV0YWRhdGFDYWNoZS5oYXMoYmVJZCkpe1xyXG4gICAgICAgIGxldCBiZSA9IHRoaXMuYmVNZXRhZGF0YUNhY2hlLmdldChiZUlkKTtcclxuICAgICAgICByZXR1cm4gb2YoYmUpO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YVNlcnZpY2UuR2V0TWV0YWRhdGFSVChiZUlkKS5waXBlKG1hcChtZXRhZGF0YSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBiZTogR1NQQnVzaW5lc3NFbnRpdHkgPSBKU09OLnBhcnNlKG1ldGFkYXRhLmNvbnRlbnQpO1xyXG4gICAgICAgICAgdGhpcy5iZU1ldGFkYXRhQ2FjaGUuc2V0KGJlSWQsIGJlKTtcclxuICAgICAgICAgIHJldHVybiBiZTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgLy8gcHVibGljIGdldEJlTWV0YWRhdGFBbmRVZHRzKGJlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgLy8gICB0aGlzLm1ldGFkYXRhU2VydmljZS5HZXRNZXRhZGF0YVJUKGJlSWQpLnN1YnNjcmliZSgobWV0YWRhdGEpID0+IHtcclxuICAvLyAgICAgY29uc3QgYmU6IEdTUEJ1c2luZXNzRW50aXR5ID0gSlNPTi5wYXJzZShtZXRhZGF0YS5jb250ZW50KTtcclxuICAvLyAgICAgbGV0IHVkdGlkczpzdHJpbmdbXSA9IHRoaXMuZ2V0QWxsVWR0SWRzKGJlLk1haW5PYmplY3QpO1xyXG4gIC8vICAgICB0aGlzLm1ldGFkYXRhU2VydmljZS5cclxuICAvLyAgIH0pO1xyXG4gIC8vIH1cclxufVxyXG4iXX0=