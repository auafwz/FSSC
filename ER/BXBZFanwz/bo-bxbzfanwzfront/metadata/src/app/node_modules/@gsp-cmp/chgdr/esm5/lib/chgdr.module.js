/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule, registerLocaleData } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { SplitterModule } from "@farris/ui-splitter";
import { AngularDraggableModule } from '@farris/ui-draggable';
import { DatagridModule } from "@farris/ui-datagrid";
import { TreeTableModule } from '@farris/ui-treetable';
import { FarrisSectionModule } from "@farris/ui-section";
import { MessagerModule, MessagerService } from '@farris/ui-messager';
import { NotifyModule, NotifyService } from '@farris/ui-notify';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { ChgdrDataViewerComponent } from './chgdr-data-viewer/chgdr-data-viewer.component';
import zh from '@angular/common/locales/zh';
import { ChgdrListComponent } from './chgdr-list/chgdr-list.component';
import { ChgdrRowBaseinfoFormComponent } from './chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component';
import { ChgdrRowGridComponent } from './chgdr-row-grid/chgdr-row-grid.component';
import { ChgdrListUiService } from './service/chgdr-list-ui.service';
import { ChgdrListDialogContentComponent } from './chgdr-list-dialog-content/chgdr-list-dialog-content.component';
import { ChgdrHeaderDatagridComponent } from './chgdr-header-datagrid/chgdr-header-datagrid.component';
import { ChgdrMetadataService } from './service/chgdr-metadata.service';
import { ChgdrConfigService } from './service/chgdr-config.service';
import { ChgdrInnerService } from './service/chgdr-inner.service';
import { ChgdrService } from '../public-api';
registerLocaleData(zh);
var ChgdrModule = /** @class */ (function () {
    function ChgdrModule() {
    }
    ChgdrModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        SplitterModule,
                        AngularDraggableModule,
                        DatagridModule,
                        TreeTableModule,
                        FarrisSectionModule,
                        MessagerModule.forRoot(),
                        NotifyModule,
                        FarrisDialogModule,
                        FarrisDatePickerModule,
                        MetadataRTSelectModule,
                        GSPMetadataRTServiceModule.forRoot('')
                    ],
                    providers: [
                        MessagerService,
                        NotifyService,
                        HttpService,
                        SessionService,
                        CacheService,
                        ChgdrListUiService,
                        ChgdrMetadataService,
                        ChgdrConfigService,
                        ChgdrInnerService,
                        ChgdrService
                    ],
                    entryComponents: [
                        ChgdrDataViewerComponent,
                        ChgdrListComponent,
                        ChgdrListDialogContentComponent
                    ],
                    exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]
                },] }
    ];
    return ChgdrModule;
}());
export { ChgdrModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvY2hnZHIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRS9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxzQkFBc0IsRUFBNkIsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU3SCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUUzRixPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUM1RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUNsSCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXZCO0lBQUE7SUFvQzJCLENBQUM7O2dCQXBDM0IsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLHdCQUF3QixFQUFFLGtCQUFrQixFQUFFLDZCQUE2QixFQUFFLHFCQUFxQixFQUFFLCtCQUErQixFQUFFLDRCQUE0QixDQUFDO29CQUNqTCxPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixXQUFXO3dCQUNYLGNBQWM7d0JBQ2Qsc0JBQXNCO3dCQUN0QixjQUFjO3dCQUNkLGVBQWU7d0JBQ2YsbUJBQW1CO3dCQUNuQixjQUFjLENBQUMsT0FBTyxFQUFFO3dCQUN4QixZQUFZO3dCQUNaLGtCQUFrQjt3QkFDbEIsc0JBQXNCO3dCQUN0QixzQkFBc0I7d0JBQ3RCLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7cUJBQ3ZDO29CQUNELFNBQVMsRUFBRTt3QkFDVCxlQUFlO3dCQUNmLGFBQWE7d0JBQ2IsV0FBVzt3QkFDWCxjQUFjO3dCQUNkLFlBQVk7d0JBQ1osa0JBQWtCO3dCQUNsQixvQkFBb0I7d0JBQ3BCLGtCQUFrQjt3QkFDbEIsaUJBQWlCO3dCQUNqQixZQUFZO3FCQUNiO29CQUNELGVBQWUsRUFBRTt3QkFDZix3QkFBd0I7d0JBQ3hCLGtCQUFrQjt3QkFDbEIsK0JBQStCO3FCQUNoQztvQkFDRCxPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxrQkFBa0IsRUFBRSw0QkFBNEIsQ0FBQztpQkFDdEY7O0lBQzBCLGtCQUFDO0NBQUEsQUFwQzVCLElBb0M0QjtTQUFmLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIHJlZ2lzdGVyTG9jYWxlRGF0YSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgU3BsaXR0ZXJNb2R1bGUgfSBmcm9tIFwiQGZhcnJpcy91aS1zcGxpdHRlclwiO1xyXG5pbXBvcnQgeyBBbmd1bGFyRHJhZ2dhYmxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kcmFnZ2FibGUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZE1vZHVsZSB9IGZyb20gXCJAZmFycmlzL3VpLWRhdGFncmlkXCI7XHJcbmltcG9ydCB7IFRyZWVUYWJsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktdHJlZXRhYmxlJztcclxuaW1wb3J0IHsgRmFycmlzU2VjdGlvbk1vZHVsZSB9IGZyb20gXCJAZmFycmlzL3VpLXNlY3Rpb25cIjtcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUsIE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBOb3RpZnlNb2R1bGUsIE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IEZhcnJpc0RpYWxvZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGlhbG9nJztcclxuaW1wb3J0IHsgRmFycmlzRGF0ZVBpY2tlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGF0ZXBpY2tlcic7XHJcblxyXG5pbXBvcnQgeyBIdHRwU2VydmljZSwgU2Vzc2lvblNlcnZpY2UsIENhY2hlU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVJUU2VsZWN0TW9kdWxlLCBTZWxlY3RNZXRhZGF0YVJUQ29tcG9uZW50LCBHU1BNZXRhZGF0YVJUU2VydmljZU1vZHVsZSB9IGZyb20gJ0Bnc3AtbGNtL21ldGFkYXRhcnQtc2VsZWN0b3InO1xyXG5cclxuaW1wb3J0IHsgQ2hnZHJEYXRhVmlld2VyQ29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1kYXRhLXZpZXdlci9jaGdkci1kYXRhLXZpZXdlci5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHpoIGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9sb2NhbGVzL3poJztcclxuaW1wb3J0IHsgQ2hnZHJMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1saXN0L2NoZ2RyLWxpc3QuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hnZHJSb3dCYXNlaW5mb0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2NoZ2RyLXJvdy1iYXNlaW5mby1mb3JtL2NoZ2RyLXJvdy1iYXNlaW5mby1mb3JtLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyUm93R3JpZENvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItcm93LWdyaWQvY2hnZHItcm93LWdyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hnZHJMaXN0VWlTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2NoZ2RyLWxpc3QtdWkuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZ2RyTGlzdERpYWxvZ0NvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL2NoZ2RyLWxpc3QtZGlhbG9nLWNvbnRlbnQvY2hnZHItbGlzdC1kaWFsb2ctY29udGVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGdkckhlYWRlckRhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1oZWFkZXItZGF0YWdyaWQvY2hnZHItaGVhZGVyLWRhdGFncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2NoZ2RyLW1ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGdkckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvY2hnZHItY29uZmlnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGdkcklubmVyU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9jaGdkci1pbm5lci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hnZHJTZXJ2aWNlIH0gZnJvbSAnLi4vcHVibGljLWFwaSc7XHJcbnJlZ2lzdGVyTG9jYWxlRGF0YSh6aCk7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0NoZ2RyRGF0YVZpZXdlckNvbXBvbmVudCwgQ2hnZHJMaXN0Q29tcG9uZW50LCBDaGdkclJvd0Jhc2VpbmZvRm9ybUNvbXBvbmVudCwgQ2hnZHJSb3dHcmlkQ29tcG9uZW50LCBDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50LCBDaGdkckhlYWRlckRhdGFncmlkQ29tcG9uZW50XSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZSxcclxuICAgIFNwbGl0dGVyTW9kdWxlLFxyXG4gICAgQW5ndWxhckRyYWdnYWJsZU1vZHVsZSxcclxuICAgIERhdGFncmlkTW9kdWxlLFxyXG4gICAgVHJlZVRhYmxlTW9kdWxlLFxyXG4gICAgRmFycmlzU2VjdGlvbk1vZHVsZSxcclxuICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIE5vdGlmeU1vZHVsZSxcclxuICAgIEZhcnJpc0RpYWxvZ01vZHVsZSxcclxuICAgIEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUsXHJcbiAgICBNZXRhZGF0YVJUU2VsZWN0TW9kdWxlLFxyXG4gICAgR1NQTWV0YWRhdGFSVFNlcnZpY2VNb2R1bGUuZm9yUm9vdCgnJylcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgTm90aWZ5U2VydmljZSxcclxuICAgIEh0dHBTZXJ2aWNlLFxyXG4gICAgU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBDYWNoZVNlcnZpY2UsXHJcbiAgICBDaGdkckxpc3RVaVNlcnZpY2UsXHJcbiAgICBDaGdkck1ldGFkYXRhU2VydmljZSxcclxuICAgIENoZ2RyQ29uZmlnU2VydmljZSxcclxuICAgIENoZ2RySW5uZXJTZXJ2aWNlLFxyXG4gICAgQ2hnZHJTZXJ2aWNlXHJcbiAgXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgIENoZ2RyRGF0YVZpZXdlckNvbXBvbmVudCxcclxuICAgIENoZ2RyTGlzdENvbXBvbmVudCxcclxuICAgIENoZ2RyTGlzdERpYWxvZ0NvbnRlbnRDb21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtDaGdkckRhdGFWaWV3ZXJDb21wb25lbnQsIENoZ2RyTGlzdENvbXBvbmVudCwgQ2hnZHJIZWFkZXJEYXRhZ3JpZENvbXBvbmVudF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENoZ2RyTW9kdWxlIHsgfVxyXG4iXX0=