/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-data-info.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { BpmnModelJsonHelper, DataType } from "@edp-aif/common-api";
import { BillTrackingDataShownMode, BillTrackingSettings, fullPathPrefix } from "@edp-bif/common-api";
var BillTrackerDataInfoService = /** @class */ (function () {
    function BillTrackerDataInfoService() {
    }
    /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param bts
     * @returns
     */
    /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param {?} bts
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.isNewBTS = /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param {?} bts
     * @return {?}
     */
    function (bts) {
        if (typeof bts == "string") {
            /** @type {?} */
            var temp = new BillTrackingSettings();
            temp.LoadFromJson(bts);
            bts = temp;
        }
        return bts != null && bts.version === "1.0";
    };
    /**
     * @param {?} rows
     * @param {?} shownFields
     * @param {?} wholeFields
     * @param {?} idField
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractDataRows = /**
     * @param {?} rows
     * @param {?} shownFields
     * @param {?} wholeFields
     * @param {?} idField
     * @return {?}
     */
    function (rows, shownFields, wholeFields, idField) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var frows = [];
        var _loop_1 = function (row) {
            /** @type {?} */
            var obj = {};
            obj[idField] = row.dataId;
            // 先解析其他类型字段
            /** @type {?} */
            var decimalFFs = [];
            shownFields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (f.dataType == DataType.Decimal) {
                    decimalFFs.push(f);
                }
                else {
                    obj[f.fieldPath] = _this.getFieldValue(f, row.GetFieldMap(), wholeFields);
                }
            }));
            // 再解析浮点型字段
            decimalFFs.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                obj[f.fieldPath] = _this.getFieldValue(f, row.GetFieldMap(), wholeFields);
            }));
            frows.push(obj);
        };
        try {
            for (var rows_1 = tslib_1.__values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                var row = rows_1_1.value;
                _loop_1(row);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return frows;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractCaptionPath = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var s = field.caption;
        /** @type {?} */
        var tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.caption + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractFieldPath = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var s = field.fieldName;
        /** @type {?} */
        var tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.fieldName + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    };
    /**
     *
     * @param fields 子字段列表
     * @param selectedFields 用户自定义展示字段列表
     * @param showCustomFields 是否按用户自定义字段显示
     * @returns
     */
    /**
     *
     * @param {?} fields 子字段列表
     * @param {?} selectedFields 用户自定义展示字段列表
     * @param {?} showCustomFields 是否按用户自定义字段显示
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractFFields = /**
     *
     * @param {?} fields 子字段列表
     * @param {?} selectedFields 用户自定义展示字段列表
     * @param {?} showCustomFields 是否按用户自定义字段显示
     * @return {?}
     */
    function (fields, selectedFields, showCustomFields) {
        var _this = this;
        /** @type {?} */
        var ffields = [];
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            f.show = true;
            //枚举或者枚举型单值UDT时默认取Name
            if (f.fieldType == "Enum" || f.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                var tempFPath_1 = _this.extractFieldPath(f);
                /** @type {?} */
                var sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    function (sfield) { return sfield.fieldPath == tempFPath_1; }));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (_this.setExtendProps(f, sf, tempFPath_1 + ".Name")));
                ffields.push(f);
            }
            else if (f.GetSubFieldList() != null && f.GetSubFieldList().length > 0) {
                ffields.push.apply(ffields, tslib_1.__spread(_this.extractFFields(f.GetSubFieldList(), selectedFields, showCustomFields)));
            }
            else {
                /** @type {?} */
                var tempFPath_2 = _this.extractFieldPath(f);
                /** @type {?} */
                var sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    function (sfield) { return sfield.fieldPath == tempFPath_2; }));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (_this.setExtendProps(f, sf, tempFPath_2)));
                ffields.push(f);
            }
        }));
        return ffields;
    };
    /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     */
    /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     * @param {?} row
     * @param {?} billInfo
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.hasChildData = /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     * @param {?} row
     * @param {?} billInfo
     * @return {?}
     */
    function (row, billInfo) {
        var e_2, _a;
        /** @type {?} */
        var hasChildData = false;
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var children = row.GetChildTableList();
        try {
            for (var children_1 = tslib_1.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var c = children_1_1.value;
                /** @type {?} */
                var tableShow = false;
                /** @type {?} */
                var hasRows = false;
                /** @type {?} */
                var table = schema && schema[c.tableName];
                if (table != null && table.show != null) {
                    tableShow = table.show;
                }
                else {
                    // 兼容无show属性情形
                    tableShow = true;
                }
                if (c.GetRowList() && c.GetRowList().length > 0) {
                    hasRows = true;
                }
                hasChildData = tableShow && hasRows;
                if (hasChildData == true) {
                    break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return hasChildData;
    };
    /**
     * @param {?} f
     * @param {?} rdfm
     * @param {?=} wholeFields
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldValue = /**
     * @param {?} f
     * @param {?} rdfm
     * @param {?=} wholeFields
     * @return {?}
     */
    function (f, rdfm, wholeFields) {
        /** @type {?} */
        var fields = f.fieldPath ? f.fieldPath.split(".") : [f.fieldName];
        /** @type {?} */
        var bdf = fields && rdfm[fields[0]];
        for (var i = 1; bdf != null && i < fields.length; i++) {
            /** @type {?} */
            var temp = bdf.GetSubFieldMap();
            if (temp == null) {
                break;
            }
            bdf = temp[fields[i]];
        }
        /** @type {?} */
        var textValue = bdf ? bdf.GetTextValue() : "";
        if (textValue == null) {
            return null;
        }
        if (f.dataType == DataType.String) {
            f.fieldValue = textValue;
            return textValue || "";
        }
        else if (f.dataType == DataType.Decimal) {
            /** @type {?} */
            var scale = f.scale;
            if (f.formatInfo != null) {
                if (f.formatInfo.scale != null) {
                    scale = f.formatInfo.scale;
                }
                if (f.formatInfo.enableScaleExpression) {
                    if (f.formatInfo.scaleExpression != null) {
                        /** @type {?} */
                        var scaleField = this.getFieldInFields(wholeFields, f.formatInfo.scaleExpression);
                        /** @type {?} */
                        var tmp = scaleField && parseInt(String(this.getFieldValue(scaleField, rdfm)));
                        // const tmp = parseInt(this.getFieldValueInFieldsWithValue(extactedFields, f.formatInfo.scaleExpression));
                        if (tmp != null && !isNaN(tmp)) {
                            scale = tmp;
                        }
                    }
                }
            }
            f.fieldValue = parseFloat(String(textValue));
            /** @type {?} */
            var dec = parseFloat(String(textValue)).toFixed(scale).toString();
            return dec || "";
        }
        else if (f.dataType == DataType.Boolean) {
            if (textValue == "") {
                f.fieldValue = null;
                return textValue;
            }
            f.fieldValue = (/** @type {?} */ (JSON.parse(textValue)));
            return (/** @type {?} */ (JSON.parse(textValue)));
        }
        else if (f.dataType == DataType.DateTime) {
            /** @type {?} */
            var date = BpmnModelJsonHelper.DateTimeFromString(textValue);
            /** @type {?} */
            var formatter = "yyyy-MM-dd";
            if (f.fieldType == "DateTime") {
                formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd HH:mm:ss.SSS";
            }
            else if (f.fieldType == "Date") {
                formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            }
            else {
                formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            }
            f.fieldValue = date;
            return this.dateFormat(date, formatter);
        }
        else {
            f.fieldValue = textValue;
            return textValue || "";
        }
    };
    /**
     * @param {?} fields
     * @param {?} fullPath
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldInFields = /**
     * @param {?} fields
     * @param {?} fullPath
     * @return {?}
     */
    function (fields, fullPath) {
        var e_3, _a;
        /** @type {?} */
        var v = null;
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var fv = fields_1_1.value;
                while (fv.attachedField) {
                    fv = fv.attachedField;
                }
                /** @type {?} */
                var rootFv = (/** @type {?} */ (fv));
                rootFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + rootFv.fieldPath;
                if (fullPath == rootFv.fullPath) {
                    v = rootFv;
                    break;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return v;
    };
    /**
     * @param {?} fieldsWithValue
     * @param {?} fullPath
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldValueInFieldsWithValue = /**
     * @param {?} fieldsWithValue
     * @param {?} fullPath
     * @return {?}
     */
    function (fieldsWithValue, fullPath) {
        var e_4, _a;
        /** @type {?} */
        var v = null;
        try {
            for (var fieldsWithValue_1 = tslib_1.__values(fieldsWithValue), fieldsWithValue_1_1 = fieldsWithValue_1.next(); !fieldsWithValue_1_1.done; fieldsWithValue_1_1 = fieldsWithValue_1.next()) {
                var fv = fieldsWithValue_1_1.value;
                while (fv.attachedField) {
                    fv = fv.attachedField;
                }
                /** @type {?} */
                var rootFv = (/** @type {?} */ (fv));
                rootFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + rootFv.fieldPath;
                if (fullPath == rootFv.fullPath) {
                    v = rootFv.fieldValue;
                    break;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (fieldsWithValue_1_1 && !fieldsWithValue_1_1.done && (_a = fieldsWithValue_1.return)) _a.call(fieldsWithValue_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return v;
    };
    /**
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?} dataTable
     * @param {?=} filterFields
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getBasicInfoFieldsWithValue = /**
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?} dataTable
     * @param {?=} filterFields
     * @return {?}
     */
    function (billInfo, schemaTable, dataTable, filterFields) {
        var _this = this;
        if (filterFields === void 0) { filterFields = true; }
        /** @type {?} */
        var fieldsWithValue = [];
        // 单据追踪配置
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var selectedFields = schema && schema[schemaTable.tableName] && schema[schemaTable.tableName].fields;
        selectedFields = selectedFields ? selectedFields : [];
        /** @type {?} */
        var showCustomFields = bts.billTrackingDataShownMode === BillTrackingDataShownMode.CUSTOMFIELD;
        // 所有字段
        /** @type {?} */
        var fs = schemaTable.getFieldList();
        /** @type {?} */
        var r = dataTable.GetRowList()[0];
        // 主表字段
        /** @type {?} */
        var rdfm = r.GetFieldMap();
        // 提取展示字段
        /** @type {?} */
        var ffs = this.extractFFields(fs, selectedFields, showCustomFields);
        // 获取字段值
        // 先解析其他类型字段
        /** @type {?} */
        var decimalFfs = [];
        ffs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        function (ff) {
            if (ff.dataType == DataType.Decimal) {
                decimalFfs.push(ff);
            }
            else {
                ff.fieldValue = _this.getFieldValue(ff, rdfm);
            }
        }));
        // 再解析浮点数字段
        decimalFfs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        function (ff) {
            ff.fieldValue = _this.getFieldValue(ff, rdfm, fs);
        }));
        fieldsWithValue.push.apply(fieldsWithValue, tslib_1.__spread(ffs));
        return fieldsWithValue;
    };
    /**
     * @param {?} f
     * @param {?} sf
     * @param {?} fieldPath
     * @param {?=} rdfm
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.setExtendProps = /**
     * @param {?} f
     * @param {?} sf
     * @param {?} fieldPath
     * @param {?=} rdfm
     * @return {?}
     */
    function (f, sf, fieldPath, rdfm) {
        f.captionPath = this.extractCaptionPath(f);
        f.fieldPath = fieldPath;
        if (sf) {
            f.displayName = sf.displayName;
            f.i18nCols = sf.i18nCols;
            f.formatInfo = sf.formatInfo;
            f.order = sf.order;
        }
        if (rdfm) {
            f.fieldValue = this.getFieldValue(f, rdfm);
        }
        return f;
    };
    /**
     * 字段列表按order属性排序
     * @param fieldsWithValue
     * @returns
     */
    /**
     * 字段列表按order属性排序
     * @param {?} fieldsWithValue
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.sortFieldsByOrder = /**
     * 字段列表按order属性排序
     * @param {?} fieldsWithValue
     * @return {?}
     */
    function (fieldsWithValue) {
        return fieldsWithValue.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    };
    /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.dateFormat = /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    function (date, fmt) {
        /** @type {?} */
        var ret;
        /** @type {?} */
        var opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (var k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (this.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    };
    /**
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.myPadStart = /**
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    function (src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    };
    /**
     * 解析字段名称
     * @param f
     * @param langCode
     * @returns
     */
    /**
     * 解析字段名称
     * @param {?} f
     * @param {?=} langCode
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldLabel = /**
     * 解析字段名称
     * @param {?} f
     * @param {?=} langCode
     * @return {?}
     */
    function (f, langCode) {
        return (langCode && f.i18nCols && f.i18nCols.colI18nValues.displayName &&
            f.i18nCols.colI18nValues.displayName[langCode]) || f.displayName || f.captionPath || f.caption;
    };
    /**
     * 解析表名称
     */
    /**
     * 解析表名称
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?=} langCode
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getTableLabel = /**
     * 解析表名称
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?=} langCode
     * @return {?}
     */
    function (billInfo, schemaTable, langCode) {
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var table = schema && schema[schemaTable.tableName];
        if (table != null) {
            /** @type {?} */
            var i18nCols = table.i18nCols;
            /** @type {?} */
            var tmp = (langCode && i18nCols && i18nCols.colI18nValues.displayName && i18nCols.colI18nValues.displayName[langCode]) || table.displayName || table.caption || table.code;
            return tmp;
        }
        else {
            return schemaTable.caption;
        }
    };
    /**
     * 获取解析可展示子表
     */
    /**
     * 获取解析可展示子表
     * @param {?} billInfo
     * @param {?} schemaTable
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getChildTables = /**
     * 获取解析可展示子表
     * @param {?} billInfo
     * @param {?} schemaTable
     * @return {?}
     */
    function (billInfo, schemaTable) {
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var children = schemaTable.GetChildTableList();
        children && children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            /** @type {?} */
            var trackerTable = schema && schema[child.tableName];
            if (trackerTable != null && trackerTable.show != null) {
                if (trackerTable.show == true) {
                    child.order = trackerTable.order;
                    result.push(child);
                }
            }
            else {
                // 兼容无show属性情形
                result.push(child);
            }
        }));
        result = this.sortTablesByOrder(result);
        return result;
    };
    /**
     * 表按sort字段排序
     * @param schemaTables
     * @returns
     */
    /**
     * 表按sort字段排序
     * @param {?} schemaTables
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.sortTablesByOrder = /**
     * 表按sort字段排序
     * @param {?} schemaTables
     * @return {?}
     */
    function (schemaTables) {
        return schemaTables.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    };
    /**
     * 解析billTrackerSchema
     * @param billInfo
     */
    /**
     * 解析billTrackerSchema
     * @param {?} billInfo
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getBillTrackerSchema = /**
     * 解析billTrackerSchema
     * @param {?} billInfo
     * @return {?}
     */
    function (billInfo) {
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var fieldContent = bts.customFieldContent;
        /** @type {?} */
        var fieldConfig = fieldContent && (typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent));
        /** @type {?} */
        var schema = fieldConfig && fieldConfig.schema;
        return schema;
    };
    BillTrackerDataInfoService.decorators = [
        { type: Injectable }
    ];
    return BillTrackerDataInfoService;
}());
export { BillTrackerDataInfoService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10cmFja2VyLWRhdGEtaW5mby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbC10cmFja2VyL3NlcnZpY2VzL2JpbGwtdHJhY2tlci1kYXRhLWluZm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBMEksbUJBQW1CLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNU0sT0FBTyxFQUFvRCx5QkFBeUIsRUFBRSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd4SjtJQUFBO0lBcWJBLENBQUM7SUFuYkc7Ozs7T0FJRzs7Ozs7O0lBQ0ksNkNBQVE7Ozs7O0lBQWYsVUFBZ0IsR0FBa0M7UUFDOUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLEVBQUU7O2dCQUNsQixJQUFJLEdBQUcsSUFBSSxvQkFBb0IsRUFBRTtZQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDZDtRQUVELE9BQU8sR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQztJQUNoRCxDQUFDOzs7Ozs7OztJQUVNLG9EQUFlOzs7Ozs7O0lBQXRCLFVBQXVCLElBQW1CLEVBQUUsV0FBa0MsRUFBRSxXQUFrQyxFQUFFLE9BQWU7UUFBbkksaUJBdUJDOzs7WUF0Qk8sS0FBSyxHQUFHLEVBQUU7Z0NBQ0wsR0FBRzs7Z0JBQ0osR0FBRyxHQUFHLEVBQUU7WUFDWixHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQzs7O2dCQUVwQixVQUFVLEdBQUcsRUFBRTtZQUNyQixXQUFXLENBQUMsT0FBTzs7OztZQUFDLFVB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SUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDYjtpQkFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUMzQyxPQUFPLENBQUMsQ0FBQzthQUNaO2lCQUFNO2dCQUNILE9BQU8sQ0FBQyxDQUFDO2FBQ1o7UUFDTCxDQUFDLEVBQUMsQ0FBQTtJQUNOLENBQUM7SUFDRDs7O09BR0c7Ozs7OztJQUNJLHlEQUFvQjs7Ozs7SUFBM0IsVUFBNEIsUUFBa0I7O1lBQ3RDLEdBQUcsR0FBeUIsSUFBSSxvQkFBb0IsRUFBRTtRQUMxRCxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsb0JBQW9CLEVBQUU7WUFDM0MsR0FBRyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNuRDs7WUFFRyxZQUFZLEdBQUcsR0FBRyxDQUFDLGtCQUFrQjs7WUFDckMsV0FBVyxHQUFrQyxZQUFZLElBQUksQ0FBQyxPQUFPLFlBQVksSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7WUFDeEksTUFBTSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTTtRQUU5QyxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOztnQkFwYkosVUFBVTs7SUFxYlgsaUNBQUM7Q0FBQSxBQXJiRCxJQXFiQztTQXBiWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQmlsbERhdGFGaWVsZCwgQmlsbERhdGFSb3csIEJpbGxEYXRhU3ViRmllbGQsIEJpbGxEYXRhVGFibGUsIEJpbGxTY2hlbWFGaWVsZCwgQmlsbFNjaGVtYUZpZWxkQmFzZSwgQmlsbFNjaGVtYVN1YkZpZWxkLCBCaWxsU2NoZW1hVGFibGUsIEJwbW5Nb2RlbEpzb25IZWxwZXIsIERhdGFUeXBlIH0gZnJvbSBcIkBlZHAtYWlmL2NvbW1vbi1hcGlcIjtcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJTY2hlbWEsIEJpbGxUcmFja2VyU2NoZW1hRmllbGRDb250ZW50LCBCaWxsVHJhY2tpbmdEYXRhU2hvd25Nb2RlLCBCaWxsVHJhY2tpbmdTZXR0aW5ncywgZnVsbFBhdGhQcmVmaXggfSBmcm9tIFwiQGVkcC1iaWYvY29tbW9uLWFwaVwiO1xyXG5pbXBvcnQgeyBCaWxsSW5mbyB9IGZyb20gXCIuLi8uLi9lbnRpdHkvdHJhY2tpbmcvQmlsbEluZm9cIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJpbGxUcmFja2VyRGF0YUluZm9TZXJ2aWNlIHtcclxuICAgIC8qKlxyXG4gICAgICog5Yik5patQmlsbFRyYWNraW5nU2V0dGluZ3PmmK/ml6fniYjov5jmmK/mlrDniYhcclxuICAgICAqIEBwYXJhbSBidHMgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzTmV3QlRTKGJ0czogc3RyaW5nIHwgQmlsbFRyYWNraW5nU2V0dGluZ3MpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHlwZW9mIGJ0cyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBuZXcgQmlsbFRyYWNraW5nU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGVtcC5Mb2FkRnJvbUpzb24oYnRzKTtcclxuICAgICAgICAgICAgYnRzID0gdGVtcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBidHMgIT0gbnVsbCAmJiBidHMudmVyc2lvbiA9PT0gXCIxLjBcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXh0cmFjdERhdGFSb3dzKHJvd3M6IEJpbGxEYXRhUm93W10sIHNob3duRmllbGRzOiBCaWxsU2NoZW1hRmllbGRCYXNlW10sIHdob2xlRmllbGRzOiBCaWxsU2NoZW1hRmllbGRCYXNlW10sIGlkRmllbGQ6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBmcm93cyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHJvdyBvZiByb3dzKSB7XHJcbiAgICAgICAgICAgIGxldCBvYmogPSB7fTtcclxuICAgICAgICAgICAgb2JqW2lkRmllbGRdID0gcm93LmRhdGFJZDtcclxuICAgICAgICAgICAgLy8g5YWI6Kej5p6Q5YW25LuW57G75Z6L5a2X5q61XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY2ltYWxGRnMgPSBbXTtcclxuICAgICAgICAgICAgc2hvd25GaWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmLmRhdGFUeXBlID09IERhdGFUeXBlLkRlY2ltYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWNpbWFsRkZzLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ialtmLmZpZWxkUGF0aF0gPSB0aGlzLmdldEZpZWxkVmFsdWUoZiwgcm93LkdldEZpZWxkTWFwKCksIHdob2xlRmllbGRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIOWGjeino+aekOa1rueCueWei+Wtl+autVxyXG4gICAgICAgICAgICBkZWNpbWFsRkZzLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgICAgICBvYmpbZi5maWVsZFBhdGhdID0gdGhpcy5nZXRGaWVsZFZhbHVlKGYsIHJvdy5HZXRGaWVsZE1hcCgpLCB3aG9sZUZpZWxkcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnJvd3MucHVzaChvYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZyb3dzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleHRyYWN0Q2FwdGlvblBhdGgoZmllbGQ6IEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZCkge1xyXG4gICAgICAgIGxldCBzID0gZmllbGQuY2FwdGlvbjtcclxuICAgICAgICBsZXQgdG1wID0gZmllbGQgYXMgQmlsbFNjaGVtYVN1YkZpZWxkO1xyXG4gICAgICAgIHdoaWxlICh0bXAuYXR0YWNoZWRGaWVsZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHMgPSB0bXAuYXR0YWNoZWRGaWVsZC5jYXB0aW9uICsgXCIuXCIgKyBzO1xyXG4gICAgICAgICAgICB0bXAgPSB0bXAuYXR0YWNoZWRGaWVsZCBhcyBCaWxsU2NoZW1hU3ViRmllbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleHRyYWN0RmllbGRQYXRoKGZpZWxkOiBCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQpIHtcclxuICAgICAgICBsZXQgcyA9IGZpZWxkLmZpZWxkTmFtZTtcclxuICAgICAgICBsZXQgdG1wID0gZmllbGQgYXMgQmlsbFNjaGVtYVN1YkZpZWxkO1xyXG4gICAgICAgIHdoaWxlICh0bXAuYXR0YWNoZWRGaWVsZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHMgPSB0bXAuYXR0YWNoZWRGaWVsZC5maWVsZE5hbWUgKyBcIi5cIiArIHM7XHJcbiAgICAgICAgICAgIHRtcCA9IHRtcC5hdHRhY2hlZEZpZWxkIGFzIEJpbGxTY2hlbWFTdWJGaWVsZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBmaWVsZHMg5a2Q5a2X5q615YiX6KGoXHJcbiAgICAgKiBAcGFyYW0gc2VsZWN0ZWRGaWVsZHMg55So5oi36Ieq5a6a5LmJ5bGV56S65a2X5q615YiX6KGoXHJcbiAgICAgKiBAcGFyYW0gc2hvd0N1c3RvbUZpZWxkcyDmmK/lkKbmjInnlKjmiLfoh6rlrprkuYnlrZfmrrXmmL7npLpcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXh0cmFjdEZGaWVsZHMoZmllbGRzOiAoQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkKVtdLCBzZWxlY3RlZEZpZWxkczogQmlsbFNjaGVtYUZpZWxkQmFzZVtdLCBzaG93Q3VzdG9tRmllbGRzOiBib29sZWFuKTogKEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZClbXSB7XHJcbiAgICAgICAgbGV0IGZmaWVsZHM6IChCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQpW10gPSBbXTtcclxuICAgICAgICBmaWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgZi5zaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy/mnprkuL7miJbogIXmnprkuL7lnovljZXlgLxVRFTml7bpu5jorqTlj5ZOYW1lXHJcbiAgICAgICAgICAgIGlmIChmLmZpZWxkVHlwZSA9PSBcIkVudW1cIiB8fCBmLmZpZWxkVHlwZSA9PSBcIkVudW1TaW5nbGVVZHRcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcEZQYXRoID0gdGhpcy5leHRyYWN0RmllbGRQYXRoKGYpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzZiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd0N1c3RvbUZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOWtl+auteS4jeWcqOW3sumFjee9ruWtl+auteWIl+ihqOS4reWImei3s+i/h1xyXG4gICAgICAgICAgICAgICAgICAgIHNmID0gc2VsZWN0ZWRGaWVsZHMuZmluZCgoc2ZpZWxkKSA9PiBzZmllbGQuZmllbGRQYXRoID09IHRlbXBGUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNmID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZi5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGYgPSB0aGlzLnNldEV4dGVuZFByb3BzKGYsIHNmLCB0ZW1wRlBhdGggKyBcIi5OYW1lXCIpIGFzIEJpbGxTY2hlbWFTdWJGaWVsZDtcclxuXHJcbiAgICAgICAgICAgICAgICBmZmllbGRzLnB1c2goZik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZi5HZXRTdWJGaWVsZExpc3QoKSAhPSBudWxsICYmIGYuR2V0U3ViRmllbGRMaXN0KCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZmZpZWxkcy5wdXNoKC4uLnRoaXMuZXh0cmFjdEZGaWVsZHMoZi5HZXRTdWJGaWVsZExpc3QoKSwgc2VsZWN0ZWRGaWVsZHMsIHNob3dDdXN0b21GaWVsZHMpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBGUGF0aCA9IHRoaXMuZXh0cmFjdEZpZWxkUGF0aChmKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2YgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dDdXN0b21GaWVsZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlpoLmnpzlrZfmrrXkuI3lnKjlt7LphY3nva7lrZfmrrXliJfooajkuK3liJnot7Pov4dcclxuICAgICAgICAgICAgICAgICAgICBzZiA9IHNlbGVjdGVkRmllbGRzLmZpbmQoKHNmaWVsZCkgPT4gc2ZpZWxkLmZpZWxkUGF0aCA9PSB0ZW1wRlBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYuc2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmID0gdGhpcy5zZXRFeHRlbmRQcm9wcyhmLCBzZiwgdGVtcEZQYXRoKSBhcyBCaWxsU2NoZW1hU3ViRmllbGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZmZpZWxkcy5wdXNoKGYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmZmllbGRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yik5a6a5pyJ5a2Q5pWw5o2u55qE5p2h5Lu25Li677ya5a2Q6KGo5Y+v5pi+56S677yM5LiU5a2Q6KGo5pyJ5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBoYXNDaGlsZERhdGEocm93OiBCaWxsRGF0YVJvdywgYmlsbEluZm86IEJpbGxJbmZvKSB7XHJcbiAgICAgICAgbGV0IGhhc0NoaWxkRGF0YSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLmdldEJpbGxUcmFja2VyU2NoZW1hKGJpbGxJbmZvKTtcclxuICAgICAgICBsZXQgY2hpbGRyZW4gPSByb3cuR2V0Q2hpbGRUYWJsZUxpc3QoKTtcclxuICAgICAgICBmb3IgKGxldCBjIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZVNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGhhc1Jvd3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHRhYmxlID0gc2NoZW1hICYmIHNjaGVtYVtjLnRhYmxlTmFtZV07XHJcbiAgICAgICAgICAgIGlmICh0YWJsZSAhPSBudWxsICYmIHRhYmxlLnNob3cgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGFibGVTaG93ID0gdGFibGUuc2hvdztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOWFvOWuueaXoHNob3flsZ7mgKfmg4XlvaJcclxuICAgICAgICAgICAgICAgIHRhYmxlU2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGMuR2V0Um93TGlzdCgpICYmIGMuR2V0Um93TGlzdCgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGhhc1Jvd3MgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhhc0NoaWxkRGF0YSA9IHRhYmxlU2hvdyAmJiBoYXNSb3dzO1xyXG4gICAgICAgICAgICBpZiAoaGFzQ2hpbGREYXRhID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXNDaGlsZERhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZpZWxkVmFsdWUoZjogQmlsbFNjaGVtYUZpZWxkQmFzZSwgcmRmbTogeyBba2V5OiBzdHJpbmddOiBCaWxsRGF0YUZpZWxkOyB9LCB3aG9sZUZpZWxkcz86IEJpbGxTY2hlbWFGaWVsZEJhc2VbXSkge1xyXG4gICAgICAgIGxldCBmaWVsZHMgPSBmLmZpZWxkUGF0aCA/IGYuZmllbGRQYXRoLnNwbGl0KFwiLlwiKSA6IFtmLmZpZWxkTmFtZV07XHJcblxyXG4gICAgICAgIGxldCBiZGY6IEJpbGxEYXRhRmllbGQgfCBCaWxsRGF0YVN1YkZpZWxkID0gZmllbGRzICYmIHJkZm1bZmllbGRzWzBdXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgYmRmICE9IG51bGwgJiYgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gYmRmLkdldFN1YkZpZWxkTWFwKCk7XHJcbiAgICAgICAgICAgIGlmICh0ZW1wID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJkZiA9IHRlbXBbZmllbGRzW2ldXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRWYWx1ZSA9IGJkZiA/IGJkZi5HZXRUZXh0VmFsdWUoKSA6IFwiXCI7XHJcbiAgICAgICAgaWYgKHRleHRWYWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZi5kYXRhVHlwZSA9PSBEYXRhVHlwZS5TdHJpbmcpIHtcclxuICAgICAgICAgICAgZi5maWVsZFZhbHVlID0gdGV4dFZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dFZhbHVlIHx8IFwiXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmLmRhdGFUeXBlID09IERhdGFUeXBlLkRlY2ltYWwpIHtcclxuICAgICAgICAgICAgbGV0IHNjYWxlID0gZi5zY2FsZTtcclxuICAgICAgICAgICAgaWYgKGYuZm9ybWF0SW5mbyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZi5mb3JtYXRJbmZvLnNjYWxlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IGYuZm9ybWF0SW5mby5zY2FsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChmLmZvcm1hdEluZm8uZW5hYmxlU2NhbGVFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYuZm9ybWF0SW5mby5zY2FsZUV4cHJlc3Npb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZUZpZWxkID0gdGhpcy5nZXRGaWVsZEluRmllbGRzKHdob2xlRmllbGRzLCBmLmZvcm1hdEluZm8uc2NhbGVFeHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gc2NhbGVGaWVsZCAmJiBwYXJzZUludChTdHJpbmcodGhpcy5nZXRGaWVsZFZhbHVlKHNjYWxlRmllbGQsIHJkZm0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHRtcCA9IHBhcnNlSW50KHRoaXMuZ2V0RmllbGRWYWx1ZUluRmllbGRzV2l0aFZhbHVlKGV4dGFjdGVkRmllbGRzLCBmLmZvcm1hdEluZm8uc2NhbGVFeHByZXNzaW9uKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXAgIT0gbnVsbCAmJiAhaXNOYU4odG1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSB0bXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZi5maWVsZFZhbHVlID0gcGFyc2VGbG9hdChTdHJpbmcodGV4dFZhbHVlKSk7XHJcbiAgICAgICAgICAgIGxldCBkZWMgPSBwYXJzZUZsb2F0KFN0cmluZyh0ZXh0VmFsdWUpKS50b0ZpeGVkKHNjYWxlKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVjIHx8IFwiXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmLmRhdGFUeXBlID09IERhdGFUeXBlLkJvb2xlYW4pIHtcclxuICAgICAgICAgICAgaWYgKHRleHRWYWx1ZSA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBmLmZpZWxkVmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmLmZpZWxkVmFsdWUgPSBKU09OLnBhcnNlKHRleHRWYWx1ZSkgYXMgYm9vbGVhbjtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dFZhbHVlKSBhcyBib29sZWFuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZi5kYXRhVHlwZSA9PSBEYXRhVHlwZS5EYXRlVGltZSkge1xyXG4gICAgICAgICAgICBsZXQgZGF0ZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuRGF0ZVRpbWVGcm9tU3RyaW5nKHRleHRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCBmb3JtYXR0ZXIgPSBcInl5eXktTU0tZGRcIjtcclxuICAgICAgICAgICAgaWYgKGYuZmllbGRUeXBlID09IFwiRGF0ZVRpbWVcIikge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyID0gZi5mb3JtYXRJbmZvICYmIGYuZm9ybWF0SW5mby5kYXRlRm9ybWF0dGVyIHx8IFwieXl5eS1NTS1kZCBISDptbTpzcy5TU1NcIjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmLmZpZWxkVHlwZSA9PSBcIkRhdGVcIikge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyID0gZi5mb3JtYXRJbmZvICYmIGYuZm9ybWF0SW5mby5kYXRlRm9ybWF0dGVyIHx8IFwieXl5eS1NTS1kZFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyID0gZi5mb3JtYXRJbmZvICYmIGYuZm9ybWF0SW5mby5kYXRlRm9ybWF0dGVyIHx8IFwieXl5eS1NTS1kZFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGYuZmllbGRWYWx1ZSA9IGRhdGU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVGb3JtYXQoZGF0ZSwgZm9ybWF0dGVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmLmZpZWxkVmFsdWUgPSB0ZXh0VmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0VmFsdWUgfHwgXCJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZpZWxkSW5GaWVsZHMoZmllbGRzOiBCaWxsU2NoZW1hRmllbGRCYXNlW10sIGZ1bGxQYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgdiA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgZnYgb2YgZmllbGRzKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChmdi5hdHRhY2hlZEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICBmdiA9IGZ2LmF0dGFjaGVkRmllbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgcm9vdEZ2ID0gZnYgYXMgQmlsbFNjaGVtYUZpZWxkO1xyXG4gICAgICAgICAgICByb290RnYuZnVsbFBhdGggPSBmdWxsUGF0aFByZWZpeCArIHJvb3RGdi5hdHRhY2hlZFRhYmxlLnRhYmxlTmFtZSArIFwiLlwiICsgcm9vdEZ2LmZpZWxkUGF0aDtcclxuICAgICAgICAgICAgaWYgKGZ1bGxQYXRoID09IHJvb3RGdi5mdWxsUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgdiA9IHJvb3RGdjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGaWVsZFZhbHVlSW5GaWVsZHNXaXRoVmFsdWUoZmllbGRzV2l0aFZhbHVlOiBCaWxsU2NoZW1hRmllbGRCYXNlW10sIGZ1bGxQYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgdiA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgZnYgb2YgZmllbGRzV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChmdi5hdHRhY2hlZEZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICBmdiA9IGZ2LmF0dGFjaGVkRmllbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgcm9vdEZ2ID0gZnYgYXMgQmlsbFNjaGVtYUZpZWxkO1xyXG4gICAgICAgICAgICByb290RnYuZnVsbFBhdGggPSBmdWxsUGF0aFByZWZpeCArIHJvb3RGdi5hdHRhY2hlZFRhYmxlLnRhYmxlTmFtZSArIFwiLlwiICsgcm9vdEZ2LmZpZWxkUGF0aDtcclxuICAgICAgICAgICAgaWYgKGZ1bGxQYXRoID09IHJvb3RGdi5mdWxsUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgdiA9IHJvb3RGdi5maWVsZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEJhc2ljSW5mb0ZpZWxkc1dpdGhWYWx1ZShiaWxsSW5mbzogQmlsbEluZm8sIHNjaGVtYVRhYmxlOiBCaWxsU2NoZW1hVGFibGUsIGRhdGFUYWJsZTogQmlsbERhdGFUYWJsZSwgZmlsdGVyRmllbGRzOiBib29sZWFuID0gdHJ1ZSk6IChCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQpW10ge1xyXG4gICAgICAgIGNvbnN0IGZpZWxkc1dpdGhWYWx1ZTogKEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZClbXSA9IFtdO1xyXG4gICAgICAgIC8vIOWNleaNrui/vei4qumFjee9rlxyXG4gICAgICAgIGxldCBidHM6IEJpbGxUcmFja2luZ1NldHRpbmdzID0gbmV3IEJpbGxUcmFja2luZ1NldHRpbmdzKCk7XHJcbiAgICAgICAgaWYgKGJpbGxJbmZvICYmIGJpbGxJbmZvLmJpbGxUcmFja2luZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIGJ0cy5Mb2FkRnJvbUpzb24oYmlsbEluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5nZXRCaWxsVHJhY2tlclNjaGVtYShiaWxsSW5mbyk7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkRmllbGRzID0gc2NoZW1hICYmIHNjaGVtYVtzY2hlbWFUYWJsZS50YWJsZU5hbWVdICYmIHNjaGVtYVtzY2hlbWFUYWJsZS50YWJsZU5hbWVdLmZpZWxkcztcclxuICAgICAgICBzZWxlY3RlZEZpZWxkcyA9IHNlbGVjdGVkRmllbGRzID8gc2VsZWN0ZWRGaWVsZHMgOiBbXTtcclxuICAgICAgICBsZXQgc2hvd0N1c3RvbUZpZWxkcyA9IGJ0cy5iaWxsVHJhY2tpbmdEYXRhU2hvd25Nb2RlID09PSBCaWxsVHJhY2tpbmdEYXRhU2hvd25Nb2RlLkNVU1RPTUZJRUxEO1xyXG5cclxuICAgICAgICAvLyDmiYDmnInlrZfmrrVcclxuICAgICAgICBjb25zdCBmcyA9IHNjaGVtYVRhYmxlLmdldEZpZWxkTGlzdCgpO1xyXG4gICAgICAgIGNvbnN0IHIgPSBkYXRhVGFibGUuR2V0Um93TGlzdCgpWzBdO1xyXG4gICAgICAgIC8vIOS4u+ihqOWtl+autVxyXG4gICAgICAgIGNvbnN0IHJkZm0gPSByLkdldEZpZWxkTWFwKCk7XHJcblxyXG4gICAgICAgIC8vIOaPkOWPluWxleekuuWtl+autVxyXG4gICAgICAgIGNvbnN0IGZmcyA9IHRoaXMuZXh0cmFjdEZGaWVsZHMoZnMsIHNlbGVjdGVkRmllbGRzLCBzaG93Q3VzdG9tRmllbGRzKTtcclxuICAgICAgICAvLyDojrflj5blrZfmrrXlgLxcclxuICAgICAgICAvLyDlhYjop6PmnpDlhbbku5bnsbvlnovlrZfmrrVcclxuICAgICAgICBjb25zdCBkZWNpbWFsRmZzID0gW107XHJcbiAgICAgICAgZmZzLmZvckVhY2goZmYgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmYuZGF0YVR5cGUgPT0gRGF0YVR5cGUuRGVjaW1hbCkge1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbEZmcy5wdXNoKGZmKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZmLmZpZWxkVmFsdWUgPSB0aGlzLmdldEZpZWxkVmFsdWUoZmYsIHJkZm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g5YaN6Kej5p6Q5rWu54K55pWw5a2X5q61XHJcbiAgICAgICAgZGVjaW1hbEZmcy5mb3JFYWNoKGZmID0+IHtcclxuICAgICAgICAgICAgZmYuZmllbGRWYWx1ZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShmZiwgcmRmbSwgZnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZpZWxkc1dpdGhWYWx1ZS5wdXNoKC4uLmZmcyk7XHJcblxyXG4gICAgICAgIHJldHVybiBmaWVsZHNXaXRoVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEV4dGVuZFByb3BzKGY6IEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZCwgc2Y6IEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZCwgZmllbGRQYXRoOiBzdHJpbmcsIHJkZm0/OiB7IFtrZXk6IHN0cmluZ106IEJpbGxEYXRhRmllbGQ7IH0pIHtcclxuICAgICAgICBmLmNhcHRpb25QYXRoID0gdGhpcy5leHRyYWN0Q2FwdGlvblBhdGgoZik7XHJcbiAgICAgICAgZi5maWVsZFBhdGggPSBmaWVsZFBhdGg7XHJcbiAgICAgICAgaWYgKHNmKSB7XHJcbiAgICAgICAgICAgIGYuZGlzcGxheU5hbWUgPSBzZi5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgZi5pMThuQ29scyA9IHNmLmkxOG5Db2xzO1xyXG4gICAgICAgICAgICBmLmZvcm1hdEluZm8gPSBzZi5mb3JtYXRJbmZvO1xyXG4gICAgICAgICAgICBmLm9yZGVyID0gc2Yub3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZGZtKSB7XHJcbiAgICAgICAgICAgIGYuZmllbGRWYWx1ZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShmLCByZGZtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a2X5q615YiX6KGo5oyJb3JkZXLlsZ7mgKfmjpLluo9cclxuICAgICAqIEBwYXJhbSBmaWVsZHNXaXRoVmFsdWUgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNvcnRGaWVsZHNCeU9yZGVyKGZpZWxkc1dpdGhWYWx1ZTogKEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZClbXSk6IChCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQpW10ge1xyXG4gICAgICAgIHJldHVybiBmaWVsZHNXaXRoVmFsdWUuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS5vcmRlciAhPSBudWxsICYmIGIub3JkZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGEub3JkZXIgIT0gbnVsbCAmJiBiLm9yZGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhLm9yZGVyID09IG51bGwgJiYgYi5vcmRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGF0ZUZvcm1hdChkYXRlOiBEYXRlLCBmbXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJldDtcclxuICAgICAgICBjb25zdCBvcHQgPSB7XHJcbiAgICAgICAgICAgIFwieStcIjogZGF0ZS5nZXRVVENGdWxsWWVhcigpLnRvU3RyaW5nKCksICAgICAgICAvLyDlubRcclxuICAgICAgICAgICAgXCJNK1wiOiAoZGF0ZS5nZXRVVENNb250aCgpICsgMSkudG9TdHJpbmcoKSwgICAgIC8vIOaciFxyXG4gICAgICAgICAgICBcImQrXCI6IGRhdGUuZ2V0VVRDRGF0ZSgpLnRvU3RyaW5nKCksICAgICAgICAgICAgLy8g5pelXHJcbiAgICAgICAgICAgIFwiSCtcIjogZGF0ZS5nZXRVVENIb3VycygpLnRvU3RyaW5nKCksICAgICAgICAgICAvLyDml7ZcclxuICAgICAgICAgICAgXCJtK1wiOiBkYXRlLmdldFVUQ01pbnV0ZXMoKS50b1N0cmluZygpLCAgICAgICAgIC8vIOWIhlxyXG4gICAgICAgICAgICBcInMrXCI6IGRhdGUuZ2V0VVRDU2Vjb25kcygpLnRvU3RyaW5nKCksICAgICAgICAgLy8g56eSXHJcbiAgICAgICAgICAgIFwiUytcIjogZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKS50b1N0cmluZygpLCAgICAvLyDnp5JcclxuICAgICAgICAgICAgLy8g5pyJ5YW25LuW5qC85byP5YyW5a2X56ym6ZyA5rGC5Y+v5Lul57un57ut5re75Yqg77yM5b+F6aG76L2s5YyW5oiQ5a2X56ym5LiyXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBrIGluIG9wdCkge1xyXG4gICAgICAgICAgICByZXQgPSBuZXcgUmVnRXhwKFwiKFwiICsgayArIFwiKVwiKS5leGVjKGZtdCk7XHJcbiAgICAgICAgICAgIGlmIChyZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZtdCA9IGZtdC5yZXBsYWNlKHJldFsxXSwgKHJldFsxXS5sZW5ndGggPT0gMSkgPyAob3B0W2tdKSA6ICh0aGlzLm15UGFkU3RhcnQob3B0W2tdLCByZXRbMV0ubGVuZ3RoLCBcIjBcIikpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm10ID0gZm10LnJlcGxhY2UocmV0WzFdLCAocmV0WzFdLmxlbmd0aCA9PSAxKSA/IChvcHRba10pIDogKG9wdFtrXS5wYWRTdGFydChyZXRbMV0ubGVuZ3RoLCBcIjBcIikpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm10O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBteVBhZFN0YXJ0KHNyYzogc3RyaW5nLCB0YXJnZXRMZW5ndGg6IG51bWJlciwgcGFkU3RyaW5nOiBzdHJpbmcpIHtcclxuICAgICAgICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggPj4gMDsgLy9mbG9vciBpZiBudW1iZXIgb3IgY29udmVydCBub24tbnVtYmVyIHRvIDA7XHJcbiAgICAgICAgcGFkU3RyaW5nID0gU3RyaW5nKHR5cGVvZiBwYWRTdHJpbmcgIT09ICd1bmRlZmluZWQnID8gcGFkU3RyaW5nIDogJyAnKTtcclxuICAgICAgICBpZiAoc3JjLmxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHNyYyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0TGVuZ3RoID0gdGFyZ2V0TGVuZ3RoIC0gc3JjLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHRhcmdldExlbmd0aCA+IHBhZFN0cmluZy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHBhZFN0cmluZyArPSBwYWRTdHJpbmcucmVwZWF0KHRhcmdldExlbmd0aCAvIHBhZFN0cmluZy5sZW5ndGgpOyAvL2FwcGVuZCB0byBvcmlnaW5hbCB0byBlbnN1cmUgd2UgYXJlIGxvbmdlciB0aGFuIG5lZWRlZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwYWRTdHJpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuZ3RoKSArIFN0cmluZyhzcmMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOino+aekOWtl+auteWQjeensFxyXG4gICAgICogQHBhcmFtIGYgXHJcbiAgICAgKiBAcGFyYW0gbGFuZ0NvZGUgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZpZWxkTGFiZWwoZjogQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkLCBsYW5nQ29kZT86IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiAobGFuZ0NvZGUgJiYgZi5pMThuQ29scyAmJiBmLmkxOG5Db2xzLmNvbEkxOG5WYWx1ZXMuZGlzcGxheU5hbWUgJiZcclxuICAgICAgICAgICAgZi5pMThuQ29scy5jb2xJMThuVmFsdWVzLmRpc3BsYXlOYW1lW2xhbmdDb2RlXSkgfHwgZi5kaXNwbGF5TmFtZSB8fCBmLmNhcHRpb25QYXRoIHx8IGYuY2FwdGlvblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Kej5p6Q6KGo5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRUYWJsZUxhYmVsKGJpbGxJbmZvOiBCaWxsSW5mbywgc2NoZW1hVGFibGU6IEJpbGxTY2hlbWFUYWJsZSwgbGFuZ0NvZGU/OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLmdldEJpbGxUcmFja2VyU2NoZW1hKGJpbGxJbmZvKTtcclxuICAgICAgICBsZXQgdGFibGUgPSBzY2hlbWEgJiYgc2NoZW1hW3NjaGVtYVRhYmxlLnRhYmxlTmFtZV07XHJcbiAgICAgICAgaWYgKHRhYmxlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgaTE4bkNvbHMgPSB0YWJsZS5pMThuQ29scztcclxuICAgICAgICAgICAgY29uc3QgdG1wID0gKGxhbmdDb2RlICYmIGkxOG5Db2xzICYmIGkxOG5Db2xzLmNvbEkxOG5WYWx1ZXMuZGlzcGxheU5hbWUgJiYgaTE4bkNvbHMuY29sSTE4blZhbHVlcy5kaXNwbGF5TmFtZVtsYW5nQ29kZV0pIHx8IHRhYmxlLmRpc3BsYXlOYW1lIHx8IHRhYmxlLmNhcHRpb24gfHwgdGFibGUuY29kZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRtcDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hVGFibGUuY2FwdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bop6PmnpDlj6/lsZXnpLrlrZDooahcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENoaWxkVGFibGVzKGJpbGxJbmZvOiBCaWxsSW5mbywgc2NoZW1hVGFibGU6IEJpbGxTY2hlbWFUYWJsZSkge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IEJpbGxTY2hlbWFUYWJsZVtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuZ2V0QmlsbFRyYWNrZXJTY2hlbWEoYmlsbEluZm8pO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2NoZW1hVGFibGUuR2V0Q2hpbGRUYWJsZUxpc3QoKTtcclxuICAgICAgICBjaGlsZHJlbiAmJiBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdHJhY2tlclRhYmxlID0gc2NoZW1hICYmIHNjaGVtYVtjaGlsZC50YWJsZU5hbWVdO1xyXG4gICAgICAgICAgICBpZiAodHJhY2tlclRhYmxlICE9IG51bGwgJiYgdHJhY2tlclRhYmxlLnNob3cgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrZXJUYWJsZS5zaG93ID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5vcmRlciA9IHRyYWNrZXJUYWJsZS5vcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlhbzlrrnml6BzaG935bGe5oCn5oOF5b2iXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5zb3J0VGFibGVzQnlPcmRlcihyZXN1bHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KGo5oyJc29ydOWtl+auteaOkuW6j1xyXG4gICAgICogQHBhcmFtIHNjaGVtYVRhYmxlcyBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc29ydFRhYmxlc0J5T3JkZXIoc2NoZW1hVGFibGVzOiBCaWxsU2NoZW1hVGFibGVbXSk6IEJpbGxTY2hlbWFUYWJsZVtdIHtcclxuICAgICAgICByZXR1cm4gc2NoZW1hVGFibGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGEub3JkZXIgIT0gbnVsbCAmJiBiLm9yZGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhLm9yZGVyICE9IG51bGwgJiYgYi5vcmRlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5vcmRlciA9PSBudWxsICYmIGIub3JkZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOino+aekGJpbGxUcmFja2VyU2NoZW1hXHJcbiAgICAgKiBAcGFyYW0gYmlsbEluZm8gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRCaWxsVHJhY2tlclNjaGVtYShiaWxsSW5mbzogQmlsbEluZm8pOiBCaWxsVHJhY2tlclNjaGVtYSB7XHJcbiAgICAgICAgbGV0IGJ0czogQmlsbFRyYWNraW5nU2V0dGluZ3MgPSBuZXcgQmlsbFRyYWNraW5nU2V0dGluZ3MoKTtcclxuICAgICAgICBpZiAoYmlsbEluZm8gJiYgYmlsbEluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgYnRzLkxvYWRGcm9tSnNvbihiaWxsSW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZmllbGRDb250ZW50ID0gYnRzLmN1c3RvbUZpZWxkQ29udGVudDtcclxuICAgICAgICBsZXQgZmllbGRDb25maWc6IEJpbGxUcmFja2VyU2NoZW1hRmllbGRDb250ZW50ID0gZmllbGRDb250ZW50ICYmICh0eXBlb2YgZmllbGRDb250ZW50ID09IFwib2JqZWN0XCIgPyBmaWVsZENvbnRlbnQgOiBKU09OLnBhcnNlKGZpZWxkQ29udGVudCkpO1xyXG4gICAgICAgIGxldCBzY2hlbWEgPSBmaWVsZENvbmZpZyAmJiBmaWVsZENvbmZpZy5zY2hlbWE7XHJcblxyXG4gICAgICAgIHJldHVybiBzY2hlbWE7XHJcbiAgICB9XHJcbn0iXX0=