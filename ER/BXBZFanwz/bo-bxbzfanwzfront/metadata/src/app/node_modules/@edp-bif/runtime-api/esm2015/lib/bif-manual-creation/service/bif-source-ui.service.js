/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-source-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, Optional } from '@angular/core';
import { AbstractUiService } from './abstract-ui-service';
import { NavigationService, RuntimeFrameworkService } from '@farris/command-services';
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { PushSelectorComponent } from '../components/push-selector/push-selector.component';
import { RpcCreationRuleExecutorResult } from '../../ref';
import { BIF_UISTATE_KEY_CREATION_RESULT } from '../config/bif-form-constants';
import { FormBillCreationProcessExecutorResult } from '../../entity/form-rest/FormBillCreationProcessExecutorResult';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
import { MessagerService } from '@farris/ui-messager';
import { judgeBrowserType } from "../../utils/BrowserUtil";
export class BifSourceUiService extends AbstractUiService {
    /**
     * @param {?} navigationService
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} messager
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     * @param {?} runtimeFrameworkService
     */
    constructor(navigationService, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) {
        super(frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService);
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.messager = messager;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        this.uiStateKeyCreationResult = BIF_UISTATE_KEY_CREATION_RESULT;
    }
    /**
     * 下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    openBillCreationProcessSelector4Push(upBillVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.manualCreationMode = ManualCreationMode.Push;
        return this.openBillCreationProcessSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 特定下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    openBillCreationProcessSelector4SpecificPush(upBillVoId, downBillVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPush;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} creationResult
     * @param {?=} extParams
     * @return {?}
     */
    openTargetForm(formSettings, creationResult, extParams) {
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (creationResult == null) {
            throw "参数creationResult不可为空";
        }
        if (typeof creationResult == "string") {
            if (creationResult == "") {
                throw "参数creationResult不可为空";
            }
            /** @type {?} */
            const temp = new FormBillCreationProcessExecutorResult();
            temp.LoadFromJson(creationResult);
            creationResult = temp;
        }
        if ((creationResult instanceof FormBillCreationProcessExecutorResult) == false) {
            /** @type {?} */
            const res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJsonObject(creationResult);
            creationResult = res;
        }
        if (creationResult.conditionResult.conditionExecutionResult == false) {
            this.messager.error(creationResult.conditionResult.message || this.localePipe.transform("creationExecutionError"));
            return;
        }
        if (creationResult.creationRuleExecutorResult == null || creationResult.creationRuleExecutorResult.mappingResults == null || creationResult.creationRuleExecutorResult.mappingResults.length == 0) {
            this.messager.error(this.localePipe.transform("creationResultEmpty"));
            return;
        }
        else if (creationResult.creationRuleExecutorResult.mappingResults.length == 1) {
            //只有一条数据则打开卡片
            this.openApp(creationResult.creationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, creationResult, extParams, false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
                this.openApp(creationResult.creationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetListAppId, formSettings.targetListAppEntrance, creationResult, extParams, false);
            }
            else {
                //有多条数据但未配置批量编辑界面则打开多个卡片
                for (let mappingResult of creationResult.creationRuleExecutorResult.mappingResults) {
                    /** @type {?} */
                    let singleRes = new FormBillCreationProcessExecutorResult();
                    singleRes.conditionResult = creationResult.conditionResult;
                    singleRes.creationRuleExecutorResult = new RpcCreationRuleExecutorResult();
                    singleRes.creationRuleExecutorResult.bizFlowchartId = creationResult.creationRuleExecutorResult.bizFlowchartId;
                    singleRes.creationRuleExecutorResult.creationRuleId = creationResult.creationRuleExecutorResult.creationRuleId;
                    singleRes.creationRuleExecutorResult.creationRuleInstanceId = creationResult.creationRuleExecutorResult.creationRuleInstanceId;
                    singleRes.creationRuleExecutorResult.mappingResults = [mappingResult];
                    this.openApp(mappingResult.associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, singleRes, extParams, false);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} tabId
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} creationResult
     * @param {?=} extParams
     * @param {?=} reload
     * @param {?=} tabName
     * @param {?=} enableRefresh
     * @param {?=} destructuring
     * @return {?}
     */
    openApp(tabId, appId, appEntrance, creationResult, extParams, reload, tabName, enableRefresh, destructuring) {
        extParams == null ? {} : extParams;
        /** @type {?} */
        const browser = judgeBrowserType();
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            //IE11浏览器将生成结果转换为字符串存在top.localStorage，Id为tabId
            // console.log(tabId);
            window.top.localStorage.setItem(tabId, creationResult.ConvertToJson());
            this.navigationService.openApp(tabId, appId, appEntrance, extParams, reload, tabName, enableRefresh, destructuring);
        }
        else {
            this.navigationService.openApp(tabId, appId, appEntrance, this.buildRouteParams(creationResult, extParams), reload, tabName, enableRefresh, destructuring);
        }
    }
    /**
     *
     * @private
     * @param {?} creationResult
     * @param {?} extParams
     * @return {?}
     */
    buildRouteParams(creationResult, extParams) {
        /** @type {?} */
        const params = extParams;
        params[this.uiStateKeyCreationResult] = creationResult.ConvertToJson();
        return params;
    }
}
BifSourceUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifSourceUiService.ctorParameters = () => [
    { type: NavigationService },
    { type: FrameContext },
    { type: BsModalService },
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifSourceUiService.prototype.uiStateKeyCreationResult;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.navigationService;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.loader;
    /** @type {?} */
    BifSourceUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,