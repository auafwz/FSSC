/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-source-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, Optional } from '@angular/core';
import { AbstractUiService } from './abstract-ui-service';
import { NavigationService, RuntimeFrameworkService } from '@farris/command-services';
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { PushSelectorComponent } from '../components/push-selector/push-selector.component';
import { RpcCreationRuleExecutorResult } from '../../ref';
import { BIF_UISTATE_KEY_CREATION_RESULT } from '../config/bif-form-constants';
import { FormBillCreationProcessExecutorResult } from '../../entity/form-rest/FormBillCreationProcessExecutorResult';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
import { MessagerService } from '@farris/ui-messager';
import { judgeBrowserType } from "../../utils/BrowserUtil";
var BifSourceUiService = /** @class */ (function (_super) {
    tslib_1.__extends(BifSourceUiService, _super);
    function BifSourceUiService(navigationService, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) {
        var _this = _super.call(this, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) || this;
        _this.navigationService = navigationService;
        _this.frameContext = frameContext;
        _this.modalService = modalService;
        _this.messager = messager;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.loader = loader;
        _this.localeId = localeId;
        _this.uiStateKeyCreationResult = BIF_UISTATE_KEY_CREATION_RESULT;
        return _this;
    }
    /**
     * 下推时打开生单规则选择器
     */
    /**
     * 下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    BifSourceUiService.prototype.openBillCreationProcessSelector4Push = /**
     * 下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    function (upBillVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.manualCreationMode = ManualCreationMode.Push;
        return this.openBillCreationProcessSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    };
    /**
     * 特定下推时打开生单规则选择器
     */
    /**
     * 特定下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    BifSourceUiService.prototype.openBillCreationProcessSelector4SpecificPush = /**
     * 特定下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    function (upBillVoId, downBillVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPush;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    };
    /**
     * 打开下游单据制单界面
     * @param formSettings
     * @param creationResult
     * @param extParams
     */
    /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} creationResult
     * @param {?=} extParams
     * @return {?}
     */
    BifSourceUiService.prototype.openTargetForm = /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} creationResult
     * @param {?=} extParams
     * @return {?}
     */
    function (formSettings, creationResult, extParams) {
        var e_1, _a;
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (creationResult == null) {
            throw "参数creationResult不可为空";
        }
        if (typeof creationResult == "string") {
            if (creationResult == "") {
                throw "参数creationResult不可为空";
            }
            /** @type {?} */
            var temp = new FormBillCreationProcessExecutorResult();
            temp.LoadFromJson(creationResult);
            creationResult = temp;
        }
        if ((creationResult instanceof FormBillCreationProcessExecutorResult) == false) {
            /** @type {?} */
            var res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJsonObject(creationResult);
            creationResult = res;
        }
        if (creationResult.conditionResult.conditionExecutionResult == false) {
            this.messager.error(creationResult.conditionResult.message || this.localePipe.transform("creationExecutionError"));
            return;
        }
        if (creationResult.creationRuleExecutorResult == null || creationResult.creationRuleExecutorResult.mappingResults == null || creationResult.creationRuleExecutorResult.mappingResults.length == 0) {
            this.messager.error(this.localePipe.transform("creationResultEmpty"));
            return;
        }
        else if (creationResult.creationRuleExecutorResult.mappingResults.length == 1) {
            //只有一条数据则打开卡片
            this.openApp(creationResult.creationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, creationResult, extParams, false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
                this.openApp(creationResult.creationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetListAppId, formSettings.targetListAppEntrance, creationResult, extParams, false);
            }
            else {
                try {
                    //有多条数据但未配置批量编辑界面则打开多个卡片
                    for (var _b = tslib_1.__values(creationResult.creationRuleExecutorResult.mappingResults), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var mappingResult = _c.value;
                        /** @type {?} */
                        var singleRes = new FormBillCreationProcessExecutorResult();
                        singleRes.conditionResult = creationResult.conditionResult;
                        singleRes.creationRuleExecutorResult = new RpcCreationRuleExecutorResult();
                        singleRes.creationRuleExecutorResult.bizFlowchartId = creationResult.creationRuleExecutorResult.bizFlowchartId;
                        singleRes.creationRuleExecutorResult.creationRuleId = creationResult.creationRuleExecutorResult.creationRuleId;
                        singleRes.creationRuleExecutorResult.creationRuleInstanceId = creationResult.creationRuleExecutorResult.creationRuleInstanceId;
                        singleRes.creationRuleExecutorResult.mappingResults = [mappingResult];
                        this.openApp(mappingResult.associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, singleRes, extParams, false);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} tabId
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} creationResult
     * @param {?=} extParams
     * @param {?=} reload
     * @param {?=} tabName
     * @param {?=} enableRefresh
     * @param {?=} destructuring
     * @return {?}
     */
    BifSourceUiService.prototype.openApp = /**
     * @private
     * @param {?} tabId
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} creationResult
     * @param {?=} extParams
     * @param {?=} reload
     * @param {?=} tabName
     * @param {?=} enableRefresh
     * @param {?=} destructuring
     * @return {?}
     */
    function (tabId, appId, appEntrance, creationResult, extParams, reload, tabName, enableRefresh, destructuring) {
        extParams == null ? {} : extParams;
        /** @type {?} */
        var browser = judgeBrowserType();
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            //IE11浏览器将生成结果转换为字符串存在top.localStorage，Id为tabId
            // console.log(tabId);
            window.top.localStorage.setItem(tabId, creationResult.ConvertToJson());
            this.navigationService.openApp(tabId, appId, appEntrance, extParams, reload, tabName, enableRefresh, destructuring);
        }
        else {
            this.navigationService.openApp(tabId, appId, appEntrance, this.buildRouteParams(creationResult, extParams), reload, tabName, enableRefresh, destructuring);
        }
    };
    /**
     *
     * @param action 目标App动作
     * @param pairs 其他实体参数键值对
     */
    /**
     *
     * @private
     * @param {?} creationResult
     * @param {?} extParams
     * @return {?}
     */
    BifSourceUiService.prototype.buildRouteParams = /**
     *
     * @private
     * @param {?} creationResult
     * @param {?} extParams
     * @return {?}
     */
    function (creationResult, extParams) {
        /** @type {?} */
        var params = extParams;
        params[this.uiStateKeyCreationResult] = creationResult.ConvertToJson();
        return params;
    };
    BifSourceUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifSourceUiService.ctorParameters = function () { return [
        { type: NavigationService },
        { type: FrameContext },
        { type: BsModalService },
        { type: MessagerService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
    ]; };
    return BifSourceUiService;
}(AbstractUiService));
export { BifSourceUiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifSourceUiService.prototype.uiStateKeyCreationResult;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.navigationService;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.loader;
    /** @type {?} */
    BifSourceUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,