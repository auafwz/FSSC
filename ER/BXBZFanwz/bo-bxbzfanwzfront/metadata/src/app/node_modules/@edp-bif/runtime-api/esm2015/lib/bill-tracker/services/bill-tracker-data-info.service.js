/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-data-info.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BpmnModelJsonHelper, DataType } from "@edp-aif/common-api";
import { BillTrackingDataShownMode, BillTrackingSettings, fullPathPrefix } from "@edp-bif/common-api";
export class BillTrackerDataInfoService {
    /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param {?} bts
     * @return {?}
     */
    isNewBTS(bts) {
        if (typeof bts == "string") {
            /** @type {?} */
            const temp = new BillTrackingSettings();
            temp.LoadFromJson(bts);
            bts = temp;
        }
        return bts != null && bts.version === "1.0";
    }
    /**
     * @param {?} rows
     * @param {?} shownFields
     * @param {?} wholeFields
     * @param {?} idField
     * @return {?}
     */
    extractDataRows(rows, shownFields, wholeFields, idField) {
        /** @type {?} */
        let frows = [];
        for (let row of rows) {
            /** @type {?} */
            let obj = {};
            obj[idField] = row.dataId;
            // 先解析其他类型字段
            /** @type {?} */
            const decimalFFs = [];
            shownFields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                if (f.dataType == DataType.Decimal) {
                    decimalFFs.push(f);
                }
                else {
                    obj[f.fieldPath] = this.getFieldValue(f, row.GetFieldMap(), wholeFields);
                }
            }));
            // 再解析浮点型字段
            decimalFFs.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                obj[f.fieldPath] = this.getFieldValue(f, row.GetFieldMap(), wholeFields);
            }));
            frows.push(obj);
        }
        return frows;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    extractCaptionPath(field) {
        /** @type {?} */
        let s = field.caption;
        /** @type {?} */
        let tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.caption + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    extractFieldPath(field) {
        /** @type {?} */
        let s = field.fieldName;
        /** @type {?} */
        let tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.fieldName + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    }
    /**
     *
     * @param {?} fields 子字段列表
     * @param {?} selectedFields 用户自定义展示字段列表
     * @param {?} showCustomFields 是否按用户自定义字段显示
     * @return {?}
     */
    extractFFields(fields, selectedFields, showCustomFields) {
        /** @type {?} */
        let ffields = [];
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.show = true;
            //枚举或者枚举型单值UDT时默认取Name
            if (f.fieldType == "Enum" || f.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                const tempFPath = this.extractFieldPath(f);
                /** @type {?} */
                let sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    (sfield) => sfield.fieldPath == tempFPath));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (this.setExtendProps(f, sf, tempFPath + ".Name")));
                ffields.push(f);
            }
            else if (f.GetSubFieldList() != null && f.GetSubFieldList().length > 0) {
                ffields.push(...this.extractFFields(f.GetSubFieldList(), selectedFields, showCustomFields));
            }
            else {
                /** @type {?} */
                const tempFPath = this.extractFieldPath(f);
                /** @type {?} */
                let sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    (sfield) => sfield.fieldPath == tempFPath));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (this.setExtendProps(f, sf, tempFPath)));
                ffields.push(f);
            }
        }));
        return ffields;
    }
    /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     * @param {?} row
     * @param {?} billInfo
     * @return {?}
     */
    hasChildData(row, billInfo) {
        /** @type {?} */
        let hasChildData = false;
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        let children = row.GetChildTableList();
        for (let c of children) {
            /** @type {?} */
            let tableShow = false;
            /** @type {?} */
            let hasRows = false;
            /** @type {?} */
            let table = schema && schema[c.tableName];
            if (table != null && table.show != null) {
                tableShow = table.show;
            }
            else {
                // 兼容无show属性情形
                tableShow = true;
            }
            if (c.GetRowList() && c.GetRowList().length > 0) {
                hasRows = true;
            }
            hasChildData = tableShow && hasRows;
            if (hasChildData == true) {
                break;
            }
        }
        return hasChildData;
    }
    /**
     * @param {?} f
     * @param {?} rdfm
     * @param {?=} wholeFields
     * @return {?}
     */
    getFieldValue(f, rdfm, wholeFields) {
        /** @type {?} */
        let fields = f.fieldPath ? f.fieldPath.split(".") : [f.fieldName];
        /** @type {?} */
        let bdf = fields && rdfm[fields[0]];
        for (let i = 1; bdf != null && i < fields.length; i++) {
            /** @type {?} */
            const temp = bdf.GetSubFieldMap();
            if (temp == null) {
                break;
            }
            bdf = temp[fields[i]];
        }
        /** @type {?} */
        const textValue = bdf ? bdf.GetTextValue() : "";
        if (textValue == null) {
            return null;
        }
        if (f.dataType == DataType.String) {
            f.fieldValue = textValue;
            return textValue || "";
        }
        else if (f.dataType == DataType.Decimal) {
            /** @type {?} */
            let scale = f.scale;
            if (f.formatInfo != null) {
                if (f.formatInfo.scale != null) {
                    scale = f.formatInfo.scale;
                }
                if (f.formatInfo.enableScaleExpression) {
                    if (f.formatInfo.scaleExpression != null) {
                        /** @type {?} */
                        const scaleField = this.getFieldInFields(wholeFields, f.formatInfo.scaleExpression);
                        /** @type {?} */
                        const tmp = scaleField && parseInt(String(this.getFieldValue(scaleField, rdfm)));
                        // const tmp = parseInt(this.getFieldValueInFieldsWithValue(extactedFields, f.formatInfo.scaleExpression));
                        if (tmp != null && !isNaN(tmp)) {
                            scale = tmp;
                        }
                    }
                }
            }
            f.fieldValue = parseFloat(String(textValue));
            /** @type {?} */
            let dec = parseFloat(String(textValue)).toFixed(scale).toString();
            return dec || "";
        }
        else if (f.dataType == DataType.Boolean) {
            if (textValue == "") {
                f.fieldValue = null;
                return textValue;
            }
            f.fieldValue = (/** @type {?} */ (JSON.parse(textValue)));
            return (/** @type {?} */ (JSON.parse(textValue)));
        }
        else if (f.dataType == DataType.DateTime) {
            /** @type {?} */
            let date = BpmnModelJsonHelper.DateTimeFromString(textValue);
            /** @type {?} */
            let formatter = "yyyy-MM-dd";
            if (f.fieldType == "DateTime") {
                formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd HH:mm:ss.SSS";
            }
            else if (f.fieldType == "Date") {
                formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            }
            else {
                formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            }
            f.fieldValue = date;
            return this.dateFormat(date, formatter);
        }
        else {
            f.fieldValue = textValue;
            return textValue || "";
        }
    }
    /**
     * @param {?} fields
     * @param {?} fullPath
     * @return {?}
     */
    getFieldInFields(fields, fullPath) {
        /** @type {?} */
        let v = null;
        for (let fv of fields) {
            while (fv.attachedField) {
                fv = fv.attachedField;
            }
            /** @type {?} */
            const rootFv = (/** @type {?} */ (fv));
            rootFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + rootFv.fieldPath;
            if (fullPath == rootFv.fullPath) {
                v = rootFv;
                break;
            }
        }
        return v;
    }
    /**
     * @param {?} fieldsWithValue
     * @param {?} fullPath
     * @return {?}
     */
    getFieldValueInFieldsWithValue(fieldsWithValue, fullPath) {
        /** @type {?} */
        let v = null;
        for (let fv of fieldsWithValue) {
            while (fv.attachedField) {
                fv = fv.attachedField;
            }
            /** @type {?} */
            const rootFv = (/** @type {?} */ (fv));
            rootFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + rootFv.fieldPath;
            if (fullPath == rootFv.fullPath) {
                v = rootFv.fieldValue;
                break;
            }
        }
        return v;
    }
    /**
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?} dataTable
     * @param {?=} filterFields
     * @return {?}
     */
    getBasicInfoFieldsWithValue(billInfo, schemaTable, dataTable, filterFields = true) {
        /** @type {?} */
        const fieldsWithValue = [];
        // 单据追踪配置
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        let selectedFields = schema && schema[schemaTable.tableName] && schema[schemaTable.tableName].fields;
        selectedFields = selectedFields ? selectedFields : [];
        /** @type {?} */
        let showCustomFields = bts.billTrackingDataShownMode === BillTrackingDataShownMode.CUSTOMFIELD;
        // 所有字段
        /** @type {?} */
        const fs = schemaTable.getFieldList();
        /** @type {?} */
        const r = dataTable.GetRowList()[0];
        // 主表字段
        /** @type {?} */
        const rdfm = r.GetFieldMap();
        // 提取展示字段
        /** @type {?} */
        const ffs = this.extractFFields(fs, selectedFields, showCustomFields);
        // 获取字段值
        // 先解析其他类型字段
        /** @type {?} */
        const decimalFfs = [];
        ffs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        ff => {
            if (ff.dataType == DataType.Decimal) {
                decimalFfs.push(ff);
            }
            else {
                ff.fieldValue = this.getFieldValue(ff, rdfm);
            }
        }));
        // 再解析浮点数字段
        decimalFfs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        ff => {
            ff.fieldValue = this.getFieldValue(ff, rdfm, fs);
        }));
        fieldsWithValue.push(...ffs);
        return fieldsWithValue;
    }
    /**
     * @param {?} f
     * @param {?} sf
     * @param {?} fieldPath
     * @param {?=} rdfm
     * @return {?}
     */
    setExtendProps(f, sf, fieldPath, rdfm) {
        f.captionPath = this.extractCaptionPath(f);
        f.fieldPath = fieldPath;
        if (sf) {
            f.displayName = sf.displayName;
            f.i18nCols = sf.i18nCols;
            f.formatInfo = sf.formatInfo;
            f.order = sf.order;
        }
        if (rdfm) {
            f.fieldValue = this.getFieldValue(f, rdfm);
        }
        return f;
    }
    /**
     * 字段列表按order属性排序
     * @param {?} fieldsWithValue
     * @return {?}
     */
    sortFieldsByOrder(fieldsWithValue) {
        return fieldsWithValue.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    }
    /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    dateFormat(date, fmt) {
        /** @type {?} */
        let ret;
        /** @type {?} */
        const opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (let k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (this.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    }
    /**
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    myPadStart(src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    }
    /**
     * 解析字段名称
     * @param {?} f
     * @param {?=} langCode
     * @return {?}
     */
    getFieldLabel(f, langCode) {
        return (langCode && f.i18nCols && f.i18nCols.colI18nValues.displayName &&
            f.i18nCols.colI18nValues.displayName[langCode]) || f.displayName || f.captionPath || f.caption;
    }
    /**
     * 解析表名称
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?=} langCode
     * @return {?}
     */
    getTableLabel(billInfo, schemaTable, langCode) {
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        let table = schema && schema[schemaTable.tableName];
        if (table != null) {
            /** @type {?} */
            const i18nCols = table.i18nCols;
            /** @type {?} */
            const tmp = (langCode && i18nCols && i18nCols.colI18nValues.displayName && i18nCols.colI18nValues.displayName[langCode]) || table.displayName || table.caption || table.code;
            return tmp;
        }
        else {
            return schemaTable.caption;
        }
    }
    /**
     * 获取解析可展示子表
     * @param {?} billInfo
     * @param {?} schemaTable
     * @return {?}
     */
    getChildTables(billInfo, schemaTable) {
        /** @type {?} */
        let result = [];
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        const children = schemaTable.GetChildTableList();
        children && children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        (child) => {
            /** @type {?} */
            let trackerTable = schema && schema[child.tableName];
            if (trackerTable != null && trackerTable.show != null) {
                if (trackerTable.show == true) {
                    child.order = trackerTable.order;
                    result.push(child);
                }
            }
            else {
                // 兼容无show属性情形
                result.push(child);
            }
        }));
        result = this.sortTablesByOrder(result);
        return result;
    }
    /**
     * 表按sort字段排序
     * @param {?} schemaTables
     * @return {?}
     */
    sortTablesByOrder(schemaTables) {
        return schemaTables.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    }
    /**
     * 解析billTrackerSchema
     * @param {?} billInfo
     * @return {?}
     */
    getBillTrackerSchema(billInfo) {
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        let fieldContent = bts.customFieldContent;
        /** @type {?} */
        let fieldConfig = fieldContent && (typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent));
        /** @type {?} */
        let schema = fieldConfig && fieldConfig.schema;
        return schema;
    }
}
BillTrackerDataInfoService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10cmFja2VyLWRhdGEtaW5mby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbC10cmFja2VyL3NlcnZpY2VzL2JpbGwtdHJhY2tlci1kYXRhLWluZm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwSSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1TSxPQUFPLEVBQW9ELHlCQUF5QixFQUFFLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSXhKLE1BQU0sT0FBTywwQkFBMEI7Ozs7OztJQU01QixRQUFRLENBQUMsR0FBa0M7UUFDOUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLEVBQUU7O2tCQUNsQixJQUFJLEdBQUcsSUFBSSxvQkFBb0IsRUFBRTtZQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDZDtRQUVELE9BQU8sR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQztJQUNoRCxDQUFDOzs7Ozs7OztJQUVNLGVBQWUsQ0FBQyxJQUFtQixFQUFFLFdBQWtDLEVBQUUsV0FBa0MsRUFBRSxPQUFlOztZQUMzSCxLQUFLLEdBQUcsRUFBRTtRQUNkLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFOztnQkFDZCxHQUFHLEdBQUcsRUFBRTtZQUNaLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDOzs7a0JBRXBCLFVBQVUsR0FBRyxFQUFFO1lBQ3JCLFdBQVcsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO29CQUNoQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN0QjtxQkFBTTtvQkFDSCxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztpQkFDNUU7WUFDTCxDQUFDLEVBQUMsQ0FBQztZQUNILFdBQVc7WUFDWCxVQUFVLENBQUMsT0FBTzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNuQixHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUM3RSxDQUFDLEVBQUMsQ0FBQztZQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkI7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEtBQTJDOztZQUM3RCxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU87O1lBQ2pCLEdBQUcsR0FBRyxtQkFBQSxLQUFLLEVBQXNCO1FBQ3JDLE9BQU8sR0FBRyxDQUFDLGFBQWEsSUFBSSxJQUFJLEVBQUU7WUFDOUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDeEMsR0FBRyxHQUFHLG1CQUFBLEdBQUcsQ0FBQyxhQUFhLEVBQXNCLENBQUM7U0FDakQ7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsS0FBMkM7O1lBQzNELENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUzs7WUFDbkIsR0FBRyxHQUFHLG1CQUFBLEtBQUssRUFBc0I7UUFDckMsT0FBTyxHQUFHLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTtZQUM5QixDQUFDLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUMxQyxHQUFHLEdBQUcsbUJBQUEsR0FBRyxDQUFDLGFBQWEsRUFBc0IsQ0FBQztTQUNqRDtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7Ozs7SUFTTSxjQUFjLENBQUMsTUFBZ0QsRUFBRSxjQUFxQyxFQUFFLGdCQUF5Qjs7WUFDaEksT0FBTyxHQUE2QyxFQUFFO1FBQzFELE1BQU0sQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDZixDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNkLHNCQUFzQjtZQUN0QixJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksZUFBZSxFQUFFOztzQkFDbkQsU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7O29CQUV0QyxFQUFFLEdBQUcsSUFBSTtnQkFDYixJQUFJLGdCQUFnQixFQUFFO29CQUNsQixvQkFBb0I7b0JBQ3BCLEVBQUUsR0FBRyxjQUFjLENBQUMsSUFBSTs7OztvQkFBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxTQUFTLEVBQUMsQ0FBQztvQkFDcEUsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFO3dCQUNaLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO3FCQUNsQjtpQkFDSjtnQkFFRCxDQUFDLEdBQUcsbUJBQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsR0FBRyxPQUFPLENBQUMsRUFBc0IsQ0FBQztnQkFFMUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuQjtpQkFBTSxJQUFJLENBQUMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3RFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO2FBQy9GO2lCQUFNOztzQkFDRyxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQzs7b0JBRXRDLEVBQUUsR0FBRyxJQUFJO2dCQUNiLElBQUksZ0JBQWdCLEVBQUU7b0JBQ2xCLG9CQUFvQjtvQkFDcEIsRUFBRSxHQUFHLGNBQWMsQ0FBQyxJQUFJOzs7O29CQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLFNBQVMsRUFBQyxDQUFDO29CQUNwRSxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7d0JBQ1osQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7cUJBQ2xCO2lCQUNKO2dCQUVELENBQUMsR0FBRyxtQkFBQSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQXNCLENBQUM7Z0JBRWhFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7UUFDTCxDQUFDLEVBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7Ozs7Ozs7SUFLTSxZQUFZLENBQUMsR0FBZ0IsRUFBRSxRQUFrQjs7WUFDaEQsWUFBWSxHQUFHLEtBQUs7O2NBRWxCLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDOztZQUM5QyxRQUFRLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixFQUFFO1FBQ3RDLEtBQUssSUFBSSxDQUFDLElBQUksUUFBUSxFQUFFOztnQkFDaEIsU0FBUyxHQUFHLEtBQUs7O2dCQUNqQixPQUFPLEdBQUcsS0FBSzs7Z0JBQ2YsS0FBSyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN6QyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQ3JDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQzFCO2lCQUFNO2dCQUNILGNBQWM7Z0JBQ2QsU0FBUyxHQUFHLElBQUksQ0FBQzthQUNwQjtZQUNELElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QyxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ2xCO1lBQ0QsWUFBWSxHQUFHLFNBQVMsSUFBSSxPQUFPLENBQUM7WUFDcEMsSUFBSSxZQUFZLElBQUksSUFBSSxFQUFFO2dCQUN0QixNQUFNO2FBQ1Q7U0FDSjtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7Ozs7Ozs7SUFFTSxhQUFhLENBQUMsQ0FBc0IsRUFBRSxJQUF1QyxFQUFFLFdBQW1DOztZQUNqSCxNQUFNLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQzs7WUFFN0QsR0FBRyxHQUFxQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztrQkFDN0MsSUFBSSxHQUFHLEdBQUcsQ0FBQyxjQUFjLEVBQUU7WUFDakMsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO2dCQUNkLE1BQU07YUFDVDtZQUNELEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekI7O2NBRUssU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQy9DLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDL0IsQ0FBQyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7WUFDekIsT0FBTyxTQUFTLElBQUksRUFBRSxDQUFDO1NBQzFCO2FBQU0sSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7O2dCQUNuQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUs7WUFDbkIsSUFBSSxDQUFDLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtnQkFDdEIsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7b0JBQzVCLEtBQUssR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztpQkFDOUI7Z0JBQ0QsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFO29CQUNwQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsZUFBZSxJQUFJLElBQUksRUFBRTs7OEJBQ2hDLFVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDOzs4QkFDN0UsR0FBRyxHQUFHLFVBQVUsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ2hGLDJHQUEyRzt3QkFDM0csSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFOzRCQUM1QixLQUFLLEdBQUcsR0FBRyxDQUFDO3lCQUNmO3FCQUNKO2lCQUNKO2FBQ0o7WUFDRCxDQUFDLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzs7Z0JBQ3pDLEdBQUcsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNqRSxPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUM7U0FDcEI7YUFBTSxJQUFJLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUN2QyxJQUFJLFNBQVMsSUFBSSxFQUFFLEVBQUU7Z0JBQ2pCLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixPQUFPLFNBQVMsQ0FBQzthQUNwQjtZQUNELENBQUMsQ0FBQyxVQUFVLEdBQUcsbUJBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBVyxDQUFDO1lBQ2hELE9BQU8sbUJBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBVyxDQUFDO1NBQzNDO2FBQU0sSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7O2dCQUNwQyxJQUFJLEdBQUcsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDOztnQkFDeEQsU0FBUyxHQUFHLFlBQVk7WUFDNUIsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLFVBQVUsRUFBRTtnQkFDM0IsU0FBUyxHQUFHLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLElBQUkseUJBQXlCLENBQUM7YUFDdkY7aUJBQU0sSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLE1BQU0sRUFBRTtnQkFDOUIsU0FBUyxHQUFHLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxhQUFhLElBQUksWUFBWSxDQUFDO2FBQzFFO2lCQUFNO2dCQUNILFNBQVMsR0FBRyxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsYUFBYSxJQUFJLFlBQVksQ0FBQzthQUMxRTtZQUNELENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDM0M7YUFBTTtZQUNILENBQUMsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1lBQ3pCLE9BQU8sU0FBUyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7Ozs7OztJQUVNLGdCQUFnQixDQUFDLE1BQTZCLEVBQUUsUUFBZ0I7O1lBQy9ELENBQUMsR0FBRyxJQUFJO1FBQ1osS0FBSyxJQUFJLEVBQUUsSUFBSSxNQUFNLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFO2dCQUNyQixFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQzthQUN6Qjs7a0JBQ0ssTUFBTSxHQUFHLG1CQUFBLEVBQUUsRUFBbUI7WUFDcEMsTUFBTSxDQUFDLFFBQVEsR0FBRyxjQUFjLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDM0YsSUFBSSxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDN0IsQ0FBQyxHQUFHLE1BQU0sQ0FBQztnQkFDWCxNQUFNO2FBQ1Q7U0FDSjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7O0lBRU0sOEJBQThCLENBQUMsZUFBc0MsRUFBRSxRQUFnQjs7WUFDdEYsQ0FBQyxHQUFHLElBQUk7UUFDWixLQUFLLElBQUksRUFBRSxJQUFJLGVBQWUsRUFBRTtZQUM1QixPQUFPLEVBQUUsQ0FBQyxhQUFhLEVBQUU7Z0JBQ3JCLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO2FBQ3pCOztrQkFDSyxNQUFNLEdBQUcsbUJBQUEsRUFBRSxFQUFtQjtZQUNwQyxNQUFNLENBQUMsUUFBUSxHQUFHLGNBQWMsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUMzRixJQUFJLFFBQVEsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUM3QixDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztnQkFDdEIsTUFBTTthQUNUO1NBQ0o7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7Ozs7Ozs7O0lBRU0sMkJBQTJCLENBQUMsUUFBa0IsRUFBRSxXQUE0QixFQUFFLFNBQXdCLEVBQUUsZUFBd0IsSUFBSTs7Y0FDakksZUFBZSxHQUE2QyxFQUFFOzs7WUFFaEUsR0FBRyxHQUF5QixJQUFJLG9CQUFvQixFQUFFO1FBQzFELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtZQUMzQyxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQ25EOztjQUVLLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDOztZQUM5QyxjQUFjLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNO1FBQ3BHLGNBQWMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOztZQUNsRCxnQkFBZ0IsR0FBRyxHQUFHLENBQUMseUJBQXlCLEtBQUsseUJBQXlCLENBQUMsV0FBVzs7O2NBR3hGLEVBQUUsR0FBRyxXQUFXLENBQUMsWUFBWSxFQUFFOztjQUMvQixDQUFDLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7O2NBRTdCLElBQUksR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFOzs7Y0FHdEIsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQzs7OztjQUcvRCxVQUFVLEdBQUcsRUFBRTtRQUNyQixHQUFHLENBQUMsT0FBTzs7OztRQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2IsSUFBSSxFQUFFLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0gsRUFBRSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNoRDtRQUNMLENBQUMsRUFBQyxDQUFDO1FBQ0gsV0FBVztRQUNYLFVBQVUsQ0FBQyxPQUFPOzs7O1FBQUMsRUFBRSxDQUFDLEVBQUU7WUFDcEIsRUFBRSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckQsQ0FBQyxFQUFDLENBQUM7UUFDSCxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFN0IsT0FBTyxlQUFlLENBQUM7SUFDM0IsQ0FBQzs7Ozs7Ozs7SUFFTSxjQUFjLENBQUMsQ0FBdUMsRUFBRSxFQUF3QyxFQUFFLFNBQWlCLEVBQUUsSUFBd0M7UUFDaEssQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDeEIsSUFBSSxFQUFFLEVBQUU7WUFDSixDQUFDLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7WUFDL0IsQ0FBQyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUM3QixDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDdEI7UUFDRCxJQUFJLElBQUksRUFBRTtZQUNOLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUM7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7Ozs7OztJQU9NLGlCQUFpQixDQUFDLGVBQXlEO1FBQzlFLE9BQU8sZUFBZSxDQUFDLElBQUk7Ozs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDcEMsT0FBTyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDNUI7aUJBQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDM0MsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNiO2lCQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxDQUFDO2FBQ1o7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLENBQUM7YUFDWjtRQUNMLENBQUMsRUFBQyxDQUFBO0lBQ04sQ0FBQzs7Ozs7O0lBRU0sVUFBVSxDQUFDLElBQVUsRUFBRSxHQUFXOztZQUNqQyxHQUFHOztjQUNELEdBQUcsR0FBRztZQUNSLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxFQUFFOztZQUN0QyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFOztZQUN6QyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRTs7WUFDbEMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUU7O1lBQ25DLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxFQUFFOztZQUNyQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsRUFBRTs7WUFDckMsSUFBSSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsRUFBRTtTQUU3QztRQUNELEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO1lBQ2YsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLElBQUksR0FBRyxFQUFFO2dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtvQkFDNUIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDOUc7cUJBQU07b0JBQ0gsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN0RzthQUNKO1NBQ0o7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7Ozs7SUFFTSxVQUFVLENBQUMsR0FBVyxFQUFFLFlBQW9CLEVBQUUsU0FBaUI7UUFDbEUsWUFBWSxHQUFHLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7UUFDL0UsU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLFNBQVMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkUsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLFlBQVksRUFBRTtZQUMzQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0QjthQUFNO1lBQ0gsWUFBWSxHQUFHLFlBQVksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ3pDLElBQUksWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pDLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx3REFBd0Q7YUFDM0g7WUFDRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7Ozs7Ozs7SUFRTSxhQUFhLENBQUMsQ0FBdUMsRUFBRSxRQUFpQjtRQUMzRSxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVztZQUNsRSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQTtJQUN0RyxDQUFDOzs7Ozs7OztJQUtNLGFBQWEsQ0FBQyxRQUFrQixFQUFFLFdBQTRCLEVBQUUsUUFBaUI7O2NBQzlFLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDOztZQUM5QyxLQUFLLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ25ELElBQUksS0FBSyxJQUFJLElBQUksRUFBRTs7a0JBQ1QsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFROztrQkFDekIsR0FBRyxHQUFHLENBQUMsUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSTtZQUM1SyxPQUFPLEdBQUcsQ0FBQztTQUNkO2FBQU07WUFDSCxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUM7U0FDOUI7SUFDTCxDQUFDOzs7Ozs7O0lBS00sY0FBYyxDQUFDLFFBQWtCLEVBQUUsV0FBNEI7O1lBQzlELE1BQU0sR0FBc0IsRUFBRTs7Y0FFNUIsTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7O2NBQzVDLFFBQVEsR0FBRyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7UUFDaEQsUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7Z0JBQy9CLFlBQVksR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7WUFDcEQsSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLFlBQVksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO2dCQUNuRCxJQUFJLFlBQVksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO29CQUMzQixLQUFLLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7b0JBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3RCO2FBQ0o7aUJBQU07Z0JBQ0gsY0FBYztnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCO1FBQ0wsQ0FBQyxFQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQU9NLGlCQUFpQixDQUFDLFlBQStCO1FBQ3BELE9BQU8sWUFBWSxDQUFDLElBQUk7Ozs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDcEMsT0FBTyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDNUI7aUJBQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDM0MsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNiO2lCQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxDQUFDO2FBQ1o7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLENBQUM7YUFDWjtRQUNMLENBQUMsRUFBQyxDQUFBO0lBQ04sQ0FBQzs7Ozs7O0lBS00sb0JBQW9CLENBQUMsUUFBa0I7O1lBQ3RDLEdBQUcsR0FBeUIsSUFBSSxvQkFBb0IsRUFBRTtRQUMxRCxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsb0JBQW9CLEVBQUU7WUFDM0MsR0FBRyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNuRDs7WUFFRyxZQUFZLEdBQUcsR0FBRyxDQUFDLGtCQUFrQjs7WUFDckMsV0FBVyxHQUFrQyxZQUFZLElBQUksQ0FBQyxPQUFPLFlBQVksSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7WUFDeEksTUFBTSxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTTtRQUU5QyxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7WUFwYkosVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBCaWxsRGF0YUZpZWxkLCBCaWxsRGF0YVJvdywgQmlsbERhdGFTdWJGaWVsZCwgQmlsbERhdGFUYWJsZSwgQmlsbFNjaGVtYUZpZWxkLCBCaWxsU2NoZW1hRmllbGRCYXNlLCBCaWxsU2NoZW1hU3ViRmllbGQsIEJpbGxTY2hlbWFUYWJsZSwgQnBtbk1vZGVsSnNvbkhlbHBlciwgRGF0YVR5cGUgfSBmcm9tIFwiQGVkcC1haWYvY29tbW9uLWFwaVwiO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlclNjaGVtYSwgQmlsbFRyYWNrZXJTY2hlbWFGaWVsZENvbnRlbnQsIEJpbGxUcmFja2luZ0RhdGFTaG93bk1vZGUsIEJpbGxUcmFja2luZ1NldHRpbmdzLCBmdWxsUGF0aFByZWZpeCB9IGZyb20gXCJAZWRwLWJpZi9jb21tb24tYXBpXCI7XHJcbmltcG9ydCB7IEJpbGxJbmZvIH0gZnJvbSBcIi4uLy4uL2VudGl0eS90cmFja2luZy9CaWxsSW5mb1wiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmlsbFRyYWNrZXJEYXRhSW5mb1NlcnZpY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq1CaWxsVHJhY2tpbmdTZXR0aW5nc+aYr+aXp+eJiOi/mOaYr+aWsOeJiFxyXG4gICAgICogQHBhcmFtIGJ0cyBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNOZXdCVFMoYnRzOiBzdHJpbmcgfCBCaWxsVHJhY2tpbmdTZXR0aW5ncyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnRzID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IG5ldyBCaWxsVHJhY2tpbmdTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0ZW1wLkxvYWRGcm9tSnNvbihidHMpO1xyXG4gICAgICAgICAgICBidHMgPSB0ZW1wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJ0cyAhPSBudWxsICYmIGJ0cy52ZXJzaW9uID09PSBcIjEuMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleHRyYWN0RGF0YVJvd3Mocm93czogQmlsbERhdGFSb3dbXSwgc2hvd25GaWVsZHM6IEJpbGxTY2hlbWFGaWVsZEJhc2VbXSwgd2hvbGVGaWVsZHM6IEJpbGxTY2hlbWFGaWVsZEJhc2VbXSwgaWRGaWVsZDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGZyb3dzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgcm93IG9mIHJvd3MpIHtcclxuICAgICAgICAgICAgbGV0IG9iaiA9IHt9O1xyXG4gICAgICAgICAgICBvYmpbaWRGaWVsZF0gPSByb3cuZGF0YUlkO1xyXG4gICAgICAgICAgICAvLyDlhYjop6PmnpDlhbbku5bnsbvlnovlrZfmrrVcclxuICAgICAgICAgICAgY29uc3QgZGVjaW1hbEZGcyA9IFtdO1xyXG4gICAgICAgICAgICBzaG93bkZpZWxkcy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYuZGF0YVR5cGUgPT0gRGF0YVR5cGUuRGVjaW1hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYWxGRnMucHVzaChmKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW2YuZmllbGRQYXRoXSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShmLCByb3cuR2V0RmllbGRNYXAoKSwgd2hvbGVGaWVsZHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8g5YaN6Kej5p6Q5rWu54K55Z6L5a2X5q61XHJcbiAgICAgICAgICAgIGRlY2ltYWxGRnMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgIG9ialtmLmZpZWxkUGF0aF0gPSB0aGlzLmdldEZpZWxkVmFsdWUoZiwgcm93LkdldEZpZWxkTWFwKCksIHdob2xlRmllbGRzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmcm93cy5wdXNoKG9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZnJvd3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV4dHJhY3RDYXB0aW9uUGF0aChmaWVsZDogQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkKSB7XHJcbiAgICAgICAgbGV0IHMgPSBmaWVsZC5jYXB0aW9uO1xyXG4gICAgICAgIGxldCB0bXAgPSBmaWVsZCBhcyBCaWxsU2NoZW1hU3ViRmllbGQ7XHJcbiAgICAgICAgd2hpbGUgKHRtcC5hdHRhY2hlZEZpZWxkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcyA9IHRtcC5hdHRhY2hlZEZpZWxkLmNhcHRpb24gKyBcIi5cIiArIHM7XHJcbiAgICAgICAgICAgIHRtcCA9IHRtcC5hdHRhY2hlZEZpZWxkIGFzIEJpbGxTY2hlbWFTdWJGaWVsZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV4dHJhY3RGaWVsZFBhdGgoZmllbGQ6IEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZCkge1xyXG4gICAgICAgIGxldCBzID0gZmllbGQuZmllbGROYW1lO1xyXG4gICAgICAgIGxldCB0bXAgPSBmaWVsZCBhcyBCaWxsU2NoZW1hU3ViRmllbGQ7XHJcbiAgICAgICAgd2hpbGUgKHRtcC5hdHRhY2hlZEZpZWxkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcyA9IHRtcC5hdHRhY2hlZEZpZWxkLmZpZWxkTmFtZSArIFwiLlwiICsgcztcclxuICAgICAgICAgICAgdG1wID0gdG1wLmF0dGFjaGVkRmllbGQgYXMgQmlsbFNjaGVtYVN1YkZpZWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGZpZWxkcyDlrZDlrZfmrrXliJfooahcclxuICAgICAqIEBwYXJhbSBzZWxlY3RlZEZpZWxkcyDnlKjmiLfoh6rlrprkuYnlsZXnpLrlrZfmrrXliJfooahcclxuICAgICAqIEBwYXJhbSBzaG93Q3VzdG9tRmllbGRzIOaYr+WQpuaMieeUqOaIt+iHquWumuS5ieWtl+auteaYvuekulxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleHRyYWN0RkZpZWxkcyhmaWVsZHM6IChCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQpW10sIHNlbGVjdGVkRmllbGRzOiBCaWxsU2NoZW1hRmllbGRCYXNlW10sIHNob3dDdXN0b21GaWVsZHM6IGJvb2xlYW4pOiAoQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkKVtdIHtcclxuICAgICAgICBsZXQgZmZpZWxkczogKEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZClbXSA9IFtdO1xyXG4gICAgICAgIGZpZWxkcy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICBmLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAvL+aemuS4vuaIluiAheaemuS4vuWei+WNleWAvFVEVOaXtum7mOiupOWPlk5hbWVcclxuICAgICAgICAgICAgaWYgKGYuZmllbGRUeXBlID09IFwiRW51bVwiIHx8IGYuZmllbGRUeXBlID09IFwiRW51bVNpbmdsZVVkdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRlBhdGggPSB0aGlzLmV4dHJhY3RGaWVsZFBhdGgoZik7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNmID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChzaG93Q3VzdG9tRmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6c5a2X5q615LiN5Zyo5bey6YWN572u5a2X5q615YiX6KGo5Lit5YiZ6Lez6L+HXHJcbiAgICAgICAgICAgICAgICAgICAgc2YgPSBzZWxlY3RlZEZpZWxkcy5maW5kKChzZmllbGQpID0+IHNmaWVsZC5maWVsZFBhdGggPT0gdGVtcEZQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2YgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmLnNob3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZiA9IHRoaXMuc2V0RXh0ZW5kUHJvcHMoZiwgc2YsIHRlbXBGUGF0aCArIFwiLk5hbWVcIikgYXMgQmlsbFNjaGVtYVN1YkZpZWxkO1xyXG5cclxuICAgICAgICAgICAgICAgIGZmaWVsZHMucHVzaChmKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmLkdldFN1YkZpZWxkTGlzdCgpICE9IG51bGwgJiYgZi5HZXRTdWJGaWVsZExpc3QoKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmZmllbGRzLnB1c2goLi4udGhpcy5leHRyYWN0RkZpZWxkcyhmLkdldFN1YkZpZWxkTGlzdCgpLCBzZWxlY3RlZEZpZWxkcywgc2hvd0N1c3RvbUZpZWxkcykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcEZQYXRoID0gdGhpcy5leHRyYWN0RmllbGRQYXRoKGYpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzZiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd0N1c3RvbUZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOWtl+auteS4jeWcqOW3sumFjee9ruWtl+auteWIl+ihqOS4reWImei3s+i/h1xyXG4gICAgICAgICAgICAgICAgICAgIHNmID0gc2VsZWN0ZWRGaWVsZHMuZmluZCgoc2ZpZWxkKSA9PiBzZmllbGQuZmllbGRQYXRoID09IHRlbXBGUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNmID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZi5zaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGYgPSB0aGlzLnNldEV4dGVuZFByb3BzKGYsIHNmLCB0ZW1wRlBhdGgpIGFzIEJpbGxTY2hlbWFTdWJGaWVsZDtcclxuXHJcbiAgICAgICAgICAgICAgICBmZmllbGRzLnB1c2goZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZmaWVsZHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTlrprmnInlrZDmlbDmja7nmoTmnaHku7bkuLrvvJrlrZDooajlj6/mmL7npLrvvIzkuJTlrZDooajmnInmlbDmja5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGhhc0NoaWxkRGF0YShyb3c6IEJpbGxEYXRhUm93LCBiaWxsSW5mbzogQmlsbEluZm8pIHtcclxuICAgICAgICBsZXQgaGFzQ2hpbGREYXRhID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuZ2V0QmlsbFRyYWNrZXJTY2hlbWEoYmlsbEluZm8pO1xyXG4gICAgICAgIGxldCBjaGlsZHJlbiA9IHJvdy5HZXRDaGlsZFRhYmxlTGlzdCgpO1xyXG4gICAgICAgIGZvciAobGV0IGMgb2YgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgbGV0IHRhYmxlU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgaGFzUm93cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgdGFibGUgPSBzY2hlbWEgJiYgc2NoZW1hW2MudGFibGVOYW1lXTtcclxuICAgICAgICAgICAgaWYgKHRhYmxlICE9IG51bGwgJiYgdGFibGUuc2hvdyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVNob3cgPSB0YWJsZS5zaG93O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g5YW85a655pegc2hvd+WxnuaAp+aDheW9olxyXG4gICAgICAgICAgICAgICAgdGFibGVTaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYy5HZXRSb3dMaXN0KCkgJiYgYy5HZXRSb3dMaXN0KCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaGFzUm93cyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaGFzQ2hpbGREYXRhID0gdGFibGVTaG93ICYmIGhhc1Jvd3M7XHJcbiAgICAgICAgICAgIGlmIChoYXNDaGlsZERhdGEgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc0NoaWxkRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmllbGRWYWx1ZShmOiBCaWxsU2NoZW1hRmllbGRCYXNlLCByZGZtOiB7IFtrZXk6IHN0cmluZ106IEJpbGxEYXRhRmllbGQ7IH0sIHdob2xlRmllbGRzPzogQmlsbFNjaGVtYUZpZWxkQmFzZVtdKSB7XHJcbiAgICAgICAgbGV0IGZpZWxkcyA9IGYuZmllbGRQYXRoID8gZi5maWVsZFBhdGguc3BsaXQoXCIuXCIpIDogW2YuZmllbGROYW1lXTtcclxuXHJcbiAgICAgICAgbGV0IGJkZjogQmlsbERhdGFGaWVsZCB8IEJpbGxEYXRhU3ViRmllbGQgPSBmaWVsZHMgJiYgcmRmbVtmaWVsZHNbMF1dO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBiZGYgIT0gbnVsbCAmJiBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBiZGYuR2V0U3ViRmllbGRNYXAoKTtcclxuICAgICAgICAgICAgaWYgKHRlbXAgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmRmID0gdGVtcFtmaWVsZHNbaV1dO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGV4dFZhbHVlID0gYmRmID8gYmRmLkdldFRleHRWYWx1ZSgpIDogXCJcIjtcclxuICAgICAgICBpZiAodGV4dFZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmLmRhdGFUeXBlID09IERhdGFUeXBlLlN0cmluZykge1xyXG4gICAgICAgICAgICBmLmZpZWxkVmFsdWUgPSB0ZXh0VmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0VmFsdWUgfHwgXCJcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKGYuZGF0YVR5cGUgPT0gRGF0YVR5cGUuRGVjaW1hbCkge1xyXG4gICAgICAgICAgICBsZXQgc2NhbGUgPSBmLnNjYWxlO1xyXG4gICAgICAgICAgICBpZiAoZi5mb3JtYXRJbmZvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmLmZvcm1hdEluZm8uc2NhbGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlID0gZi5mb3JtYXRJbmZvLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGYuZm9ybWF0SW5mby5lbmFibGVTY2FsZUV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZi5mb3JtYXRJbmZvLnNjYWxlRXhwcmVzc2lvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlRmllbGQgPSB0aGlzLmdldEZpZWxkSW5GaWVsZHMod2hvbGVGaWVsZHMsIGYuZm9ybWF0SW5mby5zY2FsZUV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXAgPSBzY2FsZUZpZWxkICYmIHBhcnNlSW50KFN0cmluZyh0aGlzLmdldEZpZWxkVmFsdWUoc2NhbGVGaWVsZCwgcmRmbSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgdG1wID0gcGFyc2VJbnQodGhpcy5nZXRGaWVsZFZhbHVlSW5GaWVsZHNXaXRoVmFsdWUoZXh0YWN0ZWRGaWVsZHMsIGYuZm9ybWF0SW5mby5zY2FsZUV4cHJlc3Npb24pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcCAhPSBudWxsICYmICFpc05hTih0bXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IHRtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmLmZpZWxkVmFsdWUgPSBwYXJzZUZsb2F0KFN0cmluZyh0ZXh0VmFsdWUpKTtcclxuICAgICAgICAgICAgbGV0IGRlYyA9IHBhcnNlRmxvYXQoU3RyaW5nKHRleHRWYWx1ZSkpLnRvRml4ZWQoc2NhbGUpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWMgfHwgXCJcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKGYuZGF0YVR5cGUgPT0gRGF0YVR5cGUuQm9vbGVhbikge1xyXG4gICAgICAgICAgICBpZiAodGV4dFZhbHVlID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGYuZmllbGRWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGYuZmllbGRWYWx1ZSA9IEpTT04ucGFyc2UodGV4dFZhbHVlKSBhcyBib29sZWFuO1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0VmFsdWUpIGFzIGJvb2xlYW47XHJcbiAgICAgICAgfSBlbHNlIGlmIChmLmRhdGFUeXBlID09IERhdGFUeXBlLkRhdGVUaW1lKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5EYXRlVGltZUZyb21TdHJpbmcodGV4dFZhbHVlKTtcclxuICAgICAgICAgICAgbGV0IGZvcm1hdHRlciA9IFwieXl5eS1NTS1kZFwiO1xyXG4gICAgICAgICAgICBpZiAoZi5maWVsZFR5cGUgPT0gXCJEYXRlVGltZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIgPSBmLmZvcm1hdEluZm8gJiYgZi5mb3JtYXRJbmZvLmRhdGVGb3JtYXR0ZXIgfHwgXCJ5eXl5LU1NLWRkIEhIOm1tOnNzLlNTU1wiO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGYuZmllbGRUeXBlID09IFwiRGF0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIgPSBmLmZvcm1hdEluZm8gJiYgZi5mb3JtYXRJbmZvLmRhdGVGb3JtYXR0ZXIgfHwgXCJ5eXl5LU1NLWRkXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIgPSBmLmZvcm1hdEluZm8gJiYgZi5mb3JtYXRJbmZvLmRhdGVGb3JtYXR0ZXIgfHwgXCJ5eXl5LU1NLWRkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZi5maWVsZFZhbHVlID0gZGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUZvcm1hdChkYXRlLCBmb3JtYXR0ZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGYuZmllbGRWYWx1ZSA9IHRleHRWYWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHRWYWx1ZSB8fCBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmllbGRJbkZpZWxkcyhmaWVsZHM6IEJpbGxTY2hlbWFGaWVsZEJhc2VbXSwgZnVsbFBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIGxldCB2ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBmdiBvZiBmaWVsZHMpIHtcclxuICAgICAgICAgICAgd2hpbGUgKGZ2LmF0dGFjaGVkRmllbGQpIHtcclxuICAgICAgICAgICAgICAgIGZ2ID0gZnYuYXR0YWNoZWRGaWVsZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByb290RnYgPSBmdiBhcyBCaWxsU2NoZW1hRmllbGQ7XHJcbiAgICAgICAgICAgIHJvb3RGdi5mdWxsUGF0aCA9IGZ1bGxQYXRoUHJlZml4ICsgcm9vdEZ2LmF0dGFjaGVkVGFibGUudGFibGVOYW1lICsgXCIuXCIgKyByb290RnYuZmllbGRQYXRoO1xyXG4gICAgICAgICAgICBpZiAoZnVsbFBhdGggPT0gcm9vdEZ2LmZ1bGxQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICB2ID0gcm9vdEZ2O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZpZWxkVmFsdWVJbkZpZWxkc1dpdGhWYWx1ZShmaWVsZHNXaXRoVmFsdWU6IEJpbGxTY2hlbWFGaWVsZEJhc2VbXSwgZnVsbFBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIGxldCB2ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBmdiBvZiBmaWVsZHNXaXRoVmFsdWUpIHtcclxuICAgICAgICAgICAgd2hpbGUgKGZ2LmF0dGFjaGVkRmllbGQpIHtcclxuICAgICAgICAgICAgICAgIGZ2ID0gZnYuYXR0YWNoZWRGaWVsZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByb290RnYgPSBmdiBhcyBCaWxsU2NoZW1hRmllbGQ7XHJcbiAgICAgICAgICAgIHJvb3RGdi5mdWxsUGF0aCA9IGZ1bGxQYXRoUHJlZml4ICsgcm9vdEZ2LmF0dGFjaGVkVGFibGUudGFibGVOYW1lICsgXCIuXCIgKyByb290RnYuZmllbGRQYXRoO1xyXG4gICAgICAgICAgICBpZiAoZnVsbFBhdGggPT0gcm9vdEZ2LmZ1bGxQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICB2ID0gcm9vdEZ2LmZpZWxkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QmFzaWNJbmZvRmllbGRzV2l0aFZhbHVlKGJpbGxJbmZvOiBCaWxsSW5mbywgc2NoZW1hVGFibGU6IEJpbGxTY2hlbWFUYWJsZSwgZGF0YVRhYmxlOiBCaWxsRGF0YVRhYmxlLCBmaWx0ZXJGaWVsZHM6IGJvb2xlYW4gPSB0cnVlKTogKEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZClbXSB7XHJcbiAgICAgICAgY29uc3QgZmllbGRzV2l0aFZhbHVlOiAoQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkKVtdID0gW107XHJcbiAgICAgICAgLy8g5Y2V5o2u6L+96Liq6YWN572uXHJcbiAgICAgICAgbGV0IGJ0czogQmlsbFRyYWNraW5nU2V0dGluZ3MgPSBuZXcgQmlsbFRyYWNraW5nU2V0dGluZ3MoKTtcclxuICAgICAgICBpZiAoYmlsbEluZm8gJiYgYmlsbEluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgYnRzLkxvYWRGcm9tSnNvbihiaWxsSW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLmdldEJpbGxUcmFja2VyU2NoZW1hKGJpbGxJbmZvKTtcclxuICAgICAgICBsZXQgc2VsZWN0ZWRGaWVsZHMgPSBzY2hlbWEgJiYgc2NoZW1hW3NjaGVtYVRhYmxlLnRhYmxlTmFtZV0gJiYgc2NoZW1hW3NjaGVtYVRhYmxlLnRhYmxlTmFtZV0uZmllbGRzO1xyXG4gICAgICAgIHNlbGVjdGVkRmllbGRzID0gc2VsZWN0ZWRGaWVsZHMgPyBzZWxlY3RlZEZpZWxkcyA6IFtdO1xyXG4gICAgICAgIGxldCBzaG93Q3VzdG9tRmllbGRzID0gYnRzLmJpbGxUcmFja2luZ0RhdGFTaG93bk1vZGUgPT09IEJpbGxUcmFja2luZ0RhdGFTaG93bk1vZGUuQ1VTVE9NRklFTEQ7XHJcblxyXG4gICAgICAgIC8vIOaJgOacieWtl+autVxyXG4gICAgICAgIGNvbnN0IGZzID0gc2NoZW1hVGFibGUuZ2V0RmllbGRMaXN0KCk7XHJcbiAgICAgICAgY29uc3QgciA9IGRhdGFUYWJsZS5HZXRSb3dMaXN0KClbMF07XHJcbiAgICAgICAgLy8g5Li76KGo5a2X5q61XHJcbiAgICAgICAgY29uc3QgcmRmbSA9IHIuR2V0RmllbGRNYXAoKTtcclxuXHJcbiAgICAgICAgLy8g5o+Q5Y+W5bGV56S65a2X5q61XHJcbiAgICAgICAgY29uc3QgZmZzID0gdGhpcy5leHRyYWN0RkZpZWxkcyhmcywgc2VsZWN0ZWRGaWVsZHMsIHNob3dDdXN0b21GaWVsZHMpO1xyXG4gICAgICAgIC8vIOiOt+WPluWtl+auteWAvFxyXG4gICAgICAgIC8vIOWFiOino+aekOWFtuS7luexu+Wei+Wtl+autVxyXG4gICAgICAgIGNvbnN0IGRlY2ltYWxGZnMgPSBbXTtcclxuICAgICAgICBmZnMuZm9yRWFjaChmZiA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmZi5kYXRhVHlwZSA9PSBEYXRhVHlwZS5EZWNpbWFsKSB7XHJcbiAgICAgICAgICAgICAgICBkZWNpbWFsRmZzLnB1c2goZmYpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmYuZmllbGRWYWx1ZSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShmZiwgcmRmbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDlho3op6PmnpDmta7ngrnmlbDlrZfmrrVcclxuICAgICAgICBkZWNpbWFsRmZzLmZvckVhY2goZmYgPT4ge1xyXG4gICAgICAgICAgICBmZi5maWVsZFZhbHVlID0gdGhpcy5nZXRGaWVsZFZhbHVlKGZmLCByZGZtLCBmcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZmllbGRzV2l0aFZhbHVlLnB1c2goLi4uZmZzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkc1dpdGhWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RXh0ZW5kUHJvcHMoZjogQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkLCBzZjogQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkLCBmaWVsZFBhdGg6IHN0cmluZywgcmRmbT86IHsgW2tleTogc3RyaW5nXTogQmlsbERhdGFGaWVsZDsgfSkge1xyXG4gICAgICAgIGYuY2FwdGlvblBhdGggPSB0aGlzLmV4dHJhY3RDYXB0aW9uUGF0aChmKTtcclxuICAgICAgICBmLmZpZWxkUGF0aCA9IGZpZWxkUGF0aDtcclxuICAgICAgICBpZiAoc2YpIHtcclxuICAgICAgICAgICAgZi5kaXNwbGF5TmFtZSA9IHNmLmRpc3BsYXlOYW1lO1xyXG4gICAgICAgICAgICBmLmkxOG5Db2xzID0gc2YuaTE4bkNvbHM7XHJcbiAgICAgICAgICAgIGYuZm9ybWF0SW5mbyA9IHNmLmZvcm1hdEluZm87XHJcbiAgICAgICAgICAgIGYub3JkZXIgPSBzZi5vcmRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJkZm0pIHtcclxuICAgICAgICAgICAgZi5maWVsZFZhbHVlID0gdGhpcy5nZXRGaWVsZFZhbHVlKGYsIHJkZm0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGY7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlrZfmrrXliJfooajmjIlvcmRlcuWxnuaAp+aOkuW6j1xyXG4gICAgICogQHBhcmFtIGZpZWxkc1dpdGhWYWx1ZSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc29ydEZpZWxkc0J5T3JkZXIoZmllbGRzV2l0aFZhbHVlOiAoQmlsbFNjaGVtYUZpZWxkIHwgQmlsbFNjaGVtYVN1YkZpZWxkKVtdKTogKEJpbGxTY2hlbWFGaWVsZCB8IEJpbGxTY2hlbWFTdWJGaWVsZClbXSB7XHJcbiAgICAgICAgcmV0dXJuIGZpZWxkc1dpdGhWYWx1ZS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhLm9yZGVyICE9IG51bGwgJiYgYi5vcmRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5vcmRlciAhPSBudWxsICYmIGIub3JkZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGEub3JkZXIgPT0gbnVsbCAmJiBiLm9yZGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkYXRlRm9ybWF0KGRhdGU6IERhdGUsIGZtdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmV0O1xyXG4gICAgICAgIGNvbnN0IG9wdCA9IHtcclxuICAgICAgICAgICAgXCJ5K1wiOiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkudG9TdHJpbmcoKSwgICAgICAgIC8vIOW5tFxyXG4gICAgICAgICAgICBcIk0rXCI6IChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKS50b1N0cmluZygpLCAgICAgLy8g5pyIXHJcbiAgICAgICAgICAgIFwiZCtcIjogZGF0ZS5nZXRVVENEYXRlKCkudG9TdHJpbmcoKSwgICAgICAgICAgICAvLyDml6VcclxuICAgICAgICAgICAgXCJIK1wiOiBkYXRlLmdldFVUQ0hvdXJzKCkudG9TdHJpbmcoKSwgICAgICAgICAgIC8vIOaXtlxyXG4gICAgICAgICAgICBcIm0rXCI6IGRhdGUuZ2V0VVRDTWludXRlcygpLnRvU3RyaW5nKCksICAgICAgICAgLy8g5YiGXHJcbiAgICAgICAgICAgIFwicytcIjogZGF0ZS5nZXRVVENTZWNvbmRzKCkudG9TdHJpbmcoKSwgICAgICAgICAvLyDnp5JcclxuICAgICAgICAgICAgXCJTK1wiOiBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpLnRvU3RyaW5nKCksICAgIC8vIOenklxyXG4gICAgICAgICAgICAvLyDmnInlhbbku5bmoLzlvI/ljJblrZfnrKbpnIDmsYLlj6/ku6Xnu6fnu63mt7vliqDvvIzlv4XpobvovazljJbmiJDlrZfnrKbkuLJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGsgaW4gb3B0KSB7XHJcbiAgICAgICAgICAgIHJldCA9IG5ldyBSZWdFeHAoXCIoXCIgKyBrICsgXCIpXCIpLmV4ZWMoZm10KTtcclxuICAgICAgICAgICAgaWYgKHJldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm10ID0gZm10LnJlcGxhY2UocmV0WzFdLCAocmV0WzFdLmxlbmd0aCA9PSAxKSA/IChvcHRba10pIDogKHRoaXMubXlQYWRTdGFydChvcHRba10sIHJldFsxXS5sZW5ndGgsIFwiMFwiKSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmbXQgPSBmbXQucmVwbGFjZShyZXRbMV0sIChyZXRbMV0ubGVuZ3RoID09IDEpID8gKG9wdFtrXSkgOiAob3B0W2tdLnBhZFN0YXJ0KHJldFsxXS5sZW5ndGgsIFwiMFwiKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG15UGFkU3RhcnQoc3JjOiBzdHJpbmcsIHRhcmdldExlbmd0aDogbnVtYmVyLCBwYWRTdHJpbmc6IHN0cmluZykge1xyXG4gICAgICAgIHRhcmdldExlbmd0aCA9IHRhcmdldExlbmd0aCA+PiAwOyAvL2Zsb29yIGlmIG51bWJlciBvciBjb252ZXJ0IG5vbi1udW1iZXIgdG8gMDtcclxuICAgICAgICBwYWRTdHJpbmcgPSBTdHJpbmcodHlwZW9mIHBhZFN0cmluZyAhPT0gJ3VuZGVmaW5lZCcgPyBwYWRTdHJpbmcgOiAnICcpO1xyXG4gICAgICAgIGlmIChzcmMubGVuZ3RoID4gdGFyZ2V0TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoc3JjKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSBzcmMubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0TGVuZ3RoID4gcGFkU3RyaW5nLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcGFkU3RyaW5nICs9IHBhZFN0cmluZy5yZXBlYXQodGFyZ2V0TGVuZ3RoIC8gcGFkU3RyaW5nLmxlbmd0aCk7IC8vYXBwZW5kIHRvIG9yaWdpbmFsIHRvIGVuc3VyZSB3ZSBhcmUgbG9uZ2VyIHRoYW4gbmVlZGVkXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhZFN0cmluZy5zbGljZSgwLCB0YXJnZXRMZW5ndGgpICsgU3RyaW5nKHNyYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Kej5p6Q5a2X5q615ZCN56ewXHJcbiAgICAgKiBAcGFyYW0gZiBcclxuICAgICAqIEBwYXJhbSBsYW5nQ29kZSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RmllbGRMYWJlbChmOiBCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQsIGxhbmdDb2RlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIChsYW5nQ29kZSAmJiBmLmkxOG5Db2xzICYmIGYuaTE4bkNvbHMuY29sSTE4blZhbHVlcy5kaXNwbGF5TmFtZSAmJlxyXG4gICAgICAgICAgICBmLmkxOG5Db2xzLmNvbEkxOG5WYWx1ZXMuZGlzcGxheU5hbWVbbGFuZ0NvZGVdKSB8fCBmLmRpc3BsYXlOYW1lIHx8IGYuY2FwdGlvblBhdGggfHwgZi5jYXB0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6PmnpDooajlkI3np7BcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFRhYmxlTGFiZWwoYmlsbEluZm86IEJpbGxJbmZvLCBzY2hlbWFUYWJsZTogQmlsbFNjaGVtYVRhYmxlLCBsYW5nQ29kZT86IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuZ2V0QmlsbFRyYWNrZXJTY2hlbWEoYmlsbEluZm8pO1xyXG4gICAgICAgIGxldCB0YWJsZSA9IHNjaGVtYSAmJiBzY2hlbWFbc2NoZW1hVGFibGUudGFibGVOYW1lXTtcclxuICAgICAgICBpZiAodGFibGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBpMThuQ29scyA9IHRhYmxlLmkxOG5Db2xzO1xyXG4gICAgICAgICAgICBjb25zdCB0bXAgPSAobGFuZ0NvZGUgJiYgaTE4bkNvbHMgJiYgaTE4bkNvbHMuY29sSTE4blZhbHVlcy5kaXNwbGF5TmFtZSAmJiBpMThuQ29scy5jb2xJMThuVmFsdWVzLmRpc3BsYXlOYW1lW2xhbmdDb2RlXSkgfHwgdGFibGUuZGlzcGxheU5hbWUgfHwgdGFibGUuY2FwdGlvbiB8fCB0YWJsZS5jb2RlO1xyXG4gICAgICAgICAgICByZXR1cm4gdG1wO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWFUYWJsZS5jYXB0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluino+aekOWPr+WxleekuuWtkOihqFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q2hpbGRUYWJsZXMoYmlsbEluZm86IEJpbGxJbmZvLCBzY2hlbWFUYWJsZTogQmlsbFNjaGVtYVRhYmxlKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogQmlsbFNjaGVtYVRhYmxlW10gPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5nZXRCaWxsVHJhY2tlclNjaGVtYShiaWxsSW5mbyk7XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzY2hlbWFUYWJsZS5HZXRDaGlsZFRhYmxlTGlzdCgpO1xyXG4gICAgICAgIGNoaWxkcmVuICYmIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0cmFja2VyVGFibGUgPSBzY2hlbWEgJiYgc2NoZW1hW2NoaWxkLnRhYmxlTmFtZV07XHJcbiAgICAgICAgICAgIGlmICh0cmFja2VyVGFibGUgIT0gbnVsbCAmJiB0cmFja2VyVGFibGUuc2hvdyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhY2tlclRhYmxlLnNob3cgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLm9yZGVyID0gdHJhY2tlclRhYmxlLm9yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOWFvOWuueaXoHNob3flsZ7mgKfmg4XlvaJcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXN1bHQgPSB0aGlzLnNvcnRUYWJsZXNCeU9yZGVyKHJlc3VsdCk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDooajmjIlzb3J05a2X5q615o6S5bqPXHJcbiAgICAgKiBAcGFyYW0gc2NoZW1hVGFibGVzIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzb3J0VGFibGVzQnlPcmRlcihzY2hlbWFUYWJsZXM6IEJpbGxTY2hlbWFUYWJsZVtdKTogQmlsbFNjaGVtYVRhYmxlW10ge1xyXG4gICAgICAgIHJldHVybiBzY2hlbWFUYWJsZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS5vcmRlciAhPSBudWxsICYmIGIub3JkZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGEub3JkZXIgIT0gbnVsbCAmJiBiLm9yZGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhLm9yZGVyID09IG51bGwgJiYgYi5vcmRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6Kej5p6QYmlsbFRyYWNrZXJTY2hlbWFcclxuICAgICAqIEBwYXJhbSBiaWxsSW5mbyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEJpbGxUcmFja2VyU2NoZW1hKGJpbGxJbmZvOiBCaWxsSW5mbyk6IEJpbGxUcmFja2VyU2NoZW1hIHtcclxuICAgICAgICBsZXQgYnRzOiBCaWxsVHJhY2tpbmdTZXR0aW5ncyA9IG5ldyBCaWxsVHJhY2tpbmdTZXR0aW5ncygpO1xyXG4gICAgICAgIGlmIChiaWxsSW5mbyAmJiBiaWxsSW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncykge1xyXG4gICAgICAgICAgICBidHMuTG9hZEZyb21Kc29uKGJpbGxJbmZvLmJpbGxUcmFja2luZ1NldHRpbmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaWVsZENvbnRlbnQgPSBidHMuY3VzdG9tRmllbGRDb250ZW50O1xyXG4gICAgICAgIGxldCBmaWVsZENvbmZpZzogQmlsbFRyYWNrZXJTY2hlbWFGaWVsZENvbnRlbnQgPSBmaWVsZENvbnRlbnQgJiYgKHR5cGVvZiBmaWVsZENvbnRlbnQgPT0gXCJvYmplY3RcIiA/IGZpZWxkQ29udGVudCA6IEpTT04ucGFyc2UoZmllbGRDb250ZW50KSk7XHJcbiAgICAgICAgbGV0IHNjaGVtYSA9IGZpZWxkQ29uZmlnICYmIGZpZWxkQ29uZmlnLnNjaGVtYTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcclxuICAgIH1cclxufSJdfQ==