/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-target-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, ComponentRef, Optional } from '@angular/core';
import { Observable, from, of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { BIF_UISTATE_KEY_CREATION_RESULT } from '../config/bif-form-constants';
import { AbstractUiService } from './abstract-ui-service';
import { BifDataService } from './bif-data.service';
import { PullSelectorComponent } from '../components/pull-selector/pull-selector.component';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
import { FormBillCreationProcessExecutorResult } from '../../entity/form-rest/FormBillCreationProcessExecutorResult';
import { MessagerService } from '@farris/ui-messager';
import { RuntimeFrameworkService } from '@farris/command-services';
import { judgeBrowserType } from '../../utils/BrowserUtil';
import { TranslateService } from "@ngx-translate/core";
import { AbstractBifDataSelectorService } from './bif-data-selector.service';
export class BifTargetUiService extends AbstractUiService {
    /**
     * @param {?} dataService
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} messager
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     * @param {?} runtimeFrameworkService
     */
    constructor(dataService, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) {
        super(frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService);
        this.dataService = dataService;
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.messager = messager;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        this.uiStateKeyCreationResult = BIF_UISTATE_KEY_CREATION_RESULT;
    }
    /**
     * 参照时打开生单规则选择器
     * @param {?} downVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    openBillCreationProcessSelector4Pull(downVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.downBillVoId = downVoId;
        args.manualCreationMode = ManualCreationMode.Pull;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PullSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 特定参照时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    openBillCreationProcessSelector4SpecificPull(upBillVoId, downVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPull;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PullSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 打开来源单据选择器
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @param {?=} extParams
     * @return {?}
     */
    openSourceDataSelector4Pull(formSettings, modalOptions, extParams) {
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.localePipe.transform("sourceDataSelector") : modalOptions.title;
        /** @type {?} */
        let cmpR = null;
        if (formSettings == null || formSettings.sourceDataSelectorModuleUrl == null) // 没有配置时加载默认通用单据选择器
         {
            throw "暂无默认实现，请使用自定义来源单据选择器";
            // let cmpF: ComponentFactory<SourceDataSelectorComponent> = this.cfr.resolveComponentFactory(SourceDataSelectorComponent);
            // let inj: Injector = Injector.create([
            // ], this.injector);
            // cmpR = cmpF.create(inj);
            // this.configModalButtons(modalOptions, cmpR);
            // cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            // return cmpR.instance.subject4EntityDatas.asObservable();
        }
        else //加载自定义来源单据选择器 
         {
            // return from(System.import(formSettings.sourceDataSelectorModuleUrl.substring(0, formSettings.sourceDataSelectorModuleUrl.indexOf("#")) + ".js")).pipe(
            /** @type {?} */
            let moduleF$ = null;
            if (formSettings.sourceDataSelectorAppId != null) //配置appId时
             {
                moduleF$ = from(System.import(formSettings.sourceDataSelectorModuleUrl.toLowerCase()).then((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => m))).pipe(switchMap((/**
                 * @param {?} m
                 * @return {?}
                 */
                (m) => {
                    for (let key in m) {
                        return of(m[key]);
                    }
                    return of(null);
                })));
            }
            else //只配置url时 
             {
                moduleF$ = from(this.loader.load(formSettings.sourceDataSelectorModuleUrl));
            }
            return moduleF$.pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            (moduleFactory) => {
                /** @type {?} */
                const moduleRef = moduleFactory.create(this.frameContext.root.injector);
                if (moduleRef.instance.createSourceDataSelector && moduleRef.instance.createSourceDataSelector instanceof Function) //module上定义createSourceDataSelector方法
                 {
                    /** @type {?} */
                    const cmpR$ = moduleRef.instance.createSourceDataSelector(this.frameContext.root.injector, null, extParams);
                    if (cmpR$ instanceof Observable) {
                        return cmpR$.pipe(switchMap((/**
                         * @param {?} componentRef
                         * @return {?}
                         */
                        (componentRef) => {
                            cmpR = componentRef;
                            this.configModalButtons(modalOptions, cmpR);
                            cmpR.instance.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
                            return cmpR.instance.subject4EntityDatas.asObservable();
                        })));
                    }
                    else if (cmpR$ instanceof ComponentRef) {
                        cmpR = cmpR$;
                        this.configModalButtons(modalOptions, cmpR);
                        cmpR.instance.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
                        return cmpR.instance.subject4EntityDatas.asObservable();
                    }
                }
                else //module上未定义时尝试寻找RootComponent类
                 {
                    /** @type {?} */
                    const translate = moduleRef.injector.get(TranslateService);
                    return translate.getTranslation(this.localeId).pipe(switchMap((/**
                     * @param {?} data
                     * @return {?}
                     */
                    (data) => {
                        translate.setTranslation(this.localeId, data);
                        translate.defaultLang = this.localeId;
                        translate.currentLang = this.localeId;
                        return this.getEntityData(moduleRef, formSettings, modalOptions, extParams);
                    })), catchError((/**
                     * @param {?} err
                     * @return {?}
                     */
                    (err) => {
                        console.error(err);
                        return this.getEntityData(moduleRef, formSettings, modalOptions, extParams);
                    })));
                }
            })));
        }
    }
    /**
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    getFormBillCreationProcessExecutorResult() {
        //取得tabId为[AppId]_[AppEntrance]_[tabId]
        /** @type {?} */
        let tabId = this.runtimeFrameworkService.tabId;
        /** @type {?} */
        let dataId = tabId.substr(tabId.length - 36)
        // console.log(tabId);
        // console.log(dataId);
        ;
        // console.log(tabId);
        // console.log(dataId);
        /** @type {?} */
        const browser = judgeBrowserType();
        //IE11浏览器从localStorage取值后并删除, 并存入UIState
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            /** @type {?} */
            const tmp = window.top.localStorage.getItem(dataId);
            window.top.localStorage.removeItem(dataId);
            this.frameContext.root.uiState.setPropertyValue(this.uiStateKeyCreationResult, tmp);
        }
        /** @type {?} */
        let resTemp = this.frameContext.root.uiState[this.uiStateKeyCreationResult];
        if (resTemp == null) {
            throw "FormBillCreationProcessExecutorResult is null";
        }
        /** @type {?} */
        const result = new FormBillCreationProcessExecutorResult();
        if (typeof resTemp == "string") {
            result.LoadFromJson(resTemp);
        }
        else if (typeof resTemp == "object") {
            result.LoadFromJsonObject(resTemp);
        }
        else {
            throw "不合法的类型";
        }
        return result;
    }
    /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} service
     * @return {?}
     */
    configModalButtonsByService(modalOptions, service) {
        modalOptions.buttons = [
            {
                text: this.localePipe.transform("confirm"),
                cls: "btn btn-primary",
                handle: service.clickOk4BifSelector,
            },
            {
                text: this.localePipe.transform("cancel"),
                cls: "btn btn-secondary",
                handle: service.clickClose4BifSelector,
            }
        ];
        modalOptions.showButtons = true;
    }
    /**
     * @protected
     * @param {?} moduleRef
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @param {?=} extParams
     * @return {?}
     */
    getEntityData(moduleRef, formSettings, modalOptions, extParams) {
        /** @type {?} */
        let cmpF = null;
        /** @type {?} */
        let cmpR = null;
        /** @type {?} */
        let bootstrapComponentSelector = "app-rootcomponent";
        /** @type {?} */
        let bootstrapComponent = null;
        /** @type {?} */
        let facMap = moduleRef.componentFactoryResolver['_factories'];
        if (extParams && extParams.bootstrapComponentSelector) //指定了根组件selector
         {
            bootstrapComponentSelector = extParams.bootstrapComponentSelector;
            facMap.forEach((/**
             * @param {?} value
             * @param {?} key
             * @param {?} map
             * @return {?}
             */
            (value, key, map) => {
                /** @type {?} */
                const selector = value.selector;
                if (bootstrapComponentSelector == selector) {
                    cmpF = moduleRef.componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (key)));
                    cmpR = cmpF.create(moduleRef.injector);
                }
            }));
        }
        else //未指定根组件selector 
         {
            bootstrapComponent = moduleRef['_bootstrapComponents'][0];
            if (bootstrapComponent) //先找bootstrapComponent数组有无组件
             {
                cmpF = moduleRef.componentFactoryResolver.resolveComponentFactory(bootstrapComponent);
                cmpR = cmpF.create(moduleRef.injector);
            }
            else //没有则从facMap中查找默认的app-rootcomponent
             {
                facMap.forEach((/**
                 * @param {?} value
                 * @param {?} key
                 * @param {?} map
                 * @return {?}
                 */
                (value, key, map) => {
                    /** @type {?} */
                    const selector = value.selector;
                    if (bootstrapComponentSelector == selector) {
                        cmpF = moduleRef.componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (key)));
                        cmpR = cmpF.create(moduleRef.injector);
                    }
                }));
            }
        }
        /** @type {?} */
        const dataSelectorService = cmpR.injector.get(AbstractBifDataSelectorService, null);
        if (dataSelectorService != null) // 有AbstractBifDataSelectorService的provider时
         {
            this.configModalButtonsByService(modalOptions, dataSelectorService);
            dataSelectorService.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
            return dataSelectorService.subject4EntityDatas.asObservable();
        }
        else //没有则从组件上寻找相应属性
         {
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4EntityDatas.asObservable();
        }
    }
}
BifTargetUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifTargetUiService.ctorParameters = () => [
    { type: BifDataService },
    { type: FrameContext },
    { type: BsModalService },
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifTargetUiService.prototype.uiStateKeyCreationResult;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.dataService;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.loader;
    /** @type {?} */
    BifTargetUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlmLXRhcmdldC11aS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlmLW1hbnVhbC1jcmVhdGlvbi9zZXJ2aWNlL2JpZi10YXJnZXQtdWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFtQixRQUFRLEVBQWlDLE1BQU0sZUFBZSxDQUFDO0FBQ2pNLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFlLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXBFLE9BQU8sRUFBRSxZQUFZLEVBQVUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFnQixNQUFNLGtCQUFrQixDQUFDO0FBS2hFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUc1RixPQUFPLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUN2SCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMvRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUNySCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBC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Ozs7Ozs7O0lBWGIsc0RBQW9GOzs7OztJQUdoRix5Q0FBcUM7Ozs7O0lBQ3JDLDBDQUFvQzs7Ozs7SUFDcEMsMENBQXNDOzs7OztJQUN0QyxzQ0FBbUM7Ozs7O0lBQ25DLHNDQUE0Qjs7Ozs7SUFDNUIsaUNBQXVDOzs7OztJQUN2QyxvQ0FBdUM7O0lBQ3ZDLHNDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIE5nTW9kdWxlRmFjdG9yeUxvYWRlciwgSW5qZWN0LCBMT0NBTEVfSUQsIENvbXBvbmVudFJlZiwgTmdNb2R1bGVGYWN0b3J5LCBPcHRpb25hbCwgTmdNb2R1bGVSZWYsIENvbXBvbmVudEZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwLCBzd2l0Y2hNYXBUbywgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCwgRW50aXR5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSwgTW9kYWxPcHRpb25zIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcblxyXG5pbXBvcnQgeyBGb3JtU2V0dGluZ3MgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgSVJ0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeCB9IGZyb20gXCJAZWRwLWJpZi9jb21tb24tYXBpXCI7XHJcblxyXG5pbXBvcnQgeyBCSUZfVUlTVEFURV9LRVlfQ1JFQVRJT05fUkVTVUxUIH0gZnJvbSAnLi4vY29uZmlnL2JpZi1mb3JtLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IEFic3RyYWN0VWlTZXJ2aWNlIH0gZnJvbSAnLi9hYnN0cmFjdC11aS1zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmlmRGF0YVNlcnZpY2UgfSBmcm9tICcuL2JpZi1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQdWxsU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3B1bGwtc2VsZWN0b3IvcHVsbC1zZWxlY3Rvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBJQmlmRGF0YVNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZS9JQmlmRGF0YVNlbGVjdG9yQ29tcG9uZW50JztcclxuaW1wb3J0IHsgSUJpZkRhdGFTZWxlY3Rvck1vZHVsZSB9IGZyb20gJy4uL2Jhc2UvSUJpZkRhdGFTZWxlY3Rvck1vZHVsZSc7XHJcbmltcG9ydCB7IEZvcm1HZXRCaWxsQ3JlYXRpb25Qcm9jZXNzRW50aXR5RXhBcmdzIH0gZnJvbSAnLi4vLi4vZW50aXR5L2Zvcm0tcmVzdC9Gb3JtR2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4QXJncyc7XHJcbmltcG9ydCB7IE1hbnVhbENyZWF0aW9uTW9kZSB9IGZyb20gJy4uLy4uL2VudGl0eS9mb3JtLXJlc3QvTWFudWFsQ3JlYXRpb25Nb2RlJztcclxuaW1wb3J0IHsgRm9ybUJpbGxDcmVhdGlvblByb2Nlc3NFeGVjdXRvclJlc3VsdCB9IGZyb20gJy4uLy4uL2VudGl0eS9mb3JtLXJlc3QvRm9ybUJpbGxDcmVhdGlvblByb2Nlc3NFeGVjdXRvclJlc3VsdCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBSdW50aW1lRnJhbWV3b3JrU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcyc7XHJcbmltcG9ydCB7IGp1ZGdlQnJvd3NlclR5cGUgfSBmcm9tICcuLi8uLi91dGlscy9Ccm93c2VyVXRpbCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciwgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gXCJAbmd4LXRyYW5zbGF0ZS9jb3JlXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0QmlmRGF0YVNlbGVjdG9yU2VydmljZSB9IGZyb20gJy4vYmlmLWRhdGEtc2VsZWN0b3Iuc2VydmljZSc7XHJcblxyXG5cclxuZGVjbGFyZSB2YXIgU3lzdGVtOiBhbnk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCaWZUYXJnZXRVaVNlcnZpY2UgZXh0ZW5kcyBBYnN0cmFjdFVpU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVpU3RhdGVLZXlDcmVhdGlvblJlc3VsdDogc3RyaW5nID0gQklGX1VJU1RBVEVfS0VZX0NSRUFUSU9OX1JFU1VMVDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcm90ZWN0ZWQgZGF0YVNlcnZpY2U6IEJpZkRhdGFTZXJ2aWNlLFxyXG4gICAgICAgIHByb3RlY3RlZCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgICAgICBwcm90ZWN0ZWQgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgbWVzc2FnZXI6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByb3RlY3RlZCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcm90ZWN0ZWQgbG9hZGVyOiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsXHJcbiAgICAgICAgQEluamVjdChMT0NBTEVfSUQpIHB1YmxpYyBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgICAgIEBPcHRpb25hbCgpIHJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlOiBSdW50aW1lRnJhbWV3b3JrU2VydmljZSxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGZyYW1lQ29udGV4dCwgbW9kYWxTZXJ2aWNlLCBtZXNzYWdlciwgaW5qZWN0b3IsIGNmciwgbG9hZGVyLCBsb2NhbGVJZCwgcnVudGltZUZyYW1ld29ya1NlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+C54Wn5pe25omT5byA55Sf5Y2V6KeE5YiZ6YCJ5oup5ZmoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcGVuQmlsbENyZWF0aW9uUHJvY2Vzc1NlbGVjdG9yNFB1bGwoZG93blZvSWQ6IHN0cmluZywgYml6Rmxvd2NoYXJ0SWQ/OiBzdHJpbmcsIG1vZGFsT3B0aW9ucz86IE1vZGFsT3B0aW9ucywgY3VzdG9tU2VsZWN0b3JNb2R1bGVVcmw/OiBzdHJpbmcsIGV4dFBhcmFtcz86IHt9KTogT2JzZXJ2YWJsZTxJUnRTbGltQmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4PiB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IG5ldyBGb3JtR2V0QmlsbENyZWF0aW9uUHJvY2Vzc0VudGl0eUV4QXJncygpO1xyXG4gICAgICAgIGFyZ3MuZG93bkJpbGxWb0lkID0gZG93blZvSWQ7XHJcbiAgICAgICAgYXJncy5tYW51YWxDcmVhdGlvbk1vZGUgPSBNYW51YWxDcmVhdGlvbk1vZGUuUHVsbDtcclxuICAgICAgICAvLyBhcmdzLmJpekZsb3djaGFydElkID0gYml6Rmxvd2NoYXJ0SWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5CaWxsQ3JlYXRpb25Qcm9jZXNzU2VsZWN0b3IoYXJncywgUHVsbFNlbGVjdG9yQ29tcG9uZW50LCBtb2RhbE9wdGlvbnMsIGN1c3RvbVNlbGVjdG9yTW9kdWxlVXJsLCBleHRQYXJhbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog54m55a6a5Y+C54Wn5pe25omT5byA55Sf5Y2V6KeE5YiZ6YCJ5oup5ZmoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcGVuQmlsbENyZWF0aW9uUHJvY2Vzc1NlbGVjdG9yNFNwZWNpZmljUHVsbCh1cEJpbGxWb0lkOiBzdHJpbmcsIGRvd25Wb0lkOiBzdHJpbmcsIGJpekZsb3djaGFydElkPzogc3RyaW5nLCBtb2RhbE9wdGlvbnM/OiBNb2RhbE9wdGlvbnMsIGN1c3RvbVNlbGVjdG9yTW9kdWxlVXJsPzogc3RyaW5nLCBleHRQYXJhbXM/OiB7fSk6IE9ic2VydmFibGU8SVJ0U2xpbUJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeD4ge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBuZXcgRm9ybUdldEJpbGxDcmVhdGlvblByb2Nlc3NFbnRpdHlFeEFyZ3MoKTtcclxuICAgICAgICBhcmdzLnVwQmlsbFZvSWQgPSB1cEJpbGxWb0lkO1xyXG4gICAgICAgIGFyZ3MuZG93bkJpbGxWb0lkID0gZG93blZvSWQ7XHJcbiAgICAgICAgYXJncy5tYW51YWxDcmVhdGlvbk1vZGUgPSBNYW51YWxDcmVhdGlvbk1vZGUuU3BlY2lmaWNQdWxsO1xyXG4gICAgICAgIC8vIGFyZ3MuYml6Rmxvd2NoYXJ0SWQgPSBiaXpGbG93Y2hhcnRJZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlbkJpbGxDcmVhdGlvblByb2Nlc3NTZWxlY3RvcihhcmdzLCBQdWxsU2VsZWN0b3JDb21wb25lbnQsIG1vZGFsT3B0aW9ucywgY3VzdG9tU2VsZWN0b3JNb2R1bGVVcmwsIGV4dFBhcmFtcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDmnaXmupDljZXmja7pgInmi6nlmahcclxuICAgICAqIEBwYXJhbSBmb3JtU2V0dGluZ3MgXHJcbiAgICAgKiBAcGFyYW0gbW9kYWxPcHRpb25zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3BlblNvdXJjZURhdGFTZWxlY3RvcjRQdWxsKGZvcm1TZXR0aW5ncz86IEZvcm1TZXR0aW5ncywgbW9kYWxPcHRpb25zPzogTW9kYWxPcHRpb25zLCBleHRQYXJhbXM/OiB7IGJvb3RzdHJhcENvbXBvbmVudFNlbGVjdG9yPzogc3RyaW5nLCBba2V5OiBzdHJpbmddOiBhbnkgfSk6IE9ic2VydmFibGU8RW50aXR5W10+IHtcclxuICAgICAgICBtb2RhbE9wdGlvbnMgPSBtb2RhbE9wdGlvbnMgPT0gbnVsbCA/IHRoaXMuZGVmYXVsdE1vZGFsT3B0aW9ucyA6IG1vZGFsT3B0aW9ucztcclxuICAgICAgICBtb2RhbE9wdGlvbnMudGl0bGUgPSBtb2RhbE9wdGlvbnMudGl0bGUgPT0gbnVsbCA/IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJzb3VyY2VEYXRhU2VsZWN0b3JcIikgOiBtb2RhbE9wdGlvbnMudGl0bGU7XHJcblxyXG4gICAgICAgIGxldCBjbXBSOiBDb21wb25lbnRSZWY8SUJpZkRhdGFTZWxlY3RvckNvbXBvbmVudD4gPSBudWxsO1xyXG4gICAgICAgIGlmIChmb3JtU2V0dGluZ3MgPT0gbnVsbCB8fCBmb3JtU2V0dGluZ3Muc291cmNlRGF0YVNlbGVjdG9yTW9kdWxlVXJsID09IG51bGwpIC8vIOayoeaciemFjee9ruaXtuWKoOi9vem7mOiupOmAmueUqOWNleaNrumAieaLqeWZqFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhyb3cgXCLmmoLml6Dpu5jorqTlrp7njrDvvIzor7fkvb/nlKjoh6rlrprkuYnmnaXmupDljZXmja7pgInmi6nlmahcIjtcclxuICAgICAgICAgICAgLy8gbGV0IGNtcEY6IENvbXBvbmVudEZhY3Rvcnk8U291cmNlRGF0YVNlbGVjdG9yQ29tcG9uZW50PiA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFNvdXJjZURhdGFTZWxlY3RvckNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIC8vIGxldCBpbmo6IEluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKFtcclxuICAgICAgICAgICAgLy8gXSwgdGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgICAgIC8vIGNtcFIgPSBjbXBGLmNyZWF0ZShpbmopO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNvbmZpZ01vZGFsQnV0dG9ucyhtb2RhbE9wdGlvbnMsIGNtcFIpO1xyXG5cclxuICAgICAgICAgICAgLy8gY21wUi5pbnN0YW5jZS5ic01vZGFsUmVmNEFpZlNlbGVjdG9yID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSLCBtb2RhbE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gY21wUi5pbnN0YW5jZS5zdWJqZWN0NEVudGl0eURhdGFzLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIC8v5Yqg6L296Ieq5a6a5LmJ5p2l5rqQ5Y2V5o2u6YCJ5oup5ZmoIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGZyb20oU3lzdGVtLmltcG9ydChmb3JtU2V0dGluZ3Muc291cmNlRGF0YVNlbGVjdG9yTW9kdWxlVXJsLnN1YnN0cmluZygwLCBmb3JtU2V0dGluZ3Muc291cmNlRGF0YVNlbGVjdG9yTW9kdWxlVXJsLmluZGV4T2YoXCIjXCIpKSArIFwiLmpzXCIpKS5waXBlKFxyXG4gICAgICAgICAgICBsZXQgbW9kdWxlRiQgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZm9ybVNldHRpbmdzLnNvdXJjZURhdGFTZWxlY3RvckFwcElkICE9IG51bGwpIC8v6YWN572uYXBwSWTml7ZcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbW9kdWxlRiQgPSBmcm9tKFN5c3RlbS5pbXBvcnQoZm9ybVNldHRpbmdzLnNvdXJjZURhdGFTZWxlY3Rvck1vZHVsZVVybC50b0xvd2VyQ2FzZSgpKS50aGVuKG0gPT4gbSkpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAobTogeyBba2V5OiBzdHJpbmddOiBOZ01vZHVsZUZhY3Rvcnk8SUJpZkRhdGFTZWxlY3Rvck1vZHVsZT4gfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YobVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSAvL+WPqumFjee9rnVybOaXtiBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbW9kdWxlRiQgPSBmcm9tKHRoaXMubG9hZGVyLmxvYWQoZm9ybVNldHRpbmdzLnNvdXJjZURhdGFTZWxlY3Rvck1vZHVsZVVybCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlRiQucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChcclxuICAgICAgICAgICAgICAgICAgICAobW9kdWxlRmFjdG9yeTogTmdNb2R1bGVGYWN0b3J5PElCaWZEYXRhU2VsZWN0b3JNb2R1bGU+KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZVJlZiA9IG1vZHVsZUZhY3RvcnkuY3JlYXRlKHRoaXMuZnJhbWVDb250ZXh0LnJvb3QuaW5qZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kdWxlUmVmLmluc3RhbmNlLmNyZWF0ZVNvdXJjZURhdGFTZWxlY3RvciAmJiBtb2R1bGVSZWYuaW5zdGFuY2UuY3JlYXRlU291cmNlRGF0YVNlbGVjdG9yIGluc3RhbmNlb2YgRnVuY3Rpb24pLy9tb2R1bGXkuIrlrprkuYljcmVhdGVTb3VyY2VEYXRhU2VsZWN0b3Lmlrnms5VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY21wUiQgPSBtb2R1bGVSZWYuaW5zdGFuY2UuY3JlYXRlU291cmNlRGF0YVNlbGVjdG9yKHRoaXMuZnJhbWVDb250ZXh0LnJvb3QuaW5qZWN0b3IsIG51bGwsIGV4dFBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY21wUiQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNtcFIkLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjb21wb25lbnRSZWYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbXBSID0gY29tcG9uZW50UmVmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnTW9kYWxCdXR0b25zKG1vZGFsT3B0aW9ucywgY21wUik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21wUi5pbnN0YW5jZS5ic01vZGFsUmVmNEJpZlNlbGVjdG9yID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSLCBtb2RhbE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbXBSLmluc3RhbmNlLnN1YmplY3Q0RW50aXR5RGF0YXMuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjbXBSJCBpbnN0YW5jZW9mIENvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtcFIgPSBjbXBSJDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ01vZGFsQnV0dG9ucyhtb2RhbE9wdGlvbnMsIGNtcFIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtcFIuaW5zdGFuY2UuYnNNb2RhbFJlZjRCaWZTZWxlY3RvciA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY21wUiwgbW9kYWxPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY21wUi5pbnN0YW5jZS5zdWJqZWN0NEVudGl0eURhdGFzLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgLy9tb2R1bGXkuIrmnKrlrprkuYnml7blsJ3or5Xlr7vmib5Sb290Q29tcG9uZW5057G7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoVHJhbnNsYXRlU2VydmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlLmdldFRyYW5zbGF0aW9uKHRoaXMubG9jYWxlSWQpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlLnNldFRyYW5zbGF0aW9uKHRoaXMubG9jYWxlSWQsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlLmRlZmF1bHRMYW5nID0gdGhpcy5sb2NhbGVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZS5jdXJyZW50TGFuZyA9IHRoaXMubG9jYWxlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRFbnRpdHlEYXRhKG1vZHVsZVJlZiwgZm9ybVNldHRpbmdzLCBtb2RhbE9wdGlvbnMsIGV4dFBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEVudGl0eURhdGEobW9kdWxlUmVmLCBmb3JtU2V0dGluZ3MsIG1vZGFsT3B0aW9ucywgZXh0UGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS8oOWIsOaguee7hOS7tlVJU3RhdGXkuIrnmoTnlJ/ljZXop4TliJnmiafooYzlmajnu5PmnpxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZvcm1CaWxsQ3JlYXRpb25Qcm9jZXNzRXhlY3V0b3JSZXN1bHQoKTogRm9ybUJpbGxDcmVhdGlvblByb2Nlc3NFeGVjdXRvclJlc3VsdCB7XHJcbiAgICAgICAgLy/lj5blvpd0YWJJZOS4ultBcHBJZF1fW0FwcEVudHJhbmNlXV9bdGFiSWRdXHJcbiAgICAgICAgbGV0IHRhYklkOiBzdHJpbmcgPSB0aGlzLnJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlLnRhYklkO1xyXG4gICAgICAgIGxldCBkYXRhSWQgPSB0YWJJZC5zdWJzdHIodGFiSWQubGVuZ3RoIC0gMzYpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFiSWQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFJZCk7XHJcbiAgICAgICAgY29uc3QgYnJvd3NlciA9IGp1ZGdlQnJvd3NlclR5cGUoKTtcclxuXHJcbiAgICAgICAgLy9JRTEx5rWP6KeI5Zmo5LuObG9jYWxTdG9yYWdl5Y+W5YC85ZCO5bm25Yig6ZmkLCDlubblrZjlhaVVSVN0YXRlXHJcbiAgICAgICAgaWYgKGJyb3dzZXIudHlwZSA9PSBcIklFXCIgJiYgYnJvd3Nlci5JRVZlcnNpb24gPT0gXCJJRTExXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgdG1wID0gd2luZG93LnRvcC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShkYXRhSWQpO1xyXG4gICAgICAgICAgICB3aW5kb3cudG9wLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGRhdGFJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVDb250ZXh0LnJvb3QudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKHRoaXMudWlTdGF0ZUtleUNyZWF0aW9uUmVzdWx0LCB0bXApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlc1RlbXAgPSB0aGlzLmZyYW1lQ29udGV4dC5yb290LnVpU3RhdGVbdGhpcy51aVN0YXRlS2V5Q3JlYXRpb25SZXN1bHRdO1xyXG4gICAgICAgIGlmIChyZXNUZW1wID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJGb3JtQmlsbENyZWF0aW9uUHJvY2Vzc0V4ZWN1dG9yUmVzdWx0IGlzIG51bGxcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEZvcm1CaWxsQ3JlYXRpb25Qcm9jZXNzRXhlY3V0b3JSZXN1bHQoKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJlc1RlbXAgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXN1bHQuTG9hZEZyb21Kc29uKHJlc1RlbXApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlc1RlbXAgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICByZXN1bHQuTG9hZEZyb21Kc29uT2JqZWN0KHJlc1RlbXApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IFwi5LiN5ZCI5rOV55qE57G75Z6LXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDphY3nva7mqKHmgIHmoYbmjInpkq7kuovku7ZcclxuICAgICAqIEBwYXJhbSBtb2RhbE9wdGlvbnMgXHJcbiAgICAgKiBAcGFyYW0gY21wUiBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGNvbmZpZ01vZGFsQnV0dG9uc0J5U2VydmljZShtb2RhbE9wdGlvbnM6IE1vZGFsT3B0aW9ucywgc2VydmljZTogQWJzdHJhY3RCaWZEYXRhU2VsZWN0b3JTZXJ2aWNlKSB7XHJcbiAgICAgICAgbW9kYWxPcHRpb25zLmJ1dHRvbnMgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb25maXJtXCIpLFxyXG4gICAgICAgICAgICAgICAgY2xzOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBzZXJ2aWNlLmNsaWNrT2s0QmlmU2VsZWN0b3IsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjYW5jZWxcIiksXHJcbiAgICAgICAgICAgICAgICBjbHM6IFwiYnRuIGJ0bi1zZWNvbmRhcnlcIixcclxuICAgICAgICAgICAgICAgIGhhbmRsZTogc2VydmljZS5jbGlja0Nsb3NlNEJpZlNlbGVjdG9yLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBtb2RhbE9wdGlvbnMuc2hvd0J1dHRvbnMgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRFbnRpdHlEYXRhKG1vZHVsZVJlZjogTmdNb2R1bGVSZWY8YW55PiwgZm9ybVNldHRpbmdzPzogRm9ybVNldHRpbmdzLCBtb2RhbE9wdGlvbnM/OiBNb2RhbE9wdGlvbnMsIGV4dFBhcmFtcz86IHsgYm9vdHN0cmFwQ29tcG9uZW50U2VsZWN0b3I/OiBzdHJpbmcsIFtrZXk6IHN0cmluZ106IGFueSB9KTogT2JzZXJ2YWJsZTxFbnRpdHlbXT4ge1xyXG4gICAgICAgIGxldCBjbXBGOiBDb21wb25lbnRGYWN0b3J5PElCaWZEYXRhU2VsZWN0b3JDb21wb25lbnQ+ID0gbnVsbDtcclxuICAgICAgICBsZXQgY21wUjogQ29tcG9uZW50UmVmPElCaWZEYXRhU2VsZWN0b3JDb21wb25lbnQ+ID0gbnVsbDtcclxuICAgICAgICBsZXQgYm9vdHN0cmFwQ29tcG9uZW50U2VsZWN0b3IgPSBcImFwcC1yb290Y29tcG9uZW50XCI7XHJcbiAgICAgICAgbGV0IGJvb3RzdHJhcENvbXBvbmVudCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGZhY01hcDogTWFwPGFueSwgYW55PiA9IG1vZHVsZVJlZi5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJbJ19mYWN0b3JpZXMnXTtcclxuICAgICAgICBpZiAoZXh0UGFyYW1zICYmIGV4dFBhcmFtcy5ib290c3RyYXBDb21wb25lbnRTZWxlY3RvcikvL+aMh+WumuS6huaguee7hOS7tnNlbGVjdG9yXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBib290c3RyYXBDb21wb25lbnRTZWxlY3RvciA9IGV4dFBhcmFtcy5ib290c3RyYXBDb21wb25lbnRTZWxlY3RvcjtcclxuXHJcbiAgICAgICAgICAgIGZhY01hcC5mb3JFYWNoKCh2YWx1ZTogYW55LCBrZXk6IEZ1bmN0aW9uLCBtYXA6IE1hcDxhbnksIGFueT4pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gdmFsdWUuc2VsZWN0b3I7XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9vdHN0cmFwQ29tcG9uZW50U2VsZWN0b3IgPT0gc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbXBGID0gbW9kdWxlUmVmLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShrZXkgYXMgYW55KTtcclxuICAgICAgICAgICAgICAgICAgICBjbXBSID0gY21wRi5jcmVhdGUobW9kdWxlUmVmLmluamVjdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgLy/mnKrmjIflrprmoLnnu4Tku7ZzZWxlY3RvciBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJvb3RzdHJhcENvbXBvbmVudCA9IG1vZHVsZVJlZlsnX2Jvb3RzdHJhcENvbXBvbmVudHMnXVswXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChib290c3RyYXBDb21wb25lbnQpLy/lhYjmib5ib290c3RyYXBDb21wb25lbnTmlbDnu4TmnInml6Dnu4Tku7ZcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY21wRiA9IG1vZHVsZVJlZi5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoYm9vdHN0cmFwQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIGNtcFIgPSBjbXBGLmNyZWF0ZShtb2R1bGVSZWYuaW5qZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UvL+ayoeacieWImeS7jmZhY01hcOS4reafpeaJvum7mOiupOeahGFwcC1yb290Y29tcG9uZW50XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZhY01hcC5mb3JFYWNoKCh2YWx1ZTogYW55LCBrZXk6IEZ1bmN0aW9uLCBtYXA6IE1hcDxhbnksIGFueT4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IHZhbHVlLnNlbGVjdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib290c3RyYXBDb21wb25lbnRTZWxlY3RvciA9PSBzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbXBGID0gbW9kdWxlUmVmLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShrZXkgYXMgYW55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21wUiA9IGNtcEYuY3JlYXRlKG1vZHVsZVJlZi5pbmplY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0YVNlbGVjdG9yU2VydmljZTogQWJzdHJhY3RCaWZEYXRhU2VsZWN0b3JTZXJ2aWNlID0gY21wUi5pbmplY3Rvci5nZXQoQWJzdHJhY3RCaWZEYXRhU2VsZWN0b3JTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICBpZiAoZGF0YVNlbGVjdG9yU2VydmljZSAhPSBudWxsKSAvLyDmnIlBYnN0cmFjdEJpZkRhdGFTZWxlY3RvclNlcnZpY2XnmoRwcm92aWRlcuaXtlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdNb2RhbEJ1dHRvbnNCeVNlcnZpY2UobW9kYWxPcHRpb25zLCBkYXRhU2VsZWN0b3JTZXJ2aWNlKTtcclxuICAgICAgICAgICAgZGF0YVNlbGVjdG9yU2VydmljZS5ic01vZGFsUmVmNEJpZlNlbGVjdG9yID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSLCBtb2RhbE9wdGlvbnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YVNlbGVjdG9yU2VydmljZS5zdWJqZWN0NEVudGl0eURhdGFzLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIC8v5rKh5pyJ5YiZ5LuO57uE5Lu25LiK5a+75om+55u45bqU5bGe5oCnXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ01vZGFsQnV0dG9ucyhtb2RhbE9wdGlvbnMsIGNtcFIpO1xyXG4gICAgICAgICAgICBjbXBSLmluc3RhbmNlLmJzTW9kYWxSZWY0QmlmU2VsZWN0b3IgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNtcFIsIG1vZGFsT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjbXBSLmluc3RhbmNlLnN1YmplY3Q0RW50aXR5RGF0YXMuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19