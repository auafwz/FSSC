/*
 * @Author: Witt
 * @Date: 2018-12-29 10:46:01
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-30 18:06:11
 */
import { Injectable } from '@angular/core';
/**
 * Repository管理类
 */
var RepositoryManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function RepositoryManager() {
        this.repositoryMap = new Map();
    }
    /**
     * 注册Repository
     */
    RepositoryManager.prototype.regRepository = function (name, repository) {
        this.repositoryMap.set(name, repository);
    };
    RepositoryManager.prototype.unRegisteRepository = function (name) {
        this.repositoryMap.delete(name);
    };
    /**
     * 获取RepositoryMap
     * @internal
     */
    RepositoryManager.prototype.getRepositoryMap = function () {
        return this.repositoryMap;
    };
    /**
     * 获取Repository数组
     */
    RepositoryManager.prototype.getRepositories = function () {
        return Array.from(this.repositoryMap.values());
    };
    /**
     * 根据name获取Repository
     */
    RepositoryManager.prototype.getRepositoryByName = function (name) {
        return this.repositoryMap.get(name);
    };
    /**
     * 是否Repository已经存在
     */
    RepositoryManager.prototype.ifRepositoryExits = function (name) {
        var repository = this.getRepositoryByName(name);
        return repository ? true : false;
    };
    RepositoryManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RepositoryManager.ctorParameters = function () { return []; };
    return RepositoryManager;
}());
export { RepositoryManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9tYW5hbmdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9yZXBvc2l0b3J5X21hbmFuZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFJN0Q7O0dBRUc7QUFDSDtJQVNFOztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUE4QixDQUFDO0lBQzdELENBQUM7SUFFRDs7T0FFRztJQUNJLHlDQUFhLEdBQXBCLFVBQXFCLElBQVksRUFBRSxVQUE4QjtRQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLCtDQUFtQixHQUExQixVQUEyQixJQUFZO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDRDs7O09BR0c7SUFDSSw0Q0FBZ0IsR0FBdkI7UUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMkNBQWUsR0FBdEI7UUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNJLCtDQUFtQixHQUExQixVQUEyQixJQUFZO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNkNBQWlCLEdBQXhCLFVBQXlCLElBQVk7UUFDbkMsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDOztnQkF0REYsVUFBVTs7OztJQXdEWCx3QkFBQztDQUFBLEFBeERELElBd0RDO0FBRUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiBXaXR0XHJcbiAqIEBEYXRlOiAyMDE4LTEyLTI5IDEwOjQ2OjAxXHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBXaXR0XHJcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTgtMTItMzAgMTg6MDY6MTFcclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3J5L2luZGV4JztcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuXHJcbi8qKlxyXG4gKiBSZXBvc2l0b3J5566h55CG57G7XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFJlcG9zaXRvcnlNYW5hZ2VyIHtcclxuXHJcbiAgLyoqXHJcbiAgICogcmVwb3NpdG9yeU1hcFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVwb3NpdG9yeU1hcDogTWFwPHN0cmluZywgUmVwb3NpdG9yeTxFbnRpdHk+PjtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5TWFwID0gbmV3IE1hcDxzdHJpbmcsIFJlcG9zaXRvcnk8RW50aXR5Pj4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjFJlcG9zaXRvcnlcclxuICAgKi9cclxuICBwdWJsaWMgcmVnUmVwb3NpdG9yeShuYW1lOiBzdHJpbmcsIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5Pik6IHZvaWQge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5TWFwLnNldChuYW1lLCByZXBvc2l0b3J5KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1blJlZ2lzdGVSZXBvc2l0b3J5KG5hbWU6IHN0cmluZyl7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnlNYXAuZGVsZXRlKG5hbWUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5ZSZXBvc2l0b3J5TWFwXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJlcG9zaXRvcnlNYXAoKTogTWFwPHN0cmluZywgUmVwb3NpdG9yeTxFbnRpdHk+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5TWFwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WUmVwb3NpdG9yeeaVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZXBvc2l0b3JpZXMoKTogUmVwb3NpdG9yeTxFbnRpdHk+W10ge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5yZXBvc2l0b3J5TWFwLnZhbHVlcygpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrm5hbWXojrflj5ZSZXBvc2l0b3J5XHJcbiAgICovXHJcbiAgcHVibGljIGdldFJlcG9zaXRvcnlCeU5hbWUobmFtZTogc3RyaW5nKTogUmVwb3NpdG9yeTxFbnRpdHk+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnlNYXAuZ2V0KG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCmUmVwb3NpdG9yeeW3sue7j+WtmOWcqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpZlJlcG9zaXRvcnlFeGl0cyhuYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSB0aGlzLmdldFJlcG9zaXRvcnlCeU5hbWUobmFtZSk7XHJcbiAgICByZXR1cm4gcmVwb3NpdG9yeSA/IHRydWUgOiBmYWxzZTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBSZXBvc2l0b3J5TWFuYWdlciB9O1xyXG4iXX0=