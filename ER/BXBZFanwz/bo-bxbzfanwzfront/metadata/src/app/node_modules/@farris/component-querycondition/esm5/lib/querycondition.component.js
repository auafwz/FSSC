/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, ComponentFactoryResolver, Injector, Output, EventEmitter, LOCALE_ID, ViewChild, NgZone } from '@angular/core';
import { CommunicationService } from './service/communicationservice';
import { ConvertorService } from './service/convertorservice';
import { ControlType } from './entity/controltype';
import { ConfigDialogComponent } from './fieldconfigdialog/configdialog.component';
import { BsModalService } from '@farris/ui-modal';
import { SolutionService } from './service/solution.service';
import { LocaleService } from '@farris/ui-locale';
var QueryConditionComponent = /** @class */ (function () {
    function QueryConditionComponent(communicationService, convertorService, resolver, injector, modalService, localeService) {
        this.communicationService = communicationService;
        this.convertorService = convertorService;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.localeService = localeService;
        this._resetFieldConfigs = [];
        this.isControlInline = true;
        this.showCompleteLabel = false;
        this.fieldConditionsChange = new EventEmitter();
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.controlType = ControlType;
        this.showButton = false;
        this.fieldCodeOfClearFields = [];
        // 获取ngZone
        this.ngZone = null;
        this.currentLocale = this.injector.get(LOCALE_ID);
        this.solutionService = this.injector.get(SolutionService);
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    Object.defineProperty(QueryConditionComponent.prototype, "resetFieldConfigs", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resetFieldConfigs;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value.length > 0) {
                this.solutionService.updateControlConfigState(value);
            }
            this._resetFieldConfigs = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryConditionComponent.prototype, "selectedFieldConditions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedFieldConditions;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectedFieldConditions = value;
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    QueryConditionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    QueryConditionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        this.selectedFieldConditions = this.selectedFieldConditions || new Array();
    };
    /**
     * @return {?}
     */
    QueryConditionComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    QueryConditionComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} currentItem
     * @return {?}
     */
    QueryConditionComponent.prototype.hasSetMultiClass = /**
     * @param {?} currentItem
     * @return {?}
     */
    function (currentItem) {
        if (currentItem.control.className && currentItem.control.className.indexOf('farris-group-multi-label') > -1) {
            return true;
        }
        return false;
    };
    /* */
    /* */
    /**
     * @param {?} currentItem
     * @return {?}
     */
    QueryConditionComponent.prototype.getStyle = /* */
    /**
     * @param {?} currentItem
     * @return {?}
     */
    function (currentItem) {
        /** @type {?} */
        var defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';
        // 设置显示标签全并且显示了折行
        // if(this.showCompleteLabel && currentItem.control.className == 'farris-group-multi-label'){
        //     return defaultCondtionStyle.concat(" farris-group-multi-label");
        // }
        /** @type {?} */
        var className = currentItem.control.className;
        className = className ? className.replace('farris-group-multi-label', '') : '';
        return className ? className : defaultCondtionStyle;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    QueryConditionComponent.prototype.configDialogConfirm = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectedFieldConditions = (/** @type {?} */ ((/** @type {?} */ (event))));
        this.fieldConditionsChange.emit(event);
    };
    /**
     * @return {?}
     */
    QueryConditionComponent.prototype.openFieldConfigDialog = /**
     * @return {?}
     */
    function () {
        this.configDialog.inputSelectedFileds = this.selectedFieldConditions ? this.selectedFieldConditions : [];
        this.configDialog.dialog.show();
    };
    /**
     * @param {?=} exceptRequired
     * @return {?}
     */
    QueryConditionComponent.prototype.resetSelectedConditionValues = /**
     * @param {?=} exceptRequired
     * @return {?}
     */
    function (exceptRequired) {
        if (exceptRequired === void 0) { exceptRequired = false; }
        return this.selectedFieldConditions.map((/**
         * @param {?} fieldCondition
         * @return {?}
         */
        function (fieldCondition) {
            if (exceptRequired) {
                if (!fieldCondition.control.isRequired()) {
                    fieldCondition.value.clearValue();
                }
            }
            else {
                fieldCondition.value.clearValue();
            }
            return fieldCondition;
        }));
    };
    /**
     * @return {?}
     */
    QueryConditionComponent.prototype.conditionChange = /**
     * @return {?}
     */
    function () {
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
    };
    /**
     * @param {?} conditions
     * @return {?}
     */
    QueryConditionComponent.prototype.confirmLabelFormat = /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        if (this.isControlInline) {
            this.labelFormat = 'farris-form-controls-inline';
            /** @type {?} */
            var hasCustom_1 = false;
            if (conditions.length) {
                // 复选框label标签目前在框的右侧，超出宽度后下方出现滚动条，计算标签最大长度时需将其排除
                /** @type {?} */
                var noCheckBoxConditions_1 = [];
                conditions.forEach((/**
                 * @param {?} condition
                 * @return {?}
                 */
                function (condition) {
                    if (condition.control.getControlType() != ControlType.BoolCheck) {
                        noCheckBoxConditions_1.push(condition);
                    }
                    if (condition.control['className'] && condition.control['className'] != 'farris-group-multi-label') {
                        hasCustom_1 = true;
                    }
                }));
                this.labelFormat += hasCustom_1 ? ' condition-is-custom' : ' condition-with-fixed';
                /** @type {?} */
                var maxLength_1 = 0;
                if (noCheckBoxConditions_1.length) {
                    noCheckBoxConditions_1.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        maxLength_1 = (item.fieldName.length > maxLength_1) ? (item.fieldName.length) : maxLength_1;
                    }));
                }
                //需要完整显示控件标签时，根据标签最大长度确定标签栏每行可显示的字符数
                if (this.showCompleteLabel) {
                    if (maxLength_1 > 8) {
                        //标签超出8个字符后，设置每行最多可显示10个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-xl");
                    }
                    else if ((maxLength_1 < 9) && (maxLength_1 > 6)) {
                        //标签超出6个字符、不超过8个字符时，设置每行最多可显示8个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-lg");
                    }
                }
            }
        }
        if (this.labelFormat) {
            return this.labelFormat + (this.isControlInline && this.showCompleteLabel ? ' condition-with-complete' : '');
        }
    };
    QueryConditionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-querycondition',
                    template: "<div class=\"row f-utils-flex-row-wrap farris-form {{confirmLabelFormat(selectedFieldConditions)}} condition-div\"  id=\"querycondition\" #queryConditionWrap>\r\n    <ng-container *ngFor=\"let currentItem of selectedFieldConditions;let i=index;\">\r\n        <app-solution-input  \r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Text\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-input>\r\n\r\n        <app-solution-inputgroup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.InputGroup\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-inputgroup>\r\n        \r\n        <app-solution-dropdownlist\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DropDownList\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-dropdownlist>\r\n        \r\n        <app-solution-smarthelp\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SmartHelp\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-smarthelp>\r\n        \r\n        <app-solution-single-number\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleNumber\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-single-number>\r\n\r\n        <app-solution-numberrange\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.NumberRange\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-numberrange>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDate\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateRange\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleYear\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleMonth\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.MonthRange\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDateTime\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateTimeRange\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-combolookup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.ComboLookUp\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-combolookup>\r\n\r\n        <app-solution-checkbox\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.BoolCheck\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-checkbox>\r\n\r\n        <app-solution-radio\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Radio\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-radio>\r\n    </ng-container>\r\n</div>\r\n<app-queryconfigdialog \r\n    #configDialog \r\n    [inputSelectedFileds]=\"selectedFieldConditions\" \r\n    [filedsDataSource]=\"fieldConfigs\"\r\n    (confirmEmitter)=\"configDialogConfirm($event)\">\r\n</app-queryconfigdialog>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [CommunicationService],
                    styles: [".condition-div{min-height:30px}.f-solution-radio-group .farris-checkradio-hor{flex-wrap:nowrap;overflow-x:auto}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar{width:6px;height:6px;background-color:#eee}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-track{border-radius:0}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.15);-webkit-transition:.2s;transition:.2s;border-radius:6px}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.45)}.f-solution-radio-group .farris-checkradio-hor .custom-radio{flex-shrink:0}"]
                }] }
    ];
    /** @nocollapse */
    QueryConditionComponent.ctorParameters = function () { return [
        { type: CommunicationService },
        { type: ConvertorService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: LocaleService }
    ]; };
    QueryConditionComponent.propDecorators = {
        fieldConfigs: [{ type: Input }],
        resetFieldConfigs: [{ type: Input }],
        isControlInline: [{ type: Input }],
        selectedFieldConditions: [{ type: Input }],
        showCompleteLabel: [{ type: Input }],
        isDisabled: [{ type: Input }],
        fieldConditionsChange: [{ type: Output }],
        configDialog: [{ type: ViewChild, args: ['configDialog',] }],
        queryConditionWrapEl: [{ type: ViewChild, args: ["queryConditionWrap",] }]
    };
    return QueryConditionComponent;
}());
export { QueryConditionComponent };
if (false) {
    /** @type {?} */
    QueryConditionComponent.prototype.fieldConfigs;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype._resetFieldConfigs;
    /** @type {?} */
    QueryConditionComponent.prototype.isControlInline;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype._selectedFieldConditions;
    /** @type {?} */
    QueryConditionComponent.prototype.showCompleteLabel;
    /** @type {?} */
    QueryConditionComponent.prototype.isDisabled;
    /** @type {?} */
    QueryConditionComponent.prototype.fieldConditionsChange;
    /** @type {?} */
    QueryConditionComponent.prototype.configDialog;
    /** @type {?} */
    QueryConditionComponent.prototype.localeIds;
    /** @type {?} */
    QueryConditionComponent.prototype.currentLocale;
    /** @type {?} */
    QueryConditionComponent.prototype.solutionService;
    /** @type {?} */
    QueryConditionComponent.prototype.controlType;
    /** @type {?} */
    QueryConditionComponent.prototype.labelFormat;
    /** @type {?} */
    QueryConditionComponent.prototype.showButton;
    /** @type {?} */
    QueryConditionComponent.prototype.fieldCodeOfClearFields;
    /** @type {?} */
    QueryConditionComponent.prototype.queryConditionWrapEl;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.communicationService;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.convertorService;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.localeService;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,