{"version":3,"sources":["ng://@farris/ui-scrollspy/lib/farris-scrollspy.service.ts","ng://@farris/ui-scrollspy/lib/utils.ts","ng://@farris/ui-scrollspy/lib/farris-scrollspy.component.ts","ng://@farris/ui-scrollspy/lib/farris-scrollspy.directive.ts","ng://@farris/ui-scrollspy/lib/scrollspy.module.ts"],"names":["FarrisScrollSpyService","prototype","getCurrentSectionId","groupId","this","defaultId","currentSectionIdObj","subject","setCurrentSectionId","value","next","setCurrentSectionIdObj","_this","idValue","Subject","setTimeout","scrollFollowSpipes","length","item","find","scrollFollowItem","fScrollFollowClick","ngOnDestroy","scrollSubscription","unsubscribe","updateScrollGroup","scrollSpyId","scrollChange","subscribeScroll","key","ngzone","runOutsideAngular","fromEvent","scrollContents","pipe","debounceTime","animationFrame","subscribe","scrollSpies","_a","currentSectionId","elements","subject_1","scrollTop_1","scrollTop","topElementInView","filter","el","element","offsetTop","offsets","topElementId_1","id","clickChange","run","subscribeClick","forEach","follow","throttleTime","event","stopPropagation","Math","round","addContentElement","contentId","updateContainerClsName","removeContentElement","removeId","addFollowElement","followId","followContentId","follows","push","removeFollowElement","addElement","scrollId","scrollGroupId","currentSection","hasElement","updateScrollSpyActiveClsName","sort","a","b","getBoundingClientRect","top","removeElement","elementId","some","setOffset","offset","setGroupId","groupid","getGroupId","changeGroupIdFollowType","followTypeData","scrollSpyListFollowTypeChanges","hasOwnProperty","containerEl","className","replace","fixedTabContainerClsName","updateScrollSpiesActiveClsName","currentId","map","indexOf","scrollSpyPartActiveClsName","scrollEl","Injectable","args","providedIn","NgZone","getUuid","s","hexDigits","i","substr","floor","random","join","ScrollspyItemTemplateDirective","Directive","selector","TemplateRef","template","Object","defineProperty","ScrollspyComponent","_followType","_emitFollowType","prev","changeFollowType","_scrollspyData","visible","scrollSpy","ngOnInit","ngAfterViewInit","parent","elementRef","nativeElement","parentElement","style","position","fFollowType","Component","ElementRef","ChangeDetectorRef","ContentChild","read","Input","ViewChild","changeDetector","sidetabWidth","FarrisScrollSpyDirective","FscrollFollowElementDirective","followGroupId","FscrollSpyContainerDirective","fScrollGroupId","fOffset","console","log","fScrollChange","emit","Output","HostBinding","EventEmitter","ScrollspyModule","NgModule","declarations","imports","CommonModule","LocaleModule","forRoot","exports"],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy, NgZone } from '@angular/core';\r\nimport { fromEvent, Subject, Observable, Subscription } from 'rxjs';\r\nimport { throttleTime, debounceTime } from 'rxjs/operators';\r\nimport { animationFrame } from 'rxjs/internal/scheduler/animationFrame';\r\n\r\ninterface ScrollElement {\r\n  element: HTMLElement,\r\n  id: string\r\n}\r\n\r\ninterface ScrollSpy {\r\n  elements: ScrollElement[];\r\n  currentSectionId: string;\r\n  subject: Subject<string>;\r\n  clickChange?: boolean //å¤æ­æ¯å¦æ¯ç¹å»å¯¼è´çé¡µé¢æ»å¨\r\n}\r\n\r\ninterface ScrollSpies {\r\n  [scrollSpyId: string]: ScrollSpy\r\n}\r\n\r\ninterface ScrollFollow {\r\n  element: HTMLElement,\r\n  id: string\r\n}\r\ninterface ScrollFollowSpipes {\r\n  [scrollFollowId: string]: ScrollFollow[]\r\n}\r\n\r\ninterface ScrollContents {\r\n  [scrollFollowId: string]: HTMLElement\r\n}\r\ninterface Offsets {\r\n  [scrollFollowId: string]: number\r\n}\r\n\r\ninterface ScrollChange {\r\n  [scrollFollowId: string]: Subject<any>\r\n}\r\n\r\ninterface CurrentId {\r\n  subject: Subject<string>;\r\n  idValue: string\r\n}\r\ninterface CurrentIdObj {\r\n  [groupId: string]: CurrentId\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FarrisScrollSpyService implements OnDestroy {\r\n  // çå¬åºåå½åæ¶åçæ ·å¼\r\n  private scrollSpyPartActiveClsName = 'f-scrollspy-part-active';\r\n  private fixedTabContainerClsName = 'f-scrollspy-container-fixed';\r\n  private scrollSubscription: Subscription;\r\n  /**è¢«çå¬æ»å¨çcontents */\r\n  scrollContents: ScrollContents = {};\r\n  /**è¢«çå¬æ»å¨çsections*/\r\n  scrollSpies: ScrollSpies = {};\r\n  /**çå¬æ»å¨çéç¹é¨å */\r\n  scrollFollowSpipes: ScrollFollowSpipes = {};\r\n  private scrollSpyListFollowTypeChanges = {};\r\n\r\n  /**æ»å¨çå¬åç§»è·ç¦» */\r\n  offsets: Offsets = {};\r\n  /**é»è®¤çå¬åç»åç§° */\r\n  defaultId: string = 'default';\r\n\r\n  // currentSectionId: Subject<any> = new Subject();\r\n\r\n  currentSectionIdObj: CurrentIdObj = {};\r\n  //è·åcurrentid\r\n  getCurrentSectionId(groupId: string) {\r\n    if (!groupId) {\r\n      groupId = this.defaultId;\r\n    }\r\n    return this.currentSectionIdObj[groupId].subject;\r\n    // return this.currentSectionId;\r\n  }\r\n  //æ»å¨ååæ¶æ¹åcurrentid\r\n  setCurrentSectionId(groupId: string, value: string) {\r\n    if (!groupId) {\r\n      groupId = this.defaultId;\r\n    }\r\n    this.currentSectionIdObj[groupId].subject.next(value);\r\n    //console.log(this.currentSectionIdObj);\r\n    // this.currentSectionId.next(value);\r\n  }\r\n  //è®¾ç½®ä¸ågroupç»çcurrentid\r\n  setCurrentSectionIdObj(groupId: string, value: string) {\r\n    if (!groupId) {\r\n      groupId = this.defaultId;\r\n    }\r\n    if (!this.currentSectionIdObj[groupId]) {\r\n      this.currentSectionIdObj[groupId] = {\r\n        subject: new Subject(),\r\n        idValue: value\r\n      } as CurrentId;\r\n    }\r\n    else {\r\n      this.currentSectionIdObj[groupId].idValue = value;\r\n    }\r\n    setTimeout(() => {\r\n      if(this.scrollFollowSpipes[groupId] && this.scrollFollowSpipes[groupId].length){\r\n        let item = this.scrollFollowSpipes[groupId].find(scrollFollowItem=>{\r\n          return scrollFollowItem['id'] == this.currentSectionIdObj[groupId].idValue;\r\n        })\r\n        if(item){\r\n          this.fScrollFollowClick(groupId,item);\r\n        }\r\n      }\r\n    }, 0);\r\n    // this.fScrollFollowClick(key,follow);\r\n  }\r\n\r\n\r\n  scrollChange: ScrollChange = {};\r\n\r\n\r\n  constructor(public ngzone: NgZone) { }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.scrollSubscription.unsubscribe();\r\n  }\r\n\r\n  /**Observeré¨å ä¾æä»¤åå§åè°ç¨ */\r\n  // public getCurrentSection$(scrollSpyId: string = this.defaultId): Observable<string> {\r\n  //   if(scrollSpyId !== ''){\r\n  //     return this.scrollChange[scrollSpyId];\r\n  //   }\r\n  //   else{\r\n  //     return this.scrollChange[this.defaultId];\r\n  //   }\r\n  // }\r\n\r\n  public updateScrollGroup(scrollSpyId: string = this.defaultId) {\r\n    const groupId = scrollSpyId !== '' ? scrollSpyId : this.defaultId;\r\n    if (!this.scrollChange[groupId]) {\r\n      this.scrollChange[groupId] = new Subject();\r\n    }\r\n    return this.scrollChange[groupId];\r\n  }\r\n  /**contenté¨åæ»å¨äºä»¶çå¬ */\r\n  private subscribeScroll(key: string): void {\r\n    this.ngzone.runOutsideAngular(() => {\r\n      this.scrollSubscription = fromEvent(this.scrollContents[key], 'scroll')\r\n        .pipe(debounceTime(20, animationFrame))\r\n        .subscribe((): void => {\r\n          if (this.scrollSpies[key]) {\r\n            const { currentSectionId, elements, subject } = this.scrollSpies[key];\r\n            const scrollTop = this.scrollContents[key].scrollTop;\r\n            const topElementInView = elements.filter((el) => {\r\n              return el.element.offsetTop <= scrollTop + this.offsets[key]\r\n            }\r\n            );\r\n            if (!topElementInView || !topElementInView.length) {\r\n              return;\r\n            }\r\n            //console.log(topElementInView);\r\n            const topElementId: string = topElementInView[0].id;\r\n            //å¤æ­ ç¹å»æ¯å¦æ¯ç¹å»å¼èµ·çæ»å¨\r\n            if (this.scrollSpies[key].clickChange) {\r\n              this.scrollSpies[key].clickChange = false;\r\n              return;\r\n            }\r\n            else {\r\n              this.scrollSpies[key].clickChange = false;\r\n              if (topElementId !== currentSectionId) {\r\n                this.scrollSpies[key].currentSectionId = topElementId;\r\n                this.ngzone.run(() => {\r\n                  subject.next(topElementId);\r\n                })\r\n              }\r\n            }\r\n          }\r\n        })\r\n\r\n    });\r\n  }\r\n  /**tabé¨åç¹å»äºä»¶çå¬ */\r\n  private subscribeClick(key): void {\r\n    //Object.keys(this.scrollFollowSpipes).forEach((key:string):void=>{\r\n    if (this.scrollFollowSpipes[key] && this.scrollFollowSpipes[key].length) {\r\n      this.scrollFollowSpipes[key].forEach((follow) => {\r\n        fromEvent(follow.element, 'click')\r\n          .pipe(throttleTime(100))\r\n          .subscribe((event) => {\r\n            event.stopPropagation();\r\n            this.fScrollFollowClick(key, follow);\r\n            // if(this.scrollSpies[key]){\r\n\r\n            //   const { currentSectionId, elements, subject } = this.scrollSpies[key];\r\n            //   this.scrollSpies[key].clickChange = true;\r\n            //   if(follow.id !== currentSectionId){\r\n            //     const topElementInView = elements.find(el => el.id === follow.id);\r\n            //     if(!topElementInView) { return; }\r\n            //     this.scrollSpies[key].currentSectionId = follow.id;\r\n            //     //this.scrollContents[key].offsetTop\r\n            //     this.scrollContents[key].scrollTop = Math.round(topElementInView.element.offsetTop - this.offsets[key]);\r\n            //     subject.next(follow.id);\r\n            //   }\r\n\r\n            // }\r\n\r\n          })\r\n      })\r\n    }\r\n    //});\r\n  }\r\n\r\n  fScrollFollowClick(key, follow){\r\n    if(this.scrollSpies[key]){\r\n      const { currentSectionId, elements, subject } = this.scrollSpies[key];\r\n      this.scrollSpies[key].clickChange = true;\r\n      if (follow.id !== currentSectionId) {\r\n        const topElementInView = elements.find(el => el.id === follow.id);\r\n        if (!topElementInView) { return; }\r\n        this.scrollSpies[key].currentSectionId = follow.id;\r\n        //this.scrollContents[key].offsetTop\r\n        if (this.scrollContents[key]) {\r\n          this.scrollContents[key].scrollTop = Math.round(topElementInView.element.offsetTop - this.offsets[key]);\r\n        }\r\n        subject.next(follow.id);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**æ·»å éè¦è¢«æ»å¨çå¬é¨å */\r\n  public addContentElement(element: HTMLElement, contentId = this.defaultId): void {\r\n    if (contentId !== '') {\r\n      this.scrollContents[contentId] = element;\r\n      this.subscribeScroll(contentId);\r\n    }\r\n    else {\r\n      this.scrollContents[this.defaultId] = element;\r\n      this.subscribeScroll(this.defaultId);\r\n    }\r\n    // å¤æ­æ¯æå¾æ¹åçç¶æ\r\n    this.updateContainerClsName(contentId);\r\n  }\r\n  /**ç§»é¤éè¦è¢«æ»å¨çå¬é¨ååç´  */\r\n  public removeContentElement(contentId = this.defaultId): void {\r\n    const removeId = contentId !== '' ? contentId : this.defaultId;\r\n    delete this.scrollSpies[removeId];\r\n  }\r\n  /**æ·»å æ»å¨çå¬tabé¨ååç´ */\r\n  public addFollowElement(element: HTMLElement, followId, followContentId = this.defaultId): void {\r\n    const groupId = followContentId !== '' ? followContentId : this.defaultId;\r\n\r\n    const follow = {\r\n      element: element,\r\n      id: followId\r\n    };\r\n    if (!this.scrollFollowSpipes[groupId]) {\r\n      this.scrollFollowSpipes[groupId] = []\r\n    }\r\n    const follows = this.scrollFollowSpipes[groupId];\r\n    follows.push(follow);\r\n    this.scrollFollowSpipes[groupId] = follows;\r\n    this.subscribeClick(groupId);\r\n  }\r\n  /**ç§»é¤æ»å¨çå¬tabé¨ååç´  */\r\n  public removeFollowElement(followId, followContentId = this.defaultId): void {\r\n    const elements = this.scrollFollowSpipes[followContentId].filter(el => {\r\n      return el.id !== followId;\r\n    })\r\n    if (!elements.length) {\r\n      delete this.scrollFollowSpipes[followContentId];\r\n      return;\r\n    }\r\n    this.scrollFollowSpipes[followContentId] = elements;\r\n  }\r\n  /**æ·»å æ»å¨çå¬éç¹é¨ååç´  */\r\n  public addElement(element: HTMLElement, scrollId: string, scrollGroupId: string = this.defaultId): void {\r\n    if (!this.scrollSpies[scrollGroupId]) {\r\n      this.scrollSpies[scrollGroupId] = {\r\n        elements: [],\r\n        currentSectionId: '',\r\n        subject: new Subject(),\r\n      } as ScrollSpy;\r\n\r\n      this.scrollSpies[scrollGroupId].subject\r\n        .subscribe((currentSection: string): void => {\r\n          if (this.scrollChange[scrollGroupId]) {\r\n            this.scrollChange[scrollGroupId].next(currentSection);\r\n          }\r\n        });\r\n\r\n    }\r\n\r\n    if (this.hasElement(scrollId, scrollGroupId)) {\r\n      return;\r\n    }\r\n\r\n    const el: ScrollElement = {\r\n      element: element,\r\n      id: scrollId\r\n    }\r\n    // å å¥æ¶ï¼å¤æ­æ¯å¦æ¯å½å\r\n    this.updateScrollSpyActiveClsName(scrollGroupId,el);\r\n    const elements: any[] = this.scrollSpies[scrollGroupId].elements;\r\n    elements.push(el);\r\n    elements.sort((a, b): number => b.element.getBoundingClientRect().top - a.element.getBoundingClientRect().top);\r\n\r\n    this.scrollSpies[scrollGroupId].elements = elements;\r\n  }\r\n  /**ç§»é¤æ»å¨çå¬éç¹é¨ååç´  */\r\n  public removeElement(scrollId: string, scrollGroupId: string = this.defaultId): void {\r\n    const elements = this.scrollSpies[scrollGroupId].elements.filter((el): boolean => {\r\n      return el.id !== scrollId\r\n    }\r\n    );\r\n    if (!elements.length) {\r\n      delete this.scrollSpies[scrollGroupId];\r\n      return;\r\n    }\r\n    this.scrollSpies[scrollGroupId].elements = elements;\r\n  }\r\n  /**å¤æ­scrollGroupId æ¯å¦æidåä¸ºelementId çåç´  */\r\n  private hasElement(elementId: string, scrollGroupId: string): boolean {\r\n    return this.scrollSpies[scrollGroupId].elements.some((element): boolean => element.id === elementId);\r\n  }\r\n  /**è®¾ç½®offset */\r\n  public setOffset(offset: number = 0, contentId: string = this.defaultId): void {\r\n    if (contentId !== '') {\r\n      this.offsets[contentId] = offset;\r\n    }\r\n    else {\r\n      this.offsets[this.defaultId] = offset;\r\n    }\r\n  }\r\n  /*ScrollSpyç»ä»¶(éç¹åè¡¨åºåï¼åå§åé¢è®¾defaultId */\r\n  setGroupId(groupid) {\r\n    if (groupid) {\r\n      this.defaultId = groupid;\r\n    }\r\n  }\r\n\r\n  getGroupId() {\r\n    return this.defaultId;\r\n  }\r\n  /*æ¹å ScrollSpyç»ä»¶ï¼éç¹åè¡¨åºåï¼çæ¾ç¤ºç¶ææ¶ */\r\n  changeGroupIdFollowType(groupid, followTypeData) {\r\n    this.scrollSpyListFollowTypeChanges[groupid] = followTypeData;\r\n    this.updateContainerClsName(groupid);\r\n  }\r\n  private updateContainerClsName(groupid) {\r\n    // æ²¡æå¾æ´æ°åå\r\n    if (!this.scrollSpyListFollowTypeChanges.hasOwnProperty(groupid)) {\r\n      return;\r\n    }\r\n    // containerå¹¶ä¸å­å¨çæ¶å\r\n    if (!this.scrollContents.hasOwnProperty(groupid)) {\r\n      return;\r\n    }\r\n    let followTypeData = this.scrollSpyListFollowTypeChanges[groupid];\r\n    let containerEl = this.scrollContents[groupid];\r\n    // ContainerçElement \r\n    if (followTypeData['prev'] == 'fixedTab') {\r\n      //ç§»é¤class\r\n      containerEl.className = containerEl.className.replace(this.fixedTabContainerClsName, '');\r\n    } else if (followTypeData['next'] == 'fixedTab') {\r\n      // å¢å class\r\n      containerEl.className += ' ' + this.fixedTabContainerClsName;\r\n    }\r\n    this.scrollSpyListFollowTypeChanges[groupid] = null;\r\n  }\r\n\r\n  updateScrollSpiesActiveClsName(groupId,currentId) {\r\n    // è¿½å ãç§»é¤class\r\n    this.scrollSpies[groupId].elements.map((item: ScrollElement) => {\r\n      if (item.id == currentId) {\r\n        // æ¾å°å½å\r\n        if (item.element.className.indexOf(this.scrollSpyPartActiveClsName) < 0) {\r\n          item.element.className += ' ' + this.scrollSpyPartActiveClsName;\r\n        }\r\n      } else {\r\n        // å¶ä»\r\n        item.element.className = item.element.className.replace(this.scrollSpyPartActiveClsName, '');\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * å½è¿½å ScrollSpyåçæ¶åï¼å¤æ­æ¯å¦æ¯å·²ç»è®¾ç½®çå½å\r\n   * @param groupId \r\n   * @param scrollEl \r\n   */\r\n  private  updateScrollSpyActiveClsName(groupId,scrollEl:ScrollElement){\r\n    // å¦æå·²è®¾ç½®\r\n    if(this.currentSectionIdObj[groupId]){\r\n      if(this.currentSectionIdObj[groupId]['idValue']==scrollEl.id){\r\n        scrollEl.element.className+=' '+this.scrollSpyPartActiveClsName;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","export function getUuid () {\r\n    var s = [];\r\n    var hexDigits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    for (var i = 0; i < 36; i++) {\r\n      s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n    }\r\n    s[14] = \"4\";\r\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\r\n    s[8] = s[13] = s[18] = s[23] = \"-\";\r\n    let uuid = s.join(\"\");\r\n    return uuid;\r\n}","import { Component, OnInit, Input, ElementRef, AfterViewInit, OnDestroy, Directive, TemplateRef, ContentChild, ViewChild, ChangeDetectorRef} from '@angular/core';\r\nimport { FarrisScrollSpyService } from './farris-scrollspy.service';\r\nimport { Subject } from 'rxjs';\r\nimport { getUuid } from './utils';\r\n\r\n@Directive({\r\n    selector: '[scrollspyItem]'\r\n  })\r\n  export class ScrollspyItemTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) {}\r\n  }\r\n\r\nexport interface scrollspyData {\r\n    \"id\": string,\r\n    \"title\": string,\r\n    \"visible\"?: boolean\r\n  }\r\n// æ»å¨çå¬åè¡¨ï¼æ¾ç¤ºæ¨¡å¼æ¹åï¼æåºäºä»¶ç»æ\r\ninterface SpyListFollowTypeChange{\r\n  prev:string,\r\n  next:string\r\n}\r\n\r\n@Component({\r\n  selector: 'farris-scrollspy',\r\n  templateUrl:'./farris-scrollspy.component.html',\r\n  styleUrls:[\r\n    './farris-scrollspy.component.scss'\r\n  ]\r\n})\r\nexport class ScrollspyComponent implements OnInit,AfterViewInit {\r\n\r\n    @ContentChild(ScrollspyItemTemplateDirective, {read: TemplateRef}) scrollspyTemplate: TemplateRef<any>;\r\n    /**æ»å¨æ°æ®åè¡¨ */\r\n    // @Input() scrollspyData:scrollspyData[];\r\n    /**å½åactiveé¨åid */\r\n    @Input() currentSectionId:string;\r\n    /**å½åæ»å¨æægroup */\r\n    @Input() scrollGroupId:string = getUuid();\r\n    /**å½åæ»å¨æ¾ç¤ºæ ·å¼ï¼é»è®¤ side å¯éåæ° tabãfixedTab */\r\n    private _followType='side';\r\n    // è®°å½ç¶ææ¹å\r\n    private _emitFollowType:SpyListFollowTypeChange=null;\r\n    @Input() \r\n    set fFollowType(value:string){\r\n      if(value!==this._followType){\r\n        this._emitFollowType={\r\n          prev:this._followType,\r\n          next:value\r\n        };\r\n        this.changeFollowType();\r\n        this._followType=value;\r\n      }\r\n    }    \r\n    get fFollowType():string{\r\n      return this._followType;\r\n    }\r\n\r\n    @Input() sidetabWidth:number = 145;\r\n\r\n    @ViewChild(\"scrollyspyList\") scrollyspyListEl;\r\n\r\n    _scrollspyData:scrollspyData[];\r\n\r\n    @Input()\r\n    set scrollspyData(value){\r\n      if(value){\r\n        this._scrollspyData = value.filter((item) =>{\r\n          if(item.hasOwnProperty('visible') && !item.visible){\r\n            return false\r\n          }\r\n          else{\r\n            return true;\r\n          }\r\n        });\r\n        if(this._scrollspyData && this._scrollspyData.length && !this.currentSectionId ){\r\n          this.currentSectionId = this._scrollspyData[0].id;\r\n        }\r\n        this.scrollSpy.setCurrentSectionIdObj(this.scrollGroupId, this.currentSectionId);\r\n        // console.log(this._scrollspyData);\r\n      }\r\n    }\r\n    get scrollspyData(){\r\n      return this._scrollspyData;\r\n    }\r\n\r\n\r\n    constructor( private elementRef: ElementRef, private scrollSpy: FarrisScrollSpyService,private changeDetector: ChangeDetectorRef, ) { }\r\n\r\n    ngOnInit() {\r\n      // if(this.scrollspyData && this.scrollspyData.length && !this.currentSectionId ){\r\n      //   this.currentSectionId = this.scrollspyData[0].id;\r\n      // }\r\n      // this.scrollSpy.setCurrentSectionIdObj(this.scrollGroupId, this.currentSectionId);\r\n      // console.log(this.scrollGroupId);\r\n      this.scrollSpy.setGroupId(this.scrollGroupId);\r\n      this.changeFollowType();\r\n      // è·åå½åSectionçId\r\n      this.scrollSpy.getCurrentSectionId(this.scrollGroupId).subscribe((currentId)=>{\r\n        this.currentSectionId = currentId;\r\n        this.scrollSpy.updateScrollSpiesActiveClsName(this.scrollGroupId,currentId);\r\n        //console.log(this.scrollGroupId,this.currentSectionId);\r\n      });\r\n\r\n      // è·åå¯¹åºContaineråºåï¼å¨æ»å¨æ¶çå½åSectionçåå\r\n      this.scrollSpy.updateScrollGroup(this.scrollGroupId).subscribe((currentSection: string): void => {\r\n        //console.log('111',currentSection);\r\n          this.scrollSpy.setCurrentSectionId(this.scrollGroupId,currentSection);\r\n\r\n          //this.changeDetector.markForCheck();\r\n        });\r\n    }\r\n    // æ¹åFollowTypeæ¶\r\n    changeFollowType(){\r\n      if(this.scrollGroupId&&this._emitFollowType){\r\n        this.scrollSpy.changeGroupIdFollowType(this.scrollGroupId,this._emitFollowType);\r\n        this._emitFollowType=null;\r\n      }\r\n    }\r\n    ngAfterViewInit(): void {\r\n        /**å½æ»å¨ä½ç½®ä¸ºsideæ¶ï¼è¯¥ç»ä»¶æè¿ç¶èç¹æ·»å relativeå®ä½ */\r\n        const parent = this.elementRef.nativeElement.parentElement;\r\n        if(!parent.style.position && parent.style.position !== 'relative' && this.fFollowType === 'side'){\r\n            parent.style.position = 'relative';\r\n        }\r\n        // if(this.scrollspyData && this.scrollspyData.length && this.currentSectionId){\r\n        //   if(this.currentSectionId !== this.scrollspyData[0].id){\r\n        //     console.log(222);\r\n        //     const element = this.scrollyspyListEl.nativeElement.querySelector(\"#scrollspy-\"+this.currentSectionId);\r\n        //     const follow = {\r\n        //       element: element,\r\n        //       id: this.currentSectionId\r\n        //     };\r\n        //     const groupId = this.scrollGroupId ? this.scrollGroupId: 'default';\r\n        //     this.scrollSpy.fScrollFollowClick(groupId,follow);\r\n        //   }\r\n        // }\r\n        \r\n    }\r\n\r\n}","import { Directive, Injectable, Input, EventEmitter, Output, ElementRef, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef, HostBinding } from '@angular/core';\r\nimport { FarrisScrollSpyService } from './farris-scrollspy.service';\r\n//éç¹é¨å\r\n@Directive({\r\n    selector: '[fScrollSpy]'\r\n})\r\nexport class FarrisScrollSpyDirective implements OnInit,AfterViewInit, OnDestroy {\r\n    @Input('fScrollSpy') scrollId: string;\r\n    @Input('fScrollGroup') scrollGroupId: string;\r\n  \r\n    constructor(\r\n      private elementRef: ElementRef,\r\n      private scrollSpy: FarrisScrollSpyService,\r\n    ) {}\r\n  \r\n    public ngOnInit(): void {\r\n      this.elementRef.nativeElement.className+=' f-scrollspy-part';\r\n      if(!this.scrollGroupId){\r\n        this.scrollGroupId = this.scrollSpy.getGroupId();\r\n      }\r\n      //this.scrollSpy.addElement(this.elementRef.nativeElement, this.scrollId,this.scrollGroupId);\r\n    }\r\n    ngAfterViewInit(){\r\n      this.scrollSpy.addElement(this.elementRef.nativeElement, this.scrollId,this.scrollGroupId);\r\n    }\r\n  \r\n    public ngOnDestroy(): void {\r\n      this.scrollSpy.removeElement(this.scrollId, this.scrollGroupId);\r\n    }\r\n  }\r\n//è·éç¹å»\r\n@Directive({\r\n    selector: '[fScrollFollowElement]'\r\n})\r\nexport class FscrollFollowElementDirective implements OnInit, OnDestroy {\r\n\r\n    //@Input() followId: string;\r\n    @Input('fScrollFollowElement') followId:string;\r\n    @Input('fScrollElement') followGroupId:string;\r\n    constructor(\r\n      private elementRef: ElementRef,\r\n      private scrollSpy: FarrisScrollSpyService,\r\n    ) {}\r\n  \r\n    public ngOnInit(): void {\r\n      if(!this.followGroupId){\r\n        this.followGroupId = this.scrollSpy.getGroupId();\r\n      }\r\n      this.scrollSpy.addFollowElement(this.elementRef.nativeElement, this.followId, this.followGroupId);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n      this.scrollSpy.removeFollowElement(this.followId, this.followGroupId);\r\n    }\r\n\r\n  }\r\n\r\n//çå¬æ»å¨é¨åcontent\r\n@Directive({\r\n    selector: '[fScrollSpyContainer]'\r\n})\r\nexport class FscrollSpyContainerDirective implements OnInit,AfterViewInit, OnDestroy {\r\n  \r\n  @Input() fOffset:number;\r\n  @Input('fScrollSpyContainer') fScrollGroupId:string;\r\n  @Output() fScrollChange = new EventEmitter;\r\n\r\n  @HostBinding(\"style.position\") position = \"relative\";\r\n\r\n    constructor( \r\n      private elementRef: ElementRef,\r\n      private scrollSpy: FarrisScrollSpyService,\r\n      private changeDetector: ChangeDetectorRef,\r\n    ) {}\r\n  \r\n    public ngOnInit(): void {\r\n      if(!this.fScrollGroupId){\r\n        this.fScrollGroupId = this.scrollSpy.getGroupId();\r\n      }\r\n      this.elementRef.nativeElement.className+=' f-scrollspy-container';\r\n      this.scrollSpy.addContentElement(this.elementRef.nativeElement, this.fScrollGroupId);\r\n      this.scrollSpy.setOffset(this.fOffset, this.fScrollGroupId);\r\n      this.scrollSpy.updateScrollGroup(this.fScrollGroupId).subscribe((currentSection: string): void => {\r\n        //console.log('111',currentSection);\r\n        console.log('section-group'+currentSection);\r\n          this.fScrollChange.emit(currentSection);\r\n\r\n          // this.scrollSpy.setCurrentSectionId(this.fScrollGroupId,currentSection);\r\n\r\n          // this.changeDetector.markForCheck();\r\n        });\r\n    }\r\n  \r\n    ngAfterViewInit(){\r\n      // this.scrollSpy.getCurrentSection$(this.fScrollGroupId)\r\n      // .subscribe((currentSection: string): void => {\r\n      //   this.fScrollChange.next(currentSection);\r\n      //   this.changeDetector.markForCheck();\r\n      // });\r\n\r\n    }\r\n    public ngOnDestroy(): void {\r\n      this.scrollSpy.removeContentElement(this.fScrollGroupId);\r\n    }\r\n\r\n  }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FarrisScrollSpyDirective, FscrollFollowElementDirective, FscrollSpyContainerDirective } from './farris-scrollspy.directive';\r\nimport { ScrollspyComponent,ScrollspyItemTemplateDirective } from './farris-scrollspy.component';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n\r\n@NgModule({\r\n  declarations: [ScrollspyComponent,ScrollspyItemTemplateDirective,FarrisScrollSpyDirective,FscrollFollowElementDirective,FscrollSpyContainerDirective],\r\n  imports: [\r\n    CommonModule,\r\n    LocaleModule.forRoot()\r\n  ],\r\n  exports: [ScrollspyComponent,ScrollspyItemTemplateDirective,FarrisScrollSpyDirective,FscrollFollowElementDirective,FscrollSpyContainerDirective]\r\n})\r\nexport class ScrollspyModule { }\r\n"]}