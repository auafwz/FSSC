{"version":3,"sources":["ng://@farris/ui-forms/lib/radio/radio-group.component.ts","ng://@farris/ui-forms/lib/radio/radio.component.ts","ng://@farris/ui-forms/lib/radio/radio-button.component.ts","ng://@farris/ui-forms/lib/radio/radiogroup.component.ts","ng://@farris/ui-forms/lib/checkbox/checkbox-group.component.ts","ng://@farris/ui-forms/lib/checkbox/checkbox.component.ts","ng://@farris/ui-forms/lib/checkbox/checkboxgroup.component.ts","ng://@farris/ui-forms/lib/textarea-autosize.directive.ts","ng://@farris/ui-forms/lib/textarea-wordcount.directive.ts","ng://@farris/ui-forms/lib/textarea-zoom.directive.ts","ng://@farris/ui-forms/lib/input-append.directive.ts","ng://@farris/ui-forms/lib/shortcut-tab.directive.ts","ng://@farris/ui-forms/lib/forms.module.ts"],"names":["RadioGroupComponent","prototype","ngOnInit","this","name","idSer","generate","replace","changeModel","value","model","modelChange","emit","controlChange","writeValue","registerOnChange","fn","registerOnTouched","controlTouch","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","IdService","Input","Output","EventEmitter","subscriber","RadioComponent","Object","defineProperty","hasParent","el","nativeElement","radioGroup","nyModel","changeModelHandler","label","element","parentElement","classList","contains","decorators","type","Optional","ElementRef","HostBinding","blockClass","RadioButtonComponent","isGroupModel","encapsulation","ViewEncapsulation","None","FarrisRadioGroupComponent","clickHandler","item","val","_getValue","changeValue","_getText","commonUtils","getValue","textField","valueField","exportAs","Injector","inject","data","get","CommonUtils","CheckboxGroupComponent","index","findIndex","ele","splice","push","join","CheckboxComponent","checkbox","_this","find","FarrisCheckboxGroupComponent","setCheckboxData","loadData","loadDataSubscription","subscribe","res","ngOnChanges","changes","ngOnDestroy","unsubscribe","arrValue","transformToArr","String","length","some","filter","n","transformToStr","checked","isStringValue","split","separator","allVals","map","r","forEach","TextareaAutoSizeDirective","init","enable","isFirstChange","sizeToFit","ngAfterViewInit","minHeight","textarea","getBoundingClientRect","height","document","ownerDocument","documentElement","ngControl","valueChanges","v","previousValue","onInput","onValueChange","overflowOffset","offsetTop","body","offsetParent","top","defaultView","pageYOffset","bottom","clientHeight","offsetHeight","isUserResized","offsetWidth","textareaStyle","getComputedStyle","topBorderWidth","Number","borderTopWidth","bottomBorderWidth","borderBottomWidth","borderAddOn","boxSizing","maxHeight","style","container","HTMLElement","containerHeight","h","scrollHeight","Directive","NgControl","HostListener","injector","TextareaWordcountDirective","initWordCount","useWordCount","destroy","wordCountElement","remove","onlyShowInDialog","createWordCountElement","createWordCountID","tagName","id","max","maxLength","console","info","wordCountSPAN","render","createElement","className","setStyle","after","currentLengthSPAN","appendChild","currentLengthElement","updateWordsCount","listen","countType","tip","innerText","title","localeSer","Renderer2","eventManager","EventManager","LocaleService","TextareaZoomDirective","useZoom","createZoomButton","onMouseEnter","onMouseLeave","onClick","altEnterHandler","zoomButtonElement","bindEventHandler","addEventListener","event","target","preventDefault","stopPropagation","createZoombarID","zoomSPAN","zoomTextarea","opts","width","dialogWidth","dialogHeight","showFontSize","saveSize","window","localStorage","key","messagerService","getKeyString","getItem","lastSetting","JSON","parse","fontSize","showText","readOnly","disabled","readonly","showOkButton","prompt2","enableWordCount","wordCountRef","control","setValue","fullscreen","MessagerService","InputAppendDirective","_enableAppend","appendWrapElement","createStruct","resetStruct","_inputAppendText","removeChild","appendTextElement","innerHTML","_disabled","addClass","disabledCls","removeClass","elWrapElement","inputAppendControlType","wrapParent","parentNode","inputAppendText","enableAppend","buttonWrap","inputAppendType","buttonTextWrap","textParent","inputWrap","outerHTML","indexOf","inputGroupEl","querySelector","ngZone","runOutsideAngular","setTimeout","inputGroupEl2","ev","inputAppendClickEvent","ViewContainerRef","viewRef","NgZone","ShortCutTabKeyDirective","e","onTabKeydownHandler","currentTarget","allInputs","querySelectorAll","nextInputIndex","Array","from","nextInputTarget","focus","FarrisFormsModule","NgModule","declarations","imports","CommonModule","FormsModule","MessagerModule","forRoot","FarrisCommonModule","LocaleModule","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, forwardRef, HostBinding } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { IdService } from '@farris/ui-common';\r\n@Component({\r\n    selector: 'farris-radio-group',\r\n    template: `\r\n    <div class=\"farris-radio-group btn-group\"\r\n    [class.farris-input-wrap]=\"type!=='button'\"\r\n    [class.btn-group-toggle]=\"type==='button'\"\r\n    [class.farris-checkradio-hor]=\"horizontal\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => RadioGroupComponent),\r\n        multi: true,\r\n    }],\r\n    styles: [`\r\n    `],\r\n})\r\nexport class RadioGroupComponent implements OnInit, ControlValueAccessor {\r\n    /* radio ç±»å */\r\n    @Input() type: string;\r\n\r\n    /* åå§å radio çå¼ */\r\n    @Input() model: any;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() horizontal: boolean;\r\n\r\n    @Output() modelChange = new EventEmitter<any>();\r\n\r\n    // tslint:disable-next-line:ban-types\r\n    subscriber: Function[] = [];\r\n\r\n    constructor(private idSer: IdService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.name = this.idSer.generate().replace(/-/g, '_');\r\n    }\r\n\r\n    changeModel(value: any) {\r\n        this.model = value;\r\n        this.modelChange.emit(this.model);\r\n        this.controlChange(value);\r\n    }\r\n\r\n    writeValue(value: any): void {\r\n        this.model = value;\r\n        this.changeModel(this.model);\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.controlChange = fn\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.controlTouch = fn\r\n    }\r\n\r\n    private controlChange: Function = () => { }\r\n    private controlTouch: Function = () => { }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter, forwardRef, Optional, ElementRef, HostBinding, ChangeDetectorRef, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { RadioGroupComponent } from './radio-group.component';\r\n\r\n@Component({\r\n  selector: 'farris-radio',\r\n  templateUrl: './radio.component.html',\r\n  styleUrls: ['./radio.component.css'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => RadioComponent),\r\n    multi: true,\r\n  }]\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RadioComponent implements ControlValueAccessor, OnInit {\r\n\r\n  /* radio åçname ç¨äºå¤ä¸ªradioåéä½¿ç¨ */\r\n  // get name() {\r\n  //   if (this.hasParent(this.el.nativeElement)) {\r\n  //     return this.radioGroup.name;\r\n  //   }\r\n  // }\r\n \r\n  /* radio å¼ */\r\n  @Input()\r\n  get model(): any {\r\n    if (this.hasParent(this.el.nativeElement)) {\r\n      return this.radioGroup.model;\r\n    }\r\n    return this.nyModel;\r\n  }\r\n\r\n  set model(model: any) {\r\n    this.nyModel = model;\r\n  }\r\n\r\n\r\n  @Input() id: string;\r\n\r\n  /* radio å¼ */\r\n  @Input() label: any = '';\r\n\r\n  /* ç¦ç¨ */\r\n  @Input() disabled: boolean;\r\n\r\n  nyModel: any;\r\n\r\n  name = '';\r\n\r\n  @Output() modelChange = new EventEmitter<any>();\r\n\r\n  @HostBinding('class.d-block') blockClass = true;\r\n\r\n  constructor(\r\n    @Optional() private radioGroup: RadioGroupComponent,\r\n    private el: ElementRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.name = this.radioGroup.name;\r\n  }\r\n\r\n  changeModelHandler() {\r\n    // ç¶åç´ è·ålabel  å­åç´ åä»ç¶åç´ è·åmodel\r\n    if (this.hasParent(this.el.nativeElement)) {\r\n      return this.radioGroup.changeModel(this.label);\r\n    }\r\n    this.model = this.label;\r\n    this.modelChange.emit(this.model);\r\n    this.controlChange(this.label);\r\n  }\r\n\r\n  /* æ¯å¦å­å¨ç¶åç´   å­å¨å³åéç»*/\r\n  hasParent(element: any) {\r\n    return element.parentElement.classList.contains('farris-radio-group');\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.model = value;\r\n  }\r\n\r\n  registerOnChange(fn: Function): void {\r\n    this.controlChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: Function): void {\r\n    this.controlTouch = fn;\r\n  }\r\n\r\n  private controlChange: Function = () => { };\r\n  private controlTouch: Function = () => { };\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter, forwardRef, Optional, ElementRef, ViewEncapsulation, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { RadioGroupComponent } from './radio-group.component';\r\nimport { HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'farris-radio-button',\r\n    template: `\r\n    <label [class]=\"'btn btn-'+type\" [class.active]=\"isGroupModel()\" [class.disabled]=\"disabled\">\r\n        <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\"\r\n        [ngModel]=\"model\" (ngModelChange)=\"changeModelHandler()\" type=\"radio\" [disabled]=\"disabled\">\r\n          <ng-content>\r\n          </ng-content>\r\n    </label>\r\n  `,\r\n    styles: [\r\n        `\r\n        .farris-radio-button>.btn{\r\n            margin-left:-1px\r\n          }\r\n          .farris-radio-button>.btn.active, .farris-radio-button>.btn:hover{\r\n            position: relative;\r\n          }\r\n      `\r\n    ],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => RadioButtonComponent),\r\n        multi: true,\r\n    }],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class RadioButtonComponent implements ControlValueAccessor, OnInit {\r\n\r\n    /* radio åçname ç¨äºå¤ä¸ªradioåéä½¿ç¨ */\r\n    // get name() {\r\n\r\n    // }\r\n    name = '';\r\n\r\n    /* æé®ç±»å */\r\n    @Input()\r\n    type = 'secondary';\r\n\r\n    /* radio å¼ */\r\n    @Input()\r\n    get model(): any {\r\n        if (this.hasParent(this.el.nativeElement)) {\r\n            return this.radioGroup.model;\r\n        }\r\n        return this.nyModel;\r\n    }\r\n\r\n    set model(model: any) {\r\n        this.nyModel = model;\r\n    }\r\n\r\n\r\n    @Input()\r\n    id: string;\r\n\r\n    /* radio å¼ */\r\n    @Input()\r\n    label: any = '';\r\n\r\n    /* ç¦ç¨ */\r\n    @Input()\r\n    disabled: boolean;\r\n\r\n    nyModel: any;\r\n\r\n    @Output()\r\n    modelChange = new EventEmitter<any>();\r\n\r\n\r\n    @HostBinding('class.farris-radio-button')\r\n    get farrisRadioButtonClass() { return true; }\r\n\r\n    constructor(\r\n        @Optional() public radioGroup: RadioGroupComponent,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.name = this.hasParent(this.el.nativeElement) ? this.radioGroup.name : '';\r\n    }\r\n\r\n    isGroupModel() {\r\n        return this.label === this.radioGroup.model;\r\n    }\r\n\r\n    changeModelHandler() {\r\n        // ç¶åç´ è·ålabel  å­åç´ åä»ç¶åç´ è·åmodel\r\n        if (this.hasParent(this.el.nativeElement)) {\r\n            return this.radioGroup.changeModel(this.label);\r\n        }\r\n        this.model = this.label;\r\n        this.modelChange.emit(this.model);\r\n        this.controlChange(this.label);\r\n    }\r\n\r\n    /* æ¯å¦å­å¨ç¶åç´   å­å¨å³åéç»*/\r\n    hasParent(element: any) {\r\n        return element.parentElement.classList.contains('farris-input-wrap') || element.parentElement.classList.contains('btn-group');\r\n    }\r\n\r\n    writeValue(value: any): void {\r\n        this.model = value;\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.controlChange = fn\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.controlTouch = fn\r\n    }\r\n\r\n    private controlChange: Function = () => { }\r\n    private controlTouch: Function = () => { }\r\n\r\n}\r\n","import { Component, Input, forwardRef, OnInit, EventEmitter, Optional, Injector } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, RadioControlValueAccessor } from '@angular/forms';\r\nimport { IdService, CommonUtils } from '@farris/ui-common';\r\nimport { Radio } from './radio';\r\nimport { Output } from '@angular/core';\r\n@Component({\r\n    selector: 'farris-radiogroup',\r\n    templateUrl: './radiogroup.component.html',\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => FarrisRadioGroupComponent),\r\n        multi: true,\r\n    }],\r\n    exportAs: 'FarrisRadioGroupComponent'\r\n})\r\nexport class FarrisRadioGroupComponent implements ControlValueAccessor, OnInit {\r\n    @Input('tab-index') tabIndex: number;\r\n    /* radio æ°ç» */\r\n    @Input() data: Radio[] = [];\r\n\r\n    /* radio ç±»å   åçæèæé®ç±»å*/\r\n    @Input() type: string;\r\n\r\n    /* nameæ è¯ */\r\n    @Input() name: string;\r\n\r\n    /* æ°´å¹³æå */\r\n    @Input() horizontal: boolean;\r\n\r\n    /* ç¦ç¨ */\r\n    @Input() disabled: boolean;\r\n\r\n    /* radio å¼ */\r\n    @Input() value: any;\r\n    @Input() textField = 'name';\r\n    @Input() valueField = 'value';\r\n    /* ç¹å»äºä»¶ */\r\n    @Output() changeValue = new EventEmitter<any>();\r\n    private commonUtils: CommonUtils;\r\n    constructor(private idSer: IdService, @Optional() private inject: Injector) {\r\n        if (this.inject) {\r\n            this.commonUtils = this.inject.get(CommonUtils);\r\n        }\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.name = this.idSer.generate().replace(/-/g, '_');\r\n    }\r\n\r\n    clickHandler(item: any) {\r\n        let val = this._getValue(item);\r\n        if(this.value == val) return;\r\n        // æ´æ¹controlçå¼\r\n        this.value = val;\r\n        this.controlChange(this.value);\r\n        this.controlTouch(this.value);\r\n        this.changeValue.emit(this.value);\r\n    }\r\n\r\n    _getText(item) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue) {\r\n                return this.commonUtils.getValue(this.textField, item);\r\n            } else {\r\n                return item[this.textField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    _getValue(item) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue) {\r\n                return this.commonUtils.getValue(this.valueField, item);\r\n            } else {\r\n                return item[this.valueField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n\r\n    writeValue(value: any): void {\r\n        this.value = value;\r\n    }\r\n\r\n    registerOnChange(fn: () => void): void {\r\n        this.controlChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.controlTouch = fn;\r\n    }\r\n\r\n    private controlChange: (value: any) => void = () => { };\r\n    private controlTouch: (value: any) => void = () => { };\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, forwardRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { IdService } from '@farris/ui-common';\r\n@Component({\r\n    selector: 'farris-checkbox-group',\r\n    template: `\r\n    <div class=\"farris-input-wrap\" [class.farris-checkradio-hor]=\"horizontal\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => CheckboxGroupComponent),\r\n        multi: true,\r\n    }],\r\n    styles: [],\r\n})\r\nexport class CheckboxGroupComponent implements OnInit, ControlValueAccessor {\r\n\r\n    /* åå§å checkbox çå¼ */\r\n    @Input()\r\n    model = [];\r\n\r\n    /* è®¾ç½®é»è®¤nameå¼ */\r\n    @Input()\r\n    name: string;\r\n\r\n    /* æ§ä»¶æ°´å¹³æå */\r\n    @Input()\r\n    horizontal: boolean;\r\n\r\n    /*  */\r\n    @Output()\r\n    modelChange = new EventEmitter<any>();\r\n\r\n    constructor(private idSer: IdService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.name = this.idSer.generate();\r\n    }\r\n\r\n    changeModel(value: any) {\r\n        const index = this.model.findIndex(ele => {\r\n            return ele === value;\r\n        });\r\n        // å¦æå·²ç»éä¸­  åè®¾ç½®ä¸ºä¸éä¸­\r\n        if (index > -1) {\r\n            this.model.splice(index, 1);\r\n            return this.modelChange.emit(this.model);\r\n        }\r\n        // å¦ææ²¡æéä¸­  è®¾ç½®ä¸ºéä¸­\r\n        this.model.push(value);\r\n        // controlçå¼è®¾ç½®ä¸ºéå·åéçå­ç¬¦ä¸²  ä¾¿äºå­å¨åä¼ é\r\n        this.controlChange(this.model.join());\r\n        this.modelChange.emit(this.model);\r\n    }\r\n    writeValue(value: any): void {\r\n        this.model = value\r\n        this.changeModel(this.model)\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.controlChange = fn\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.controlTouch = fn\r\n    }\r\n\r\n    private controlChange: Function = () => { }\r\n    private controlTouch: Function = () => { }\r\n\r\n}\r\n","import { Component, OnInit, Input, ElementRef, forwardRef, Output, EventEmitter } from '@angular/core';\r\nimport { CheckboxGroupComponent } from './checkbox-group.component';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n@Component({\r\n  selector: 'farris-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => CheckboxComponent),\r\n    multi: true,\r\n  }],\r\n  styles: ['./checkbox.component.css']\r\n})\r\nexport class CheckboxComponent implements OnInit, ControlValueAccessor {\r\n\r\n   /* radio åçname ç¨äºå¤ä¸ªradioåéä½¿ç¨ */\r\n   get name() {\r\n    if (this.hasParent(this.el.nativeElement)) {\r\n      return this.checkbox.name;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /* model */\r\n  @Input()\r\n  get model() {\r\n    if (this.hasParent(this.el.nativeElement)) {\r\n      return this.checkbox.model.find(ele => {\r\n        return ele === this.label;\r\n      });\r\n    }\r\n    return this.nyModel;\r\n  }\r\n\r\n  set model(model: any) {\r\n    this.nyModel = model;\r\n  }\r\n\r\n  /* checkboxå¼ */\r\n  @Input()\r\n  label: any;\r\n\r\n  /* ç¦ç¨ */\r\n  @Input()\r\n  disabled: boolean;\r\n\r\n  @Output()\r\n  modelChange = new EventEmitter<any>();\r\n  nyModel: any;\r\n  constructor(\r\n    private checkbox: CheckboxGroupComponent,\r\n    private el: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  /* å¼ä¼ é */\r\n  changeModelHandler() {\r\n    // ç¶åç´ è·ålabel  å­åç´ åä»ç¶åç´ è·åmodel\r\n    if (this.hasParent(this.el.nativeElement)) {\r\n      return this.checkbox.changeModel(this.label);\r\n    }\r\n    this.model = this.label;\r\n    this.modelChange.emit(this.model);\r\n    this.controlChange(this.label);\r\n  }\r\n\r\n\r\n  /* æ¯å¦å­å¨ç¶åç´   å­å¨å³åéç»*/\r\n  hasParent(element: any) {\r\n    return element.parentElement.classList.contains('farris-input-wrap');\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.model = value;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.controlChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.controlTouch = fn;\r\n  }\r\n  private controlChange: Function = () => { }\r\n  private controlTouch: Function = () => { }\r\n\r\n}\r\n","import { OnDestroy, SimpleChanges, OnChanges, Optional, Injector } from '@angular/core';\r\n/*\r\n * @Author: è¡çæ´(Yuyang)\r\n * @Date: 2019-08-29\r\n * @LastEditors:  è¡çæ´(Yuyang)\r\n * @LastEditTime: 2019-08-29\r\n * @QQ: 664927877\r\n * @Version: v0.0.8\r\n */\r\nimport { Component, Input, forwardRef, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { IdService, CommonUtils } from '@farris/ui-common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'farris-checkboxgroup',\r\n    templateUrl: './checkboxgroup.component.html',\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => FarrisCheckboxGroupComponent),\r\n        multi: true,\r\n    }],\r\n    exportAs: 'FarrisCheckboxGroupComponent'\r\n})\r\nexport class FarrisCheckboxGroupComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input('tab-index') tabIndex: number;\r\n\r\n    /* radio æ°ç» */\r\n    @Input() data: any[] = [];\r\n\r\n    /* checkbox ç±»å   åçæèæé®ç±»å*/\r\n    @Input() type: string;\r\n\r\n    /* å¤éæ¡name */\r\n    @Input() name: string;\r\n\r\n    /* æ¯å¦æ°´å¹³åå¸ */\r\n    @Input() horizontal: boolean;\r\n\r\n    /* åéç¬¦ é»è®¤éå·*/\r\n    @Input() separator = ',';\r\n\r\n    /* ç¦ç¨ */\r\n    @Input() disable: boolean;\r\n\r\n    /* å¤éæ¡ç»çå¼ */\r\n    @Input() value: any;\r\n\r\n    /* å¼ç±»åæ¯å¦æ¯string */\r\n    @Input() isStringValue = true;\r\n\r\n    @Input() textField = 'name';\r\n    @Input() valueField = 'value';\r\n\r\n    /** å è½½æ°æ®äºä»¶ */\r\n    @Input() loadData: (emptyData?: any[]) => Observable<any>;\r\n    loadDataSubscription: Subscription;\r\n\r\n    @Output() changeValue = new EventEmitter<any>();\r\n\r\n    /* checkboxèµå¼äºä»¶ */\r\n    @Output() setCheckboxData = new EventEmitter<any>();\r\n\r\n    private commonUtils: CommonUtils;\r\n\r\n    constructor(private idSer: IdService, @Optional() private inject: Injector) {\r\n        if (this.inject) {\r\n            this.commonUtils = this.inject.get(CommonUtils);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        // åå§åname\r\n        this.name = this.idSer.generate().replace(/-/g, '_');\r\n\r\n        this.setCheckboxData.emit(this);\r\n        // todo åå¼å¯ä»¥å®ç°promise\r\n        if (this.loadData) {\r\n            this.loadDataSubscription = this.loadData().subscribe(res => this.data = res.data);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.loadDataSubscription) {\r\n            this.loadDataSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    _getText(item) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue) {\r\n                return this.commonUtils.getValue(this.textField, item);\r\n            } else {\r\n                return item[this.textField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    _getValue(item) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue) {\r\n                return this.commonUtils.getValue(this.valueField, item);\r\n            } else {\r\n                return item[this.valueField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /* éä¸­inputå¼ */\r\n    clickHandler(item: any, index: number) {\r\n        let arrValue = this.transformToArr(this.value) || [];\r\n\r\n        const val = String(this._getValue(item));\r\n        if (!arrValue || !arrValue.length) {\r\n            arrValue.push(val);\r\n        } else {\r\n            if (arrValue.some(item => item == val)) {\r\n                arrValue = arrValue.filter(n => n !== val);\r\n            } else {\r\n                arrValue.push(val);\r\n            }\r\n        }\r\n\r\n        // æ´æ°valueå¼\r\n        this.value = this.transformToStr(arrValue);\r\n\r\n        // ä¼ å¼formcontrol\r\n        this.controlChange(this.value);\r\n        this.controlTouch(this.value);\r\n        this.changeValue.emit(this.value);\r\n    }\r\n\r\n    /* è¢«éä¸­ */\r\n    checked(item: any) {\r\n        const val = String(this._getValue(item));\r\n        const checkedValue = this.transformToArr(this.value);\r\n        // å¤å¼\r\n        return checkedValue.some(item => item == val);\r\n    }\r\n\r\n    /* å¼å°æ°ç»å¼çè½¬æ¢ */\r\n    transformToArr(value: any): string[] {\r\n        if (!value) {\r\n            return [];\r\n        }\r\n        if (!this.isStringValue) {\r\n            return value;\r\n        }\r\n\r\n        return value.split(this.separator);\r\n    }\r\n\r\n    /* å¼å°å­ç¬¦ä¸²å¼çè½¬æ¢ */\r\n    transformToStr(value: Array<string>) {\r\n\r\n        const allVals = this.data.map(n => this._getValue(n));\r\n        const r = [];\r\n        allVals.forEach(n => {\r\n            if (value.some(item => item == n)) {\r\n                r.push(n);\r\n            }\r\n        });\r\n\r\n        if (!this.isStringValue) {\r\n            return r;\r\n        }\r\n        return r.join(this.separator);\r\n    }\r\n\r\n\r\n    writeValue(value: any): void {\r\n        this.value = value;\r\n    }\r\n\r\n    /* changeæä½å¼åå  æ¹æ³éå*/\r\n    registerOnChange(fn: () => void): void {\r\n        this.controlChange = fn;\r\n    }\r\n\r\n    /* blurå¼åå  æ¹æ³éå*/\r\n    registerOnTouched(fn: () => void): void {\r\n        this.controlTouch = fn;\r\n    }\r\n\r\n    private controlChange: (value: any) => void = () => { };\r\n    private controlTouch: (value: any) => void = () => { };\r\n\r\n}\r\n","import { Directive, Input, Injector, OnInit, ElementRef, HostListener, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\n\r\n@Directive({\r\n    selector: '[auto-size]',\r\n})\r\nexport class TextareaAutoSizeDirective implements OnInit, AfterViewInit, OnChanges{\r\n    @Input('auto-size') enable = true;\r\n    @Input() maxHeight: number;\r\n\r\n    private previousValue = null;\r\n    private isUserResized = false;\r\n\r\n    private textarea;\r\n    private document;\r\n    private documentElement;\r\n    private minHeight;\r\n\r\n    constructor(private el: ElementRef, private ngControl: NgControl, private injector: Injector) {\r\n        this.textarea = this.el.nativeElement;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.enable && !changes.enable.isFirstChange()) {\r\n            this.sizeToFit();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.minHeight = this.textarea.getBoundingClientRect().height;\r\n    }\r\n\r\n    private init() {\r\n        if (this.enable) {\r\n            this.document = this.textarea.ownerDocument;\r\n            this.documentElement = this.document.documentElement;\r\n            if (this.textarea) {\r\n                if (this.textarea.value) {\r\n                    this.sizeToFit();\r\n                }\r\n            }\r\n\r\n            if (this.ngControl) {\r\n                this.ngControl.valueChanges.subscribe(v => {\r\n                    if (v !== this.previousValue) {\r\n                        this.sizeToFit();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('input')\r\n    onInput() {\r\n        this.sizeToFit();\r\n    }\r\n\r\n    @HostListener('change')\r\n    onValueChange() {\r\n        this.sizeToFit();\r\n    }\r\n\r\n\r\n    private overflowOffset() {\r\n        let offsetTop = 0;\r\n        let el = this.textarea;\r\n\r\n        while (el !== document.body && el !== null) {\r\n            offsetTop += el.offsetTop || 0;\r\n            el = el.offsetParent;\r\n        }\r\n\r\n        const top = offsetTop - document.defaultView.pageYOffset;\r\n        const bottom = this.documentElement.clientHeight - (top + this.textarea.offsetHeight);\r\n        return { top, bottom };\r\n    }\r\n\r\n    private sizeToFit() {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n\r\n        const textarea = this.textarea;\r\n        const viewportMarginBottom = 100;\r\n        if (this.isUserResized) { return; }\r\n        if (this.textarea.value === this.previousValue) { return; }\r\n        if (this.textarea.offsetWidth <= 0 && this.textarea.offsetHeight <= 0) { return; }\r\n\r\n        // const { top, bottom } = this.overflowOffset();\r\n        // if (top < 0 || bottom < 0) {\r\n        //     return;\r\n        // }\r\n\r\n        const textareaStyle = getComputedStyle(textarea);\r\n\r\n        const topBorderWidth = Number(textareaStyle.borderTopWidth.replace(/px/, ''));\r\n        const bottomBorderWidth = Number(textareaStyle.borderBottomWidth.replace(/px/, ''));\r\n\r\n        const isBorderBox = textareaStyle.boxSizing === 'border-box';\r\n        const borderAddOn = isBorderBox ? topBorderWidth + bottomBorderWidth : 0;\r\n\r\n        // const maxHeight = Number(textareaStyle.height.replace(/px/, '')) + bottom;\r\n        // const adjustedViewportMarginBottom = bottom < viewportMarginBottom ? bottom : viewportMarginBottom;\r\n        // textarea.style.maxHeight = `${maxHeight - adjustedViewportMarginBottom}px`;\r\n\r\n        if (this.maxHeight) {\r\n            textarea.style.maxHeight = `${this.maxHeight}px`;\r\n        }\r\n\r\n        const container = textarea.parentElement;\r\n        if (container instanceof HTMLElement) {\r\n            const containerHeight = container.style.height;\r\n            container.style.height = getComputedStyle(container).height;\r\n            textarea.style.height = 'auto';\r\n\r\n            let h = textarea.scrollHeight + borderAddOn;\r\n            if (this.minHeight > h) {\r\n                h = this.minHeight;\r\n            }\r\n            textarea.style.height = `${h}px`;\r\n            container.style.height = containerHeight;\r\n        }\r\n\r\n        this.previousValue = textarea.value;\r\n    }\r\n}\r\n","import { Directive, ElementRef, Injector, Input, Renderer2,\r\n    OnInit, AfterViewInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { EventManager } from '@angular/platform-browser';\r\n\r\n@Directive({\r\n    selector: '[word-count]',\r\n    exportAs: 'WordCountRef'\r\n})\r\nexport class TextareaWordcountDirective implements OnInit, AfterViewInit, OnDestroy, OnChanges {\r\n    @Input('word-count') useWordCount = true;\r\n    /**\r\n     * ç»è®¡å­æ°çæ¹å¼ï¼ surplus å©ä½å¯è¾å¥å­æ°; length: å½åå·²è¾å¥å­æ°ï¼\r\n     *\r\n     * é»è®¤ä¸º surplus\r\n     */\r\n    @Input() countType: 'surplus' | 'length' = 'surplus';\r\n\r\n    @Input() onlyShowInDialog = false;\r\n\r\n    wordCountElement = null;\r\n    // å½åå­æ°\r\n    private currentLengthElement = null;\r\n    private eventManager: EventManager;\r\n    private ngControl: NgControl;\r\n    private onInput = null;\r\n    private localeSer: LocaleService;\r\n    constructor(private el: ElementRef, private render: Renderer2, private injector: Injector) {\r\n        this.eventManager = this.injector.get(EventManager);\r\n        this.localeSer = this.injector.get(LocaleService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initWordCount();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n\r\n        if (changes.useWordCount && !changes.useWordCount.isFirstChange()) {\r\n            if (this.useWordCount) {\r\n                this.initWordCount();\r\n            } else {\r\n                this.destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n\r\n    private destroy() {\r\n        if (this.onInput) {\r\n            this.onInput();\r\n        }\r\n\r\n        if (this.wordCountElement) {\r\n            this.wordCountElement.remove();\r\n        }\r\n    }\r\n\r\n    initWordCount() {\r\n        if (this.useWordCount && !this.onlyShowInDialog) {\r\n            this.createWordCountElement();\r\n        }\r\n    }\r\n\r\n    private createWordCountID() {\r\n        const tagName = this.el.nativeElement.tagName;\r\n        if (this.ngControl) {\r\n            const ctrlName = this.ngControl.name;\r\n            return `${tagName}_WORDCOUNT_${ctrlName}`;\r\n        } else {\r\n            if (this.el.nativeElement.id) {\r\n                return `${tagName}_WORDCOUNT_${this.el.nativeElement.id}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private createWordCountElement() {\r\n        const max = this.el.nativeElement.maxLength;\r\n        if (!max || max < 0) {\r\n            console.info('æªè®¾ç½®æå¤§å­ç¬¦æ°ï¼è®¡æ°åè½å¤±æã');\r\n            return;\r\n        }\r\n\r\n        const wordCountSPAN = this.render.createElement('span');\r\n        wordCountSPAN.className = 'textarea-wordcount';\r\n\r\n        const id = this.createWordCountID();\r\n        if (id) {\r\n            wordCountSPAN.id = id;\r\n        }\r\n\r\n        this.render.setStyle(wordCountSPAN, 'position', 'absolute');\r\n        this.render.setStyle(wordCountSPAN, 'bottom', '10px');\r\n        this.render.setStyle(wordCountSPAN, 'right', '20px');\r\n        this.render.setStyle(wordCountSPAN, 'cursor', 'pointer');\r\n\r\n        this.el.nativeElement.after(wordCountSPAN);\r\n        this.wordCountElement = wordCountSPAN;\r\n\r\n        const currentLengthSPAN = this.render.createElement('span');\r\n        wordCountSPAN.appendChild(currentLengthSPAN);\r\n        this.currentLengthElement = currentLengthSPAN;\r\n        currentLengthSPAN.after( ` / ${max}` );\r\n\r\n        this.updateWordsCount();\r\n        this.onInput = this.render.listen(this.el.nativeElement, 'input', () => {\r\n            // value.replace(/\\n|\\r/gi, '') // ç§»é¤æ¢è¡ç¬¦\r\n            this.updateWordsCount();\r\n        });\r\n    }\r\n\r\n    updateWordsCount() {\r\n        const max = this.el.nativeElement.maxLength;\r\n        const val = this.countType === 'surplus' ? max - this.el.nativeElement.value.length : this.el.nativeElement.value.length;\r\n        const tip = 'messager.prompt.tips.' + this.countType;\r\n\r\n        this.currentLengthElement.innerText = val;\r\n        this.wordCountElement.title = this.localeSer.getValue(tip).replace('{0}', val);\r\n    }\r\n}\r\n","import { TextareaWordcountDirective } from './textarea-wordcount.directive';\r\nimport { NgControl } from '@angular/forms';\r\nimport { Directive, ElementRef, Renderer2, Injector, OnInit, Input,\r\n            AfterViewInit, OnDestroy, OnChanges, SimpleChanges, Optional } from '@angular/core';\r\nimport { EventManager } from '@angular/platform-browser';\r\nimport { MessagerService } from '@farris/ui-messager';\r\n\r\n@Directive({\r\n    selector: '[textarea-zoom]',\r\n})\r\nexport class TextareaZoomDirective implements OnInit, AfterViewInit, OnDestroy, OnChanges {\r\n    @Input('textarea-zoom') useZoom = true;\r\n    @Input() dialogWidth = 500;\r\n    @Input() dialogHeight = 400;\r\n    @Input() fullscreen = false;\r\n    @Input() title = '';\r\n    @Input() value = '';\r\n\r\n    onMouseEnter = null;\r\n    onMouseLeave = null;\r\n    onClick = null;\r\n    altEnterHandler = null;\r\n\r\n    zoomButtonElement = null;\r\n\r\n    private messagerService: MessagerService;\r\n    private eventManager: EventManager;\r\n    private ngControl: NgControl;\r\n    constructor(private el: ElementRef, private render: Renderer2, private injector: Injector,\r\n                @Optional() private wordCountRef: TextareaWordcountDirective ) {\r\n        this.messagerService = this.injector.get(MessagerService);\r\n        this.eventManager = this.injector.get(EventManager);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.useZoom && !changes.useZoom.isFirstChange()) {\r\n            if (this.useZoom) {\r\n                this.createZoomButton();\r\n            } else {\r\n                this.destroy();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.useZoom) {\r\n            this.createZoomButton();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    private destroy() {\r\n        if (this.onMouseEnter) {\r\n            this.onMouseEnter();\r\n        }\r\n        if (this.onMouseLeave) {\r\n            this.onMouseLeave();\r\n        }\r\n\r\n        if (this.onClick) {\r\n            this.onClick();\r\n        }\r\n        if (this.altEnterHandler) {\r\n            this.altEnterHandler();\r\n        }\r\n\r\n        if (this.zoomButtonElement) {\r\n            this.zoomButtonElement.remove();\r\n        }\r\n    }\r\n\r\n    private bindEventHandler() {\r\n        this.altEnterHandler = this.eventManager.addEventListener(this.el.nativeElement, 'keydown.alt.enter',\r\n        (event: KeyboardEvent) => {\r\n            const target = (event.target as any);\r\n            const val = target.value + '\\n';\r\n            target.value = val;\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return false;\r\n        });\r\n    }\r\n\r\n    private createZoombarID() {\r\n        const tagName = this.el.nativeElement.tagName;\r\n        if (this.ngControl) {\r\n            const ctrlName = this.ngControl.name;\r\n            return `${tagName}_ZOOMBAR_${ctrlName}`;\r\n        } else {\r\n            if (this.el.nativeElement.id) {\r\n                return `${tagName}_ZOOMBAR_${this.el.nativeElement.id}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private createZoomButton() {\r\n        const zoomSPAN = this.render.createElement('span');\r\n        zoomSPAN.className = 'f-icon modal_maximize textarea-zoom';\r\n        zoomSPAN.title = 'ç¹å»åå¼¹åºè¿è¡ç¼è¾';\r\n\r\n        const id = this.createZoombarID();\r\n        if (id) {\r\n            zoomSPAN.id = id;\r\n        }\r\n\r\n        this.render.setStyle(zoomSPAN, 'position', 'absolute');\r\n        this.render.setStyle(zoomSPAN, 'top', '2px');\r\n        this.render.setStyle(zoomSPAN, 'right', '2px');\r\n        this.render.setStyle(zoomSPAN, 'cursor', 'pointer');\r\n\r\n        this.el.nativeElement.after(zoomSPAN);\r\n\r\n        this.zoomButtonElement = zoomSPAN;\r\n\r\n        this.onMouseEnter = this.render.listen(zoomSPAN, 'mouseenter', () => {\r\n            this.render.setStyle(zoomSPAN, 'fontSize', '22px');\r\n        });\r\n        this.onMouseLeave = this.render.listen(zoomSPAN, 'mouseleave', () => {\r\n            this.render.setStyle(zoomSPAN, 'fontSize', '1rem');\r\n        });\r\n\r\n        this.onClick = this.render.listen(zoomSPAN, 'click', () => {\r\n            this.zoomTextarea();\r\n        });\r\n    }\r\n\r\n    private zoomTextarea() {\r\n        const opts: any = {\r\n            width: this.dialogWidth || 500,\r\n            height: this.dialogHeight || 400,\r\n            showFontSize: true,\r\n            saveSize: true    // å¯ç¨ä¸ªæ§åå­å¨ï¼localStorage\r\n        };\r\n\r\n        if (window.localStorage) {\r\n            const key = this.messagerService.getKeyString();\r\n            const val = localStorage.getItem(key);\r\n            if (val) {\r\n                const lastSetting = JSON.parse(val);\r\n                opts.fontSize = lastSetting.fontSize || 18;\r\n                opts.width = lastSetting.width || opts.width;\r\n                opts.height = lastSetting.height || opts.height;\r\n            }\r\n        }\r\n\r\n        const tagName = this.el.nativeElement.tagName;\r\n        let showText = this.el.nativeElement.value;\r\n        if (this.ngControl) {\r\n            showText = this.ngControl.value;\r\n        } else {\r\n            showText = this.el.nativeElement.value;\r\n        }\r\n\r\n        showText = this.value || showText;\r\n\r\n\r\n        if (tagName === 'FARRIS-TEXT' || this.el.nativeElement.readOnly || this.el.nativeElement.disabled) {\r\n            opts.readonly = true;\r\n            opts.showOkButton = false;\r\n            this.messagerService.prompt2(this.title, showText, opts).subscribe();\r\n        } else {\r\n            opts.maxLength = this.el.nativeElement.maxLength;\r\n            opts.enableWordCount = this.wordCountRef ? this.wordCountRef.useWordCount : false;\r\n            opts.countType = this.wordCountRef ? this.wordCountRef.countType : 'length';\r\n            this.messagerService.prompt2(this.title, showText, opts).subscribe(v => {\r\n                if (typeof v === 'boolean' && !v) {\r\n                    return;\r\n                } else {\r\n                    this.ngControl.control.setValue(v);\r\n                    if (this.wordCountRef) {\r\n                        this.wordCountRef.updateWordsCount();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","import {\r\n    Directive, ElementRef, Renderer2, Injector, OnInit, Input,\r\n    AfterViewInit, OnDestroy, OnChanges, SimpleChanges, Output, ViewContainerRef, TemplateRef, NgZone\r\n} from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\n\r\n@Directive({\r\n    selector: '[input-append]',\r\n})\r\nexport class InputAppendDirective implements OnInit, AfterViewInit, OnDestroy {\r\n    private _enableAppend = true;\r\n    // ç¸å½äºå¯ç¨ç¦ç¨æ­¤åè½\r\n    @Input('input-append')\r\n    set enableAppend(value: string | boolean) {\r\n        if (value === '' || value) {\r\n            this._enableAppend = true;\r\n            // éè¦\r\n            if (!this.appendWrapElement) {\r\n                this.createStruct();\r\n            }\r\n        } else {\r\n            this._enableAppend = false;\r\n            if (this.appendWrapElement) {\r\n                this.resetStruct();\r\n            }\r\n        }\r\n    }\r\n    get enableAppend() {\r\n        return this._enableAppend;\r\n    }\r\n    // è¿½å å°åªä¸ªç±»åä¸ TextBoxãMultiTextBoxã StaticText\r\n    @Input() inputAppendControlType = \"InputGroup\";\r\n    // æ ¹æ®ç±»åä¸ä¸æ ·ï¼å¨æ§ä»¶å¤äºç¦ç¨ãåªè¯»æ¶ï¼å³å®é¢è²æ¯å¦å¯ç¨\r\n    @Input() inputAppendType = \"button\";\r\n    // è¿½å çææ¬\r\n    private _inputAppendText = '';\r\n    @Input()\r\n    set inputAppendText(value: string) {\r\n        if (value != this._inputAppendText) {\r\n            this._inputAppendText = value;\r\n            if (this.appendWrapElement && this._enableAppend) {\r\n                this.render.removeChild(this.appendWrapElement, this.appendTextElement);\r\n                this.appendTextElement.innerHTML = value;\r\n                this.render.appendChild(this.appendWrapElement, this.appendTextElement);\r\n            } else {\r\n                this.createStruct();\r\n            }\r\n        }\r\n    }\r\n    get inputAppendText() {\r\n        return this._inputAppendText;\r\n    }\r\n    // æ¨¡æ¿\r\n    // @Input() inputAppendTmpl: TemplateRef<any>;\r\n    private _disabled = false;\r\n    @Input()\r\n    set inputAppendDisabled(value) {\r\n        if (value != this._disabled) {\r\n            this._disabled = value;\r\n            if (this.appendWrapElement) {\r\n                value && this.render.addClass(this.appendWrapElement, this.disabledCls);\r\n                !value && this.render.removeClass(this.appendWrapElement, this.disabledCls);\r\n            }\r\n        }\r\n    }\r\n    get inputAppendDisabled() {\r\n        return this._disabled;\r\n    }\r\n\r\n    /*\r\n    * ææ¬ç¹å»äºä»¶\r\n    */\r\n    @Output() inputAppendClickEvent = new EventEmitter();\r\n    // æ è®°nativeçå¤å±\r\n    private elWrapElement = null;\r\n    // æ è®°åç´ \r\n    private appendWrapElement = null;\r\n    // ææ¶ä¸ç¨\r\n    private appendTextElement = null;\r\n    private clickHandler = null;\r\n    private disabledCls = 'f-state-disabled';\r\n    private ngZone: NgZone = null;\r\n    // private ngControl: NgControl;\r\n    constructor(private viewRef: ViewContainerRef, private el: ElementRef, private render: Renderer2, private injector: Injector) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n    }\r\n\r\n    ngOnInit() {\r\n        //this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n\r\n    ngAfterViewInit() {\r\n        this.createStruct();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        //this.resetStruct();\r\n        if (this.clickHandler) {\r\n            this.clickHandler();\r\n            this.clickHandler = null;\r\n        }\r\n        if (this.appendWrapElement) {\r\n            this.appendWrapElement.remove();\r\n            this.appendWrapElement = null;\r\n        }\r\n        if(this.elWrapElement){\r\n            this.elWrapElement.remove();\r\n            this.elWrapElement = null;\r\n        }\r\n    }\r\n    /**\r\n     * éç½®\r\n     */\r\n    private resetStruct() {\r\n        if (this.clickHandler) {\r\n            this.clickHandler();\r\n            this.clickHandler = null;\r\n        }\r\n        // åç±»åç§»é¤ä¸åæ°å¢å çç»æææ ·å¼\r\n        switch (this.inputAppendControlType) {\r\n            case 'StaticText':\r\n                this.render.removeClass(this.el.nativeElement, 'f-cmp-static-text-input-append');\r\n                break;\r\n            case 'TextBox':\r\n            case 'MultiTextBox':\r\n                if (this.elWrapElement) {\r\n                    let wrapParent = this.render.parentNode(this.elWrapElement);\r\n                    this.render.appendChild(wrapParent, this.el.nativeElement);\r\n                    this.elWrapElement.remove();\r\n                    this.elWrapElement = null;\r\n                }\r\n                break;\r\n        }\r\n        if (this.appendWrapElement) {\r\n            this.appendWrapElement.remove();\r\n            this.appendWrapElement = null;\r\n        }\r\n    }\r\n    /**\r\n     * åå»º\r\n     */\r\n    private createStruct() {\r\n        if (!this.inputAppendText || !this.enableAppend || this.appendWrapElement) {\r\n            return;\r\n        }\r\n        const buttonWrap = this.render.createElement('div');\r\n        buttonWrap.className = 'input-group-append input-append-wrapper';\r\n        buttonWrap.className += ' input-append-' + this.inputAppendType;\r\n        if (this._disabled) {\r\n            buttonWrap.className += ' ' + this.disabledCls;\r\n        }\r\n        const buttonTextWrap = this.render.createElement('div');\r\n        buttonTextWrap.className = 'input-group-text';\r\n        buttonTextWrap.innerHTML = this.inputAppendText;\r\n        this.appendTextElement = buttonTextWrap;\r\n        this.appendWrapElement = buttonWrap;\r\n        this.render.appendChild(buttonWrap, buttonTextWrap);\r\n        switch (this.inputAppendControlType) {\r\n            case 'StaticText':\r\n                // æ­¤æ¶è¿æ²¡æçæåé¨çæ ·å¼\r\n                // let textareaEl = this.el.nativeElement.querySelector('.f-form-control-textarea');\r\n                this.render.addClass(this.el.nativeElement, 'f-cmp-static-text-input-append'+(this._disabled?' '+this.disabledCls:''));\r\n                this.render.appendChild(this.el.nativeElement, buttonWrap);\r\n                break;\r\n            case 'TextBox':\r\n            case 'MultiTextBox':\r\n                let textParent = this.render.parentNode(this.el.nativeElement);\r\n                const inputWrap = this.render.createElement('div');\r\n                inputWrap.className = 'f-cmp-text-input-append'+(this._disabled?' '+this.disabledCls:'');\r\n                if (this.el.nativeElement.outerHTML.indexOf('textarea') > -1) {\r\n                    inputWrap.className = 'f-cmp-textarea-input-append'+(this._disabled?' '+this.disabledCls:'');\r\n                }\r\n                this.elWrapElement = inputWrap;\r\n                this.render.appendChild(inputWrap, this.el.nativeElement);\r\n                this.render.appendChild(inputWrap, buttonWrap);\r\n                this.render.appendChild(textParent, inputWrap);\r\n                break;\r\n            default:\r\n                // å­å¨ç±»ä¼¼ä¸æè¿æ ·çæ§ä»¶ï¼åé¨è°ç¨input-groupç»æè¿æ²¡æåå§å\r\n                let inputGroupEl = this.el.nativeElement.querySelector('.input-group');\r\n                if (inputGroupEl) {\r\n                    this.render.appendChild(inputGroupEl, buttonWrap);\r\n                } else {\r\n                    if (this.ngZone) {\r\n                        this.ngZone.runOutsideAngular(() => {\r\n                            setTimeout(() => {\r\n                                let inputGroupEl2 = this.el.nativeElement.querySelector('.input-group');\r\n                                this.render.appendChild(inputGroupEl2, buttonWrap);\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n        }\r\n\r\n        if (this.inputAppendType == 'button') {\r\n            this.clickHandler = this.render.listen(this.appendWrapElement, 'click', (ev) => {\r\n                this.inputAppendClickEvent.emit(ev);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { EventManager } from '@angular/platform-browser';\r\nimport { Directive, ElementRef, Injector, OnInit, AfterViewInit } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: 'shortcut-tab',\r\n})\r\nexport class ShortCutTabKeyDirective implements OnInit, AfterViewInit {\r\n\r\n    constructor(public el: ElementRef, public injector: Injector, private eventManager: EventManager) {}\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.eventManager.addEventListener(this.el.nativeElement, 'keydown',  (e: KeyboardEvent) => {\r\n            e.stopPropagation();\r\n            if (e.key === 'Tab') {\r\n                this.onTabKeydownHandler(e.target);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onTabKeydownHandler(currentTarget) {\r\n        let allInputs = this.el.nativeElement.querySelectorAll('input,textarea');\r\n        allInputs = Array.from(allInputs);\r\n        const currentInputIndex = allInputs.findIndex(n => n === currentTarget);\r\n        let nextInputIndex = currentInputIndex + 1;\r\n        if (nextInputIndex >= allInputs.length) {\r\n            nextInputIndex = 0;\r\n        }\r\n        const nextInputTarget = allInputs[nextInputIndex];\r\n        if (nextInputTarget) {\r\n            setTimeout(() => {\r\n                nextInputTarget.focus();\r\n            });\r\n        }\r\n    }\r\n}\r\n","\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IdService, FarrisCommonModule } from '@farris/ui-common';\r\n\r\nimport { RadioComponent } from './radio/radio.component';\r\nimport { RadioButtonComponent } from './radio/radio-button.component';\r\nimport { RadioGroupComponent } from './radio/radio-group.component';\r\nimport { FarrisRadioGroupComponent } from './radio/radiogroup.component';\r\nimport { CheckboxComponent } from './checkbox/checkbox.component';\r\nimport { CheckboxGroupComponent } from './checkbox/checkbox-group.component';\r\nimport { FarrisCheckboxGroupComponent } from './checkbox/checkboxgroup.component';\r\nimport { TextareaAutoSizeDirective } from './textarea-autosize.directive';\r\nimport { TextareaZoomDirective } from './textarea-zoom.directive';\r\nimport {InputAppendDirective} from './input-append.directive';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { ShortCutTabKeyDirective } from './shortcut-tab.directive';\r\nimport { TextareaWordcountDirective } from './textarea-wordcount.directive';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n@NgModule({\r\n    declarations: [\r\n        RadioComponent,\r\n        RadioGroupComponent,\r\n        CheckboxComponent,\r\n        CheckboxGroupComponent,\r\n        RadioButtonComponent,\r\n        FarrisRadioGroupComponent,\r\n        FarrisCheckboxGroupComponent,\r\n        TextareaAutoSizeDirective,\r\n        TextareaZoomDirective,\r\n        ShortCutTabKeyDirective,\r\n        TextareaWordcountDirective,\r\n        InputAppendDirective\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MessagerModule.forRoot(),\r\n        FarrisCommonModule.forRoot(),\r\n        LocaleModule\r\n    ],\r\n    exports: [\r\n        RadioComponent,\r\n        RadioGroupComponent,\r\n        CheckboxComponent,\r\n        CheckboxGroupComponent,\r\n        RadioButtonComponent,\r\n        FarrisRadioGroupComponent,\r\n        FarrisCheckboxGroupComponent,\r\n        TextareaAutoSizeDirective,\r\n        TextareaZoomDirective,\r\n        ShortCutTabKeyDirective,\r\n        TextareaWordcountDirective,\r\n        InputAppendDirective\r\n    ],\r\n    providers: [IdService],\r\n})\r\nexport class FarrisFormsModule { }\r\n"]}