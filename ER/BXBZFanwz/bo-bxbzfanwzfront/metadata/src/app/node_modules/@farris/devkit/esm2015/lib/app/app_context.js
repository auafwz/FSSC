/**
 * 应用上下文
 * @author Witt<jiwt@inspur.com>
 * @todo
 * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；
 */
import { Injectable, Injector, Optional, SkipSelf, InjectFlags } from '@angular/core';
import { Router } from '@angular/router';
import { Context } from '../context/index';
import { BindingData, BindingDataFactory } from '../binding-data';
import { FrameContextManager } from './frame_contex_manager';
import { FrameComponentRefresher } from './frame_component_refresher';
import { RepositoryManager } from './repository_mananger';
import { BindingDataManager } from './binding_data_manager';
import { ChangeDetectionController } from './change_detection_controller';
import { AppContextManager } from './app_context_manager';
import { Subject } from 'rxjs';
import { ComponentManager } from './component_manager';
import { UID } from '../misc/uid';
import { FORM_ID } from './tokens';
import { MessageManager } from '../message/messagemanager';
import { MessageData } from '../message/messagedata';
import { MessageBody } from '../message/messagebody';
import { VALIDATION_HANDLER } from '../validation';
import { throwIfEmpty } from 'rxjs/operators';
import { ContextMetadataBuilder } from './app_metadata_collector';
import { StateMachine } from '../state-machine';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser, VariableParseService } from '../variable';
import { ViewModelManager } from './view_model_manager';
import { Repository } from '../repository';
import { UIState } from '../ui-state';
import { ContextMetadataManager } from './render_context_metadata_manager';
import { Form } from '../form';
import { ViewModel } from '../view-model';
import { FrameContext } from '../frame/frame_context';
import { NAMESPACE, FRAME_ID } from '../frame/tokens';
import { DEVKIT_RUN_MODE, RunMode } from '../core';
import { RunModeService } from '../misc/run_mode_service';
class AppContext extends Context {
    /**
     * 构造函数
     */
    constructor(injector, appContextManager, parent) {
        super();
        this.typeName = 'AppContext';
        /**
         * 是否已经销毁
         */
        this.isFormDestoryed = false;
        /**
         * 应用程序标识
         */
        this.applicationId = null;
        this.token = null;
        /**
         * 是否使用独立的eventBus
         * @memberof AppContext
         */
        this.useIsoluteEventBus = false;
        /**
         * 应用上下文元数据描述
         */
        this.metadata = {};
        this.injector = injector;
        this.appContextManager = appContextManager;
        this.formId = this.injector && this.injector.get(FORM_ID, null) || null;
        // 默认运行模式为兼容模式
        this.runMode = this.injector && this.injector.get(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;
        RunModeService.setRunMode(this.runMode);
        this.params.set('formId', this.formId);
        this.params.set('appId', this.ApplicationId);
        this.params.set('token', this.Token);
        // 确定父子关系
        if (!parent) {
            this.parent = null;
            this.root = this;
        }
        else {
            this.parent = parent;
            this.root = parent.root;
        }
        this.registerToManager();
        this.frameContextManager = new FrameContextManager(this);
        this.frameComponentRefresher = new FrameComponentRefresher();
        this.repositoryManager = new RepositoryManager();
        this.bindingDataManager = new BindingDataManager();
        this.changeDetectionController = new ChangeDetectionController(this.frameContextManager);
        this.messagePipe = new Subject();
        this.componentRefs = new Map();
        this.componentManager = new ComponentManager(this);
        this.contextMetadataManager = new ContextMetadataManager();
        this.opened = false;
        // this.sortConditionManager = new SortConditionManager();
        // this.filterConditionManager = new FilterConditionManager();
        this.router = this.injector && this.injector.get(Router);
        this.viewModelManager = new ViewModelManager();
        this.contextMetadataBuilder = new ContextMetadataBuilder();
        this.variableParseService = new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]);
        this.initMessageEvent();
    }
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
     * @deprecated
     * @summary
     * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。
     */
    get frameContexts() {
        return this.frameContextManager.getFrameContextMap();
    }
    get formModule() {
        return this.formMetadataContent ? this.formMetadataContent.module : null;
    }
    /**
     * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数据
     * @param controllers 前端构件元数据
     */
    initializeByMetadata(formMetadataContent, stateMachineMetadata, controllers) {
        this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);
        if (!this.stateMachine) {
            this.stateMachine = this.injector.get(StateMachine, new StateMachine());
        }
        this.formMetadataContent = formMetadataContent;
        this.controllers = controllers;
    }
    /**
     * Register current AppContext instance to AppContextManager
     */
    registerToManager() {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.registerAppContext(this);
    }
    /**
     * Unregister current AppContext instance from AppContextManager
     */
    unregisterFromManager(frameContext) {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.unregisterAppContext(this);
        // 清理repository及bindingData 
        // const frameContexts = this.frameContextManager.getFrameContexts();
        if (frameContext) {
            const repository = frameContext.repository;
            const repositoryName = repository.name;
            if (this.repositoryManager.ifRepositoryExits(repositoryName)) {
                this.repositoryManager.unRegisteRepository(repositoryName);
            }
            if (this.bindingDataManager.ifBindingDataExits(repositoryName)) {
                this.bindingDataManager.unRegisteBindingData(repositoryName);
            }
        }
    }
    /**
     * 注册FrameContext
     */
    regFrameContext(frameContext) {
        const repository = frameContext.repository;
        const repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            let bindingData = null;
            if (this.runMode === RunMode.highSpeed) {
                bindingData = BindingDataFactory.createFromRepository(repository, '/');
                this.bindingDataManager.regBindingData(repositoryName, bindingData);
            }
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.frameContextManager.regFrameContext(frameContext);
    }
    regContextMetadata(componentId, contextMetadata) {
        if (!this.contextMetadataManager.exsit(componentId)) {
            this.contextMetadataManager.register(componentId, contextMetadata);
        }
    }
    /**
     * 获取整个表单的AppContext
     */
    getFormAppContext() {
        return this;
    }
    /**
     * 销毁表单
     * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制
     */
    destory() {
        this.isFormDestoryed = true;
    }
    /**
     * 表单是否已经被销毁
     */
    get isDestoryed() {
        return this.isFormDestoryed;
    }
    /**
     * 应用id
     */
    get ApplicationId() {
        if (!!this.applicationId) {
            return this.applicationId;
        }
        this.applicationId = UID.create();
        return this.applicationId;
    }
    set ApplicationId(appId) {
        this.applicationId = appId;
    }
    get Token() {
        if (!!this.token) {
            return this.token;
        }
        this.token = UID.create();
        return this.token;
    }
    set Token(token) {
        this.token = token;
    }
    // #region 弃用的老方法
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    registerCommandHandler(frameId, component) {
        this.frameComponentRefresher.regFrameComponent(frameId, component);
    }
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    refresh() {
        this.frameComponentRefresher.refreshComponents();
    }
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。
     * @deprecated
     */
    getFrameContext(frameId) {
        return this.frameContextManager.getFrameContextById(frameId);
    }
    getContextById(identify) {
        const context = this.frameContextManager.getFrameContextById(identify);
        return context;
    }
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
     * @deprecated
     */
    getAllFrameContexts() {
        return this.frameContextManager.getFrameContextMap();
    }
    /**
     * 处理行变更
     */
    handleSelectChange(change, srcFrameContext) {
        const force = change.force || false;
        this.frameContexts.forEach((targetFrameContext) => {
            // 相同的FrameCotnext或者Repository不一致的情况下，不同步
            if (targetFrameContext === srcFrameContext
                || targetFrameContext.repository !== srcFrameContext.repository) {
                return;
            }
            const bindingData = targetFrameContext.bindingData;
            const bindingList = bindingData.getValue(change.path);
            const currentId = change.value['id'];
            if (bindingList && bindingList.currentId !== currentId || force) {
                // 设置当前行，但不对外广播
                bindingList.setCurrentId(currentId, true, false, force);
            }
        });
    }
    // #endregion
    initMessageEvent() {
        if (this.parent && this.parent !== this) {
            let resultTask;
            const messager = MessageManager.getMessager();
            messager.setAppContext(this);
            messager.listner((msg) => {
                const source = msg.sender;
                const data = msg.data;
                const appcontext = messager.getAppContext();
                const allFrameContext = appcontext.frameContextManager.getFrameContextMap();
                if (data.command === 'wf-required-verification') { // 工作流的必填校验
                    // 注入ValidationHandler
                    const validation = this.injector.get(VALIDATION_HANDLER, null, InjectFlags.Optional);
                    if (validation) {
                        resultTask = validation.validateAll();
                    }
                }
                else {
                    const command = this.findHandler(allFrameContext, data.command);
                    if (command) {
                        resultTask = command(data.arguments);
                    }
                }
                if (resultTask) {
                    resultTask.pipe(throwIfEmpty()).subscribe((result) => {
                        // 向来源方回传消息
                        const retMsg = new MessageBody(new MessageData());
                        retMsg.data.result = true; // 目标方法返回值
                        retMsg.type = 'message';
                        retMsg.target = source;
                        messager.send(retMsg);
                    }, () => {
                        const retMsg = new MessageBody(new MessageData());
                        retMsg.data.result = false; // 目标方法返回值
                        retMsg.type = 'message';
                        retMsg.target = source;
                        messager.send(retMsg);
                    });
                }
            });
        }
    }
    findHandler(contextMap, command) {
        let func;
        const temp = [...contextMap.values()];
        // tslint:disable-next-line: forin
        for (const v in temp) {
            const vm = temp[v].viewModel;
            if (vm && vm.hasOwnProperty(command)) {
                func = vm[command];
                return func;
            }
        }
    }
    buildRenderViewContext(componentId) {
        // 提取视图模型集合
        const viewModels = this.formModule.viewmodels;
        // 提取组件描述集合
        const viewComponents = this.formModule.components;
        // 提取schema节点
        const schema = this.formModule.schemas[0];
        // 查找匹配指定标识的组件节点
        const matchedComponent = viewComponents.find(component => component.id === componentId);
        // 匹配指定组件的视图模型节点
        const matchedViewModel = viewModels.find(viewModel => matchedComponent.viewModel === viewModel.id);
        // 查找匹配视图模型的父节点
        const parentViewModel = viewModels.find(viewModel => viewModel.id === matchedViewModel.parent);
        let parentComponentId = '';
        // 如果匹配上上级视图模型，提上级视图标识
        if (parentViewModel) {
            const parentComponent = viewComponents.find(component => component.viewModel === parentViewModel.id);
            if (parentComponent) {
                parentComponentId = parentComponent.id;
            }
        }
        // 如果存在上级组件，提取器上下文对象。
        // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;
        // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);
        this.buildRenderViewContextRecursively(matchedViewModel, schema);
    }
    buildRenderViewContextRecursively(viewModel, schema) {
        const controllers = this.controllers;
        const viewComponents = this.formModule.components;
        const matchedComponent = viewComponents.find(component => component.viewModel === viewModel.id);
        const contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers);
        // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);
        // const commandHandlerExtends: CommandHandlerExtender[] = [];
        // const viewContext = new ViewComponentContext(
        //   contextMetadata,
        //   this,
        //   parent,
        //   this.injector
        // );
        // this.regFrameContext(viewContext);
        // viewContext.init();
        this.regContextMetadata(matchedComponent.id, contextMetadata);
        const viewModels = this.formModule.viewmodels;
        const subViewModels = viewModels.filter(subViewModel => subViewModel.parent === viewModel.id);
        if (subViewModels && subViewModels.length) {
            subViewModels.forEach(subViewModel => {
                this.buildRenderViewContextRecursively(subViewModel, schema);
            });
        }
    }
    getComponentProviders(componentId) {
        const contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);
        const bindingData = new BindingData();
        const form = new Form();
        const namespace = contextMetadata.namespace;
        const repository = this.injector.get(Repository, null) || this.repository;
        const stateMachine = this.stateMachine;
        const uiState = new UIState();
        const viewModel = new ViewModel();
        viewModel.setMetadata(contextMetadata);
        return [
            { provide: FRAME_ID, useValue: componentId },
            { provide: NAMESPACE, useValue: namespace },
            { provide: FrameContext, useClass: FrameContext },
            { provide: AppContext, useValue: this },
            { provide: BindingData, useValue: bindingData },
            { provide: Form, useValue: form },
            { provide: Repository, useValue: repository },
            { provide: StateMachine, useValue: stateMachine },
            { provide: UIState, useValue: uiState },
            { provide: ViewModel, useValue: viewModel },
            {
                provide: VariableParseService, useValue: new VariableParseService([
                    new FrameIdVariableParser(),
                    new DataVariableParser(),
                    new UIStateVariableParser(),
                    new StateMachineVariableParser(),
                    new CommandVariableParser()
                ])
            }
        ];
    }
}
AppContext.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AppContext.ctorParameters = () => [
    { type: Injector, decorators: [{ type: Optional }] },
    { type: AppContextManager, decorators: [{ type: Optional }] },
    { type: AppContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
export { AppContext };
//# sourceMappingURL=data:application/json;base64,