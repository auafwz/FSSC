import { Directive, Input, Injector, Optional } from '@angular/core';
import { FrameContext, ChangeType } from '@farris/devkit';
import { FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';
/**
 * 树表格绑定指令
 */
class FarrisFilePreviewBindingDirective {
    /**
     * 构造函数
     */
    constructor(previewComponent, frameContext, uploadAndPreviewComponent, injector) {
        this.previewComponent = previewComponent;
        this.frameContext = frameContext;
        this.uploadAndPreviewComponent = uploadAndPreviewComponent;
        this.injector = injector;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 绑定数据列表
     */
    get bindingList() {
        return this.bindingData.getList();
    }
    /**
     * 指令初始化
     */
    ngOnInit() {
        this.bindData();
        this.bindingData.changes.subscribe((change) => {
            if (change.type === ChangeType.Load
                || change.type === ChangeType.Append
                || change.type === ChangeType.Remove) {
                this.bindData();
            }
        });
    }
    /**
     * 指令输入变更
     */
    ngOnChanges(changes) {
    }
    /**
     * 绑定数据
     */
    bindData() {
        const fileInfos = this.getFileInfos();
        if (this.componentRef) {
            this.componentRef.fileInfos = fileInfos;
        }
    }
    /**
     * 获取附件信息列表
     */
    getFileInfos() {
        const listData = this.bindingList.toJSON();
        const idKey = this.bindingList.primaryKey;
        const fileInfos = [];
        listData.forEach((itemData) => {
            const id = this.getValueByPath(itemData, idKey);
            const fileId = this.getValueByPath(itemData, this.fileIdKey);
            const fileName = this.getValueByPath(itemData, this.fileNameKey);
            const fileSize = this.getValueByPath(itemData, this.fileSizeKey);
            const fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);
            const fileInfo = {
                id: fileId,
                name: fileName,
                size: fileSize,
                createTime: fileCreateTime,
                originalData: itemData,
                extend: {
                    metadataId: fileId
                }
            };
            fileInfos.push(fileInfo);
        });
        return fileInfos;
    }
    /**
     * 根据字段路径获取值
     */
    getValueByPath(data, path) {
        const keys = path.split('.');
        let currentValue = data;
        keys.forEach((key) => {
            currentValue = currentValue[key];
        });
        return currentValue;
    }
    getUdtPaths() {
        const paths = this.fileIdKey.split('.');
        paths.pop();
        return paths;
    }
    get fileSizeKey() {
        const basePaths = this.getUdtPaths();
        return basePaths.concat(['fileSize']).join('.');
    }
    get fileCreateTimeKey() {
        const basePaths = this.getUdtPaths();
        return basePaths.concat(['fileCreateTime']).join('.');
    }
    get componentRef() {
        return this.previewComponent || this.uploadAndPreviewComponent || null;
    }
}
FarrisFilePreviewBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisFilePreviewBinding]'
            },] }
];
/** @nocollapse */
FarrisFilePreviewBindingDirective.ctorParameters = () => [
    { type: FFilePreviewComponent, decorators: [{ type: Optional }] },
    { type: FrameContext },
    { type: UploadAndPreviewComponent, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
FarrisFilePreviewBindingDirective.propDecorators = {
    fileIdKey: [{ type: Input, args: ['farrisFileIdKey',] }],
    fileNameKey: [{ type: Input, args: ['farrisFileNameKey',] }]
};
export { FarrisFilePreviewBindingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWZpbGUtcHJldmlldy1iaW5kaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2ZpbGUtcHJldmlldy9mYXJyaXMtZmlsZS1wcmV2aWV3LWJpbmRpbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW9DLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBNEIsWUFBWSxFQUFVLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVGLE9BQU8sRUFBYyxxQkFBcUIsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFHOztHQUVHO0FBQ0gsTUFHTSxpQ0FBaUM7SUE0QnJDOztPQUVHO0lBQ0gsWUFDc0IsZ0JBQXVDLEVBQ25ELFlBQTBCLEVBQ2QseUJBQW9ELEVBQ3BELFFBQWtCO1FBSGxCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBdUI7UUFDbkQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDZCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBQ3BELGFBQVEsR0FBUixRQUFRLENBQVU7SUFFeEMsQ0FBQztJQXZCRDs7T0FFRztJQUNILElBQVksV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVksV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQWFEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUNw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SUFDbEQsQ0FBQztJQUNELElBQVksaUJBQWlCO1FBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFDRCxJQUFZLFlBQVk7UUFDdEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLHlCQUF5QixJQUFJLElBQUksQ0FBQztJQUN6RSxDQUFDOzs7WUFuSUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw0QkFBNEI7YUFDdkM7Ozs7WUFQb0IscUJBQXFCLHVCQXdDckMsUUFBUTtZQXpDc0IsWUFBWTtZQUNILHlCQUF5Qix1QkEwQ2hFLFFBQVE7WUE1Q2dELFFBQVEsdUJBNkNoRSxRQUFROzs7d0JBOUJWLEtBQUssU0FBQyxpQkFBaUI7MEJBTXZCLEtBQUssU0FBQyxtQkFBbUI7O0FBd0g1QixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIElucHV0LCBJbmplY3RvciwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ0RhdGEsIEJpbmRpbmdMaXN0LCBGcmFtZUNvbnRleHQsIENoYW5nZSwgQ2hhbmdlVHlwZSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgVXBsb2FkRmlsZSwgRkZpbGVQcmV2aWV3Q29tcG9uZW50LCBVcGxvYWRBbmRQcmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy9leHRlbmQtZmlsZS11cGxvYWQnO1xyXG5cclxuLyoqXHJcbiAqIOagkeihqOagvOe7keWumuaMh+S7pFxyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZmFycmlzRmlsZVByZXZpZXdCaW5kaW5nXSdcclxufSlcclxuY2xhc3MgRmFycmlzRmlsZVByZXZpZXdCaW5kaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAvKipcclxuICAgKiDmlofku7ZpZOWtl+autei3r+W+hFxyXG4gICAqL1xyXG4gIEBJbnB1dCgnZmFycmlzRmlsZUlkS2V5JylcclxuICBwdWJsaWMgZmlsZUlkS2V5OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWh+S7tm5hbWXlrZfmrrXot6/lvoRcclxuICAgKi9cclxuICBASW5wdXQoJ2ZhcnJpc0ZpbGVOYW1lS2V5JylcclxuICBwdWJsaWMgZmlsZU5hbWVLZXk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog57uR5a6a5pWw5o2uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXQgYmluZGluZ0RhdGEoKTogQmluZGluZ0RhdGEge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog57uR5a6a5pWw5o2u5YiX6KGoXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXQgYmluZGluZ0xpc3QoKTogQmluZGluZ0xpc3Qge1xyXG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ0RhdGEuZ2V0TGlzdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHByZXZpZXdDb21wb25lbnQ6IEZGaWxlUHJldmlld0NvbXBvbmVudCxcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHVwbG9hZEFuZFByZXZpZXdDb21wb25lbnQ6IFVwbG9hZEFuZFByZXZpZXdDb21wb25lbnQsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5oyH5Luk5Yid5aeL5YyWXHJcbiAgICovXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmJpbmREYXRhKCk7XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IENoYW5nZSkgPT4ge1xyXG4gICAgICBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuTG9hZFxyXG4gICAgICAgIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkFwcGVuZFxyXG4gICAgICAgIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLlJlbW92ZVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmJpbmREYXRhKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5oyH5Luk6L6T5YWl5Y+Y5pu0XHJcbiAgICovXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOe7keWumuaVsOaNrlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYmluZERhdGEoKSB7XHJcbiAgICBjb25zdCBmaWxlSW5mb3MgPSB0aGlzLmdldEZpbGVJbmZvcygpO1xyXG4gICAgaWYgKHRoaXMuY29tcG9uZW50UmVmKSB7XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmZpbGVJbmZvcyA9IGZpbGVJbmZvcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlumZhOS7tuS/oeaBr+WIl+ihqFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RmlsZUluZm9zKCk6IFVwbG9hZEZpbGVbXSB7XHJcbiAgICBjb25zdCBsaXN0RGF0YSA9IHRoaXMuYmluZGluZ0xpc3QudG9KU09OKCk7XHJcbiAgICBjb25zdCBpZEtleSA9IHRoaXMuYmluZGluZ0xpc3QucHJpbWFyeUtleTtcclxuICAgIGNvbnN0IGZpbGVJbmZvczogVXBsb2FkRmlsZVtdID0gW107XHJcblxyXG4gICAgbGlzdERhdGEuZm9yRWFjaCgoaXRlbURhdGE6IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBpZCA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbURhdGEsIGlkS2V5KTtcclxuICAgICAgY29uc3QgZmlsZUlkID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChpdGVtRGF0YSwgdGhpcy5maWxlSWRLZXkpO1xyXG4gICAgICBjb25zdCBmaWxlTmFtZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbURhdGEsIHRoaXMuZmlsZU5hbWVLZXkpO1xyXG4gICAgICBjb25zdCBmaWxlU2l6ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbURhdGEsIHRoaXMuZmlsZVNpemVLZXkpO1xyXG4gICAgICBjb25zdCBmaWxlQ3JlYXRlVGltZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbURhdGEsIHRoaXMuZmlsZUNyZWF0ZVRpbWVLZXkpO1xyXG5cclxuICAgICAgY29uc3QgZmlsZUluZm86IGFueSA9IHtcclxuICAgICAgICBpZDogZmlsZUlkLFxyXG4gICAgICAgIG5hbWU6IGZpbGVOYW1lLFxyXG4gICAgICAgIHNpemU6IGZpbGVTaXplLFxyXG4gICAgICAgIGNyZWF0ZVRpbWU6IGZpbGVDcmVhdGVUaW1lLFxyXG4gICAgICAgIG9yaWdpbmFsRGF0YTogaXRlbURhdGEsXHJcbiAgICAgICAgZXh0ZW5kOiB7XHJcbiAgICAgICAgICBtZXRhZGF0YUlkOiBmaWxlSWRcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGZpbGVJbmZvcy5wdXNoKGZpbGVJbmZvKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBmaWxlSW5mb3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja7lrZfmrrXot6/lvoTojrflj5blgLxcclxuICAgKi9cclxuICBwcml2YXRlIGdldFZhbHVlQnlQYXRoKGRhdGE6IGFueSwgcGF0aDogc3RyaW5nKTogYW55IHtcclxuICAgIGNvbnN0IGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICBsZXQgY3VycmVudFZhbHVlID0gZGF0YTtcclxuICAgIGtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgY3VycmVudFZhbHVlID0gY3VycmVudFZhbHVlW2tleV07XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjdXJyZW50VmFsdWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0VWR0UGF0aHMoKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgcGF0aHMgPSB0aGlzLmZpbGVJZEtleS5zcGxpdCgnLicpO1xyXG4gICAgcGF0aHMucG9wKCk7XHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IGZpbGVTaXplS2V5KCkge1xyXG4gICAgY29uc3QgYmFzZVBhdGhzID0gdGhpcy5nZXRVZHRQYXRocygpO1xyXG4gICAgcmV0dXJuIGJhc2VQYXRocy5jb25jYXQoWydmaWxlU2l6ZSddKS5qb2luKCcuJyk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IGZpbGVDcmVhdGVUaW1lS2V5KCkge1xyXG4gICAgY29uc3QgYmFzZVBhdGhzID0gdGhpcy5nZXRVZHRQYXRocygpO1xyXG4gICAgcmV0dXJuIGJhc2VQYXRocy5jb25jYXQoWydmaWxlQ3JlYXRlVGltZSddKS5qb2luKCcuJyk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IGNvbXBvbmVudFJlZigpIHtcclxuICAgIHJldHVybiB0aGlzLnByZXZpZXdDb21wb25lbnQgfHwgdGhpcy51cGxvYWRBbmRQcmV2aWV3Q29tcG9uZW50IHx8IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBGYXJyaXNGaWxlUHJldmlld0JpbmRpbmdEaXJlY3RpdmUgfTtcclxuIl19