import { ANNOTATIONS, PROP_METADATA } from './decorator';
//import { Cacheable, DefaultCacheProvider } from '../../cache';
/**
 * 元数据解析
 * 约束：
 * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；
 * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加
 */
var MetadataUtil = /** @class */ (function () {
    function MetadataUtil() {
    }
    // ----------------------------------------
    // 类型元数据
    // ----------------------------------------
    /**
     * 获取类元数据
     * 返回结果形如：
     * [
     *   Injectable
     *   NgViewModel
     *   NgViewModel
     * ]
     */
    MetadataUtil.getClassMetadatas = function (constructor) {
        var metadatas = constructor[ANNOTATIONS];
        return metadatas;
    };
    /**
     * 获取某个class上的某种装饰器
     * 返回结果：NgViewModel
     */
    MetadataUtil.getClassMetadataByName = function (constructor, metadataName) {
        var metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);
        return metadata;
    };
    MetadataUtil.getClassMetadataByNameWithTranslate = function (constructor, metadataName, translateService, keysToTranslate) {
        var allClassMetadatas = this.getClassMetadatas(constructor);
        if (!allClassMetadatas) {
            return null;
        }
        var metadata = allClassMetadatas.find(function (classMetadata) {
            return classMetadata.ngMetadataName === metadataName;
        });
        this.translateMetadataByName(metadata, translateService, keysToTranslate);
        return metadata;
    };
    // ----------------------------------------
    // 属性元数据
    // ----------------------------------------
    /**
     * 获取所有属性的所有元数据
     * 返回格式：
     * {
     *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],
     *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]
     * }
     */
    // @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    MetadataUtil.getPropsMetadatas = function (constructor) {
        var allPropMetadatas = constructor[PROP_METADATA];
        return allPropMetadatas;
    };
    /**
     * 获取所有属性的某一类型的元数据
     * 如果同一属性
     * 返回结果：
     * {
     *    propName1: NgDefaultValue,
     *    propName2: NgDefaultValue
     * }
     */
    // @Cache({ provider: new MemoryCacheProvider(new MetadataKeyCompare()), key: ((context: any, args: any[]) => { return { constructor: args[0], metadataName: args[1] } }) })
    MetadataUtil.getPropsMetadatasByName = function (constructor, metadataName) {
        var metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);
        return metadatas;
    };
    MetadataUtil.getPropsMetadatasByNameWithTranslate = function (constructor, metadataName, translateService, keysToTranslate) {
        var metadatas = {};
        // 读取构造函数中存储的类属性注解。
        var allPropMetadatas = this.getPropsMetadatas(constructor);
        if (!allPropMetadatas) {
            return metadatas;
        }
        // 遍历所有属性提取注解信息。
        Object.keys(allPropMetadatas).forEach(function (propName) {
            // 提取当前属性注解对象
            var propMetadatas = allPropMetadatas[propName];
            // 提取指定类型的注解项
            var metadata = propMetadatas.find(function (propMetadata) {
                return propMetadata.ngMetadataName === metadataName;
            });
            if (metadata) {
                metadatas[propName] = metadata;
            }
        });
        // 翻译指定属性的值
        this.translateMetadatasByName(metadatas, translateService, keysToTranslate);
        return metadatas;
    };
    MetadataUtil.translateMetadatasByName = function (metadatas, translateService, keysToTranslate) {
        var _this = this;
        Object.keys(metadatas).forEach(function (propName) {
            // 提取指定类型的注解项
            _this.translateMetadataByName(metadatas[propName], translateService, keysToTranslate);
        });
        return metadatas;
    };
    MetadataUtil.translateMetadataByName = function (metadata, translateService, keysToTranslate) {
        if (metadata && translateService && keysToTranslate) {
            keysToTranslate.forEach(function (metadataPropKey) {
                var propertyVariable = metadata[metadataPropKey];
                if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {
                    var translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();
                    metadata[metadataPropKey] = translateService.transform(translateKey, null);
                }
            });
        }
        return metadata;
    };
    /**
     * 获取某个属性的所有元数据
     * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]
     */
    MetadataUtil.getPropMetadatasByName = function (constructor, propName) {
        // 暂不实现
        return null;
    };
    /**
     * 获取某个属性的某种元数据
     * 返回格式：NgDefaultValue
     */
    MetadataUtil.getPropMetadataByName = function (constructor, propName, metadataName) {
        // 暂不实现
        return null;
    };
    return MetadataUtil;
}());
export { MetadataUtil };
//# sourceMappingURL=data:application/json;base64,