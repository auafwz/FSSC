{"version":3,"sources":["ng://@farris/ui-popover/lib/popover.config.ts","ng://@farris/ui-popover/lib/popover-container.component.ts","ng://@farris/ui-popover/lib/popover.directive.ts","ng://@farris/ui-popover/lib/popover.module.ts"],"names":["PopoverConfig","Injectable","args","providedIn","this","placement","triggers","outsideClick","PopoverContainerComponent","Object","defineProperty","prototype","isBs3","ngAfterViewInit","el","mouseenterEvent","changeMouseState","bind","mouseleaveEvent","nativeElement","addEventListener","getMouseState","mounseState","state","console","log","next","ngOnDestroy","removeEventListener","unsubscribe","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[class]","[class.show]","[class.bs3]","role","style","template","ElementRef","decorators","type","Optional","ViewChild","read","Input","config","Subject","assign","PopoverDirective","_popover","isShown","value","showAction","hide","show","_this","popActive","popover","attach","to","container","position","attachment","showType","content","context","popoverContext","title","popoverTitle","containerClass","instance","subscribe","containerInOutState","show2","targetTop","targetLeft","targetRef","_a","_elementRef","getBoundingClientRect","hostWidth","height","width","top","left","_b","location","targetHeight","targetWidth","_renderer","addClass","postion","setStyles","element","paramsArr","keys","forEach","param","setStyle","ngZone","isOpen","runOutsideAngular","setTimeout","toggle","ngOnInit","_isInited","isFixed","_positionService","setOptions","modifiers","preventOverflow","enabled","listen","dispose","Directive","exportAs","Renderer2","ViewContainerRef","ComponentLoaderFactory","PositioningService","Injector","Output","_config","_viewContainerRef","cis","inject","get","NgZone","createLoader","provide","useValue","onShown","onHidden","window","focus","err","PopoverModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service for the Popover directive.\r\n * You can inject this service, typically in your root component, and customize\r\n * the values of its properties in order to provide default values for all the\r\n * popovers used in the application.\r\n */\r\n@Injectable(\r\n  {\r\n    providedIn: 'root'\r\n  }\r\n)\r\nexport class PopoverConfig {\r\n  /**\r\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\r\n   */\r\n  placement = 'top';\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  triggers = 'click';\r\n\r\n  outsideClick = true;\r\n  /**\r\n   * A selector specifying the element the popover should be appended to.\r\n   */\r\n  container: string;\r\n}\r\n","import { ChangeDetectionStrategy, Input, Component,Optional, ViewChild, ElementRef, AfterViewChecked, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { isBs3 } from '@farris/ui-modal/utils';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'farris-popover',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // tslint:disable-next-line\r\n  host: {\r\n    '[class]':\r\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\r\n    '[class.show]': '!isBs3',\r\n    '[class.bs3]': 'isBs3',\r\n    role: 'tooltip',\r\n    style: 'display:block;'\r\n  },\r\n  styles: [\r\n    `\r\n    :host.bs3.popover-top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.bs3.popover.top>.arrow {\r\n      margin-left: -2px;\r\n    }\r\n    :host.bs3.popover.top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.popover.bottom>.arrow {\r\n      margin-left: -4px;\r\n    }\r\n    :host.bs3.bs-popover-left {\r\n      margin-right: .5rem;\r\n    }\r\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\r\n      margin: .3rem 0;\r\n    }\r\n    :host.arrow-left .arrow {\r\n        left: calc(50% - 10px);\r\n    }\r\n    `\r\n  ],\r\n  templateUrl: './popover-container.component.html'\r\n})\r\nexport class PopoverContainerComponent implements AfterViewInit, OnDestroy {\r\n  @ViewChild('innerEle', { read: ElementRef }) innerNode: ElementRef;\r\n  @Input() placement: string;\r\n  @Input() title: string;\r\n  containerClass: string;\r\n  private mouseenterEvent: any;\r\n  private mouseleaveEvent: any;\r\n  private mounseState = new Subject<boolean>();\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  constructor(config: PopoverConfig,@Optional() private el:ElementRef) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.el) {\r\n      this.mouseenterEvent = this.changeMouseState.bind(this, true);\r\n      this.mouseleaveEvent = this.changeMouseState.bind(this, false);\r\n      this.el.nativeElement.addEventListener('mouseenter', this.mouseenterEvent);\r\n      this.el.nativeElement.addEventListener('mouseleave', this.mouseleaveEvent);\r\n    }\r\n  }\r\n  /**\r\n   * è·åé¼ æ ååç¶æ\r\n   */\r\n  getMouseState(){\r\n    return this.mounseState;\r\n  }\r\n  /**\r\n   * ç»å®çäºä»¶\r\n   * @param state \r\n   */\r\n  private changeMouseState(state) {\r\n    \r\n    console.log(state);\r\n    this.mounseState.next(state);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.mouseenterEvent) {\r\n      this.el.nativeElement.removeEventListener('mouseenter', this.mouseenterEvent);\r\n    }\r\n    if (this.mouseleaveEvent) {\r\n      this.el.nativeElement.removeEventListener('mouseleave', this.mouseleaveEvent);\r\n    }\r\n    this.mounseState.unsubscribe();\r\n  }\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    Optional,\r\n    Injector,\r\n    NgZone\r\n} from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { ComponentLoader, ComponentLoaderFactory } from '@farris/ui-modal/component-loader';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\nimport { PositioningService } from '@farris/ui-modal/positioning';\r\n\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\n@Directive({ selector: '[farrisPopover]', exportAs: 'bs-popover' })\r\nexport class PopoverDirective implements OnInit, OnDestroy {\r\n    /**\r\n     * Content to be displayed as popover.\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Input() popover: string | TemplateRef<any>;\r\n    /**\r\n     * Context to be used if popover is a template.\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Input() popoverContext: any;\r\n    /**\r\n     * Title of a popover.\r\n     */\r\n    @Input() popoverTitle: string;\r\n    /**\r\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n     */\r\n    @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto';\r\n    /**\r\n     * Close popover on outside click\r\n     */\r\n    @Input() outsideClick = true;\r\n    /**\r\n     * Specifies events that should trigger. Supports a space separated list of\r\n     * event names.\r\n     */\r\n    @Input() triggers: string;\r\n    /**\r\n     * A selector specifying the element the popover should be appended to.\r\n     */\r\n    @Input() container = 'body';\r\n\r\n    /**\r\n     * Css class for popover container\r\n     */\r\n    @Input() containerClass = '';\r\n    // ææ¡ä»¶æ¿æ´»\r\n    @Input() popActive = true;\r\n\r\n    // æ¾ç¤ºå¨ä½\r\n    @Input() showAction = 'show';\r\n    /**\r\n     * Returns whether or not the popover is currently being shown\r\n     */\r\n    @Input()\r\n    get isOpen(): boolean {\r\n        return this._popover.isShown;\r\n    }\r\n\r\n    set isOpen(value: boolean) {\r\n        if (value) {\r\n            this[this.showAction]();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n    @Input() isFixed=false;\r\n\r\n    /**\r\n     * Emits an event when the popover is shown\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Output() onShown: EventEmitter<any>;\r\n    /**\r\n     * Emits an event when the popover is hidden\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Output() onHidden: EventEmitter<any>;\r\n\r\n    private _popover: ComponentLoader<PopoverContainerComponent>;\r\n    private _isInited = false;\r\n    private ngZone;\r\n    // æ è®°æ¯å¦è¿å¥æç¤ºæ¡å\r\n    private containerInOutState = false;\r\n    // æ è®°\r\n    private setTimeoutFlag;\r\n\r\n    constructor(\r\n        _config: PopoverConfig,\r\n        private _elementRef: ElementRef,\r\n        private _renderer: Renderer2,\r\n        _viewContainerRef: ViewContainerRef,\r\n        cis: ComponentLoaderFactory,\r\n        private _positionService: PositioningService,\r\n        @Optional() private inject: Injector\r\n    ) {\r\n        if (this.inject) {\r\n            this.ngZone = this.inject.get(NgZone, null);\r\n        }\r\n        this._popover = cis\r\n            .createLoader<PopoverContainerComponent>(_elementRef, _viewContainerRef, _renderer)\r\n            .provide({ provide: PopoverConfig, useValue: _config });\r\n        Object.assign(this, _config);\r\n        this.onShown = this._popover.onShown;\r\n        this.onHidden = this._popover.onHidden;\r\n\r\n        // fix: no focus on button on Mac OS #1795\r\n        if (typeof window !== 'undefined') {\r\n            _elementRef.nativeElement.addEventListener('click', function () {\r\n                try {\r\n                    _elementRef.nativeElement.focus();\r\n                } catch (err) {\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens an elementâs popover. This is considered a âmanualâ triggering of\r\n     * the popover.\r\n     */\r\n    show(): void {\r\n        if (!this.popActive || this._popover.isShown || !this.popover) {\r\n            return;\r\n        }\r\n\r\n        this._popover\r\n            .attach(PopoverContainerComponent)\r\n            .to(this.container)\r\n            .position({ attachment: this.placement })\r\n            .show({\r\n                showType: \"popover\",\r\n                content: this.popover,\r\n                context: this.popoverContext,\r\n                placement: this.placement,\r\n                title: this.popoverTitle,\r\n                containerClass: this.containerClass\r\n            });\r\n        // this.isOpen = true;\r\n        if (this.triggers == 'hover' && this._popover.instance && this._popover.instance.getMouseState) {\r\n            this._popover.instance.getMouseState().subscribe((state) => {\r\n                this.containerInOutState = state;\r\n                if (!state) {\r\n                    this._popover.hide();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    show2(): void {\r\n        if (!this.popActive || this._popover.isShown || !this.popover) {\r\n            return;\r\n        }\r\n\r\n        const targetRef = this._popover\r\n            .attach(PopoverContainerComponent)\r\n            .to(this.container)\r\n            .show({\r\n                content: this.popover,\r\n                context: this.popoverContext,\r\n                placement: this.placement,\r\n                title: this.popoverTitle,\r\n                containerClass: this.containerClass\r\n            });\r\n        //this.isOpen = true;\r\n        const {\r\n            height: hostHeight,\r\n            width: hostWidth,\r\n            top,\r\n            left\r\n        } = this._elementRef.nativeElement.getBoundingClientRect();\r\n        const { height: targetHeight, width: targetWidth } = targetRef.location.nativeElement.getBoundingClientRect();\r\n        let targetTop: string, targetLeft: string;\r\n        switch (this.placement) {\r\n            case 'bottom':\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n            case 'left':\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n            case 'right':\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n            default:\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n        }\r\n        const postion = { top: targetTop, left: targetLeft };\r\n        this.setStyles(targetRef.location.nativeElement, postion);\r\n    }\r\n\r\n    setStyles(element, postion) {\r\n        const paramsArr = Object.keys(postion);\r\n        paramsArr &&\r\n            paramsArr.forEach(param => {\r\n                this._renderer.setStyle(element, param, postion[param]);\r\n            });\r\n    }\r\n    /**\r\n     * Closes an elementâs popover. This is considered a âmanualâ triggering of\r\n     * the popover.\r\n     */\r\n    hide(): void {\r\n        if (this.triggers == 'hover' && this.ngZone) {\r\n            if (this.isOpen) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        if (!this.containerInOutState) {\r\n                            this._popover.hide();\r\n                        }\r\n                    }, 300);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.isOpen) {\r\n            this._popover.hide();\r\n            //this.isOpen = false;\r\n        }\r\n    }\r\n    /**\r\n     * Toggles an elementâs popover. This is considered a âmanualâ triggering of\r\n     * the popover.\r\n     */\r\n    toggle(): void {\r\n        if (this.isOpen) {\r\n            return this.hide();\r\n        }\r\n\r\n        this.show();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // fix: seems there are an issue with `routerLinkActive`\r\n        // which result in duplicated call ngOnInit without call to ngOnDestroy\r\n        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\r\n        if (this._isInited) {\r\n            return;\r\n        }\r\n        this._isInited = true;\r\n        if(this.isFixed){\r\n            this._positionService.setOptions({\r\n                modifiers: {\r\n                    preventOverflow: {\r\n                        enabled: false\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (this.triggers == 'hover') {\r\n            this._popover.listen({\r\n                triggers: this.triggers,\r\n                outsideClick: this.outsideClick,\r\n                show: () => this[this.showAction](),\r\n                hide: () => this.hide()\r\n            });\r\n        } else {\r\n            this._popover.listen({\r\n                triggers: this.triggers,\r\n                outsideClick: this.outsideClick,\r\n                show: () => this[this.showAction]()\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._popover.dispose();\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { PopoverConfig } from './popover.config';\r\nimport { PopoverDirective } from './popover.directive';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\nimport { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';\r\nimport { PositioningService } from '@farris/ui-modal/positioning';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PopoverDirective, PopoverContainerComponent],\r\n  exports: [PopoverDirective],\r\n  entryComponents: [PopoverContainerComponent]\r\n})\r\nexport class PopoverModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: PopoverModule,\r\n      providers: [PopoverConfig, ComponentLoaderFactory, PositioningService]\r\n    };\r\n  }\r\n}\r\n"]}