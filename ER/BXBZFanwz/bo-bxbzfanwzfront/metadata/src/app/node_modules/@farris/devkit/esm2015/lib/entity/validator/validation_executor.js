import { ValidationError } from './validation_error';
import { ValidationTypes } from './validation_types';
import { EntityList } from '../entity_list';
import { FieldMetadataUtil } from '../metadata/index';
/**
 * 执行数据验证
 */
export class ValidationExecutor {
    constructor(validator) {
        this.validator = validator;
        /** 异步验证请求集合 */
        this.awaitingPromises = [];
    }
    /**
     * 将信息中的关键字替换为具体实体对象中的信息
     * @param message 验证信息
     * @param metadata 验证规则
     * @param value 待验证的值
     */
    static replaceMessageSpecialTokens(message, metadata, value) {
        let messageString;
        if (message instanceof Function) {
            messageString = message(metadata);
        }
        else if (typeof message === 'string') {
            messageString = message;
        }
        if (messageString && metadata.constraints instanceof Array) {
            metadata.constraints.forEach((constraint, index) => {
                messageString = messageString.replace(new RegExp(`\\$constraint${index + 1}`, 'g'), constraint);
            });
        }
        if (messageString && value !== undefined && value !== null) {
            messageString = messageString.replace(/\$value/g, value);
        }
        if (messageString) {
            messageString = messageString.replace(/\$property/g, metadata.property);
        }
        if (messageString) {
            messageString = messageString.replace(/\$target/g, metadata.targetName);
        }
        return messageString;
    }
    /**
     * 验证实例对象
     * @param object 验证实例对象
     * @param newValue 实体将要更新的值
     * @param validationErrors 验证信息集合
     * @param propertyName 实例对象属性
     * @param index 所属集合实例中索引
     */
    execute(object, newValue, validationErrors, propertyName, index, externalRules, currentRowId, frameContext) {
        // if (!currentRowId) {
        //   currentRowId = object.primaryValue;
        // }
        if (!externalRules && frameContext) {
            externalRules = frameContext.form.getValidationRules();
        }
        // 提取实体上定义的验证描述
        // 格式{key:[rule1,rule2]}
        let validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);
        const remainedExternalRules = new Map();
        // 合并额外验证规则
        if (externalRules) {
            // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];
            // if (parentPathArray.length > 1) {
            //   parentPathArray[0] = '';
            // }
            const parentPathArray = [];
            let objectCursor = object;
            while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {
                const cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';
                // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {
                parentPathArray.push(cursorParentPath);
                // }
                objectCursor = objectCursor['__PARENT__'];
                if (objectCursor instanceof EntityList) {
                    objectCursor = objectCursor['__PARENT__'];
                }
            }
            const parentPath = parentPathArray.reverse().join('/');
            externalRules.forEach((rules, path) => {
                if (path) {
                    // 提取额外验证规则字段路径
                    const pathArray = path.split('/');
                    // 提取字段名称
                    const fieldName = pathArray.pop();
                    // 提取字段父路径
                    const fieldParentPath = pathArray.join('/');
                    // 匹配外部验证规则和实体验证规则父路径
                    if (parentPath === fieldParentPath) {
                        validateMetadatas[fieldName] = [...(validateMetadatas[fieldName] || [])];
                        // 同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。
                        if (rules.length) {
                            let targetId = '';
                            rules.forEach(rule => {
                                if (rule.targetId && rule.targetId.length > targetId.length) {
                                    targetId = rule.targetId;
                                }
                                validateMetadatas[fieldName].push(rule);
                            });
                            validateMetadatas[fieldName].forEach((validateRule) => {
                                validateRule.targetId = targetId;
                                validateRule.targetName = rules[0].targetName;
                                validateRule.property = rules[0].property;
                                if (rules[0].frameContext) {
                                    validateRule.frameContext = rules[0].frameContext;
                                }
                                validateRule.fullPath = rules[0].fullPath;
                                validateRule['initialized'] = true;
                            });
                        }
                    }
                    else {
                        remainedExternalRules.set(path, rules);
                    }
                }
            });
        }
        // 处理校验规则中的属性名称
        if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {
            Object.keys(validateMetadatas).forEach((fieldName) => {
                const validateRules = validateMetadatas[fieldName];
                if (validateRules && validateRules.length > 0) {
                    const firstValidateRule = validateRules[0];
                    const path = firstValidateRule['path'];
                    if (path) {
                        const bindingPaths = path.split('.');
                        const form = this.getForm(bindingPaths, frameContext);
                        const formControl = this.getFormControl(bindingPaths, frameContext);
                        if (formControl) {
                            validateRules.forEach((validateRule) => {
                                if (validateRule['initialized'] !== true) {
                                    validateRule.targetId = formControl.id;
                                    validateRule.targetName = form && form.formGroupName;
                                    validateRule.property = formControl.name || formControl.defaultI18nValue || '';
                                }
                            });
                        }
                    }
                }
            });
        }
        // 过滤出当前验证属性的验证规则
        if (propertyName) {
            validateMetadatas = Object.keys(validateMetadatas)
                .filter(key => key === propertyName)
                .reduce((val, curr) => Object.assign({}, val, { [curr]: validateMetadatas[curr] }), {});
        }
        // validateMetadatas = {rule:当前属性的所有校验规则}
        Object.keys(validateMetadatas).filter((key) => object && (object.hasOwnProperty(key) ||
            (object.constructor.prototype &&
                object.constructor.prototype.typeName &&
                object.constructor.prototype.hasOwnProperty(key)) ||
            object['__proto__'].hasOwnProperty(key))).forEach(key => {
            // todo: 没用兼容value是undefined的情况
            let value = newValue;
            if (newValue === undefined) {
                value = object[key];
            }
            let isMultLanguageField = false;
            const multiLangFields = this.getMultiLanguageFields(object);
            if (multiLangFields && multiLangFields.length > 0) {
                if (multiLangFields.includes(key)) {
                    isMultLanguageField = true;
                }
            }
            // const value = newValue || 
            const validateRules = validateMetadatas[key];
            if (validateRules.length) {
                const fieldName = validateRules[0].property;
                const field = validateRules[0].targetId;
                const frameContext = validateRules[0].frameContext;
                const fullPath = validateRules[0].fullPath;
                // const fieldContainerName = Number.isInteger(index) ?
                // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;
                const fieldContainerName = Number.isInteger(index) ?
                    ValidationExecutor.replaceMessageSpecialTokens(ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER), validateRules[0], index + 1) : validateRules[0].targetName;
                const validationDisplayName = fieldContainerName ? `${fieldContainerName} - ${fieldName}` : `${fieldName}`;
                const property = validateRules['path'] || key;
                const validationError = this.generateValidationError(object, value, property, validationDisplayName, index, field, frameContext, fullPath);
                if (index !== undefined) {
                    validationError['index'] = index;
                }
                validationErrors.push(validationError);
                this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);
            }
        });
        this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);
        this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);
        // this.sortValidationErrors(validationErrors);
        // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题
        // if (!propertyName) {
        //     this.objectValidations(object, validationErrors);
        // }
    }
    getMultiLanguageFields(entity) {
        if (entity && entity.constructor) {
            const ngFields = FieldMetadataUtil.getNgFields(entity.constructor);
            return Object.keys(ngFields).filter((fieldName) => ngFields[fieldName].enableMultiLangInput);
        }
        return null;
    }
    /**
     * 清除通过验证信息
     * @param errors 验证失败信息
     */
    stripEmptyErrors(errors) {
        return errors.filter(error => {
            if (error.children) {
                error.children = this.stripEmptyErrors(error.children);
            }
            if (Object.keys(error.constraints).length === 0) {
                if (error.children.length === 0) {
                    return false;
                }
                else {
                    delete error.constraints;
                }
            }
            return true;
        });
    }
    /**
     * 生成未通过验证的对象
     * @param object 要验证的实体实例对象
     * @param value 要验证的值
     * @param propertyName 待验证的实体属性名称
     * @param index 验证数据索引
     * @param field 待验证字段
     */
    generateValidationError(object, value, property, propertyName, index, field, frameContext, fullPath) {
        const validationError = new ValidationError();
        validationError.target = object;
        validationError.value = value;
        validationError.property = property;
        validationError.propertyName = propertyName;
        validationError.field = field;
        validationError.index = index;
        validationError.children = [];
        validationError.constraints = {};
        if (frameContext) {
            validationError.frameContext = frameContext;
        }
        validationError.fullPath = fullPath;
        return validationError;
    }
    /**
     * 验证实体中的属性
     * @param object 要验证的实体实例对象
     * @param value 要验证的值
     * @param validateRules 验证规则
     * @param errorMap 难证信息。{[key]: message}
     *
     * key: 验证规则名称
     * message: 验证信息
     */
    defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId) {
        const errorMap = validationError.constraints;
        return validateRules
            .filter(validateRule => {
            // 验证实体属性是否符合规则
            const validValue = this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);
            if (validValue instanceof Promise) {
                const promise = validValue.then(isValid => {
                    if (!isValid) {
                        const { type, messageString: message } = this.createValidationError(object, value, validateRule);
                        errorMap[type] = message;
                        validationError.rule = validateRule;
                    }
                });
                this.awaitingPromises.push(promise);
            }
            return !validValue;
        })
            .forEach(validateRule => {
            // 不符合规则，生成错误信息
            const { type: key, messageString: message } = this.createValidationError(object, value, validateRule);
            errorMap[key] = message;
            validationError.rule = validateRule;
        });
    }
    /**
     * 验证列表中的每条记录
     * @param object 要验证的实体实例对象
     * @param errors 验证失败的信息集合
     * @param property 属性名称
     * @param parentIndex 当前集合的父对象所属集合列表中的索引。
     */
    listValidations(object, errors, property, parentIndex, externalRules, frameContext) {
        const INDEX_LABEL = "__ACTUAL_INDEX__";
        const listFields = FieldMetadataUtil.getNgList(object.constructor);
        if (!listFields) {
            return;
        }
        let keys = Object.keys(listFields);
        if (property) {
            keys = keys.filter(key => key === property);
        }
        keys.forEach(propertyName => {
            const metadata = listFields[propertyName];
            const clzType = metadata.type;
            const value = object[propertyName];
            if (value) {
                const parentPaths = object.getPaths().path || [];
                parentPaths.push(propertyName);
                const validationError = this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);
                validationError.isArray = true;
                errors.push(validationError);
                value.items.forEach((entity, index) => {
                    let actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;
                    this.execute(entity, undefined, validationError.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);
                });
            }
        });
    }
    /**
     * 验证实体中的引用对象
     * @param object 要验证的实体对象
     * @param errors 错误信息集合
     */
    objectValidations(object, errors, property, parentIndex, externalRules, currentRowId, frameContext) {
        const objectFields = FieldMetadataUtil.getNgObjects(object.constructor);
        if (!objectFields || Object.keys(objectFields).length < 1) {
            return;
        }
        let keys = Object.keys(objectFields);
        if (property) {
            keys = keys.filter(key => key === property);
        }
        keys.forEach(propertyName => {
            const metadata = objectFields[propertyName];
            const objectType = metadata.type;
            const value = object[propertyName];
            if (value) {
                this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);
            }
        });
    }
    /**
     * 创建验证规则信息
     * @param object 要验证的实体对象
     * @param value 验证的值
     * @param metadata 验证规则
     */
    createValidationError(object, value, metadata) {
        const targetName = object.constructor ? object.constructor.name : undefined;
        const type = metadata.type;
        let message = metadata.message;
        if (!message) {
            message = ValidationTypes.getMessage(type);
        }
        if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {
            if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {
                // 获取日期类型的提示信息
                const extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;
                message = ValidationTypes.getMessage(extType);
                /*if (metadata.constraints[0]) {
                  metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');
                }*/
            }
        }
        const messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);
        return { type, messageString, metadata };
    }
    getFrameContext(bindingPaths, eventFrameContext) {
        if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
            return null;
        }
        const paths = bindingPaths.concat([]);
        paths.pop();
        const bindingPath = paths.join('/');
        const frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find((context) => context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
        return frameContext || null;
    }
    getForm(bindingPaths, eventFrameContext) {
        if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
            return null;
        }
        const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);
        return frameContext && frameContext.form || null;
    }
    getFormControl(bindingPaths, eventFrameContext) {
        if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
            return null;
        }
        const paths = bindingPaths.concat([]);
        const propertyName = paths.pop();
        const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);
        const formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;
        return formControl;
    }
    isDateString(value) {
        const regex = /\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\s?)?(([0-2]\d:[0-5]\d)?(:[0-5]\d(?:\.\d+)))?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
        return regex.test(value);
    }
}
//# sourceMappingURL=data:application/json;base64,