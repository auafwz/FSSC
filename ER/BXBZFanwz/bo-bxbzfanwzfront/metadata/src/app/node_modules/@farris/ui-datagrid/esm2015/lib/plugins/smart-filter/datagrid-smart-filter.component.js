/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
import { IdService } from '@farris/ui-common';
import { Component, ViewChild, TemplateRef, Renderer2, ElementRef, NgZone, Injector, Input, HostListener, Optional } from '@angular/core';
import { FilterPanelService } from '@farris/ui-filter-panel';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridSmartFilterService } from '../../services/datagrid-smart-filter.service';
export class DatagridSmartFilterComponent {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} zone
     * @param {?} inject
     * @param {?} filterPanelService
     * @param {?} smartFilterSer
     * @param {?} dg
     */
    constructor(render, el, zone, inject, filterPanelService, smartFilterSer, dg) {
        this.render = render;
        this.el = el;
        this.zone = zone;
        this.inject = inject;
        this.filterPanelService = filterPanelService;
        this.smartFilterSer = smartFilterSer;
        this.dg = dg;
        this.filterData = null;
        this.disabled = false;
        this.smartFilterDataChanged$ = null;
        this.removeFilter$ = null;
        this.clearAllFilter$ = null;
        this.smartFilterEvents = [];
        this.idService = this.inject.get(IdService, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.removeFilter$) {
            this.removeFilter$ = this.smartFilterSer.removeFilter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e && e.labelCode === this.column.field) {
                    this.filterData = null;
                    this.render.removeClass(this.el.nativeElement, 'active');
                }
            }));
            this.smartFilterEvents.push(this.removeFilter$);
        }
        if (!this.clearAllFilter$) {
            this.clearAllFilter$ = this.smartFilterSer.clearAllFilter.subscribe((/**
             * @return {?}
             */
            () => {
                this.filterData = null;
                this.render.removeClass(this.el.nativeElement, 'active');
            }));
            this.smartFilterEvents.push(this.clearAllFilter$);
        }
        if (this.dg && !this.smartFilterDataChanged$) {
            this.smartFilterDataChanged$ = this.dg.dgs['smartFilterDataChange'].subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e && this.column.field === e.fieldCode) {
                    this.filterData.value = e.value;
                    this.filterData.control.single = e.control.single;
                }
            }));
            this.smartFilterEvents.push(this.smartFilterDataChanged$);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterPanelRef) {
            this.filterPanelService.hidePanel();
            this.filterPanelRef = null;
        }
        if (this.smartFilterEvents && this.smartFilterEvents.length) {
            this.smartFilterEvents.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n.unsubscribe();
                n = null;
            }));
            this.smartFilterEvents = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFilterData() {
        const { field, title } = this.column;
        if (!this.filterData) {
            this.filterData = {
                id: field,
                labelCode: field,
                code: field,
                name: title,
                control: this.smartFilterSer.getColumnFilterData(this.column),
                placeHolder: '',
                value: {
                    value: ''
                }
            };
        }
        return cloneDeep(this.filterData);
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    getPanelPosition($event) {
        /** @type {?} */
        let x = $event.pageX - 33;
        /** @type {?} */
        const y = $event.pageY + 9;
        /** @type {?} */
        const targetRect = $event.target.getBoundingClientRect();
        /** @type {?} */
        let moveArrow = 0;
        if (window.innerWidth - x < 380) {
            /** @type {?} */
            const i = 380 - (window.innerWidth - x);
            x = x - i - 20;
            moveArrow = targetRect.left - x;
        }
        return { x, y, moveArrow };
    }
    /**
     * @private
     * @return {?}
     */
    hideFilterPanel() {
        if (this.filterPanelRef) {
            this.filterPanelService.hidePanel();
            this.filterPanelRef = null;
            if (!this.filterData || !this.filterData.valueText) {
                this.render.removeClass(this.el.nativeElement, 'active');
            }
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    clearColumnFilter(e) {
        this.hideFilterPanel();
        this.filterData = null;
        this.smartFilterSer.removeCondition(e);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    showFilterPanel($event) {
        $event.stopPropagation();
        this.render.addClass(this.el.nativeElement, 'active');
        const { x, y, moveArrow } = this.getPanelPosition($event);
        this.filterPanelRef = this.filterPanelService.showPanel({
            left: x,
            top: y,
            item: this.getFilterData(),
            panelExtendTemplate: this.column.sortable ? this.sortTmp : null,
            localStorageKey: 'smartfilter_' + this.dg.dgs.createConfigKey(this.dg.id),
            target: $event.target
        });
        if (moveArrow) {
            /** @type {?} */
            const arrowEl = this.filterPanelRef['el'].querySelector('.f-filter-panel-arrow');
            if (arrowEl) {
                this.render.setStyle(arrowEl, 'left', `${moveArrow}px`);
            }
        }
        this.filterPanelRef.hidePanel.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.hideFilterPanel();
        }));
        this.filterPanelRef.filterSubmit.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // console.log('提交', e);
            if (e.filter && e.filter.length) {
                this.filterData = e.item || null;
                this.hideFilterPanel();
                this.smartFilterSer.filterConditionChanged({ conditions: e.filter, controlData: e.item });
            }
            else {
                this.clearColumnFilter(e.item);
            }
        }));
        this.filterPanelRef.clearFilter.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.clearColumnFilter(e);
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.showFilterPanel($event);
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} order
     * @return {?}
     */
    onSort($event, order) {
        $event.stopPropagation();
        if (this.column.order === order) {
            this.column.order = '';
        }
        else {
            this.column.order = order;
        }
        /** @type {?} */
        const sortName = this.dg.sortName;
        /** @type {?} */
        const sortOrder = this.dg.sortOrder;
        /** @type {?} */
        let sortFields = [];
        /** @type {?} */
        let sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        let newOrder = this.column.order;
        /** @type {?} */
        const i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === this.column.field));
        if (i >= 0) {
            if (newOrder === '') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = newOrder;
            }
        }
        else {
            if (this.dg.multiSort) {
                sortFields.push(this.column.field);
                sortOrders.push(newOrder);
            }
            else {
                sortFields = [this.column.field];
                sortOrders = [newOrder];
            }
        }
        this.dg.sortName = sortFields.join(',');
        this.dg.sortOrder = sortOrders.join(',');
        this.dg.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        this.dg.beforeSortColumn(this.dg.sortName, this.dg.sortOrder, this.dg).subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.onColumnSorted();
        }));
    }
}
DatagridSmartFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-smart-filter, [datagrid-smart-filter]',
                template: "<ng-template #sort>\r\n    <div class=\"f-filter-panel-sort-wrapper f-filter-panel-sort-wrapper-hasfilter\">\r\n        <div class=\"f-filter-panel-sort\">\r\n            <div class=\"panel-sort-up panel-sort-item\" [class.active]=\"column?.order === 'asc'\" (click)=\"onSort($event, 'asc')\">\r\n                <span class=\"panel-sort-item-icon f-icon f-icon-col-ascendingorder\"></span>\r\n                <span class=\"panel-sort-item-text\">{{ 'datagrid.settings.asc' | locale: '\u5347\u5E8F' }}</span>\r\n            </div>\r\n            <div class=\"panel-sort-down panel-sort-item\" [class.active]=\"column?.order === 'desc'\"  (click)=\"onSort($event, 'desc')\">\r\n                <span class=\"panel-sort-item-icon f-icon f-icon-col-descendingorder\"></span>\r\n                <span class=\"panel-sort-item-text\">{{ 'datagrid.settings.desc' | locale: '\u964D\u5E8F' }}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>",
                providers: [
                    FilterPanelService
                ]
            }] }
];
/** @nocollapse */
DatagridSmartFilterComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector },
    { type: FilterPanelService },
    { type: DatagridSmartFilterService },
    { type: DatagridComponent, decorators: [{ type: Optional }] }
];
DatagridSmartFilterComponent.propDecorators = {
    column: [{ type: Input }],
    filterData: [{ type: Input }],
    disabled: [{ type: Input }],
    sortTmp: [{ type: ViewChild, args: ['sort',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.column;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.filterData;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.disabled;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.sortTmp;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.filterPanelRef;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterDataChanged$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.removeFilter$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.clearAllFilter$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterEvents;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.filterPanelService;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,