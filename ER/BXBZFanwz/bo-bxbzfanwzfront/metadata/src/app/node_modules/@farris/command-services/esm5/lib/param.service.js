import { Injectable } from '@angular/core';
import { QuerystringService } from './querystring';
import { RuntimeFrameworkService } from './rtf-service';
import { of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
// tslint:disable: no-string-literal
/**
 * 参数服务
 * @scope FormModule
 */
var ParamService = /** @class */ (function () {
    function ParamService(querystringService, runtimeFrameworkService) {
        this.querystringService = querystringService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    Object.defineProperty(ParamService.prototype, "params", {
        /**
         * 适配获取所有参数
         */
        get: function () {
            var _this = this;
            // 先从hash中获取参数
            var hash = window.location.hash;
            var params = this.querystringService.parse(hash);
            /*
            const appMode = params.appMode;
            // appMode没有定义，认为是老表单,appMode = mdi 或 spa
            if (typeof appMode === 'undefined' || appMode === null) {
                return of(params);
            }
            // appMode存在，但为空，也认为是老表单
            if (appMode.length < 1) {
                return of(params);
            }
            // 新表单，使用iframe模式
            if (appMode.toLowerCase() === 'mdi') {
                return of(params);
            }
            */
            // 获取tabId，最新版本一定有tabId，如果取不到tabId则认为是老表单，直接从url获取参数
            var tabId = params.tabId;
            if (!tabId) {
                // throw new Error('TabId can`t be empty!');
                return of(params);
            }
            var subject = new Subject();
            // 管道参数e可能为object、Map类型
            this.runtimeFrameworkService.addEventListener(tabId, function (e) {
                var map = {};
                if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                    map = _this.parseMapParams(e);
                }
                setTimeout(function () {
                    subject.next(Object.assign({}, e, map, params));
                }, 0);
            }, params);
            return subject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 解析map类型的参数
     * @param params params
     */
    ParamService.prototype.parseMapParams = function (params) {
        var map = {};
        map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));
        params.forEach(function (value, key) {
            if (key !== 'WEB_FORM_ROUTE_PARAMS') {
                map[key] = value;
            }
        });
        return map;
    };
    /**
     * 获取param参数
     * @param param key
     */
    ParamService.prototype.get = function (param) {
        return this.params.pipe(switchMap(function (options) {
            if (!!options && options.hasOwnProperty(param)) {
                return of(options.param);
            }
            else {
                return of(undefined);
            }
        }));
    };
    /**
     * 参数转为对象
     */
    ParamService.prototype.parse = function () {
        return this.params.pipe(switchMap(function (options) {
            return of(options);
        }));
    };
    ParamService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ParamService.ctorParameters = function () { return [
        { type: QuerystringService },
        { type: RuntimeFrameworkService }
    ]; };
    return ParamService;
}());
export { ParamService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9wYXJhbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUErQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLG9DQUFvQztBQUNwQzs7O0dBR0c7QUFDSDtJQUVJLHNCQUNZLGtCQUFzQyxFQUN0Qyx1QkFBZ0Q7UUFEaEQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0Qyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQ3hELENBQUM7SUFJTCxzQkFBVyxnQ0FBTTtRQUhqQjs7V0FFRzthQUNIO1lBQUEsaUJBcUNDO1lBcENHLGNBQWM7WUFDZCxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNsQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25EOzs7Ozs7Ozs7Ozs7OztjQWNFO1lBQ0Ysb0RBQW9EO1lBQ3BELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDUiw0Q0FBNEM7Z0JBQzVDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3JCO1lBQ0QsSUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztZQUNuQyx1QkFBdUI7WUFDdkIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxVQUFDLENBQU07Z0JBQ3hELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztnQkFDYixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtvQkFDbkcsR0FBRyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hDO2dCQUNELFVBQVUsQ0FBQztvQkFDUCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDcEQsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7SUFDRDs7O09BR0c7SUFDSyxxQ0FBYyxHQUF0QixVQUF1QixNQUFxQjtRQUN4QyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsdUJBQXVCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN2RixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFLEdBQUc7WUFDdEIsSUFBSSxHQUFHLEtBQUssdUJBQXVCLEVBQUU7Z0JBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDcEI7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7T0FHRztJQUNJLDBCQUFHLEdBQVYsVUFBVyxLQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ25CLFNBQVMsQ0FBQyxVQUFBLE9BQU87WUFDYixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDNUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzVCO2lCQUFNO2dCQUNILE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3hCO1FBQ0wsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7SUFDRDs7T0FFRztJQUNJLDRCQUFLLEdBQVo7UUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNuQixTQUFTLENBQUMsVUFBQSxPQUFPO1lBQ2IsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7O2dCQXJGSixVQUFVOzs7O2dCQVRGLGtCQUFrQjtnQkFDbEIsdUJBQXVCOztJQThGaEMsbUJBQUM7Q0FBQSxBQXRGRCxJQXNGQztTQXJGWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeXN0cmluZ1NlcnZpY2UgfSBmcm9tICcuL3F1ZXJ5c3RyaW5nJztcclxuaW1wb3J0IHsgUnVudGltZUZyYW1ld29ya1NlcnZpY2UgfSBmcm9tICcuL3J0Zi1zZXJ2aWNlJztcclxuaW1wb3J0IHsgb2YsIE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbi8vIHRzbGludDpkaXNhYmxlOiBuby1zdHJpbmctbGl0ZXJhbFxyXG4vKipcclxuICog5Y+C5pWw5pyN5YqhXHJcbiAqIEBzY29wZSBGb3JtTW9kdWxlXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQYXJhbVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBxdWVyeXN0cmluZ1NlcnZpY2U6IFF1ZXJ5c3RyaW5nU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlOiBSdW50aW1lRnJhbWV3b3JrU2VydmljZVxyXG4gICAgKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICog6YCC6YWN6I635Y+W5omA5pyJ5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgcGFyYW1zKCk6IE9ic2VydmFibGU8eyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9PiB7XHJcbiAgICAgICAgLy8g5YWI5LuOaGFzaOS4reiOt+WPluWPguaVsFxyXG4gICAgICAgIGNvbnN0IGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLnF1ZXJ5c3RyaW5nU2VydmljZS5wYXJzZShoYXNoKTtcclxuICAgICAgICAvKlxyXG4gICAgICAgIGNvbnN0IGFwcE1vZGUgPSBwYXJhbXMuYXBwTW9kZTtcclxuICAgICAgICAvLyBhcHBNb2Rl5rKh5pyJ5a6a5LmJ77yM6K6k5Li65piv6ICB6KGo5Y2VLGFwcE1vZGUgPSBtZGkg5oiWIHNwYVxyXG4gICAgICAgIGlmICh0eXBlb2YgYXBwTW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXBwTW9kZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YocGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXBwTW9kZeWtmOWcqO+8jOS9huS4uuepuu+8jOS5n+iupOS4uuaYr+iAgeihqOWNlVxyXG4gICAgICAgIGlmIChhcHBNb2RlLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOaWsOihqOWNle+8jOS9v+eUqGlmcmFtZeaooeW8j1xyXG4gICAgICAgIGlmIChhcHBNb2RlLnRvTG93ZXJDYXNlKCkgPT09ICdtZGknKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvZihwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgICAgIC8vIOiOt+WPlnRhYklk77yM5pyA5paw54mI5pys5LiA5a6a5pyJdGFiSWTvvIzlpoLmnpzlj5bkuI3liLB0YWJJZOWImeiupOS4uuaYr+iAgeihqOWNle+8jOebtOaOpeS7jnVybOiOt+WPluWPguaVsFxyXG4gICAgICAgIGNvbnN0IHRhYklkID0gcGFyYW1zLnRhYklkO1xyXG4gICAgICAgIGlmICghdGFiSWQpIHtcclxuICAgICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCdUYWJJZCBjYW5gdCBiZSBlbXB0eSEnKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICAgICAgLy8g566h6YGT5Y+C5pWwZeWPr+iDveS4um9iamVjdOOAgU1hcOexu+Wei1xyXG4gICAgICAgIHRoaXMucnVudGltZUZyYW1ld29ya1NlcnZpY2UuYWRkRXZlbnRMaXN0ZW5lcih0YWJJZCwgKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbWFwID0ge307XHJcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgTWFwIHx8IChlICYmIHR5cGVvZiAoZVsnZ2V0J10pID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlWydlbnRyaWVzJ10gPT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBtYXAgPSB0aGlzLnBhcnNlTWFwUGFyYW1zKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KE9iamVjdC5hc3NpZ24oe30sIGUsIG1hcCwgcGFyYW1zKSk7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH0sIHBhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuIHN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOino+aekG1hcOexu+Wei+eahOWPguaVsFxyXG4gICAgICogQHBhcmFtIHBhcmFtcyBwYXJhbXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwYXJzZU1hcFBhcmFtcyhwYXJhbXM6IE1hcDxhbnksIGFueT4pIHtcclxuICAgICAgICBjb25zdCBtYXAgPSB7fTtcclxuICAgICAgICBtYXBbJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUyddID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5nZXQoJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUycpKTtcclxuICAgICAgICBwYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAnV0VCX0ZPUk1fUk9VVEVfUEFSQU1TJykge1xyXG4gICAgICAgICAgICAgICAgbWFwW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBtYXA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlnBhcmFt5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQocGFyYW06IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghIW9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2Yob3B0aW9ucy5wYXJhbSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWPguaVsOi9rOS4uuWvueixoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFyc2UoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKG9wdGlvbnMgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl19