/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/clear-fields.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Self, Injector } from '@angular/core';
import { NgControl } from '@angular/forms';
import { QueryConditionComponent } from '../querycondition.component';
var ClearFieldsDirective = /** @class */ (function () {
    function ClearFieldsDirective(ngCtrl, qcc, inject) {
        this.ngCtrl = ngCtrl;
        this.qcc = qcc;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ClearFieldsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.clearFields && this.ngCtrl) {
            //console.log(this.ngCtrl, this.clearFields, this.qcc);
            //console.log(this.qcc.selectedFieldConditions);
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.qcc.fieldCodeOfClearFields = [];
                _this.clearFields.split(',').forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var conditionItem = _this.qcc.selectedFieldConditions.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.fieldCode === n; }));
                    if (conditionItem) {
                        _this.qcc.fieldCodeOfClearFields.push(n);
                        conditionItem.value.clearValue();
                    }
                }));
            }));
        }
    };
    ClearFieldsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[clear-fields]'
                },] }
    ];
    /** @nocollapse */
    ClearFieldsDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: QueryConditionComponent },
        { type: Injector }
    ]; };
    ClearFieldsDirective.propDecorators = {
        clearFields: [{ type: Input, args: ['clear-fields',] }]
    };
    return ClearFieldsDirective;
}());
export { ClearFieldsDirective };
if (false) {
    /** @type {?} */
    ClearFieldsDirective.prototype.clearFields;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.ngCtrl;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.qcc;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItZmllbGRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY2xlYXItZmllbGRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RTtJQU1JLDhCQUF3QyxNQUFpQixFQUFVLEdBQTRCLEVBQVUsTUFBZ0I7UUFBakYsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUZsRyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztJQUVvRixDQUFDOzs7O0lBRTdILHVDQUFROzs7SUFBUjtRQUFBLGlCQWVDO1FBZEcsSUFBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEMsdURBQXVEO1lBQ3ZELGdEQUFnRDtZQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTOzs7O1lBQUUsVUFBQyxDQUFDO2dCQUNsQyxLQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztnQkFDckMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTzs7OztnQkFBQyxVQUFBLENBQUM7O3dCQUMzQixhQUFhLEdBQUcsS0FBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJOzs7O29CQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFNBQVMsS0FBSyxDQUFDLEVBQWpCLENBQWlCLEVBQUM7b0JBQ25GLElBQUksYUFBYSxFQUFFO3dCQUNmLEtBQUksQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN4QyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO3FCQUNwQztnQkFDTCxDQUFDLEVBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFBO1NBQ0w7SUFDTCxDQUFDOztnQkF2QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzdCOzs7O2dCQUxRLFNBQVMsdUJBU0QsUUFBUSxZQUFJLElBQUk7Z0JBUnhCLHVCQUF1QjtnQkFGbUIsUUFBUTs7OzhCQVF0RCxLQUFLLFNBQUMsY0FBYzs7SUFvQnpCLDJCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0FyQlksb0JBQW9COzs7SUFDN0IsMkNBQXdDOzs7OztJQUU1QixzQ0FBNkM7Ozs7O0lBQUUsbUNBQW9DOzs7OztJQUFFLHNDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgT3B0aW9uYWwsIFNlbGYsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb25Db21wb25lbnQgfSBmcm9tICcuLi9xdWVyeWNvbmRpdGlvbi5jb21wb25lbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tjbGVhci1maWVsZHNdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2xlYXJGaWVsZHNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQgeyBcclxuICAgIEBJbnB1dCgnY2xlYXItZmllbGRzJykgY2xlYXJGaWVsZHMgPSAnJztcclxuICAgXHJcbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2VsZigpIHByaXZhdGUgbmdDdHJsOiBOZ0NvbnRyb2wsIHByaXZhdGUgcWNjOiBRdWVyeUNvbmRpdGlvbkNvbXBvbmVudCwgcHJpdmF0ZSBpbmplY3Q6IEluamVjdG9yKSB7fSBcclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZih0aGlzLmNsZWFyRmllbGRzICYmIHRoaXMubmdDdHJsKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGhpcy5uZ0N0cmwsIHRoaXMuY2xlYXJGaWVsZHMsIHRoaXMucWNjKTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLnFjYy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMubmdDdHJsLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnFjYy5maWVsZENvZGVPZkNsZWFyRmllbGRzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRmllbGRzLnNwbGl0KCcsJykuZm9yRWFjaChuID0+IHsgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbkl0ZW0gPSB0aGlzLnFjYy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maW5kKGMgPT4gYy5maWVsZENvZGUgPT09IG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb25JdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucWNjLmZpZWxkQ29kZU9mQ2xlYXJGaWVsZHMucHVzaChuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uSXRlbS52YWx1ZS5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19