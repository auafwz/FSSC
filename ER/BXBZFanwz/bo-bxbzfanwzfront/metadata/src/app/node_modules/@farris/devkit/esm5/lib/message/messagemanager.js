var MessageManager = /** @class */ (function () {
    // private parent:Window;
    // private children = new Map<string,Window>();
    function MessageManager() {
    }
    /**
     * 获取当前window上的MessageManager对象
     */
    MessageManager.getMessager = function () {
        if (!window['igix_messagemanager']) {
            window['igix_messagemanager'] = new MessageManager();
        }
        return window['igix_messagemanager'];
    };
    // addParentTarget(target: Window){
    //     this.parent = target;
    // }
    // addChildTarget(key: string,target: Window){
    //     this.children.set(key,target);
    // }
    MessageManager.prototype.listner = function (callbackfn) {
        window.addEventListener('message', function (e) {
            var data = e.data;
            data.sender = e.source;
            callbackfn(data);
        });
    };
    // listnerMessage(targetId: string,callbackfn: (e: any) => any){
    //     const win = this.children.get(targetId);
    //     if(!win){
    //         throw Error('This TargetId Can Not Find Window Object');
    //     }
    //     win.addEventListener('message',async function(e){
    //         await callbackfn(e);
    //     });
    // }
    MessageManager.prototype.send = function (msg) {
        // const win = this.children.get(targetId);
        var win;
        if (msg.target) {
            win = msg.target;
            delete msg.target;
        }
        else {
            win = window;
        }
        win.postMessage(msg, '*');
    };
    MessageManager.prototype.setAppContext = function (appContext) {
        this.curAppContext = appContext;
    };
    MessageManager.prototype.getAppContext = function () {
        return this.curAppContext;
    };
    return MessageManager;
}());
export { MessageManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9tZXNzYWdlL21lc3NhZ2VtYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBO0lBR0kseUJBQXlCO0lBQ3pCLCtDQUErQztJQUUvQztJQUVBLENBQUM7SUFHRDs7T0FFRztJQUNJLDBCQUFXLEdBQWxCO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7U0FDeEQ7UUFDRCxPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxtQ0FBbUM7SUFDbkMsNEJBQTRCO0lBQzVCLElBQUk7SUFFSiw4Q0FBOEM7SUFDOUMscUNBQXFDO0lBQ3JDLElBQUk7SUFFSixnQ0FBTyxHQUFQLFVBQVEsVUFBbUM7UUFDdkMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFTLENBQUM7WUFDekMsSUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQW1CLENBQUM7WUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxnRUFBZ0U7SUFDaEUsK0NBQStDO0lBQy9DLGdCQUFnQjtJQUNoQixtRUFBbUU7SUFDbkUsUUFBUTtJQUVSLHdEQUF3RDtJQUN4RCwrQkFBK0I7SUFDL0IsVUFBVTtJQUNWLElBQUk7SUFFSiw2QkFBSSxHQUFKLFVBQUssR0FBZ0I7UUFDakIsMkNBQTJDO1FBQzNDLElBQUksR0FBRyxDQUFDO1FBQ1IsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ1osR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFnQixDQUFDO1lBQzNCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQztTQUNyQjthQUFNO1lBQ0gsR0FBRyxHQUFHLE1BQU0sQ0FBQztTQUNoQjtRQUVELEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxzQ0FBYSxHQUFiLFVBQWMsVUFBc0I7UUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUM7SUFDcEMsQ0FBQztJQUVELHNDQUFhLEdBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQXBFRCxJQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lc3NhZ2VCb2R5IH0gZnJvbSAnLi9tZXNzYWdlYm9keSc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAvYXBwX2NvbnRleHQnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZU1hbmFnZXIge1xyXG5cclxuICAgIHByaXZhdGUgY3VyQXBwQ29udGV4dDogQXBwQ29udGV4dDtcclxuICAgIC8vIHByaXZhdGUgcGFyZW50OldpbmRvdztcclxuICAgIC8vIHByaXZhdGUgY2hpbGRyZW4gPSBuZXcgTWFwPHN0cmluZyxXaW5kb3c+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5b2T5YmNd2luZG935LiK55qETWVzc2FnZU1hbmFnZXLlr7nosaFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldE1lc3NhZ2VyKCk6IE1lc3NhZ2VNYW5hZ2VyIHtcclxuICAgICAgICBpZiAoIXdpbmRvd1snaWdpeF9tZXNzYWdlbWFuYWdlciddKSB7XHJcbiAgICAgICAgICAgIHdpbmRvd1snaWdpeF9tZXNzYWdlbWFuYWdlciddID0gbmV3IE1lc3NhZ2VNYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3aW5kb3dbJ2lnaXhfbWVzc2FnZW1hbmFnZXInXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhZGRQYXJlbnRUYXJnZXQodGFyZ2V0OiBXaW5kb3cpe1xyXG4gICAgLy8gICAgIHRoaXMucGFyZW50ID0gdGFyZ2V0O1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGFkZENoaWxkVGFyZ2V0KGtleTogc3RyaW5nLHRhcmdldDogV2luZG93KXtcclxuICAgIC8vICAgICB0aGlzLmNoaWxkcmVuLnNldChrZXksdGFyZ2V0KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBsaXN0bmVyKGNhbGxiYWNrZm46IChlOiBNZXNzYWdlQm9keSkgPT4gYW55KSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLmRhdGEgYXMgTWVzc2FnZUJvZHk7XHJcbiAgICAgICAgICAgIGRhdGEuc2VuZGVyID0gZS5zb3VyY2U7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrZm4oZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGlzdG5lck1lc3NhZ2UodGFyZ2V0SWQ6IHN0cmluZyxjYWxsYmFja2ZuOiAoZTogYW55KSA9PiBhbnkpe1xyXG4gICAgLy8gICAgIGNvbnN0IHdpbiA9IHRoaXMuY2hpbGRyZW4uZ2V0KHRhcmdldElkKTtcclxuICAgIC8vICAgICBpZighd2luKXtcclxuICAgIC8vICAgICAgICAgdGhyb3cgRXJyb3IoJ1RoaXMgVGFyZ2V0SWQgQ2FuIE5vdCBGaW5kIFdpbmRvdyBPYmplY3QnKTtcclxuICAgIC8vICAgICB9XHJcblxyXG4gICAgLy8gICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJyxhc3luYyBmdW5jdGlvbihlKXtcclxuICAgIC8vICAgICAgICAgYXdhaXQgY2FsbGJhY2tmbihlKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBzZW5kKG1zZzogTWVzc2FnZUJvZHkpIHtcclxuICAgICAgICAvLyBjb25zdCB3aW4gPSB0aGlzLmNoaWxkcmVuLmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgbGV0IHdpbjtcclxuICAgICAgICBpZiAobXNnLnRhcmdldCkge1xyXG4gICAgICAgICAgICB3aW4gPSBtc2cudGFyZ2V0IGFzIFdpbmRvdztcclxuICAgICAgICAgICAgZGVsZXRlIG1zZy50YXJnZXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luID0gd2luZG93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2luLnBvc3RNZXNzYWdlKG1zZywgJyonKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBcHBDb250ZXh0KGFwcENvbnRleHQ6IEFwcENvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmN1ckFwcENvbnRleHQgPSBhcHBDb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFwcENvbnRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VyQXBwQ29udGV4dDtcclxuICAgIH1cclxufSJdfQ==