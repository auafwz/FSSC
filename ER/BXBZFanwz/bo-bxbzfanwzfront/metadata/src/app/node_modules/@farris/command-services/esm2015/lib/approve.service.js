import { Injectable, Optional } from '@angular/core';
import { empty, of, from, EMPTY } from 'rxjs';
import { tap, map, switchMap, catchError } from 'rxjs/operators';
import { BeActionService } from './be-action.service';
import { FormMessageService } from './form-message.service';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
import { FormLoadingService } from './form-loading/form-loading.service';
import { FormErrorService } from './error/form-error.service';
import { WFSubmiteService } from '@gsp-wf/rtdevkit';
import { WfTaskHandlerService } from '@gsp-wf/wf-task-handler';
import { FrameContext } from '@farris/devkit';
import { WFFlowchartService } from '@gsp-wf/ui-flowchart';
import { FormNotifyStrategyService } from './form-notify-strategy.service';
// tslint:disable: max-line-length
/**
 * 审批服务
 * @Scope FrameComponent
 */
class ApproveService {
    /**
     * 构造函数
     */
    constructor(formLoadingService, beActionService, msgService, notifyService, languageService, formErrorService, frameContext, submitter, flowchartService, wfTaskHandlerService) {
        this.formLoadingService = formLoadingService;
        this.beActionService = beActionService;
        this.msgService = msgService;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.frameContext = frameContext;
        this.submitter = submitter;
        this.flowchartService = flowchartService;
        this.wfTaskHandlerService = wfTaskHandlerService;
        if (this.frameContext) {
            this.repository = this.frameContext.repository;
            if (!this.wfTaskHandlerService) {
                this.wfTaskHandlerService = this.frameContext.injector.get(WfTaskHandlerService, null);
            }
        }
    }
    /**
     * 带有交互的提交审批
     */
    submitApproveWithInteraction(bizBillID) {
        return this.submitApprove(bizBillID);
    }
    /**
     * 提交审批
     * @param bizBillID 业务单据id
     * @param interactionResult 前端交互结果
     * @deprecated 已废弃，清使用包含入口单据的审批
     */
    submitApprove(bizBillID, interactionResult) {
        if (!bizBillID) {
            // this.msgService.error(this.languageService.unallowEmptyBizBillId);
            this.notifyService.info(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return empty();
        }
        const actionUri = 'submittoapprovevoaction';
        const restService = this.beActionService.getRestService();
        const body = {
            requestInfo: restService.buildRequestInfo(),
            bizInstID: bizBillID,
            interactionResult: interactionResult ? {
                procDefId: interactionResult.processDefinitionId
            } : {}
        };
        this.formLoadingService.show();
        // 添加提示
        const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);
        // 目前包含三种情况：
        // 1. 第一次提交成功，服务端返回流程实例id
        // 2. 第一次提交成功，服务端返回流程实例id，并返回多个参与者，交互时提交参与者
        // 3. 第一次提交未成功，服务端返回多个流程定义，需要交互后第二次提交审批；第二次提交会出现情况1和情况2
        return action$.pipe(map((result) => {
            if (result && result.returnValue && result.returnValue.excutionResponse) {
                var wfResponse = result.returnValue.excutionResponse;
                return wfResponse;
            }
        }), switchMap((response) => {
            if (response && response.procInstId) {
                if (this.repository) {
                    const updating$ = this.repository.updateById(bizBillID);
                    return updating$.pipe(tap(() => {
                        this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.submitSuccess);
                        FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    }), map(() => {
                        return response;
                    }));
                }
                else {
                    this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.submitSuccess);
                    FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    return of(response);
                }
            }
            else {
                return of(response);
            }
        }), switchMap((response) => {
            if (response.needInteraction) {
                return from(new Promise((resolve) => {
                    this.submitter.excute(response, (interactionResponse) => {
                        // 如果此次未提交，而选择后得到了流程定义ID，则在此提交审批
                        if (!response.procInstId && interactionResponse.processDefinitionId) {
                            this.submitApprove(bizBillID, interactionResponse).subscribe(() => {
                                resolve();
                            });
                        }
                        else {
                            resolve();
                        }
                    });
                }));
            }
            else {
                return of(null);
            }
        }), catchError(error => {
            this.formLoadingService.hide();
            // this.formErrorService.exception(this.languageService.submitFaild, error);
            return of(error);
        }));
    }
    /**
     * 提交审批(带入口单据)
     * @param bizBillID 业务单据Id
     * @param bizDefKey 入口单据Id
     * @param options options
     * @param interactionResult 交互结果
     */
    submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResult) {
        if (!bizBillID) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
            return EMPTY;
        }
        try {
            if (options && typeof (options) === 'string') {
                options = JSON.parse(options);
            }
        }
        catch (e) {
            throw new Error('ArgumentError:options not a valid json string.');
        }
        const actionUri = 'submittoapprovewithpayload';
        const restService = this.beActionService.getRestService();
        const body = {
            requestInfo: restService.buildRequestInfo(),
            approvePayload: {
                startProcessPayload: {
                    bizDefKey: bizDefKey,
                    dataId: bizBillID,
                    name: options && options.name || '',
                    variables: options && options.variables || {}
                }
            }
        };
        if (interactionResult) {
            body.approvePayload.startProcessPayload.processDefinitionId = interactionResult.processDefinitionId;
            body.approvePayload.startProcessPayload.processDefinitionKey = interactionResult['processDefinitionKey'];
        }
        this.formLoadingService.show();
        // 添加提示
        const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);
        // 目前包含三种情况：
        // 1. 第一次提交成功，服务端返回流程实例id
        // 2. 第一次提交成功，服务端返回流程实例id，并返回多个参与者，交互时提交参与者
        // 3. 第一次提交未成功，服务端返回多个流程定义，需要交互后第二次提交审批；第二次提交会出现情况1和情况2
        return action$.pipe(map((result) => {
            if (result && result.returnValue && result.returnValue.excutionResponse) {
                const wfResponse = result.returnValue.excutionResponse;
                return wfResponse;
            }
        }), switchMap((response) => {
            if (response && response.procInstId) {
                if (this.repository) {
                    const updating$ = this.repository.updateById(bizBillID);
                    return updating$.pipe(tap(() => {
                        this.formLoadingService.hide();
                        // this.notifyService.info(this.languageService.submitSuccess);
                        FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    }), map(() => {
                        return response;
                    }));
                }
                else {
                    this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.submitSuccess);
                    FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);
                    return of(response);
                }
            }
            else {
                return of(response);
            }
        }), switchMap((response) => {
            if (response.needInteraction) {
                return from(new Promise((resolve) => {
                    this.submitter.excute(response, (interactionResponse) => {
                        // 如果此次未提交，而选择后得到了流程定义ID，则在此提交审批
                        console.log(response);
                        if (!response.procInstId && interactionResponse.processDefinitionId) {
                            this.submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResponse).subscribe(() => {
                                resolve();
                            });
                        }
                        else {
                            resolve();
                        }
                    });
                }));
            }
            else {
                return of(null);
            }
        }), catchError(error => {
            this.formLoadingService.hide();
            // this.formErrorService.exception(this.languageService.submitFaild, error);
            return of(error);
        }));
    }
    /**
     * 提交审批(带入口单据使用wf控件)
     * @param bizBillID 业务单据Id
     * @param bizDefKey 入口单据Id
     * @param options 上下文参数
     * @param variables 可选参数
     */
    submitApproveWithBizDefKeyUseControl(bizBillID, bizDefKey, options = {}, variables) {
        if (!bizBillID) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        const payload = Object.assign({ dataId: bizBillID, bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    console.log('variables parse failed!');
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    }
    /**
     * 子表提交审批
     * @param bizDefKey 入口单据Id
     * @param bizId 业务单据Id（主表）
     * @param childBizId 业务单据Id（从表）
     * @param options 上下文参数
     * @param variables 可选参数
     */
    childSubmitApproveWithBizDefKey(bizDefKey, bizId, childBizId, options = {}, variables) {
        // 入口单据不能为空
        if (!bizDefKey) {
            this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });
            return EMPTY;
        }
        // 主业务单据Id不能为空
        if (!bizId) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return EMPTY;
        }
        // 从表业务单据Id不能为空
        if (!childBizId) {
            this.notifyService.warning(this.languageService.unallowEmptyChildBizBillId, { hideTitle: true });
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        const payload = Object.assign({ dataId: `${bizId},${childBizId}`, bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    console.log('variables parse failed!');
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    }
    /**
     * 取消审批
     * @deprecated 已废弃，请使用cancelSubmit
     */
    cancelApprove(bizBillID) {
        if (!bizBillID) {
            this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });
            return empty();
        }
        const actionUri = 'canceltosubmitvoaction';
        const restService = this.beActionService.getRestService();
        const body = {
            requestInfo: restService.buildRequestInfo(),
            bizInstID: bizBillID,
        };
        this.formLoadingService.show();
        const action$ = this.beActionService.executeAction(actionUri, 'PUT', null, null, body);
        return action$.pipe(switchMap(() => {
            if (this.repository) {
                const updating$ = this.repository.updateById(bizBillID);
                return updating$.pipe(tap(() => {
                    this.formLoadingService.hide();
                    // this.notifyService.info(this.languageService.cancelApproveSuccess);
                    FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);
                }));
            }
            else {
                this.formLoadingService.hide();
                // this.notifyService.info(this.languageService.cancelApproveSuccess);
                FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);
                return of();
            }
        }), catchError(error => {
            this.formLoadingService.hide();
            // this.formErrorService.exception(this.languageService.cancelApproveFailed, error);
            return of(error);
        }));
    }
    /**
     * 取消审批(支持主表、子表)
     * @param procInstId 流程实例Id
     */
    cancelSubmit(procInstId) {
        if (!procInstId) {
            this.notifyService.warning(this.languageService.procInsIdRequired, { hideTitle: true });
            return EMPTY;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ procInstId: procInstId });
    }
    /**
     * 查看流程图
     * @param procInstId 流程实例ID
     */
    viewProcess(procInstId) {
        if (this.flowchartService) {
            if (!procInstId) {
                this.notifyService.warning(this.languageService.noProcessInstanceId, { hideTitle: true });
                return;
            }
            return this.flowchartService.viewFlowChart(procInstId);
        }
    }
    /**
     * 转换配置大小写
     * @param jsonObj Object
     * @deprecated
     */
    switchPrefixLetter(jsonObj, toUpper) {
        if (typeof (jsonObj) === 'object' && !!jsonObj) {
            if (Array.isArray(jsonObj)) {
                for (var i = 0; i < jsonObj.length; i++) {
                    this.switchPrefixLetter(jsonObj[i], toUpper);
                }
            }
            else {
                for (const key of Object.keys(jsonObj)) {
                    var newKey = (toUpper ? key.substring(0, 1).toUpperCase() : key.substring(0, 1).toLowerCase()) + key.substring(1);
                    jsonObj[newKey] = jsonObj[key];
                    if (typeof jsonObj[key] === 'object') {
                        this.switchPrefixLetter(jsonObj[key], toUpper);
                    }
                    delete (jsonObj[key]);
                }
            }
        }
        return jsonObj;
    }
}
ApproveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApproveService.ctorParameters = () => [
    { type: FormLoadingService },
    { type: BeActionService },
    { type: FormMessageService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormErrorService },
    { type: FrameContext },
    { type: WFSubmiteService, decorators: [{ type: Optional }] },
    { type: WFFlowchartService, decorators: [{ type: Optional }] },
    { type: WfTaskHandlerService, decorators: [{ type: Optional }] }
];
export { ApproveService };
//# sourceMappingURL=data:application/json;base64,