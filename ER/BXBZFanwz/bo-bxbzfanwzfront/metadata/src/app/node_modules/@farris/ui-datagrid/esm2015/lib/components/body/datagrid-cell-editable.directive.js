/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 15:48:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Input, ElementRef, Renderer2, ContentChild, Injector, forwardRef, Inject, NgZone } from '@angular/core';
import { filter, debounceTime } from 'rxjs/operators';
import { DatagridService } from './../../services/datagrid.service';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DatagridBodyComponent } from './datagrid-body.component';
import { DatagridRowDirective } from './datagrid-row.directive';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { CELL_SELECTED_CLS, CELL_EDITING_CLS, ALLOW_EDIT_CELL_HIGHLIGHT_CLS } from '../../types/constant';
import { DomHandler } from '../../services/domhandler';
import { of } from 'rxjs';
import { Utils } from '../../utils/utils';
export class DatagridCellEditableDirective {
    /**
     * @param {?} injector
     * @param {?} el
     * @param {?} render
     * @param {?} dg
     * @param {?} ngZone
     */
    constructor(injector, el, render, dg, ngZone) {
        this.injector = injector;
        this.el = el;
        this.render = render;
        this.dg = dg;
        this.ngZone = ngZone;
        // private _readonly$ = null;
        this.cellEditorCreatedSubscription = null;
        this.cellEditorDestorySubscription = null;
        this.dgb = this.injector.get(DatagridBodyComponent);
        this.dr = this.injector.get(DatagridRowDirective);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        if (!this.cellEditorCreatedSubscription) {
            this.cellEditorCreatedSubscription = this.dgs.cellEditorCreated.pipe(filter((/**
             * @param {?} __0
             * @return {?}
             */
            ({ column, editorRef, cellEditorRef, templateRef }) => {
                return column.field === this.column.field && this.dg.selectedRow.id === this.dr.rowId;
            }))).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ({ editorRef, cellEditorRef, templateRef }) => {
                // console.log('单元格编辑器创建OK', editorRef);
                if (editorRef) {
                    this['editor'] = editorRef.instance;
                    this['formControl'] = (/** @type {?} */ (this.editor.formControl));
                    this.cellEditorRef = cellEditorRef;
                    this.emitBeginEdit();
                }
                else {
                    this['formControl'] = (/** @type {?} */ (this.dr.form.get(this.column.field)));
                    this.bindEditorInputEvent();
                    this.dg.beginEdit.emit({ editor: null, column: this.column, rowData: this.rowData, gridInstance: this.dg, template: templateRef });
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.setCellClsWithEditorType();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initCellEvent();
        this.setCellClsWithEditorType();
    }
    /**
     * @private
     * @return {?}
     */
    initCellEvent() {
        // this.cellclick = this.render.listen(this.el.nativeElement, 'click', (e) => this.onClickCell(e));
        if (this.column && (this.column.editor || this.column.editorTemplate)) {
            if (!this.dg.clickToEdit) {
                this.celldblclick = this.render.listen(this.el.nativeElement, 'dblclick', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.onDblClickCell(e);
                }));
            }
            this.el.nativeElement.edit = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => this.onClickCell(e));
            this.el.nativeElement.editCell = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.openCellEditor();
            });
        }
        else {
            this.clickTimer = 0;
        }
        this.el.nativeElement.gridCellData = { rowData: this.rowData, rowIndex: this.dr.rowIndex };
        this.el.nativeElement.closeEdit = (/**
         * @return {?}
         */
        () => this.closeEditingCell());
        this.el.nativeElement.selectCell = (/**
         * @param {?} e
         * @param {?} el
         * @return {?}
         */
        (e, el) => {
            if (this.dg.disableRow && this.dg.disableRow(this.rowData, this.dr.rowIndex)) {
                return;
            }
            if (this.dg.currentCell && this.dg.currentCell.cellElement.id === el.id && !this.dg.keepSelect) {
                this.dg.cancelSelectCell();
            }
            else {
                this.selectCell(this.column.field, el);
                this.dg.cellClick.emit({ column: this.column, rowData: this.rowData, gridInstance: this.dg, event: e });
            }
        });
        this.el.nativeElement.cancelSelected = (/**
         * @return {?}
         */
        () => {
            DomHandler.removeClass(this.el.nativeElement, CELL_SELECTED_CLS);
            this.render.removeClass(this.el.nativeElement, CELL_EDITING_CLS);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cellclick) {
            this.cellclick();
        }
        if (this.celldblclick) {
            this.celldblclick();
        }
        this.unBindEditorInputEvent();
        if (this.bindCellEventSubscription) {
            this.bindCellEventSubscription.unsubscribe();
            this.bindCellEventSubscription = null;
        }
        if (this.cellEditorCreatedSubscription) {
            this.cellEditorCreatedSubscription.unsubscribe();
            this.cellEditorCreatedSubscription = null;
        }
        if (this.cellEditorDestorySubscription) {
            this.cellEditorDestorySubscription.unsubscribe();
            this.cellEditorDestorySubscription = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    isDifferentCell() {
        if (!this.dg.currentCell) {
            return true;
        }
        else {
            if (!this.dg.selectedRow || this.dg.selectedRow.index !== this.dr.rowIndex) {
                return true;
            }
            else {
                if (this.dr.rowIndex !== this.dg.currentCell.rowIndex) {
                    return true;
                }
                else {
                    return this.dg.currentCell.field !== this.column.field;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onClickCell(event) {
        // 关闭其他Grid 的编辑器
        document.body.click();
        this.dg.beforeClickCell.emit({ rowIndex: this.dr.rowIndex, rowData: this.rowData, column: this.column, gridInstance: this.dg });
        if (this.dr.disabled) {
            return;
        }
        // 20210422
        // if (this.dg.closeOtherGridEditor) {
        //     document.body.click();
        // }
        if (this.dg.disabled) {
            return;
        }
        else {
            if (!this.dg.editable || this.isReadonly()) {
                if (this.dg.enableHighlightCell) {
                    event.stopPropagation();
                    this.dg.endEditing();
                    this.selectCell(this.column.field);
                }
                return;
            }
            else {
                if (this.dg.editMode === 'row') {
                    return;
                }
            }
        }
        if (this.dg.selectionMode === 'default' && event) {
            if (event.ctrlKey || event.shiftKey) {
                return;
            }
        }
        event.stopPropagation();
        if (event.target['nodeName'] === 'INPUT') {
            return;
        }
        if (this.dg.clickToEdit && !this.dg.dblclickRow.observers.length) {
            this.dg.clickDelay = 0;
        }
        this.render.addClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
        if (!this.dg.isSingleClick && this.dg.editMode) {
            this.dg.isSingleClick = true;
            this.clickTimer = setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.dg.isSingleClick && this.dg.editable && this.dg.editMode === 'cell') {
                    this.dg.isSingleClick = false;
                    clearTimeout(this.clickTimer);
                    // if (!this.closeEditingCell()) {
                    //     return;
                    // }
                    this.closeEditingCell().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    (f) => {
                        if (f) {
                            if (this.dg.clickToEdit) {
                                this.openCellEditor();
                            }
                            else {
                                this.selectCell(this.column.field);
                            }
                            this.render.removeClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
                            event.preventDefault();
                        }
                    }));
                }
            }), this.dg.clickDelay);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDblClickCell(event) {
        if (this.dg.disabled || this.isReadonly()) {
            return;
        }
        if (event.target['nodeName'] === 'INPUT' || event.target['nodeName'] === 'TEXTAREA') {
            return;
        }
        if (this.dg.editable && this.dg.editMode === 'cell') {
            // if (!this.closeEditingCell()) {
            //     return;
            // }
            this.closeEditingCell().subscribe((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                if (f) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.openCellEditor();
                    }));
                }
            }));
        }
        if (this.clickTimer) {
            this.dg.isSingleClick = false;
            clearTimeout(this.clickTimer);
            this.clickTimer = null;
        }
    }
    /**
     * @param {?=} col
     * @return {?}
     */
    isReadonly(col = this.column) {
        // 参与合并的单元格不允许编辑
        if (this.dg.mergeCell && this.dg.mergeFields.indexOf(col.field) > -1) {
            return true;
        }
        return this.getReadonlyValue(col);
    }
    /**
     * @private
     * @param {?=} col
     * @return {?}
     */
    getReadonlyValue(col = this.column) {
        if (col.readonly !== undefined) {
            if (typeof col.readonly === 'boolean') {
                return col.readonly;
            }
            else if (typeof col.readonly === 'function') {
                return col.readonly(this.rowData);
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    openCellEditor() {
        // 当前行禁用，不允许编辑。
        if (this.dr.disabled) {
            return;
        }
        if ((!this.column.editor && !this.column.editorTemplate) || !this.dg.editable || this.isReadonly()) {
            this.selectCell(this.column.field);
            return;
        }
        /** @type {?} */
        const beforeEditEvent = this.dg.beforeEdit({ rowIndex: this.dr.rowIndex, rowData: this.rowData, column: this.column, gridInstance: this.dg });
        if (!beforeEditEvent || !beforeEditEvent.subscribe) {
            console.warn('please return an Observable Type.');
            return;
        }
        if (this.dg.currentCell) {
            if (!this.dg.currentCell.cellRef || this.dg.currentCell.cellRef.column.field !== this.column.field) {
                this.dg.currentCell.cellRef = this.dc;
            }
        }
        beforeEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            if (flag) {
                if (this.isDifferentCell()) {
                    this.selectCell(this.column.field);
                }
                this.dfs.editCell();
                // this.emitBeginEdit();
            }
            else {
                this.selectCell(this.column.field);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    emitBeginEdit() {
        /** @type {?} */
        const _cellEditorRef = this.cellEditorRef || this.dc.cellEditor;
        this.render.removeClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
        if (this.dg.editMode === 'cell') {
            this.dg.selectedRow.editors = [this.editor];
            this.dg.currentCell.editor = this.editor;
            this.dg.currentCell.cellEditorRef = _cellEditorRef;
            this.bindEditorInputEvent();
            this.render.addClass(this.el.nativeElement, CELL_EDITING_CLS);
            // this.formControl.setValue(this.dc.value);
            this.dg.beginEdit.emit({ editor: _cellEditorRef, column: this.column, rowData: this.rowData, gridInstance: this.dg });
            if (this.column.editor.type === 'textarea' && this.column.editor.options && this.column.editor.options.editType === 'dialog') {
                this.editor.showDialog();
            }
        }
        if (this.dr && !this.dg.nowrap) {
            this.dr.updateRowHeight();
        }
    }
    /**
     * @return {?}
     */
    closeEditingCell() {
        if (!this.dg.isCellEditing()) {
            return of(true);
        }
        /** @type {?} */
        let currentCell = null;
        /** @type {?} */
        let editor = null;
        if (this.dg.currentCell) {
            // this.dg.currentCell.isEditing = false;
            // this.dfs.getCurrentCell().isEditing = false;
            currentCell = (/** @type {?} */ (this.dg.currentCell.cellRef));
            if (currentCell) {
                if (!currentCell.isEditing) {
                    return of(true);
                }
                if (currentCell.cellEditor && currentCell.cellEditor.componentRef && !currentCell.column.editorTemplate) {
                    editor = currentCell.cellEditor.componentRef.instance;
                    if (editor) {
                        // 执行blur 事件
                        if (editor.inputElement) {
                            /** @type {?} */
                            const domName = editor.inputElement.nodeName;
                            /** @type {?} */
                            const blurFn = editor.options && editor.options.onBlur;
                            if (blurFn) {
                                if ((domName === 'INPUT' || domName === 'TEXTAREA') && this.dg['focusElement'] === editor.inputElement) {
                                    blurFn({ editorRef: editor, rowData: currentCell.rowData });
                                }
                            }
                            if (editor.inputElement.blur) {
                                editor.inputElement.blur();
                            }
                            this.dg['focusElement'] = null;
                        }
                        if (editor.blur) {
                            editor.blur();
                        }
                        if (editor.pending) {
                            return of(false);
                        }
                        if (editor.formControl) {
                            if (editor.formControl.pending) {
                                return of(false);
                            }
                            if (editor.formControl && editor.formControl.invalid && !this.dg.endEditByInvalid) {
                                return of(false);
                            }
                        }
                        else {
                            return of(true);
                        }
                    }
                    else {
                        return of(true);
                    }
                }
            }
        }
        else {
            return of(true);
        }
        this.dg.isSingleClick = false;
        /** @type {?} */
        const _col_ = (editor || currentCell).column;
        /** @type {?} */
        const afterEditEvent = this.dg.afterEdit(currentCell.rowIndex, currentCell.rowData, _col_, editor);
        if (!afterEditEvent || !afterEditEvent.subscribe) {
            console.warn('please return an Observable Type.');
            return;
        }
        /** @type {?} */
        let cellEndEdit = of(undefined);
        afterEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            if (flag) {
                /** @type {?} */
                let val = currentCell.value;
                if (currentCell && currentCell.formControl && val !== currentCell.formControl.value) {
                    val = currentCell.formControl.value;
                    currentCell.isEditing = false;
                    currentCell.updateValue(val);
                }
                this.dfs.endEditCell();
                this.dgs.onEndCellEdit(this.dfs.getCurrentCell());
                this.unBindEditorInputEvent();
                // 移除编辑样式
                this.render.removeClass(this.el.nativeElement, CELL_EDITING_CLS);
                if (this.dg.selectedRow) {
                    this.dg.selectedRow.editors = [];
                }
                // this.dg.selectedRow.data = this.rowData;
                // 更新行样式或者单元格样式
                this.dfs.rowUpdate$.next({ index: currentCell.rowIndex, data: currentCell.rowData, cellRef: currentCell });
                this.dg.endEdit.emit({ rowIndex: currentCell.rowIndex, rowData: currentCell.rowData, column: _col_, value: val });
                // 更新footerData
                this.dgs.refreshFooterData.emit();
                cellEndEdit = of(true);
                // 刷新行数据
                // this.dr.refresh();
                if (this.dg.selectedRow && this.dg.selectedRow.dr) {
                    this.dg.selectedRow.dr.refresh();
                }
            }
            else {
                if (currentCell && currentCell.cellEditor) {
                    editor = currentCell.cellEditor.componentRef.instance;
                    editor.inputElement.focus();
                    cellEndEdit = of(false);
                }
                else {
                    cellEndEdit = of(true);
                }
            }
        }));
        return cellEndEdit;
    }
    /**
     * @return {?}
     */
    cancelCellEditing() {
        if (this.dg.currentCell && this.dg.currentCell.isEditing && this.dg.selectedRow.index > -1) {
            this.dfs.resetRow(this.dg.selectedRow.id);
            this.dc.rowData = this.dg.selectedRow.data;
            this.formControl.reset(Utils.getValue(this.column.field, this.dc.rowData));
            this.closeEditingCell();
        }
    }
    /**
     * @return {?}
     */
    bindEditorInputEvent() {
        /** @type {?} */
        const ceRef = this.cellEditorRef || this.dc.cellEditor;
        /** @type {?} */
        let input = null;
        if (ceRef) {
            input = ceRef.componentRef.instance.inputElement;
        }
        else {
            if (this.column.editorTemplate) {
                input = this.dc.el.nativeElement.querySelector('input,textarea');
            }
        }
        if (input) {
            input.focus();
            if (this.dg.selectOnEditing && this.column.editorTemplate) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (input.select) {
                        input.select();
                    }
                }));
            }
            this.editorInputKeydownEvent = this.render.listen(input, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.onKeyDownForInput(e);
            }));
        }
    }
    /**
     * @return {?}
     */
    unBindEditorInputEvent() {
        if (this.editorInputKeydownEvent) {
            this.editorInputKeydownEvent();
            this.editorInputKeydownEvent = null;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDownForInput(e) {
        /** @type {?} */
        const keyCode = e.keyCode;
        if (e.altKey || e.ctrlKey) {
            return;
        }
        if ((this.editor && this.editor.stopPropagation) || keyCode === 13 || this.column.editorTemplate) {
            e.stopPropagation();
        }
        switch (keyCode) {
            case 32: // SPACE
                if (this.column.editor.type === 'switch') {
                    e.preventDefault();
                    this.editor.instance.updateChecked(e, false);
                }
                break;
            case 13: // Enter
                this.closeEditingCell().pipe(debounceTime(100)).subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => {
                    if (f) {
                        /** @type {?} */
                        const enterParam = { gird: this.dg, cell: this.dg.currentCell, event: e };
                        if (this.column.onEnterHandler) {
                            this.column.onEnterHandler(enterParam);
                        }
                        else {
                            /** @type {?} */
                            const nextTd = this.dg.currentCell.cellElement.nextElementSibling;
                            if (this.dg.currentCell.lastRow && !nextTd) {
                                this.dg.lastCellEnterHandle.emit(enterParam);
                            }
                        }
                    }
                }));
                break;
            case 27: // ESC
                this.cancelCellEditing();
                break;
            case 9: // Tab
                e.stopPropagation();
                this.dg.clickDelay = 0;
                if (e.shiftKey) {
                    this.closeEditingCell().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            this.movePrevCellAndEdit();
                        }
                    }));
                }
                else {
                    this.closeEditingCell().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            this.moveNextCellAndEdit(e);
                        }
                    }));
                    e.preventDefault();
                }
                break;
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?=} tdElement
     * @return {?}
     */
    selectCell(field, tdElement) {
        this.closeEditingCell();
        tdElement = tdElement || this.el.nativeElement;
        this.clearCellSelectedClass();
        if (field !== this.dg.ControlPanelFeild) {
            this.render.addClass(tdElement, CELL_SELECTED_CLS);
        }
        // this.dr.drHover.setRowHoverCls(false);
        this.dfs.setCurrentCell(this.dr, field, tdElement, this.dc);
        this.moveScrollbar(tdElement);
    }
    /**
     * @private
     * @param {?} td
     * @return {?}
     */
    moveScrollbar(td) {
        /** @type {?} */
        const tdPosLeft = td.offsetLeft + td.offsetWidth;
        /** @type {?} */
        const containerWidth = this.dg.width - this.dgb.columnsGroup.leftFixedWidth;
        /** @type {?} */
        const tdRect = td.getBoundingClientRect();
        /** @type {?} */
        const scrollContainer = this.dgb.ps.elementRef.nativeElement;
        /** @type {?} */
        const psContainer = scrollContainer.getBoundingClientRect();
        /** @type {?} */
        const scrollTop = scrollContainer.scrollTop;
        /** @type {?} */
        const scrollLeft = scrollContainer.scrollLeft;
        /** @type {?} */
        const scrollbarXLeft = this.dgb.ps.elementRef.nativeElement.scrollLeft;
        if (tdPosLeft > containerWidth) {
            /** @type {?} */
            const x = tdPosLeft - containerWidth + 2;
            if (x > scrollbarXLeft) {
                this.dgb.ps.scrollToX(x);
            }
        }
        else {
            if (tdRect.x < psContainer.x) {
                /** @type {?} */
                const x = scrollLeft - tdRect.x;
                this.dgb.ps.scrollToX(x);
            }
        }
        /** @type {?} */
        const tdPosTop = tdRect.top - psContainer.top + tdRect.height;
        if (tdPosTop > psContainer.height) {
            /** @type {?} */
            const y = tdPosTop - psContainer.height;
            this.dgb.ps.scrollToY(scrollTop + y);
        }
        else {
            if (tdRect.y < psContainer.y) {
                this.dgb.ps.scrollToY(scrollTop - (psContainer.y - tdRect.y));
            }
        }
    }
    /**
     * @private
     * @param {?=} event
     * @return {?}
     */
    moveNextCellAndEdit(event) {
        // if (!this.closeEditingCell()) {
        //     return;
        // }
        /** @type {?} */
        const fieldIndex = this.dfs.getColumnIndex(this.column.field);
        if (fieldIndex + 1 < this.dgb.columnsGroup.normalColumns.length) {
            /** @type {?} */
            const nextColumn = this.dgb.columnsGroup.normalColumns[fieldIndex + 1];
            /** @type {?} */
            const nextTd = this.dg.currentCell.cellElement.nextElementSibling;
            if (nextColumn && ((!nextColumn.editor && !nextColumn.editorTemplate) || this.isReadonly(nextColumn))) {
                if (nextTd) {
                    nextTd.selectCell(event, nextTd);
                }
                return;
            }
            if (nextTd) {
                nextTd.focus();
                if (nextColumn.editor || nextColumn.editorTemplate) {
                    nextTd.editCell();
                    this.dgs.onCellEdit(nextTd);
                }
            }
        }
        else {
            // next row's first cell to editing
            /** @type {?} */
            const nextTr = this.dg.currentCell.cellElement.parentElement.nextElementSibling;
            if (nextTr && nextTr.tagName === 'TR') {
                // nextTr.children.find(td => td.editCell).editCell();
                /** @type {?} */
                let firstEditor = false;
                /** @type {?} */
                let i = 0;
                while (!firstEditor) {
                    firstEditor = !!nextTr.children[i].editCell;
                    if (!firstEditor) {
                        i++;
                    }
                }
                if (this.dg.selectionMode === 'default') {
                    this.dg.clearCheckeds();
                }
                nextTr.children[i].editCell();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    movePrevCellAndEdit() {
        // if (!this.closeEditingCell()) {
        //     return;
        // }
        /** @type {?} */
        const fieldIndex = this.dfs.getColumnIndex(this.column.field);
        if (fieldIndex - 1 >= 0) {
            /** @type {?} */
            const nextColumn = this.dgb.columnsGroup.normalColumns[fieldIndex - 1];
            if (nextColumn && this.isReadonly(nextColumn)) {
                return;
            }
            /** @type {?} */
            const nextTd = this.dg.currentCell.cellElement.previousElementSibling;
            if (nextTd) {
                // this.selectCell(nextColumn.field, nextTd);
                nextTd.focus();
                if (nextColumn.editor) {
                    // this.dfs.editCell();
                    nextTd.click();
                    this.dgs.onCellEdit(nextTd);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearCellSelectedClass() {
        if (this.dg.currentCell) {
            DomHandler.removeClass(this.dg.currentCell.cellElement, CELL_SELECTED_CLS);
            this.render.removeClass(this.dg.currentCell.cellElement, CELL_EDITING_CLS);
            /** @type {?} */
            const selectedCell = this.dg.el.nativeElement.querySelectorAll('.' + CELL_SELECTED_CLS);
            if (selectedCell.length) {
                selectedCell.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    this.render.removeClass(n, CELL_SELECTED_CLS);
                }));
            }
        }
        this.dg.removeCellSelectedCls();
    }
    /**
     * @private
     * @return {?}
     */
    setCellClsWithEditorType() {
        // 设置当前选中单元格样式
        if (this.dg.currentCell && this.dg.enableHighlightCell) {
            if (this.dg.currentCell.field === this.column.field && this.dg.currentCell.rowId === this.rowData[this.dg.idField] && !this.dc.isEditing) {
                this.clearCellSelectedClass();
                this.render.addClass(this.el.nativeElement, CELL_SELECTED_CLS);
            }
        }
        if (!this.dg.enableEditCellStyle) {
            return;
        }
        /** @type {?} */
        const td = this.el.nativeElement;
        this.cleanOtherEditorIcon(td);
        // 当前行禁用，不允许编辑。
        if (this.dr.disabled) {
            return;
        }
        if (!this.column.editor) {
            return;
        }
        if (this.isReadonly()) {
            return;
        }
        /** @type {?} */
        const editorType = this.column.editor.type;
        /** @type {?} */
        const cls = this.column.align === 'right' ? 'allow-edit-cell-left' : 'allow-edit-cell';
        this.render.addClass(td, cls);
        this.render.addClass(td, ALLOW_EDIT_CELL_HIGHLIGHT_CLS[editorType]);
    }
    /**
     * @private
     * @param {?} td
     * @return {?}
     */
    cleanOtherEditorIcon(td) {
        /** @type {?} */
        const values = Object.values(ALLOW_EDIT_CELL_HIGHLIGHT_CLS);
        values.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (td.className.indexOf(v) > -1) {
                td.className = td.className.replace('allow-edit-cell-left', '').replace('allow-edit-cell', '');
                td.className = td.className.replace(v, '');
            }
        }));
    }
}
DatagridCellEditableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cell-editable]',
                exportAs: 'cellEditable'
            },] }
];
/** @nocollapse */
DatagridCellEditableDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] },
    { type: NgZone }
];
DatagridCellEditableDirective.propDecorators = {
    rowData: [{ type: Input, args: ['cell-editable',] }],
    column: [{ type: Input }],
    dc: [{ type: ContentChild, args: [DatagridCellComponent,] }]
};
if (false) {
    /** @type {?} */
    DatagridCellEditableDirective.prototype.rowData;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.column;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.clickTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.celldblclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.bindCellEventSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.editorInputKeydownEvent;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.editor;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.formControl;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.cellEditorRef;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.dc;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dgb;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dr;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellEditorCreatedSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellEditorDestorySubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.injector;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.render;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.dg;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,