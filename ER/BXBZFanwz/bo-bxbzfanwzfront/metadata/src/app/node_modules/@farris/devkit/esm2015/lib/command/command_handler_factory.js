/**
 * 命令处理器工厂相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { FrameContext } from '../frame/index';
import { CommandHandlerRegistry } from './command_handler_registry';
import { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';
import { VariableParseService } from '../variable/variable_parse_service';
/**
 * 命令处理器工厂
 */
class CommandHandlerFactory {
    /**
     * 构造函数
     * @param handlerRegistry  命令处理注册器
     * @param extenderRegistry 命令处理扩展注册器
     */
    constructor(handlerRegistry, extenderRegistry, frameContext, variableParseService) {
        this.handlerRegistry = handlerRegistry;
        this.extenderRegistry = extenderRegistry;
        this.frameContext = frameContext;
        this.variableParseService = variableParseService;
    }
    /**
     * 创建命令处理器
     * @param   commandName 命令名称
     * @returns 对应的命令处理器实例
     */
    create(commandName) {
        const rawHandler = this.handlerRegistry.get(commandName);
        rawHandler.init(this.frameContext, this.variableParseService);
        const extenders = this.extenderRegistry.get(commandName);
        // 遍历extenders，依次对handler进行扩展
        return extenders.reduce((handler, extender) => {
            return extender.extend(handler);
        }, rawHandler);
    }
}
CommandHandlerFactory.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandHandlerFactory.ctorParameters = () => [
    { type: CommandHandlerRegistry },
    { type: CommandHandlerExtenderRegistry },
    { type: FrameContext },
    { type: VariableParseService }
];
export { CommandHandlerFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2NvbW1hbmRfaGFuZGxlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTFFOztHQUVHO0FBQ0gsTUFDTSxxQkFBcUI7SUFFekI7Ozs7T0FJRztJQUNILFlBQ1UsZUFBdUMsRUFDdkMsZ0JBQWdELEVBQ2hELFlBQTBCLEVBQzFCLG9CQUEwQztRQUgxQyxvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUFDdkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFnQztRQUNoRCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO0lBRXBELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFdBQW1CO1FBQy9CLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pELFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXpELDZCQUE2QjtRQUM3QixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUF1QixFQUFFLFFBQWdDLEVBQUUsRUFBRTtZQUNwRixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7OztZQTlCRixVQUFVOzs7O1lBUkYsc0JBQXNCO1lBRXRCLDhCQUE4QjtZQUo5QixZQUFZO1lBS1osb0JBQW9COztBQXVDN0IsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5ZG95Luk5aSE55CG5Zmo5bel5Y6C55u45YWz5a6a5LmJXHJcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICcuLi9mcmFtZS9pbmRleCc7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXInO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlclJlZ2lzdHJ5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfcmVnaXN0cnknO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlckV4dGVuZGVyIH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlckV4dGVuZGVyUmVnaXN0cnkgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9leHRlbmRlcl9yZWdpc3RyeSc7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VTZXJ2aWNlIH0gZnJvbSAnLi4vdmFyaWFibGUvdmFyaWFibGVfcGFyc2Vfc2VydmljZSc7XHJcblxyXG4vKipcclxuICog5ZG95Luk5aSE55CG5Zmo5bel5Y6CXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIENvbW1hbmRIYW5kbGVyRmFjdG9yeSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSBoYW5kbGVyUmVnaXN0cnkgIOWRveS7pOWkhOeQhuazqOWGjOWZqFxyXG4gICAqIEBwYXJhbSBleHRlbmRlclJlZ2lzdHJ5IOWRveS7pOWkhOeQhuaJqeWxleazqOWGjOWZqFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBoYW5kbGVyUmVnaXN0cnk6IENvbW1hbmRIYW5kbGVyUmVnaXN0cnksXHJcbiAgICBwcml2YXRlIGV4dGVuZGVyUmVnaXN0cnk6IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJSZWdpc3RyeSxcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBwcml2YXRlIHZhcmlhYmxlUGFyc2VTZXJ2aWNlOiBWYXJpYWJsZVBhcnNlU2VydmljZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65ZG95Luk5aSE55CG5ZmoXHJcbiAgICogQHBhcmFtICAgY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXHJcbiAgICogQHJldHVybnMg5a+55bqU55qE5ZG95Luk5aSE55CG5Zmo5a6e5L6LXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZShjb21tYW5kTmFtZTogc3RyaW5nKTogQ29tbWFuZEhhbmRsZXIge1xyXG4gICAgY29uc3QgcmF3SGFuZGxlciA9IHRoaXMuaGFuZGxlclJlZ2lzdHJ5LmdldChjb21tYW5kTmFtZSk7XHJcbiAgICByYXdIYW5kbGVyLmluaXQodGhpcy5mcmFtZUNvbnRleHQsIHRoaXMudmFyaWFibGVQYXJzZVNlcnZpY2UpO1xyXG4gICAgY29uc3QgZXh0ZW5kZXJzID0gdGhpcy5leHRlbmRlclJlZ2lzdHJ5LmdldChjb21tYW5kTmFtZSk7XHJcblxyXG4gICAgLy8g6YGN5Y6GZXh0ZW5kZXJz77yM5L6d5qyh5a+5aGFuZGxlcui/m+ihjOaJqeWxlVxyXG4gICAgcmV0dXJuIGV4dGVuZGVycy5yZWR1Y2UoKGhhbmRsZXI6IENvbW1hbmRIYW5kbGVyLCBleHRlbmRlcjogQ29tbWFuZEhhbmRsZXJFeHRlbmRlcikgPT4ge1xyXG4gICAgICByZXR1cm4gZXh0ZW5kZXIuZXh0ZW5kKGhhbmRsZXIpO1xyXG4gICAgfSwgcmF3SGFuZGxlcik7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZEhhbmRsZXJGYWN0b3J5IH07XHJcbiJdfQ==