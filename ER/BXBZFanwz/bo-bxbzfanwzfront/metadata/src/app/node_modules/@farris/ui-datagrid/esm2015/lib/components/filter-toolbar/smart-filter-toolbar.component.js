/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ElementRef, Renderer2, Injector, ViewChild } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
export class SmartFilterToolbarComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     */
    constructor(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.padding = '';
        this.height = 40;
        this.filterData = [];
        this.clearFilters = new EventEmitter();
        this.removeFilter = new EventEmitter();
        this.filterChange = new EventEmitter();
        this.resize = new EventEmitter();
        this.sk = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dg = this.inject.get(DatagridComponent);
        this.sk = 'smartfilter_' + this.dg.dgs.createConfigKey(this.dg.id);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.filterData && !changes.filterData.isFirstChange()) {
            // console.log('filterDataChanged.');
        }
    }
    /**
     * 条件变化事件
     * @param {?} $event
     * @return {?}
     */
    onQuery($event) {
        const { data, filterItem } = $event;
        if (data && data.length) {
            /** @type {?} */
            const conditions = JSON.parse(data);
            if (conditions && conditions.length) {
                this.filterChange.emit({ conditions, filterItem });
            }
        }
    }
    /**
     * 清除所有条件
     * @param {?} $event
     * @return {?}
     */
    onResetFilter($event) {
        this.clearFilters.emit($event);
    }
    /**
     * 移除单个条件
     * @param {?} $event
     * @return {?}
     */
    onRemoveFilter($event) {
        this.removeFilter.emit($event);
    }
    /**
     * 展开折叠事件
     * @param {?} $event
     * @return {?}
     */
    onResize($event) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const smartFilterWrapper = this.el.nativeElement.querySelector('.f-filter-wrapper');
            if (smartFilterWrapper) {
                /** @type {?} */
                const h = smartFilterWrapper.offsetHeight;
                if (h) {
                    this.resize.emit(h + 6);
                }
            }
        }));
    }
}
SmartFilterToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'smart-filter-toolbar',
                template: "<div class=\"f-datagrid-filter-toolbar\" [style.height.px]=\"height\" \r\n[style.padding]=\"padding\" placeholder=\"\u6B64\u5904\u663E\u793A\u5217\u8FC7\u6EE4\u6761\u4EF6\" style=\"align-items: normal;\"\r\n[style.display]=\"filterData && filterData.length ? '' : 'none'\"\r\n[style.pointer-events]=\"dg?.editable ? 'none': ''\"\r\n>\r\n<farris-filter [filterList]=\"filterData\" (query)=\"onQuery($event)\"  #farrisFilter\r\n    (resetChange)=\"onResetFilter($event)\" (clearFilter)=\"onRemoveFilter($event)\"\r\n    (filterResize)=\"onResize($event)\" (expandFilter)=\"onResize($event)\"\r\n    [localStorageKey]=\"sk\"\r\n>\r\n</farris-filter>\r\n\r\n</div>"
            }] }
];
/** @nocollapse */
SmartFilterToolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
SmartFilterToolbarComponent.propDecorators = {
    padding: [{ type: Input }],
    height: [{ type: Input }],
    filterData: [{ type: Input }],
    clearFilters: [{ type: Output }],
    removeFilter: [{ type: Output }],
    filterChange: [{ type: Output }],
    resize: [{ type: Output }],
    filtebar: [{ type: ViewChild, args: ['farrisFilter',] }]
};
if (false) {
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.padding;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.height;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filterData;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.clearFilters;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.removeFilter;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filterChange;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.resize;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filtebar;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.sk;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtZmlsdGVyLXRvb2xiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpbHRlci10b29sYmFyL3NtYXJ0LWZpbHRlci10b29sYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBNEIsU0FBUyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQy9KLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBTTdELE1BQU0sT0FBTywyQkFBMkI7Ozs7OztJQWFwQyxZQUFvQixFQUFjLEVBQVUsTUFBaUIsRUFBVSxNQUFnQjtRQUFuRSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFaOUUsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFDWixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2YsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFbEMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHdEMsT0FBRSxHQUFHLEVBQUUsQ0FBQztJQUVtRixDQUFDOzs7O0lBRTVGLFFBQVE7UUFDSixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFvQixpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxFQUFFLEdBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDM0QscUNBQXFDO1NBQ3hDO0lBQ0wsQ0FBQzs7Ozs7O0lBR0QsT0FBTyxDQUFDLE1BQU07Y0FDSixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNO1FBQ25DLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O2tCQUNmLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNuQyxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFHO2dCQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO2FBQ3BEO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7SUFHRCxhQUFhLENBQUMsTUFBTTtRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7SUFHRCxjQUFjLENBQUMsTUFBTTtRQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7SUFHRCxRQUFRLENBQUMsTUFBTTtRQUNYLFVBQVU7OztRQUFDLEdBQUcsRUFBRTs7a0JBQ04sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDO1lBQ25GLElBQUksa0JBQWtCLEVBQUU7O3NCQUNkLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZO2dCQUN6QyxJQUFJLENBQUMsRUFBRTtvQkFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQzNCO2FBQ0o7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7OztZQTlESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsZ3FCQUFvRDthQUN2RDs7OztZQU53RCxVQUFVO1lBQUUsU0FBUztZQUFFLFFBQVE7OztzQkFRbkYsS0FBSztxQkFDTCxLQUFLO3lCQUNMLEtBQUs7MkJBQ0wsTUFBTTsyQkFDTixNQUFNOzJCQUNOLE1BQU07cUJBRU4sTUFBTTt1QkFFTixTQUFTLFNBQUMsY0FBYzs7OztJQVR6Qiw4Q0FBc0I7O0lBQ3RCLDZDQUFxQjs7SUFDckIsaURBQXlCOztJQUN6QixtREFBNEM7O0lBQzVDLG1EQUE0Qzs7SUFDNUMsbURBQTRDOztJQUU1Qyw2Q0FBc0M7O0lBRXRDLCtDQUF5Qzs7SUFDekMseUNBQVE7O0lBQ1IseUNBQXNCOzs7OztJQUNWLHlDQUFzQjs7Ozs7SUFBRSw2Q0FBeUI7Ozs7O0lBQUUsNkNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzbWFydC1maWx0ZXItdG9vbGJhcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc21hcnQtZmlsdGVyLXRvb2xiYXIuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU21hcnRGaWx0ZXJUb29sYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCkgcGFkZGluZyA9ICcnO1xyXG4gICAgQElucHV0KCkgaGVpZ2h0ID0gNDA7XHJcbiAgICBASW5wdXQoKSBmaWx0ZXJEYXRhID0gW107XHJcbiAgICBAT3V0cHV0KCkgY2xlYXJGaWx0ZXJzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHJlbW92ZUZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBmaWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQE91dHB1dCgpIHJlc2l6ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdmYXJyaXNGaWx0ZXInKSBmaWx0ZWJhcjogYW55O1xyXG4gICAgc2sgPSAnJztcclxuICAgIGRnOiBEYXRhZ3JpZENvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaW5qZWN0OiBJbmplY3RvcikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZyA9IHRoaXMuaW5qZWN0LmdldDxEYXRhZ3JpZENvbXBvbmVudD4oRGF0YWdyaWRDb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMuc2sgPSAgJ3NtYXJ0ZmlsdGVyXycgKyB0aGlzLmRnLmRncy5jcmVhdGVDb25maWdLZXkodGhpcy5kZy5pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLmZpbHRlckRhdGEgJiYgIWNoYW5nZXMuZmlsdGVyRGF0YS5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZpbHRlckRhdGFDaGFuZ2VkLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5p2h5Lu25Y+Y5YyW5LqL5Lu2ICovXHJcbiAgICBvblF1ZXJ5KCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSwgZmlsdGVySXRlbSB9ID0gJGV2ZW50O1xyXG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbnMgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9ucyAmJiBjb25kaXRpb25zLmxlbmd0aCkgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQoe2NvbmRpdGlvbnMsIGZpbHRlckl0ZW19KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5riF6Zmk5omA5pyJ5p2h5Lu2ICovXHJcbiAgICBvblJlc2V0RmlsdGVyKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJGaWx0ZXJzLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog56e76Zmk5Y2V5Liq5p2h5Lu2ICovXHJcbiAgICBvblJlbW92ZUZpbHRlcigkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUZpbHRlci5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWxleW8gOaKmOWPoOS6i+S7tiAqL1xyXG4gICAgb25SZXNpemUoJGV2ZW50KSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNtYXJ0RmlsdGVyV3JhcHBlciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZi1maWx0ZXItd3JhcHBlcicpO1xyXG4gICAgICAgICAgICBpZiAoc21hcnRGaWx0ZXJXcmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoID0gc21hcnRGaWx0ZXJXcmFwcGVyLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGlmIChoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemUuZW1pdChoICsgNik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19