/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-30 16:42:51
 * @QQ: 1055818239
 * @Version: v0.8.0
 * - 2021/04/07 增加 enableHighlightCell 属性，支持选中单元格高亮
 */
import { Component, Input, ViewEncapsulation, ContentChildren, QueryList, Output, EventEmitter, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef, Injector, HostBinding, NgZone, ElementRef, ViewChild, ApplicationRef, TemplateRef, HostListener } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
import { of, BehaviorSubject } from 'rxjs';
import { ColumnFilterType } from './types/data-column';
import { DatagridFacadeService } from './services/datagrid-facade.service';
import { DatagridColumnDirective } from './components/columns/datagrid-column.directive';
import { DATAGRID_REST_SERVICEE } from './services/rest.service';
import { DatagridService } from './services/datagrid.service';
import { GRID_EDITORS, CELL_SELECTED_CLS, GRID_VALIDATORS, SIZE_TYPE, GRID_SETTINGS_SERVICE, GRID_SETTINGS_HTTP, CELL_EDITING_CLS, TR_PREFIX } from './types/constant';
import { DomHandler } from './services/domhandler';
import { Utils } from './utils/utils';
import { CommonUtils, FarrisComponentInstanceService } from '@farris/ui-common';
import { ColumnFormatService } from '@farris/ui-common/column';
import { flatten } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { DatagridColumnsHelper } from './services/datagrid-columns.helper';
import { DatagridFilterService } from './services/datagrid-filter.service';
import { debounceTime } from 'rxjs/operators';
import { SmartFilterToolbarComponent } from './components/filter-toolbar/smart-filter-toolbar.component';
import { DatagridSmartFilterService } from './services/datagrid-smart-filter.service';
import { IdService } from '@farris/ui-common';
import { SelectionModeService } from './services/selection-mode.service';
export class DatagridComponent {
    /**
     * @param {?} cd
     * @param {?} el
     * @param {?} inject
     * @param {?} zone
     * @param {?} dfs
     * @param {?} dgs
     * @param {?} app
     * @param {?} domSanitizer
     * @param {?} render2
     */
    constructor(cd, el, inject, zone, dfs, dgs, app, domSanitizer, render2) {
        this.cd = cd;
        this.el = el;
        this.inject = inject;
        this.zone = zone;
        this.dfs = dfs;
        this.dgs = dgs;
        this.app = app;
        this.domSanitizer = domSanitizer;
        this.render2 = render2;
        this.auther = `Lucas Huang - QQ:1055818239`;
        this.version = '0.8.x';
        this.__component_type__ = 'DatagridComponent';
        this.pos = 'relative';
        this.hostCls = false;
        /**
         * 使用主题
         */
        this.useThemes = true;
        // 用于存储用户个性化设置
        this.id = '';
        /**
         * 自动高度 - 启用此属性后，就是一个普普通通的 table , 不能编辑，不能排序，不能分页，不能... 就是一凡胎
         */
        this.useHtmlTable = false;
        /**
         * 自动高度
         */
        this.autoHeight = false;
        /**
         * 显示边框
         */
        this.showBorder = false;
        /**
         * 启用斑马线
         */
        this.striped = true;
        /**
         * 宽度
         */
        this.width = 800;
        /**
         * 高度
         */
        this.height = 300;
        /**
         * 显示表头
         */
        this.showHeader = true;
        /**
         * 表头-单行高度
         */
        this.headerHeight = 35;
        /**
         * 表头折行
         */
        this.headerWrap = false;
        /**
         * 显示页脚
         */
        this.showFooter = false;
        /**
         * 页脚默认行高
         */
        this.footerHeight = 29;
        /**
         * 页脚数据来源
         */
        this.footerDataFrom = 'client';
        /**
         * 合计行显示位置，默认为底部
         */
        this.footerPosition = 'bottom';
        /**
         * 行高
         */
        this.rowHeight = 29;
        /**
         * 设置grid 行高尺寸
         * sm: 小，md: 正常， lg: 大，xl: 超大
         */
        this._sizeType = 'sm';
        /**
         * 填充容器
         */
        this._fit = false;
        /**
         * 如果为真，则自动展开/收缩列的大小以适合网格宽度并防止水平滚动。
         */
        this._fitColumns = false;
        /**
         * 根据grid的宽度自动调整列宽度
         */
        this._autoFitColumns = false;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 滚动条显示模式，默认为 auto
         */
        this.scrollBarShowMode = 'auto';
        this.scrollBarOptions = {
            width: 18,
            height: 18
        };
        /**
         * 可拖动列设置列宽
         */
        this.resizeColumn = true;
        /**
         * 显示行号
         */
        this.showLineNumber = false;
        /**
         * 行号表头字符
         */
        this.lineNumberTitle = '序号';
        /**
         * 行号宽度
         */
        this.lineNumberWidth = 36;
        /**
         * 鼠标滑过效果开关，默认开启
         */
        this.rowHover = true;
        /**
         * 允许编辑时，单击进入编辑状态; false为双击进入编辑
         */
        this.clickToEdit = true;
        this._lockPagination = false;
        /**
         * 分页信息
         */
        this.__pagination = true;
        /**
         * 分页条显示模式， default, simple
         */
        this.pagerViewMode = 'default';
        /**
         * 启用服务器端分页
         */
        this.pagerOnServer = true;
        /**
         * 每页记录数
         */
        this.pageList = [10, 20, 30, 50, 100];
        /**
         * 当前页码
         */
        this.pageIndex = 1;
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 分页区高度
         */
        this.pagerHeight = 56;
        /**
         * 显示每页记录数
         */
        this.showPageList = false;
        /**
         * 显示分页信息
         */
        this.showPageInfo = true;
        /**
         * 显示页码
         */
        this.showPageNumber = true;
        /**
         * 显示页码最大数量
         */
        this.pagerLabelSize = 7;
        /**
         * 显示转至指定页码输入框
         */
        this.showGotoInput = false;
        /**
         * 启用跨页多选
         */
        this.enableMorePageSelect = false;
        /**
         * 显示选中列表
         */
        this.showSelectedList = false;
        /**
         * 单元格信息提示延时，默认 1000ms
         */
        this.cellTipTimer = 1000;
        /**
         * grid 内部处理分页状态
         */
        this.controlPaginationState = true;
        /**
         * 总记录数
         */
        this._total = 0;
        /**
         * 启用选中行
         */
        this.enableSelectRow = true;
        /**
         * 启用多选
         */
        this.multiSelect = false;
        /**
         * 启用多选时，是否显示checkbox
         */
        this.showCheckbox = false;
        /**
         * 显示全选checkbox
         */
        this.showAllCheckbox = false;
        /**
         * 当启用多选时，点击行选中，只允许且只有一行被选中。, 默认为 true
         */
        this.onlySelectSelf = true;
        /**
         * 启用多选且显示checkbox, 选中行同时钩选, 默认为 false
         */
        this.checkOnSelect = false;
        /**
         * 启用多选且显示checkbox, 钩选后选中行, 默认为 false
         */
        this.selectOnCheck = false;
        /**
         * 行选中模式，custom: 自定义， default: 默认 仿Windows资源管理器选中
         * 注意： 此属性仅多选，显示复选框有效
         * addTime: 2021-12-14 by LUCAS HUANG
         */
        this.selectionMode = 'custom';
        /**
         * 单击行选中后，在次点击不会被取消选中状态;
         */
        this.keepSelect = true;
        /**
         * 数据为空时的高度
         */
        this.emptyDataHeight = 240;
        /**
         * 空数据时，显示的提示文本
         */
        this.emptyMessage = '暂无数据';
        /**
         * 无数据时的模板
         */
        this.emptyTemplate = null;
        /**
         * 主键字段
         */
        this.idField = 'id';
        /**
         * 页脚数据
         */
        this._footerData = of([]);
        /**
         * 验证不通过时可以结束编辑
         */
        this.endEditByInvalid = true;
        /**
         * 列集合
         */
        this._columns = [];
        this._fields = [];
        /**
         * 数据折行，默认值：true,即在一行显示，不折行。
         */
        this.nowrap = true;
        /**
         * 虚拟加载
         */
        this.virtualized = false;
        /**
         * 是否启用异步加载数据
         */
        this.virtualizedAsyncLoad = false;
        /**
         * 编辑方式： row(整行编辑)、cell(单元格编辑)；默认为 row
         */
        this.editMode = 'row';
        /**
         * 编辑状态
         */
        this._editable = false;
        /**
         * 启用可编辑单元格样式。
         */
        this.enableEditCellStyle = false;
        /**
         * 进入编辑状态时选是否选中文本；默认为 false
         * 仅文本框支持此特性
         */
        this.selectOnEditing = false;
        /**
         * 编辑器高度
         */
        this.editorHeight = 30;
        /**
         * 启用远端排序
         */
        this.remoteSort = false;
        this.hoverRowCls = 'f-datagrid-row-hover';
        /**
         * 允许拖拽列顺序
         */
        this.enableDragColumn = false;
        /**
         * 行分组面板高度，默认 50PX
         */
        this.rowGroupPanelHeight = 50;
        /**
         * 启用分组行
         */
        this.groupRows = false;
        /**
         * 启用行分组合计行
         */
        this.groupFooter = false;
        /**
         * 合计数据显示位置
         * inGroupRow: 与分组在同一行，分别相关合计字段对齐
         * groupFooterRow: 在分组数据最后增加一行
         * 默认为 groupFooterRow
         */
        this.groupSummaryPosition = 'groupFooterRow';
        /**
         * 分组信息合并列数
         * 默认为 1
         */
        this.groupCellColSpan = 1;
        /**
         * 分组字段名称, 多字段分组以英文逗号分隔
         */
        this._groupField = '';
        this.groupFields$ = new BehaviorSubject([]);
        /**
         * 显示分组列
         */
        this.showGroupColumn = true;
        /**
         * 显示分组列面板。默认为 false
         */
        this._showRowGroupPanel = false;
        /**
         * 双击表头适应内容宽度
         */
        this.AutoColumnWidthUseDblclick = true;
        /**
         * 使用内部过滤器; 默认为 false
         */
        this.useDefaultFilter = false;
        /**
         * 过滤图标与排序图标合并，此属性与 enableFilterRow 互斥
         */
        this.enableSmartFilter = false;
        /**
         * 显示过滤行
         */
        this.enableFilterRow = false;
        /**
         * 服务器端过滤
         */
        this.remoteFilter = false;
        /**
         * 启用过滤条件显示条
         */
        this.showFilterBar = false;
        /**
         * 过滤条件汇总条高度，默认 32px
         */
        this.filterBarHeight = 32;
        this.filterRowHeight = 40;
        this.conditions = {};
        this.selectValue = null;
        this.checkValues = [];
        this.selectValues = [];
        /**
         * 合并单元格；先支持纵向合并
         */
        this.mergeCell = false;
        this.mergeFields = [];
        /**
         * 合并单元格数据启用客户端排序
         */
        this.enableClientSortForMergeCell = false;
        /**
         * 使用高级控制面板
         */
        this.useControlPanel = false;
        /**
         * 启用简洁控制面板模式。默认为 false
         */
        this.enableSimpleMode = false;
        /**
         * 点击列设置图标，默认打开的控制面板
         */
        this.controlPanelMode = 'advanced';
        /**
         * 阻止click 事件冒泡
         */
        this.stopPropagation = true;
        /**
         * (202105 弃用)
         * 点击单元格进行编辑状态时，关闭其他Grid的编辑器。默认 false，
         * 多个列表存时，仅有一个列表中有编辑状态，其他列表结束编辑
         */
        this.closeOtherGridEditor = false;
        /**
         * 当数据源为空时，清空已选记录
         */
        this.clearSelectionsWhenDataIsEmpty = true;
        /**
         * 启用右键菜单，默认为 false
         */
        this.enableContextMenu = false;
        /**
         * 右键菜单数据
         */
        this.contextMenus = null;
        this.selectValueChange = new EventEmitter();
        this.checkValuesChange = new EventEmitter();
        this.selectValuesChange = new EventEmitter();
        this.beginEdit = new EventEmitter();
        this.endEdit = new EventEmitter();
        this.cancelEdited = new EventEmitter();
        this.scrollY = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.pageChanged = new EventEmitter();
        this.loadSuccess = new EventEmitter();
        this.filterChanged = new EventEmitter();
        /**
         * 启用选中单元格高亮显示
         */
        this.enableHighlightCell = false;
        /**
         * 选中的数据始终从数据源中获取. 默认为 false
         */
        this.checkedRowsDataFromSource = false;
        /**
         * 当前单元格为只读时，使用tab 键跳到下个单元格时，是否允许进入编辑状态，默认为 false;
         * 默认情况下，当前单元格只读，按TAB跳到下个CELL 时，选中CELL ，回车进入编辑。
         * 开启后，下个单元格自动进入编辑状态。
         */
        this.editcellWhenTabKeydwon = false;
        /**
         * 单元格点击前事件
         */
        this.beforeClickCell = new EventEmitter();
        this.dblclickRow = new EventEmitter();
        this.selectChanged = new EventEmitter();
        this.unSelect = new EventEmitter();
        this.selectAll = new EventEmitter();
        this.unSelectAll = new EventEmitter();
        /**
         * 异步请求虚拟加载
         */
        this.scrollYLoad = new EventEmitter();
        this.checked = new EventEmitter();
        this.unChecked = new EventEmitter();
        this.checkAll = new EventEmitter();
        this.unCheckAll = new EventEmitter();
        this.checkedChange = new EventEmitter();
        this.columnSorted = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowAppended = new EventEmitter();
        this.rowDeleted = new EventEmitter();
        this.rowUpdated = new EventEmitter();
        this.dataChange = new EventEmitter();
        /**
         * 最后一行的最后单元格回车处理事件
         */
        this.lastCellEnterHandle = new EventEmitter();
        /**
         * 分组字段变化后
         */
        this.groupFieldChange = new EventEmitter();
        /**
         * 拖动列改变列显示位置后触发
         */
        this.columnMoved = new EventEmitter();
        /**
         * 单元格点击事件
         */
        this.cellClick = new EventEmitter();
        this._loading = false;
        this._selectedRow = null;
        this.ds = {
            index: 0,
            rows: [],
            top: 0,
            bottom: 0,
            scrolling: false // 是否由滚动条触发
        };
        this.pagerOpts = {};
        this.editors = {};
        this.validators = [];
        this.footerWidth = 0;
        this.clickDelay = 150;
        this.resizeColumnInfo = {
            proxyLineEdge: 0,
            startWidth: 0,
            startX: 0,
            left: 0
        };
        this.ro = null;
        this.subscriptions = [];
        this.realHeaderHeight = 0;
        // 弹窗中使用时，窗口点击事件处理
        this.modalClickEvent = null;
        this.pending = false;
        this.scrollInstance = null;
        // 合并单元辅助信息
        this.mergeCellInfo = {};
        this.ignoreTarget = ['INPUT', 'SELECT', 'TEXTAREA'];
        this.clientFilterService = null;
        // DatagridSettingsService;
        /* 控制列字段名称: _datagrid-setting-control_ */
        this.ControlPanelFeild = '_datagrid-setting-control_';
        this._isResized = false;
        this.gridSize = { width: this.width + 'px', height: this.height + 'px' };
        // 客户端过滤时，是否过滤行发生变化
        this.clientFilterChanged = false;
        // style's ID
        this.styleSheetId = '';
        this.groupRowPanelPlaceholder = '';
        this.commonUtils = null;
        this.smartFilterService = null;
        this.smartFilterResult = { controlData: [], conditions: [] };
        this.smartFilterBarHeight = 32;
        this._active_datagrid_cls = 'datagrid-active';
        this._blured_datagrid_cls = 'datagrid-blurred';
        // 自定义grid样式，列表初始后，会添加一个自定义名称的样式
        this._custom_datagrid_cls = 'datagrid';
        // 焦点行索引，每次行点击后更新
        this.focusRowIndex = -1;
        this.documentBodyMouseDown = null;
        this.farrisInstances = null;
        this.currentPagerData = [];
        this.trackByRows = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        (index, row) => {
            if (row) {
                return row[this.idField] || index;
            }
            return index;
        });
        this.onDocumentMouseDown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.pending) {
                return false;
            }
            if (!event.target.closest('.f-datagrid')) {
                this.activeDataGrid(false);
            }
            // if (this.editMode === 'row') {
            //     this.endEditing();
            // }
            if (this.currentCell) {
                if (Utils.hasDialogOpen()) {
                    /** @type {?} */
                    const indlg = this.inDialog();
                    /** @type {?} */
                    const currentTargetInDialog = event.target.closest('.modal-body');
                    if (indlg && currentTargetInDialog) {
                        if (indlg != currentTargetInDialog) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                if (this.currentCell.isEditing) {
                    // this.dfs.endEditCell();
                    this.currentCell.cellElement.closeEdit().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            if (this.currentCell && this.currentCell.cellElement) {
                                DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
                                DomHandler.removeClass(this.currentCell.cellElement, CELL_EDITING_CLS);
                            }
                            this.dfs.cancelSelectCell();
                            this.unbindDocumentEditListener();
                            this.currentCell = null;
                        }
                    }));
                }
            }
        });
        this.styleSheetId = 'DATAGRID-' + Utils.uuid();
        this.localeService = this.inject.get(LocaleService);
        this.restService = this.inject.get(DATAGRID_REST_SERVICEE, null);
        this.colFormatSer = this.inject.get(ColumnFormatService);
        this.commonUtils = this.inject.get(CommonUtils, null);
        this.clientFilterService = new DatagridFilterService(dfs, this.localeService, inject);
        this.farrisInstances = this.inject.get(FarrisComponentInstanceService, null);
        this.smartFilterService = this.inject.get(DatagridSmartFilterService, null);
        this.idService = this.inject.get(IdService, null);
        this.dfs.localId = this.localeService.localeId;
        this.settingService = this.inject.get(GRID_SETTINGS_SERVICE, null);
        if (this.settingService) {
            /** @type {?} */
            const settingsHttp = this.inject.get(GRID_SETTINGS_HTTP, null);
            this.settingService.httpRestService = settingsHttp;
        }
        /** @type {?} */
        const dataSubscription = this.dfs.data$.subscribe((/**
         * @param {?} dataSource
         * @return {?}
         */
        (dataSource) => {
            this.cleanDom();
            /** @type {?} */
            const ds = Object.assign({}, dataSource);
            if (this.conditions && Object.keys(this.conditions).length && !this.remoteFilter && this.useDefaultFilter) {
                ds.rows = this.clientFilterService.executeFilter(ds.rows, this.conditions);
            }
            this.ds = ds;
            if (this.ds.rows && this.ds.rows.length) {
                this.data = this.dfs.getData();
                if (this.mergeCell && this.mergeFields && this.mergeFields.length) {
                    this.mergeCellInfo = this.dgs.getMergeCellInfo3(this.ds.rows, [...this.mergeFields]);
                }
                this.setPagerTotal();
                this.loadSuccess.emit(this.ds.rows);
            }
            else {
                this.data = [];
                if (this.clearSelectionsWhenDataIsEmpty) {
                    this.clearAll();
                }
            }
            if (!this.ds.scrolling) {
                this.updateFooterData();
            }
            // 性能优化
            this.cd.detectChanges();
        }));
        this.subscriptions.push(dataSubscription);
        /** @type {?} */
        const columnGroupSubscription = this.dfs.columnGroup$.pipe(debounceTime(60)).subscribe((/**
         * @param {?} cg
         * @return {?}
         */
        cg => {
            if (cg) {
                this.colGroup = cg;
                this.footerWidth = cg.totalWidth;
                this.cd.detectChanges();
            }
        }));
        this.subscriptions.push(columnGroupSubscription);
        this.subscriptions.push(this.dfs.gridSize$.subscribe((/**
         * @param {?} cg
         * @return {?}
         */
        (cg) => {
            if (cg && cg.columnsGroup) {
                this.colGroup = cg.columnsGroup;
                this.cd.detectChanges();
            }
        })));
        this.initEditorAndValidator();
        /** @type {?} */
        const currentCellSubscription = this.dfs.currentCell$.subscribe((/**
         * @param {?} cell
         * @return {?}
         */
        (cell) => {
            this.currentCell = cell;
            if (cell && cell.cellRef) {
                cell.cellRef.isEditing = cell.isEditing;
            }
            this.unbindMoveSelectRowEvent();
            this.bindDocumentEditListener();
        }));
        this.dfs.selectRow$.subscribe((/**
         * @param {?} sr
         * @return {?}
         */
        (sr) => {
            if (!this.currentCell) {
                this.bindDocumentMoveSelectRowEvent();
            }
            this.selectedRow = sr;
            // this.cd.detectChanges();
            // this.selectChanged.emit(sr);
        }));
        this.subscriptions.push(currentCellSubscription);
        DatagridColumnsHelper.gridInstance = this;
        /** @type {?} */
        const filterChangedSubscription = this.dgs.onFilterChanged.subscribe((/**
         * @param {?} conditions
         * @return {?}
         */
        (conditions) => {
            // 更新缓存过滤条件
            this.conditions = conditions;
            this.clientFilterChanged = true;
            this.filterData(conditions);
        }));
        this.subscriptions.push(filterChangedSubscription);
        // this.initPaginationOptions();
        /** @type {?} */
        const footerDataSubscription = this.dgs.refreshFooterData.subscribe((/**
         * @return {?}
         */
        () => {
            this.updateFooterData();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(footerDataSubscription);
        this.dgs.commonUtils = this.commonUtils;
        this.sms = new SelectionModeService(this);
        this.dgs.focusRowChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e) {
                this.focusRowIndex = e.rowIndex;
            }
        }));
    }
    /**
     * @return {?}
     */
    get autoHeightCls() {
        return this.autoHeight;
    }
    /**
     * @return {?}
     */
    get sizeType() {
        return this._sizeType;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set sizeType(val) {
        this._sizeType = val;
    }
    /**
     * @return {?}
     */
    get fit() {
        return this._fit;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fit(val) {
        this._fit = val;
        this.hostCls = val;
    }
    /**
     * @return {?}
     */
    get fitColumns() {
        return this._fitColumns;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fitColumns(val) {
        this._fitColumns = val;
        this.setFitColumns(val);
    }
    /**
     * @return {?}
     */
    get autoFitColumns() {
        return this._autoFitColumns;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set autoFitColumns(val) {
        this._autoFitColumns = val;
        this.dfs.updateProperty('autoFitColumns', val);
    }
    /**
     * 锁定分页条，锁定后页码点击无效
     * @return {?}
     */
    get lockPagination() {
        return this._lockPagination;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set lockPagination(val) {
        this._lockPagination = val;
        if (this.dgPager) {
            this.dgPager[val ? 'lock' : 'unlock']();
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set pagination(val) {
        if (this.__pagination !== val) {
            this.__pagination = val;
            this.dfs.updateProperty('pagination', val);
            this.dgs.showGridHeader.emit();
        }
    }
    /**
     * @return {?}
     */
    get pagination() {
        return this.__pagination;
    }
    /**
     * @return {?}
     */
    get total() {
        return this._total;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set total(val) {
        this._total = val;
        this.pagerOpts.totalItems = val;
        if (!this.pagination) {
            this.pagerOpts.itemsPerPage = val;
        }
        this.dfs.setTotal(val);
    }
    /**
     * @return {?}
     */
    get footerData() {
        return this._footerData;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    set footerData(rows) {
        if (rows) {
            if (Array.isArray(rows)) {
                this._footerData = of(rows);
            }
            else {
                this._footerData = rows;
            }
        }
        if (rows) {
            this.setFooterHeight();
        }
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set columns(values) {
        this._columns = this.correctColumns(values);
        this.dfs.updateProperty('columns', this._columns);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @param {?} cols
     * @return {?}
     */
    set fields(cols) {
        this._fields = cols;
        this.columns = cols;
        if (this.data) {
            this.columnsChanged(false, true);
        }
    }
    /**
     * @return {?}
     */
    get editable() {
        return this._editable;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set editable(v) {
        if (this._editable !== v) {
            this._editable = v;
            this.cd.detectChanges();
            this.dgs.updateEmptyStyle();
        }
    }
    /**
     * @return {?}
     */
    get groupField() {
        return this._groupField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set groupField(val) {
        this._groupField = val || '';
        if (this.groupField) {
            this.groupFields$.next(this.groupField.split(','));
        }
        else {
            this.groupFields$.next([]);
        }
        this.dfs.updateProperty('groupField', this._groupField);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set showRowGroupPanel(val) {
        this._showRowGroupPanel = val;
    }
    /**
     * @return {?}
     */
    get showRowGroupPanel() {
        return this.groupRows && this._showRowGroupPanel;
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set loading(val) {
        this._loading = val;
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    get selections() {
        return this.dfs.getSelections();
    }
    /**
     * @return {?}
     */
    get checkeds() {
        return this.checkedRows;
    }
    /**
     * @return {?}
     */
    get checkedRows() {
        /** @type {?} */
        const chkeds = this.dfs.getCheckeds();
        if (this.enableMorePageSelect) {
            if (chkeds && chkeds.length) {
                if (!this.checkedRowsDataFromSource) {
                    return [...chkeds];
                }
                // 从数据源中获取最新数据
                return chkeds.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const d = this.dfs.findRow(n.id);
                    if (d) {
                        n.data = d.data;
                    }
                    return n;
                }));
            }
        }
        else {
            if (this.data && this.data.length) {
                /** @type {?} */
                const temp = this.data.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField]));
                if (!this.checkedRowsDataFromSource) {
                    return chkeds.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => temp.includes(n.id)));
                }
                // 从数据源中获取最新数据
                return chkeds.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => temp.includes(n.id))).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const d = this.dfs.findRow(n.id);
                    if (d) {
                        n.data = d.data;
                    }
                    return n;
                }));
            }
        }
        return [];
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    set checkedRows(rows) {
        if (rows && rows.length) {
            rows = rows.map((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                if (r.data) {
                    return r;
                }
                return {
                    id: r[this.idField],
                    data: r
                };
            }));
        }
        this.dfs.updateProperty('checkedRows', rows || []);
        this.initSelectOrChecked();
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    get selectedRow() {
        return this._selectedRow;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    set selectedRow(row) {
        if (row) {
            if (this.selectValue != row.id) {
                this._selectedRow = row;
                this.selectValue = row.id;
                this.selectValueChange.emit(row.id);
                this.selectChanged.emit(row);
            }
        }
        else {
            this.unSelect.emit(this._selectedRow);
            this.selectValue = null;
            this.selectValueChange.emit('');
            this._selectedRow = null;
        }
        // this.cd.detectChanges();
    }
    /**
     * @param {?} $data
     * @return {?}
     */
    setCurrentPagerData($data) {
        this.currentPagerData = $data;
    }
    /**
     * @private
     * @return {?}
     */
    updateFooterData() {
        if (this.showFooter && this.footerDataFrom === 'client') {
            this.footerData = of(this.dfs.getFooterData(this.data));
        }
    }
    //#region Ng Event
    /**
     * @return {?}
     */
    ngDoCheck() {
        // if (!this.checkValues) {
        //     this.checkValues = [];
        // }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkFilterStyle();
        if (this.useThemes) {
            this._checkSize();
        }
        this.checkOptions();
        this.groupRowPanelPlaceholder = this.localeService.getValue('datagrid.groupRow.tips');
        // this._flatColumns();
        // this.setHeaderHeight();
        if (this.smartFilterService) {
            if (this.enableSmartFilter && this.showFilterBar) {
                if (this.smartFilterResult && this.smartFilterResult.controlData && this.smartFilterResult.controlData.length) {
                    this.filterBarHeight = this.smartFilterBarHeight;
                }
                else {
                    this.filterBarHeight = 0;
                }
            }
            this.smartFilterService.filterChanged.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                // 更新缓存过滤条件
                // console.log(this.smartFilterToolbar);
                if (!this.smartFilterResult && !e) {
                    return;
                }
                if (JSON.stringify(this.smartFilterResult) !== JSON.stringify(e)) {
                    this.smartFilterResult = e;
                    this.clientFilterChanged = true;
                    this.filterData(e.conditions);
                    if (!this.smartFilterResult || (this.smartFilterResult.controlData && !this.smartFilterResult.controlData.length)) {
                        this.onFilterBarResize(0);
                    }
                    else {
                        if (!this.filterBarHeight) {
                            this.onFilterBarResize(this.smartFilterBarHeight);
                        }
                    }
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 创建自定义style 容器
        this.render2.addClass(this.dgContainer.nativeElement, this._custom_datagrid_cls);
        this.setHeaderHeight();
        this.setPagerHeight();
        this.initBeforeEvents();
        if (this.fit) {
            this.setGridNewSizeWhenFit();
        }
        this.initState();
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
        if (!this.data || !this.data.length) {
            this.fetchData(1, this.pageSize).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                if (!res) {
                    return;
                }
                this.total = res.total;
                if (res.footer) {
                    this.footerData = res.footer;
                }
                this.loadData(res.items);
            }));
        }
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const target = (/** @type {?} */ (e[0].target));
                if (target.style.display === 'none') {
                    return;
                }
                /** @type {?} */
                const _w = e[0].contentRect.width;
                if (!_w) {
                    return;
                }
                /** @type {?} */
                const _h = e[0].contentRect.height;
                /** @type {?} */
                const _floowW = Math.floor(_w);
                /** @type {?} */
                const _roundW = Math.floor(_w);
                /** @type {?} */
                const _floorH = Math.floor(_h);
                /** @type {?} */
                const _roundH = Math.round(_h);
                if ((this.width === _floowW || this.width === _roundW) && (this.height === _floorH || this.height === _roundH)) {
                    this.dgs.restoreScrollbarPosition();
                    return;
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.calculateGridSize(this.fit);
                }), 100);
            }));
            this.ro.observe(this.el.nativeElement.parentElement);
            document.body.removeEventListener('mousedown', this.documentBodyMouseDown);
            document.body.addEventListener('mousedown', this.documentBodyMouseDown = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const target = (/** @type {?} */ (e.target));
                if (target.closest('td.f-datagrid-cell') ||
                    target.closest('.date-overlay-container') ||
                    target.closest('.time-picker-overlay') ||
                    target.closest('.language-textbox-panel') ||
                    target.closest('.comboPanel')) {
                    return;
                }
                this.onDocumentMouseDown(e);
            }), true);
        }));
        if (this.showFooter) {
            if (this.footerTemplate) {
                /** @type {?} */
                const footerDom = this.el.nativeElement.querySelector('.f-datagrid-footer');
                if (footerDom) {
                    this.footerHeight = this.el.nativeElement.querySelector('.f-datagrid-footer').offsetHeight;
                }
            }
        }
        if (this.fit) {
            if (this.el.nativeElement.parentElement) {
                this.el.nativeElement.parentElement.style.position = 'relative';
            }
            this.calculateGridSize(this.fit);
        }
        // 检查是否启用仿windows资源管理器中的多选模式
        if (this.selectionMode && this.selectionMode === 'default' && this.multiSelect) {
            this.sms.enableWindowsSelectionMode();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.dgColumns && this.dgColumns.length) {
            this.columns = this.dgColumns.map((/**
             * @param {?} dgc
             * @return {?}
             */
            dgc => {
                return Object.assign({}, dgc);
            }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.data && !changes.data.isFirstChange()) {
            this.dfs.loadData(changes.data.currentValue);
            this.dgs.dataSourceChanged();
        }
        if (changes.showCheckbox !== undefined && !changes.showCheckbox.isFirstChange()) {
            this.dfs.showCheckbox(changes.showCheckbox.currentValue);
        }
        if (changes.showLineNumber !== undefined && !changes.showLineNumber.isFirstChange()) {
            this.dfs.showLineNumber(changes.showLineNumber.currentValue);
        }
        if (changes.multiSelect !== undefined && !changes.multiSelect.isFirstChange()) {
            this.dfs.setMultiSelect(changes.multiSelect.currentValue);
        }
        if (changes.checkOnSelect !== undefined && !changes.checkOnSelect.isFirstChange()) {
            this.dfs.setCheckOnSelect(changes.checkOnSelect.currentValue);
        }
        if (changes.selectOnCheck !== undefined && !changes.selectOnCheck.isFirstChange()) {
            this.dfs.setSelectOnCheck(changes.selectOnCheck.currentValue);
        }
        if (changes.onlySelectSelf !== undefined && !changes.onlySelectSelf.isFirstChange()) {
            this.dfs.updateProperty('onlySelectSelf', changes.onlySelectSelf.currentValue);
        }
        if (changes.keepSelect !== undefined && !changes.keepSelect.isFirstChange()) {
            this.dfs.updateProperty('keepSelect', changes.keepSelect.currentValue);
        }
        if (changes.headerWrap !== undefined && !changes.headerWrap.isFirstChange()) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setHeaderHeight();
                this.cd.detectChanges();
                this.dfs.columnResizeEnd();
            }));
        }
        if (changes.nowrap !== undefined && !changes.nowrap.isFirstChange()) {
            this.checkNowrap();
            this.setRowHeight(false);
            this.dgs.cellContentWrapChanged.emit();
            this.dfs.updateProperty('nowrap', changes.nowrap.currentValue);
        }
        if (changes.multiSort !== undefined && !changes.multiSort.isFirstChange()) {
            this.dfs.updateProperty('multiSort', changes.multiSort.currentValue);
        }
        if (changes.editable !== undefined && !changes.editable.isFirstChange()) {
            this.dfs.updateProperty('editable', changes.editable.currentValue);
            if (!changes.editable.currentValue) {
                this.endCellEdit();
            }
            this.isSingleClick = null;
            // if (this.editable) {
            //     this.keepSelect = false;
            // } else {
            //     this.keepSelect = this.dfs._state.keepSelect;
            // }
            this.cd.detectChanges();
        }
        if (changes.showHeader !== undefined && !changes.showHeader.isFirstChange()) {
            this.dfs.updateProperty('showHeader', changes.showHeader.currentValue);
            this.headerHeightChange();
            this.cd.detectChanges();
        }
        if (changes.showFilterBar !== undefined && !changes.showFilterBar.isFirstChange()) {
            this.dfs.updateProperty('showFilterBar', changes.showFilterBar.currentValue);
            this.dgs.showGridHeader.emit(this.realHeaderHeight);
            // this.dgs.smartFilterBarExpand.emit();
            /** @type {?} */
            let fh = 0;
            if (this.conditions && this.conditions.length) {
                fh = 32;
            }
            this.onFilterBarResize(fh);
        }
        if (changes.showFooter !== undefined && !changes.showFooter.isFirstChange()) {
            this.dfs.updateProperty('showFooter', changes.showFooter.currentValue);
            // this.cd.detectChanges();
            this.calculateGridSize(this.fit);
        }
        if (changes.pagerOnServer !== undefined && !changes.pagerOnServer.isFirstChange()) {
            this.dfs.updateProperty('pagerOnServer', changes.pagerOnServer.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                remote: this.pagerOnServer
            });
        }
        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {
            this.dfs.updateProperty('pageIndex', changes.pageIndex.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                currentPage: this.pageIndex
            });
        }
        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {
            this.dfs.updateProperty('pageSize', changes.pageSize.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                itemsPerPage: this.pageSize
            });
        }
        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {
            this.dfs.updateProperty('pageList', changes.pageList.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                pageList: this.pageList
            });
        }
        if (changes.columns !== undefined && !changes.columns.isFirstChange()) {
            this.columnsChanged();
        }
        if (changes.sizeType !== undefined && !changes.sizeType.isFirstChange()) {
            this._sizeType = changes.sizeType.currentValue;
            this.setRowHeight(true);
            this.dfs.updateProperty('rowHeight', this.rowHeight);
            this.setFooterHeight();
            this.refresh();
            this.dgs.onRowHeightChange(this.rowHeight);
        }
        if (changes.rowHeight && !changes.rowHeight.isFirstChange()) {
            this.setRowHeight(false);
        }
        if (changes.selectValue && !changes.selectValue.isFirstChange()) {
            this.selectRow(this.selectValue, false);
        }
        if (changes.checkValues && !changes.checkValues.isFirstChange()) {
            /** @type {?} */
            const checkIds = this.dfs.differenceBy(changes.checkValues.currentValue || [], changes.checkValues.previousValue || [], (/**
             * @param {?} v
             * @return {?}
             */
            (v) => v));
            if (checkIds && checkIds.length) {
                this.checkRows(checkIds, false);
            }
            /** @type {?} */
            const uncheckIds = this.dfs.differenceBy(changes.checkValues.previousValue || [], changes.checkValues.currentValue || [], (/**
             * @param {?} v
             * @return {?}
             */
            (v) => v));
            if (uncheckIds && uncheckIds.length) {
                this.unCheckRows(uncheckIds, false);
            }
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.checkValues = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.id));
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
                this.updateAllCheckboxStatus();
            }), 10);
        }
        if (changes.showGroupColumn && !changes.showGroupColumn.isFirstChange()) {
            this.toggleVisibleColumn(this.groupField.split(','), changes.showGroupColumn.currentValue);
            this.columnsChanged();
        }
        if (changes.autoFitColumns && !changes.autoFitColumns.isFirstChange()) {
            this.dfs.updateProperty('autoFitColumns', changes.autoFitColumns.currentValue);
        }
        if (changes.groupRows && !changes.groupRows.isFirstChange()) {
            this.dfs.updateProperty('groupRows', changes.groupRows.currentValue);
            this.refresh();
        }
        if (changes.mergeCell && !changes.mergeCell.isFirstChange()) {
            this.refresh();
        }
        if (changes.mergeFields && !changes.mergeFields.isFirstChange()) {
            this.refresh();
        }
        if (changes.enableFilterRow && !changes.enableFilterRow.isFirstChange()) {
            this.dfs.updateProperty('enableFilterRow', changes.enableFilterRow.currentValue);
            if (this.showHeader) {
                this.setHeaderHeight();
                this.filterBarHeight = 32;
                this.dgs.toggleFilterRow.emit(this.enableFilterRow);
                this.dgs.showGridHeader.emit(this.realHeaderHeight);
                this.cd.detectChanges();
            }
        }
        if (changes.enableSmartFilter && !changes.enableSmartFilter.isFirstChange()) {
            this.dfs.updateProperty('enableSmartFilter', changes.enableSmartFilter.currentValue);
        }
        if (changes.enableDragColumn && !changes.enableDragColumn.isFirstChange()) {
            this.checkDragColumns();
        }
        if (changes.showRowGroupPanel && !changes.showRowGroupPanel.isFirstChange()) {
            this.dgs.smartFilterBarExpand.emit();
            this.dgs.showGridHeader.emit(this.realHeaderHeight);
        }
        if (changes.selectionMode && !changes.selectionMode.isFirstChange()) {
            this.sms.toggleMode();
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkFilterStyle() {
        // 过滤行与智能过滤 同时启用时，将过滤行禁用
        if (this.enableFilterRow && this.enableSmartFilter) {
            this.enableFilterRow = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _checkSize() {
        /** @type {?} */
        const themesKey = localStorage.getItem('gsp_rtf_themSKey');
        /** @type {?} */
        let st = 'sm';
        switch (themesKey) {
            case 'default':
                st = 'sm';
                break;
            case 'loose':
                st = 'md';
                break;
        }
        this.sizeType = st;
    }
    /**
     * @private
     * @return {?}
     */
    checkDragColumns() {
        if (this.isMultiHeader()) {
            this.enableDragColumn = false;
            // this.cd.detectChanges();
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkOptions() {
        this.gridSize = { width: this.width + 'px', height: this.height + 'px' };
        if (!this.id) {
            this.id = 'FarrisDataGrid' + Utils.uuid().replace(/-/g, '').substr(0, 10);
            if (this.useControlPanel) {
                this.useControlPanel = false;
                console.warn('启用列配置属性，未设置ID，此功能将禁用。');
            }
            this._custom_datagrid_cls = this.id;
        }
        else {
            this.styleSheetId = this.id + '_' + Utils.uuid().replace(/-/g, '').substr(0, 10);
            this._custom_datagrid_cls = this.styleSheetId;
        }
        if (this.settingService && this.useControlPanel) {
            this.settingService.registerGridInstance(this);
        }
        this.dgs.createStyleElement(this.styleSheetId);
        if (!this.idField) {
            throw new Error('The Datagrid\'s idField can\'t be Null. ');
        }
        this.checkNowrap();
        this.checkSortInfo();
        this.checkMergeCell();
        this.setCheckboxBehavior();
        this.initPaginationOptions();
        if (!this.columns) {
            this.columns = this.fields;
        }
        this.checkGroupHeaderColumns();
        // TFS: 356956
        this.checkGroupRowSetting();
        this.checkColumnsType();
        this.checkDragColumns();
        /** @type {?} */
        const _defaultSetting = (/**
         * @return {?}
         */
        () => {
            this._flatColumns();
            // this.setHeaderHeight();
            this.setRowHeight();
        });
        this.dfs.setinitialOptions({
            columns: this.columns,
            groupField: this.groupField,
            sortName: this.sortName,
            sortOrder: this.sortOrder
        });
        // 加载用户个性化设置 --》 列显示与列排序
        if (this.settingService && this.useControlPanel) {
            /** @type {?} */
            const settings$ = this.settingService.getSettings(this.id);
            if (!settings$) {
                _defaultSetting();
                return;
            }
            settings$.subscribe((/**
             * @param {?} sets
             * @return {?}
             */
            (sets) => {
                if (sets) {
                    this.userProfileSetting(sets);
                    this.setRowHeight(false);
                }
                if (this.data && this.data.length) {
                    this.dfs.updateProperty('data', this.data);
                }
                this.columnsChanged(this.groupRows && (this.data && !!this.data.length));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                _defaultSetting();
                console.error(err);
            }));
        }
        else {
            _defaultSetting();
        }
    }
    /**
     * @return {?}
     */
    refreshSelectedData() {
        if (this.selectedRow && this.selectedRow.id) {
            if (this.data && this.data.length) {
                /** @type {?} */
                const rd = this.data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d[this.idField] === this.selectedRow.id));
                this.selectedRow.data = rd;
            }
            else {
                this.selectedRow = null;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribes();
        if (this.ro) {
            this.ro.disconnect();
        }
        if (this.documentRowKeydownHandler) {
            this.documentRowKeydownHandler();
        }
        this.currentCell = null;
        this.clientFilterService = null;
        this.cleanDom();
        // 移除动态的style
        this.dgs.removeStyleSheet();
        if (this.settingService && this.settingService.destroy) {
            this.settingService.destroy(this.id);
        }
        if (this.sms) {
            this.sms.removeEvents();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.showSelectedList && this.dgPager) {
            this.dgPager.closeSelectedList();
        }
        if (this.pending) {
            return;
        }
        /** @type {?} */
        const target = (/** @type {?} */ (event.target));
        if (target.nodeName === 'TEXTAREA' || target.nodeName === 'INPUT') {
            event.stopPropagation();
            return;
        }
        if (this.currentCell && this.currentCell.editor && this.currentCell.editor._editorClickEvent) {
            event.stopPropagation();
            return;
        }
        this.endCellEdit(event);
        this.dfs.cancelSelectCell();
        if (this.stopPropagation) {
            event.stopPropagation();
            return;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initPaginationOptions() {
        this.pagerOpts = {
            id: this.id ? this.id + '-pager_' + Utils.uuid() : 'farris-datagrid-pager_' + Utils.uuid(),
            itemsPerPage: this.pagination ? this.pageSize : this.total,
            currentPage: this.pageIndex,
            totalItems: this.total,
            pageList: this.pageList,
            remote: this.pagerOnServer
        };
    }
    /**
     * @private
     * @return {?}
     */
    updatePagerOptions() {
        this.pagerOpts = Object.assign(this.pagerOpts, {
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            totalItems: this.total
        });
    }
    /**
     * @private
     * @return {?}
     */
    setPagerTotal() {
        /** @type {?} */
        const _total = this.data.length;
        if (this.pagination && this.total === 0 && this.virtualized) {
            this.pagerOpts.totalItems = _total;
        }
        else {
            if (!this.pagination) {
                this.pagerOpts.itemsPerPage = _total;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFooterHeight() {
        if (this.showFooter && !this.footerTemplate) {
            this._footerData.subscribe((/**
             * @param {?} rows
             * @return {?}
             */
            rows => {
                this.footerHeight = rows.length * this.rowHeight;
                // this.cd.detectChanges();
            }));
        }
    }
    /**
     * @return {?}
     */
    customStyleKey() {
        return `.${this._custom_datagrid_cls}`;
    }
    /**
     * @private
     * @param {?=} useSizeType
     * @return {?}
     */
    setRowHeight(useSizeType = false) {
        /** @type {?} */
        const _rowHeight = SIZE_TYPE[this._sizeType].row;
        /** @type {?} */
        const _rh = 29;
        if (useSizeType) {
            this.rowHeight = _rowHeight;
        }
        else {
            this.rowHeight = _rowHeight > this.rowHeight ? _rowHeight : this.rowHeight;
        }
        /** @type {?} */
        const key1 = `${this.customStyleKey()}.f-datagrid-body-row, ${this.customStyleKey()} .f-datagrid-cell`;
        /** @type {?} */
        const key2 = `${this.customStyleKey()} .f-datagrid-cell-content`;
        this.dgs.removeCssRule(key1);
        this.dgs.removeCssRule(key2);
        if (this.rowHeight !== _rh && this.nowrap) {
            /** @type {?} */
            const rowHeightCSS = [
                `${key1} { height: ${this.rowHeight}px }`,
                `${key2} { height: ${this.rowHeight}px; line-height: ${this.rowHeight}px }`
            ];
            this.dgs.appendCssRules(rowHeightCSS);
        }
    }
    /**
     * @return {?}
     */
    initSelectOrChecked() {
        /** @type {?} */
        const _data = this.dfs.getCurrentPageData();
        if (!this.enableMorePageSelect && this.multiSelect) {
            // this.clearAll();
            if (this.checkeds && this.checkeds.length) {
                this.checkeds.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    if (!_data.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n[this.idField] == r.id))) {
                        this.unCheckRow(r.id, false);
                    }
                }));
            }
            else {
                this.clearCheckeds();
            }
        }
        if (this.selectValue) {
            if (_data.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] == this.selectValue))) {
                this.selectRow(this.selectValue, false);
                this.refreshSelectedData();
            }
        }
        if (this.multiSelect) {
            if (this.checkValues && this.checkValues.length) {
                /** @type {?} */
                const chkids = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.id));
                /** @type {?} */
                const diffIds = this.dfs.difference(chkids, this.checkValues);
                if (diffIds.length) {
                    this.checkRows(diffIds, false);
                }
                else {
                    this.checkValues = [];
                }
            }
            else {
                this.checkValues = [];
            }
            this.checkValues = this.checkeds.map((/**
             * @param {?} r
             * @return {?}
             */
            r => r.id));
            if (!this._isResized || this.virtualized) {
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
            }
            this.updateAllCheckboxStatus(_data);
        }
    }
    /**
     * @private
     * @param {?=} _data
     * @return {?}
     */
    updateAllCheckboxStatus(_data) {
        if (!_data) {
            _data = this.dfs.getCurrentPageData();
        }
        /** @type {?} */
        let checkAllStatus = 0;
        if (this.showAllCheckbox) {
            /** @type {?} */
            const allDataIDs = _data.map((/**
             * @param {?} r
             * @return {?}
             */
            r => r[this.idField]));
            /** @type {?} */
            const newCheckValues = allDataIDs.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.checkValues.includes(n)));
            if (newCheckValues && newCheckValues.length) {
                /** @type {?} */
                const isSame = !this.dfs.difference(allDataIDs, this.checkValues).length;
                if (!this.checkValues || !this.checkValues.length) {
                    // 没有选中的数据
                    checkAllStatus = 0;
                }
                else if (isSame) { // this.checkValues.length === this.data.length ||
                    // 全部选中
                    checkAllStatus = 1;
                }
                else if (!isSame) { // this.checkValues.length !== this.data.length &&
                    // 有选中的数据，但不是全部选中
                    checkAllStatus = 2;
                }
            }
        }
        this.dgs.changeCheckAllStatus.emit(checkAllStatus);
    }
    // 当单选并显示复选框时，默认将 checkOnSelect, selectOnCheck 设置为 true;
    /**
     * @private
     * @return {?}
     */
    setCheckboxBehavior() {
        if (!this.multiSelect && this.showCheckbox) {
            // TFS: 380899
            // this.checkOnSelect = true;
            // this.selectOnCheck = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _flatColumns() {
        this.flatColumns = flatten(this.columns).filter((/**
         * @param {?} col
         * @return {?}
         */
        (col) => !col.colspan && this.columnIsVisible(col)));
    }
    /**
     * @param {?} col
     * @return {?}
     */
    columnIsVisible(col) {
        return DatagridColumnsHelper.columnIsVisible(col, this);
    }
    // 添加列设置
    /**
     * @private
     * @return {?}
     */
    addControlCol() {
        if (this.useControlPanel) {
            /** @type {?} */
            const controlCol = this.columns[0].find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === this.ControlPanelFeild));
            if (!controlCol) {
                /** @type {?} */
                const cp = { field: this.ControlPanelFeild, width: 24, rowspan: this.columns.length, fixed: 'right', visible: true };
                // 2021-05-24 启用过滤行后出错
                // if (this.enableFilterRow) {
                //     cp.rowspan += 1;
                // }
                this.columns[0].push(cp);
            }
            else {
                controlCol.visible = true;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkGroupHeaderColumns() {
        if (this.isMultiHeader()) {
            /** @type {?} */
            const allCols = flatten(this.columns);
            DatagridColumnsHelper.checkGroupHeaderColumnVisible(allCols);
        }
    }
    // 检查列集合: [] -> [[]]
    /**
     * @private
     * @param {?} values
     * @return {?}
     */
    correctColumns(values) {
        if (values && values.length && !Array.isArray(values[0])) {
            return [values];
        }
        else {
            return values || [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkColumnsType() {
        if (this.columns && this.columns.length) {
            // if (!Array.isArray(this.columns[0])) {
            //     this.columns = [ this.columns ];
            // }
            this.addControlCol();
            this.columns.forEach((/**
             * @param {?} cols
             * @param {?} columnsIndex
             * @return {?}
             */
            (cols, columnsIndex) => {
                cols.forEach((/**
                 * @param {?} col
                 * @param {?} index
                 * @return {?}
                 */
                (col, index) => {
                    if (!col.field) {
                        col.field = `farris-datagrid-column_${columnsIndex}_${index}`;
                    }
                    if (!col.valign) {
                        col.valign = 'middle';
                    }
                    if (col.width === undefined || col.width === null) {
                        col.width = 100;
                    }
                    else {
                        if (typeof col.width === 'string') {
                            col.width = parseInt(col.width, 10);
                        }
                    }
                    // 记录原始宽度
                    if (!col.originalWidth) {
                        col.originalWidth = col.width;
                    }
                    if (col.formatter && typeof col.formatter !== 'function' && Object.keys(col.formatter).length === 0) {
                        col.formatter = null;
                    }
                    if (!this.showGroupColumn && this.groupRows) {
                        this.toggleVisibleColumn(this.groupField.split(','), false);
                    }
                    // 过滤行检查
                    if (col.filter) {
                        if (typeof col.filter === 'boolean') {
                            if (col.field) {
                                col.filter = this.clientFilterService.createColumnFilterOptions(col);
                            }
                            else {
                                col.filter = false;
                            }
                        }
                        else {
                            if (!col.filter.options || !Object.keys(col.filter.options).length) {
                                switch (col.filter.type) {
                                    case ColumnFilterType.enum:
                                        col.filter.options = col.formatter['options'];
                                        break;
                                    case ColumnFilterType.date:
                                        col.filter.options = { dateFormat: 'yyyy-MM-dd', returnFormat: 'yyyy-MM-dd' };
                                        break;
                                    case ColumnFilterType.datetime:
                                        col.filter.options = { dateFormat: 'yyyy-MM-dd HH:mm:ss', returnFormat: 'yyyy-MM-dd HH:mm:ss' };
                                        break;
                                }
                            }
                        }
                    }
                    // 兼容 hidden 2021-05-31
                    if (col['hidden'] !== undefined && col.visible === undefined) {
                        if (typeof col['hidden'] === 'boolean') {
                            col.visible = !col['hidden'];
                        }
                        else {
                            if (typeof col['hidden'] === 'function') {
                                col.visible = (/**
                                 * @return {?}
                                 */
                                () => {
                                    /** @type {?} */
                                    const r = col['hidden'].bind(this);
                                    return !r;
                                });
                            }
                        }
                    }
                }));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkGroupRowSetting() {
        // 如果启用分组行，但未设置分组字段时，将关闭分组行功能
        // if (this.groupRows) {
        //     if (!this.groupField) {
        //         this.groupRows = false;
        //     }
        // }
    }
    /**
     * @private
     * @return {?}
     */
    checkMergeCell() {
        if (this.mergeCell) {
            if (!this.mergeFields || !this.mergeFields.length) {
                this.mergeCell = false;
            }
            else {
                this.virtualized = false;
                this.virtualizedAsyncLoad = false;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkSortInfo() {
        if (this.sortName) {
            if (!this.sortOrder) {
                this.sortOrder = this.sortName.split(',').map((/**
                 * @return {?}
                 */
                () => 'asc')).join(',');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkNowrap() {
        // 启用折行后，虚拟加载特性失效
        if (!this.nowrap) {
            this.virtualized = false;
        }
    }
    /**
     * @return {?}
     */
    setHeaderHeight() {
        this.realHeaderHeight = 0;
        if (this.showHeader) {
            if (!this.headerWrap) {
                this.realHeaderHeight = this.columns.length * this.headerHeight;
            }
            else {
                /** @type {?} */
                const gridHeaderEl = this.el.nativeElement.querySelector('.f-datagrid-header');
                if (gridHeaderEl) {
                    // const tables = gridHeaderEl.querySelectorAll('table');
                    /** @type {?} */
                    const trs = gridHeaderEl.querySelectorAll('table tr:not(.f-datagrid-filter-row)');
                    trs.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        n.style.height = 'auto';
                        Array.from(n.children).forEach((/**
                         * @param {?} a
                         * @return {?}
                         */
                        (a) => a.style.height = 'auto'));
                    }));
                    /** @type {?} */
                    const h = Math.max(...Array.from(trs).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.clientHeight)));
                    this.realHeaderHeight = h;
                }
            }
            if (this.enableFilterRow) {
                this.realHeaderHeight += this.filterRowHeight;
            }
        }
        return this.realHeaderHeight;
    }
    // 列集合变化
    /**
     * @param {?=} reloadData
     * @param {?=} useColumnSettingWidth
     * @return {?}
     */
    columnsChanged(reloadData = true, useColumnSettingWidth = null) {
        /** @type {?} */
        const _useColumnSettingWidth = useColumnSettingWidth === null ? this.fitColumns : useColumnSettingWidth;
        this.checkColumnsType();
        this._flatColumns();
        this.headerHeightChange();
        this.dfs.updateProperty('flatColumns', this.flatColumns);
        this.dfs.updateColumns(this.columns, _useColumnSettingWidth, true);
        // this.colGroup = this.dfs.getState().columnsGroup;
        // 动态列合计行
        this.updateFooterData();
        if (reloadData) {
            this.refresh();
        }
        this.dgs.columnsChanged.emit({ scrollToLeft: reloadData });
    }
    // 列头变化
    /**
     * @private
     * @return {?}
     */
    headerHeightChange() {
        this.setHeaderHeight();
        this.dgs.showGridHeader.emit(this.realHeaderHeight);
    }
    /**
     * 判断是否在弹出的窗口中；返回undefind 说明没有在弹出的窗口，否则视为当前列表在弹出窗口使用
     * @return {?}
     */
    inDialog() {
        return this.el.nativeElement.closest('.modal-body');
    }
    //#endregion
    //#region Init
    /**
     * 初始编辑器与验证器
     * @private
     * @return {?}
     */
    initEditorAndValidator() {
        /** @type {?} */
        const Editors = this.inject.get(GRID_EDITORS, []);
        if (Editors.length) {
            Editors.forEach((/**
             * @param {?} ed
             * @return {?}
             */
            ed => {
                this.editors[ed.name] = ed.value;
            }));
        }
        /** @type {?} */
        const _validators = this.inject.get(GRID_VALIDATORS, []);
        if (_validators && _validators.length) {
            // _validators.forEach(vr => {
            //     this.validators[vr.name] = vr.value;
            // });
            this.validators = _validators;
        }
    }
    /**
     * @return {?}
     */
    setPagerHeight() {
        if (!this.useHtmlTable) {
            if (!this.pagination) {
                this.pagerHeight = 0;
            }
            else {
                this.pagerHeight = this.dgPager && this.dgPager.outerHeight || 40;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initState() {
        this.data = this.data || [];
        this.dfs.initState(Object.assign({}, this, { fitColumns: this.fitColumns, fit: this.fit, groupField: this._groupField }));
    }
    /**
     * @private
     * @param {?=} fitColumns
     * @return {?}
     */
    setFitColumns(fitColumns = true) {
        if (this.columns) {
            this.dfs.fitColumns(fitColumns);
        }
    }
    /**
     * @private
     * @return {?}
     */
    setGridNewSizeWhenFit() {
        /** @type {?} */
        const parent = this.el.nativeElement.parentElement;
        if (parent) {
            /** @type {?} */
            const cmpRect = parent.getBoundingClientRect();
            /** @type {?} */
            const padding = this.getElementPadding(parent);
            /** @type {?} */
            const border = this.getElementBorderWidth(parent);
            this.width = Math.floor(cmpRect.width - border.left - border.right - padding.left - padding.right);
            this.height = Math.floor(cmpRect.height - border.top - border.bottom - padding.top - padding.bottom);
            if (!this.height) {
                this.height = this.dfs.getState().height || 300;
            }
            if (!this.width) {
                this.width = this.dfs.getState().width || 800;
            }
        }
    }
    /**
     * @param {?=} fit
     * @return {?}
     */
    calculateGridSize(fit = true) {
        if (this.useHtmlTable) {
            return;
        }
        if (fit) {
            this.setGridNewSizeWhenFit();
            if (this.width && this.height) {
                this._isResized = true;
                this.gridSize = { width: this.width + 'px', height: this.height + 'px' };
                this.dfs.resize({ width: this.width, height: this.height });
                this._isResized = false;
                this.cd.detectChanges();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initBeforeEvents() {
        if (!this.beforeSelect) {
            this.beforeSelect = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeUnselect) {
            this.beforeUnselect = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeCheck) {
            this.beforeCheck = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeUncheck) {
            this.beforeUncheck = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeEdit) {
            this.beforeEdit = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.afterEdit) {
            this.afterEdit = (/**
             * @return {?}
             */
            () => of(true));
        }
    }
    //#endregion
    //#region 快捷键
    /**
     * @private
     * @return {?}
     */
    unbindMoveSelectRowEvent() {
        if (this.documentRowKeydownHandler) {
            this.documentRowKeydownHandler();
            this.documentRowKeydownHandler = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindDocumentMoveSelectRowEvent() {
        this.unbindMoveSelectRowEvent();
        this.unbindDocumentEditListener();
        this.documentRowKeydownHandler = this.render2.listen(document, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            // e.preventDefault();
            if (!this.isActived()) {
                return;
            }
            // has loading
            if (document.querySelectorAll('farris-loading').length) {
                return;
            }
            if (e.target) {
                /** @type {?} */
                const targetName = ((/** @type {?} */ (e.target))).nodeName;
                if (this.ignoreTarget.indexOf(targetName) > -1) {
                    return;
                }
            }
            if (e.keyCode === 40 || e.keyCode === 38) {
                e.preventDefault();
            }
            switch (e.keyCode) {
                case 40:
                    this.selectNextRow();
                    break;
                case 38:
                    this.selectPrevRow();
                    break;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    bindEditListenerInModal() {
        // 弹窗中事件处理
        if (Utils.hasDialogOpen()) {
            /** @type {?} */
            const modalElement = this.inDialog();
            if (modalElement) {
                /** @type {?} */
                const _fmodal = modalElement.closest('.farris-modal');
                if (_fmodal) {
                    this.modalClickEvent = this.render2.listen(_fmodal, 'click', (/**
                     * @return {?}
                     */
                    () => {
                        this.endEditing();
                        this.currentCell = null;
                    }));
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindDocumentEditListener() {
        this.unbindDocumentEditListener();
        if (!this.documentCellClickHandler) {
            this.bindEditListenerInModal();
            this.documentCellClickHandler = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                if (this.pending) {
                    return false;
                }
                if (this.currentCell) {
                    if (Utils.hasDialogOpen()) {
                        /** @type {?} */
                        const indlg = this.inDialog();
                        /** @type {?} */
                        const currentTargetInDialog = event.target.closest('.modal-body');
                        if (indlg && currentTargetInDialog) {
                            if (indlg != currentTargetInDialog) {
                                return;
                            }
                        }
                        else {
                            return;
                        }
                    }
                    // DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
                    // if (this.currentCell.isEditing) {
                    //     // this.dfs.endEditCell();
                    //     this.currentCell.cellElement.closeEdit();
                    // }
                    // this.dfs.cancelSelectCell();
                    // this.unbindDocumentEditListener();
                    if (this.currentCell.isEditing) {
                        // this.dfs.endEditCell();
                        this.currentCell.cellElement.closeEdit().subscribe((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => {
                            if (f) {
                                DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
                                DomHandler.removeClass(this.currentCell.cellElement, CELL_EDITING_CLS);
                                this.dfs.cancelSelectCell();
                                this.unbindDocumentEditListener();
                                this.currentCell = null;
                            }
                        }));
                    }
                }
            });
            this.docuemntCellClickEvents = this.render2.listen(document, 'click', this.documentCellClickHandler);
        }
        if (!this.documentCellKeydownHandler) {
            this.documentCellKeydownHandler = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                if (this.isActived()) {
                    this.onKeyDownEvent(event);
                }
            });
            this.documentCellKeydownEvents = this.render2.listen(document, 'keydown', this.documentCellKeydownHandler);
        }
    }
    /**
     * @private
     * @return {?}
     */
    unbindDocumentEditListener() {
        if (this.documentCellClickHandler) {
            this.docuemntCellClickEvents();
            this.documentCellClickHandler = null;
        }
        if (this.documentCellKeydownHandler) {
            this.documentCellKeydownEvents();
            this.documentCellKeydownHandler = null;
        }
        if (this.modalClickEvent) {
            this.modalClickEvent();
            this.modalClickEvent = null;
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    onKeyDownEvent(e) {
        // if (e.ctrlKey || e.shiftKey || !this.editable) {
        //     return;
        // }
        // if (e.ctrlKey || e.shiftKey || !this.editable) {
        //     return;
        // }
        // if (!e.target.closest('.f-datagrid')) {
        //     return;
        // }
        /** @type {?} */
        const keyCode = e.keyCode;
        if (this.currentCell && !this.currentCell.isEditing) {
            if ([13, 40, 37, 38, 39, 9].indexOf(keyCode) > -1) {
                e.preventDefault();
            }
            switch (keyCode) {
                case 32: // 空格
                    if (this.currentCell && this.currentCell.column.onSpaceHandler) {
                        e.stopPropagation();
                        this.currentCell.column.onSpaceHandler({ grid: this, cell: this.currentCell, event: e });
                    }
                    break;
                case 13: // Enter
                    if (this.currentCell) {
                        /** @type {?} */
                        const fn = this.currentCell.cellElement['editCell'];
                        if (fn) {
                            fn.apply(this.currentCell.cellElement);
                        }
                        else {
                            if (this.currentCell.column.onEnterHandler) {
                                e.stopPropagation();
                                this.currentCell.column.onEnterHandler({ grid: this, cell: this.currentCell, event: e });
                            }
                        }
                    }
                    break;
                case 40: // ↓
                    this.selectNextCell('down', e);
                    break;
                case 38: // ↑
                    this.selectNextCell('up', e);
                    break;
                case 39: // →
                    this.selectNextCell('right', e);
                    break;
                case 37: // ←
                    this.selectNextCell('left', e);
                    break;
                case 9: // Tab
                    if (e.shiftKey) {
                        this.selectNextCell('left', e);
                    }
                    else {
                        this.selectNextCell('right', e);
                    }
                    break;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    unsubscribes() {
        this.subscriptions.forEach((/**
         * @param {?} ss
         * @return {?}
         */
        ss => {
            if (ss) {
                ss.unsubscribe();
                ss = null;
            }
        }));
        this.subscriptions = [];
        if (this.docuemntCellClickEvents) {
            this.docuemntCellClickEvents();
        }
    }
    //#endregion
    //#region Editing
    /**
     * @return {?}
     */
    isRowEditing() {
        if (!this.selectedRow || this.selectedRow.index === -1) {
            return false;
        }
        else {
            if (this.editMode === 'row') {
                return this.selectedRow.editors && this.selectedRow.editors.length;
            }
            else {
                return false;
            }
        }
    }
    /**
     * @return {?}
     */
    isCellEditing() {
        if (this.currentCell && this.editMode === 'cell') {
            if (!this.currentCell.editor && !this.currentCell.column.editorTemplate) {
                this.currentCell.isEditing = false;
            }
            return this.currentCell.isEditing;
        }
        return false;
    }
    /**
     * @return {?}
     */
    isEditing() {
        if (this.editMode === 'row') {
            return this.isRowEditing();
        }
        else {
            return this.isCellEditing();
        }
    }
    /**
     * @return {?}
     */
    endEditing() {
        if (this.editMode === 'row') {
            this.endRowEdit();
        }
        else if (this.editMode === 'cell') {
            this.endCellEdit();
        }
    }
    /**
     * @return {?}
     */
    getEditors() {
        return this.selectedRow.editors;
    }
    /**
     * @param {?} rowId
     * @param {?} field
     * @return {?}
     */
    editCell(rowId, field) {
        this.activeDataGrid();
        /** @type {?} */
        const rowIndex = this.dfs.findRowIndex(rowId);
        if (rowIndex > -1) {
            this.endCellEdit();
            /** @type {?} */
            const trId = TR_PREFIX + rowId;
            /** @type {?} */
            const trDom = this.el.nativeElement.querySelector('#' + trId);
            /** @type {?} */
            let tdDom = null;
            if (trDom) {
                tdDom = trDom.querySelector(`[field="${field}"]`);
            }
            /** @type {?} */
            const col = this.getColumn(field);
            if (!tdDom && col.fixed) {
                if (col.fixed === 'left') {
                    /** @type {?} */
                    const trDomL = this.el.nativeElement.querySelector('#' + trId + '_fixedleft');
                    tdDom = trDomL && trDomL.querySelector(`[field="${field}"]`);
                }
                else if (col.fixed === 'right') {
                    /** @type {?} */
                    const trDomR = this.el.nativeElement.querySelector('#' + trId + '_fixedright');
                    tdDom = trDomR && trDomR.querySelector(`[field="${field}"]`);
                }
            }
            if (tdDom && tdDom['editCell']) {
                this.currentCell = null;
                tdDom.editCell();
            }
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    endCellEdit(event) {
        // document.body.click();
        if (this.currentCell) {
            DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
            if (this.currentCell.isEditing) {
                // this.dfs.endEditCell();
                if (this.currentCell.cellEditorRef) {
                    this.currentCell.cellEditorRef.hideCover();
                }
                /** @type {?} */
                const stopEdit = this.currentCell.cellElement.closeEdit();
                if (stopEdit) {
                    stopEdit.subscribe();
                }
            }
        }
    }
    /**
     * @param {?=} rowId
     * @return {?}
     */
    editRow(rowId) {
        if (!this.editable || this.editMode !== 'row') {
            return false;
        }
        if (rowId) {
            this.selectRow(rowId);
        }
        if (!this.selectedRow || this.selectedRow.index === -1) {
            console.warn('Please select a row.');
            return false;
        }
        const { index: rowIndex, data: rowData } = Object.assign({}, this.selectedRow);
        /** @type {?} */
        const beforeEditEvent = this.beforeEdit({ rowIndex, rowData, gridInstance: this });
        if (!beforeEditEvent || !beforeEditEvent.subscribe) {
            console.warn('please return an Observable Type.');
            return;
        }
        /** @type {?} */
        const trId = TR_PREFIX + rowId;
        /** @type {?} */
        const trDom = this.el.nativeElement.querySelector('#' + trId);
        if (!this.selectedRow.dr) {
            trDom.click();
        }
        beforeEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            if (flag) {
                if (this.selectedRow.dr) {
                    /** @type {?} */
                    const cells = this.selectedRow.dr.cells.toArray();
                    if (!cells || !cells.length) {
                        return;
                    }
                    cells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    cell => {
                        if (cell.column.editor) {
                            cell.isEditing = true;
                        }
                    }));
                    this.selectedRow.dr.cd.detectChanges();
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        /** @type {?} */
                        const editors = cells.map((/**
                         * @param {?} cell
                         * @return {?}
                         */
                        cell => {
                            if (cell.cellEditor) {
                                return cell.cellEditor.componentRef;
                            }
                        })).filter((/**
                         * @param {?} editor
                         * @return {?}
                         */
                        editor => editor));
                        this.selectedRow.editors = editors;
                        if (editors && editors.length) {
                            if (editors[0].instance.inputElement) {
                                editors[0].instance.inputElement.focus();
                            }
                        }
                        // 绑定键盘事件
                        this.bindRowEditorKeydownEvent();
                        if (!this.cd['destroyed']) {
                            this.cd.detectChanges();
                        }
                        this.beginEdit.emit({ rowIndex, rowData, gridInstance: this, editor: editors });
                    }));
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    endRowEdit() {
        if (!this.isRowEditing()) {
            return { canEnd: true };
        }
        if (!this.selectedRow || this.selectedRow.index === -1) {
            console.warn('Please select a row.');
            return;
        }
        const { index: rowIndex, data: rowData, dr } = Object.assign({}, this.selectedRow);
        const { editor: currentEditor, column } = Object.assign({}, this.currentCell);
        // blur
        document.body.click();
        if (this.pending) {
            return { canEnd: false };
        }
        /** @type {?} */
        const rowForm = (/** @type {?} */ (dr.form));
        rowForm.markAsTouched();
        if (rowForm.invalid && !this.endEditByInvalid) {
            return { canEnd: false };
        }
        // afterEdit 要传递相关参数，在编辑状态时，移动滚动条会出事
        /** @type {?} */
        const afterEditEvent = this.afterEdit(rowIndex, rowData, column, currentEditor);
        if (!afterEditEvent || !afterEditEvent.subscribe) {
            console.warn('please return an Observable Type.');
            return { canEnd: false };
        }
        afterEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            if (flag) {
                this.closeAllCellEditor();
                if (this.selectedRow.dr.form) {
                    this.selectedRow.dr.rowData = Object.assign(this.selectedRow.dr.rowData, this.selectedRow.dr.form.value);
                    this.dfs.updateRow(this.selectedRow.id, this.selectedRow.dr.rowData);
                    this.cd.detectChanges();
                }
                /** @type {?} */
                let val = '';
                if (currentEditor && currentEditor.formControl) {
                    val = currentEditor.formControl.value;
                }
                this.endEdit.emit({ rowIndex, rowData, column, value: val });
                this.dgs.refreshFooterData.emit();
            }
        }));
    }
    /**
     * @param {?} rowId
     * @param {?=} emit
     * @return {?}
     */
    cancelEdit(rowId, emit = true) {
        if (!this.isEditing()) {
            return;
        }
        this.closeAllCellEditor();
        if (rowId) {
            this.dfs.rejectChanges(rowId);
        }
        this.cd.detectChanges();
        if (emit) {
            this.cancelEdited.emit();
        }
    }
    /**
     * @return {?}
     */
    closeAllCellEditor() {
        if (this.selectedRow && this.selectedRow.dr) {
            /** @type {?} */
            const cells = this.selectedRow.dr.cells;
            if (cells) {
                cells.forEach((/**
                 * @param {?} cell
                 * @return {?}
                 */
                cell => cell.isEditing = false));
                if (this.currentCell) {
                    this.currentCell.isEditing = false;
                }
            }
            this.selectedRow.editors = null;
        }
        // 取消键盘事件
        this.unbindRowEditorKeydownEvent();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    rowEditTabKeydwonEvent(e) {
        /** @type {?} */
        const keyCode = e.which || e.keyCode;
        if (keyCode === 9) { // tab
            // tab
            /** @type {?} */
            const td = e.target.closest('td');
            /** @type {?} */
            const tr = e.target.closest('tr');
            /** @type {?} */
            const nextTd = td.nextElementSibling;
            /** @type {?} */
            const hasNoEditor = (/**
             * @param {?} _td
             * @return {?}
             */
            (_td) => {
                return !_td.querySelector('input') && !_td.querySelector('textarea') && !_td.querySelector('select');
            });
            /** @type {?} */
            const editNextRow = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const nextTr = tr.nextElementSibling;
                if (nextTr) {
                    nextTr.click();
                    /** @type {?} */
                    const nextRowid = nextTr.getAttribute('id').replace(TR_PREFIX, '');
                    if (nextRowid) {
                        this.editRow(nextRowid);
                    }
                }
            });
            if (nextTd) {
                if (hasNoEditor(nextTd)) {
                    /** @type {?} */
                    const tds = tr.querySelectorAll('td');
                    /** @type {?} */
                    let tdIdx = -1;
                    tds.forEach((/**
                     * @param {?} t
                     * @param {?} i
                     * @return {?}
                     */
                    (t, i) => {
                        if (t === nextTd) {
                            tdIdx = i;
                        }
                    }));
                    /** @type {?} */
                    let nextTrEdit = true;
                    while (tdIdx < tds.length) {
                        /** @type {?} */
                        const _ntd = tds[tdIdx];
                        if (hasNoEditor(_ntd)) {
                            tdIdx++;
                        }
                        else {
                            nextTrEdit = false;
                            break;
                        }
                    }
                    if (nextTrEdit) {
                        editNextRow();
                    }
                }
            }
            else {
                editNextRow();
            }
        }
        e.stopPropagation();
    }
    /**
     * @private
     * @return {?}
     */
    bindRowEditorKeydownEvent() {
        if (!this.documentRowEditKeydownHanlder) {
            this.documentRowEditKeydownHanlder = this.render2.listen(document, 'keydown', this.rowEditTabKeydwonEvent.bind(this));
        }
        this.documentClickEndRowEditHandler = this.render2.listen(document, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.pending) {
                return false;
            }
            if (Utils.hasDialogOpen()) {
                return;
            }
            if (this.isRowEditing()) {
                // this.endRowEdit();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    unbindRowEditorKeydownEvent() {
        // 取消键盘事件
        if (this.documentRowEditKeydownHanlder) {
            this.documentRowEditKeydownHanlder();
            this.documentRowEditKeydownHanlder = null;
        }
        if (this.documentClickEndRowEditHandler) {
            this.documentClickEndRowEditHandler();
            this.documentClickEndRowEditHandler = null;
        }
    }
    //#endregion
    //#region Load Data
    /**
     * @private
     * @param {?} conditions
     * @param {?=} excuteLocaleFilter
     * @return {?}
     */
    _clientFilter(conditions, excuteLocaleFilter = false) {
        // 客户端过滤
        if (excuteLocaleFilter) {
            /** @type {?} */
            const allClientData = this.dfs.getData(true);
            if (conditions && Object.keys(conditions).length) {
                /** @type {?} */
                const _data = this.clientFilterService.executeFilter(allClientData, conditions);
                this.dfs.loadFilterData(_data);
            }
            else {
                this.loadData(allClientData, false, true);
            }
        }
        if (!this.virtualized) {
            this.scrollToTop();
        }
        this.filterChanged.emit(conditions);
    }
    /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    smartFilterData(conditions) {
        if (this.remoteFilter) { // 服务器端过滤
            // 服务器端过滤
            /** @type {?} */
            const entityFilters = this.clientFilterService.convertSmartFilter2EntityFilter(conditions);
            this.filterChanged.emit(entityFilters);
        }
        else {
            // 客户端过滤
            this._clientFilter(conditions, this.useDefaultFilter);
        }
    }
    // smart fitler 清空查询条件
    /**
     * @param {?} $event
     * @return {?}
     */
    onClearSmartFilters($event) {
        this.smartFilterResult = { conditions: [], controlData: [] };
        this.conditions = [];
        this.smartFilterData([]);
        this.smartFilterService.clearAll();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onFilterBarResize(0);
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onRemoveSmartFilterItem($event) {
        // console.log($event);
        if ($event) {
            /** @type {?} */
            const e = Object.assign({}, $event);
            e['labelCode'] = $event.fieldCode;
            this.smartFilterService.removeCondition(e, true);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFilterBarResize($event) {
        this.filterBarHeight = $event;
        /** @type {?} */
        const smartFilterEl = this.el.nativeElement.querySelector('.f-datagrid-column-drop-panel');
        if (smartFilterEl && !$event) {
            smartFilterEl.style.top = '0px';
        }
        this.dgs.showGridHeader.emit(this.realHeaderHeight);
        this.dgs.smartFilterBarExpand.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSmartFilterChange($event) {
        const { conditions, filterItem } = $event;
        this.smartFilterService.filterConditionChanged({ conditions, controlData: filterItem });
        // this.smartFilterData(conditions);
        // console.log(this.smartFilterResult, filterItem);
        this.dgs.smartFilterDataChange.emit(filterItem);
    }
    /**
     * @param {?=} conditions
     * @return {?}
     */
    filterData(conditions) {
        if (!conditions) {
            conditions = this.conditions;
        }
        else {
            this.conditions = conditions;
        }
        this.scrollToTop();
        if (this.enableSmartFilter) {
            this.smartFilterData(conditions);
            return;
        }
        if (this.remoteFilter) {
            /** @type {?} */
            const entityFilters = this.clientFilterService.convert2FilterArray(conditions);
            this.filterChanged.emit(entityFilters);
        }
        else {
            // 客户端过滤
            this._clientFilter(conditions, true);
        }
    }
    /**
     * 清空过滤条件
     * @return {?}
     */
    clearCondition() {
        this.dgs.onClearFilter();
    }
    /**
     * @param {?=} data
     * @param {?=} keepSortState
     * @param {?=} keepScrollPosition
     * @return {?}
     */
    loadData(data, keepSortState = false, keepScrollPosition = true) {
        if (this.loading) {
            this.closeLoading(!this.pagination);
        }
        data = data || [];
        if (keepScrollPosition && this.scrollInstance && this.scrollInstance.instance) {
            /** @type {?} */
            const lst = this.scrollInstance.instance.lastScrollTop;
            /** @type {?} */
            const lsl = this.scrollInstance.instance.lastScrollLeft;
            this.dfs.updateProperty('scrollInfo', { y: lst, x: lsl });
        }
        else {
            this.dfs.updateProperty('scrollInfo', { y: 0, x: 0 });
        }
        if (this.pagination) {
            this.dfs.setPagination(this.pageIndex, this.pageSize, this.total);
            this.updatePagerOptions();
            this.cd.detectChanges();
        }
        // 重新加载数据时，移除所有编辑列
        // this.closeAllCellEditor();
        this.data = data;
        if (keepSortState) {
            if (this.remoteSort) {
                this.dfs.loadData(data);
            }
            else {
                this.dfs.loadData(data, true, true);
            }
        }
        else {
            this.dfs.loadData(data);
        }
        this.setPagerHeight();
        this.dgs.dataSourceChanged();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadVirtualData(data) {
        if (this.groupRows) {
            console.warn('if you using GROUPROWS, please set [virtualized]="false" [virtualizedAsyncLoad]="false"');
            return;
        }
        if (this.virtualizedAsyncLoad) {
            this.dgs.onLoadVirtualData(data);
        }
    }
    /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @return {?}
     */
    fetchData(pageIndex, pageSize) {
        if (this.restService) {
            this.showLoading();
            /** @type {?} */
            const params = { pageIndex, pageSize };
            if (this.sortName) {
                params['sortName'] = this.sortName;
            }
            if (this.sortOrder) {
                params['sortOrder'] = this.sortOrder;
            }
            return this.restService.getData(this.url, params);
        }
        return of(undefined);
    }
    /**
     * @return {?}
     */
    refresh() {
        this.dfs.refresh();
    }
    /**
     * @return {?}
     */
    reload() {
        this.fetchData(1, this.pageSize).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res) {
                this.pageIndex = 1;
                this.total = res.total;
                this.loadData(res.items);
            }
        }));
    }
    /**
     * 获取当前页数据
     * @return {?}
     */
    getRows() {
        if (this.groupRows || this.virtualized) {
            if (this.pagerOnServer) {
                return this.ds.rows;
            }
            else {
                return this.currentPagerData;
            }
        }
        else {
            if (this.pagerOnServer) {
                return this.data;
            }
            else {
                return this.currentPagerData;
            }
        }
    }
    //#endregion
    //#region Pagination
    /**
     * @param {?} pageIndex
     * @param {?=} detectChanges
     * @return {?}
     */
    setPageIndex(pageIndex, detectChanges = true) {
        this.pageIndex = pageIndex;
        this.pagerOpts.currentPage = pageIndex;
        if (detectChanges) {
            this.cd.detectChanges();
        }
    }
    // 更新每页
    /**
     * @param {?} pageList
     * @param {?=} detectChanges
     * @return {?}
     */
    setPageList(pageList, detectChanges = true) {
        this.pageList = pageList;
        this.pagerOpts.pageList = pageList;
        if (detectChanges) {
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} pageIndex
     * @return {?}
     */
    onPageChange(pageIndex) {
        if (this.lockPagination) {
            return;
        }
        if (this.controlPaginationState) {
            this.setPageIndex(pageIndex, false);
        }
        this.fetchData(pageIndex, this.pageSize).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res) {
                this.loadData(res.items);
            }
        }));
        this.focusRowIndex = -1;
        this.scrollToTop();
        this.pageChanged.emit({ pageIndex, pageSize: this.pageSize });
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    onPageSizeChange(pageSize) {
        if (this.lockPagination) {
            return;
        }
        this.focusRowIndex = -1;
        this.scrollToTop();
        this.pageSize = pageSize;
        this.pagerOpts.itemsPerPage = pageSize;
        this.fetchData(1, pageSize).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res) {
                this.pageIndex = 1;
                this.loadData(res.items);
            }
        }));
        this.pageSizeChanged.emit({ pageSize, pageIndex: this.pageIndex });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    onRemoveSelectedItem(id) {
        if (this.dfs.findRowIndex(id) > -1) {
            this.unCheckRow(id);
            this.cd.detectChanges();
        }
        else {
            this.unCheckRow(id, false);
            this.checkValues = this.checkeds.map((/**
             * @param {?} r
             * @return {?}
             */
            r => r.id));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClearSelectedItem($event) {
        // this.clearAll();
        if (this.selectOnCheck) {
            this.selectValue = '';
        }
        this.clearCheckeds(true);
    }
    //#endregion
    //#region Loading
    /**
     * @return {?}
     */
    showLoading() {
        this.loading = true;
        this.cd.detectChanges();
    }
    /**
     * @param {?=} detectChanges
     * @return {?}
     */
    closeLoading(detectChanges = true) {
        this.loading = false;
        if (detectChanges) {
            this.cd.detectChanges();
        }
    }
    //#endregion
    //#region Dom
    /**
     * @private
     * @param {?} strNum
     * @return {?}
     */
    replacePX2Empty(strNum) {
        if (strNum) {
            return Number.parseInt(strNum.replace('px', ''), 10);
        }
        return 0;
    }
    /**
     * @param {?} cls
     * @param {?} dom
     * @return {?}
     */
    renderCustomCls(cls, dom) {
        if (cls) {
            if (cls[0] === '!') {
                /** @type {?} */
                const _cls = cls.slice(1).split(' ').filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c));
                _cls.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    if (c) {
                        this.render2.removeClass(dom, c);
                    }
                }));
            }
            else {
                cls.split(' ').filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c)).forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    if (c) {
                        this.render2.addClass(dom, c);
                    }
                }));
            }
        }
    }
    /**
     * @param {?} cs
     * @param {?} dom
     * @param {?=} cssRuleText
     * @return {?}
     */
    renderCustomStyle(cs, dom, cssRuleText = null) {
        if (!cs) {
            return;
        }
        if (cs.cls) {
            this.renderCustomCls(cs.cls, dom);
        }
        if (cs.style) {
            if (!cssRuleText) {
                cssRuleText = `${this.customStyleKey()} #${dom.id} ${JSON.stringify(cs.style)}`;
            }
            this.dgs.appendCssRules([cssRuleText]);
        }
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getBoundingClientRect(el) {
        return el.nativeElement.getBoundingClientRect();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getElementPadding(el) {
        /** @type {?} */
        const style = getComputedStyle(el);
        return {
            top: this.replacePX2Empty(style.paddingTop),
            left: this.replacePX2Empty(style.paddingLeft),
            bottom: this.replacePX2Empty(style.paddingBottom),
            right: this.replacePX2Empty(style.paddingRight)
        };
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getElementBorderWidth(el) {
        /** @type {?} */
        const style = getComputedStyle(el);
        return {
            top: this.replacePX2Empty(style.borderTopWidth),
            bottom: this.replacePX2Empty(style.borderBottomWidth),
            right: this.replacePX2Empty(style.borderRightWidth),
            left: this.replacePX2Empty(style.borderLeftWidth)
        };
    }
    /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    formatData(field, data, formatter) {
        /** @type {?} */
        const value = this.getFieldValue(field, data);
        return this.colFormatSer.format(value, data, formatter);
    }
    /**
     * @param {?} field
     * @param {?} rowData
     * @return {?}
     */
    getFieldValue(field, rowData) {
        return Utils.getValue(field, rowData);
    }
    //#endregion
    //#region Select
    /**
     * @private
     * @return {?}
     */
    canOperateCheckbox() {
        return this.multiSelect && this.showCheckbox;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} dir
     * @return {?}
     */
    findNextCell(field, dir) {
        /** @type {?} */
        let td = null;
        if (this.currentCell && this.currentCell.cellElement) {
            /** @type {?} */
            const fixed = this.dfs.getColumn(field).fixed || '';
            /** @type {?} */
            let cellIndex = this.dfs.getColumnIndex(field, fixed);
            if (fixed === 'left') {
                if (this.showCheckbox) {
                    cellIndex += 1;
                }
                if (this.showLineNumber) {
                    cellIndex += 1;
                }
            }
            /** @type {?} */
            const currCellEl = this.currentCell.cellElement;
            if (dir === 'up') {
                /** @type {?} */
                const prevTr = this.dgs.findNextTr(currCellEl.parentElement.previousElementSibling, 'up');
                if (prevTr) {
                    td = prevTr.children[cellIndex];
                }
            }
            else if (dir === 'down') {
                /** @type {?} */
                const nextTr = this.dgs.findNextTr(currCellEl.parentElement.nextElementSibling, 'down');
                if (nextTr) {
                    td = nextTr.children[cellIndex];
                }
            }
            else if (dir === 'left') {
                td = currCellEl.previousElementSibling;
            }
            else if (dir === 'right') {
                td = currCellEl.nextElementSibling;
            }
        }
        return td;
    }
    /**
     * @param {?} dir
     * @param {?} event
     * @return {?}
     */
    selectNextCell(dir, event) {
        /** @type {?} */
        const nextTd = this.findNextCell(this.currentCell.field, dir);
        if (dir === 'up' && !nextTd) {
            return;
        }
        if (nextTd) {
            if (event['code'] === 'Tab' && this.editable && this.editcellWhenTabKeydwon) {
                nextTd['click'].apply(nextTd, [event]);
            }
            else {
                nextTd['selectCell'](event, nextTd);
            }
            // nextTd['selectCell'](event, nextTd);
            return nextTd;
        }
        else {
            /** @type {?} */
            const tr = this.currentCell.cellElement.parentElement;
            /** @type {?} */
            let _next = tr.nextElementSibling;
            if (dir === 'left') {
                _next = tr.previousElementSibling;
            }
            /** @type {?} */
            const nextTr = this.dgs.findNextTr(_next, dir === 'left' ? 'up' : 'down');
            if (nextTr && nextTr.tagName === 'TR') {
                // nextTr.children.find(td => td.editCell).editCell();
                /** @type {?} */
                let firstEditor = false;
                /** @type {?} */
                let i = 0;
                // while (!firstEditor) {
                //     firstEditor = !!nextTr.children[i].editCell;
                //     if (!firstEditor) {
                //         i++;
                //     }
                // }
                nextTr.children[i].selectCell(event, nextTr.children[i]);
            }
        }
    }
    /**
     * @return {?}
     */
    selectNextRow() {
        if (this.selectedRow) {
            /** @type {?} */
            const tr = this.selectedRow.dr.el.nativeElement;
            if (tr.nextElementSibling) {
                tr.nextElementSibling.click();
            }
        }
    }
    /**
     * @return {?}
     */
    selectPrevRow() {
        if (this.selectedRow) {
            /** @type {?} */
            const tr = this.selectedRow.dr.el.nativeElement;
            if (tr.previousElementSibling) {
                tr.previousElementSibling.click();
            }
        }
    }
    /**
     * @return {?}
     */
    removeCellSelectedCls() {
        /** @type {?} */
        const selectedCell = this.el.nativeElement.querySelectorAll('.' + CELL_SELECTED_CLS);
        if (selectedCell.length) {
            selectedCell.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.render2.removeClass(n, CELL_SELECTED_CLS);
            }));
        }
    }
    /**
     * 选中行
     * @param {?} id 选中行ID
     * @param {?=} emit 触发select 事件
     * @param {?=} toCurrentPosition 滚动条定位到当前选择中行
     * @return {?}
     */
    selectRow(id, emit = true, toCurrentPosition = false) {
        this.removeCellSelectedCls();
        if (!this.multiSelect && this.showCheckbox) {
            this.clearCheckeds(false, false);
        }
        if (this.selectionMode === 'default') {
            this.clearAll();
        }
        if (id && (!this.selectedRow || this.selectedRow.id != id)) {
            /** @type {?} */
            const row = this.dfs.findRow(id);
            if (row && this.disableRow) {
                if (this.disableRow(row.data, row.index)) {
                    return;
                }
            }
            if (emit) {
                this.dfs.selectRecord(id);
            }
            else {
                this.dfs.setSelectRow(id);
                this.selectedRow = this.dfs.getCurrentRow();
                if (this.checkOnSelect) {
                    this.checkRows([id]);
                }
                this.dgs.setSelecedRow.emit({ id, selected: true });
            }
        }
        else {
            if (this.checkOnSelect) {
                this.checkRows([id]);
            }
        }
        if (toCurrentPosition) {
            this.scrollToCurrentRow();
        }
    }
    /**
     * 滚动条滚动到当前行的位置
     * @return {?}
     */
    scrollToCurrentRow() {
        this.dgs.scrollToCurrentRow.next();
    }
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    unSelectRow(id, emit = true) {
        if (id) {
            this.closeAllCellEditor();
            if (this.currentCell && this.currentCell.rowId == id) {
                this.cancelSelectCell();
            }
            if (emit) {
                this.dfs.selectRecord(id, false);
            }
            else {
                this.dfs.setSelectRow(id, false);
                this.selectedRow = null;
                this.dgs.setSelecedRow.emit({ id, selected: false });
            }
        }
    }
    /**
     * @return {?}
     */
    selectAllRows() {
        if (this.multiSelect) {
            this.dfs.selectAll();
        }
    }
    /**
     * @return {?}
     */
    cancelSelectCell() {
        if (this.currentCell) {
            this.currentCell.cellElement.cancelSelected();
            if (!this.currentCell.isEditing) {
                this.currentCell = null;
                this.dfs.cancelSelectCell();
            }
        }
    }
    /**
     * @param {?=} excludeIds
     * @return {?}
     */
    clearSelections(excludeIds) {
        this.dfs.clearSelections(excludeIds);
        this.selectedRow = null;
        this.cancelSelectCell();
        this.cd.detectChanges();
    }
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    checkRow(id, emit = true) {
        if (this.canOperateCheckbox()) {
            if (emit) {
                this.dfs.checkRecord(id);
            }
            else {
                this.checkRows([id]);
            }
        }
    }
    /**
     * 钩选行，不触发选中事件
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    checkRows(ids, emit = false) {
        if (ids && ids.length) {
            this.dfs.setCheckedRows(ids, true);
            this.dgs.setCheckedRows.next({ ids, checked: true });
            if (this.selectionMode === 'default') {
                this.dfs.updateProperty('selections', this.checkeds);
            }
            // this.cd.detectChanges();
            if (emit) {
                this.checkValues = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.id));
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
            }
        }
    }
    /**
     * 取消钩选，不触发选中事件
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    unCheckRows(ids, emit = false) {
        if (ids && ids.length) {
            this.dfs.setCheckedRows(ids, false);
            this.dgs.setCheckedRows.next({ ids, checked: false });
            // this.cd.detectChanges();
            if (emit) {
                this.checkValues = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.id));
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
            }
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    checkAllRows(emit = true) {
        if (this.canOperateCheckbox()) {
            this.dfs.checkAll();
            this.dgs.checkAll.emit();
            if (emit) {
                this.checkAll.emit();
            }
        }
    }
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    unCheckRow(id, emit = true) {
        if (this.canOperateCheckbox()) {
            if (this.currentCell && this.currentCell.rowId == id) {
                this.cancelSelectCell();
            }
            if (emit) {
                this.dfs.checkRecord(id, false);
            }
            else {
                this.unCheckRows([id]);
            }
        }
    }
    /**
     * 清空钩选行，默认只清空当前页的钩选
     * clearAll: 清空所有 默认为 false; 否则仅清空当前页的钩选数据。
     * @param {?=} clearAll
     * @param {?=} emitUnCheckAll
     * @return {?}
     */
    clearCheckeds(clearAll = false, emitUnCheckAll = true) {
        this.dfs.clearCheckeds(clearAll);
        this.checkValues = [];
        this.cancelSelectCell();
        if (emitUnCheckAll) {
            this.dgs.uncheckAll.emit();
        }
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.dfs.clearAll();
        this.checkValues = [];
        this.dgs.uncheckAll.emit();
    }
    //#endregion
    //#region Resize Column
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    getResizeProxyPosLeft(e) {
        /** @type {?} */
        const target = (/** @type {?} */ (e.target));
        /** @type {?} */
        const dgRect = this.getBoundingClientRect(this.dgContainer);
        /** @type {?} */
        const td = target.parentElement;
        /** @type {?} */
        const tdLeft = td.getBoundingClientRect().left;
        /** @type {?} */
        const deltaEdge = td.offsetWidth - (e.pageX - tdLeft);
        this.resizeColumnInfo.proxyLineEdge = deltaEdge;
        this.resizeColumnInfo.startWidth = td.offsetWidth;
        this.resizeColumnInfo.startX = e.pageX;
        this.resizeColumnInfo.left = tdLeft - dgRect.left - 1 + deltaEdge;
        return e.pageX - dgRect.left - 1 + deltaEdge;
    }
    /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    toggleResizeProxy(show = true) {
        /** @type {?} */
        let display = 'block';
        if (!show) {
            display = 'none';
        }
        this.render2.setStyle(this.resizeProxyBg.nativeElement, 'display', display);
        this.render2.setStyle(this.resizeProxy.nativeElement, 'display', display);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onColumnResizeBegin(e) {
        if (this.resizeProxy) {
            this.render2.setStyle(document.body, 'cursor', 'e-resize');
            /** @type {?} */
            const proxy = this.resizeProxy.nativeElement;
            /** @type {?} */
            const proxyPosLeft = this.getResizeProxyPosLeft(e);
            this.render2.setStyle(proxy, 'left', proxyPosLeft + 'px');
            /** @type {?} */
            let top = 0;
            if ((this.enableFilterRow || this.enableSmartFilter) && this.showFilterBar) {
                top += this.filterBarHeight;
            }
            if (this.showRowGroupPanel) {
                top += this.rowGroupPanelHeight;
            }
            this.render2.setStyle(proxy, 'top', `${top}px`);
            if (!this.autoHeight) {
                this.render2.setStyle(proxy, 'height', (this.height - this.pagerHeight) + 'px');
            }
            else {
                /** @type {?} */
                let bottomH = 0;
                if (this.pagination) {
                    bottomH += this.pagerHeight;
                }
                if (this.showFooter) {
                    bottomH += this.footerHeight;
                }
                this.render2.setStyle(proxy, 'height', `calc(100% - ${bottomH}px)`);
            }
            this.toggleResizeProxy();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onColumnResize(e) {
        /** @type {?} */
        const proxy = this.resizeProxy.nativeElement;
        /** @type {?} */
        const dgRect = this.getBoundingClientRect(this.dgContainer);
        /** @type {?} */
        const proxyPosLeft = e.pageX - dgRect.left - 1 + this.resizeColumnInfo.proxyLineEdge;
        if (proxyPosLeft - this.resizeColumnInfo.left > 20) {
            this.render2.setStyle(proxy, 'left', proxyPosLeft + 'px');
        }
        else {
            this.render2.setStyle(proxy, 'left', (this.resizeColumnInfo.left + 20) + 'px');
        }
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @param {?} e
     * @param {?} col
     * @return {?}
     */
    onColumnResizeEnd(e, col) {
        this.render2.removeStyle(document.body, 'cursor');
        this.toggleResizeProxy(false);
        this.resizeColumnInfo.proxyLineEdge = 0;
        /** @type {?} */
        let newColWidth = this.resizeColumnInfo.startWidth + e.pageX - this.resizeColumnInfo.startX;
        if (newColWidth < 20) {
            newColWidth = 20;
        }
        if (col.width > newColWidth) {
            /** @type {?} */
            const t = col.width - newColWidth;
            if (!this.fitColumns && this.scrollInstance.elementRef.nativeElement.scrollLeft) {
                /** @type {?} */
                const moveLeft = this.scrollInstance.elementRef.nativeElement.scrollLeft - t;
                this.scrollInstance.scrollToX(moveLeft);
            }
        }
        col.width = newColWidth;
        if (this.useControlPanel && this.settingService) {
            this.settingService.saveUserConfig(this.id).subscribe((/**
             * @return {?}
             */
            () => {
                this.dfs.columnResizeEnd();
                this.dgs.columnResized.emit();
            }));
            return;
        }
        this.dfs.columnResizeEnd();
        this.dgs.columnResized.emit();
    }
    /**
     * 还原列宽
     * @return {?}
     */
    restituteColumnsSize() {
        this.dfs.resizeColumns(true);
        this.dgs.columnResized.emit();
    }
    /**
     * 单元格内容自适应列宽
     * @param {?} col
     * @param {?} th
     * @return {?}
     */
    sizeToContent(col, th) {
        if (!this.AutoColumnWidthUseDblclick) {
            return false;
        }
        /** @type {?} */
        let longestText = '';
        /** @type {?} */
        const items = this.data;
        for (let i = items.length - 1; i >= 0; i--) {
            // TFS: 356964 20200203
            /** @type {?} */
            let value = Utils.getValue(col.field, items[i]);
            if (value !== 0) {
                value = value || '';
            }
            /** @type {?} */
            let text = '' + value;
            if (col.formatter && value !== undefined) {
                text = this.colFormatSer.format(value, items[i], col.formatter);
            }
            if (Utils.getBLen(text) > Utils.getBLen(longestText)) {
                longestText = text;
            }
            else {
                this.longTextArea.nativeElement.innerHTML = text;
                /** @type {?} */
                const w1 = this.longTextArea.nativeElement.offsetWidth;
                this.longTextArea.nativeElement.innerHTML = longestText;
                /** @type {?} */
                const w2 = this.longTextArea.nativeElement.offsetWidth;
                if (w1 > w2) {
                    longestText = text;
                }
            }
        }
        this.longTextArea.nativeElement.innerHTML = longestText;
        /** @type {?} */
        const maxWidth = this.longTextArea.nativeElement.offsetWidth + 26;
        this.longTextArea.nativeElement.innerHTML = th.nativeElement.innerText;
        /** @type {?} */
        let thMinWidth = this.longTextArea.nativeElement.offsetWidth + 26;
        if (col.sortable) {
            thMinWidth += 24;
        }
        col.width = (maxWidth > thMinWidth ? maxWidth : thMinWidth);
        /** @type {?} */
        const colIndex = this.flatColumns.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field === col.field));
        if (colIndex === this.flatColumns.length - 1) {
            col.width += 6;
        }
        this.dfs.resizeColumns();
        this.dgs.columnResized.emit();
    }
    //#endregion
    //#region Changes
    /**
     * @return {?}
     */
    getChanges() {
        return this.dfs.getChanges();
    }
    /**
     * @return {?}
     */
    acceptChanges() {
        this.dfs.acceptChanges();
    }
    /**
     * @return {?}
     */
    rejectChanges() {
        this.dfs.rejectChanges();
    }
    //#endregion
    //#region CRUD
    /**
     * @param {?} row
     * @return {?}
     */
    appendRow(row) {
        this.cancelEdit(null);
        this.dfs.appendRow(row);
        this.dataChange.emit(this.dfs.getData());
        this.rowAppended.emit();
    }
    /**
     * @param {?} rowId
     * @param {?} newData
     * @return {?}
     */
    updateRow(rowId, newData) {
        this.dfs.updateRow(rowId, newData);
        this.dataChange.emit(this.dfs.getData());
        this.rowUpdated.emit();
    }
    /**
     * @param {?} rowId
     * @return {?}
     */
    refreshRow(rowId) {
        /** @type {?} */
        const row = this.dfs.findRow(rowId);
        if (row && row.data) {
            this.dfs.rowUpdate$.emit(row);
        }
        else {
            console.warn('Can not found row by id. id: ' + rowId);
        }
    }
    /**
     * @param {?=} rowId
     * @return {?}
     */
    deleteRow(rowId) {
        this.cancelEdit(rowId, false);
        if (!rowId) {
            if (this.selectValue) {
                rowId = this.selectValue;
            }
            else {
                throw new Error(`删除行时主键标识ID 不能为空。`);
            }
        }
        /** @type {?} */
        const deleteRow = this.dfs.deleteRow(rowId);
        this.dataChange.emit(this.dfs.getData());
        this.currentCell = null;
        this.dfs.updateProperty('currentCell', null);
        this.cd.detectChanges();
        this.rowDeleted.emit(deleteRow);
    }
    /**
     * @return {?}
     */
    validateRow() { }
    /**
     * @return {?}
     */
    insertRow() { }
    //#endregion
    //#region Scrolling
    /**
     * @return {?}
     */
    scrollToLeft() {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToLeft(0, 200);
        }
    }
    /**
     * @return {?}
     */
    scrollToRight() {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToRight(0, 200);
        }
    }
    /**
     * @return {?}
     */
    scrollToTop() {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToTop(0, 100);
            this.dfs.updateProperty('scrollInfo', { y: 0, x: 0 });
        }
    }
    /**
     * @return {?}
     */
    scrollToBottom() {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToBottom(0, 100);
        }
    }
    //#endregion
    /**
     * @private
     * @param {?} cols
     * @param {?} field
     * @param {?=} readonly
     * @return {?}
     */
    _setColumnReadonly(cols, field, readonly = true) {
        if (cols && cols.length && field) {
            /** @type {?} */
            const col = cols.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === field));
            if (col) {
                col.readonly = readonly;
            }
        }
    }
    /**
     * @param {?} field
     * @param {?=} readonly
     * @return {?}
     */
    setColumnReadonly(field, readonly = true) {
        this._setColumnReadonly(this.colGroup.leftFixed, field, readonly);
        this._setColumnReadonly(this.colGroup.rightFixed, field, readonly);
        this._setColumnReadonly(this.colGroup.normalColumns, field, readonly);
    }
    // 是否为多表头
    /**
     * @return {?}
     */
    isMultiHeader() {
        return this.columns && this.columns.length > 1 && Array.isArray(this.columns[1]);
    }
    /**
     * @param {?} fields
     * @param {?=} visible
     * @return {?}
     */
    toggleVisibleColumn(fields, visible = true) {
        if (!this.isMultiHeader()) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            (cols) => {
                fields.forEach((/**
                 * @param {?} field
                 * @return {?}
                 */
                field => {
                    /** @type {?} */
                    const col = cols.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.field === field || c.id === field));
                    if (col) {
                        col.visible = visible;
                    }
                }));
            }));
        }
        else {
            // 多表头
            /** @type {?} */
            const allCols = flatten(this.columns);
            allCols.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                if (p.origianlColSpan === undefined) {
                    p.origianlColSpan = p.colspan;
                }
            }));
            fields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                /** @type {?} */
                const _col = allCols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.field === field || col.id === field));
                if (_col) {
                    if (_col.visible === visible) {
                        return;
                    }
                    _col.visible = visible;
                    /** @type {?} */
                    const parents = DatagridColumnsHelper.getParentColumns(_col, allCols);
                    /** @type {?} */
                    const childs = DatagridColumnsHelper.getChildColumns(_col, allCols);
                    childs.forEach((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => {
                        c.visible = visible;
                    }));
                    if (visible && childs.length) {
                        _col.colspan = _col.origianlColSpan;
                    }
                    /** @type {?} */
                    const _colspan = _col.colspan || 1;
                    parents.forEach((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => {
                        if (!visible) {
                            p.colspan = p.colspan - _colspan;
                        }
                        else {
                            /** @type {?} */
                            const _childs = allCols.filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.parentId === p.id && n.visible));
                            p.colspan = _childs.reduce((/**
                             * @param {?} r
                             * @param {?} c
                             * @return {?}
                             */
                            (r, c) => {
                                r = r + (c.colspan || 1);
                                return r;
                            }), 0);
                        }
                        p.visible = !!p.colspan;
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getColumn(field) {
        /** @type {?} */
        const allCols = flatten(this.columns);
        return allCols.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === field || n.id === field));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    showColumn(field) {
        if (typeof field === 'string') {
            this.toggleVisibleColumn([field], true);
        }
        else {
            this.toggleVisibleColumn(field, true);
        }
        this.columnsChanged();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    hideColumn(field) {
        if (typeof field === 'string') {
            this.toggleVisibleColumn([field], false);
        }
        else {
            this.toggleVisibleColumn(field, false);
        }
        this.columnsChanged();
    }
    /**
     * @param {?} field
     * @param {?} columnObject
     * @param {?=} detectChange
     * @return {?}
     */
    updateColumn(field, columnObject, detectChange = true) {
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            /** @type {?} */
            let column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === field));
            if (column) {
                column = Object.assign(column, columnObject);
            }
        }));
        if (detectChange) {
            this.columnsChanged();
        }
    }
    /**
     * @param {?} field
     * @param {?} formatter
     * @return {?}
     */
    setColumnFormatter(field, formatter) {
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            /** @type {?} */
            const column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === field));
            if (column) {
                column.formatter = formatter;
            }
        }));
        this.columnsChanged();
    }
    /**
     * @param {?} field
     * @param {?} formatterOptions
     * @return {?}
     */
    updateColumnFormatterOptions(field, formatterOptions) {
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            /** @type {?} */
            const column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === field));
            if (column && column.formatter) {
                /** @type {?} */
                const colFormatter = (/** @type {?} */ (column.formatter));
                colFormatter.options = colFormatter.options || {};
                colFormatter.options = Object.assign(colFormatter.options, formatterOptions || {});
            }
        }));
        this.columnsChanged();
    }
    /**
     * @param {?} field
     * @param {?} title
     * @return {?}
     */
    setColumnTitle(field, title) {
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            /** @type {?} */
            const column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === field));
            if (column) {
                column.title = title;
            }
        }));
        this.columnsChanged();
    }
    /**
     * 排序
     * @param {?=} sortName 排序字段，如： 'name,age'
     * @param {?=} sortOrder 排序方式，如：'desc, asc'
     * @return {?}
     */
    sort(sortName, sortOrder) {
        if (sortName === null || sortName === '' || sortOrder === null || sortOrder === '') {
            this.clearSort();
        }
        else {
            if (sortName && sortOrder) {
                // this.updateSortInfo(sortName, sortOrder);
                this.sortName = sortName;
                this.sortOrder = sortOrder;
                this.dfs.setSortInfo(this.sortName, this.sortOrder);
            }
            if (!this.remoteSort) {
                this.dfs.clientSort();
            }
            this.onColumnSorted();
        }
    }
    /**
     * @return {?}
     */
    clearSort() {
        this.sortName = '';
        this.sortOrder = '';
        this.dfs.setSortInfo('', '');
        if (!this.remoteSort) {
            if (this.data && this.data.length) {
                this.dfs.clearSort();
            }
        }
        this.onColumnSorted();
    }
    /**
     * @return {?}
     */
    onColumnSorted() {
        /** @type {?} */
        let params = null;
        if (this.sortName && this.sortOrder) {
            /** @type {?} */
            const orders = this.sortOrder.split(',');
            params = this.sortName.split(',').reduce((/**
             * @param {?} r
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (r, n, i) => {
                r[n] = orders[i] || 'asc';
                return r;
            }), {});
        }
        if (!this.remoteSort) {
            this.dfs.clientSort();
        }
        this.columnSorted.emit(params);
    }
    /**
     * @param {?} newSortName
     * @param {?} newSortOrder
     * @return {?}
     */
    updateSortInfo(newSortName, newSortOrder) {
        /** @type {?} */
        const sortName = this.sortName;
        /** @type {?} */
        const sortOrder = this.sortOrder;
        /** @type {?} */
        let sortFields = [];
        /** @type {?} */
        let sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        const _sortFields = newSortName.split(',');
        /** @type {?} */
        const _sortOrders = newSortOrder.split(',');
        _sortFields.forEach((/**
         * @param {?} nField
         * @param {?} nIndex
         * @return {?}
         */
        (nField, nIndex) => {
            /** @type {?} */
            const colOrder = _sortOrders[nIndex] || 'asc';
            /** @type {?} */
            let newOrder = colOrder;
            /** @type {?} */
            const i = sortFields.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n === nField));
            if (i >= 0) {
                /** @type {?} */
                const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
                newOrder = _order;
                if (this.multiSort && newOrder === 'asc') {
                    newOrder = undefined;
                    sortFields.splice(i, 1);
                    sortOrders.splice(i, 1);
                }
                else {
                    sortOrders[i] = _order;
                }
            }
            else {
                if (this.multiSort) {
                    sortFields.push(nField);
                    sortOrders.push(colOrder);
                }
                else {
                    sortFields = [nField];
                    sortOrders = [colOrder];
                }
            }
        }));
        this.sortName = sortFields.join(',');
        this.sortOrder = sortOrders.join(',');
    }
    /**
     * 列设置
     * @param {?} $event
     * @return {?}
     */
    showControlPanel($event) {
        $event.stopPropagation();
        /** @type {?} */
        const self = this;
        if (this.useControlPanel && this.settingService) {
            if (!this.settingService.httpRestService) {
                /** @type {?} */
                const settingsHttp = this.inject.get(GRID_SETTINGS_HTTP, null);
                this.settingService.httpRestService = settingsHttp;
            }
            this.settingService.show(self);
        }
    }
    /**
     * @param {?=} flag
     * @return {?}
     */
    disableHeader(flag = true) {
        this.dgs.disableHeader.emit(flag);
    }
    /**
     * 获取用户个性化设置
     * @private
     * @param {?} settings
     * @return {?}
     */
    userProfileSetting(settings) {
        const { sortInfo, viewColumns, groupField, columnFormat } = settings;
        const { sortName, sortOrder } = sortInfo;
        if (sortInfo) {
            if (sortName && sortName.length) {
                this.sortName = sortName.join(',');
                if (sortOrder) {
                    this.sortOrder = sortOrder.join(',');
                }
            }
            this['__sortInfo'] = sortInfo;
        }
        if (viewColumns && viewColumns.length) {
            this.columns = this.columns.map((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                this.settingService.updateColumnFormat(cols, columnFormat, this);
                return this.settingService.newVisibleOrderColumns(cols, viewColumns, columnFormat);
            }));
            this.addControlCol();
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                cols.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => {
                    if (sortName && sortName.length) {
                        /** @type {?} */
                        const i = sortName.indexOf(col.field);
                        if (i > -1) {
                            col.order = sortOrder[i];
                        }
                    }
                }));
            }));
        }
        if (this.groupRows && groupField) {
            this.groupField = groupField;
        }
    }
    // 是否为当前活动的表格
    /**
     * @private
     * @return {?}
     */
    isActived() {
        return DomHandler.hasClass(this.dgContainer.nativeElement, this._active_datagrid_cls);
    }
    // 清理无效的DOM
    /**
     * @private
     * @return {?}
     */
    cleanDom() {
        // 清理 TOOL-TIP
        /** @type {?} */
        const tips = document.querySelectorAll('.datagrid-cell-tooltip');
        if (tips && tips.length) {
            tips.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n.remove();
            }));
        }
    }
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    cellIsReadOnly(col, rowData) {
        /** @type {?} */
        let readOnly = false;
        if (this.disableRow) {
            readOnly = this.disableRow(rowData);
        }
        if (!readOnly) {
            if (col.readonly !== undefined) {
                if (typeof col.readonly === 'boolean') {
                    readOnly = col.readonly;
                }
                else if (typeof col.readonly === 'function') {
                    readOnly = col.readonly(rowData);
                }
            }
        }
        return readOnly;
    }
    /**
     * @private
     * @return {?}
     */
    groupFieldChanged() {
        this.columnsChanged();
        if (this.settingService) {
            this.settingService.saveUserConfig(this.id).subscribe();
        }
        this.groupFieldChange.emit({ newGroupField: this.groupField, grid: this });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    removeGroupField(field) {
        /** @type {?} */
        const fields = this.groupField.split(',');
        /** @type {?} */
        const delIdx = fields.indexOf(field);
        if (delIdx > -1) {
            fields.splice(delIdx, 1).join(',');
        }
        this.groupField = fields.join(',');
        this.toggleVisibleColumn([field], true);
        this.groupFieldChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clearAllGrouppingField($event) {
        this.showLoading();
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const fields = this.groupField.split(',');
            this.groupField = '';
            this.toggleVisibleColumn(fields, true);
            this.groupFieldChanged();
            this.closeLoading();
        }));
    }
    /**
     * @param {?} groupFields
     * @return {?}
     */
    setGroupFields(groupFields) {
        this.groupField = groupFields;
        this.columnsChanged();
    }
    /**
     * @param {?=} active
     * @return {?}
     */
    activeDataGrid(active = true) {
        /** @type {?} */
        const grids = document.querySelectorAll('.f-datagrid.datagrid-active');
        if (grids.length) {
            grids.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.render2.removeClass(n, this._active_datagrid_cls);
            }));
        }
        if (active) {
            this.render2.addClass(this.dgContainer.nativeElement, this._active_datagrid_cls);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDatagridContainerFocus($event) {
        if (!this.disabled) {
            this.activeDataGrid();
        }
    }
}
DatagridComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-datagrid',
                template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-10 11:02:50\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-18 15:48:39\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n<div #datagridContainer class=\"f-datagrid\" \r\n    [class.f-datagrid-rowhover]=\"rowHover\"\r\n    [class.f-datagrid-bordered]=\"showBorder\"\r\n    [class.f-datagrid-wrap]=\"!nowrap\"\r\n    [class.f-datagrid-strip]=\"striped\"\r\n    [class.f-datagrid-mergecell]=\"mergeCell\"\r\n    [class.f-datagrid-enable-highlight]=\"enableHighlightCell\"\r\n    [class.highlight-allowedit-cell]=\"enableEditCellStyle && editable\"\r\n    [class.scrollbar-allways-show]=\"scrollBarShowMode === 'allways'\"\r\n    [class.f-datagrid-sm]=\"sizeType === 'sm'\" [class.f-datagrid-lg]=\"sizeType === 'lg'\" [class.f-datagrid-xl]=\"sizeType === 'xl'\"\r\n    [ngStyle]=\"gridSize\" tabindex=\"0\" style=\"outline: 0;\" hidefocus=\"true\" [attr.id]=\"id\"\r\n    *ngIf=\"!useHtmlTable\" (focus)=\"onDatagridContainerFocus($event)\">\r\n    <div class=\"f-datagrid-column-drop-panel d-flex flex-row\"\r\n        [style.height.px]=\"rowGroupPanelHeight\"\r\n        [style.top.px]=\"showFilterBar ? (filterBarHeight): 0\"\r\n        [attr.placeholder]=\"groupField ? '': groupRowPanelPlaceholder\"\r\n        [style.pointer-events]=\"editable ? 'none': ''\"\r\n        *ngIf=\"showRowGroupPanel\">\r\n        <div class=\"row-group-fields flex-fill\" drop-column style=\"display: inline-block!important;\">\r\n            <div class=\"group-field smooth-dnd-draggable-wrapper\" *ngFor=\"let f of groupFields$ | async\">{{ dfs.getColumn(f)?.title }}\r\n                <span class=\"f-icon f-icon-x\" title=\"{{ 'datagrid.groupRow.removeColumn'| locale }}\" (click)=\"removeGroupField(f)\"></span>\r\n            </div>\r\n        </div>\r\n        <button class=\"f-datagrid-clear-group-field btn btn-light ml-auto\"\r\n        title=\"{{'datagrid.groupRow.clearTip' | locale}}\" (click)=\"clearAllGrouppingField($event)\" [style.display]=\"groupField ? '' : 'none'\">\r\n            <span class=\"f-icon f-icon-remove\"></span> {{'datagrid.groupRow.clear' | locale}}\r\n        </button>\r\n    </div>\r\n    \r\n    <filter-toolbar #filterText *ngIf=\"enableFilterRow && showFilterBar\"></filter-toolbar>\r\n    <smart-filter-toolbar #smartfiltertoolbar *ngIf=\"enableSmartFilter && showFilterBar\"\r\n    [height]=\"filterBarHeight\"\r\n    [filterData]=\"smartFilterResult?.controlData || []\" \r\n    (clearFilters)=\"onClearSmartFilters($event)\"\r\n    (removeFilter)=\"onRemoveSmartFilterItem($event)\"\r\n    [padding]=\"showBorder && filterBarHeight ? '3px': ''\"\r\n    (resize)=\"onFilterBarResize($event)\"\r\n    (filterChange)=\"onSmartFilterChange($event)\"></smart-filter-toolbar>\r\n\r\n    <datagrid-header class=\"d-flex flex-fill\" *ngIf=\"showHeader\" #header\r\n    [columns]=\"columns\" [columnsGroup]=\"colGroup\" [height]=\"realHeaderHeight\"\r\n    [style.height.px]=\"realHeaderHeight\" style=\"position: relative;width:100%;\" \r\n    [enableDragColumn]=\"enableDragColumn\" [wrapHeader]=\"headerWrap\"\r\n    [enableFilterRow]=\"enableFilterRow\" [scrollbarMode]=\"scrollBarShowMode\"></datagrid-header>\r\n\r\n\r\n    <datagrid-footer [height]=\"footerHeight\" [width]=\"footerWidth\" [columnsGroup]=\"colGroup\" [position]=\"'top'\"\r\n    [columns]=\"colGroup?.normalColumns\" [data]=\"footerData | async\" *ngIf=\"(footerPosition==='top' || footerPosition === 'both') && showFooter && ((ds && ds.rows && ds.rows.length) || (footerData | async).length)\"></datagrid-footer>\r\n\r\n    <datagrid-body [columnsGroup]=\"colGroup\" [data]=\"ds.rows | paginate: pagerOpts\" (dataChange)=\"setCurrentPagerData($event)\"\r\n        [startRowIndex]=\"ds.index\" [checkedRows]=\"checkedRows\" cell-tooltip [canvasWidth]=\"colGroup?.totalWidth\"\r\n        [topHideHeight]=\"ds.top\" [bottomHideHeight]=\"ds.bottom\" [footerHeight]=\"footerHeight\"\r\n        [scrollBarMode]=\"scrollBarShowMode\" [contextMenuItems]=\"contextMenus\" ></datagrid-body>\r\n\r\n    <datagrid-footer [height]=\"footerHeight\" [width]=\"footerWidth\" [columnsGroup]=\"colGroup\" [position]=\"'bottom'\"\r\n                [columns]=\"colGroup?.normalColumns\" [data]=\"footerData | async\" \r\n                *ngIf=\"(footerPosition==='bottom' || footerPosition === 'both') && showFooter && ((ds && ds.rows && ds.rows.length) || (footerData | async).length)\"></datagrid-footer>\r\n    \r\n    <datagrid-pager *ngIf=\"pagination\" #dgPager \r\n        [showPageList]=\"showPageList\"\r\n        [id]=\"pagerOpts.id\" [locked]=\"lockPagination\"\r\n        [showPageInfo]=\"showPageInfo\"\r\n        [viewMode]=\"pagerViewMode\"\r\n        [showPageNumber] = \"showPageNumber\"\r\n        [maxSize]=\"pagerLabelSize\"\r\n        [showSelectedList]=\"showSelectedList && multiSelect\"\r\n        [selectedData]=\"checkedRows\"\r\n        [showGotoInput]=\"showGotoInput\"\r\n        (pageChange)=\"onPageChange($event)\"\r\n        (pageSizeChange)=\"onPageSizeChange($event)\"\r\n        (removeSelectedItem)=\"onRemoveSelectedItem($event)\"\r\n        (clearSelectedItem)=\"onClearSelectedItem($event)\"\r\n        [listItemFormatter]=\"selectedItemFormatter\"\r\n        ></datagrid-pager>\r\n\r\n    <div class=\"f-datagrid-resize-bg\" #resizeProxyBg></div>\r\n    <div #resizeProxy class=\"f-datagrid-resize-proxy\" *ngIf=\"resizeColumn\"></div>\r\n    \r\n    <datagrid-loading *ngIf=\"loading\"></datagrid-loading>\r\n    <div style=\"position: absolute; left: -1000px; top: -1000px;visibility: hidden;\" #longTextArea></div>\r\n    <div class=\"f-datagrid-disabled\" style=\"position: absolute;\r\n        background: #fff;\r\n        height: 100%;\r\n        width: 100%;\r\n        z-index: 99;\r\n        opacity: .3;\" *ngIf=\"disabled\">\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #datagridContainer\r\nclass=\"f-datagrid f-datagrid-htmltable\" [attr.id]=\"id\"\r\n[class.f-datagrid-rowhover]=\"rowHover\"\r\n[class.f-datagrid-bordered]=\"showBorder\"\r\n[class.f-datagrid-wrap]=\"!nowrap\"\r\n[class.f-datagrid-strip]=\"striped\" \r\n[class.f-datagrid-md]=\"sizeType === 'md'\"\r\n[class.f-datagrid-sm]=\"sizeType === 'sm'\" [class.f-datagrid-lg]=\"sizeType === 'lg'\" [class.f-datagrid-xl]=\"sizeType === 'xl'\"\r\n*ngIf=\"useHtmlTable\" style=\"border-right: 0px; border-bottom: 0px; overflow: auto\">\r\n\r\n    <auto-height [columnsGroup]=\"colGroup\" [columns]=\"columns\" [data]=\"ds.rows\"></auto-height>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    DatagridFacadeService,
                    DatagridService,
                    DatagridSmartFilterService
                ],
                exportAs: 'datagrid'
            }] }
];
/** @nocollapse */
DatagridComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Injector },
    { type: NgZone },
    { type: DatagridFacadeService },
    { type: DatagridService },
    { type: ApplicationRef },
    { type: DomSanitizer },
    { type: Renderer2 }
];
DatagridComponent.propDecorators = {
    pos: [{ type: HostBinding, args: ['style.position',] }],
    hostCls: [{ type: HostBinding, args: ['class.f-datagrid-full',] }],
    autoHeightCls: [{ type: HostBinding, args: ['class.f-datagrid-auto-height',] }],
    useThemes: [{ type: Input }],
    id: [{ type: Input }],
    useHtmlTable: [{ type: Input }],
    autoHeight: [{ type: Input }],
    showBorder: [{ type: Input }],
    striped: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    showHeader: [{ type: Input }],
    headerHeight: [{ type: Input }],
    headerWrap: [{ type: Input }],
    showFooter: [{ type: Input }],
    footerHeight: [{ type: Input }],
    footerDataFrom: [{ type: Input }],
    footerTemplate: [{ type: Input }],
    footerPosition: [{ type: Input }],
    footerStyler: [{ type: Input }],
    rowHeight: [{ type: Input }],
    sizeType: [{ type: Input }],
    fit: [{ type: Input }],
    fitColumns: [{ type: Input }],
    autoFitColumns: [{ type: Input }],
    disabled: [{ type: Input }],
    scrollBarShowMode: [{ type: Input }],
    scrollBarOptions: [{ type: Input }],
    resizeColumn: [{ type: Input }],
    showLineNumber: [{ type: Input }],
    lineNumberTitle: [{ type: Input }],
    lineNumberWidth: [{ type: Input }],
    rowHover: [{ type: Input }],
    clickToEdit: [{ type: Input }],
    lockPagination: [{ type: Input }],
    pagination: [{ type: Input }],
    pagerViewMode: [{ type: Input }],
    pagerOnServer: [{ type: Input }],
    pageList: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    pagerHeight: [{ type: Input }],
    showPageList: [{ type: Input }],
    showPageInfo: [{ type: Input }],
    showPageNumber: [{ type: Input }],
    pagerLabelSize: [{ type: Input }],
    showGotoInput: [{ type: Input }],
    enableMorePageSelect: [{ type: Input }],
    showSelectedList: [{ type: Input }],
    selectedItemFormatter: [{ type: Input }],
    cellTipTimer: [{ type: Input }],
    controlPaginationState: [{ type: Input }],
    total: [{ type: Input }],
    enableSelectRow: [{ type: Input }],
    multiSelect: [{ type: Input }],
    showCheckbox: [{ type: Input }],
    showAllCheckbox: [{ type: Input }],
    onlySelectSelf: [{ type: Input }],
    checkOnSelect: [{ type: Input }],
    selectOnCheck: [{ type: Input }],
    selectionMode: [{ type: Input }],
    keepSelect: [{ type: Input }],
    emptyDataHeight: [{ type: Input }],
    emptyMessage: [{ type: Input }],
    emptyTemplate: [{ type: Input }],
    idField: [{ type: Input }],
    url: [{ type: Input }],
    data: [{ type: Input }],
    footerData: [{ type: Input }],
    endEditByInvalid: [{ type: Input }],
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    nowrap: [{ type: Input }],
    virtualized: [{ type: Input }],
    virtualizedAsyncLoad: [{ type: Input }],
    rowStyler: [{ type: Input }],
    editMode: [{ type: Input }],
    editable: [{ type: Input }],
    enableEditCellStyle: [{ type: Input }],
    selectOnEditing: [{ type: Input }],
    editorHeight: [{ type: Input }],
    remoteSort: [{ type: Input }],
    sortName: [{ type: Input }],
    sortOrder: [{ type: Input }],
    multiSort: [{ type: Input }],
    hoverRowCls: [{ type: Input }],
    enableDragColumn: [{ type: Input }],
    rowGroupPanelHeight: [{ type: Input }],
    groupRows: [{ type: Input }],
    groupFooter: [{ type: Input }],
    groupFooterStyler: [{ type: Input }],
    groupSummaryPosition: [{ type: Input }],
    groupCellColSpan: [{ type: Input }],
    groupField: [{ type: Input }],
    showGroupColumn: [{ type: Input }],
    groupFormatter: [{ type: Input }],
    groupStyler: [{ type: Input }],
    showRowGroupPanel: [{ type: Input }],
    AutoColumnWidthUseDblclick: [{ type: Input }],
    disableRow: [{ type: Input }],
    useDefaultFilter: [{ type: Input }],
    enableSmartFilter: [{ type: Input }],
    enableFilterRow: [{ type: Input }],
    remoteFilter: [{ type: Input }],
    showFilterBar: [{ type: Input }],
    filterBarHeight: [{ type: Input }],
    filterRowHeight: [{ type: Input }],
    conditions: [{ type: Input }],
    selectValue: [{ type: Input }],
    checkValues: [{ type: Input }],
    selectValues: [{ type: Input }],
    mergeCell: [{ type: Input }],
    mergeFields: [{ type: Input }],
    enableClientSortForMergeCell: [{ type: Input }],
    useControlPanel: [{ type: Input }],
    enableSimpleMode: [{ type: Input }],
    controlPanelMode: [{ type: Input }],
    stopPropagation: [{ type: Input }],
    closeOtherGridEditor: [{ type: Input }],
    clearSelectionsWhenDataIsEmpty: [{ type: Input }],
    enableContextMenu: [{ type: Input }],
    contextMenus: [{ type: Input }],
    selectValueChange: [{ type: Output }],
    checkValuesChange: [{ type: Output }],
    selectValuesChange: [{ type: Output }],
    beforeEdit: [{ type: Input }],
    beginEdit: [{ type: Output }],
    afterEdit: [{ type: Input }],
    endEdit: [{ type: Output }],
    cancelEdited: [{ type: Output }],
    scrollY: [{ type: Output }],
    pageSizeChanged: [{ type: Output }],
    pageChanged: [{ type: Output }],
    loadSuccess: [{ type: Output }],
    filterChanged: [{ type: Output }],
    beforeSelect: [{ type: Input }],
    beforeUnselect: [{ type: Input }],
    beforeCheck: [{ type: Input }],
    beforeUncheck: [{ type: Input }],
    beforeSortColumn: [{ type: Input }],
    enableHighlightCell: [{ type: Input }],
    checkedRowsDataFromSource: [{ type: Input }],
    editcellWhenTabKeydwon: [{ type: Input }],
    beforeClickCell: [{ type: Output }],
    dblclickRow: [{ type: Output }],
    selectChanged: [{ type: Output }],
    unSelect: [{ type: Output }],
    selectAll: [{ type: Output }],
    unSelectAll: [{ type: Output }],
    scrollYLoad: [{ type: Output }],
    checked: [{ type: Output }],
    unChecked: [{ type: Output }],
    checkAll: [{ type: Output }],
    unCheckAll: [{ type: Output }],
    checkedChange: [{ type: Output }],
    columnSorted: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowAppended: [{ type: Output }],
    rowDeleted: [{ type: Output }],
    rowUpdated: [{ type: Output }],
    dataChange: [{ type: Output }],
    lastCellEnterHandle: [{ type: Output }],
    groupFieldChange: [{ type: Output }],
    columnMoved: [{ type: Output }],
    cellClick: [{ type: Output }],
    dgColumns: [{ type: ContentChildren, args: [DatagridColumnDirective,] }],
    dgPager: [{ type: ViewChild, args: ['dgPager',] }],
    resizeProxy: [{ type: ViewChild, args: ['resizeProxy',] }],
    resizeProxyBg: [{ type: ViewChild, args: ['resizeProxyBg',] }],
    dgContainer: [{ type: ViewChild, args: ['datagridContainer',] }],
    longTextArea: [{ type: ViewChild, args: ['longTextArea',] }],
    smartFilterToolbar: [{ type: ViewChild, args: ['smartfiltertoolbar',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.auther;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.version;
    /** @type {?} */
    DatagridComponent.prototype.__component_type__;
    /** @type {?} */
    DatagridComponent.prototype.pos;
    /** @type {?} */
    DatagridComponent.prototype.hostCls;
    /**
     * 使用主题
     * @type {?}
     */
    DatagridComponent.prototype.useThemes;
    /** @type {?} */
    DatagridComponent.prototype.id;
    /**
     * 自动高度 - 启用此属性后，就是一个普普通通的 table , 不能编辑，不能排序，不能分页，不能... 就是一凡胎
     * @type {?}
     */
    DatagridComponent.prototype.useHtmlTable;
    /**
     * 自动高度
     * @type {?}
     */
    DatagridComponent.prototype.autoHeight;
    /**
     * 显示边框
     * @type {?}
     */
    DatagridComponent.prototype.showBorder;
    /**
     * 启用斑马线
     * @type {?}
     */
    DatagridComponent.prototype.striped;
    /**
     * 宽度
     * @type {?}
     */
    DatagridComponent.prototype.width;
    /**
     * 高度
     * @type {?}
     */
    DatagridComponent.prototype.height;
    /**
     * 显示表头
     * @type {?}
     */
    DatagridComponent.prototype.showHeader;
    /**
     * 表头-单行高度
     * @type {?}
     */
    DatagridComponent.prototype.headerHeight;
    /**
     * 表头折行
     * @type {?}
     */
    DatagridComponent.prototype.headerWrap;
    /**
     * 显示页脚
     * @type {?}
     */
    DatagridComponent.prototype.showFooter;
    /**
     * 页脚默认行高
     * @type {?}
     */
    DatagridComponent.prototype.footerHeight;
    /**
     * 页脚数据来源
     * @type {?}
     */
    DatagridComponent.prototype.footerDataFrom;
    /**
     * 页脚合计行模板
     * @type {?}
     */
    DatagridComponent.prototype.footerTemplate;
    /**
     * 合计行显示位置，默认为底部
     * @type {?}
     */
    DatagridComponent.prototype.footerPosition;
    /**
     * 页脚行自定义样式
     * @type {?}
     */
    DatagridComponent.prototype.footerStyler;
    /**
     * 行高
     * @type {?}
     */
    DatagridComponent.prototype.rowHeight;
    /**
     * 设置grid 行高尺寸
     * sm: 小，md: 正常， lg: 大，xl: 超大
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._sizeType;
    /**
     * 填充容器
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._fit;
    /**
     * 如果为真，则自动展开/收缩列的大小以适合网格宽度并防止水平滚动。
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._fitColumns;
    /**
     * 根据grid的宽度自动调整列宽度
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._autoFitColumns;
    /**
     * 禁用
     * @type {?}
     */
    DatagridComponent.prototype.disabled;
    /**
     * 滚动条显示模式，默认为 auto
     * @type {?}
     */
    DatagridComponent.prototype.scrollBarShowMode;
    /** @type {?} */
    DatagridComponent.prototype.scrollBarOptions;
    /**
     * 可拖动列设置列宽
     * @type {?}
     */
    DatagridComponent.prototype.resizeColumn;
    /**
     * 显示行号
     * @type {?}
     */
    DatagridComponent.prototype.showLineNumber;
    /**
     * 行号表头字符
     * @type {?}
     */
    DatagridComponent.prototype.lineNumberTitle;
    /**
     * 行号宽度
     * @type {?}
     */
    DatagridComponent.prototype.lineNumberWidth;
    /**
     * 鼠标滑过效果开关，默认开启
     * @type {?}
     */
    DatagridComponent.prototype.rowHover;
    /**
     * 允许编辑时，单击进入编辑状态; false为双击进入编辑
     * @type {?}
     */
    DatagridComponent.prototype.clickToEdit;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._lockPagination;
    /**
     * 分页信息
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.__pagination;
    /**
     * 分页条显示模式， default, simple
     * @type {?}
     */
    DatagridComponent.prototype.pagerViewMode;
    /**
     * 启用服务器端分页
     * @type {?}
     */
    DatagridComponent.prototype.pagerOnServer;
    /**
     * 每页记录数
     * @type {?}
     */
    DatagridComponent.prototype.pageList;
    /**
     * 当前页码
     * @type {?}
     */
    DatagridComponent.prototype.pageIndex;
    /**
     * 每页记录数
     * @type {?}
     */
    DatagridComponent.prototype.pageSize;
    /**
     * 分页区高度
     * @type {?}
     */
    DatagridComponent.prototype.pagerHeight;
    /**
     * 显示每页记录数
     * @type {?}
     */
    DatagridComponent.prototype.showPageList;
    /**
     * 显示分页信息
     * @type {?}
     */
    DatagridComponent.prototype.showPageInfo;
    /**
     * 显示页码
     * @type {?}
     */
    DatagridComponent.prototype.showPageNumber;
    /**
     * 显示页码最大数量
     * @type {?}
     */
    DatagridComponent.prototype.pagerLabelSize;
    /**
     * 显示转至指定页码输入框
     * @type {?}
     */
    DatagridComponent.prototype.showGotoInput;
    /**
     * 启用跨页多选
     * @type {?}
     */
    DatagridComponent.prototype.enableMorePageSelect;
    /**
     * 显示选中列表
     * @type {?}
     */
    DatagridComponent.prototype.showSelectedList;
    /**
     * 选中列表中，每条记录显示的内容
     * @type {?}
     */
    DatagridComponent.prototype.selectedItemFormatter;
    /**
     * 单元格信息提示延时，默认 1000ms
     * @type {?}
     */
    DatagridComponent.prototype.cellTipTimer;
    /**
     * grid 内部处理分页状态
     * @type {?}
     */
    DatagridComponent.prototype.controlPaginationState;
    /**
     * 总记录数
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._total;
    /**
     * 启用选中行
     * @type {?}
     */
    DatagridComponent.prototype.enableSelectRow;
    /**
     * 启用多选
     * @type {?}
     */
    DatagridComponent.prototype.multiSelect;
    /**
     * 启用多选时，是否显示checkbox
     * @type {?}
     */
    DatagridComponent.prototype.showCheckbox;
    /**
     * 显示全选checkbox
     * @type {?}
     */
    DatagridComponent.prototype.showAllCheckbox;
    /**
     * 当启用多选时，点击行选中，只允许且只有一行被选中。, 默认为 true
     * @type {?}
     */
    DatagridComponent.prototype.onlySelectSelf;
    /**
     * 启用多选且显示checkbox, 选中行同时钩选, 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.checkOnSelect;
    /**
     * 启用多选且显示checkbox, 钩选后选中行, 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.selectOnCheck;
    /**
     * 行选中模式，custom: 自定义， default: 默认 仿Windows资源管理器选中
     * 注意： 此属性仅多选，显示复选框有效
     * addTime: 2021-12-14 by LUCAS HUANG
     * @type {?}
     */
    DatagridComponent.prototype.selectionMode;
    /**
     * 单击行选中后，在次点击不会被取消选中状态;
     * @type {?}
     */
    DatagridComponent.prototype.keepSelect;
    /**
     * 数据为空时的高度
     * @type {?}
     */
    DatagridComponent.prototype.emptyDataHeight;
    /**
     * 空数据时，显示的提示文本
     * @type {?}
     */
    DatagridComponent.prototype.emptyMessage;
    /**
     * 无数据时的模板
     * @type {?}
     */
    DatagridComponent.prototype.emptyTemplate;
    /**
     * 主键字段
     * @type {?}
     */
    DatagridComponent.prototype.idField;
    /**
     * 请求数据源的URL
     * @type {?}
     */
    DatagridComponent.prototype.url;
    /**
     * 数据源
     * @type {?}
     */
    DatagridComponent.prototype.data;
    /**
     * 页脚数据
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._footerData;
    /**
     * 验证不通过时可以结束编辑
     * @type {?}
     */
    DatagridComponent.prototype.endEditByInvalid;
    /**
     * 列集合
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._fields;
    /**
     * 数据折行，默认值：true,即在一行显示，不折行。
     * @type {?}
     */
    DatagridComponent.prototype.nowrap;
    /**
     * 虚拟加载
     * @type {?}
     */
    DatagridComponent.prototype.virtualized;
    /**
     * 是否启用异步加载数据
     * @type {?}
     */
    DatagridComponent.prototype.virtualizedAsyncLoad;
    /**
     * 行样式
     * @type {?}
     */
    DatagridComponent.prototype.rowStyler;
    /**
     * 编辑方式： row(整行编辑)、cell(单元格编辑)；默认为 row
     * @type {?}
     */
    DatagridComponent.prototype.editMode;
    /**
     * 编辑状态
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._editable;
    /**
     * 启用可编辑单元格样式。
     * @type {?}
     */
    DatagridComponent.prototype.enableEditCellStyle;
    /**
     * 进入编辑状态时选是否选中文本；默认为 false
     * 仅文本框支持此特性
     * @type {?}
     */
    DatagridComponent.prototype.selectOnEditing;
    /**
     * 编辑器高度
     * @type {?}
     */
    DatagridComponent.prototype.editorHeight;
    /**
     * 启用远端排序
     * @type {?}
     */
    DatagridComponent.prototype.remoteSort;
    /**
     * 排序字段
     * @type {?}
     */
    DatagridComponent.prototype.sortName;
    /**
     * 排序方式 asc | desc
     * @type {?}
     */
    DatagridComponent.prototype.sortOrder;
    /**
     * 允许多列排序
     * @type {?}
     */
    DatagridComponent.prototype.multiSort;
    /** @type {?} */
    DatagridComponent.prototype.hoverRowCls;
    /**
     * 允许拖拽列顺序
     * @type {?}
     */
    DatagridComponent.prototype.enableDragColumn;
    /**
     * 行分组面板高度，默认 50PX
     * @type {?}
     */
    DatagridComponent.prototype.rowGroupPanelHeight;
    /**
     * 启用分组行
     * @type {?}
     */
    DatagridComponent.prototype.groupRows;
    /**
     * 启用行分组合计行
     * @type {?}
     */
    DatagridComponent.prototype.groupFooter;
    /**
     * 分组合计行自定义样式：
     * 允许的值为
     * - { cls: 'cssclassname, ', style: { color: 'red', border: 1px solid } }
     * - (groupFooterRowData): { cls: 'cssclassname, ', style: { color: 'red', border: 1px solid } } => {}
     * @type {?}
     */
    DatagridComponent.prototype.groupFooterStyler;
    /**
     * 合计数据显示位置
     * inGroupRow: 与分组在同一行，分别相关合计字段对齐
     * groupFooterRow: 在分组数据最后增加一行
     * 默认为 groupFooterRow
     * @type {?}
     */
    DatagridComponent.prototype.groupSummaryPosition;
    /**
     * 分组信息合并列数
     * 默认为 1
     * @type {?}
     */
    DatagridComponent.prototype.groupCellColSpan;
    /**
     * 分组字段名称, 多字段分组以英文逗号分隔
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._groupField;
    /** @type {?} */
    DatagridComponent.prototype.groupFields$;
    /**
     * 显示分组列
     * @type {?}
     */
    DatagridComponent.prototype.showGroupColumn;
    /**
     * 分组格式化
     * @type {?}
     */
    DatagridComponent.prototype.groupFormatter;
    /**
     * 分组行样式
     * @type {?}
     */
    DatagridComponent.prototype.groupStyler;
    /**
     * 显示分组列面板。默认为 false
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._showRowGroupPanel;
    /**
     * 双击表头适应内容宽度
     * @type {?}
     */
    DatagridComponent.prototype.AutoColumnWidthUseDblclick;
    /**
     * 行钩选及选中禁用表达式
     * @type {?}
     */
    DatagridComponent.prototype.disableRow;
    /**
     * 使用内部过滤器; 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.useDefaultFilter;
    /**
     * 过滤图标与排序图标合并，此属性与 enableFilterRow 互斥
     * @type {?}
     */
    DatagridComponent.prototype.enableSmartFilter;
    /**
     * 显示过滤行
     * @type {?}
     */
    DatagridComponent.prototype.enableFilterRow;
    /**
     * 服务器端过滤
     * @type {?}
     */
    DatagridComponent.prototype.remoteFilter;
    /**
     * 启用过滤条件显示条
     * @type {?}
     */
    DatagridComponent.prototype.showFilterBar;
    /**
     * 过滤条件汇总条高度，默认 32px
     * @type {?}
     */
    DatagridComponent.prototype.filterBarHeight;
    /** @type {?} */
    DatagridComponent.prototype.filterRowHeight;
    /** @type {?} */
    DatagridComponent.prototype.conditions;
    /** @type {?} */
    DatagridComponent.prototype.selectValue;
    /** @type {?} */
    DatagridComponent.prototype.checkValues;
    /** @type {?} */
    DatagridComponent.prototype.selectValues;
    /**
     * 合并单元格；先支持纵向合并
     * @type {?}
     */
    DatagridComponent.prototype.mergeCell;
    /** @type {?} */
    DatagridComponent.prototype.mergeFields;
    /**
     * 合并单元格数据启用客户端排序
     * @type {?}
     */
    DatagridComponent.prototype.enableClientSortForMergeCell;
    /**
     * 使用高级控制面板
     * @type {?}
     */
    DatagridComponent.prototype.useControlPanel;
    /**
     * 启用简洁控制面板模式。默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.enableSimpleMode;
    /**
     * 点击列设置图标，默认打开的控制面板
     * @type {?}
     */
    DatagridComponent.prototype.controlPanelMode;
    /**
     * 阻止click 事件冒泡
     * @type {?}
     */
    DatagridComponent.prototype.stopPropagation;
    /**
     * (202105 弃用)
     * 点击单元格进行编辑状态时，关闭其他Grid的编辑器。默认 false，
     * 多个列表存时，仅有一个列表中有编辑状态，其他列表结束编辑
     * @type {?}
     */
    DatagridComponent.prototype.closeOtherGridEditor;
    /**
     * 当数据源为空时，清空已选记录
     * @type {?}
     */
    DatagridComponent.prototype.clearSelectionsWhenDataIsEmpty;
    /**
     * 启用右键菜单，默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.enableContextMenu;
    /**
     * 右键菜单数据
     * @type {?}
     */
    DatagridComponent.prototype.contextMenus;
    /** @type {?} */
    DatagridComponent.prototype.selectValueChange;
    /** @type {?} */
    DatagridComponent.prototype.checkValuesChange;
    /** @type {?} */
    DatagridComponent.prototype.selectValuesChange;
    /** @type {?} */
    DatagridComponent.prototype.beforeEdit;
    /** @type {?} */
    DatagridComponent.prototype.beginEdit;
    /** @type {?} */
    DatagridComponent.prototype.afterEdit;
    /** @type {?} */
    DatagridComponent.prototype.endEdit;
    /** @type {?} */
    DatagridComponent.prototype.cancelEdited;
    /** @type {?} */
    DatagridComponent.prototype.scrollY;
    /** @type {?} */
    DatagridComponent.prototype.pageSizeChanged;
    /** @type {?} */
    DatagridComponent.prototype.pageChanged;
    /** @type {?} */
    DatagridComponent.prototype.loadSuccess;
    /** @type {?} */
    DatagridComponent.prototype.filterChanged;
    /** @type {?} */
    DatagridComponent.prototype.beforeSelect;
    /** @type {?} */
    DatagridComponent.prototype.beforeUnselect;
    /** @type {?} */
    DatagridComponent.prototype.beforeCheck;
    /** @type {?} */
    DatagridComponent.prototype.beforeUncheck;
    /** @type {?} */
    DatagridComponent.prototype.beforeSortColumn;
    /**
     * 启用选中单元格高亮显示
     * @type {?}
     */
    DatagridComponent.prototype.enableHighlightCell;
    /**
     * 选中的数据始终从数据源中获取. 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.checkedRowsDataFromSource;
    /**
     * 当前单元格为只读时，使用tab 键跳到下个单元格时，是否允许进入编辑状态，默认为 false;
     * 默认情况下，当前单元格只读，按TAB跳到下个CELL 时，选中CELL ，回车进入编辑。
     * 开启后，下个单元格自动进入编辑状态。
     * @type {?}
     */
    DatagridComponent.prototype.editcellWhenTabKeydwon;
    /**
     * 单元格点击前事件
     * @type {?}
     */
    DatagridComponent.prototype.beforeClickCell;
    /** @type {?} */
    DatagridComponent.prototype.dblclickRow;
    /** @type {?} */
    DatagridComponent.prototype.selectChanged;
    /** @type {?} */
    DatagridComponent.prototype.unSelect;
    /** @type {?} */
    DatagridComponent.prototype.selectAll;
    /** @type {?} */
    DatagridComponent.prototype.unSelectAll;
    /**
     * 异步请求虚拟加载
     * @type {?}
     */
    DatagridComponent.prototype.scrollYLoad;
    /** @type {?} */
    DatagridComponent.prototype.checked;
    /** @type {?} */
    DatagridComponent.prototype.unChecked;
    /** @type {?} */
    DatagridComponent.prototype.checkAll;
    /** @type {?} */
    DatagridComponent.prototype.unCheckAll;
    /** @type {?} */
    DatagridComponent.prototype.checkedChange;
    /** @type {?} */
    DatagridComponent.prototype.columnSorted;
    /** @type {?} */
    DatagridComponent.prototype.rowClick;
    /** @type {?} */
    DatagridComponent.prototype.rowAppended;
    /** @type {?} */
    DatagridComponent.prototype.rowDeleted;
    /** @type {?} */
    DatagridComponent.prototype.rowUpdated;
    /** @type {?} */
    DatagridComponent.prototype.dataChange;
    /**
     * 最后一行的最后单元格回车处理事件
     * @type {?}
     */
    DatagridComponent.prototype.lastCellEnterHandle;
    /**
     * 分组字段变化后
     * @type {?}
     */
    DatagridComponent.prototype.groupFieldChange;
    /**
     * 拖动列改变列显示位置后触发
     * @type {?}
     */
    DatagridComponent.prototype.columnMoved;
    /**
     * 单元格点击事件
     * @type {?}
     */
    DatagridComponent.prototype.cellClick;
    /** @type {?} */
    DatagridComponent.prototype.dgColumns;
    /** @type {?} */
    DatagridComponent.prototype.dgPager;
    /** @type {?} */
    DatagridComponent.prototype.resizeProxy;
    /** @type {?} */
    DatagridComponent.prototype.resizeProxyBg;
    /** @type {?} */
    DatagridComponent.prototype.dgContainer;
    /** @type {?} */
    DatagridComponent.prototype.longTextArea;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterToolbar;
    /** @type {?} */
    DatagridComponent.prototype.colGroup;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._loading;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._selectedRow;
    /** @type {?} */
    DatagridComponent.prototype.ds;
    /** @type {?} */
    DatagridComponent.prototype.pagerOpts;
    /** @type {?} */
    DatagridComponent.prototype.restService;
    /** @type {?} */
    DatagridComponent.prototype.editors;
    /** @type {?} */
    DatagridComponent.prototype.validators;
    /** @type {?} */
    DatagridComponent.prototype.currentCell;
    /** @type {?} */
    DatagridComponent.prototype.flatColumns;
    /** @type {?} */
    DatagridComponent.prototype.footerWidth;
    /** @type {?} */
    DatagridComponent.prototype.clickDelay;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.resizeColumnInfo;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.ro;
    /** @type {?} */
    DatagridComponent.prototype.subscriptions;
    /** @type {?} */
    DatagridComponent.prototype.realHeaderHeight;
    /** @type {?} */
    DatagridComponent.prototype.isSingleClick;
    /** @type {?} */
    DatagridComponent.prototype.docuemntCellClickEvents;
    /** @type {?} */
    DatagridComponent.prototype.documentCellClickHandler;
    /** @type {?} */
    DatagridComponent.prototype.documentCellKeydownEvents;
    /** @type {?} */
    DatagridComponent.prototype.documentCellKeydownHandler;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.modalClickEvent;
    /** @type {?} */
    DatagridComponent.prototype.documentRowKeydownHandler;
    /** @type {?} */
    DatagridComponent.prototype.documentRowEditKeydownHanlder;
    /** @type {?} */
    DatagridComponent.prototype.documentClickEndRowEditHandler;
    /** @type {?} */
    DatagridComponent.prototype.pending;
    /** @type {?} */
    DatagridComponent.prototype.colFormatSer;
    /** @type {?} */
    DatagridComponent.prototype.scrollInstance;
    /** @type {?} */
    DatagridComponent.prototype.localeService;
    /** @type {?} */
    DatagridComponent.prototype.mergeCellInfo;
    /** @type {?} */
    DatagridComponent.prototype.ignoreTarget;
    /** @type {?} */
    DatagridComponent.prototype.clientFilterService;
    /** @type {?} */
    DatagridComponent.prototype.settingService;
    /** @type {?} */
    DatagridComponent.prototype.ControlPanelFeild;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._isResized;
    /** @type {?} */
    DatagridComponent.prototype.gridSize;
    /** @type {?} */
    DatagridComponent.prototype.clientFilterChanged;
    /** @type {?} */
    DatagridComponent.prototype.styleSheetId;
    /** @type {?} */
    DatagridComponent.prototype.groupRowPanelPlaceholder;
    /** @type {?} */
    DatagridComponent.prototype.commonUtils;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterService;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterResult;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterBarHeight;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._active_datagrid_cls;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._blured_datagrid_cls;
    /** @type {?} */
    DatagridComponent.prototype._custom_datagrid_cls;
    /** @type {?} */
    DatagridComponent.prototype.sms;
    /** @type {?} */
    DatagridComponent.prototype.focusRowIndex;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.documentBodyMouseDown;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.farrisInstances;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.currentPagerData;
    /** @type {?} */
    DatagridComponent.prototype.trackByRows;
    /** @type {?} */
    DatagridComponent.prototype.onDocumentMouseDown;
    /** @type {?} */
    DatagridComponent.prototype.cd;
    /** @type {?} */
    DatagridComponent.prototype.el;
    /** @type {?} */
    DatagridComponent.prototype.inject;
    /** @type {?} */
    DatagridComponent.prototype.zone;
    /** @type {?} */
    DatagridComponent.prototype.dfs;
    /** @type {?} */
    DatagridComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.app;
    /**
     * @type {?}
     * @protected
     */
    DatagridComponent.prototype.domSanitizer;
    /** @type {?} */
    DatagridComponent.prototype.render2;
}
//# sourceMappingURL=data:application/json;base64,