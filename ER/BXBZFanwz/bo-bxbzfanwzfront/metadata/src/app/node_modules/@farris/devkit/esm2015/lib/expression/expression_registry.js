import { Inject, Injectable, Injector, Optional } from "@angular/core";
import { of } from "rxjs";
import { catchError, switchMap } from "rxjs/operators";
import { Expression } from './types';
import { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN } from "../manifest/index";
import { TranslateToken } from "../i18n/index";
import { Repository } from "../repository/index";
export class ExpressionRegistry {
    constructor(injector, formExpressionManifestService, translate) {
        this.injector = injector;
        this.formExpressionManifestService = formExpressionManifestService;
        this.translate = translate;
        this._expressions = null;
    }
    /**
     * 加载表达式文件
     */
    load() {
        return this.formExpressionManifestService.load().pipe(switchMap((describe) => {
            const expressions = [];
            const exprs = Array.from(describe);
            exprs.forEach((expr) => {
                expr.expressions.forEach((expression) => {
                    const expressionObject = {
                        id: expression.id,
                        ns: expr.ns,
                        path: expr.path,
                        bindingType: expr.type,
                        type: expression.type,
                        expression: expression.value || expression.expr || '',
                        message: expression.message || null,
                        messageType: expression.messageType || null,
                        deps: []
                    };
                    if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate || expression.type === Expression.ExpressionType.DataPicking)) {
                        if (!expression.message) {
                            expressionObject.message = this.getExpressionMessage(expression.type);
                        }
                        if (!expression.messageType) {
                            expressionObject.messageType = 'error';
                        }
                    }
                    if (expressionObject.message) {
                        this.transform(expressionObject);
                    }
                    expressions.push(expressionObject);
                });
            });
            this._expressions = expressions;
            this.cleanSpecialCharacters();
            return of(expressions);
        }), catchError((e) => {
            return of([]);
        }));
    }
    /**
     * 获取所有表达式
     */
    get expressions() {
        if (this._expressions) {
            return of(this._expressions);
        }
        return this.load();
    }
    /**
     * 根据表达式id获取对应的表达式对象
     * @param id 表达式id
     * @returns
     */
    getExpressionById(id) {
        if (!this._expressions || this._expressions.length < 1) {
            return null;
        }
        return this._expressions.find((expressionObject) => expressionObject.id === id);
    }
    getExpressionMessage(expressionType, defaultValue) {
        if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required || expressionType === Expression.ExpressionType.DataPicking)) {
            return null;
        }
        if (!this.translate) {
            return defaultValue;
        }
        const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        return Expression.MESSAGE[currentLanguage][expressionType];
    }
    transform(expressionObject) {
        if (!this.translate) {
            return;
        }
        if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {
            expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);
        }
    }
    cleanSpecialCharacters() {
        if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {
            return;
        }
        const repository = this.injector.get(Repository, null);
        if (!repository) {
            return;
        }
        const entityTypeInfo = repository.entityTypeInfo;
        const regex = new RegExp(`[\\'\\"]?\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\"]?`, 'g');
        this._expressions.forEach((expressionObject) => {
            const expr = expressionObject.expression;
            const entityPropertyExpressions = expr.match(regex);
            if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                entityPropertyExpressions.forEach((item) => {
                    if (item.indexOf('.') === -1) {
                        console.warn(`无效的实体表达式:${item}`);
                        return;
                    }
                    // 去数组
                    if (/\[\d\]/g.test(item)) {
                        const replacer = item.replace(/\[\d\]/g, '');
                        expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);
                    }
                    // 去星号
                    if (/\*/g.test(item)) {
                        const replacer = item.replace(/\*/g, '');
                        expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);
                    }
                });
            }
        });
    }
    replaceAll(originalValue, search, replacer) {
        return originalValue.split(search).join(replacer);
    }
}
ExpressionRegistry.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExpressionRegistry.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TranslateToken,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxzQ0FBc0MsRUFBa0MsTUFBTSxtQkFBbUIsQ0FBQztBQUMzRyxPQUFPLEVBQWEsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUdqRCxNQUFNLE9BQU8sa0JBQWtCO0lBRTdCLFlBQ1UsUUFBa0IsRUFDOEIsNkJBQTZELEVBQ3pFLFNBQW9CO1FBRnhELGFBQVEsR0FBUixRQUFRLENBQVU7UUFDOEIsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUFnQztRQUN6RSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBSjFELGlCQUFZLEdBQWtDLElBQUksQ0FBQztJQU0zRCxDQUFDO0lBQ0Q7O09BRUc7SUFDSSxJQUFJO1FBQ1QsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUNuRCxTQUFTLENBQUMsQ0FBQyxRQUFvQixFQUFFLEVBQUU7WUFDakMsTUFBTSxXQUFXLEdBQXVDLEVBQUUsQ0FBQztZQUMzRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLEtBQUssQ0FBQyxPQUFPLENB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SSxDQUFDLEVBQUU7d0JBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO3dCQUN6QyxnQkFBZ0IsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO3FCQUM1RjtnQkFDSCxDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ08sVUFBVSxDQUFDLGFBQXFCLEVBQUUsTUFBYyxFQUFFLFFBQWdCO1FBQ3hFLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7O1lBL0hGLFVBQVU7Ozs7WUFSa0IsUUFBUTs0Q0FhaEMsTUFBTSxTQUFDLHNDQUFzQzs0Q0FDN0MsUUFBUSxZQUFJLE1BQU0sU0FBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciwgT3B0aW9uYWwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIHN3aXRjaE1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEZPUk1fRVhQUkVTU0lPTl9NQU5JRkVTVF9TRVJWSUNFX1RPS0VOLCBJRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiLi4vbWFuaWZlc3QvaW5kZXhcIjtcclxuaW1wb3J0IHsgVHJhbnNsYXRlLCBUcmFuc2xhdGVUb2tlbiB9IGZyb20gXCIuLi9pMThuL2luZGV4XCI7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tIFwiLi4vcmVwb3NpdG9yeS9pbmRleFwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblJlZ2lzdHJ5IHtcclxuICBwcml2YXRlIF9leHByZXNzaW9uczogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0W10gPSBudWxsO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBASW5qZWN0KEZPUk1fRVhQUkVTU0lPTl9NQU5JRkVTVF9TRVJWSUNFX1RPS0VOKSBwcml2YXRlIGZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlOiBJRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KFRyYW5zbGF0ZVRva2VuKSBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlXHJcbiAgKSB7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veihqOi+vuW8j+aWh+S7tlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkKCk6IE9ic2VydmFibGU8RXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0W10+IHtcclxuICAgIHJldHVybiB0aGlzLmZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlLmxvYWQoKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKGRlc2NyaWJlOiBBcnJheTxhbnk+KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnM6IEFycmF5PEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdD4gPSBbXTtcclxuICAgICAgICBjb25zdCBleHBycyA9IEFycmF5LmZyb20oZGVzY3JpYmUpO1xyXG4gICAgICAgIGV4cHJzLmZvckVhY2goKGV4cHI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgZXhwci5leHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAgIGlkOiBleHByZXNzaW9uLmlkLFxyXG4gICAgICAgICAgICAgIG5zOiBleHByLm5zLFxyXG4gICAgICAgICAgICAgIHBhdGg6IGV4cHIucGF0aCxcclxuICAgICAgICAgICAgICBiaW5kaW5nVHlwZTogZXhwci50eXBlLFxyXG4gICAgICAgICAgICAgIHR5cGU6IGV4cHJlc3Npb24udHlwZSxcclxuICAgICAgICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uLnZhbHVlIHx8IGV4cHJlc3Npb24uZXhwciB8fCAnJyxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiBleHByZXNzaW9uLm1lc3NhZ2UgfHwgbnVsbCxcclxuICAgICAgICAgICAgICBtZXNzYWdlVHlwZTogZXhwcmVzc2lvbi5tZXNzYWdlVHlwZSB8fCBudWxsLFxyXG4gICAgICAgICAgICAgIGRlcHM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICgoZXhwcmVzc2lvbi50eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlcXVpcmVkIHx8IGV4cHJlc3Npb24udHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WYWxpZGF0ZSB8fCBleHByZXNzaW9uLnR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuRGF0YVBpY2tpbmcpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCFleHByZXNzaW9uLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25PYmplY3QubWVzc2FnZSA9IHRoaXMuZ2V0RXhwcmVzc2lvbk1lc3NhZ2UoZXhwcmVzc2lvbi50eXBlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKCFleHByZXNzaW9uLm1lc3NhZ2VUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2VUeXBlID0gJ2Vycm9yJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb25PYmplY3QubWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2goZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xyXG4gICAgICAgIHRoaXMuY2xlYW5TcGVjaWFsQ2hhcmFjdGVycygpO1xyXG4gICAgICAgIHJldHVybiBvZihleHByZXNzaW9ucyk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBjYXRjaEVycm9yKChlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG9mKFtdKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaJgOacieihqOi+vuW8j1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgZXhwcmVzc2lvbnMoKTogT2JzZXJ2YWJsZTxFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3RbXT4ge1xyXG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zKSB7XHJcbiAgICAgIHJldHVybiBvZih0aGlzLl9leHByZXNzaW9ucyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNruihqOi+vuW8j2lk6I635Y+W5a+55bqU55qE6KGo6L6+5byP5a+56LGhXHJcbiAgICogQHBhcmFtIGlkIOihqOi+vuW8j2lkXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGdldEV4cHJlc3Npb25CeUlkKGlkOiBzdHJpbmcpOiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3Qge1xyXG4gICAgaWYgKCF0aGlzLl9leHByZXNzaW9ucyB8fCB0aGlzLl9leHByZXNzaW9ucy5sZW5ndGggPCAxKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX2V4cHJlc3Npb25zLmZpbmQoKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4gZXhwcmVzc2lvbk9iamVjdC5pZCA9PT0gaWQpO1xyXG4gIH1cclxuICBwcml2YXRlIGdldEV4cHJlc3Npb25NZXNzYWdlKGV4cHJlc3Npb25UeXBlOiBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLCBkZWZhdWx0VmFsdWU/OiBzdHJpbmcpIHtcclxuICAgIGlmICghKGV4cHJlc3Npb25UeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZhbGlkYXRlIHx8IGV4cHJlc3Npb25UeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlcXVpcmVkIHx8IGV4cHJlc3Npb25UeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLkRhdGFQaWNraW5nKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy50cmFuc2xhdGUpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9IHRoaXMudHJhbnNsYXRlLmdldEN1cnJlbnRMYW5ndWFnZSgpIHx8ICd6aC1DSFMnO1xyXG4gICAgcmV0dXJuIEV4cHJlc3Npb24uTUVTU0FHRVtjdXJyZW50TGFuZ3VhZ2VdW2V4cHJlc3Npb25UeXBlXTtcclxuICB9XHJcbiAgcHJpdmF0ZSB0cmFuc2Zvcm0oZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSB7XHJcbiAgICBpZiAoIXRoaXMudHJhbnNsYXRlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2UgJiYgZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlLnN0YXJ0c1dpdGgoJ3t7JykgJiYgZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlLmVuZHNXaXRoKCd9fScpKSB7XHJcbiAgICAgIGV4cHJlc3Npb25PYmplY3QubWVzc2FnZSA9IHRoaXMudHJhbnNsYXRlLnRyYW5zZm9ybShleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2Uuc3Vic3RyKDIsIGV4cHJlc3Npb25PYmplY3QubWVzc2FnZS5sZW5ndGggLSA0KSwgbnVsbCkgfHwgdGhpcy5nZXRFeHByZXNzaW9uTWVzc2FnZShleHByZXNzaW9uT2JqZWN0LnR5cGUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGNsZWFuU3BlY2lhbENoYXJhY3RlcnMoKSB7XHJcbiAgICBpZiAoIXRoaXMuX2V4cHJlc3Npb25zIHx8IHRoaXMuX2V4cHJlc3Npb25zLmxlbmd0aCA8IDEgfHwgIUFycmF5LmlzQXJyYXkodGhpcy5fZXhwcmVzc2lvbnMpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PiA9IHRoaXMuaW5qZWN0b3IuZ2V0KFJlcG9zaXRvcnksIG51bGwpO1xyXG4gICAgaWYgKCFyZXBvc2l0b3J5KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGVudGl0eVR5cGVJbmZvID0gcmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbztcclxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgW1xcXFwnXFxcXFwiXT9cXFxccyooJHtlbnRpdHlUeXBlSW5mby5lbnRpdHlJbmZvLm5vZGVDb2RlfXwke2VudGl0eVR5cGVJbmZvLmVudGl0eUluZm8ub3JpZ2luYWxDb2RlfSlbXFxcXC5cXFxcW1xcXFxdYS16QS1aMC05X10rXFxcXHMqW1xcXFwnXFxcXFwiXT9gLCAnZycpO1xyXG4gICAgdGhpcy5fZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGV4cHIgPSBleHByZXNzaW9uT2JqZWN0LmV4cHJlc3Npb247XHJcbiAgICAgIGNvbnN0IGVudGl0eVByb3BlcnR5RXhwcmVzc2lvbnM6IFJlZ0V4cE1hdGNoQXJyYXkgPSBleHByLm1hdGNoKHJlZ2V4KTtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucykgJiYgZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgLy8g6Kej5p6Q5Ye65omA5pyJ5a6e5L2T55u45YWz55qE5a2X56ym5Liy77yM5Lul5Li75a6e5L2T5ZCN5a2X5byA5aS077yM5YyF5ZCr5Li75a6e5L2T5bGe5oCn5oiW5a2Q6KGoXHJcbiAgICAgICAgZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucy5mb3JFYWNoKChpdGVtOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIGlmIChpdGVtLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGDml6DmlYjnmoTlrp7kvZPooajovr7lvI86JHtpdGVtfWApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyDljrvmlbDnu4RcclxuICAgICAgICAgIGlmICgvXFxbXFxkXFxdL2cudGVzdChpdGVtKSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXBsYWNlciA9IGl0ZW0ucmVwbGFjZSgvXFxbXFxkXFxdL2csICcnKTtcclxuICAgICAgICAgICAgZXhwcmVzc2lvbk9iamVjdC5leHByZXNzaW9uID0gdGhpcy5yZXBsYWNlQWxsKGV4cHJlc3Npb25PYmplY3QuZXhwcmVzc2lvbiwgaXRlbSwgcmVwbGFjZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8g5Y675pif5Y+3XHJcbiAgICAgICAgICBpZiAoL1xcKi9nLnRlc3QoaXRlbSkpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVwbGFjZXIgPSBpdGVtLnJlcGxhY2UoL1xcKi9nLCAnJyk7XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25PYmplY3QuZXhwcmVzc2lvbiA9IHRoaXMucmVwbGFjZUFsbChleHByZXNzaW9uT2JqZWN0LmV4cHJlc3Npb24sIGl0ZW0sIHJlcGxhY2VyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgcmVwbGFjZUFsbChvcmlnaW5hbFZhbHVlOiBzdHJpbmcsIHNlYXJjaDogc3RyaW5nLCByZXBsYWNlcjogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gb3JpZ2luYWxWYWx1ZS5zcGxpdChzZWFyY2gpLmpvaW4ocmVwbGFjZXIpO1xyXG4gIH1cclxufSJdfQ==