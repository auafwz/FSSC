/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener, ElementRef, Input } from '@angular/core';
import { FDropdownDirective } from './f-dropdown.directive';
export class FDropdownToggleDirective {
    /**
     * @param {?} dropdown
     * @param {?} elementRef
     */
    constructor(dropdown, elementRef) {
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this._disabled = false;
        this.haspopup = true;
        this.nativeEle = null;
        dropdown.toggleElement = elementRef.nativeElement;
        this.nativeEle = elementRef.nativeElement;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            if (this.dropdown.isSubDP && this.dropdown.isOpen) {
                if (this.nativeEle.className.indexOf('active') < 0) {
                    this.nativeEle.className += ' active';
                }
            }
            else {
                if (this.nativeEle.className.indexOf('active') > -1) {
                    this.nativeEle.className = this.nativeEle.className.replace(' active', ' ');
                }
            }
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dpDisabled(value) {
        this._disabled = value;
    }
    /**
     * @return {?}
     */
    get disableCls() {
        return this._disabled;
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onclick(ev) {
        if (this._disabled) {
            return;
        }
        if (this.dropdown.isSubDP) {
            ev.stopImmediatePropagation();
        }
        this.dropdown.toggle();
    }
}
FDropdownToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fDropdownToggle]'
            },] }
];
/** @nocollapse */
FDropdownToggleDirective.ctorParameters = () => [
    { type: FDropdownDirective },
    { type: ElementRef }
];
FDropdownToggleDirective.propDecorators = {
    dpDisabled: [{ type: Input }],
    disableCls: [{ type: HostBinding, args: ['class.disabled',] }],
    haspopup: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
    onclick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype._disabled;
    /** @type {?} */
    FDropdownToggleDirective.prototype.haspopup;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.nativeEle;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.dropdown;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kcm9wZG93bi8iLCJzb3VyY2VzIjpbImxpYi9mLWRyb3Bkb3duLXRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsV0FBVyxFQUNYLFlBQVksRUFDWixVQUFVLEVBRVYsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBSzVELE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBdUJuQyxZQUFvQixRQUE0QixFQUFVLFVBQXNCO1FBQTVELGFBQVEsR0FBUixRQUFRLENBQW9CO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXRCeEUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQVVTLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFXM0MsY0FBUyxHQUFHLElBQUksQ0FBQztRQUV2QixRQUFRLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsU0FBUzs7OztRQUFDLENBQUMsS0FBYyxFQUFFLEVBQUU7WUFDeEQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtnQkFDakQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNsRCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUM7aUJBQ3ZDO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ25ELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQzNFO2FBQ0Y7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBbkNELElBQ0ksVUFBVSxDQUFDLEtBQWM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7OztJQUNELElBQ0ksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQUlELE9BQU8sQ0FBQyxFQUFjO1FBQ3BCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3pCLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7WUF4QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7YUFDOUI7Ozs7WUFKUSxrQkFBa0I7WUFKekIsVUFBVTs7O3lCQVdULEtBQUs7eUJBSUwsV0FBVyxTQUFDLGdCQUFnQjt1QkFLNUIsV0FBVyxTQUFDLG9CQUFvQjtzQkFDaEMsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztJQVhqQyw2Q0FBMEI7O0lBVTFCLDRDQUFtRDs7Ozs7SUFXbkQsNkNBQXlCOzs7OztJQUNiLDRDQUFvQzs7Ozs7SUFBRSw4Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBIb3N0LFxyXG4gIEhvc3RCaW5kaW5nLFxyXG4gIEhvc3RMaXN0ZW5lcixcclxuICBFbGVtZW50UmVmLFxyXG4gIFJlbmRlcmVyMixcclxuICBJbnB1dFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGRHJvcGRvd25EaXJlY3RpdmUgfSBmcm9tICcuL2YtZHJvcGRvd24uZGlyZWN0aXZlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZEcm9wZG93blRvZ2dsZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRHJvcGRvd25Ub2dnbGVEaXJlY3RpdmUge1xyXG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XHJcbiAgQElucHV0KClcclxuICBzZXQgZHBEaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcclxuICB9XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5kaXNhYmxlZCcpXHJcbiAgZ2V0IGRpc2FibGVDbHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XHJcbiAgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1oYXNwb3B1cCcpIGhhc3BvcHVwID0gdHJ1ZTtcclxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgb25jbGljayhldjogTW91c2VFdmVudCkge1xyXG4gICAgaWYgKHRoaXMuX2Rpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmRyb3Bkb3duLmlzU3ViRFApIHtcclxuICAgICAgZXYuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmRyb3Bkb3duLnRvZ2dsZSgpO1xyXG4gIH1cclxuICBwcml2YXRlIG5hdGl2ZUVsZSA9IG51bGw7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkcm9wZG93bjogRkRyb3Bkb3duRGlyZWN0aXZlLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgIGRyb3Bkb3duLnRvZ2dsZUVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLm5hdGl2ZUVsZT1lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB0aGlzLmRyb3Bkb3duLmdldE9wZW5TdGF0ZSgpLnN1YnNjcmliZSgoc3RhdGU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgaWYgKHRoaXMuZHJvcGRvd24uaXNTdWJEUCAmJiB0aGlzLmRyb3Bkb3duLmlzT3Blbikge1xyXG4gICAgICAgIGlmICh0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUuaW5kZXhPZignYWN0aXZlJykgPCAwKSB7XHJcbiAgICAgICAgICB0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUgKz0gJyBhY3RpdmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lLmluZGV4T2YoJ2FjdGl2ZScpID4gLTEpIHtcclxuICAgICAgICAgIHRoaXMubmF0aXZlRWxlLmNsYXNzTmFtZT10aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWUucmVwbGFjZSgnIGFjdGl2ZScsICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19