/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { SolutionService } from '../../service/solution.service';
import { CheckboxValue } from '../../entity/controltype/checkbox/checkboxvalue';
import { CheckboxGroupValue } from '../../entity/conditionvalue/checkboxgroupvalue';
var FilterCheckboxComponent = /** @class */ (function () {
    function FilterCheckboxComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.cla = true;
        this.checkboxDataSource = new Array();
    }
    Object.defineProperty(FilterCheckboxComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterCheckboxComponent.prototype, "isCheckExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterCheckboxComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.getDataSource();
        this.checkValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.checkValue = [];
        }));
    };
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.getDataSource();
    };
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.CheckboxGroup) {
            /** @type {?} */
            var checkboxList = ((/** @type {?} */ (this.item.control)));
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.checkboxDataSource.push(Object.assign(new CheckboxValue(), element));
                }));
            }
        }
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
        //     this.extend = this.item.control.isExtend;
        // }
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    FilterCheckboxComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterCheckboxComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            var checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.item.value.value = checkboxValue;
        }
        else {
            this.item.value.value = new CheckboxGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    };
    FilterCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-checkbox',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FilterCheckboxComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    FilterCheckboxComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
        cla: [{ type: HostBinding, args: ['class.filter-item-checkboxgroup',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return FilterCheckboxComponent;
}());
export { FilterCheckboxComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    FilterCheckboxComponent.prototype.item;
    /** @type {?} */
    FilterCheckboxComponent.prototype.autoLabel;
    /** @type {?} */
    FilterCheckboxComponent.prototype.disabled;
    /** @type {?} */
    FilterCheckboxComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    FilterCheckboxComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    FilterCheckboxComponent.prototype.showlabel;
    /** @type {?} */
    FilterCheckboxComponent.prototype.checkValue;
    /** @type {?} */
    FilterCheckboxComponent.prototype.selectCheck;
    /** @type {?} */
    FilterCheckboxComponent.prototype.cla;
    /** @type {?} */
    FilterCheckboxComponent.prototype.checkboxDataSource;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,