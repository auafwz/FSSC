{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-treetable/lib/hotkeys.ts","ng://@farris/ui-treetable/lib/treetable.service.ts","ng://@farris/ui-treetable/lib/virtualized-loader.service.ts","ng://@farris/ui-treetable/lib/search.handle.ts","ng://@farris/ui-treetable/lib/treetable.component.ts","ng://@farris/ui-treetable/lib/find-input.component.ts","ng://@farris/ui-treetable/lib/high-light.pipe.ts","ng://@farris/ui-treetable/lib/nodes_pager/nodes-pager.component.ts","ng://@farris/ui-treetable/lib/nodes_pager/childs-loading.component.ts","ng://@farris/ui-treetable/lib/cell-tips.pipe.ts","ng://@farris/ui-treetable/lib/treetable.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","TTHotkeys","addShortcut","options","_this","merged","defaults","keys","indexOf","replace","event","description","hotkeys","set","Observable","observer","dispose","eventManager","addEventListener","element","preventDefault","delete","Injectable","args","providedIn","EventManager","Map","document","TreetableService","onSelectionChange","selected","selectionSource","onDblClick","rowNode","dblClickSource","onChangeCheckboxStatus","changeCheckboxStatus","onInsert","treeNode","parent","insertNode","onRemove","removeNode","onUpdate","updateNode","columnIsVisible","col","tt","visible","undefined","checkColumnsForGroupHeader","columns","_columns","getDataColumns","getDataFields","cols","j","forEach","colspan","splice","fields","_cols","field","d","includes","f","filter","Subject","selectionSource$","asObservable","dblClickSource$","changeCheckboxStatus$","insertNode$","removeNode$","updateNode$","VirtualizedLoaderService","getTableHeight","height","getTableHeaderHeight","headerBox","nativeElement","getBoundingClientRect","getTableBodyHeight","getTableWidth","width","getRowHeight","rowHeight","getRowNodes","scrollTop","minTop","maxTop","top","rows","topHideHeight","bottomHideHeight","rowNodes","state","data","SearchHandle","search","from","allNodes","cloneDeep","ttInstance","searchOnServer","values","searchOnClient","_updateSerializedValues","updateSerializedValue","checkeds","checkedNodes","map","idField","detectChanges","visibleItems","pids","parents","id","flat","pidArr","Array","Set","some","item","expanded","serializedValue","resetTreeData","findParent","res","find","t1","searchExpression","c","targetValue","getValue","node","parseFloat","console","warn","reduce","flag","curr","split","_a","log","getFindTextTotal","nodes","_fields","trim","toLowerCase","findParents","parentNode","arr","t2","children","tn","a","Directive","selector","Input","TreeTableColumnDirective","defineProperty","TreeTableComponent","_groupColumns","ttService","cs","_data","val","initNodeStatus","setNewColumnsWidth","loadedData","emit","content","headerCheckboxCmp","_selections","vals","findRowNode","ids_1","selectValues","difference","setTimeout","selectValuesChange","_selectedRow","selectValue","selectValueChange","_checkeds","treeNodes","ids_2","checkValues","checkValuesChange","checkOptons","nowrap","virtualized","reSetSize","setScorllBodyHeight","multiSelect","singleSelect","showCheckbox","checkOnSelect","selectOnCheck","beforeSortColumn","of","fit","renderer","addClass","el","parentEl","parentElement","setStyle","beforeClickNode","beforeCheckAll","beforeUnCheckAll","autoWidth","fitColumns","resizableColumns","ngOnInit","_UUID","styleElement","utils","createStyleSheet","styleSheetId","checkColumnOption","ngZone","runOutsideAngular","ro","ResizeObserver","entries","contentRect","resize","observe","paginationOptions","initPaginationOptions","ngOnDestroy","unobserve","findKeysHandler","unsubscribe","removeStyleSheet","ngOnChanges","changes","isFirstChange","isDataChanged","currentValue","previousValue","disabled","hovered","enableFindText","setFindText","selectNode","selectNodes","pageIndex","currentPage","pageSize","itemsPerPage","pageList","total","totalItems","setTableWidth","allColumnsWidth","ngAfterViewChecked","ngAfterContentInit","templates","getType","headerTemplate","template","bodyTemplate","columnsRef","ttc2columns","subscribe","ngAfterViewInit","containerElement","querySelector","registerShortcuts","setRightFixedColumnShadow","farrisInstances","add","headerCells","firstRowCells","showHeader","headerTable","querySelectorAll","bodyTable","td","index","fieldName","getAttribute","colWidth","toFixed","style","minWidth","columnCssName","sortColumnsByFixed","updateColumns","fixedLeft","fixed","fixedCenter","fixedRight","left","rightWidthTotal_1","right","cssRules","hAlign","colWidthTotal","fixedCols","fixedRightColumns","fixedLeftColumns","isVisible","ruleName","cssRule","getCssRule","sheet","display","stylecss","appendCssRules","paginationForChildren","title","align","nodesPagerBar","fixedColumns","onPageChange","$event","pageChanged","onPageSizeChange","pageSizeChanged","updatePageInfo","pageInfo","obj","remote","pagerOnServer","getNodeText","rowdata","isMultilingualField","localeService","localeId","onlySelectSelf","showFilterBar","_hotKeys","inputGroup","textbox","onSearch","enable","showFindInput","cdRef","getCustomCls","clsType","cls","fn","rowStyler","cellStyler","rowCls","arrcls","isArray","rowClsObj_1","getRowCls","getCellCls","getRealColWidth","currentCol","onResized","resizeSer","windowResized","psRef","directiveRef","ps","instance","containerWidth","scrollbarXLeft","contentWidth","rightCSSRule","setFixedColumnShadow","x","fixedLeftCssRuleKey","fixedRightCssRuleKey","leftCSSRule","removeCssRule","srcElement","offsetWidth","scrollWidth","onScrollX","scrollLeft","scrollX","onScrollY","target","scrollLoader","scrollY","onSearchValueChange","onClearSearchValue","searchData","clearSearchValue","onCellClick","cellClick","trackByFn","formatData","formatter","colFormatSer","format","columnsChanged","list","offsetHeight","renderVirtualRowNodes","nodePosY","scrollY_1","_rownodes","elementRef","searchHandle","serializeNodes","fixedHeader","level","parentIds","selectable","showIcon","onlySelectLeaf","leaf","keyid","isSelected","findIndexInSelection","isChecked","findIndexInCheckeds","isLast","isFirst","parentRn","parentID","_parents","parentRowNode","last","first","selectedRow","selections","findIndex","v","unSelectedCurrentRowEmit","currSelected","nodeUnSelect","type","_singleSelectNode","clearSelections","selectRowIndex","rowIndex","clearCheckeds","setCheckeds","sp","originalEvent","nodeSelected","_singleUnSelectNode","__singleSelectNode","keepSelect","__multiSelectNode","singleSelectWhenMultiSelect","handleRowClick","indeterminate","setSelections","cascadeNodes","nodeChecked","nodeUnChecked","selectWhenChecked","isInArray","items","getDiffrentData","_nodes_1","checked","propagateSelectionDown","propagateSelectionUp","updateAllCheckboxStatus","toggleNodeWithCheckbox","stopPropagation","toggleNodesWithCheckbox","checkAllNodes","unCheckAllNodes","cascadeCheckedNode","cascadeCheck","cascadeDown","rn","row","cascadeUp","rns_1","reverse","updateCheckboxStatus","status","isIndeterminate","showCheckAll","chkAll","updateParentCheckboxStatus","pNodes","rnid","updateParentsCheckStatus","ids","findRowNodes","sort","getCheckboxStatus","len","uncheckedLength","checkedLength","childNodes","findIndexIn","equals","source","toggleExpand","deep","toggleVisible","expand","collapse","rid_1","rnParent","expandNode","expandAll","expandAllNodes","expandNodes","expandAllNodesBy","collapseNode","collapseAll","collapseAllNodes","getContainerOffset","rect","body","onColumnResizeBegin","containerLeft","Math","round","lastResizerHelperX","pageX","onColumnResize","resizerHelperVC","onColumnResizeEnd","column","delta","offsetLeft","newColumnWidth","resizeColumnIndex","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","resizeColGroup","_colInfo","removeClass","update","table","colGroup","nodeName","Error","nextCol","insert","appendNew","append","emitAppendNew","appendChildren","loadChildren","remove","nodeId","removed","extend","updated","scorllBodyHeight","headerWrap","useGroupHeader","hh","clientHeight","headerHeight","pagination","pagerHeight","size","loadData","empty","clearAll","markForCheck","nodeIds","selectFirstNode","firstCanSelectNode","scrollToCurrentRow","trId","trEle","getElementById","isElementInViewport","scrollIntoView","block","inline","containerEl","viewPortHeight","offsetTop","scrollToCurrentNode","id_1","pid","scrollToY","top_1","gotocurrent","selectNodeChangedSubject","unSelectNode","emitNodeSelected","join","unSelectNodes","rownodes","checkedNode","isEnableMultiSelect","unCheckedNode","rownode","_checkedNodes","parentIDS","closeCascade","_cascade","unCheckedNodes","findNode","getRoot","checkAll","unCheckAll","getNodeIconFromData","useIconFromData","iconField","_iconField","getTreeIcon","leafIcon","expandIcon","collapseIcon","treenode-loading","icon","expandedIcon","collapsedIcon","_b","whenDataIconEmptyUseDefault","collapsedExpression","expandedExpression","leafExpression","icons","iconCls","compare","b","localeCompare","_sort","r1","r2","sortFields","sortName","orders","sortOrder","sn","so","orderby","this_1","sorter","v1","v2","clientSort","sortedData","bind","sortChildNodes","onSortColumnClick","sortable","sortOrders","colOrder","order","newOrder","_order","multiSort","k","remoteSort","columnSorted","findKeyWords","searchValue","findField","findValue","result","findResult","firstRowIndex_1","findCount","findCurrent","tslib_1.__spread","y_1","highLightKeywords","resetFindText","closeFindPanel","allHighLights","nextFindValue","step","active","_index","nextRow_1","y_2","keyWords","currentEl","sTop","closest","y","animations","showOrHideColumn","isHide","showColumn","hideColumn","showChildsLoading","__colspan__","__childs_loading__","onChildsPageChanged","childsPageChanged","trId2DataId","tr","onKeydownEvent","key","newIdx","blur","trs","trCount","selectedTrIndex","code","_tr","Component","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ResizeService","Renderer2","CommonUtils","ColumnFormatService","ChangeDetectorRef","NgZone","Injector","Output","ContentChildren","FarrisTemplateDirective","ViewChild","PerfectScrollbarComponent","HostListener","shortcuts","injector","allColumnsTitle","showLines","showLinesOnHover","showBorder","striped","loadDataType","emptyMessage","indentSpacing","foldIcon","unfoldIcon","expandLevel","EventEmitter","dblClickExpand","pagerViewMode","showPageList","showPageInfo","showPageNumber","pagerLabelSize","enableContextMenu","contextMenuItems","dblClick","searchButtonText","BehaviorSubject","second","secondItem","onBeforeShowContextMenu","contextMenuDom","rowID","rowNode_1","go$","show","beforeShowContextMenu","tree","pipe","switchMap","menus","viewportW","targetW","focusTargetWidth","get","LocaleService","idService","IdService","uuid","random","slice","FarrisComponentInstanceService","TTBodyComponent","TreeTableTogglerComponent","togglerEl","treeNodeIcon","isShowTriangle","showTriangle","noChilds","hasChildren","expandSub","collapseSub","addNewSub","registerClickEvent","subscriptions","render","removeStyle","reSetLines","ngDoCheck","unAllSubscriptions","lineEls","_renderLines","noLineStyle","tds","renderLines","referEl","createLeafNodeLines","insertBefore","newLineElement","nearLine","border","newLineEl","createElement","isTopNode","l1","l2","dessert","appendChild","listen","onClick","HostBinding","ngzone","TreeTableSelectRowDirective","subscription","onclick","isEnabled","delay","prevent","timer","rowClick","selectRowDisabled","toggleClass","TreeTableHeaderCheckboxComponent","handleClick","checkedChange","TreeTableCheckboxComponent","chk","cls1","DblClickRowDirective","enableDblClick","selectRowDir","ondblclick","dblclickNode","togglerTag","visibility","clearTimeout","decorators","Optional","Self","CustomRowStyleDirective","setRowStyle","sty_1","cls_1","TTCustomCellStyleDirective","setCellStyle","cellCls","styler","rowData","ccs_1","TTResizableColumnDirective","isEnable","resizer","className","resizerMouseDownListener","onMouseDown","onMouseEnter","enableResize","bindDocumentEvents","documentMouseMoveListener","onMouseMove","documentMouseUpListener","onMouseUp","unbindDocumentEvents","removeEventListener","FindInputComponent","keyupEventSub","fromEvent","input","switch","keyCode","debounceTime","valueChanged","focus","onClose","close","onEnter","enterHandler","current","count","HighlightPipe","transform","text","keyword","needSearch","pattern","regex","RegExp","sanitizer","bypassSecurityTrustHtml","replaceContent","match","parseHTML","html","context","innerHTML","cloneNode","strMatch1","strs","strs_1","__values","tslib_1.__values","strs_1_1","aa","rep_old","rep_new","re2","Pipe","name","DomSanitizer","TreetableNodesPagerComponent","setPagerInfo","pagerInfo","showPager","getPagerCount","ceil","isFirstPager","isLastPager","previous","setCurrent","page","pageChange","cd","ChildsLoadingComponent","CellTipsPipe","_i","showTips","getCellTooltipContent","txt","commonUtils","tipContent","getEnumTitleFromColumnOptions","TreeTableModule","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","PerfectScrollbarModule","InputGroupModule","LocaleModule","DataColumnModule","PaginationModule","FarrisContextMenuModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { EventManager } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface HotkeyOptions {\r\n    element: any;\r\n    description: string | undefined;\r\n    keys: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TTHotkeys {\r\n    hotkeys = new Map();\r\n    defaults: Partial<HotkeyOptions> = {\r\n        element: document\r\n    };\r\n\r\n    constructor(private eventManager: EventManager) {\r\n    }\r\n\r\n    addShortcut(options: Partial<HotkeyOptions>) {\r\n        const merged = { ...this.defaults, ...options };\r\n        if (merged.keys.indexOf('ctrl') > -1) {\r\n            merged.keys = merged.keys.replace('ctrl', 'control');\r\n        }\r\n        const event = `keydown.${merged.keys}`;\r\n\r\n        if (merged.description) {\r\n            this.hotkeys.set(merged.keys, merged.description);\r\n        }\r\n\r\n        return new Observable(observer => {\r\n            const handler = (e) => {\r\n                e.preventDefault();\r\n                observer.next(e);\r\n            };\r\n\r\n            const dispose = this.eventManager.addEventListener(merged.element, event, handler);\r\n\r\n            return () => {\r\n                dispose();\r\n                this.hotkeys.delete(merged.keys);\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { flatten } from 'lodash-es';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Injectable()\r\nexport class TreetableService {\r\n\r\n    private selectionSource = new Subject();\r\n    private dblClickSource = new Subject();\r\n    private changeCheckboxStatus = new Subject<RowNode>();\r\n    private removeNode = new Subject<RowNode>();\r\n    private insertNode = new Subject<TreeNode>();\r\n    private updateNode = new Subject<RowNode>();\r\n\r\n\r\n    selectionSource$: Observable<any> = this.selectionSource.asObservable();\r\n    dblClickSource$: Observable<any> = this.dblClickSource.asObservable();\r\n    changeCheckboxStatus$: Observable<RowNode> = this.changeCheckboxStatus.asObservable();\r\n    insertNode$: Observable<TreeNode> = this.insertNode.asObservable();\r\n    removeNode$: Observable<RowNode> = this.removeNode.asObservable();\r\n    updateNode$: Observable<RowNode> = this.updateNode.asObservable();\r\n\r\n    onSelectionChange(selected?: TreeNode[]) {\r\n        this.selectionSource.next(selected);\r\n    }\r\n\r\n    onDblClick(rowNode: RowNode) {\r\n        this.dblClickSource.next(rowNode);\r\n    }\r\n\r\n    onChangeCheckboxStatus(rowNode: RowNode) {\r\n        this.changeCheckboxStatus.next(rowNode);\r\n    }\r\n\r\n    onInsert(treeNode: TreeNode, parent?: TreeNode) {\r\n        this.insertNode.next(treeNode);\r\n    }\r\n\r\n    onRemove(rowNode: RowNode) {\r\n        this.removeNode.next(rowNode);\r\n    }\r\n\r\n    onUpdate(rowNode: RowNode) {\r\n        this.updateNode.next(rowNode);\r\n    }\r\n\r\n    columnIsVisible(col, tt) {\r\n        if (col.visible === undefined) {\r\n            return true;\r\n        }\r\n        if (typeof col.visible === 'function') {\r\n            return col.visible(tt);\r\n        }\r\n\r\n        return col.visible;\r\n    }\r\n\r\n    checkColumnsForGroupHeader(columns: any, tt: any) {\r\n        let _columns = [];\r\n        if (columns && columns.length) {\r\n            _columns = this.getDataColumns(columns);\r\n        }\r\n        return {\r\n            columns: _columns\r\n        };\r\n    }\r\n\r\n\r\n    private getDataFields(cols, length) {\r\n        let i = 0;\r\n        let j = 0;\r\n        cols.forEach(n => {\r\n            const colspan = n.colspan || 1;\r\n            if (i + colspan <= length) {\r\n                i += colspan;\r\n                j++;\r\n            }\r\n        });\r\n        return cols.splice(0, j);\r\n    }\r\n\r\n\r\n    private getDataColumns(cols) {\r\n        if (!cols || !cols.length) {\r\n            return [];\r\n        }\r\n\r\n        let fields = [];\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let _cols = cols[i];\r\n            if (cols[i] && !cols[i].length) {\r\n                _cols = [...fields];\r\n                fields = [];\r\n            }\r\n            _cols.forEach(n => {\r\n                if (!n.field && n.colspan && n.colspan > 1) {\r\n                    this.getDataFields(cols[i + 1], n.colspan).forEach(d => {\r\n                        if (!fields.includes(f => f.field === d.field)) {\r\n                            fields.push(d);\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!fields.includes(f => f.field === n.field)) {\r\n                        fields.push(n);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return fields.filter(n => !n.colspan || n.colspan === 1);\r\n    }\r\n\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:09\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-02 09:08:25\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode } from './types/treenode';\r\n\r\nexport class VirtualizedLoaderService {\r\n    constructor(private tt: TreeTableComponent) {}\r\n\r\n    getTableHeight() {\r\n        return this.tt.height;\r\n    }\r\n    getTableHeaderHeight() {\r\n        return this.tt.headerBox.nativeElement.getBoundingClientRect().height;\r\n    }\r\n    getTableBodyHeight() {\r\n        return this.tt.height - this.getTableHeaderHeight();\r\n    }\r\n    getTableWidth() {\r\n        return this.tt.width;\r\n    }\r\n\r\n    getRowHeight() {\r\n        return this.tt.rowHeight;\r\n    }\r\n\r\n    getRowNodes(scrollTop: number) {\r\n        const minTop = scrollTop;\r\n        const maxTop = minTop + this.getTableHeight();\r\n\r\n        let top = 0;\r\n        const rows = [];\r\n        let topHideHeight = 0;\r\n        let bottomHideHeight = 0;\r\n\r\n        const {rowNodes } = this.tt.state;\r\n        const rowHeight = this.getRowHeight();\r\n\r\n        // console.time('å¾ªç¯ææèç¹');\r\n        for (let i = 0; i < rowNodes.length; i++) {\r\n            const n: RowNode = rowNodes[i];\r\n            if ( !n.visible) {\r\n                continue;\r\n            }\r\n            top += rowHeight;\r\n            if (top + rowHeight < minTop) {\r\n                topHideHeight += rowHeight;\r\n                continue;\r\n            } else {\r\n                if (top > maxTop) {\r\n                    bottomHideHeight += rowHeight;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            rows.push(n);\r\n        }\r\n        // console.timeEnd('å¾ªç¯ææèç¹');\r\n\r\n        return {\r\n            data: rows,\r\n            topHideHeight,\r\n            bottomHideHeight\r\n        };\r\n    }\r\n}\r\n","import { extend } from 'lodash-es';\r\n/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 13:38:51\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-15 15:13:56\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { cloneDeep } from 'lodash-es';\r\nexport class SearchHandle {\r\n    allNodes = [];\r\n    constructor(private ttInstance: TreeTableComponent) {\r\n    }\r\n\r\n    search(field: string, value: string, from: 'client'|'server' = 'client'): any {\r\n        if (!this.allNodes.length) {\r\n            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);\r\n        }\r\n        switch (from) {\r\n            case 'server':\r\n                this.searchOnServer(field, value);\r\n                break;\r\n            default:\r\n                if (value !== '' && value !== undefined) {\r\n                    const values = this.searchOnClient(field, value, this.allNodes);\r\n                    this._updateSerializedValues(values);\r\n                } else {\r\n                    this.ttInstance.updateSerializedValue();\r\n                }\r\n\r\n                if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {\r\n                    this.ttInstance.checkedNodes(this.ttInstance.checkeds.map(n => n.data[this.ttInstance.idField]));\r\n                } else {\r\n                    this.ttInstance.detectChanges();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _updateSerializedValues(visibleItems: RowNode[]) {\r\n        const pids = (visibleItems.map(n => [...n.parents, n.id]) as any).flat();\r\n        const pidArr = Array.from(new Set(pids));\r\n\r\n        const rowNodes =  this.allNodes.filter(n => pidArr.some(item=>item==n.id)).map(r => {\r\n            r.expanded = true;\r\n            return r;\r\n        });\r\n\r\n        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);\r\n        this.ttInstance.state.rowNodes = this.ttInstance.serializedValue;\r\n    }\r\n\r\n    findParent(item: TreeNode, allNodes: any[]) {\r\n        let res = [];\r\n        if (item && allNodes && allNodes.length) {\r\n            const p = allNodes.find(t1 => t1.id === item.data[this.ttInstance.idField]);\r\n            res.push(p);\r\n            if (p.parent) {\r\n                res = res.concat(this.findParent(p.parent, allNodes));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private searchExpression(item: RowNode, value: string, fields: string[] = []) {\r\n        const _fields = fields.length ? fields : this.ttInstance.columns.map(c => c.field);\r\n        const results = _fields.map(f => {\r\n            const targetValue = '' +   this.getValue(f, item.node.data);\r\n            if (targetValue !== undefined) {\r\n                if (typeof targetValue === 'number') {\r\n                    return targetValue === parseFloat(value);\r\n                } else {\r\n                    return targetValue.indexOf(value) > -1;\r\n                }\r\n            } else {\r\n                console.warn(`ä¸å­å¨å ${f}`);\r\n            }\r\n        });\r\n\r\n        return results.reduce((flag, curr) => {\r\n            return flag || curr;\r\n        }, false);\r\n    }\r\n\r\n    private getValue(field, data) {\r\n        if (field) {\r\n            if (field.indexOf('.') > -1) {\r\n                try {\r\n                return field.split('.').reduce( (r, f) => {\r\n                    if (r) {\r\n                        return r[f];\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }, data );\r\n            } catch {\r\n                console.log(field);\r\n            }\r\n            } else {\r\n                return data[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    getFindTextTotal(field: string, value: string, nodes: RowNode[]) {\r\n        let t = 0;\r\n        const getCount = (fields): any => {\r\n            let c = 0;\r\n            nodes.forEach(n => {\r\n                fields.forEach(f => {\r\n                    const targetValue = '' +   this.getValue(f, n.node.data);\r\n                    if (targetValue !== undefined) {\r\n                        if (targetValue.indexOf(value) > -1) {\r\n                            c++;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            return c;\r\n        };\r\n        let _fields = [field];\r\n        if (field === '*') {\r\n            _fields = this.ttInstance.columns.map(c => c.field);\r\n\r\n        } else if (field.indexOf(',') > -1) {\r\n            _fields = field.split(',').map(f => f.trim());\r\n        }\r\n\r\n        t = getCount(_fields);\r\n        return t;\r\n    }\r\n\r\n    searchOnClient(field: string, value: string, nodes: RowNode[]) {\r\n        let resultNodes: RowNode[] = [];\r\n        if (!value) {\r\n            return [];\r\n        }\r\n        if (field === '*') {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value));\r\n        } else if (field.indexOf(',') > -1) {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value, field.split(',').map(f => f.trim())));\r\n        } else {\r\n            value = value.toLowerCase();\r\n            if (field.indexOf('.') === -1) {\r\n                resultNodes = nodes.filter(n => ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1);\r\n            } else {\r\n                resultNodes = nodes.filter(n => ('' + this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1);\r\n            }\r\n        }\r\n\r\n        return resultNodes;\r\n    }\r\n\r\n    findParents(rowNodes, allNodes) {\r\n        let res = [];\r\n        rowNodes.forEach(item => {\r\n            res = res.concat(this.findParent(item.node, allNodes));\r\n        });\r\n\r\n        return Array.from(new Set(res));\r\n    }\r\n\r\n    private resetTreeData(parentNode: RowNode, visibleItems: RowNode[]) {\r\n        let res = [];\r\n        let arr = [];\r\n        if (parentNode === null) {\r\n            arr = visibleItems.filter(t2 => t2.parent === parentNode);\r\n        } else {\r\n            parentNode.node.expanded = true;\r\n            arr = visibleItems.filter(t2 => t2.parent && t2.parent.data[this.ttInstance.idField] === parentNode.id);\r\n            if (!arr.length) {\r\n                parentNode.node.children = [];\r\n            } else {\r\n                parentNode.node.children = arr.map( tn => tn.node );\r\n            }\r\n        }\r\n        arr.forEach( a => {\r\n            a.visible = true;\r\n            res.push(a);\r\n            res = res.concat(this.resetTreeData(a, visibleItems));\r\n        });\r\n        return res;\r\n\r\n\r\n    }\r\n\r\n    private searchOnServer(field: string, value: string) {\r\n\r\n    }\r\n\r\n}\r\n","import { switchMap } from 'rxjs/operators';\r\n/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 18:44:13\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-29 08:41:39\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n\r\nimport {\r\n    Component, OnInit, Input, TemplateRef, Directive,\r\n    ContentChildren, QueryList, AfterContentInit, OnDestroy,\r\n    HostListener, Output, EventEmitter, ElementRef, Injector,\r\n    ViewChild, Optional, Self, AfterViewInit, NgZone, Renderer2, ViewEncapsulation,\r\n    OnChanges, SimpleChanges, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, DoCheck, HostBinding\r\n} from '@angular/core';\r\n\r\nimport { FarrisTemplateDirective, CommonUtils, IdService, FarrisComponentInstanceService } from '@farris/ui-common';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { ColumnFormatService, ColumnFormatter } from '@farris/ui-common/column';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';\r\n\r\nimport { Subscription, Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { cloneDeep, extend, remove } from 'lodash-es';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nimport { TreeTableColumn } from './types/treetable-column';\r\nimport { VirtualizedLoaderService } from './virtualized-loader.service';\r\nimport { TreeNode, RowNode, SelectEventArgs } from './types/treenode';\r\nimport { TreetableService } from './treetable.service';\r\nimport { SearchHandle } from './search.handle';\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { PaginationInstance } from '@farris/ui-pagination';\r\n\r\n\r\n/** ååæ ¼ç¹äºä»¶åæ° */\r\nexport interface CellClickParam {\r\n    event: Event;\r\n    col: TreeTableColumn;\r\n    node: TreeNode;\r\n}\r\n/** èç¹é©éäºä»¶ */\r\nexport interface NodeCheckedParam {\r\n    originalEvent?: any;\r\n    node: TreeNode | TreeNode[];\r\n    nodes?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport interface NodeSelectedParam {\r\n    originalEvent?: Event;\r\n    node: TreeNode | TreeNode[];\r\n    type?: 'row' | 'checkbox';\r\n    index?: number;\r\n    parents?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport type IconFieldType = {\r\n    leaf?: string,\r\n    expand?: string,\r\n    collapse?: string\r\n} | string;\r\n\r\n\r\n@Directive({\r\n    selector: 'tt-column, [tt-column]'\r\n})\r\nexport class TreeTableColumnDirective {\r\n    @Input() field: string;\r\n    @Input() title: string;\r\n    @Input() width?: number;\r\n    @Input() hAlign?: string;\r\n    @Input() align?: string;\r\n    @Input() formatter?: () => any | ColumnFormatter;\r\n}\r\n\r\n@Component({\r\n    selector: 'farris-treetable',\r\n    templateUrl: 'treetable.component.html',\r\n    styles: [`\r\n        .farris-treetable {\r\n            position: relative;\r\n        }\r\n        .resizable-column {\r\n            background-clip: padding-box;\r\n            position: relative;\r\n        }\r\n        .column-resizer {\r\n            display: block;\r\n            position: absolute!important;\r\n            top: 0;\r\n            right: 0;\r\n            margin: 0;\r\n            width: .5em;\r\n            height: 100%;\r\n            padding: 0;\r\n            cursor: col-resize;\r\n            border: 1px solid transparent;\r\n        }\r\n        .column-resizer-helper {\r\n            width: 1px;\r\n            position: absolute;\r\n            z-index: 10;\r\n            display: none;\r\n            border-right: 1px dashed #1890ff;\r\n        }\r\n\r\n        .farris-treetable-disabled .farris-treetable-body .table tr{\r\n            opacity: 0.4;\r\n            cursor: not-allowed;\r\n        }\r\n        .farris-treetable-disabled .table tr.farris-table-selectedrow{\r\n            opacity: 1;\r\n            cursor: default;\r\n        }\r\n\r\n        .custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after {\r\n            background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\");\r\n            background-color: #1890ff;\r\n        }\r\n        .unselectable-text {\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            -o-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none\r\n        }\r\n        .search-highlight {\r\n            background-color: #FFFF1F;\r\n        }\r\n        .search-highlight.active{\r\n            background-color: #FF901C;\r\n        }\r\n\r\n    `],\r\n    exportAs: 'treeTable',\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeTableComponent implements OnInit, AfterContentInit, AfterViewInit, OnChanges, AfterViewChecked, OnDestroy {\r\n    id = '';\r\n    /** å®½åº¦ */\r\n    @Input() width = 500;\r\n    /** é«åº¦ */\r\n    @Input() height = 400;\r\n\r\n    @Input() showFilterBar = false;\r\n    @Input() headerHeight = 35;\r\n    /** è¡¨å¤´æè¡ */\r\n    @Input() headerWrap = false;\r\n    /** è¡é« */\r\n    @Input() rowHeight = 29;\r\n    /**\r\n     * åä¿¡æ¯\r\n     */\r\n    @Input() columns = [];\r\n    private _groupColumns = [];\r\n    @Input() set groupColumns(cols) {\r\n        this._groupColumns = cols || [];\r\n        this.columns = this.ttService.checkColumnsForGroupHeader(cols.map(cs => [...cs]), this).columns;\r\n    }\r\n    get groupColumns() {\r\n        return this._groupColumns;\r\n    }\r\n    /** å¯ç¨å¤è¡¨å¤´ */\r\n    @Input() useGroupHeader = false;\r\n\r\n    @Input() fitColumns = true;\r\n\r\n    @Input() searchFields: { label: string, value: string }[];\r\n\r\n    @Input() allColumnsTitle = 'ææå';\r\n\r\n    /** æ¾ç¤ºè¿æ¥çº¿ï¼é»è®¤ä¸º false */\r\n    @Input() showLines = false;\r\n    @Input() showLinesOnHover = false;\r\n    /**\r\n     * æ¯å¦å¯ç¨å¤éã é»è®¤ä¸ºåé\r\n     */\r\n    @Input() multiSelect = false;\r\n    @Input() singleSelect = true;\r\n    /** å¯ç¨å¤éåï¼æ¯å¦æ¾ç¤ºcheckbox */\r\n    @Input() showCheckbox = false;\r\n    /**\r\n     * ä¸»é®å­æ®µ\r\n     */\r\n    @Input() idField: string;\r\n\r\n    /** æ¾ç¤ºè¾¹æ¡çº¿ */\r\n    @Input() showBorder = true;\r\n\r\n    @Input() showCheckAll = true;\r\n\r\n    @Input() showHeader = true;\r\n    /** å¯ç¨æé©¬çº¿ */\r\n    @Input() striped = false;\r\n    /** å¯ç¨é¼ æ åè¿ææ */\r\n    @Input() hovered = true;\r\n    /** ç¦ç¨ã ç¦ç¨æ¶ä¸åè®¸éä¸­è¡ */\r\n    @Input() disabled = false;\r\n    /** æ°æ®å è½½æ¹å¼; é»è®¤å¼ ä¸º all\r\n     * - all: å¨é¨å è½½\r\n     * - async: åå±å è½½\r\n     */\r\n    @Input() loadDataType: 'all' | 'async' = 'all';\r\n    /** åºå®è¡¨å¤´ */\r\n    @Input() fixedHeader = false;\r\n\r\n    /** å½å¤éæ¶ï¼éä¸­å½åè¡å¹¶é©é */\r\n    @Input() checkOnSelect = false;\r\n    /** å½å¤éæ¶ï¼é©éå¹¶éä¸­å½åè¡ */\r\n    @Input() selectOnCheck = false;\r\n    /**\r\n     * å¯ç¨å¤éæ¶ï¼æ­¤å±æ§ä¸ºtrue æ¶ï¼ä»å½åè¡éä¸­\r\n     */\r\n    @Input() onlySelectSelf = false;\r\n\r\n    /** å¯ç¨åå®½è°æ´ */\r\n    @Input() resizableColumns = true;\r\n    /** è®¾ç½®ä¸ºtrueæ¶èªéåºç¶å®¹çå°ºå¯¸ */\r\n    @Input() fit = false;\r\n\r\n    /** å¯ç¨çº§èéä¸­åè½ */\r\n    @Input() cascadeCheck = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeDown = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeUp = true;\r\n    /** ç©ºæ°æ®æ¶ï¼æ¾ç¤ºçæç¤ºææ¬ */\r\n    @Input() emptyMessage = 'ææ æ°æ®';\r\n    /** ç¼©è¿é´è·ï¼é»è®¤ä¸º 16px */\r\n    @Input() indentSpacing = 16;\r\n\r\n    /**\r\n     * åå»è¡éä¸­åï¼å¨æ¬¡ç¹å»ä¸ä¼è¢«åæ¶éä¸­ç¶æ;\r\n     */\r\n    @Input() keepSelect = true;\r\n    /** èæå è½½ */\r\n    @Input() virtualized = false;\r\n    /**\r\n     * ä»åè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯ä¼ åçè®¾ç½®ï¼å¦ææå¡å¨ç«¯æ²¡æè®¾ç½®ï¼åä¸ no ä¿æä¸è³ï¼\r\n     * - yes: å¦æå®¢æ·ç«¯è®¾ç½®ä¸º `yes`, æå¡å¨ç«¯çè®¾ç½®å¤±æï¼\r\n     * - no: åè®¸éæ©ææèç¹ï¼æå¡å¨ç«¯è®¾ç½®å¤±æ\r\n     */\r\n    @Input() onlySelectLeaf: boolean | 'default' | 'yes' | 'no' = 'default';\r\n\r\n    /** æ¾ç¤ºå¾æ  */\r\n    @Input() showIcon = false;\r\n    /** å¶å­èç¹å¾æ  */\r\n    @Input() leafIcon = 'file';\r\n    /** èç¹å±å¼å¾æ  */\r\n    @Input() expandIcon = 'folder-open';\r\n    /** èç¹æå å¾æ  */\r\n    @Input() collapseIcon = 'folder';\r\n\r\n    @Input() foldIcon = 'treetable-toggler';\r\n    @Input() unfoldIcon = 'extanded treetable-toggler';\r\n\r\n    /** å¯ç¨èç¹å¾æ ä»æ°æ®ä¸­è·åã é»è®¤ä¸º false */\r\n    @Input() useIconFromData = false;\r\n    /** å½æ°æ®æºä¸­iconæªè®¾ç½®æ¶ä½¿ç¨åç½®ICON. é»è®¤ä¸º true */\r\n    @Input() whenDataIconEmptyUseDefault = true;\r\n    /** ä»æ°æ®æºå­æ®µä¸­è·åå¾æ  */\r\n    @Input() iconField: IconFieldType = '';\r\n    /** å¾æ èªå®ä¹æ ·å¼ */\r\n    @Input() iconCls: string;\r\n\r\n    /** å¯ç¨è¿ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n    /** æåºå­æ®µ */\r\n    @Input() sortName: string;\r\n    /** æåºæ¹å¼ asc | desc */\r\n    @Input() sortOrder: string;\r\n    /** åè®¸å¤åæåº */\r\n    @Input() multiSort: boolean;\r\n\r\n    @Input() beforeSortColumn: (field: string, order: string) => Observable<boolean>;\r\n\r\n    @Input() rowStyler: (treeNode: TreeNode, field?: string) => any;\r\n    @Input() cellStyler: (treeNode: TreeNode, field: string) => any;\r\n\r\n    /** å¯ç¨åç«¯ææ¬æ¥æ¾ */\r\n    @Input() enableFindText = false;\r\n    /** ææ¬æ¥è¯¢å­æ®µ, å¼ç¨ */\r\n    @Input() findField: string;\r\n    // æ åè¡¨é»è®¤å±å¼å±çº§ã -1ï¼ ä¸å±å¼ï¼ 0ï¼ å¨é¨å±å¼ï¼ >0:  å±å¼å°æå®çº§æ°ï¼\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() selectValue = '';\r\n    @Output() selectValueChange = new EventEmitter();\r\n    /** å¯ç¨åå»å±å¼èç¹ */\r\n    @Input() dblClickExpand = true;\r\n\r\n    /** éä¸­èç¹IDæ°ç» */\r\n    @Input() selectValues = [];\r\n    @Output() selectValuesChange = new EventEmitter();\r\n    /** æ¯å¦ç¦æ­¢æè¡ï¼é»è®¤ä¸æè¡ */\r\n    @Input() nowrap = true;\r\n\r\n    @Input() checkValues = [];\r\n    @Output() checkValuesChange = new EventEmitter();\r\n\r\n\r\n    @Input() beforeNodeSelected: (e: any) => Observable<boolean>;\r\n    @Input() beforeNodeUnSelected: () => Observable<boolean>;\r\n\r\n    @Input() beforeNodeChecked: () => Observable<boolean>;\r\n    @Input() beforeNodeUnChecked: () => Observable<boolean>;\r\n\r\n    @Input() beforeCheckAll: (e?: any) => Observable<boolean>;\r\n    @Input() beforeUnCheckAll: (e?: any) => Observable<boolean>;\r\n\r\n    @Input() beforeClickNode: (e?: any) => Observable<boolean>;\r\n\r\n    /** åé¡µä¿¡æ¯ */\r\n    @Input() pagination = false;\r\n    /** åé¡µå è½½å­èç¹æ°æ® */\r\n    @Input() paginationForChildren = false;\r\n    /** åé¡µæ¡æ¾ç¤ºæ¨¡å¼ï¼ default, simple */\r\n    @Input() pagerViewMode = 'default';\r\n    /** å¯ç¨æå¡å¨ç«¯åé¡µ */\r\n    @Input() pagerOnServer = true;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** å½åé¡µç  */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** åé¡µåºé«åº¦ */\r\n    @Input() pagerHeight = 56;\r\n    /** æ¾ç¤ºæ¯é¡µè®°å½æ° */\r\n    @Input() showPageList = false;\r\n    /** æ¾ç¤ºåé¡µä¿¡æ¯ */\r\n    @Input() showPageInfo = true;\r\n    /** æ¾ç¤ºé¡µç  */\r\n    @Input() showPageNumber = true;\r\n    /** æ¾ç¤ºé¡µç æå¤§æ°é */\r\n    @Input() pagerLabelSize = 7;\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n\r\n\r\n    @Input() enableContextMenu = false;\r\n    @Input() contextMenuItems = [];\r\n    @Input() beforeShowContextMenu: (e: { [key: string]: any }) => Observable<{ show: boolean, menus: Array<any>}>;\r\n\r\n    @Output() pageSizeChanged = new EventEmitter();\r\n    @Output() pageChanged = new EventEmitter();\r\n\r\n    /** æåºå */\r\n    @Output() columnSorted = new EventEmitter();\r\n    /** éä¸­äºä»¶ */\r\n    @Output() nodeSelected: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n    /** åæ¶éä¸­äºä»¶ */\r\n    @Output() nodeUnSelect: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n\r\n    /** é©é */\r\n    @Output() nodeChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n    /** åæ¶é©é */\r\n    @Output() nodeUnChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n\r\n    /** å¨éäºä»¶ */\r\n    @Output() checkAll: EventEmitter<any> = new EventEmitter();\r\n    /** åæ¶å¨é */\r\n    @Output() unCheckAll: EventEmitter<any> = new EventEmitter();\r\n    /** æ¥è¯¢ */\r\n    @Output() search: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() dblClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() loadedData: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() expand: EventEmitter<TreeNode> = new EventEmitter();\r\n    @Output() collapse: EventEmitter<TreeNode> = new EventEmitter();\r\n\r\n    @Output() expandAllNodes: EventEmitter<any> = new EventEmitter();\r\n    @Output() collapseAllNodes: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() appendNew: EventEmitter<any> = new EventEmitter();\r\n    @Output() removed: EventEmitter<any> = new EventEmitter();\r\n    @Output() updated: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() clearSearchValue = new EventEmitter();\r\n    @Output() cellClick = new EventEmitter<CellClickParam>();\r\n    @Output() childsPageChanged = new EventEmitter();\r\n\r\n\r\n    serializedValue: RowNode[];\r\n\r\n    _data: TreeNode[] = [];\r\n    get data(): any[] {\r\n        return this._data;\r\n    }\r\n    @Input() set data(val: any[]) {\r\n        this._data = val;\r\n        this.updateSerializedValue();\r\n        this.initNodeStatus();\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n        this.loadedData.emit();\r\n    }\r\n    /** æ ¹æ®åå®¹èªå¨å®½åº¦ï¼é»è®¤ false;\r\n     * æ­¤å±æ§å¼å¯åï¼èªå¨åå®½å¤±æ\r\n     */\r\n    @Input() autoWidth = false;\r\n\r\n    @ContentChildren(FarrisTemplateDirective) templates: QueryList<FarrisTemplateDirective>;\r\n    @ContentChildren(TreeTableColumnDirective) columnsRef: QueryList<TreeTableColumnDirective>;\r\n\r\n    @ViewChild('headerBox') headerBox: ElementRef;\r\n    @ViewChild('resizerHelper') resizerHelperVC: ElementRef;\r\n    @ViewChild('headerTable') headerTable: ElementRef;\r\n    @ViewChild('bodyTable') bodyTable: ElementRef;\r\n\r\n    @ViewChild('inputGroup') inputGroup: InputGroupComponent;\r\n    @ViewChild(PerfectScrollbarComponent) psRef?: PerfectScrollbarComponent;\r\n\r\n    private headerCheckboxCmp: TreeTableHeaderCheckboxComponent;\r\n    @ViewChild('allCheckbox') set allCheckbox(content: TreeTableHeaderCheckboxComponent) {\r\n        this.headerCheckboxCmp = content;\r\n    }\r\n\r\n    @ViewChild('nodespagerbar') nodesPagerBar: TemplateRef<any>;\r\n\r\n    /**\r\n     * è¡¨å¤´æ¨¡æ¿\r\n     */\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    /**\r\n     * è¡¨ä½æ¨¡æ¿\r\n     */\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    /** éä¸­é¡¹éå */\r\n    private _selections = [];\r\n    get selections(): TreeNode[] {\r\n        return this._selections;\r\n    }\r\n    set selections(vals: TreeNode[]) {\r\n        if (vals && vals.length) {\r\n            // è¿æ»¤ææ°æ®æºä¸­ä¸å­å¨èç¹\r\n            this._selections = vals.filter(tn => tn && this.findRowNode(tn.id));\r\n            const ids = this._selections.map(tn => tn.id);\r\n\r\n            if (ids.length !== this.selectValues.length ||\r\n                (ids.length === this.selectValues.length && this.difference(ids, this.selectValues).length)) {\r\n                this.selectValues = ids;\r\n                setTimeout(() => {\r\n                    this.selectValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._selections = [];\r\n            this.selectValues = [];\r\n            this.selectValuesChange.emit([]);\r\n\r\n        }\r\n    }\r\n    /**\r\n     * éä¸­é¡¹ç´¢å¼\r\n     */\r\n    selectRowIndex = -1;\r\n\r\n    /** éä¸­å½åè¡ */\r\n    private _selectedRow = null;\r\n    get selectedRow(): TreeNode {\r\n        return this._selectedRow;\r\n    }\r\n\r\n    set selectedRow(treeNode: TreeNode) {\r\n        this._selectedRow = treeNode;\r\n        if (treeNode) {\r\n            if (this.selectValue !== treeNode.id) {\r\n                this.selectValue = treeNode.id;\r\n                this.selectValueChange.emit(treeNode.id);\r\n            }\r\n        } else {\r\n            this.selectValue = null;\r\n            this.selectValueChange.emit(null);\r\n        }\r\n    }\r\n\r\n\r\n    /** é©éçè®°å½éå */\r\n    private _checkeds = [];\r\n    get checkeds(): TreeNode[] {\r\n        return this._checkeds;\r\n    }\r\n    set checkeds(treeNodes: TreeNode[]) {\r\n        if (treeNodes && treeNodes.length) {\r\n            this._checkeds = treeNodes.filter(tn => this.findRowNode(tn.id));\r\n            const ids = this._checkeds.map(tn => tn.id);\r\n\r\n            if (ids.length !== this.checkValues.length ||\r\n                (ids.length === this.checkValues.length && this.difference(ids, this.checkValues).length)) {\r\n                this.checkValues = ids;\r\n                setTimeout(() => {\r\n                    this.checkValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._checkeds = [];\r\n            this.checkValues = [];\r\n            this.checkValuesChange.emit([]);\r\n        }\r\n    }\r\n\r\n    // æå¤å±DIV\r\n    containerElement: HTMLDivElement;\r\n\r\n    // è®°å½åæå¨åçä½ç½®\r\n    lastResizerHelperX: number;\r\n\r\n    searchData = { field: '*', value: '' };\r\n\r\n    scorllBodyHeight: number;\r\n\r\n    searchHandle: SearchHandle;\r\n    searchButtonText = '<i class=\"f-icon f-icon-search\"></i>';\r\n    /** æ¾ç¤ºæ¥è¯¢å·¥å·æ¡ */\r\n    showFindInput = false;\r\n\r\n    private isDataChanged = false;\r\n\r\n    scrollLoader: VirtualizedLoaderService;\r\n    topHideHeight = 0;\r\n    bottomHideHeight = 0;\r\n    state = {\r\n        rowNodes: [],\r\n        scrollY: 0,\r\n        scrollX: 0\r\n    };\r\n\r\n    /** å¾æ¥è¯¢çææ¬ */\r\n    findValue = '';\r\n    /** ç»ææ»æ° */\r\n    findCount = 0;\r\n    /** å½åç´¢å¼ */\r\n    findCurrent = 0;\r\n    /** å­å¨ææ¬æ¥è¯¢ç»æ */\r\n    findResult = [];\r\n    private ro: ResizeObserver | null = null;\r\n    private findKeysHandler = null;\r\n    private _hotKeys: TTHotkeys = null;\r\n    localeService: LocaleService;\r\n    private idService: IdService;\r\n    private styleSheetId = 'treetable-style-';\r\n    private styleElement;\r\n    paginationOptions: PaginationInstance = {\r\n        id: 'Farris-TreeTable-Pagination_',\r\n        itemsPerPage: this.pageSize,\r\n        currentPage: this.pageIndex,\r\n        pageList: this.pageList,\r\n        totalItems: this.total,\r\n        remote: this.pagerOnServer\r\n    };\r\n\r\n    selectNodeChangedSubject = new BehaviorSubject(null);\r\n    private _UUID = '';\r\n    // æ¯å¦æåºå®å\r\n    fixedColumns = false;\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    difference = (first: any[], second: any[]) => first.filter(item => !second.some(secondItem => secondItem == item));\r\n    constructor(\r\n        public ttService: TreetableService, public el: ElementRef,\r\n        public resizeSer: ResizeService, private renderer: Renderer2,\r\n        public utils: CommonUtils, public colFormatSer: ColumnFormatService,\r\n        private shortcuts: TTHotkeys, private cdRef: ChangeDetectorRef,\r\n        private ngZone: NgZone, private injector: Injector) {\r\n        this.searchHandle = new SearchHandle(this);\r\n        this.scrollLoader = new VirtualizedLoaderService(this);\r\n        if (this.injector) {\r\n            this._hotKeys = this.injector.get(TTHotkeys, null);\r\n            this.localeService = this.injector.get(LocaleService, null);\r\n            this.idService = this.injector.get(IdService, null);\r\n        }\r\n        if (this.idService) {\r\n            this._UUID = this.idService.uuid();\r\n            this.styleSheetId += this.idService.uuid();\r\n        } else {\r\n            this._UUID = ('' + Math.random()).slice(2);\r\n            this.styleSheetId += ('' + Math.random()).slice(2);\r\n        }\r\n\r\n        this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);\r\n    }\r\n\r\n    private checkOptons() {\r\n        // å¯ç¨æ°æ®æè¡åï¼èææ¸²æåè½å¤±æ\r\n        if (!this.nowrap) {\r\n            this.virtualized = false;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.reSetSize();\r\n            this.setScorllBodyHeight();\r\n        });\r\n\r\n        if (this.multiSelect) {\r\n            this.singleSelect = false;\r\n        }\r\n\r\n        if (this.singleSelect && this.showCheckbox) {\r\n            this.checkOnSelect = true;\r\n            this.selectOnCheck = true;\r\n        }\r\n\r\n        if (!this.beforeSortColumn) {\r\n            this.beforeSortColumn = () => of(true);\r\n        }\r\n\r\n        if (this.fit) {\r\n            this.renderer.addClass(this.el.nativeElement, 'f-utils-fill-flex-column');\r\n            const parentEl = this.el.nativeElement.parentElement || this.el.nativeElement.parentNode;\r\n            if (parentEl) {\r\n                // this.renderer.addClass(parentEl, 'f-utils-fill');\r\n                this.renderer.setStyle(parentEl, 'overflow', 'hidden');\r\n            }\r\n        }\r\n\r\n        if (!this.beforeClickNode) {\r\n            this.beforeClickNode = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeCheckAll) {\r\n            this.beforeCheckAll = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeUnCheckAll) {\r\n            this.beforeUnCheckAll = () => of(true);\r\n        }\r\n\r\n        if (this.autoWidth) {\r\n            this.fitColumns = false;\r\n            this.resizableColumns = false;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.id = 'Treetable-' + this._UUID;\r\n        // åå»º stylesheet\r\n        this.styleElement = this.utils.createStyleSheet(this.styleSheetId);\r\n        this.checkColumnOption();\r\n\r\n        this.checkOptons();\r\n\r\n        if (this.ngZone) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                if (this.el.nativeElement.parentElement) {\r\n                    this.ro = new ResizeObserver((entries, observer) => {\r\n                        const { width, height } = entries[0].contentRect;\r\n\r\n                        if (this.fit) {\r\n                            this.resize({ width, height });\r\n                            // if (Math.abs(height - this.height) > 10) {\r\n                            // }\r\n                        }\r\n                    });\r\n                    this.ro.observe(this.el.nativeElement.parentElement);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.paginationOptions = this.initPaginationOptions();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ro) {\r\n            if (this.el.nativeElement.parentElement) {\r\n                this.ro.unobserve(this.el.nativeElement.parentElement);\r\n            }\r\n            this.ro = null;\r\n        }\r\n\r\n        if (this.findKeysHandler) {\r\n            this.findKeysHandler.unsubscribe();\r\n        }\r\n\r\n        this.utils.removeStyleSheet(this.styleSheetId);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.data && !changes.data.isFirstChange()) {\r\n            this.isDataChanged = changes.data.currentValue !== changes.data.previousValue;\r\n        }\r\n\r\n        if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {\r\n            this.singleSelect = !changes.multiSelect.currentValue;\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.selectOnCheck = true;\r\n                this.checkOnSelect = true;\r\n            }\r\n        }\r\n\r\n        if (changes.disabled && !changes.disabled.isFirstChange()) {\r\n            this.hovered = !changes.disabled.currentValue;\r\n        }\r\n\r\n        if (changes.enableFindText && !changes.enableFindText.isFirstChange()) {\r\n            this.setFindText(changes.enableFindText.currentValue);\r\n        }\r\n\r\n        if (changes.selectValue && !changes.selectValue.isFirstChange()) {\r\n            this.selectNode(changes.selectValue.currentValue);\r\n        }\r\n        if (changes.selectValues && !changes.selectValues.isFirstChange()) {\r\n            this.selectNodes(changes.selectValues.currentValue);\r\n        }\r\n        if (changes.checkValues && !changes.checkValues.isFirstChange()) {\r\n            this.checkedNodes(changes.checkValues.currentValue);\r\n        }\r\n\r\n        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                currentPage: this.pageIndex\r\n            });\r\n        }\r\n\r\n        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                itemsPerPage: this.pageSize\r\n            });\r\n        }\r\n\r\n        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                pageList: this.pageList\r\n            });\r\n        }\r\n\r\n        if (changes.total !== undefined && !changes.total.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                totalItems: this.total\r\n            });\r\n        }\r\n\r\n        if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {\r\n            this.setTableWidth(this.allColumnsWidth());\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.isDataChanged) {\r\n        //     this.loadedData.emit();\r\n        //     this.isDataChanged = false;\r\n        // } else {\r\n        //     this.ngZone.runOutsideAngular(() => {\r\n        //         if (this.psRef) {\r\n        //             this.psRef.directiveRef.update();\r\n        //         }\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (this.columnsRef.length) {\r\n            this.columns = this.ttc2columns(this.columnsRef);\r\n\r\n            this.columnsRef.changes.subscribe((d: any) => {\r\n                this.columns = this.ttc2columns(d);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');\r\n        this.loadedData.emit();\r\n        this.registerShortcuts();\r\n\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n        this.setRightFixedColumnShadow();\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n    }\r\n\r\n    private setNewColumnsWidth() {\r\n        if (!this.autoWidth) {\r\n            return;\r\n        }\r\n        const newColWidth: any = {};\r\n        let headerCells = [];\r\n        let firstRowCells = [];\r\n        if (this.showHeader && this.headerTable) {\r\n            headerCells = Array.from<HTMLElement>(this.headerTable.nativeElement.querySelectorAll('th'));\r\n        }\r\n        if (this.serializedValue && this.serializedValue.length && this.bodyTable) {\r\n            firstRowCells = Array.from<HTMLElement>(this.bodyTable.nativeElement.querySelector('tr').querySelectorAll('td'));\r\n        }\r\n\r\n        firstRowCells.forEach((td: any, index) => {\r\n            // console.log(td);\r\n            const fieldName = td.getAttribute('field');\r\n            let colWidth = td.getBoundingClientRect().width.toFixed(2);\r\n            newColWidth[fieldName] = colWidth;\r\n\r\n            const col = this.columns.find(c => c.field === fieldName);\r\n            if (col && col.width !== undefined) {\r\n                colWidth = colWidth > col.width ? colWidth : col.width;\r\n                td.style.minWidth = colWidth + 'px';\r\n            }\r\n            headerCells[index].style.width = colWidth + 'px';\r\n        });\r\n    }\r\n\r\n    columnIsVisible(col) {\r\n        return this.ttService.columnIsVisible(col, this);\r\n    }\r\n\r\n\r\n    private columnCssName(n: any) {\r\n        return `#${this.id} .treetable-cell[field=\"${n.field}\"], #${this.id} .treetable-header-cell[field=\"${n.field}\"]:not(.group-header-cell)`;\r\n    }\r\n\r\n    // æåºå®åçé¡ºåºæåº\r\n    private sortColumnsByFixed(updateColumns = true) {\r\n        const fixedLeft = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedCenter = this.columns.filter(n => !n.fixed || n.fixed === 'center');\r\n        const fixedRight = this.columns.filter(n => n.fixed === 'right');\r\n\r\n        if (fixedLeft && fixedLeft.length) {\r\n            fixedLeft.forEach((n, index) => {\r\n                n.left = index ? fixedLeft[index - 1].width : 0;\r\n            });\r\n        }\r\n\r\n        if (fixedRight && fixedRight.length) {\r\n\r\n            let rightWidthTotal = fixedRight.reduce((r, c) => {\r\n                return r + c.width;\r\n            }, 0);\r\n\r\n            fixedRight.forEach((n, index) => {\r\n                rightWidthTotal -= n.width;\r\n                n.right = rightWidthTotal;\r\n            });\r\n        }\r\n\r\n        if (updateColumns) {\r\n            this.columns = fixedLeft.concat(fixedCenter).concat(fixedRight);\r\n        }\r\n    }\r\n\r\n    private checkColumnOption() {\r\n        const cssRules = [];\r\n        if (!this.fitColumns) {\r\n            this.sortColumnsByFixed();\r\n        }\r\n\r\n        this.columns.forEach((n, i) => {\r\n            if (n.visible === undefined) {\r\n                n.visible = true;\r\n            }\r\n\r\n            if (n['halign']) {\r\n                n.hAlign = n['halign'];\r\n            }\r\n\r\n            if (n.width === undefined) {\r\n                n.width = 100;\r\n            }\r\n\r\n            if (!n.id) {\r\n                n.id = 'treetable-header-' + (n.field || i);\r\n            }\r\n        });\r\n\r\n        const colWidthTotal = this.allColumnsWidth();\r\n        let fixedCols = 0;\r\n\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightColumns[0]['rightShadowCol'] = true;\r\n            fixedRightColumns[fixedRightColumns.length - 1]['lastColumn'] = true;\r\n        } else {\r\n            if (this.columns && this.columns.length) {\r\n                this.columns[this.columns.length - 1]['lastColumn'] = true;\r\n            }\r\n        }\r\n\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            fixedLeftColumns[fixedLeftColumns.length - 1]['leftShadowCol'] = true;\r\n        }\r\n\r\n        this.columns.forEach((n, index) => {\r\n            const isVisible = this.columnIsVisible(n);\r\n            const ruleName = this.columnCssName(n);\r\n\r\n            const cssRule = this.utils.getCssRule(ruleName, this.styleElement.sheet);\r\n            if (!cssRule) {\r\n                let stylecss = ruleName + ' { ';\r\n                stylecss += isVisible ? '' : 'display: none;';\r\n\r\n                if (this.fitColumns) {\r\n                    stylecss += `width: ${(n.width / colWidthTotal * 100).toFixed(2)}%;`;\r\n                } else {\r\n                    stylecss += `width: ${n.width}px;`;\r\n\r\n                    if (n.fixed) {\r\n                        if (n.fixed === 'left') {\r\n                            stylecss += `left: ${n.left}px`;\r\n                            fixedCols++;\r\n                        }\r\n\r\n                        if (n.fixed === 'right') {\r\n                            stylecss += `right: ${n.right}px`;\r\n                            fixedCols++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                stylecss += '}';\r\n                cssRules.push(stylecss);\r\n            } else {\r\n                cssRule.style.display = isVisible ? '' : 'none';\r\n            }\r\n        });\r\n\r\n        if (cssRules.length) {\r\n            this.utils.appendCssRules(cssRules, this.styleElement.sheet);\r\n        }\r\n\r\n        this.setTableWidth(colWidthTotal);\r\n\r\n\r\n        // å¯ç¨åé¡µå è½½å­èç¹\r\n        if (this.paginationForChildren) {\r\n            this.columns.push({\r\n                field: '__nodespagerbar__',\r\n                width: 100,\r\n                title: '',\r\n                align: 'center',\r\n                template: this.nodesPagerBar\r\n            });\r\n        }\r\n\r\n        this.fixedColumns = !!fixedCols;\r\n    }\r\n\r\n    private setTableWidth(colWidthTotal: number) {\r\n        if (this.headerTable && this.bodyTable) {\r\n            if (!this.fitColumns) {\r\n                this.headerTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n                this.bodyTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n            } else {\r\n                this.headerTable.nativeElement.style.width = '100%';\r\n                this.bodyTable.nativeElement.style.width = '100%';\r\n            }\r\n        }\r\n    }\r\n\r\n    private allColumnsWidth() {\r\n        return this.columns.reduce((r, c) => {\r\n            if (this.columnIsVisible(c)) {\r\n                return r + c.width;\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        }, 0);\r\n    }\r\n\r\n    onPageChange($event) {\r\n        this.pageChanged.emit($event);\r\n    }\r\n\r\n    onPageSizeChange($event) {\r\n        this.pageSizeChanged.emit($event);\r\n    }\r\n\r\n    updatePageInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number, pageList?: number[] }) {\r\n        if (pageInfo && Object.keys(pageInfo).length) {\r\n\r\n            const obj: any = {};\r\n            if (pageInfo.total !== undefined) {\r\n                obj.totalItems = pageInfo.total;\r\n            }\r\n\r\n            if (pageInfo.pageIndex !== undefined) {\r\n                obj.currentPage = pageInfo.pageIndex;\r\n            }\r\n\r\n            if (pageInfo.pageSize !== undefined) {\r\n                obj.itemsPerPage = pageInfo.pageSize;\r\n            }\r\n\r\n            if (pageInfo.pageList !== undefined) {\r\n                obj.pageList = pageInfo.pageList;\r\n            }\r\n\r\n            this.paginationOptions = Object.assign(this.paginationOptions, obj);\r\n        }\r\n    }\r\n\r\n\r\n    private initPaginationOptions() {\r\n        return {\r\n            id: 'Farris-TreeTable-Pagination_' + this._UUID,\r\n            itemsPerPage: this.pageSize,\r\n            currentPage: this.pageIndex,\r\n            pageList: this.pageList,\r\n            totalItems: this.total,\r\n            remote: this.pagerOnServer\r\n        };\r\n    }\r\n\r\n    getNodeText(col: TreeTableColumn, rowdata) {\r\n        if (col.isMultilingualField) {\r\n            const val = this.utils.getValue(col.field, rowdata);\r\n            if (this.localeService) {\r\n                const localeId = this.localeService.localeId || 'zh-CHS';\r\n                if (val && typeof val === 'object' && Object.keys(val).length > 0) {\r\n                    return val[localeId];\r\n                } else {\r\n                    return val;\r\n                }\r\n            }\r\n        } else {\r\n            return this.utils.getValue(col.field, rowdata, true);\r\n        }\r\n    }\r\n\r\n    private initNodeStatus() {\r\n        if (!this.singleSelect) {\r\n            if (this.checkValues && this.checkValues.length) {\r\n                this.checkedNodes(this.checkValues, false, false);\r\n            }\r\n            if (this.selectValues && this.selectValues.length && !this.onlySelectSelf) {\r\n                this.selectNodes(this.selectValues, false, false);\r\n            }\r\n        } else {\r\n            if (this.selectValue) {\r\n                this.selectNode(this.selectValue, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ³¨åå¿«æ·é® */\r\n    private registerShortcuts() {\r\n        if (this.showFilterBar && this._hotKeys) {\r\n            this._hotKeys.addShortcut({ keys: 'enter', element: this.inputGroup.textbox.nativeElement }).subscribe(() => {\r\n                this.onSearch();\r\n            });\r\n        }\r\n\r\n        this.setFindText(this.enableFindText);\r\n    }\r\n\r\n    private setFindText(enable = true) {\r\n        this.enableFindText = enable;\r\n        if (this.enableFindText && this._hotKeys) {\r\n            // æ¥è¯¢å·¥å·æ¡\r\n            this.findKeysHandler = this._hotKeys.addShortcut({ keys: 'control.shift.f' }).subscribe((e) => {\r\n                if (this.enableFindText) {\r\n                    this.showFindInput = true;\r\n                    this.detectChanges();\r\n                }\r\n            });\r\n        } else {\r\n            if (this.showFindInput) {\r\n                this.showFindInput = false;\r\n                this.cdRef.detectChanges();\r\n            }\r\n            if (this.findKeysHandler) {\r\n                this.findKeysHandler.unsubscribe();\r\n                this.findKeysHandler = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCustomCls(rowNode: RowNode, field: string = '', clsType: 'row' | 'cell' = 'row') {\r\n        const cls = {};\r\n        let fn = this.rowStyler;\r\n        if (clsType === 'cell') {\r\n            fn = this.cellStyler;\r\n        }\r\n\r\n        if (fn) {\r\n            const rowCls = fn(rowNode.node, field);\r\n            if (rowCls) {\r\n                let arrcls = [];\r\n                if (typeof rowCls === 'string') {\r\n                    arrcls = [rowCls];\r\n                } else {\r\n                    if (Array.isArray(rowCls)) {\r\n                        arrcls = rowCls;\r\n                    }\r\n                }\r\n\r\n                if (arrcls.length) {\r\n                    const rowClsObj = {};\r\n                    arrcls.forEach(c => {\r\n                        rowClsObj['' + c] = true;\r\n                    });\r\n                    const _cls = { ...rowClsObj, ...cls };\r\n                    return _cls;\r\n                } else {\r\n                    return rowCls;\r\n                }\r\n            } else {\r\n                return cls;\r\n            }\r\n        } else {\r\n            return cls;\r\n        }\r\n    }\r\n\r\n    getRowCls(rowNode: RowNode, field?: string) {\r\n        return this.getCustomCls(rowNode, 'row');\r\n    }\r\n\r\n    getCellCls(rowNode: RowNode, field: string) {\r\n        return this.getCustomCls(rowNode, field, 'cell');\r\n    }\r\n\r\n    getRealColWidth(currentCol: TreeTableColumn) {\r\n        if (this.columns && this.columns.length && this.fitColumns) {\r\n            const colWidthTotal = this.columns.reduce((r, c) => {\r\n                return r + (this.columnIsVisible(c) ? c.width : 0);\r\n            }, 0);\r\n\r\n            if (this.columnIsVisible(currentCol)) {\r\n                return (currentCol.width / colWidthTotal * 100).toFixed(2) + '%';\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        return currentCol.width + 'px';\r\n    }\r\n\r\n    @HostListener('window:resize')\r\n    onResized() {\r\n        this.resizeSer.windowResized();\r\n    }\r\n\r\n    private setRightFixedColumnShadow() {\r\n        if (this.psRef && this.psRef.directiveRef) {\r\n            const ps = (this.psRef.directiveRef as any).instance;\r\n            if (!ps) {\r\n                return;\r\n            }\r\n            const { containerWidth, scrollbarXLeft, contentWidth } = ps;\r\n            if (containerWidth + scrollbarXLeft < contentWidth) {\r\n\r\n                const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n                const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n                if (fixedRightColumns && fixedRightColumns.length) {\r\n                    const fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n                    const rightCSSRule = `${fixedRightCssRuleKey}{\r\n                        box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n                    }`;\r\n\r\n                    this.utils.appendCssRules([rightCSSRule], this.styleElement.sheet);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFixedColumnShadow(x, e) {\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n        let fixedLeftCssRuleKey = '';\r\n        let fixedRightCssRuleKey = '';\r\n        let leftCSSRule = '';\r\n        let rightCSSRule = '';\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            const lastFixedLeftColumn = fixedLeftColumns[fixedLeftColumns.length - 1];\r\n            fixedLeftCssRuleKey = `${ruleName} [field=\"${lastFixedLeftColumn.field}\"]::after`;\r\n            leftCSSRule = `${fixedLeftCssRuleKey}{\r\n                box-shadow:#d9d9d9 12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n            rightCSSRule = `${fixedRightCssRuleKey}{\r\n                box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n\r\n        if (x === 0) {\r\n            // ç§»é¤å·¦ä¾§åºå®åé´å½±æ ·å¼\r\n            if (fixedLeftCssRuleKey) {\r\n                this.utils.removeCssRule(fixedLeftCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else if ((x + e.srcElement.offsetWidth).toFixed() == e.srcElement.scrollWidth) {\r\n            // ç§»é¤å³ååºå®åé´å½±æ ·å¼\r\n            if (fixedRightCssRuleKey) {\r\n                this.utils.removeCssRule(fixedRightCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else {\r\n            // æ·»å å·¦å³åºå®åæ ·å¼\r\n            const arr = [];\r\n            if (leftCSSRule) {\r\n                arr.push(leftCSSRule);\r\n            }\r\n\r\n            if (rightCSSRule) {\r\n                arr.push(rightCSSRule);\r\n            }\r\n\r\n            this.utils.appendCssRules(arr, this.styleElement.sheet);\r\n        }\r\n    }\r\n\r\n    onScrollX(e: any) {\r\n        if (this.showHeader && this.headerBox) {\r\n            const x = e.srcElement.scrollLeft;\r\n            this.state.scrollX = x;\r\n            // this.renderer.setStyle(this.headerBox.nativeElement.querySelector('table'), 'transform', `translate3d(-${x}px, 0px, 0px)`);\r\n            this.headerBox.nativeElement.scrollLeft = x;\r\n\r\n            this.setFixedColumnShadow(x, e);\r\n        }\r\n    }\r\n\r\n    onScrollY(e: any) {\r\n        if (this.virtualized) {\r\n            const scrollTop = e.target.scrollTop;\r\n            const { data, topHideHeight, bottomHideHeight } = this.scrollLoader.getRowNodes(scrollTop);\r\n            this.state.scrollY = scrollTop;\r\n            this.serializedValue = data;\r\n            this.topHideHeight = topHideHeight;\r\n            this.bottomHideHeight = bottomHideHeight;\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    onSearchValueChange($event) {\r\n        if (!$event) {\r\n            this.onClearSearchValue();\r\n        }\r\n    }\r\n\r\n    onClearSearchValue() {\r\n        this.searchData.value = '';\r\n        this.clearSearchValue.emit();\r\n    }\r\n\r\n    onCellClick(event: Event, col: any, node: any) {\r\n        this.cellClick.emit({ event, col, node });\r\n    }\r\n\r\n    trackByFn(index, rowNode) {\r\n        return rowNode.id;\r\n    }\r\n    /**\r\n     * æ ¼å¼åæ°æ®\r\n     */\r\n    formatData(col: any, data: any, formatter: any) {\r\n        // const val = this.utils.getValue(field, data, true );\r\n        const val = this.getNodeText(col, data);\r\n        return this.colFormatSer.format(val, data, formatter);\r\n    }\r\n\r\n    columnsChanged() {\r\n        this.checkColumnOption();\r\n        this.detectChanges();\r\n    }\r\n\r\n    private ttc2columns(list: QueryList<TreeTableColumnDirective>) {\r\n        return list.map((n: TreeTableColumnDirective) => {\r\n            return {\r\n                field: n.field,\r\n                title: n.title,\r\n                align: n.align,\r\n                hAlign: n.hAlign,\r\n                width: n.width,\r\n                formatter: n.formatter\r\n            };\r\n        });\r\n    }\r\n\r\n    private reSetSize() {\r\n        if (this.fit) {\r\n            const parentEl = this.el.nativeElement.parentNode;\r\n            this.width = parentEl.offsetWidth;\r\n            this.height = parentEl.offsetHeight;\r\n        }\r\n    }\r\n\r\n    private renderVirtualRowNodes(nodePosY = null) {\r\n        if (this.virtualized) {\r\n            const scrollY = nodePosY || this.state.scrollY;\r\n            const _rownodes = this.scrollLoader.getRowNodes(scrollY);\r\n            this.serializedValue = _rownodes.data;\r\n            this.topHideHeight = _rownodes.topHideHeight;\r\n            this.bottomHideHeight = _rownodes.bottomHideHeight;\r\n            this.detectChanges();\r\n\r\n            if (nodePosY) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop = nodePosY;\r\n                    }, 20);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSerializedValue(nodePosY: any = null) {\r\n        this.serializedValue = [];\r\n        this.searchHandle.allNodes = [];\r\n        this.state.rowNodes = [];\r\n\r\n        this.serializeNodes(null, this.data, 0, true);\r\n        if (this.virtualized && this.fixedHeader) {\r\n            this.renderVirtualRowNodes(nodePosY);\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n            this.detectChanges();\r\n            // if (emitChanges) {\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å°æ èç¹æ°æ®åºååä¸ºRowNode\r\n     * @param parent ç¶çº§èç¹\r\n     * @param nodes æ èç¹éå\r\n     * @param level çº§å«\r\n     * @param visible æ¯å¦å¯è§\r\n     */\r\n    serializeNodes(parent: TreeNode, nodes: TreeNode[], level: number, visible: boolean, parentIds?: any[]) {\r\n        if (nodes && nodes.length) {\r\n\r\n            nodes.forEach((node, index) => {\r\n                node.parent = parent;\r\n\r\n                if (!node.hasOwnProperty('selectable')) {\r\n                    node.selectable = true;\r\n                }\r\n\r\n                if (!node.hasOwnProperty('showIcon')) {\r\n                    node.showIcon = true;\r\n                }\r\n\r\n                if (this.onlySelectLeaf === 'yes' && node.selectable) {\r\n                    node.selectable = !!node.leaf;\r\n                }\r\n                const keyid = node.data[this.idField];\r\n                node.id = keyid;\r\n                const isSelected = this.findIndexInSelection(node) > -1;\r\n                const isChecked = this.findIndexInCheckeds(node) > -1;\r\n                const isLast = index === nodes.length - 1;\r\n                const isFirst = index === 0;\r\n                let parents = [];\r\n                let parentRn = null;\r\n                if (parent) {\r\n                    const parentID = parent.data[this.idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                    parentRn = this.state.rowNodes.find(n => n.id === parent.id);\r\n                }\r\n\r\n                const rowNode: RowNode = {\r\n                    id: keyid,\r\n                    node,\r\n                    parent,\r\n                    level,\r\n                    visible: visible && (parent ? parent.expanded : true),\r\n                    isSelected,\r\n                    isChecked,\r\n                    parents,\r\n                    parentRowNode: parentRn,\r\n                    index: this.state.rowNodes.length,\r\n                    last: isLast,\r\n                    first: isFirst\r\n                };\r\n                // this.serializedValue.push(rowNode);\r\n                this.state.rowNodes.push(rowNode);\r\n                this.serializeNodes(node, node.children, level + 1, rowNode.visible, parents);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¤æ­æå®çèç¹æ¯å¦è¢«éä¸­\r\n     * @param node æ èç¹\r\n     */\r\n    isSelected(node: TreeNode): boolean {\r\n        if (this.singleSelect) {\r\n            if (node && this.selectedRow) {\r\n                return node.data[this.idField] === this.selectedRow.data[this.idField];\r\n            }\r\n            return false;\r\n        } else {\r\n            if (this.selections && this.selections.length) {\r\n                return this.selections.findIndex(n => n.data[this.idField] === node.data[this.idField]) > -1;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    /** å¤æ­å½åèç¹çé©éç¶æ */\r\n    isChecked(node: TreeNode): boolean {\r\n        if (node && this.checkeds) {\r\n            if (this.checkeds instanceof Array) {\r\n                return this.checkeds.findIndex((v) => {\r\n                    return v.data[this.idField] === node.data[this.idField];\r\n                }) > -1;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    private unSelectedCurrentRowEmit() {\r\n        const currSelected = this.selectedRow;\r\n        if (currSelected) {\r\n            this.nodeUnSelect.emit({ node: currSelected, type: 'row', instance: this });\r\n        }\r\n    }\r\n\r\n    private _singleSelectNode(e: SelectEventArgs) {\r\n\r\n        this.clearSelections();\r\n        this.selectedRow = e.rowNode.node;\r\n        this.selectRowIndex = e.rowIndex;\r\n        this.selections = [e.rowNode.node];\r\n        e.rowNode.isSelected = true;\r\n\r\n        if (this.showCheckbox) {\r\n            e.rowNode.isChecked = true;\r\n            this.clearCheckeds();\r\n            this.setCheckeds(e.rowNode);\r\n        }\r\n\r\n        const sp: NodeSelectedParam = {\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row',\r\n            index: e.rowIndex,\r\n            parents: e.rowNode.parents,\r\n            instance: this\r\n        };\r\n        this.nodeSelected.emit(sp);\r\n    }\r\n\r\n    private _singleUnSelectNode(e: SelectEventArgs) {\r\n        this.selectedRow = null;\r\n        this.selectRowIndex = -1;\r\n        e.rowNode.isSelected = false;\r\n        e.rowNode.isChecked = false;\r\n        this.selections = [];\r\n\r\n        this.nodeUnSelect.emit({\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row', parents: e.rowNode.parents,\r\n            instance: this\r\n        });\r\n    }\r\n\r\n    private __singleSelectNode(event: SelectEventArgs, selected = false) {\r\n        if (!selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this._singleSelectNode(event);\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this._singleUnSelectNode(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private __multiSelectNode(event: SelectEventArgs, selected = false) {\r\n        const rowNode = event.rowNode;\r\n        if (!selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this.singleSelectWhenMultiSelect(rowNode, true);\r\n            this.nodeSelected.emit({\r\n                originalEvent: event.originalEvent, node: rowNode.node,\r\n                type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                instance: this\r\n            });\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this.singleSelectWhenMultiSelect(rowNode, false);\r\n                this.nodeUnSelect.emit({\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è¡åå»äºä»¶\r\n     */\r\n    handleRowClick(event: SelectEventArgs) {\r\n        const rowNode = event.rowNode;\r\n        rowNode.node['elementRef'] = event.originalEvent.target;\r\n        const selected = this.isSelected(rowNode.node);\r\n\r\n        if (this.singleSelect) {\r\n            this.__singleSelectNode(event, selected);\r\n        } else {\r\n            rowNode.indeterminate = false;\r\n            if (this.onlySelectSelf) {\r\n                this.__multiSelectNode(event, selected);\r\n            } else {\r\n                rowNode.isSelected = !selected;\r\n                this.setSelections(rowNode);\r\n                if (this.checkOnSelect) {\r\n                    rowNode.isChecked = !selected;\r\n                    this.setCheckeds(rowNode);\r\n                    this.ttService.onChangeCheckboxStatus(rowNode);\r\n                    const nodes = this.cascadeNodes(rowNode, rowNode.isChecked);\r\n\r\n                    if (rowNode.isChecked) {\r\n                        this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    } else {\r\n                        this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * å¸¦æcheckbox çåé\r\n     * @param rowNode å½åèç¹\r\n     */\r\n    private singleSelectWhenMultiSelect(rowNode: RowNode, flag: boolean) {\r\n        if (this.checkOnSelect) {\r\n            rowNode.isChecked = flag;\r\n            this.setCheckeds(rowNode);\r\n\r\n            this.cascadeNodes(rowNode, rowNode.isChecked);\r\n\r\n            if (rowNode.isChecked) {\r\n                this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            } else {\r\n                this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            }\r\n        }\r\n\r\n\r\n        this.clearSelections();\r\n        if (this.onlySelectSelf) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n        rowNode.isSelected = flag;\r\n        this.setSelections(rowNode);\r\n    }\r\n\r\n    private selectWhenChecked(rowNode: RowNode, flag: boolean, event: any) {\r\n        rowNode.isChecked = flag;\r\n        this.setCheckeds(rowNode);\r\n        if (this.selectOnCheck) {\r\n            if (this.onlySelectSelf) {\r\n                this.clearSelections();\r\n            }\r\n\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.clearCheckeds();\r\n            }\r\n\r\n            rowNode.isSelected = flag;\r\n            this.setSelections(rowNode);\r\n\r\n            if (rowNode.isSelected) {\r\n                this.nodeSelected.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            } else {\r\n                this.nodeUnSelect.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            }\r\n        }\r\n    }\r\n\r\n    private isInArray(rowNode: RowNode, items: TreeNode[]) {\r\n        if (items && items.length === 0) {\r\n            return false;\r\n        }\r\n        return items.findIndex(i => i.data[this.idField] === rowNode.id) > -1;\r\n    }\r\n\r\n    private setSelections(rowNode: RowNode) {\r\n        if (rowNode.isSelected) {\r\n            if (!this.selections) {\r\n                this.selections = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.selections)) {\r\n                // this.selections = [...this.selections, rowNode.node];\r\n                this.selections.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.selections) {\r\n                const i = this.selections.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.selections.splice(i, 1);\r\n                }\r\n                // this.selections = this.selections.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setCheckeds(rowNode: RowNode) {\r\n        if (rowNode.isChecked) {\r\n            if (!this.checkeds) {\r\n                this.checkeds = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.checkeds)) {\r\n                // this.checkeds = [ ...this.checkeds, rowNode.node];\r\n                this.checkeds.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.checkeds) {\r\n                const i = this.checkeds.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.checkeds.splice(i, 1);\r\n                }\r\n                // this.checkeds = this.checkeds.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDiffrentData(data: TreeNode[]) {\r\n        if (data.length) {\r\n            const _nodes = [];\r\n            data.forEach(n => {\r\n                if (_nodes.findIndex(t => t.data[this.idField] === n.data[this.idField]) === -1) {\r\n                    _nodes.push(n);\r\n                }\r\n            });\r\n            return _nodes;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * çº§èéæ©èç¹\r\n     * @param rowNode å½åèç¹\r\n     * @param checked æ¯å¦é©é\r\n     */\r\n    private cascadeNodes(rowNode: RowNode, checked: boolean) {\r\n        let checkedNodes = this.propagateSelectionDown(rowNode, checked);\r\n        checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));\r\n\r\n        this.updateAllCheckboxStatus();\r\n\r\n        return this.getDiffrentData(checkedNodes);\r\n    }\r\n\r\n    /**\r\n     * è¡Checkbox éä¸­ååäºä»¶\r\n     * @param event é¼ æ ç¹å»äºä»¶å¯¹è±¡\r\n     * @param rowNode å½åæ èç¹\r\n     */\r\n    toggleNodeWithCheckbox(event: Event, rowNode: RowNode, checked: boolean): any {\r\n\r\n        rowNode.indeterminate = false;\r\n        this.ttService.onChangeCheckboxStatus(rowNode);\r\n\r\n        // let checkedNodes = this.propagateSelectionDown(rowNode, checked);\r\n        // checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));\r\n        // const data = this.getDiffrentData(checkedNodes);\r\n        const data = this.cascadeNodes(rowNode, checked);\r\n\r\n        if (checked) {\r\n            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        } else {\r\n            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        }\r\n\r\n        this.selectWhenChecked(rowNode, checked, event);\r\n\r\n        this.checkeds = [...this.checkeds];\r\n        this.detectChanges();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * å¨é\r\n     * @param event é¼ æ äºä»¶å¯¹è±¡\r\n     * @param checked æ¯å¦éä¸­\r\n     */\r\n    toggleNodesWithCheckbox(event: Event, checked: boolean) {\r\n        if (checked) {\r\n            if (this.data && this.data.length) {\r\n                this.checkAllNodes({ originalEvent: event, checked, instance: this });\r\n            }\r\n        } else {\r\n            this.selections = null;\r\n            this.unCheckAllNodes({ originalEvent: event, checked, instance: this });\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    private cascadeCheckedNode(rowNode: RowNode, checked: boolean): TreeNode[] {\r\n        const nodes: TreeNode[] = [];\r\n        if (rowNode.node.selectable || rowNode.node.selectable === undefined) {\r\n            rowNode.isChecked = checked;\r\n            this.setCheckeds(rowNode);\r\n            if (this.selectOnCheck) {\r\n                rowNode.isSelected = checked;\r\n                this.setSelections(rowNode);\r\n            }\r\n            if (!this.isInArray(rowNode, nodes)) {\r\n                nodes.push(rowNode.node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     * @param node å½åèç¹\r\n     * @param checked éä¸­ç¶æ\r\n     * è¿ååå½±åçè¡\r\n     */\r\n    propagateSelectionDown(rowNode: RowNode, checked: boolean) {\r\n        let nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeDown && rowNode.node.children && rowNode.node.children.length) {\r\n            rowNode.node.children.forEach((v, i) => {\r\n                const rn = this.state.rowNodes.find((row: RowNode) => row.id === v.data[this.idField]);\r\n\r\n                if (rn && rn.node.selectable) {\r\n                    rn.indeterminate = false;\r\n                    rn.isChecked = checked;\r\n                    this.ttService.onChangeCheckboxStatus(rn);\r\n                    nodes = nodes.concat(this.propagateSelectionDown(rn, checked));\r\n                }\r\n            });\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     */\r\n    propagateSelectionUp(rowNode: RowNode, checked: boolean) {\r\n        const nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        // console.log(rowNode.parents);\r\n        if (this.cascadeCheck && this.cascadeUp && rowNode.node.parent) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                const rns = [];\r\n                rowNode.parents.forEach((n, i) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        // rn.isChecked = checked;\r\n                        const checkedNodes = this.cascadeCheckedNode(rn, checked);\r\n                        if (checkedNodes.length) {\r\n                            nodes.push(checkedNodes[0]);\r\n                        }\r\n                        rns.push(rn);\r\n                    }\r\n                });\r\n\r\n                rns.reverse().forEach(rn => {\r\n                    this.updateCheckboxStatus(rn);\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** æ´æ°å¨écheckbox çç¶æ */\r\n    private updateAllCheckboxStatus() {\r\n        const status = this.isIndeterminate();\r\n        if (this.showCheckAll && !this.singleSelect && this.showCheckbox) {\r\n            if (status !== undefined) {\r\n                if (this.headerCheckboxCmp) {\r\n                    this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = status === 2;\r\n                    this.headerCheckboxCmp.checked = status === 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°ç¶èç¹checkbox éä¸­ç¶æ */\r\n    private updateParentCheckboxStatus(rowNode: RowNode) {\r\n        const pNodes = [];\r\n        rowNode.parents.forEach(rnid => {\r\n            const rn = this.findRowNode(rnid);\r\n            if (rn) {\r\n                pNodes.push(rn);\r\n            }\r\n        });\r\n\r\n        pNodes.reverse().forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n    }\r\n    /** æ´æ°Nä¸ªç¶èç¹å¤éæ¡ä¸­çéä¸­ç¶æ */\r\n    private updateParentsCheckStatus(parentIds: any) {\r\n        let pids = [];\r\n        parentIds.forEach((ids: any) => {\r\n            pids = [...pids, ...ids];\r\n        });\r\n\r\n        pids = Array.from(new Set(pids));\r\n\r\n        const pRowNodes = this.findRowNodes(pids);\r\n\r\n        pRowNodes.sort((r, n) => {\r\n            return n.level - r.level;\r\n        }).forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n\r\n        // console.log(pRowNodes);\r\n    }\r\n\r\n    /** æ´æ°èç¹ä¸­checkboxçç¶æ */\r\n    private updateCheckboxStatus(rowNode: RowNode) {\r\n        const status = this.isIndeterminate(rowNode);\r\n        if (status !== undefined && rowNode.node.selectable) {\r\n            rowNode.indeterminate = status === 2;\r\n            this.ttService.onChangeCheckboxStatus(rowNode);\r\n        }\r\n    }\r\n\r\n    /** å¤æ­æå®èç¹checkbox çç¶æ */\r\n    private isIndeterminate(rowNode?: RowNode): any {\r\n        const status = this.getCheckboxStatus(rowNode);\r\n        if (status !== undefined) {\r\n            let checked = false;\r\n            if (status === 2) {\r\n                checked = false;\r\n            } else {\r\n                checked = !!status;\r\n            }\r\n            if (rowNode && rowNode.node.selectable) {\r\n                rowNode.isChecked = checked;\r\n                this.setCheckeds(rowNode);\r\n            }\r\n        }\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * è¿åç¶çº§èç¹checkbox çç¶æã0ï¼ä¸éä¸­ï¼ 1ï¼ éä¸­ï¼ 2ï¼ä¸ç¡®å®\r\n     * @param rowNode ç¶çº§èç¹ï¼ä¸ºç©ºæ¶è¿åå¨écheckbox çç¶æ\r\n     */\r\n    private getCheckboxStatus(rowNode?: RowNode) {\r\n        let uncheckedLength = 0;\r\n        let checkedLength = 0;\r\n        let len = 0;\r\n        let childNodes = [];\r\n        if (rowNode) {\r\n            childNodes = rowNode.node.children || [];\r\n        } else {\r\n            childNodes = this.state.rowNodes.filter(rn => rn.level === 0);\r\n        }\r\n        len = childNodes.length;\r\n        childNodes.forEach(n => {\r\n            let rn = n;\r\n            if (rowNode) {\r\n                rn = this.findRowNode(n.data[this.idField]);\r\n            }\r\n            if (rn && !rn.indeterminate) {\r\n                if (rn.isChecked) {\r\n                    checkedLength++;\r\n                } else {\r\n                    uncheckedLength++;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (len === 0) {\r\n            return undefined;\r\n        }\r\n        let flag = 0;\r\n        if (uncheckedLength === len) {\r\n            flag = 0;\r\n        } else {\r\n            if (checkedLength === len) {\r\n                flag = 1;\r\n            } else {\r\n                flag = 2;\r\n            }\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    private findIndexIn(node: TreeNode, treeNodes: TreeNode[]) {\r\n        let index = -1;\r\n        if (treeNodes && treeNodes.length) {\r\n            index = treeNodes.findIndex((v, i) => {\r\n                return this.equals(v, node);\r\n            });\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInCheckeds(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.checkeds);\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInSelection(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.selections);\r\n    }\r\n\r\n    /** å¯¹æ¯ä¸¤ä¸ªèç¹æ¯å¦åä¸ä¸ªèç¹ */\r\n    equals(target: TreeNode, source: TreeNode): boolean {\r\n        return target.data[this.idField] === source.data[this.idField];\r\n    }\r\n\r\n    /**\r\n     * å±å¼ææèç¹\r\n     * @param rowNode å±å¼æ­¤èç¹ä¸çææèç¹ï¼å¦æä¸ºç©ºï¼åå±å¼ææèç¹\r\n     * @param deep è®¾ç½®ä¸ºtrue æ¶ï¼å½åèç¹ä¸çææå­èç¹å¨é¨å±å¼\r\n     */\r\n    toggleExpand(treeNode?: TreeNode, deep = false) {\r\n        if (treeNode) {\r\n            treeNode.expanded = !treeNode.expanded;\r\n            this.toggleVisible(treeNode);\r\n\r\n            if (this.virtualized) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    this.renderVirtualRowNodes();\r\n                }\r\n            }\r\n\r\n            if (treeNode.expanded) {\r\n                this.expand.emit(treeNode);\r\n            } else {\r\n                this.collapse.emit(treeNode);\r\n            }\r\n\r\n            if (deep) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    treeNode.children.forEach((row, i) => {\r\n                        this.toggleExpand(row, deep);\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n\r\n            if (this.data && this.data.length) {\r\n                this.data.forEach((row: any) => {\r\n                    this.toggleExpand(row);\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        this.setNewColumnsWidth();\r\n\r\n    }\r\n\r\n    private toggleVisible(treeNode: TreeNode) {\r\n        const rowNode = this.findRowNode(treeNode.data[this.idField]);\r\n        if (rowNode) {\r\n            const rid = rowNode.id;\r\n            this.state.rowNodes.filter(rn => rn.parents.indexOf(rid) > -1).forEach(rn => {\r\n                const rnParent = this.findRowNode(rn.parent.data[this.idField]);\r\n                if (rnParent) {\r\n                    rn.visible = rnParent.visible && rn.parent.expanded;\r\n                } else {\r\n                    rn.visible = treeNode.expanded;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹ */\r\n    expandNode(id: string, emit = true) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = true;\r\n                this.toggleVisible(rowNode.node);\r\n\r\n                if (this.virtualized) {\r\n                    if (rowNode.node.children && rowNode.node.children.length) {\r\n                        this.renderVirtualRowNodes();\r\n                    }\r\n                } else {\r\n                    this.detectChanges();\r\n                }\r\n\r\n                if (emit) {\r\n                    this.expand.emit(rowNode.node);\r\n                }\r\n\r\n                this.setNewColumnsWidth();\r\n\r\n            } else {\r\n                console.error('Con\\'t find tree node widh id:' + id);\r\n            }\r\n        } else {\r\n            console.error('PARAM id is null');\r\n        }\r\n    }\r\n\r\n    /** å±å¼ææèç¹ */\r\n    expandAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = true;\r\n            row.visible = true;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n        this.setNewColumnsWidth();\r\n        this.expandAllNodes.emit();\r\n        this.detectChanges();\r\n    }\r\n\r\n    expandNodes(id: string) {\r\n        // const rowNode = this.findRowNode(id);\r\n        // const rootNode = this.getRoot(id);\r\n        // if (rowNode) {\r\n        //     const treeNode = rowNode.node;\r\n        //     treeNode.expanded = true;\r\n        //     rowNode.visible = true;\r\n        //     const parents = rowNode.parents;\r\n\r\n        //     this.state.rowNodes.filter(n => n.parents.indexOf(rootNode.id) > -1).forEach(r => {\r\n        //         if (parents.indexOf(r.id) > -1) {\r\n        //             r.visible = true;\r\n        //             r.node.expanded = true;\r\n        //         }\r\n        //     });\r\n\r\n\r\n        //     this.detectChanges();\r\n        // }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹ä¸çææèç¹ */\r\n    expandAllNodesBy(rowNode: any) {\r\n        if (rowNode) {\r\n            const treeNode = rowNode.node;\r\n            treeNode.expanded = true;\r\n            rowNode.visible = true;\r\n\r\n            this.state.rowNodes.filter(n => n.parents.indexOf(rowNode.id) > -1).forEach(r => {\r\n                r.visible = true;\r\n                r.node.expanded = true;\r\n            });\r\n\r\n            this.detectChanges();\r\n            this.setNewColumnsWidth();\r\n        }\r\n    }\r\n\r\n    /** æå æå®èç¹ */\r\n    collapseNode(id: string) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = false;\r\n                this.toggleVisible(rowNode.node);\r\n                this.detectChanges();\r\n                this.setNewColumnsWidth();\r\n                this.collapse.emit(rowNode.node);\r\n            } else {\r\n                console.error('Con\\'t find tree node widh id:' + id);\r\n            }\r\n        } else {\r\n            console.error('PARAM id is null');\r\n        }\r\n    }\r\n    /** æå ææèç¹ */\r\n    collapseAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = false;\r\n            row.visible = !row.parent;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n\r\n\r\n        this.collapseAllNodes.emit();\r\n        this.detectChanges();\r\n        this.setNewColumnsWidth();\r\n    }\r\n\r\n    getContainerOffset() {\r\n        const rect = this.containerElement.getBoundingClientRect();\r\n        return {\r\n            left: rect.left + document.body.scrollLeft,\r\n            top: rect.top + document.body.scrollTop\r\n        };\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        const containerLeft = Math.round(this.getContainerOffset().left);\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        if (this.resizableColumns) {\r\n            const containerLeft = this.getContainerOffset().left;\r\n            this.renderer.addClass(this.containerElement, 'ui-unselectable-text');\r\n            this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';\r\n            this.resizerHelperVC.nativeElement.style.top = 0 + 'px';\r\n            this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';\r\n\r\n            this.resizerHelperVC.nativeElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    onColumnResizeEnd(event: any, column: any) {\r\n        // åç§»é\r\n        const delta = this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        // åå®½\r\n        const columnWidth = column.offsetWidth;\r\n        // æ°å®½åº¦\r\n        const newColumnWidth = columnWidth + delta;\r\n        // æå°å®½åº¦\r\n        const minWidth = column.style.minWidth || 15;\r\n\r\n        \r\n\r\n        const resizeColumnIndex = this.columns.findIndex(n => n.id === column.id);\r\n\r\n\r\n        if (!this.fitColumns) {\r\n            this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n            this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n\r\n            if (this.columns[resizeColumnIndex]) {\r\n                this.columns[resizeColumnIndex].width = newColumnWidth;\r\n            }\r\n\r\n            this.sortColumnsByFixed(false);\r\n            this.setTableWidth(this.allColumnsWidth());\r\n\r\n            // update css.\r\n            const _colInfo = this.columns[resizeColumnIndex];\r\n            if (_colInfo) {\r\n                const ruleName = this.columnCssName(_colInfo);\r\n                const stylecss = ruleName + '{width:' + newColumnWidth + 'px}';\r\n                this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            }\r\n\r\n            const nextColumn = this.columns[resizeColumnIndex + 1];\r\n            if (nextColumn && nextColumn.fixed) {\r\n                const ruleName = this.columnCssName(nextColumn);\r\n                const stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';\r\n                this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            }\r\n\r\n        } else {\r\n            if (newColumnWidth > minWidth) {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    const nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    const nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > nextColumnMinWidth) {\r\n                        this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resizerHelperVC.nativeElement.style.display = 'none';\r\n        this.renderer.removeClass(this.containerElement, 'ui-unselectable-text');\r\n        this.psRef.directiveRef.update();\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth?: number) {\r\n        if (table) {\r\n            const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                const col = colGroup.children[resizeColumnIndex];\r\n                const nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n\r\n                if (nextCol) {\r\n                    if (nextColumnWidth && this.fitColumns) {\r\n                        nextCol.style.width = nextColumnWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('Scrollable tables require a colgroup to support resizable columns');\r\n            }\r\n        }\r\n    }\r\n\r\n    onSearch() {\r\n        this.search.emit(this.searchData);\r\n    }\r\n\r\n    insert(node: TreeNode, parent?: TreeNode) {\r\n        if (parent) {\r\n            if (!parent.children) {\r\n                parent.children = [];\r\n            }\r\n            parent.children.push(node);\r\n\r\n            this.expandNode(parent.data[this.idField]);\r\n            this.appendNew.emit({ parent });\r\n        } else {\r\n            this.data.push(node);\r\n        }\r\n\r\n        this.updateSerializedValue();\r\n    }\r\n\r\n    append(data: { [key: string]: any }, parent?: TreeNode) {\r\n        if (data && data[this.idField]) {\r\n            this.insert({ data, id: data[this.idField] }, parent);\r\n        } else {\r\n            console.warn('Please set id value.');\r\n        }\r\n    }\r\n\r\n    private emitAppendNew(parent: TreeNode) {\r\n        if (this.virtualized) {\r\n            const nodePosY = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n            this.updateSerializedValue(nodePosY);\r\n        } else {\r\n            this.updateSerializedValue();\r\n        }\r\n\r\n    }\r\n\r\n    appendChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (nodes && nodes.length) {\r\n            if (parent) {\r\n                parent.children.push(...nodes);\r\n                this.emitAppendNew(parent);\r\n                if (emit) {\r\n                    this.appendNew.emit({ parent });\r\n                }\r\n            } else {\r\n                throw new Error('æªæ¾å°ç¶çº§èç¹');\r\n            }\r\n        } else {\r\n            this.updateSerializedValue();\r\n            console.warn('æ·»å å­èç¹çæ°æ®ä¸ºç©º');\r\n        }\r\n    }\r\n\r\n    loadChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (parent) {\r\n            parent.children = nodes || [];\r\n            this.emitAppendNew(parent);\r\n            if (emit) {\r\n                this.appendNew.emit({ parent });\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(nodeId: string) {\r\n        if (nodeId) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                // remove(this.state.rowNodes, (n) => {\r\n                //     return n.id === nodeId;\r\n                // });\r\n                if (this.selectValue === nodeId) {\r\n                    this.selectedRow = null;\r\n                    this.selectValue = null;\r\n                }\r\n\r\n                if (rowNode.parent) {\r\n                    remove(rowNode.parent.children, (n) => {\r\n                        return n.data[this.idField] === nodeId;\r\n                    });\r\n                } else {\r\n                    remove(this.state.rowNodes, (n) => {\r\n                        return n.id === nodeId;\r\n                    });\r\n\r\n                    this.data = this.data.filter(n => n.data[this.idField] !== nodeId);\r\n                }\r\n                this.updateSerializedValue();\r\n                this.detectChanges();\r\n                this.ttService.onRemove(rowNode);\r\n                this.removed.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(nodeId: string, data: { [key: string]: string }) {\r\n        if (nodeId && data) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                rowNode.node.data = extend(rowNode.node.data, data);\r\n                this.detectChanges();\r\n                this.ttService.onUpdate(rowNode);\r\n                this.updated.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setScorllBodyHeight() {\r\n        this.scorllBodyHeight = this.height;\r\n\r\n        if (this.showFilterBar) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - 46;\r\n        }\r\n        if (this.fixedHeader && this.showHeader) {\r\n            if (this.headerBox && (this.headerWrap || this.useGroupHeader)) {\r\n                const hh = this.headerBox.nativeElement.clientHeight;\r\n                this.scorllBodyHeight = this.scorllBodyHeight - hh;\r\n            } else {\r\n                this.scorllBodyHeight = this.scorllBodyHeight - this.headerHeight;\r\n            }\r\n        }\r\n\r\n        if (this.pagination) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - this.pagerHeight;\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    resize(size?: { width: number, height: number }) {\r\n        if (size) {\r\n            this.width = size.width;\r\n            this.height = size.height;\r\n        }\r\n        this.setScorllBodyHeight();\r\n        if (this.data && this.data.length) {\r\n            this.renderVirtualRowNodes();\r\n        }\r\n\r\n        // setTimeout(() => {\r\n        //     if (this.psRef) {\r\n        //         this.psRef.directiveRef.update();\r\n        //     }\r\n        // }, 100);\r\n    }\r\n\r\n    loadData(data: TreeNode[]) {\r\n        this.data = data;\r\n    }\r\n\r\n    empty() {\r\n        this.data = [];\r\n    }\r\n\r\n    clearAll(detectChanges = true): TreeTableComponent {\r\n        this.state.rowNodes.filter(rn => rn.indeterminate).forEach(rn => {\r\n            rn.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(rn);\r\n        });\r\n\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.isChecked = false;\r\n            row.isSelected = false;\r\n            row.indeterminate = false;\r\n            return row;\r\n        });\r\n\r\n        // if (this.virtualized && this.fixedHeader) {\r\n        //     this.serializedValue = this.serializedValue.map((row: RowNode) => {\r\n        //         row.isChecked = false;\r\n        //         row.isSelected = false;\r\n        //         row.indeterminate = false;\r\n        //         return row;\r\n        //     });\r\n        // } else {\r\n        //     this.serializedValue = this.state.rowNodes;\r\n        // }\r\n\r\n        this.checkeds = [];\r\n        this.selections = [];\r\n        this.selectedRow = undefined;\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        if (detectChanges) {\r\n            this.detectChanges();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    detectChanges(): TreeTableComponent {\r\n        this.cdRef.markForCheck();\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (!this.cdRef['destroyed']) {\r\n            this.cdRef.detectChanges();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearCheckeds(): TreeTableComponent {\r\n        if (this.checkeds && this.checkeds.length) {\r\n            this.findRowNodes(this.checkeds.map(tn => tn.data[this.idField])).forEach(rn => {\r\n                rn.isChecked = false;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    clearSelections(): TreeTableComponent {\r\n        if (this.selections && this.selections.length) {\r\n            const nodeIds = this.selections.map(tn => tn.data[this.idField]);\r\n            this.serializedValue.forEach(n => {\r\n                n.isSelected = false;\r\n            });\r\n            this.findRowNodes(nodeIds).forEach(rn => {\r\n                rn.isSelected = false;\r\n                if (this.singleSelect) {\r\n                    rn.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selections = undefined;\r\n        this.selectedRow = undefined;\r\n        return this;\r\n    }\r\n    /** éä¸­ç¬¬1ä¸ªå¯ä»¥éä¸­çèç¹ */\r\n    selectFirstNode() {\r\n        if (this.state.rowNodes && this.state.rowNodes.length) {\r\n            const firstCanSelectNode = this.state.rowNodes.find(n => n.node.selectable);\r\n            if (firstCanSelectNode) {\r\n                this.selectNode(firstCanSelectNode.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    private scrollToCurrentRow(id: string) {\r\n        const trId = 'rownode-' + id;\r\n        // const trEle =    document.getElementById(trId);\r\n        const trEle = this.el.nativeElement.querySelector('#' + trId) || document.getElementById(trId);\r\n        if (trEle) {\r\n            if (!this.isElementInViewport(trEle)) {\r\n                trEle.scrollIntoView({ block: 'nearest', inline: 'nearest' });\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isElementInViewport(el) {\r\n        const containerEl = this.el.nativeElement.querySelector('.farris-treetable-body');\r\n        if (!containerEl) {\r\n            return false;\r\n        }\r\n        const container = containerEl.getBoundingClientRect();\r\n        const viewPortHeight = container.height;\r\n        const offsetTop = el.offsetTop;\r\n        const scrollTop = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n        const top = offsetTop - scrollTop;\r\n        return  top >= 0 && top <= viewPortHeight;\r\n    }\r\n\r\n\r\n    scrollToCurrentNode() {\r\n        if (this.selectedRow) {\r\n            const id = this.selectedRow.id;\r\n            const result = this.scrollToCurrentRow(id);\r\n            if (!result) {\r\n                const rowNode = this.findRowNode(id);\r\n                if (rowNode.parents && rowNode.parents.length) {\r\n                    rowNode.parents.forEach(pid => {\r\n                        const top = this.state.rowNodes.filter(n => n.visible).findIndex(n => n.id === pid) * 30;\r\n                        this.scrollToY(top);\r\n                        this.expandNode(pid, false);\r\n                    });\r\n                } else {\r\n                    const top = this.state.rowNodes.filter(n => n.visible).findIndex(n => n.id === id) * 30;\r\n                    this.scrollToY(top - 30);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** éä¸­æå®ID çèç¹,\r\n     * detectChanges: è§¦åèå¼æ£æ¥ï¼é»è®¤ä¸º true\r\n     * gotocurrent: ä½¿ç¨éä¸­èç¹å¯è§ï¼é»è®¤ä¸º true\r\n     */\r\n    selectNode(id: string, detectChanges = true, gotocurrent = true): TreeTableComponent {\r\n        if (!id) {\r\n            return this;\r\n        }\r\n        const node = this.findRowNode(id);\r\n        const emit = !this.selectedRow || (this.selectedRow && id !== this.selectedRow.id);\r\n\r\n        if (node && emit) {\r\n            if (this.singleSelect || this.onlySelectSelf) {\r\n                this.clearSelections();\r\n                this.selections = [node.node];\r\n                node.isSelected = true;\r\n                if (this.checkOnSelect && this.showCheckbox) {\r\n                    this.clearCheckeds();\r\n                    node.isChecked = true;\r\n                    this.checkeds = [node.node];\r\n                }\r\n            } else {\r\n                this.setSelections(node);\r\n            }\r\n\r\n            this.selectedRow = node.node;\r\n            this.selectNodeChangedSubject.next(id);\r\n            this.nodeSelected.emit({ node: node.node, instance: this });\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            if (gotocurrent && this.fixedHeader) {\r\n                this.scrollToCurrentNode();\r\n            }\r\n        } else {\r\n            if (!node) {\r\n                this.selectedRow = null;\r\n                console.warn(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNode(id: string, detectChanges = true) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            rowNode.isSelected = false;\r\n            if (this.singleSelect) {\r\n                this.clearSelections();\r\n                this.selectedRow = null;\r\n                rowNode.isChecked = false;\r\n                this.selections = [];\r\n            } else {\r\n                if (this.onlySelectSelf) {\r\n                    this.selections = [];\r\n                } else {\r\n                    this.setSelections(rowNode);\r\n                }\r\n            }\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            this.nodeUnSelect.emit({ node: rowNode.node, instance: this });\r\n        } else {\r\n            console.warn(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n        }\r\n    }\r\n\r\n    /** éä¸­å¤è¡æ°æ® */\r\n    selectNodes(ids: string[], detectChanges = true, emitNodeSelected = false): TreeTableComponent {\r\n        if (ids && ids.length) {\r\n            const nodes = this.findRowNodes(ids).map(rn => {\r\n                rn.isSelected = true;\r\n                this.setSelections(rn);\r\n                return rn.node;\r\n            });\r\n\r\n            this.selections = [...this.selections];\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n\r\n            this.selectNodeChangedSubject.next(ids.join(','));\r\n            if (emitNodeSelected) {\r\n                this.nodeSelected.emit({ node: nodes, instance: this });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNodes(ids?: string[]) {\r\n        if (ids && ids.length) {\r\n            const rownodes = this.findRowNodes(ids);\r\n            if (rownodes && rownodes.length) {\r\n                rownodes.forEach(rn => {\r\n                    rn.isSelected = false;\r\n                    this.setSelections(rn);\r\n                });\r\n                this.selections = [...this.selections];\r\n                this.detectChanges();\r\n                this.nodeUnSelect.emit({ node: rownodes.map(r => r.node), instance: this });\r\n            }\r\n        } else {\r\n            this.clearSelections();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * é©éæå®çèç¹\r\n     * @param updateParentCheckboxStatus: æ¯å¦æ´æ°ç¶çº§èç¹checkbox ç¶æ, é»è®¤ä¸º true\r\n     * @param detectChanges è§¦ååæ´æ£æµãé»è®¤ä¸º true\r\n     */\r\n    checkedNode(id: string, updateParentCheckboxStatus = true, detectChanges = true) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const node = this.findRowNode(id);\r\n            if (node) {\r\n                node.isChecked = true;\r\n                if (!this.isChecked(node.node)) {\r\n                    // this.checkeds = [...this.checkeds || [], node.node];\r\n                    this.setCheckeds(node);\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n                this.nodeChecked.emit({ originalEvent: null, node: node.node, instance: this });\r\n            } else {\r\n                console.warn(`æªæ¾å°IDä¸º${id}çæ°æ®ã`);\r\n            }\r\n        }\r\n    }\r\n\r\n    unCheckedNode(id: string, updateParentCheckboxStatus = true) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const rownode = this.findRowNode(id);\r\n            if (rownode) {\r\n                rownode.isChecked = false;\r\n                this.setCheckeds(rownode);\r\n\r\n                if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                    this.updateParentCheckboxStatus(rownode);\r\n                }\r\n\r\n                this.detectChanges();\r\n                this.nodeUnChecked.emit({ node: rownode, instance: this });\r\n            } else {\r\n                console.warn(`æªæ¾å°IDä¸º${id}çæ°æ®ã`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _checkedNodes(ids: string[], checked: boolean) {\r\n        const parentIDS = [];\r\n        const nodes = this.findRowNodes(ids).map(rn => {\r\n            parentIDS.push(rn.parents);\r\n            rn.isChecked = checked;\r\n            this.setCheckeds(rn);\r\n            return rn.node;\r\n        });\r\n        this.checkeds = [...this.checkeds];\r\n        if (this.cascadeCheck && this.cascadeUp) {\r\n            // æ´æ°ç¶èç¹å¤æ¡çéä¸­ç¶æ\r\n            this.updateParentsCheckStatus(parentIDS);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** æ¹ééä¸­èç¹\r\n     * @param ids: id éå\r\n     * @param detectChanges: boolean  é»è®¤ä¸º true ,æ¯å¦è§¦ååæ´æ£æµ\r\n     * closeCascade:  æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *      è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     */\r\n    checkedNodes(ids: any[], detectChanges = true, emit = true, closeCascade?: boolean) {\r\n        if (this.isEnableMultiSelect()) {\r\n            if (ids && ids.length) {\r\n\r\n                const _cascade = this.cascadeCheck;\r\n                if (closeCascade && _cascade) {\r\n                    this.cascadeCheck = false;\r\n                }\r\n\r\n                const nodes = this._checkedNodes(ids, true);\r\n\r\n                if (closeCascade && _cascade) {\r\n                    // æ¢å¤çº§è\r\n                    this.cascadeCheck = true;\r\n                }\r\n\r\n                this.updateAllCheckboxStatus();\r\n\r\n                // this.checkeds = nodes;\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n\r\n                if (emit) {\r\n                    this.nodeChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * åæ¶éä¸­çèç¹.\r\n     * ids: æ è¯Id æ°ç»\r\n     * closeCascade: æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *     è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     * emit: æ¯å¦è§¦ååæ¶å¾éäºä»¶ãé»è®¤ä¸º true\r\n     */\r\n    unCheckedNodes(ids: string[], closeCascade?: boolean, emit = true) {\r\n\r\n        if (ids && ids.length) {\r\n            const _cascade = this.cascadeCheck;\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = false;\r\n            }\r\n\r\n            const nodes = this._checkedNodes(ids, false);\r\n\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = true;\r\n            }\r\n\r\n            this.detectChanges();\r\n            // this.checkeds = nodes;\r\n            if (emit) {\r\n                this.nodeUnChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n            }\r\n        } else {\r\n            this.clearCheckeds();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    findRowNode(id: string): RowNode {\r\n        if (id) {\r\n            if (this.state.rowNodes) {\r\n                return this.state.rowNodes.find(n => n.id === id);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** å°å¨ v0.2.x åºå¼ï¼è¯·ä½¿ç¨ findRowNode æ¹æ³ */\r\n    findNode(id: string): RowNode {\r\n        return this.findRowNode(id);\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®å½åèç¹IDï¼è·åé¡¶çº§ç¶èç¹\r\n     * @param id å½åèç¹ID\r\n     * @returns è¿åé¡¶çº§èç¹\r\n     */\r\n    getRoot(id: string) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                return this.findRowNode(rowNode.parents[0]);\r\n            }\r\n            return rowNode;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    findRowNodes(ids: string[]): RowNode[] {\r\n        return this.state.rowNodes.filter(rn => ids.indexOf(rn.id) > -1);\r\n    }\r\n\r\n    checkAllNodes(args?: any) {\r\n        const rowNodes = this.state.rowNodes.filter(n => (n.node.selectable || n.node.selectable === undefined));\r\n        this.checkeds = rowNodes.map(n => {\r\n            n.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(n);\r\n            if (n.node.selectable || n.node.selectable === undefined) {\r\n                n.isChecked = true;\r\n            }\r\n            return n.node;\r\n        });\r\n\r\n        if (this.selectOnCheck) {\r\n            this.selections = rowNodes.map(n => {\r\n                if (n.node.selectable || n.node.selectable === undefined) {\r\n                    n.isSelected = true;\r\n                }\r\n                return n.node;\r\n            });\r\n        }\r\n\r\n        this.checkAll.emit(args);\r\n        this.detectChanges();\r\n    }\r\n\r\n    unCheckAllNodes(args?: any) {\r\n        this.clearAll();\r\n        this.unCheckAll.emit(args);\r\n        this.detectChanges();\r\n    }\r\n\r\n    private isEnableMultiSelect() {\r\n        if (this.singleSelect) {\r\n            if (!this.showCheckbox) {\r\n                console.warn('æªå¯ç¨å¤éï¼');\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ä»æ°æ®ä¸­è·åèç¹å¾æ \r\n    // iconField ä¸º object\r\n    //      å¦æ å±å¼å¾æ ä¸ºç©ºï¼æå å¾æ ä¸ä¸ºç©ºï¼æåä¹ï¼åå±å¼ä¸æå å¾æ ä¿æä¸è³ï¼\r\n    //      å¦æ å¶å­å¾æ ä¸ºç©ºï¼åä½¿ç¨ç»ä»¶é»è®¤çå¾æ \r\n    // iconField ä¸º å­ç¬¦ä¸²ï¼ åå¶å­ å±å¼ æå  å¾æ ä½¿ç¨åä¸ä¸ªã å¦æä¸ºç©ºï¼ åä½¿ç¨ç»ä»¶é»è®¤å¾æ \r\n    private getNodeIconFromData(tn: TreeNode) {\r\n        let leaf = null;\r\n        let expand = null;\r\n        let collapse = null;\r\n        if (this.useIconFromData) {\r\n            if (this.iconField) {\r\n                let _iconField = '';\r\n                if (typeof this.iconField === 'string') {\r\n                    _iconField = this.iconField;\r\n                    if (tn[_iconField]) {\r\n                        leaf = tn[_iconField];\r\n                    } else {\r\n                        leaf = this.utils.getValue(_iconField, tn.data);\r\n                    }\r\n\r\n                    expand = collapse = leaf;\r\n                } else {\r\n                    if (this.iconField.leaf) {\r\n                        leaf = this.utils.getValue(this.iconField.leaf, tn.data);\r\n                    }\r\n                    if (this.iconField.expand) {\r\n                        expand = this.utils.getValue(this.iconField.expand, tn.data);\r\n                    }\r\n                    if (this.iconField.collapse) {\r\n                        collapse = this.utils.getValue(this.iconField.collapse, tn.data);\r\n                    }\r\n\r\n                    if (expand && !collapse) {\r\n                        collapse = expand;\r\n                    }\r\n\r\n                    if (!expand && collapse) {\r\n                        expand = collapse;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            leaf, expand, collapse\r\n        };\r\n    }\r\n\r\n    getTreeIcon(treeNode: TreeNode) {\r\n        const tn = treeNode;\r\n        let leafIcon = this.leafIcon || 'file';\r\n        let expandIcon = this.expandIcon || 'folder-open';\r\n        let collapseIcon = this.collapseIcon || 'folder';\r\n        const loading = 'treenode-loading';\r\n\r\n        if (tn['showLoading']) {\r\n            return { [loading]: true };\r\n        }\r\n\r\n        if (tn.icon) {\r\n            leafIcon = tn.icon;\r\n        }\r\n\r\n        if (tn.expandedIcon) {\r\n            expandIcon = tn.expandedIcon;\r\n        }\r\n\r\n        if (tn.collapsedIcon) {\r\n            collapseIcon = tn.collapsedIcon;\r\n        }\r\n\r\n        if (this.useIconFromData) {\r\n            const { leaf, expand, collapse } = this.getNodeIconFromData(treeNode);\r\n            if (this.whenDataIconEmptyUseDefault) {\r\n                if (leaf) {\r\n                    leafIcon = leaf;\r\n                }\r\n                if (expand) {\r\n                    expandIcon = expand;\r\n                }\r\n                if (collapse) {\r\n                    collapseIcon = collapse;\r\n                }\r\n            } else {\r\n                leafIcon = leaf || '';\r\n                expandIcon = expand || '';\r\n                collapseIcon = collapse || '';\r\n            }\r\n        }\r\n\r\n\r\n        const collapsedExpression = (!tn.leaf || !!(tn.children && tn.children.length)) && !tn.expanded;\r\n        const expandedExpression = !!tn.expanded;\r\n        const leafExpression = tn.leaf === undefined ? (!tn.children || !tn.children.length) : tn.leaf;\r\n\r\n        const icons = {};\r\n\r\n        if (leafExpression && leafIcon) {\r\n            icons[leafIcon] = leafExpression;\r\n        } else {\r\n            if (tn.expanded && expandIcon) {\r\n                icons[expandIcon] = expandedExpression;\r\n            } else {\r\n                if (collapseIcon) {\r\n                    icons[collapseIcon] = collapsedExpression;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.iconCls) {\r\n            icons[this.iconCls] = true;\r\n        }\r\n\r\n        return icons;\r\n    }\r\n\r\n    private compare(a, b) {\r\n        if (typeof a === 'string') {\r\n            return a.localeCompare(b);\r\n        } else {\r\n            return a === b ? 0 : (a > b ? 1 : -1);\r\n        }\r\n    }\r\n    private _sort(r1, r2) {\r\n        let r = 0;\r\n        const sortFields = this.sortName.split(',');\r\n        const orders = this.sortOrder.split(',');\r\n\r\n        if (!this.sortName) {\r\n            return r;\r\n        }\r\n\r\n        for (let i = 0; i < sortFields.length; i++) {\r\n            const sn = sortFields[i];\r\n            const so = orders[i];\r\n\r\n            const col = this.columns.find(c => c.field === sn);\r\n\r\n            const orderby = col.sorter || this.compare;\r\n            let v1 = this.utils.getValue(sn, r1.data);\r\n            if (v1 === null || v1 === undefined) {\r\n                v1 = '';\r\n            }\r\n            let v2 = this.utils.getValue(sn, r2.data);\r\n            if (v2 === null || v2 === undefined) {\r\n                v2 = '';\r\n            }\r\n            r = orderby(v1, v2);\r\n            if (r !== 0) {\r\n                return r * (so === 'asc' ? 1 : -1);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    clientSort() {\r\n        const sortedData = this.data.sort(this._sort.bind(this));\r\n\r\n        const sortChildNodes = (childNodes) => {\r\n            childNodes = childNodes.sort(this._sort.bind(this));\r\n            childNodes.forEach(n => {\r\n                if (n.children && n.children.length) {\r\n                    n.children = n.children.sort(this._sort.bind(this));\r\n                    sortChildNodes(n.children);\r\n                }\r\n            });\r\n            return childNodes;\r\n        };\r\n\r\n        sortedData.forEach(c => {\r\n            c.children = sortChildNodes(c.children);\r\n        });\r\n\r\n        this.loadData(sortedData);\r\n    }\r\n\r\n    onSortColumnClick($event, col) {\r\n        if (!col.sortable) {\r\n            return;\r\n        }\r\n        const sortName = this.sortName;\r\n        const sortOrder = this.sortOrder;\r\n        let sortFields = [];\r\n        let sortOrders = [];\r\n        if (sortName) {\r\n            sortFields = sortName.split(',');\r\n            sortOrders = sortOrder.split(',');\r\n        }\r\n\r\n        const colOrder = col.order || 'asc';\r\n        let newOrder = colOrder;\r\n        const i = sortFields.findIndex(n => n === col.field);\r\n        if (i >= 0) {\r\n            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';\r\n            newOrder = _order;\r\n            if (this.multiSort && newOrder === 'asc') {\r\n                newOrder = undefined;\r\n                sortFields.splice(i, 1);\r\n                sortOrders.splice(i, 1);\r\n            } else {\r\n                sortOrders[i] = _order;\r\n            }\r\n\r\n        } else {\r\n            if (this.multiSort) {\r\n                sortFields.push(col.field);\r\n                sortOrders.push(colOrder);\r\n            } else {\r\n                sortFields = [col.field];\r\n                sortOrders = [colOrder];\r\n            }\r\n        }\r\n\r\n        col.order = newOrder;\r\n\r\n        this.sortName = sortFields.join(',');\r\n        this.sortOrder = sortOrders.join(',');\r\n\r\n        if (!this.multiSort) {\r\n\r\n            const updateFieldOrder = (cols: TreeTableColumn[]) => {\r\n                if (!cols || !cols.length) {\r\n                    return;\r\n                }\r\n                cols.forEach(c => {\r\n                    c.order = undefined;\r\n                    const k = sortFields.findIndex(f => f === c.field);\r\n                    if (k >= 0) {\r\n                        c.order = sortOrders[k];\r\n                    }\r\n                });\r\n            };\r\n\r\n            updateFieldOrder(this.columns);\r\n            this.cdRef.detectChanges();\r\n        }\r\n\r\n        this.beforeSortColumn(this.sortName, this.sortOrder).subscribe(() => {\r\n            if (this.remoteSort) {\r\n                // this.reload();\r\n            } else {\r\n                this.clientSort();\r\n            }\r\n\r\n            this.columnSorted.emit({ sortName: this.sortName, sortOrder: this.sortOrder });\r\n        });\r\n    }\r\n\r\n    /** æ¥è¯¢å·¥å·æ¡åç«¯å­ç¬¦æ¥è¯¢ */\r\n    findKeyWords($event) {\r\n        const searchValue = $event.value;\r\n        const field = $event.field;\r\n        this.findField = field;\r\n        if (searchValue && searchValue.length >= 2) {\r\n            this.findValue = searchValue;\r\n\r\n            if (!field) {\r\n                console.warn('Please set a field for the FindField property.');\r\n                return;\r\n            }\r\n\r\n            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);\r\n\r\n            if (result && result.length) {\r\n                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));\r\n                const firstRowIndex = result[0].index;\r\n\r\n                this.findCount = result.length;\r\n\r\n                const parents = this.searchHandle.findParents(result, this.state.rowNodes);\r\n\r\n                this.findCurrent = 1;\r\n                [...parents, ...result].forEach((r: RowNode) => {\r\n                    this.expandNode(r.id);\r\n                });\r\n\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && firstRowIndex > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30);\r\n                }\r\n\r\n                this.highLightKeywords();\r\n            } else {\r\n                this.findResult = [];\r\n                this.findCurrent = 0;\r\n                this.findCount = 0;\r\n            }\r\n        } else {\r\n            this.resetFindText();\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n    closeFindPanel() {\r\n        this.showFindInput = false;\r\n        this.resetFindText();\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    private highLightKeywords() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                const allHighLights = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                if (!allHighLights.length) {\r\n                    return;\r\n                }\r\n                // this.findResult = this.findResult.concat(Array.from(allHighLights));\r\n                // this.findResult = Array.from(new Set(this.findResult));\r\n                // this.findCount = allHighLights.length;\r\n                this.cdRef.detectChanges();\r\n                this.renderer.addClass(allHighLights[0], 'active');\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    private resetFindText() {\r\n        this.findValue = '';\r\n        this.findCurrent = 0;\r\n        this.findCount = 0;\r\n        this.findResult = [];\r\n    }\r\n\r\n    nextFindValue(step) {\r\n        if (!this.findResult || !this.findResult.length) {\r\n            return;\r\n        }\r\n        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));\r\n\r\n        if (this.findCurrent === this.findResult.length) {\r\n            this.findCurrent = 1;\r\n        } else {\r\n            if (step) {\r\n                this.findCurrent = this.findCurrent + step;\r\n                if (step === -1) {\r\n                    if (this.findCurrent <= 0) {\r\n                        this.findCurrent = 1;\r\n                    }\r\n                }\r\n            } else {\r\n                this.findCurrent++;\r\n            }\r\n        }\r\n\r\n        const active = this.el.nativeElement.querySelector('.search-highlight.active');\r\n\r\n        let _index = allHighLights.indexOf(active);\r\n\r\n        if (active) {\r\n            this.renderer.removeClass(active, 'active');\r\n        }\r\n\r\n        if (this.virtualized) {\r\n\r\n            _index += !step ? 1 : step;\r\n\r\n            if (allHighLights[_index]) {\r\n                this.renderer.addClass(allHighLights[_index], 'active');\r\n\r\n            } else {\r\n                // åæ»å¨æå®ä½ç½®\r\n                const nextRow = this.findResult[this.findCurrent - 1];\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && nextRow.index > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30, 200);\r\n                }\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                        this.renderer.addClass(keyWords[0], 'active');\r\n                    }, 100);\r\n                });\r\n            }\r\n        } else {\r\n            const currentEl: any = allHighLights[this.findCurrent - 1];\r\n            if (currentEl) {\r\n                this.renderer.addClass(currentEl, 'active');\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    const sTop = currentEl.closest('td').offsetTop - 30;\r\n                    this.psRef.directiveRef.scrollToY(sTop, 200);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    scrollToY(y: number, animations = 200) {\r\n\r\n        this.state.scrollY = y || 0;\r\n        this.psRef.directiveRef.scrollToY(y, animations);\r\n    }\r\n\r\n    private showOrHideColumn(field: string | string[], isHide: boolean) {\r\n        if (Array.isArray(field)) {\r\n            this.columns.forEach(n => {\r\n                if (field.indexOf(n.field) > -1) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        } else {\r\n            this.columns.forEach(n => {\r\n                if (field === n.field) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.columnsChanged();\r\n    }\r\n\r\n    showColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, false);\r\n    }\r\n\r\n    hideColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, true);\r\n    }\r\n\r\n    showChildsLoading(parentNode: TreeNode) {\r\n        const colspan = this.columns.filter(n => n.visible !== false).length;\r\n        const data = { [this.idField]: 'æ­£å¨å è½½ä¸­....', __colspan__: colspan };\r\n        this.loadChildren([{ data, __childs_loading__: true }], parentNode, false);\r\n    }\r\n\r\n    onChildsPageChanged($event) {\r\n        // console.log($event);\r\n        this.childsPageChanged.emit($event);\r\n    }\r\n\r\n    private trId2DataId(tr) {\r\n        return tr.id.replace('rownode-', '');\r\n    }\r\n\r\n\r\n    // å¿«æ·é®\r\n    onKeydownEvent($event) {\r\n        if (!$event || !this.singleSelect || !this.data || !this.data.length) {\r\n            return;\r\n        }\r\n\r\n        const keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n        if (!keys.includes($event.key) || $event.target.nodeName === 'INPUT') {\r\n            return;\r\n        }\r\n\r\n        $event.stopPropagation();\r\n        $event.preventDefault();\r\n        this.inputGroup.textbox.nativeElement.blur();\r\n        let newIdx;\r\n        const trs = Array.from(this.bodyTable.nativeElement.querySelectorAll('tr'));\r\n        const trCount = trs.length;\r\n        let selectedTrIndex = -1;\r\n\r\n        if (this.selectedRow) {\r\n            selectedTrIndex = trs.findIndex((n: any) => this.trId2DataId(n) === this.selectedRow.id);\r\n        }\r\n\r\n        if ($event.code === 'ArrowDown') {\r\n            newIdx = selectedTrIndex + 1;\r\n        } else if ($event.code === 'ArrowUp') {\r\n            if (selectedTrIndex !== -1) {\r\n                newIdx = selectedTrIndex - 1;\r\n            }\r\n        } else {\r\n            if (this.selectedRow && ($event.code === 'ArrowRight' || $event.code === 'ArrowLeft')) {\r\n                this.toggleExpand(this.selectedRow);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (newIdx >= 0 && newIdx < trCount) {\r\n            const _tr = trs[newIdx] as any;\r\n            if (_tr) {\r\n                const id = this.trId2DataId(_tr);\r\n                this.selectNode(id);\r\n                _tr.scrollIntoView({ block: 'nearest' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onBeforeShowContextMenu = (e: any) => {\r\n        // row_1_fixedleft  row_1  row_1_fixedright\r\n        const { contextMenuDom, event } = e;\r\n\r\n        let rowID = event.target.id;\r\n\r\n        if (contextMenuDom) {\r\n            rowID = this.trId2DataId(contextMenuDom);\r\n            const rowNode = this.findRowNode(rowID);\r\n\r\n            let go$ = of({show: true});\r\n            if (this.beforeShowContextMenu) {\r\n                go$ = this.beforeShowContextMenu({ data: rowNode, tree: this });\r\n            }\r\n\r\n            return go$.pipe(\r\n                switchMap((r: any) => {\r\n                    if (r.show) {\r\n\r\n                        if (r.menus) {\r\n                            this.contextMenuItems = r.menus;\r\n                            this.detectChanges();\r\n                        }\r\n\r\n                        const viewportW = contextMenuDom.closest('.farris-treetable').offsetWidth;\r\n                        const targetW = contextMenuDom.offsetWidth;\r\n\r\n                        const focusTargetWidth = viewportW > targetW ? targetW : viewportW;\r\n                        return of({ show: true, data: { data: rowNode, tree: this }, focusTargetWidth });\r\n                    } else {\r\n                        return of({ show: false });\r\n                    }\r\n                })\r\n            );\r\n        }\r\n        return of({ show: false });\r\n    }\r\n}\r\n\r\n\r\n@Component({\r\n    selector: '[treeTableBody]',\r\n    template: `\r\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\">\r\n            <ng-container *ngIf=\"serializedNode.visible\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"template;\r\n                        context: {$implicit: serializedNode, node: serializedNode.node,\r\n                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}\">\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n    `\r\n})\r\nexport class TTBodyComponent {\r\n    /**\r\n     * åéå\r\n     */\r\n    @Input() columns: any[];\r\n\r\n    /** è¡¨ä½æ¨¡æ¿ */\r\n    @Input() template: TemplateRef<any>;\r\n\r\n\r\n    constructor(public tt: TreeTableComponent) { }\r\n}\r\n\r\n// [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\r\n\r\n/**\r\n * æ èç¹å±å¼æå \r\n */\r\n@Component({\r\n    selector: 'farris-treeTableToggler',\r\n    template: `\r\n    <a href=\"javascript:void(0)\" #toggler\r\n            class=\"treenode-fold\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.display]=\"isShowTriangle ? '' : 'none'\"></a>\r\n    <span class=\"tree-icon-line\" [style.display]=\"isShowTriangle && showLines? '' : 'none'\"></span>\r\n    <span [style.display]=\"(tt.showIcon && rowNode.node.showIcon) ? 'inline-block': 'none'\"\r\n                                    class=\"treenode-icon\" [ngClass]=\"treeNodeIcon\"></span>\r\n    <tt-checkbox  [rowNode]=\"rowNode\" *ngIf=\"tt.showCheckbox\" [disabled]=\"disabled\" [checked]=\"rowNode.isChecked\" ></tt-checkbox>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: 'ttToggler'\r\n})\r\nexport class TreeTableTogglerComponent implements OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges, AfterViewChecked {\r\n    @HostBinding('class.f-cmp-treetable-toggler') cls = true;\r\n    /**\r\n     * æ èç¹\r\n     */\r\n    @Input() rowNode: RowNode;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() showLines = false;\r\n\r\n    @Input() indentSpacing = 16;\r\n\r\n    treeNodeIcon = {};\r\n    isShowTriangle = false;\r\n    noChilds = false;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    get offsetWidth() {\r\n        return this.togglerEl.nativeElement.parentElement.offsetWidth;\r\n    }\r\n\r\n    @ViewChild('toggler') togglerEl: ElementRef;\r\n    constructor(public tt: TreeTableComponent, private ngzone: NgZone, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);\r\n\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        const expandSub = this.tt.expand.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                // this.updateIcon(node);\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const collapseSub = this.tt.collapse.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                // this.updateIcon(node);\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const addNewSub = this.tt.appendNew.subscribe((e: any) => {\r\n            if (e.parent) {\r\n                if (this.rowNode.id === e.parent.data[this.tt.idField]) {\r\n                    if (this.rowNode.node.leaf || this.rowNode.node.leaf === undefined) {\r\n                        this.rowNode.node.leaf = false;\r\n                        this.registerClickEvent();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.subscriptions = [expandSub, collapseSub, addNewSub];\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.showLines && !changes.showLines.isFirstChange()) {\r\n            if (this.showLines) {\r\n                this.render.setStyle(this.togglerEl.nativeElement, 'display', this.isShowTriangle ? '' : 'none');\r\n            } else {\r\n                this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n            }\r\n            this.reSetLines();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.registerClickEvent();\r\n        setTimeout(() => {\r\n            this.reSetLines();\r\n        });\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.tt && this.tt.data) {\r\n            this.isShowTriangle = this.showTriangle();\r\n            this.noChilds = this.hasChildren();\r\n            this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);\r\n        }\r\n\r\n        // if (!this.tt.bodyTemplate) {\r\n        //     this.reSetLines();\r\n        // }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.tt && this.tt.data) {\r\n            this.reSetLines();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unAllSubscriptions();\r\n    }\r\n\r\n\r\n    private unAllSubscriptions() {\r\n        this.subscriptions.forEach(s => {\r\n            s.unsubscribe();\r\n        });\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    hasChildren() {\r\n        const tn = this.rowNode.node;\r\n        return tn.leaf === false || this.rowNode.level !== 0 || (tn.children && tn.children.length > 0);\r\n    }\r\n\r\n    showTriangle(): boolean {\r\n        const tn = this.rowNode.node;\r\n\r\n        if (this.tt.loadDataType === 'all') {\r\n            return tn.leaf === false || (tn.children && tn.children.length > 0);\r\n        } else {\r\n            return tn.leaf === false;\r\n        }\r\n    }\r\n\r\n    reSetLines() {\r\n        if (this.togglerEl && this.tt.showLines) {\r\n            const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n            if (parentEl) {\r\n                const lineEls = parentEl.querySelectorAll('.treetable-lines');\r\n                for (let k = 0; k < lineEls.length; k++) {\r\n                    lineEls[k].remove();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderLines();\r\n    }\r\n\r\n    private _renderLines() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.showLines) {\r\n                this.renderLines();\r\n            } else {\r\n                this.noLineStyle();\r\n            }\r\n        } else {\r\n            if (this.togglerEl) {\r\n                this.noLineStyle();\r\n                const tds = this.togglerEl.nativeElement.closest('tr').querySelectorAll('td');\r\n                Array.from(tds).forEach(n => {\r\n                    this.render.setStyle(n, 'padding', '0.25rem 0.75rem');\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private noLineStyle() {\r\n        // this.cls = false;\r\n        if (this.togglerEl) {\r\n            this.render.setStyle(this.togglerEl.nativeElement, 'margin-left', `${this.rowNode.level * this.indentSpacing}px`);\r\n            this.render.setStyle(this.togglerEl.nativeElement, 'visibility', this.isShowTriangle ? 'visible' : 'hidden');\r\n            this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n        }\r\n    }\r\n\r\n    private renderLines() {\r\n        const len = this.rowNode.level;\r\n        const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n\r\n        if (!parentEl) {\r\n            return;\r\n        }\r\n\r\n        const referEl = this.togglerEl.nativeElement.parentElement;\r\n\r\n        if (len === 0 && !this.showTriangle()) {\r\n            this.createLeafNodeLines(referEl, parentEl, true);\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            parentEl.insertBefore(this.newLineElement(), referEl);\r\n\r\n            const nearLine = this.newLineElement(false);\r\n            parentEl.insertBefore(nearLine, referEl);\r\n\r\n            const isLeaf = !this.showTriangle();\r\n            if (isLeaf && i === len - 1) {\r\n                this.createLeafNodeLines(referEl, parentEl);\r\n            }\r\n        }\r\n    }\r\n\r\n    private newLineElement(border = true) {\r\n        const newLineEl = this.render.createElement('div');\r\n        this.render.addClass(newLineEl, 'treetable-lines');\r\n\r\n        if (this.showLines) {\r\n            if (border) {\r\n                this.render.addClass(newLineEl, 'treetable-lines-border-color');\r\n            }\r\n        }\r\n        return newLineEl;\r\n    }\r\n\r\n    /**\r\n     * æé  â or â\r\n     */\r\n    private createLeafNodeLines(containerEl: HTMLElement, parentEl: Element, isTopNode = false) {\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: rgb(204, 204, 204);\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div class=\"normal\"></div>\r\n        // </div>\r\n\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: transparent\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div style=\"corner\"></div>\r\n        // </div>\r\n\r\n        const l1 = this.newLineElement();\r\n        const l2 = this.newLineElement(false);\r\n\r\n        this.render.addClass(l2, 'treetable-lines-leaf');\r\n        const dessert = this.render.createElement('div');\r\n\r\n        if (this.showLines) {\r\n            let cls = 'normal';\r\n            if (this.rowNode.last) {\r\n                cls = 'corner';\r\n                this.render.removeClass(l1, 'treetable-lines-border-color');\r\n            }\r\n            l2.appendChild(dessert);\r\n            this.render.addClass(dessert, cls);\r\n            this.render.addClass(dessert, 'treetable-lines-border-color');\r\n        }\r\n\r\n        parentEl.insertBefore(l1, containerEl);\r\n        parentEl.insertBefore(l2, containerEl);\r\n\r\n        if (isTopNode) {\r\n            this.render.setStyle(l2, 'marginRight', '3px');\r\n        }\r\n    }\r\n\r\n    private registerClickEvent() {\r\n        if (this.togglerEl) {\r\n            this.render.listen(this.togglerEl.nativeElement, 'click', this.onClick.bind(this));\r\n        }\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        if (!this.tt.disabled) {\r\n            this.tt.toggleExpand(this.rowNode.node);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // private updateIcon(treeNode: TreeNode) {\r\n    //     this.isShowTriangle = this.showTriangle();\r\n    //     this.noChilds = this.hasChildren();\r\n    //     this.treeNodeIcon = this.tt.getTreeIcon(treeNode);\r\n    // }\r\n}\r\n\r\n\r\n/**\r\n * éä¸­è¡ç»ä»¶\r\n */\r\n@Directive({\r\n    selector: '[selectRow]',\r\n    exportAs: 'row'\r\n})\r\nexport class TreeTableSelectRowDirective implements DoCheck, OnDestroy, OnInit, OnChanges {\r\n\r\n    @Input('selectRow') rowNode: RowNode;\r\n    @Input() rowIndex: number;\r\n\r\n    @Input() selectRowDisabled: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    public prevent = false;\r\n    public timer: any;\r\n    @Input() delay = 0;\r\n\r\n    constructor(public tt: TreeTableComponent, private el: ElementRef, private render: Renderer2,\r\n        private ngZone: NgZone) {\r\n        this.subscription = this.tt.selectNodeChangedSubject.subscribe((ids: string) => {\r\n            if (ids && this.rowNode) {\r\n                const idArr = ids.split(',');\r\n                if (idArr.indexOf(this.rowNode.id) > -1) {\r\n                    this.toggleClass();\r\n                    this.rowNode.node['elementRef'] = this.el;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.rowNode.node.selectable = !this.selectRowDisabled;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes.selectRowDisabled && !changes.selectRowDisabled.isFirstChange()) {\r\n        //     this.rowNode.node.selectable = !changes.selectRowDisabled.currentValue;\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = null;\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.tt.bodyTemplate) {\r\n            if (!this.tt.isSelected(this.rowNode.node)) {\r\n                this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onclick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            // this.rowClick(event);\r\n            if (this.delay !== 0) {\r\n\r\n                if (!this.prevent) {\r\n                    this.prevent = true;\r\n                    this.timer = setTimeout(() => {\r\n                        this.rowClick(event);\r\n                        this.prevent = false;\r\n                    }, this.delay);\r\n                }\r\n            } else {\r\n                this.rowClick(event);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n\r\n    isEnabled() {\r\n        return !this.tt.disabled && this.selectRowDisabled !== true;\r\n    }\r\n\r\n    private rowClick(event: Event) {\r\n        event.stopPropagation();\r\n\r\n        this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'row' }).subscribe((e: boolean) => {\r\n            if (!e) { return; }\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode,\r\n                rowIndex: this.rowIndex\r\n            });\r\n\r\n            this.ngZone.runOutsideAngular(() => {\r\n                this.toggleClass();\r\n            });\r\n        });\r\n    }\r\n\r\n    toggleClass() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.tt.isSelected(this.rowNode.node)) {\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.el.nativeElement.querySelectorAll('.farris-treetable-tbody>tr.farris-table-selectedrow').forEach(n => {\r\n                        this.render.removeClass(n, 'farris-table-selectedrow');\r\n                    });\r\n                }\r\n                this.render.addClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            } else {\r\n                if (!this.tt.keepSelect) {\r\n                    this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * è¡¨å¤´å¨éç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-header-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\r\n        <input type=\"checkbox\" #chkAll class=\"custom-control-input\"  [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableHeaderCheckboxComponent implements OnInit {\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chkAll') chkAll: ElementRef;\r\n\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    handleClick(event) {\r\n        if (!this.disabled && !this.tt.disabled) {\r\n            const beforeEvent = !this.checked ? this.tt.beforeCheckAll : this.tt.beforeUnCheckAll;\r\n\r\n            beforeEvent({ instance: this.tt, checked: !this.checked }).subscribe(e => {\r\n                // å¨éåè½\r\n                this.chkAll.nativeElement.indeterminate = false;\r\n                this.checked = !this.checked;\r\n                this.tt.toggleNodesWithCheckbox(event, this.checked);\r\n            });\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * è¡¨ä½checkbox ç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\r\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        :host .custom-checkbox {\r\n            opacity: 1;\r\n            float: none;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableCheckboxComponent implements OnInit {\r\n    @HostBinding('class.tree-toggler-checkbox') cls1 = true;\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() rowNode: RowNode;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chk') chk: ElementRef;\r\n\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.chk.nativeElement.indeterminate = this.rowNode.indeterminate || false;\r\n\r\n        this.ttService.changeCheckboxStatus$.pipe(\r\n            map(n => {\r\n                if (n.id === this.rowNode.id) {\r\n                    return n;\r\n                }\r\n                return null;\r\n            })\r\n        ).subscribe(n => {\r\n            if (n) {\r\n                this.chk.nativeElement.indeterminate = this.rowNode.indeterminate;\r\n                this.checked = this.rowNode.isChecked;\r\n                this.chk.nativeElement.checked = this.checked;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    handleClick(event) {\r\n        if (!this.disabled) {\r\n            this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'checkbox' }).subscribe((e: boolean) => {\r\n                if (!e) { return; }\r\n                this.checked = !this.checked;\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.clearAll();\r\n                    if (this.checked) {\r\n                        this.tt.selectNode(this.rowNode.id, true);\r\n                    } else {\r\n                        this.tt.unSelectNode(this.rowNode.id, true);\r\n                    }\r\n                } else {\r\n                    this.tt.toggleNodeWithCheckbox(event, this.rowNode, this.checked);\r\n                }\r\n            });\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dblclick]'\r\n})\r\nexport class DblClickRowDirective implements OnInit {\r\n    @Input('dblclick') enableDblClick = false;\r\n    @Input() dblclickNode: RowNode;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public el: ElementRef, public ttService: TreetableService,\r\n        @Optional() @Self() public selectRowDir: TreeTableSelectRowDirective) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.enableDblClick) {\r\n            this.selectRowDir.delay = 0;\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    ondblclick(event: Event) {\r\n\r\n        if (this.tt.disabled) {\r\n            return false;\r\n        }\r\n\r\n        if (this.tt.multiSelect && this.dblclickNode) {\r\n            if (this.dblclickNode.node.leaf) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        const clsName = event.target['className'];\r\n\r\n        let togglerTag = null;\r\n        if (clsName.indexOf('f-cmp-treetable-toggler') > -1) {\r\n            togglerTag = event.target['querySelector']('.treenode-fold');\r\n        } else {\r\n            if (event.target['className'].indexOf('treenode-fold') > -1) {\r\n                togglerTag = event.target as any;\r\n            }\r\n        }\r\n\r\n        if (togglerTag && togglerTag.style.visibility === 'visible') {\r\n            return false;\r\n        }\r\n\r\n        if (this.selectRowDir) {\r\n            this.selectRowDir.prevent = false;\r\n            clearTimeout(this.selectRowDir.timer);\r\n            if (this.selectRowDir.rowNode && this.enableDblClick) {\r\n                const rn = this.selectRowDir.rowNode;\r\n                if (this.tt.loadDataType === 'all' && !rn.node.leaf && this.tt.dblClickExpand) {\r\n                    this.tt.toggleExpand(rn.node);\r\n                }\r\n                this.tt.dblClick.emit(rn.node);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customRowStyle]'\r\n})\r\nexport class CustomRowStyleDirective implements OnInit, OnChanges {\r\n    @Input('customRowStyle') rowNode: RowNode;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        this.setRowStyle();\r\n    }\r\n\r\n    private setRowStyle() {\r\n        const fn = this.tt.rowStyler;\r\n        if (fn) {\r\n            const sty = fn(this.rowNode.node);\r\n            if (sty) {\r\n                if (typeof sty === 'object' && (sty.style || sty.cls)) {\r\n                    if (sty.style) {\r\n                        Object.keys(sty.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (sty.cls) {\r\n                        sty.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    if (Array.isArray(sty) || typeof sty === 'string') {\r\n                        const cls = this.tt.getRowCls(this.rowNode);\r\n                        if (cls && Object.keys(cls).length) {\r\n                            Object.keys(cls).forEach(c => {\r\n                                if (cls[c]) {\r\n                                    this.render.addClass(this.el.nativeElement, c);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        Object.keys(sty).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty[s]);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setRowStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customCellStyle]'\r\n})\r\nexport class TTCustomCellStyleDirective implements OnInit, OnChanges {\r\n    @Input('customCellStyle') column: TreeTableColumn;\r\n    @Input() rowNode: RowNode;\r\n    @Input() rowIndex: any;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.tt && this.tt.getCellCls) {\r\n            this.setCellStyle();\r\n        }\r\n\r\n        if (!this.tt.showBorder && this.tt.columns.length === 1) {\r\n            this.render.setStyle(this.el.nativeElement, 'border-width', '0px');\r\n        }\r\n    }\r\n\r\n    private setCellStyle() {\r\n        const cellCls = this.tt.getCellCls(this.rowNode, this.column.field);\r\n        if (this.column && this.column.styler) {\r\n            if (cellCls && Object.keys(cellCls).length) {\r\n                Object.keys(cellCls).forEach(c => {\r\n                    if (cellCls[c]) {\r\n                        this.render.addClass(this.el.nativeElement, c);\r\n                    }\r\n                });\r\n            }\r\n\r\n            const rowData = this.rowNode.node.data;\r\n            const ccs = this.column.styler(this.utils.getValue(this.column.field, rowData), rowData, this.rowIndex, this.rowNode);\r\n            if (ccs) {\r\n                if (ccs.style || ccs.cls) {\r\n                    if (ccs.style) {\r\n                        Object.keys(ccs.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, ccs.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (ccs.cls) {\r\n                        ccs.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            Object.keys(cellCls).forEach(s => {\r\n                this.render.setStyle(this.el.nativeElement, s, cellCls[s]);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setCellStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[resizable-column]'\r\n})\r\nexport class TTResizableColumnDirective implements AfterViewInit, OnDestroy {\r\n    @Input('resizable-column') enableResize = true;\r\n    resizer: HTMLSpanElement;\r\n    resizerMouseDownListener: any;\r\n    documentMouseMoveListener: any;\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public ngzone: NgZone,\r\n        public el: ElementRef, public render: Renderer2) {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnable()) {\r\n            this.render.addClass(this.el.nativeElement, 'resizable-column');\r\n\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'column-resizer';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.ngzone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n\r\n                this.el.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    isEnable() {\r\n        return this.tt.resizableColumns && !this.tt.autoWidth && this.enableResize;\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.ngzone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        this.tt.onColumnResizeBegin(event);\r\n        this.bindDocumentEvents();\r\n\r\n    }\r\n\r\n    onMouseEnter() {\r\n        // console.log(this.el);\r\n    }\r\n\r\n    onMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n}\r\n","import { debounceTime, map, auditTime, filter } from 'rxjs/operators';\r\nimport { Component, OnInit, EventEmitter, Output, ElementRef,\r\n    ViewChild, OnDestroy, NgZone, Injector, AfterViewInit, Input } from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'find-input',\r\n    template: `\r\n        <div class=\"f-find-input\" style=\"\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <select class=\"form-control\" [(ngModel)]=\"findField\">\r\n                        <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option>\r\n                    </select>\r\n                </div>\r\n                <input #input type=\"text\" placeholder=\"è³å°2ä¸ªå­ç¬¦\" class=\"form-control\"\r\n                    (keydown.esc)=\"onClose($event)\" (keydown.enter)=\"onEnter($event, 0)\">\r\n                <div class=\"input-group-append\">\r\n                    <span class=\"input-group-text\">{{current}}/{{count}}</span>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                        [disabled]=\"current === 0\" (click)=\"onEnter($event, -1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                    [disabled]=\"current === count\" (click)=\"onEnter($event, 1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"å³é­\" (click)=\"onClose($event)\">\r\n                        <span class=\"f-icon f-icon-close\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .f-find-input {\r\n            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;\r\n            border: 1px solid #d5d5d5;\r\n            box-shadow: 0px 1px 2px 0px #989898;\r\n        }\r\n        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }\r\n        .f-find-input .input-group-append { background: #fff; }\r\n        .f-find-input .input-group-append button { padding:1px 6px;}\r\n        `\r\n    ]\r\n})\r\nexport class FindInputComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    @Input() current = 0;\r\n    @Input() count = 0;\r\n    @Input() columns = [];\r\n\r\n    @Output() close = new EventEmitter();\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() enterHandler = new EventEmitter();\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n    findField = '';\r\n    private keyupEventSub: Subscription = null;\r\n\r\n    constructor(private el: ElementRef, private ngZone: NgZone, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        if (this.columns.length) {\r\n            this.columns = this.columns.filter(c => !c.formatter && c.field);\r\n            this.findField = this.columns[0].field;\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.keyupEventSub = fromEvent(this.input.nativeElement, 'keyup').pipe(\r\n                filter((e: any) => (e.switch || e.keyCode) !== 13),\r\n                debounceTime(200),\r\n                map((e: any) => e.target.value)\r\n            ).subscribe((v) => {\r\n                this.valueChanged.emit({value: v, field: this.findField});\r\n            });\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.input.nativeElement.focus();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.keyupEventSub) {\r\n            this.keyupEventSub.unsubscribe();\r\n        }\r\n        this.keyupEventSub = null;\r\n    }\r\n\r\n    onClose(event) {\r\n        this.close.emit();\r\n        return false;\r\n    }\r\n\r\n    onEnter($event, step) {\r\n        this.enterHandler.emit(step);\r\n        return false;\r\n    }\r\n\r\n}\r\n","import { PipeTransform, Pipe, ElementRef } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'highlight' })\r\nexport class HighlightPipe implements PipeTransform {\r\n    constructor(public sanitizer: DomSanitizer, private el: ElementRef) {\r\n    }\r\n    transform(text: string, keyword, field = '', findField = ''): SafeHtml {\r\n        let needSearch = true;\r\n        if (field && findField) {\r\n            if (findField.indexOf(',') === -1) {\r\n                needSearch = field === findField;\r\n            } else {\r\n                needSearch = findField.split(',').some(n => n === field);\r\n            }\r\n        }\r\n\r\n        if (!needSearch) {\r\n            return text;\r\n        }\r\n\r\n        if (keyword && text) {\r\n            let pattern = keyword.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n            pattern = pattern.split(' ').filter((t) => {\r\n                return t.length > 0;\r\n            }).join('|');\r\n            const regex = new RegExp(pattern, 'gi');\r\n            return this.sanitizer.bypassSecurityTrustHtml(\r\n                // text.replace(regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n                this.replaceContent(text, regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n            );\r\n\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    parseHTML(html, context) {\r\n        const t = (context || document).createElement('template');\r\n        t.innerHTML = html;\r\n        return t.content.cloneNode(true);\r\n    }\r\n\r\n    private replaceContent(strMatch1, regex, match) {\r\n        const matchReg1 = />.*?\\</gi; // åæ¥åº><ä¹é´çåå®¹\r\n        const strs = strMatch1.match(matchReg1); // æ¿å°ææç¬¦åçé®å¼\r\n        if (strs && strs.length) {\r\n            for (const aa of strs) {\r\n                const rep_old = strs[aa]; // æ¿å°åå§ç¬¦åå­ç¬¦ä¸²\r\n                const rep_new = strs[aa].replace(regex, match); // æ¿æ¢æç®çå­ç¬¦ä¸²\r\n                const re2 = new RegExp(rep_old, 'g'); // å©ç¨åå§å­ç¬¦ä¸²çææ­£å\r\n                strMatch1 = strMatch1.replace(re2, rep_new); // å°ç¬¦åçåå§å­ç¬¦ä¸²æ¿æ¢ææ°å­ç¬¦ä¸²\r\n            }\r\n            return strMatch1;\r\n        } else {\r\n            return strMatch1.replace(regex, match);\r\n        }\r\n    }\r\n}\r\n","import { TreeTableComponent } from './../treetable.component';\r\nimport { Component, Input, OnInit, Injector, ChangeDetectorRef, EventEmitter, Output, OnChanges, SimpleChanges, DoCheck } from '@angular/core';\r\nimport { TreeNode } from '../types/treenode';\r\nimport { filter } from 'rxjs/operators';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'nodes-pager',\r\n    templateUrl: './nodes-pager.component.html',\r\n    styles: [\r\n        `\r\n        .treetable-nodes-pagerbar { height: 22px; line-height: 22px; list-style: none}\r\n        .treetable-nodes-pagerbar li { float: left; box-sizing: border-box; }\r\n        .treetable-nodes-pagerbar .pager-btn {\r\n            width: 22px;\r\n            height: 22px;\r\n            text-align: center;\r\n            border: 1px solid #ccc;\r\n            background: rgb(248 249 250);\r\n            cursor: pointer;\r\n        }\r\n        .treetable-nodes-pagerbar .pager-btn:hover {\r\n            background: white;\r\n        }\r\n        .treetable-nodes-pagerbar .pageinfo {padding: 0 5px; font-weight: 400;}\r\n        .treetable-nodes-pagerbar .prev {}\r\n        .treetable-nodes-pagerbar .next {\r\n            border-left: 0;\r\n        }\r\n\r\n        .pager-btn.disabled{\r\n            color: rgb(204 204 204);\r\n            pointer-events: none;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreetableNodesPagerComponent implements OnInit, OnChanges {\r\n    @Input() context: any;\r\n\r\n    @Output() pageChange = new EventEmitter();\r\n\r\n    showPager = new BehaviorSubject(false);\r\n    pagerInfo = null;\r\n\r\n    constructor(private tt: TreeTableComponent,  private cd: ChangeDetectorRef, private injector: Injector) {\r\n        if (this.tt) {\r\n            this.tt.expand.pipe(\r\n                filter((node: any) => {\r\n                    return node.id === this.context.node.id && node.pagination && node.children.filter(n => !n.__childs_loading__).length;\r\n                })\r\n            ).subscribe(\r\n                (node: TreeNode) => {\r\n                    this.pagerInfo = {...node.pagination};\r\n                    this.showPager.next(true);\r\n                }\r\n            );\r\n\r\n            this.tt.appendNew.subscribe(\r\n                (e: any) => {\r\n                    const node = e.parent;\r\n                    if (node.id === this.context.node.id && node.pagination) {\r\n                        this.pagerInfo = {...node.pagination};\r\n                        this.showPager.next(true);\r\n                    }\r\n                }\r\n            );\r\n\r\n            this.tt.collapse.subscribe(\r\n                (node: TreeNode) => {\r\n                    if (node.id === this.context.node.id) {\r\n                        this.showPager.next(false);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setPagerInfo();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.context && !changes.context.isFirstChange()) {\r\n            this.setPagerInfo();\r\n        }\r\n    }\r\n\r\n    private setPagerInfo() {\r\n        if (this.context) {\r\n            const { node } = this.context;\r\n            if (node && node.pagination) {\r\n                this.pagerInfo = { ...node.pagination };\r\n                this.showPager.next(\r\n                    node.expanded && node.pagination\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getPagerCount() {\r\n        const { pageSize, total } = this.pagerInfo;\r\n        if (!total) {\r\n            return 0;\r\n        } else {\r\n            return Math.ceil(total / pageSize);\r\n        }\r\n    }\r\n\r\n    isFirstPager() {\r\n        return this.pagerInfo.pageIndex === 1;\r\n    }\r\n\r\n    isLastPager() {\r\n        return this.pagerInfo.pageIndex === this.getPagerCount();\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex - 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex + 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    setCurrent(page: number, pageSize?: number, $event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.pageChange.emit({ pageIndex: page, pageSize, node: this.context.node, context: this.context });\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'childs-loading',\r\n    template: `\r\n    <div class=\"loading\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .loading{\r\n            width: 150px;\r\n            height: 10px;\r\n            margin: 0 auto;\r\n            margin-top:10px;\r\n            margin-bottom: 20px;\r\n        }\r\n        .loading span{\r\n            display: inline-block;\r\n            width: 10px;\r\n            height: 100%;\r\n            margin-right: 5px;\r\n            border-radius: 50%;\r\n            background: #59a1ff;\r\n            -webkit-animation: load 1.04s ease infinite;\r\n        }\r\n        .loading span:last-child{\r\n            margin-right: 0px;\r\n        }\r\n        @-webkit-keyframes load{\r\n            0%{\r\n                opacity: 1;\r\n                -webkit-transform: scale(1.3);\r\n            }\r\n            100%{\r\n                opacity: 0.2;\r\n                -webkit-transform: scale(.3);\r\n            }\r\n        }\r\n        .loading span:nth-child(1){\r\n            -webkit-animation-delay:0.13s;\r\n        }\r\n        .loading span:nth-child(2){\r\n            -webkit-animation-delay:0.26s;\r\n        }\r\n        .loading span:nth-child(3){\r\n            -webkit-animation-delay:0.39s;\r\n        }\r\n        .loading span:nth-child(4){\r\n            -webkit-animation-delay:0.52s;\r\n        }\r\n        .loading span:nth-child(5){\r\n            -webkit-animation-delay:0.65s;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class ChildsLoadingComponent implements OnInit {\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","import { CommonUtils } from '@farris/ui-common';\r\nimport { TreeNode } from './types/treenode';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Pipe({name: 'tipmsg'})\r\nexport class CellTipsPipe implements PipeTransform {\r\n    constructor(private commonUtils: CommonUtils) {}\r\n    transform(col: any, ...args: any[]): any {\r\n        if (col.showTips) {\r\n            return this.getCellTooltipContent(col, args[0]);\r\n        }\r\n        return  '';\r\n    }\r\n\r\n    private getCellTooltipContent(col: TreeTableColumn, tn: TreeNode) {\r\n        let txt = this.commonUtils.getValue(col.field, tn.data);\r\n\r\n        if (col.tipContent) {\r\n            if ( typeof col.tipContent === 'string') {\r\n                txt = col.tipContent;\r\n            } else if (typeof col.tipContent === 'function') {\r\n                txt = col.tipContent(txt, tn.data, col);\r\n            }\r\n        } else {\r\n            if (col.formatter) {\r\n                if (typeof col.formatter === 'object') {\r\n                    if (col.formatter.type === 'enum') {\r\n                        txt = this.commonUtils.getEnumTitleFromColumnOptions(txt, col.formatter.options);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreetableService } from './treetable.service';\r\nimport { TreeTableComponent, TTBodyComponent,\r\n    TreeTableTogglerComponent,\r\n    TreeTableSelectRowDirective,\r\n    TreeTableCheckboxComponent,\r\n    TreeTableHeaderCheckboxComponent,\r\n    DblClickRowDirective,\r\n    TTResizableColumnDirective,\r\n    TreeTableColumnDirective,\r\n    TTCustomCellStyleDirective,\r\n    CustomRowStyleDirective} from './treetable.component';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DataColumnModule } from '@farris/ui-common/column';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { FindInputComponent } from './find-input.component';\r\nimport { HighlightPipe } from './high-light.pipe';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PaginationModule } from '@farris/ui-pagination';\r\nimport { TreetableNodesPagerComponent } from './nodes_pager/nodes-pager.component';\r\nimport { ChildsLoadingComponent } from './nodes_pager/childs-loading.component';\r\nimport { CellTipsPipe } from './cell-tips.pipe';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        PerfectScrollbarModule,\r\n        InputGroupModule,\r\n        LocaleModule.forRoot(),\r\n        DataColumnModule.forRoot(),\r\n        PaginationModule,\r\n        FarrisContextMenuModule\r\n    ],\r\n    declarations: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        TreeTableColumnDirective,\r\n        TTCustomCellStyleDirective,\r\n        FindInputComponent,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n    ],\r\n    exports: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        FarrisCommonModule,\r\n        TTCustomCellStyleDirective,\r\n        TreeTableColumnDirective,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n    ],\r\n    providers: [\r\n        TreetableService,\r\n        ResizeService,\r\n        TTHotkeys\r\n    ]\r\n})\r\nexport class TreeTableModule {\r\n\r\n}\r\n"]}