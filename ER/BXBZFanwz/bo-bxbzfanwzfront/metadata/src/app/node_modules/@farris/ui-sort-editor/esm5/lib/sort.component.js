/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef } from '@angular/core';
/*
* @Author: 疯狂秀才(lucas huang)
* @Date: 2018-11-23 08:33:37
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-17 16:38:53
* @Company: Inspur
* @Version: v0.0.1
*/
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, Injector, ComponentFactoryResolver, ElementRef, forwardRef, HostListener, HostBinding } from '@angular/core';
import { cloneDeep } from 'lodash-es';
import { LookupComponent } from '@farris/ui-lookup';
import { BsModalService } from '@farris/ui-modal';
import { SortEditorComponent } from './sort-editor.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
/**
 * @record
 */
export function SORT_FIELD_EDITOR() { }
if (false) {
    /** @type {?} */
    SORT_FIELD_EDITOR.prototype.type;
    /** @type {?|undefined} */
    SORT_FIELD_EDITOR.prototype.options;
}
/** @type {?} */
export var SORTER_LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SorterComponent; })),
    multi: true
};
var SorterComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SorterComponent, _super);
    function SorterComponent(injector, cfr, modalService, el) {
        var _this = _super.call(this, injector, el) || this;
        _this.cfr = cfr;
        _this.modalService = modalService;
        _this.el = el;
        _this.hostCls = 'f-cmp-inputgroup';
        _this.text = '';
        _this.conditions = [];
        _this.originalData = [];
        _this.columns = [];
        _this.fieldEditor = { type: 'select', options: {} };
        _this.returnType = 'object';
        _this.openDialog = new EventEmitter();
        _this.enableClear = true;
        _this.cd = null;
        _this.showClearButton = false;
        _this.commonUtils = null;
        _this.localeService = _this.injector.get(LocaleService);
        _this.cd = _this.injector.get(ChangeDetectorRef, null);
        _this.commonUtils = _this.injector.get(CommonUtils, null) || new CommonUtils();
        return _this;
    }
    /**
     * @return {?}
     */
    SorterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    SorterComponent.prototype.onmouseover = /**
     * @return {?}
     */
    function () {
        this.showClearButton = true;
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.onmouseleave = /**
     * @return {?}
     */
    function () {
        this.showClearButton = false;
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.disabled) {
            if (this.fieldEditor && this.fieldEditor.type === 'combo-tree') {
                this.fieldEditor.options = this.fieldEditor.options || {};
                if (this.fieldEditor.options.autoWidth === undefined) {
                    this.fieldEditor.options.autoWidth = true;
                }
                if (!this.fieldEditor.options.columns) {
                    this.fieldEditor.options.columns = [{ field: 'label', title: 'label', width: 100 }];
                }
                if (!this.fieldEditor.options.textField) {
                    this.fieldEditor.options.textField = 'label';
                }
                if (!this.fieldEditor.options.idField) {
                    this.fieldEditor.options.idField = 'value';
                }
            }
            /** @type {?} */
            var sortEditorFactory = this.cfr.resolveComponentFactory(SortEditorComponent);
            this.sortEditorRef = sortEditorFactory.create(this.injector);
            this.sortEditorRef.instance.columns = this.columns;
            this.sortEditorRef.instance.conditions = this.conditions;
            this.originalData = cloneDeep(this.conditions);
            this.dlgRef = this.modalService.show(this.sortEditorRef, {
                width: 500, height: 400,
                title: this.localeService.getValue('sortEditor.title'),
                enableScroll: false,
                minHeight: 298, minWidth: 498, iconCls: 'k-icon k-i-sort-asc',
                buttons: this.btnRef,
                showMaxButton: false, buttonAlign: 'right',
                dialogFooterStyles: { background: '#F4F6F9' },
                initialState: {
                    fieldEditor: this.fieldEditor
                }
            });
            this.sortEditorRef.instance.height = this.dlgRef.dialog.instance.getContainerSize().height;
            this.dlgRef.dialog.instance.resized.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                _this.sortEditorRef.instance.height = size.containerHeight;
            }));
            this.sortEditorRef.instance.sortsChanged.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.conditions = e.data;
            }));
            this.sortEditorRef.changeDetectorRef.detectChanges();
            this.dlgRef.dialog.changeDetectorRef.reattach();
            this.openDialog.emit();
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    SorterComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (typeof val === 'string') {
                val = JSON.parse(val);
            }
            this.conditions = val || [];
            this.text = this.commonUtils.buildSortString(val);
        }
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.save = /**
     * @return {?}
     */
    function () {
        if (this.conditions.length) {
            this.conditions = this.conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.sortField; }));
            this.text = this.commonUtils.buildSortString(this.conditions);
        }
        else {
            this.text = '';
        }
        this.closeDialog();
        if (this.cd) {
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.conditions = this.originalData;
        this.closeDialog();
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.updateModel();
        this.sortEditorRef = null;
        this.dlgRef.close();
    };
    /**
     * @return {?}
     */
    SorterComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.text = '';
        this.conditions = [];
        this.updateModel();
    };
    /**
     * @private
     * @return {?}
     */
    SorterComponent.prototype.updateModel = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var v = this.conditions;
        if (this.returnType === 'string') {
            v = JSON.stringify(this.conditions);
        }
        this.onModelChange(v);
        this.onModelTouched(v);
    };
    SorterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sorter',
                    template: "\n    <div class=\"input-group\">\n        <input class=\"form-control\" [value]=\"text\" #txtbox\n            [readonly]=\"!editable || readonly\"\n            [class.f-state-disabled] = \"disabled\"\n            [class.f-state-readonly] = \"readonly\"\n            [class.f-state-editable] = \"!editable\"\n            [disabled]=\"disabled\"/>\n        <div class=\"input-group-append\" *ngIf=\"!readonly && !disabled\">\n            <span *ngIf=\"showClearButton && enableClear\" class=\"f-select input-group-text lookup-clear\" (click)=\"clear()\">\n                <i class=\"f-icon modal_close\"></i>\n            </span>\n            <span class=\"f-select input-group-text\"  (click)=\"showDialog()\">\n                <i class=\"f-icon f-icon-lookup\"></i>\n            </span>\n        </div>\n    </div>\n\n    <ng-template #defaultButtonRef>\n        <button class=\"btn btn-outline-secondary\" (click)=\"cancel()\"> {{ 'sortEditor.cancel'| locale }} </button>&nbsp;\n        <button class=\"btn btn-primary\" (click)=\"save()\"> {{ 'sortEditor.ok'| locale }} </button>\n    </ng-template>\n    ",
                    providers: [
                        SORTER_LOOKUPGRID_VALUE_ACCESSOR
                    ],
                    styles: ["\n        .lookup-clear { cursor: pointer; background: #fff!important;}\n        .lookup-clear:hover { background: #e9ecef!important;}\n        "]
                }] }
    ];
    /** @nocollapse */
    SorterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: ElementRef }
    ]; };
    SorterComponent.propDecorators = {
        hostCls: [{ type: HostBinding, args: ['class',] }],
        columns: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        returnType: [{ type: Input }],
        openDialog: [{ type: Output }],
        btnRef: [{ type: ViewChild, args: ['defaultButtonRef',] }],
        textbox: [{ type: ViewChild, args: ['txtbox',] }],
        enableClear: [{ type: Input }],
        onmouseover: [{ type: HostListener, args: ['mouseover',] }],
        onmouseleave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return SorterComponent;
}(LookupComponent));
export { SorterComponent };
if (false) {
    /** @type {?} */
    SorterComponent.prototype.hostCls;
    /** @type {?} */
    SorterComponent.prototype.text;
    /** @type {?} */
    SorterComponent.prototype.conditions;
    /** @type {?} */
    SorterComponent.prototype.originalData;
    /** @type {?} */
    SorterComponent.prototype.columns;
    /** @type {?} */
    SorterComponent.prototype.fieldEditor;
    /** @type {?} */
    SorterComponent.prototype.returnType;
    /** @type {?} */
    SorterComponent.prototype.openDialog;
    /** @type {?} */
    SorterComponent.prototype.btnRef;
    /** @type {?} */
    SorterComponent.prototype.textbox;
    /** @type {?} */
    SorterComponent.prototype.enableClear;
    /** @type {?} */
    SorterComponent.prototype.dlgRef;
    /** @type {?} */
    SorterComponent.prototype.sortEditorRef;
    /** @type {?} */
    SorterComponent.prototype.cd;
    /** @type {?} */
    SorterComponent.prototype.showClearButton;
    /** @type {?} */
    SorterComponent.prototype.localeService;
    /** @type {?} */
    SorterComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    SorterComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    SorterComponent.prototype.modalService;
    /** @type {?} */
    SorterComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,