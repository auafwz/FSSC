/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ModalModule } from '@farris/ui-modal';
import { GRID_SETTINGS_SERVICE } from '@farris/ui-datagrid';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { LocaleModule } from '@farris/ui-locale';
import { MessagerModule } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { DatagridSettingsService } from './datagrid-settings.service';
import { DatagridSortSettingComponent } from './datagrid-sort-setting.component';
import { DatagridViewColumnsComponent } from './datagrid-view-columns.component';
import { FarrisCommonModule } from '@farris/ui-common';
import { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';
import { ColumnGroupSettingComponent } from './column-group/column-group.component';
import { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';
import { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';
import { ComboListModule } from '@farris/ui-combo-list';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
var DatagridSettingsModule = /** @class */ (function () {
    function DatagridSettingsModule() {
    }
    /**
     * @param {?=} apiUri
     * @return {?}
     */
    DatagridSettingsModule.forRoot = /**
     * @param {?=} apiUri
     * @return {?}
     */
    function (apiUri) {
        if (apiUri === void 0) { apiUri = ''; }
        return {
            ngModule: DatagridSettingsModule,
            providers: [
                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
            ]
        };
    };
    DatagridSettingsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DatagridSettingsComponent,
                        DatagridSortSettingComponent,
                        DatagridViewColumnsComponent,
                        ColumnFormatSettingComponent,
                        ColumnGroupSettingComponent,
                        ColumnVisibleDragDirective,
                        ColumnGroupDragDirective,
                        SimpleColumnsComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MultiSelectModule,
                        ComboListModule,
                        FarrisCommonModule.forRoot(),
                        MessagerModule.forRoot(),
                        LocaleModule.forRoot(),
                        ModalModule.forRoot(),
                    ],
                    entryComponents: [
                        DatagridSettingsComponent,
                        SimpleColumnsComponent
                    ],
                    exports: [
                        DatagridSettingsComponent,
                        SimpleColumnsComponent
                    ]
                },] }
    ];
    return DatagridSettingsModule;
}());
export { DatagridSettingsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc2V0dGluZ3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1zZXR0aW5ncy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC1zZXR0aW5ncy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFMUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDdkcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDcEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDbkcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBR2hGO0lBQUE7SUF1Q0EsQ0FBQzs7Ozs7SUFSVSw4QkFBTzs7OztJQUFkLFVBQWUsTUFBVztRQUFYLHVCQUFBLEVBQUEsV0FBVztRQUN0QixPQUFPO1lBQ0gsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO2FBQ3hFO1NBQ0osQ0FBQztJQUNOLENBQUM7O2dCQXRDSixRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLHlCQUF5Qjt3QkFDekIsNEJBQTRCO3dCQUM1Qiw0QkFBNEI7d0JBQzVCLDRCQUE0Qjt3QkFDNUIsMkJBQTJCO3dCQUMzQiwwQkFBMEI7d0JBQzFCLHdCQUF3Qjt3QkFDeEIsc0JBQXNCO3FCQUN6QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ0wsWUFBWTt3QkFDWixXQUFXO3dCQUNYLGlCQUFpQjt3QkFDakIsZUFBZTt3QkFDZixrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLGNBQWMsQ0FBQyxPQUFPLEVBQUU7d0JBQ3hCLFlBQVksQ0FBQyxPQUFPLEVBQUU7d0JBQ3RCLFdBQVcsQ0FBQyxPQUFPLEVBQUU7cUJBQ3hCO29CQUNELGVBQWUsRUFBRTt3QkFDYix5QkFBeUI7d0JBQ3pCLHNCQUFzQjtxQkFDekI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLHlCQUF5Qjt3QkFDekIsc0JBQXNCO3FCQUN6QjtpQkFDSjs7SUFVRCw2QkFBQztDQUFBLEFBdkNELElBdUNDO1NBVFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBHUklEX1NFVFRJTkdTX1NFUlZJQ0V9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQnO1xyXG5pbXBvcnQgeyBNdWx0aVNlbGVjdE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbXVsdGktc2VsZWN0JztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5cclxuaW1wb3J0IHsgRGF0YWdyaWRTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJy4vZGF0YWdyaWQtc2V0dGluZ3MuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IERhdGFncmlkU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhZ3JpZC1zZXR0aW5ncy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRTb3J0U2V0dGluZ0NvbXBvbmVudCB9IGZyb20gJy4vZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERhdGFncmlkVmlld0NvbHVtbnNDb21wb25lbnQgfSBmcm9tICcuL2RhdGFncmlkLXZpZXctY29sdW1ucy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGYXJyaXNDb21tb25Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IENvbHVtbkZvcm1hdFNldHRpbmdDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbi1mb3JtYXQtc2V0dGluZy9jb2x1bW4tZm9ybWF0LXNldHRpbmcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29sdW1uR3JvdXBTZXR0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW4tZ3JvdXAvY29sdW1uLWdyb3VwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbHVtblZpc2libGVEcmFnRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tZm9ybWF0LXNldHRpbmcvY29sdW1uLXZpc2libGUtZHJhZy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBDb2x1bW5Hcm91cERyYWdEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1ncm91cC9jb2x1bW4tZ3JvdXAtZHJhZy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBDb21ib0xpc3RNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxpc3QnO1xyXG5pbXBvcnQgeyBTaW1wbGVDb2x1bW5zQ29tcG9uZW50IH0gZnJvbSAnLi9zaW1wbGUtbW9kZS9zaW1wbGUtY29sdW1ucy5jb21wb25lbnQnO1xyXG5cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBEYXRhZ3JpZFNldHRpbmdzQ29tcG9uZW50LFxyXG4gICAgICAgIERhdGFncmlkU29ydFNldHRpbmdDb21wb25lbnQsXHJcbiAgICAgICAgRGF0YWdyaWRWaWV3Q29sdW1uc0NvbXBvbmVudCxcclxuICAgICAgICBDb2x1bW5Gb3JtYXRTZXR0aW5nQ29tcG9uZW50LFxyXG4gICAgICAgIENvbHVtbkdyb3VwU2V0dGluZ0NvbXBvbmVudCxcclxuICAgICAgICBDb2x1bW5WaXNpYmxlRHJhZ0RpcmVjdGl2ZSxcclxuICAgICAgICBDb2x1bW5Hcm91cERyYWdEaXJlY3RpdmUsXHJcbiAgICAgICAgU2ltcGxlQ29sdW1uc0NvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgTXVsdGlTZWxlY3RNb2R1bGUsXHJcbiAgICAgICAgQ29tYm9MaXN0TW9kdWxlLFxyXG4gICAgICAgIEZhcnJpc0NvbW1vbk1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTWVzc2FnZXJNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIExvY2FsZU1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTW9kYWxNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIERhdGFncmlkU2V0dGluZ3NDb21wb25lbnQsXHJcbiAgICAgICAgU2ltcGxlQ29sdW1uc0NvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBEYXRhZ3JpZFNldHRpbmdzQ29tcG9uZW50LFxyXG4gICAgICAgIFNpbXBsZUNvbHVtbnNDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkU2V0dGluZ3NNb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoYXBpVXJpID0gJycpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogRGF0YWdyaWRTZXR0aW5nc01vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEdSSURfU0VUVElOR1NfU0VSVklDRSwgdXNlQ2xhc3M6IERhdGFncmlkU2V0dGluZ3NTZXJ2aWNlIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19