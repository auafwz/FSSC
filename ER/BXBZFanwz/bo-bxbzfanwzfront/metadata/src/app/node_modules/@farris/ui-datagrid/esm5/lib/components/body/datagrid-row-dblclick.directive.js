/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, NgZone, Renderer2, HostListener } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { TR_PREFIX } from '../../types/constant';
var DatagridRowDblClickDirective = /** @class */ (function () {
    // private documentRowDblclickEvent: any = null;
    // private _mouseenter = null;
    // private _mouseleave = null;
    function DatagridRowDblClickDirective(el, injector, ngZone, render, dg) {
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.render = render;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    DatagridRowDblClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // if (this.ngZone) {
        //     this.ngZone.runOutsideAngular( () => {
        //         // this.render.listen(this.el.nativeElement, 'mouseenter', this.onMouseEnter.bind(this));
        //         // this.render.listen(this.el.nativeElement, 'mouseleave', this.onMouseLeave.bind(this));
        //         this._mouseenter = Utils.on(this.el.nativeElement, 'mouseenter', this.onMouseEnter.bind(this), { target: '.f-datagrid-body-row', options: { capture: true }});
        //         this._mouseleave = Utils.on(this.el.nativeElement, 'mouseleave', this.onMouseLeave.bind(this), { target: '.f-datagrid-body-row', options: { capture: true }});
        //     });
        // }
    };
    /**
     * @return {?}
     */
    DatagridRowDblClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // if (this._mouseenter) {
        //     this._mouseenter();
        // }
        // if (this._mouseleave) {
        //     this._mouseleave();
        // }
    };
    // onMouseEnter($event: MouseEvent) {
    //     this.bindRowDblClickEvent();
    // }
    // onMouseLeave($event: MouseEvent) {
    //     this.unbindRowDblclickEvent();
    // }
    // private bindRowDblClickEvent() {
    //     if (!this.documentRowDblclickEvent) {
    //         this.unbindRowDblclickEvent();
    //         this.ngZone.runOutsideAngular(() => {
    //             this.documentRowDblclickEvent = this.render.listen(this.el.nativeElement, 'dblclick', this.dblclickRowEvent.bind(this));
    //         });
    //     }
    // }
    // private unbindRowDblclickEvent() {
    //     if (this.documentRowDblclickEvent) {
    //         this.documentRowDblclickEvent();
    //         this.documentRowDblclickEvent = null;
    //     }
    // }
    // onMouseEnter($event: MouseEvent) {
    //     this.bindRowDblClickEvent();
    // }
    // onMouseLeave($event: MouseEvent) {
    //     this.unbindRowDblclickEvent();
    // }
    // private bindRowDblClickEvent() {
    //     if (!this.documentRowDblclickEvent) {
    //         this.unbindRowDblclickEvent();
    //         this.ngZone.runOutsideAngular(() => {
    //             this.documentRowDblclickEvent = this.render.listen(this.el.nativeElement, 'dblclick', this.dblclickRowEvent.bind(this));
    //         });
    //     }
    // }
    // private unbindRowDblclickEvent() {
    //     if (this.documentRowDblclickEvent) {
    //         this.documentRowDblclickEvent();
    //         this.documentRowDblclickEvent = null;
    //     }
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridRowDblClickDirective.prototype.dblclickRowEvent = 
    // onMouseEnter($event: MouseEvent) {
    //     this.bindRowDblClickEvent();
    // }
    // onMouseLeave($event: MouseEvent) {
    //     this.unbindRowDblclickEvent();
    // }
    // private bindRowDblClickEvent() {
    //     if (!this.documentRowDblclickEvent) {
    //         this.unbindRowDblclickEvent();
    //         this.ngZone.runOutsideAngular(() => {
    //             this.documentRowDblclickEvent = this.render.listen(this.el.nativeElement, 'dblclick', this.dblclickRowEvent.bind(this));
    //         });
    //     }
    // }
    // private unbindRowDblclickEvent() {
    //     if (this.documentRowDblclickEvent) {
    //         this.documentRowDblclickEvent();
    //         this.documentRowDblclickEvent = null;
    //     }
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var tr = event.target.closest('tr');
        /** @type {?} */
        var rowid = tr.id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '');
        /** @type {?} */
        var rowIndex = tr.getAttribute('index');
        /** @type {?} */
        var rowData = this.dg.dfs.findRow(rowid);
        if (this.dg.disableRow) {
            if (this.dg.disableRow(rowData.data, rowData.index)) {
                event.stopPropagation();
                return false;
            }
        }
        if (this.dg.editable) {
            if (this.dg.editMode === 'row' && this.dg.clickToEdit) {
                this.dg.editRow(rowid);
            }
            else {
                this.dg.isSingleClick = false;
                this.dg.dblclickRow.emit({ rowData: rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
            }
        }
        else {
            this.dg.dblclickRow.emit({ rowData: rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
        }
        event.stopPropagation();
        event.preventDefault();
    };
    DatagridRowDblClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[row-dblclick]',
                },] }
    ];
    /** @nocollapse */
    DatagridRowDblClickDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: DatagridComponent }
    ]; };
    DatagridRowDblClickDirective.propDecorators = {
        dblclickRowEvent: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
    };
    return DatagridRowDblClickDirective;
}());
export { DatagridRowDblClickDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.render;
    /** @type {?} */
    DatagridRowDblClickDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,