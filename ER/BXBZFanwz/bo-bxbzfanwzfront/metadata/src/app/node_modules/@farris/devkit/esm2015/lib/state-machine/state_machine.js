import { BehaviorSubject } from 'rxjs';
import { MetadataUtil } from '../metadata/index';
import { StateMachineContext } from './context';
import { State, initialUIState } from './types';
import { StateMachineEvent } from './state_machine_event';
/**
 * 预置界面效果处理
 */
export const effectHandlers = {
    /**
     * 预置状态迁移处理
     */
    transit: {
        /**
         * 执行状态迁移
         * @param stateMachine  状态机对象
         * @param stateName     下一状态的名称
         * @param preconditions 迁移条件
         */
        // tslint:disable-next-line: only-arrow-functions
        perform: function (statemachine, stateName, preconditons = []) {
            const nextState = statemachine.states[stateName];
            statemachine.context.transitTo(nextState.name);
            statemachine.render();
        }
    }
};
/**
 * 状态机
 *
 * ### 基本概念
 * 状态机中有三个重要的概念：
 * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；
 * - 控件状态（RenderState）：控制具体控件的状态；
 * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。
 *
 * ### 定义状态机
 *
 * **基本步骤**
 *
 * - 继承StateMachine基类，并添加NgStatemachine注解；
 * - 定义页面状态、控件状态、迁移动作。
 *
 * **状态机中的注解**
 *
 * - NgStatemachine：将类标记为状态机，并进行扩展；
 * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；
 * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，
 *   一般情况下是通过对页面状态进行逻辑运算来确定。
 * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。
 *
 * ```ts
 * @Injectable()
 * @NgStatemachine()
 * class SimpleStateMachine extends StateMachine {
 *
 *   // 查看状态，设置为初始状态
 *   @NgState({ initialState: true })
 *   viewState: State;
 *
 *   // 编辑状态
 *   @NgState()
 *   editState: State;
 *
 *   // 编辑按钮是否允许点击
 *   @NgRenderState({
 *     render: (context) => context.state === 'viewState'
 *   })
 *   canEdit: RenderState;
 *
 *   // 保存按钮是否允许点击
 *   @NgRenderState({
 *     render: (context) => context.state === 'editState'
 *   })
 *   canSave: RenderState;
 *
 *   // 输入控件是否允许输入
 *   @NgRenderState({
 *     render: (context) => context.state === 'editState'
 *   })
 *   canInput: RenderState;
 *
 *   // 迁移到编辑状态
 *   @NgAction({ transitTo: 'editState' })
 *   edit: Action;
 *
 *   // 迁移到查看状态
 *   @NgAction({ transitTo: 'viewState' })
 *   view: Action;
 * }
 * ```
 * 在上边的代码中做了如下定义：
 * - 两个页面状态：查看状态、编辑状态，
 * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，
 * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。
 *
 *
 * ### 在模板中使用状态机
 *
 * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。
 *
 * ```html
 * <button type="button" [disabled]="!viewModel.stateMachine.canEdit">编辑</button>
 * <button type="button" [disabled]="!viewModel.stateMachine.canSave">保存</button>
 * <input id="code" [disabled]="!viewModel.stateMachine.canInput" />
 * <input id="name" [disabled]="!viewModel.stateMachine.canInput" />
 * ```
 *
 * ### 执行状态迁移
 * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。
 * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。
 * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：
 * ```ts
 * @Injectable()
 * @NgCommandHandler({
 *   commandName: 'save'
 * })
 * class SaveHandler extends CommandHandler {
 *
 *   schedule() {
 *     this.addTask('save', () => {
 *       // 实现保存
 *     });
 *
 *     // 状态迁移
 *     this.addTask('transitState', ) => {
 *       this.stateMachine['view']();
 *     });
 *   }
 * }
 * ```
 */
export class StateMachine {
    /**
     * 构造函数
     */
    constructor() {
        this.isStateInited = false;
        const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
        // 遍历所有属性装饰器，并调用相应的build方法
        if (propsMetadatas) {
            Object.keys(propsMetadatas).forEach((propName) => {
                const propMetadatas = propsMetadatas[propName];
                propMetadatas.forEach(propMetadata => {
                    this['build' + propMetadata.ngMetadataName](propName, propMetadata);
                });
            });
        }
        // if (!this.initialState) {
        //   throw new Error('请在NgState注解中指定状态机的初始状态。');
        // }
        this.stateChange = new BehaviorSubject(false);
        this.context = new StateMachineContext(this);
        this.stateMachineEvent = new StateMachineEvent(this);
    }
    // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。
    initialize(frameContext, variableParseService) {
        this.appContext = frameContext.appContext;
        this.frameContext = frameContext;
        const stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();
        this.metadatas = stateMachineMetadata;
        this.buildStateMachine(stateMachineMetadata);
        // if (!this.initialState) {
        //   throw new Error('请在NgState注解中指定状态机的初始状态。');
        // }
        this.context.initialize(variableParseService, this.initialState);
        this.stateMachineEvent.initialize(this.frameContext);
        this.render();
    }
    collectionMetadata() {
        const stateMachineMetadata = {
            states: {},
            renderStates: {},
            actions: {}
        };
        const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
        if (propsMetadatas) {
            Object.keys(propsMetadatas).forEach((propName) => {
                const propMetadatas = propsMetadatas[propName];
                propMetadatas.forEach(propMetadata => {
                    switch (propMetadata.ngMetadataName) {
                        case 'NgState':
                            stateMachineMetadata.states[propName] = propMetadata;
                            break;
                        case 'NgRenderState':
                            stateMachineMetadata.renderStates[propName] = propMetadata;
                            break;
                        case 'NgAction':
                            stateMachineMetadata.actions[propName] = propMetadata;
                            break;
                    }
                });
            });
        }
        return stateMachineMetadata;
    }
    buildStateMachine(metadata) {
        Object.keys(metadata.states).forEach((stateName) => {
            this.buildNgState(stateName, metadata.states[stateName]);
        });
        Object.keys(metadata.renderStates).forEach((renderStateName) => {
            this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);
        });
        Object.keys(metadata.actions).forEach((actionName) => {
            this.buildNgAction(actionName, metadata.actions[actionName]);
        });
    }
    /**
     * 构造状态
     * @param stateName 状态名称
     * @param ngState   状态对象
     */
    buildNgState(stateName, ngState) {
        this.states = this.states || {};
        this[stateName] = new State(stateName);
        this.states[stateName] = this[stateName];
        if (ngState.initialState) {
            this.initialState = this[stateName];
        }
    }
    /**
     * 构造界面状态
     * @param renderStateName 渲染状态名称
     * @param ngRenderState   渲染状态元数据
     */
    buildNgRenderState(renderStateName, ngRenderState) {
        this.renderStates = this.renderStates || {};
        this[renderStateName] = initialUIState;
        this.renderStates[renderStateName] = this[renderStateName];
        // 将renderState上指定的render加入到renders中
        this.renders = this.renders || {};
        this.renders[renderStateName] = ngRenderState.render;
    }
    /**
     * 构造动作
     * @param actionName 动作名称
     * @param ngAction   动作元数据
     */
    buildNgAction(actionName, ngAction) {
        this[actionName] = () => {
            effectHandlers.transit.perform(this, ngAction.transitTo, ngAction.precondition);
        };
    }
    /**
     * 重新计算所有渲染状态的值
     * 当 state切换的时候，调用遍历所有的render方法，更改renderState
     */
    render() {
        for (const renderStateName in this.renderStates) {
            if (this.renderStates.hasOwnProperty(renderStateName) === false) {
                continue;
            }
            const stateRender = this.renders[renderStateName];
            if (!stateRender) {
                continue;
            }
            // 调用render方法，更新renderState
            this.renderStates[renderStateName] = stateRender(this.context);
            this[renderStateName] = this.renderStates[renderStateName];
        }
        this.stateChange.next(this.context.state);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfbWFjaGluZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3N0YXRlLW1hY2hpbmUvc3RhdGVfbWFjaGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFaEQsT0FBTyxFQUNMLEtBQUssRUFBRSxjQUFjLEVBRXRCLE1BQU0sU0FBUyxDQUFDO0FBRWpCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBd0IxRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRztJQUU1Qjs7T0FFRztJQUNILE9BQU8sRUFBRTtRQUVQOzs7OztXQUtHO1FBQ0gsaURBQWlEO1FBQ2pELE9BQU8sRUFBRSxVQUFVLFlBQTBCLEVBQUUsU0FBaUIsRUFBRSxlQUFzQixFQUFFO1lBQ3hGLE1BQU0sU0FBUyxHQUFVLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9DLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4QixDQUFDO0tBQ0Y7Q0FDRixDQUFDO0FBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0dHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUE0Q3ZCOztPQUVHO0lBQ0g7UUE5Q1Esa0JBQWEsR0FBRyxLQUFLLENBQUM7UUErQzVCLE1BQU0sY0FBYyxHQUFHLFlBQVks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QUMvRCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE1ldGFkYXRhVXRpbCB9IGZyb20gJy4uL21ldGFkYXRhL2luZGV4JztcclxuaW1wb3J0IHsgU3RhdGVNYWNoaW5lQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XHJcbmltcG9ydCB7IE5nU3RhdGUsIE5nQWN0aW9uLCBOZ1JlbmRlclN0YXRlIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcclxuaW1wb3J0IHtcclxuICBTdGF0ZSwgaW5pdGlhbFVJU3RhdGUsIEVmZmVjdCwgUmVuZGVyLFxyXG4gIFN0YXRlRGljdGlvbmFyeSwgUmVuZGVyU3RhdGVEaWN0aW9uYXJ5LCBSZW5kZXJEaWN0aW9uYXJ5XHJcbn0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJy4uL2ZyYW1lL2luZGV4JztcclxuaW1wb3J0IHsgU3RhdGVNYWNoaW5lRXZlbnQgfSBmcm9tICcuL3N0YXRlX21hY2hpbmVfZXZlbnQnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9IGZyb20gJy4uL3ZhcmlhYmxlL3ZhcmlhYmxlX3BhcnNlX3NlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIOeKtuaAgeacuuWIneWni+WMlumFjee9ruWvueixoVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZU1hY2hpbmVPcHRpb24ge1xyXG5cclxuICAvKipcclxuICAgKiDnlYzpnaLmuLLmn5Pmj4/ov7BcclxuICAgKi9cclxuICByZW5kZXJzPzogeyBbaW5kZXg6IHN0cmluZ106IFJlbmRlciB9O1xyXG5cclxuICAvKipcclxuICAgKiDnirbmgIHpm4blkIhcclxuICAgKi9cclxuICBzdGF0ZXM/OiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog54q25oCB5py655WM6Z2i5o6n5Yi25pWI5p6cXHJcbiAgICovXHJcbiAgZWZmZWN0cz86IHsgW2luZGV4OiBzdHJpbmddOiBFZmZlY3QgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOmihOe9rueVjOmdouaViOaenOWkhOeQhlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVmZmVjdEhhbmRsZXJzID0ge1xyXG5cclxuICAvKipcclxuICAgKiDpooTnva7nirbmgIHov4Hnp7vlpITnkIZcclxuICAgKi9cclxuICB0cmFuc2l0OiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiafooYznirbmgIHov4Hnp7tcclxuICAgICAqIEBwYXJhbSBzdGF0ZU1hY2hpbmUgIOeKtuaAgeacuuWvueixoVxyXG4gICAgICogQHBhcmFtIHN0YXRlTmFtZSAgICAg5LiL5LiA54q25oCB55qE5ZCN56ewXHJcbiAgICAgKiBAcGFyYW0gcHJlY29uZGl0aW9ucyDov4Hnp7vmnaHku7ZcclxuICAgICAqL1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBvbmx5LWFycm93LWZ1bmN0aW9uc1xyXG4gICAgcGVyZm9ybTogZnVuY3Rpb24gKHN0YXRlbWFjaGluZTogU3RhdGVNYWNoaW5lLCBzdGF0ZU5hbWU6IHN0cmluZywgcHJlY29uZGl0b25zOiBhbnlbXSA9IFtdKSB7XHJcbiAgICAgIGNvbnN0IG5leHRTdGF0ZTogU3RhdGUgPSBzdGF0ZW1hY2hpbmUuc3RhdGVzW3N0YXRlTmFtZV07XHJcbiAgICAgIHN0YXRlbWFjaGluZS5jb250ZXh0LnRyYW5zaXRUbyhuZXh0U3RhdGUubmFtZSk7XHJcbiAgICAgIHN0YXRlbWFjaGluZS5yZW5kZXIoKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICog54q25oCB5py6XHJcbiAqXHJcbiAqICMjIyDln7rmnKzmpoLlv7VcclxuICog54q25oCB5py65Lit5pyJ5LiJ5Liq6YeN6KaB55qE5qaC5b+177yaXHJcbiAqIC0g6aG16Z2i54q25oCB77yIU3RhdGXvvInvvJrpobXpnaLnmoTmlbTkvZPnirbmgIHvvIzmr5TlpoLmn6XnnIvnirbmgIHjgIHnvJbovpHnirbmgIHvvJtcclxuICogLSDmjqfku7bnirbmgIHvvIhSZW5kZXJTdGF0Ze+8ie+8muaOp+WItuWFt+S9k+aOp+S7tueahOeKtuaAge+8m1xyXG4gKiAtIOi/geenu+WKqOS9nO+8iEFjdGlvbu+8ie+8muW9k+WKqOS9nOWPkeeUn+aXtu+8jOWwhumhtemdouWIh+aNouWIsOaMh+WumueahOmhtemdoueKtuaAgeOAglxyXG4gKlxyXG4gKiAjIyMg5a6a5LmJ54q25oCB5py6XHJcbiAqXHJcbiAqICoq5Z+65pys5q2l6aqkKipcclxuICpcclxuICogLSDnu6fmib9TdGF0ZU1hY2hpbmXln7rnsbvvvIzlubbmt7vliqBOZ1N0YXRlbWFjaGluZeazqOino++8m1xyXG4gKiAtIOWumuS5iemhtemdoueKtuaAgeOAgeaOp+S7tueKtuaAgeOAgei/geenu+WKqOS9nOOAglxyXG4gKlxyXG4gKiAqKueKtuaAgeacuuS4reeahOazqOinoyoqXHJcbiAqXHJcbiAqIC0gTmdTdGF0ZW1hY2hpbmXvvJrlsIbnsbvmoIforrDkuLrnirbmgIHmnLrvvIzlubbov5vooYzmianlsZXvvJtcclxuICogLSBOZ1N0YXRl77ya5bCG5bGe5oCn5qCH6K6w5Li66aG16Z2i54q25oCB77yM6YCa6L+HaW5pdGlhbFN0YXRl5Y+v5Lul5qCH6K6w5q2k54q25oCB5piv5ZCm5Li65Yid5aeL54q25oCB77ybXHJcbiAqIC0gTmdSZW5kZXJTdGF0Ze+8muWwhuWxnuaAp+agh+iusOS4uuaOp+S7tueKtuaAge+8jOmAmui/h3JlbmRlcuaWueazleaMh+WumuaOp+S7tueKtuaAgeeahOWIh+aNouinhOWIme+8jFxyXG4gKiAgIOS4gOiIrOaDheWGteS4i+aYr+mAmui/h+WvuemhtemdoueKtuaAgei/m+ihjOmAu+i+kei/kOeul+adpeehruWumuOAglxyXG4gKiAtIE5nQWN0aW9u77ya5bCG5bGe5oCn5qCH6K6w5Li66L+B56e75Yqo5L2c77yM6YCa6L+HdHJhbnNpdFRv5oyH5a6a5Yqo5L2c5omn6KGM5pe26KaB6L+B56e75Yiw5ZOq5Liq6aG16Z2i54q25oCB44CCXHJcbiAqXHJcbiAqIGBgYHRzXHJcbiAqIEBJbmplY3RhYmxlKClcclxuICogQE5nU3RhdGVtYWNoaW5lKClcclxuICogY2xhc3MgU2ltcGxlU3RhdGVNYWNoaW5lIGV4dGVuZHMgU3RhdGVNYWNoaW5lIHtcclxuICpcclxuICogICAvLyDmn6XnnIvnirbmgIHvvIzorr7nva7kuLrliJ3lp4vnirbmgIFcclxuICogICBATmdTdGF0ZSh7IGluaXRpYWxTdGF0ZTogdHJ1ZSB9KVxyXG4gKiAgIHZpZXdTdGF0ZTogU3RhdGU7XHJcbiAqXHJcbiAqICAgLy8g57yW6L6R54q25oCBXHJcbiAqICAgQE5nU3RhdGUoKVxyXG4gKiAgIGVkaXRTdGF0ZTogU3RhdGU7XHJcbiAqXHJcbiAqICAgLy8g57yW6L6R5oyJ6ZKu5piv5ZCm5YWB6K6454K55Ye7XHJcbiAqICAgQE5nUmVuZGVyU3RhdGUoe1xyXG4gKiAgICAgcmVuZGVyOiAoY29udGV4dCkgPT4gY29udGV4dC5zdGF0ZSA9PT0gJ3ZpZXdTdGF0ZSdcclxuICogICB9KVxyXG4gKiAgIGNhbkVkaXQ6IFJlbmRlclN0YXRlO1xyXG4gKlxyXG4gKiAgIC8vIOS/neWtmOaMiemSruaYr+WQpuWFgeiuuOeCueWHu1xyXG4gKiAgIEBOZ1JlbmRlclN0YXRlKHtcclxuICogICAgIHJlbmRlcjogKGNvbnRleHQpID0+IGNvbnRleHQuc3RhdGUgPT09ICdlZGl0U3RhdGUnXHJcbiAqICAgfSlcclxuICogICBjYW5TYXZlOiBSZW5kZXJTdGF0ZTtcclxuICpcclxuICogICAvLyDovpPlhaXmjqfku7bmmK/lkKblhYHorrjovpPlhaVcclxuICogICBATmdSZW5kZXJTdGF0ZSh7XHJcbiAqICAgICByZW5kZXI6IChjb250ZXh0KSA9PiBjb250ZXh0LnN0YXRlID09PSAnZWRpdFN0YXRlJ1xyXG4gKiAgIH0pXHJcbiAqICAgY2FuSW5wdXQ6IFJlbmRlclN0YXRlO1xyXG4gKlxyXG4gKiAgIC8vIOi/geenu+WIsOe8lui+keeKtuaAgVxyXG4gKiAgIEBOZ0FjdGlvbih7IHRyYW5zaXRUbzogJ2VkaXRTdGF0ZScgfSlcclxuICogICBlZGl0OiBBY3Rpb247XHJcbiAqXHJcbiAqICAgLy8g6L+B56e75Yiw5p+l55yL54q25oCBXHJcbiAqICAgQE5nQWN0aW9uKHsgdHJhbnNpdFRvOiAndmlld1N0YXRlJyB9KVxyXG4gKiAgIHZpZXc6IEFjdGlvbjtcclxuICogfVxyXG4gKiBgYGBcclxuICog5Zyo5LiK6L6555qE5Luj56CB5Lit5YGa5LqG5aaC5LiL5a6a5LmJ77yaXHJcbiAqIC0g5Lik5Liq6aG16Z2i54q25oCB77ya5p+l55yL54q25oCB44CB57yW6L6R54q25oCB77yMXHJcbiAqIC0g5LiJ5Liq5o6n5Lu254q25oCB77ya5YiG5Yir55So5p2l5o6n5Yi257yW6L6R5oyJ6ZKu44CB5L+d5a2Y5oyJ6ZKu44CB6L6T5YWl5o6n5Lu255qE54q25oCB77yMXHJcbiAqIC0g5Lik5Liq6L+B56e75Yqo5L2c77yadmlld+WKqOS9nOeUqOadpeWwhumhtemdouWIh+aNouWIsOafpeeci+eKtuaAge+8jGVkaXTliqjkvZznlKjmnaXlsIbpobXpnaLliIfmjaLliLDnvJbovpHnirbmgIHjgIJcclxuICpcclxuICpcclxuICogIyMjIOWcqOaooeadv+S4reS9v+eUqOeKtuaAgeaculxyXG4gKlxyXG4gKiDmqKHmnb/kuK3miJHku6zkuLvopoHkvb/nlKjnmoTmmK/mjqfku7bnirbmgIHvvIzlpJrkuKrmjqfku7blj6/ku6XlhbHkuqvkuIDkuKrmjqfku7bnirbmgIHjgIJcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiIXZpZXdNb2RlbC5zdGF0ZU1hY2hpbmUuY2FuRWRpdFwiPue8lui+kTwvYnV0dG9uPlxyXG4gKiA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiIXZpZXdNb2RlbC5zdGF0ZU1hY2hpbmUuY2FuU2F2ZVwiPuS/neWtmDwvYnV0dG9uPlxyXG4gKiA8aW5wdXQgaWQ9XCJjb2RlXCIgW2Rpc2FibGVkXT1cIiF2aWV3TW9kZWwuc3RhdGVNYWNoaW5lLmNhbklucHV0XCIgLz5cclxuICogPGlucHV0IGlkPVwibmFtZVwiIFtkaXNhYmxlZF09XCIhdmlld01vZGVsLnN0YXRlTWFjaGluZS5jYW5JbnB1dFwiIC8+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiAjIyMg5omn6KGM54q25oCB6L+B56e7XHJcbiAqIOmAmui/h+aJp+ihjOeKtuaAgeacuuS4iueahOWKqOS9nOadpeWwhumhtemdouWIh+aNouWIsOmhtemdoueKtuaAge+8jOi/m+iAjOaUueWPmOaOp+S7tueKtuaAgeOAglxyXG4gKiDlgYforr7miJHku6zmnInov5nkuYjkuIDkuKrlnLrmma/vvIzlvZPnlKjmiLfngrnlh7vkv53lrZjmjInpkq7nmoTml7blgJnvvIzmiJHku6zlhYjmiafooYzkv53lrZjvvIzkv53lrZjlrozmiJDlkI7lsIbnirbmgIHov4Hnp7vliLDmn6XnnIvnirbmgIHjgIJcclxuICog5oiR5Lus5Y+v5Lul5a6a5LmJ5LiA5LiqQ29tbWFuZEhhbmRsZXLvvIzmt7vliqDkuKTkuKrlr7nlupTnmoTku7vliqHvvIzlhbfkvZPku6PnoIHlpoLkuIvvvJpcclxuICogYGBgdHNcclxuICogQEluamVjdGFibGUoKVxyXG4gKiBATmdDb21tYW5kSGFuZGxlcih7XHJcbiAqICAgY29tbWFuZE5hbWU6ICdzYXZlJ1xyXG4gKiB9KVxyXG4gKiBjbGFzcyBTYXZlSGFuZGxlciBleHRlbmRzIENvbW1hbmRIYW5kbGVyIHtcclxuICpcclxuICogICBzY2hlZHVsZSgpIHtcclxuICogICAgIHRoaXMuYWRkVGFzaygnc2F2ZScsICgpID0+IHtcclxuICogICAgICAgLy8g5a6e546w5L+d5a2YXHJcbiAqICAgICB9KTtcclxuICpcclxuICogICAgIC8vIOeKtuaAgei/geenu1xyXG4gKiAgICAgdGhpcy5hZGRUYXNrKCd0cmFuc2l0U3RhdGUnLCApID0+IHtcclxuICogICAgICAgdGhpcy5zdGF0ZU1hY2hpbmVbJ3ZpZXcnXSgpO1xyXG4gKiAgICAgfSk7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0YXRlTWFjaGluZSB7XHJcbiAgcHJpdmF0ZSBpc1N0YXRlSW5pdGVkID0gZmFsc2U7XHJcbiAgLyoqXHJcbiAgICog5Yid5aeL54q25oCBXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxTdGF0ZTogU3RhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeKtuaAgeWtl+WFuFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0ZXM6IFN0YXRlRGljdGlvbmFyeTtcclxuXHJcbiAgLyoqXHJcbiAgICog5riy5p+T54q25oCB5a2X5YW4XHJcbiAgICovXHJcbiAgcHVibGljIHJlbmRlclN0YXRlczogUmVuZGVyU3RhdGVEaWN0aW9uYXJ5O1xyXG5cclxuICAvKipcclxuICAgKiDmuLLmn5PlmajlrZflhbhcclxuICAgKi9cclxuICBwdWJsaWMgcmVuZGVyczogUmVuZGVyRGljdGlvbmFyeTtcclxuXHJcbiAgLyoqXHJcbiAgICog54q25oCB5py65LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRleHQ6IFN0YXRlTWFjaGluZUNvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeKtuaAgeWPmOabtFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0ZUNoYW5nZTogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz47XHJcblxyXG4gIHB1YmxpYyBhcHBDb250ZXh0OiBhbnk7XHJcblxyXG4gIHB1YmxpYyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dDtcclxuXHJcbiAgLyoqXHJcbiAgICog54q25oCB5py65LqL5Lu255uR5ZCsXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRlTWFjaGluZUV2ZW50OiBTdGF0ZU1hY2hpbmVFdmVudDtcclxuICAvKipcclxuICAgKiDnirbmgIHmnLrlhYPmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgbWV0YWRhdGFzOiB7IHN0YXRlczogeyBbc3RhdGVOYW1lOiBzdHJpbmddOiBOZ1N0YXRlIH0sIHJlbmRlclN0YXRlczogeyBbcmVuZGVyU3RhdGVOYW1lOiBzdHJpbmddOiBOZ1JlbmRlclN0YXRlIH0sIGFjdGlvbnM6IHsgW2FjdGlvbk5hbWU6IHN0cmluZ106IE5nQWN0aW9uIH0gfTtcclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IHByb3BzTWV0YWRhdGFzID0gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzKHRoaXMuY29uc3RydWN0b3IpO1xyXG5cclxuICAgIC8vIOmBjeWOhuaJgOacieWxnuaAp+ijhemlsOWZqO+8jOW5tuiwg+eUqOebuOW6lOeahGJ1aWxk5pa55rOVXHJcbiAgICBpZiAocHJvcHNNZXRhZGF0YXMpIHtcclxuICAgICAgT2JqZWN0LmtleXMocHJvcHNNZXRhZGF0YXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBwcm9wTWV0YWRhdGFzID0gcHJvcHNNZXRhZGF0YXNbcHJvcE5hbWVdO1xyXG4gICAgICAgIHByb3BNZXRhZGF0YXMuZm9yRWFjaChwcm9wTWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgdGhpc1snYnVpbGQnICsgcHJvcE1ldGFkYXRhLm5nTWV0YWRhdGFOYW1lXShwcm9wTmFtZSwgcHJvcE1ldGFkYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgKCF0aGlzLmluaXRpYWxTdGF0ZSkge1xyXG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ+ivt+WcqE5nU3RhdGXms6jop6PkuK3mjIflrprnirbmgIHmnLrnmoTliJ3lp4vnirbmgIHjgIInKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICB0aGlzLnN0YXRlQ2hhbmdlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KGZhbHNlKTtcclxuICAgIHRoaXMuY29udGV4dCA9IG5ldyBTdGF0ZU1hY2hpbmVDb250ZXh0KHRoaXMpO1xyXG4gICAgdGhpcy5zdGF0ZU1hY2hpbmVFdmVudCA9IG5ldyBTdGF0ZU1hY2hpbmVFdmVudCh0aGlzKTtcclxuICB9XHJcblxyXG4gIC8vIOeKtuaAgeacuuWPmOabtO+8jOS4uuS6huWcqOe7keWumuaVsOaNruS5i+WQjuaJp+ihjOeKtuaAgeacuueahOaTjeS9nO+8jOaKinJlbmRlcuaWueazleW7tuWQjuaJp+ihjOOAglxyXG4gIGluaXRpYWxpemUoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIHZhcmlhYmxlUGFyc2VTZXJ2aWNlOiBWYXJpYWJsZVBhcnNlU2VydmljZSkge1xyXG4gICAgdGhpcy5hcHBDb250ZXh0ID0gZnJhbWVDb250ZXh0LmFwcENvbnRleHQ7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dCA9IGZyYW1lQ29udGV4dDtcclxuICAgIGNvbnN0IHN0YXRlTWFjaGluZU1ldGFkYXRhID0gdGhpcy5hcHBDb250ZXh0Lm1ldGFkYXRhLnN0YXRlTWFjaGluZSB8fCB0aGlzLmNvbGxlY3Rpb25NZXRhZGF0YSgpO1xyXG4gICAgdGhpcy5tZXRhZGF0YXMgPSBzdGF0ZU1hY2hpbmVNZXRhZGF0YTtcclxuICAgIHRoaXMuYnVpbGRTdGF0ZU1hY2hpbmUoc3RhdGVNYWNoaW5lTWV0YWRhdGEpO1xyXG4gICAgLy8gaWYgKCF0aGlzLmluaXRpYWxTdGF0ZSkge1xyXG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ+ivt+WcqE5nU3RhdGXms6jop6PkuK3mjIflrprnirbmgIHmnLrnmoTliJ3lp4vnirbmgIHjgIInKTtcclxuICAgIC8vIH1cclxuICAgIHRoaXMuY29udGV4dC5pbml0aWFsaXplKHZhcmlhYmxlUGFyc2VTZXJ2aWNlLCB0aGlzLmluaXRpYWxTdGF0ZSk7XHJcbiAgICB0aGlzLnN0YXRlTWFjaGluZUV2ZW50LmluaXRpYWxpemUodGhpcy5mcmFtZUNvbnRleHQpO1xyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29sbGVjdGlvbk1ldGFkYXRhKCk6IHtcclxuICAgIHN0YXRlczogeyBbc3RhdGVOYW1lOiBzdHJpbmddOiBOZ1N0YXRlIH0sXHJcbiAgICByZW5kZXJTdGF0ZXM6IHsgW3JlbmRlclN0YXRlTmFtZTogc3RyaW5nXTogTmdSZW5kZXJTdGF0ZSB9LFxyXG4gICAgYWN0aW9uczogeyBbYWN0aW9uTmFtZTogc3RyaW5nXTogTmdBY3Rpb24gfVxyXG4gIH0ge1xyXG4gICAgY29uc3Qgc3RhdGVNYWNoaW5lTWV0YWRhdGEgPSB7XHJcbiAgICAgIHN0YXRlczoge30sXHJcbiAgICAgIHJlbmRlclN0YXRlczoge30sXHJcbiAgICAgIGFjdGlvbnM6IHt9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvcHNNZXRhZGF0YXMgPSBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXModGhpcy5jb25zdHJ1Y3Rvcik7XHJcbiAgICBpZiAocHJvcHNNZXRhZGF0YXMpIHtcclxuICAgICAgT2JqZWN0LmtleXMocHJvcHNNZXRhZGF0YXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBwcm9wTWV0YWRhdGFzID0gcHJvcHNNZXRhZGF0YXNbcHJvcE5hbWVdO1xyXG4gICAgICAgIHByb3BNZXRhZGF0YXMuZm9yRWFjaChwcm9wTWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgc3dpdGNoIChwcm9wTWV0YWRhdGEubmdNZXRhZGF0YU5hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSAnTmdTdGF0ZSc6XHJcbiAgICAgICAgICAgICAgc3RhdGVNYWNoaW5lTWV0YWRhdGEuc3RhdGVzW3Byb3BOYW1lXSA9IHByb3BNZXRhZGF0YTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnTmdSZW5kZXJTdGF0ZSc6XHJcbiAgICAgICAgICAgICAgc3RhdGVNYWNoaW5lTWV0YWRhdGEucmVuZGVyU3RhdGVzW3Byb3BOYW1lXSA9IHByb3BNZXRhZGF0YTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnTmdBY3Rpb24nOlxyXG4gICAgICAgICAgICAgIHN0YXRlTWFjaGluZU1ldGFkYXRhLmFjdGlvbnNbcHJvcE5hbWVdID0gcHJvcE1ldGFkYXRhO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0ZU1hY2hpbmVNZXRhZGF0YTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRTdGF0ZU1hY2hpbmUobWV0YWRhdGE6IHtcclxuICAgIHN0YXRlczogeyBbc3RhdGVOYW1lOiBzdHJpbmddOiBOZ1N0YXRlIH0sXHJcbiAgICByZW5kZXJTdGF0ZXM6IHsgW3JlbmRlclN0YXRlTmFtZTogc3RyaW5nXTogTmdSZW5kZXJTdGF0ZSB9LFxyXG4gICAgYWN0aW9uczogeyBbYWN0aW9uTmFtZTogc3RyaW5nXTogTmdBY3Rpb24gfVxyXG4gIH0pIHtcclxuICAgIE9iamVjdC5rZXlzKG1ldGFkYXRhLnN0YXRlcykuZm9yRWFjaCgoc3RhdGVOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgdGhpcy5idWlsZE5nU3RhdGUoc3RhdGVOYW1lLCBtZXRhZGF0YS5zdGF0ZXNbc3RhdGVOYW1lXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhtZXRhZGF0YS5yZW5kZXJTdGF0ZXMpLmZvckVhY2goKHJlbmRlclN0YXRlTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHRoaXMuYnVpbGROZ1JlbmRlclN0YXRlKHJlbmRlclN0YXRlTmFtZSwgbWV0YWRhdGEucmVuZGVyU3RhdGVzW3JlbmRlclN0YXRlTmFtZV0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmtleXMobWV0YWRhdGEuYWN0aW9ucykuZm9yRWFjaCgoYWN0aW9uTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHRoaXMuYnVpbGROZ0FjdGlvbihhY3Rpb25OYW1lLCBtZXRhZGF0YS5hY3Rpb25zW2FjdGlvbk5hbWVdKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg54q25oCBXHJcbiAgICogQHBhcmFtIHN0YXRlTmFtZSDnirbmgIHlkI3np7BcclxuICAgKiBAcGFyYW0gbmdTdGF0ZSAgIOeKtuaAgeWvueixoVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGROZ1N0YXRlKHN0YXRlTmFtZTogc3RyaW5nLCBuZ1N0YXRlOiBOZ1N0YXRlKSB7XHJcbiAgICB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzIHx8IHt9O1xyXG4gICAgdGhpc1tzdGF0ZU5hbWVdID0gbmV3IFN0YXRlKHN0YXRlTmFtZSk7XHJcbiAgICB0aGlzLnN0YXRlc1tzdGF0ZU5hbWVdID0gdGhpc1tzdGF0ZU5hbWVdO1xyXG4gICAgaWYgKG5nU3RhdGUuaW5pdGlhbFN0YXRlKSB7XHJcbiAgICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gdGhpc1tzdGF0ZU5hbWVdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg55WM6Z2i54q25oCBXHJcbiAgICogQHBhcmFtIHJlbmRlclN0YXRlTmFtZSDmuLLmn5PnirbmgIHlkI3np7BcclxuICAgKiBAcGFyYW0gbmdSZW5kZXJTdGF0ZSAgIOa4suafk+eKtuaAgeWFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGROZ1JlbmRlclN0YXRlKHJlbmRlclN0YXRlTmFtZTogc3RyaW5nLCBuZ1JlbmRlclN0YXRlOiBOZ1JlbmRlclN0YXRlKSB7XHJcbiAgICB0aGlzLnJlbmRlclN0YXRlcyA9IHRoaXMucmVuZGVyU3RhdGVzIHx8IHt9O1xyXG4gICAgdGhpc1tyZW5kZXJTdGF0ZU5hbWVdID0gaW5pdGlhbFVJU3RhdGU7XHJcbiAgICB0aGlzLnJlbmRlclN0YXRlc1tyZW5kZXJTdGF0ZU5hbWVdID0gdGhpc1tyZW5kZXJTdGF0ZU5hbWVdO1xyXG5cclxuICAgIC8vIOWwhnJlbmRlclN0YXRl5LiK5oyH5a6a55qEcmVuZGVy5Yqg5YWl5YiwcmVuZGVyc+S4rVxyXG4gICAgdGhpcy5yZW5kZXJzID0gdGhpcy5yZW5kZXJzIHx8IHt9O1xyXG4gICAgdGhpcy5yZW5kZXJzW3JlbmRlclN0YXRlTmFtZV0gPSBuZ1JlbmRlclN0YXRlLnJlbmRlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWKqOS9nFxyXG4gICAqIEBwYXJhbSBhY3Rpb25OYW1lIOWKqOS9nOWQjeensFxyXG4gICAqIEBwYXJhbSBuZ0FjdGlvbiAgIOWKqOS9nOWFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGROZ0FjdGlvbihhY3Rpb25OYW1lOiBzdHJpbmcsIG5nQWN0aW9uOiBOZ0FjdGlvbikge1xyXG4gICAgdGhpc1thY3Rpb25OYW1lXSA9ICgpID0+IHtcclxuICAgICAgZWZmZWN0SGFuZGxlcnMudHJhbnNpdC5wZXJmb3JtKHRoaXMsIG5nQWN0aW9uLnRyYW5zaXRUbywgbmdBY3Rpb24ucHJlY29uZGl0aW9uKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDph43mlrDorqHnrpfmiYDmnInmuLLmn5PnirbmgIHnmoTlgLxcclxuICAgKiDlvZMgc3RhdGXliIfmjaLnmoTml7blgJnvvIzosIPnlKjpgY3ljobmiYDmnInnmoRyZW5kZXLmlrnms5XvvIzmm7TmlLlyZW5kZXJTdGF0ZVxyXG4gICAqL1xyXG4gIHJlbmRlcigpIHtcclxuICAgIGZvciAoY29uc3QgcmVuZGVyU3RhdGVOYW1lIGluIHRoaXMucmVuZGVyU3RhdGVzKSB7XHJcblxyXG4gICAgICBpZiAodGhpcy5yZW5kZXJTdGF0ZXMuaGFzT3duUHJvcGVydHkocmVuZGVyU3RhdGVOYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgc3RhdGVSZW5kZXIgPSB0aGlzLnJlbmRlcnNbcmVuZGVyU3RhdGVOYW1lXTtcclxuICAgICAgaWYgKCFzdGF0ZVJlbmRlcikge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDosIPnlKhyZW5kZXLmlrnms5XvvIzmm7TmlrByZW5kZXJTdGF0ZVxyXG4gICAgICB0aGlzLnJlbmRlclN0YXRlc1tyZW5kZXJTdGF0ZU5hbWVdID0gc3RhdGVSZW5kZXIodGhpcy5jb250ZXh0KTtcclxuICAgICAgdGhpc1tyZW5kZXJTdGF0ZU5hbWVdID0gdGhpcy5yZW5kZXJTdGF0ZXNbcmVuZGVyU3RhdGVOYW1lXTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGVDaGFuZ2UubmV4dCh0aGlzLmNvbnRleHQuc3RhdGUpO1xyXG4gIH1cclxufVxyXG4iXX0=