/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ParseUtil } from './parse_util';
import { escape } from '../core/escape';
/**
 * 数据变量解析
 */
var UIStateVariableParser = /** @class */ (function () {
    function UIStateVariableParser() {
    }
    /**
     * 解析变量
     * @param expression 形如：/frameId/stateName
     * @param context 上下文
     */
    UIStateVariableParser.prototype.parse = function (expression, context) {
        var _this = this;
        var appContext = ParseUtil.getAppContext(context);
        var paths = this.extractPaths(expression);
        if (paths.length === 1) {
            var value = this.getUIState(paths[0], appContext);
            // 1、单个的表达式：直接求值
            if (expression === "{UISTATE~" + paths[0] + "}") {
                return value;
            }
            else if (expression === "{:UISTATE~" + paths[0] + "}") {
                return escape(value);
            }
        }
        // 2、其他情况：字符串替换
        paths.forEach(function (path) {
            var searchValue = "{UISTATE~" + path + "}";
            var replaceValue = _this.getUIState(path, appContext);
            expression = expression.replace(searchValue, replaceValue);
            var target = "{:UISTATE~" + path + "}";
            if (expression.includes(target)) {
                var value = escape(replaceValue);
                expression = expression.replace(target, value);
            }
        });
        return expression;
    };
    /**
     * 提取路径
     * 变量格式：{}
     */
    UIStateVariableParser.prototype.extractPaths = function (expression) {
        var paths = [];
        // 查找所有的uiState变量字符串
        var UI_STATE_PATTERN_G = /\{:?UISTATE~(\S+?)\}/g;
        var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        var UI_STATE_PATTERN = /\{:?UISTATE~(\S+?)\}/;
        uiStateVariables.forEach(function (uiStateVariable) {
            var pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    };
    /**
     * 获取UIState
     */
    UIStateVariableParser.prototype.getUIState = function (path, appContext) {
        var parts = path.split('/').filter(function (part) {
            return part !== '';
        });
        var _a = tslib_1.__read(parts, 2), frameId = _a[0], stateName = _a[1];
        var frameContext = appContext.getFrameContext(frameId);
        var state = frameContext.uiState[stateName];
        if (state && state.constructor.toString().startsWith('function Date()')) {
            return this.formatDate(state);
        }
        for (var i = 2; i < parts.length; i++) {
            state = state[parts[i]];
            // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。
            if (!state) {
                return state;
            }
        }
        return state;
    };
    /**
     * @todo：待删除
     */
    UIStateVariableParser.prototype.formatDate = function (value) {
        if (!value) {
            return '';
        }
        // 年
        var year = value.getFullYear();
        // 月
        var month = (value.getMonth() + 1).toString();
        month = month.length === 1 ? ('0' + month) : month;
        // 日
        var day = value.getDate().toString();
        day = day.length === 1 ? ('0' + day) : day;
        return year + "-" + month + "-" + day;
    };
    UIStateVariableParser.decorators = [
        { type: Injectable }
    ];
    return UIStateVariableParser;
}());
export { UIStateVariableParser };
//# sourceMappingURL=data:application/json;base64,