/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { CommandContext } from '../command/index';
/**
 * 命令变量解析
 * {COMMAND~/params/key}
 * {COMMAND~/results/taskName}
 */
var CommandVariableParser = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CommandVariableParser() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    CommandVariableParser.prototype.parse = function (expression, context) {
        var _this = this;
        var paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === "{COMMAND~" + paths[0] + "}") {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(function (path) {
            var searchValue = "{COMMAND~" + path + "}";
            var replaceValue = _this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    };
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    CommandVariableParser.prototype.extractPaths = function (expression) {
        var paths = [];
        // 查找所有的uiState变量字符串
        var UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
        var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        var UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
        uiStateVariables.forEach(function (sessionVariable) {
            var pathMatches = sessionVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    };
    /**
     * 获取UIState
     */
    CommandVariableParser.prototype.getValue = function (path, context) {
        if (context instanceof CommandContext === false) {
            throw new Error('当前上下文不支持COMMAND变量，请检查！');
        }
        var parts = path.split('/').filter(function (part) {
            return part !== '';
        });
        var _a = tslib_1.__read(parts, 2), type = _a[0], name = _a[1];
        if (type === 'params') {
            return context.command.params[name];
        }
        else if (type === 'results') {
            return context.results[name];
        }
    };
    CommandVariableParser.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandVariableParser.ctorParameters = function () { return []; };
    return CommandVariableParser;
}());
export { CommandVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9jb21tYW5kX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHbEQ7Ozs7R0FJRztBQUNIO0lBR0U7O09BRUc7SUFDSDtJQUNBLENBQUM7SUFFRDs7OztPQUlHO0lBQ0kscUNBQUssR0FBWixVQUFhLFVBQWtCLEVBQUUsT0FBWTtRQUE3QyxpQkFnQkM7UUFmQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTVDLGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFVBQVUsS0FBSyxjQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBRyxFQUFFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekM7UUFFRCxlQUFlO1FBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBRSxVQUFBLElBQUk7WUFDakIsSUFBTSxXQUFXLEdBQUcsY0FBWSxJQUFJLE1BQUcsQ0FBQztZQUN4QyxJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNsRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFRLFVBQVUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssNENBQVksR0FBcEIsVUFBcUIsVUFBa0I7UUFDckMsSUFBTSxLQUFLLEdBQWMsRUFBRSxDQUFDO1FBRTVCLG9CQUFvQjtRQUNwQixJQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQ2pELElBQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlELElBQUksZ0JBQWdCLEtBQUssSUFBSSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsSUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztRQUM5QyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUUsVUFBQSxlQUFlO1lBQ3ZDLElBQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUM1RCxJQUFJLFdBQVcsSUFBSSxJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0ssd0NBQVEsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLE9BQVk7UUFDekMsSUFBSSxPQUFPLFlBQVksY0FBYyxLQUFLLEtBQUssRUFBRTtZQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7UUFDRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQVk7WUFDaEQsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUcsSUFBQSw2QkFBb0IsRUFBbkIsWUFBSSxFQUFFLFlBQWEsQ0FBQztRQUMzQixJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDckIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQzthQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUM3QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDOztnQkEzRUYsVUFBVTs7OztJQTRFWCw0QkFBQztDQUFBLEFBNUVELElBNEVDO0FBRUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogc2Vzc2lvbuWPmOmHj+ino+aekFxyXG4gKiBAYXV0aG9yIFdpdHQgPGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1hbmRDb250ZXh0IH0gZnJvbSAnLi4vY29tbWFuZC9pbmRleCc7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VyIH0gZnJvbSAnLi92YXJpYWJsZV9wYXJzZXInO1xyXG5cclxuLyoqXHJcbiAqIOWRveS7pOWPmOmHj+ino+aekFxyXG4gKiB7Q09NTUFORH4vcGFyYW1zL2tleX1cclxuICoge0NPTU1BTkR+L3Jlc3VsdHMvdGFza05hbWV9XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIENvbW1hbmRWYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5p6Q5Y+Y6YePXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g5Y+Y6YeP77ya5qC85byP5b2i5aaC77yaL2ZyYW1lSWQvY29tcG9uZW50SWQvc3RhdGVOYW1lXHJcbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIHBhcnNlKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHBhdGhzID0gdGhpcy5leHRyYWN0UGF0aHMoZXhwcmVzc2lvbik7XHJcblxyXG4gICAgLy8gMeOAgeWNleS4queahOihqOi+vuW8j++8muebtOaOpeaxguWAvFxyXG4gICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMSAmJiBleHByZXNzaW9uID09PSBge0NPTU1BTkR+JHtwYXRoc1swXX19YCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShwYXRoc1swXSwgY29udGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMuOAgeWFtuS7luaDheWGte+8muWtl+espuS4suabv+aNolxyXG4gICAgcGF0aHMuZm9yRWFjaCggcGF0aCA9PiB7XHJcbiAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gYHtDT01NQU5EfiR7cGF0aH19YDtcclxuICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gdGhpcy5nZXRWYWx1ZShwYXRoLCBjb250ZXh0KTtcclxuICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAgZXhwcmVzc2lvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPkOWPllNlc3Npb27lj5jph4/lkI1cclxuICAgKiDlj5jph4/moLzlvI/vvJp7fVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdFBhdGhzKGV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHBhdGhzOiBzdHJpbmdbXSAgPSBbXTtcclxuXHJcbiAgICAvLyDmn6Xmib7miYDmnInnmoR1aVN0YXRl5Y+Y6YeP5a2X56ym5LiyXHJcbiAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOX0cgPSAvXFx7Q09NTUFORH4oXFxTKz8pXFx9L2c7XHJcbiAgICBjb25zdCB1aVN0YXRlVmFyaWFibGVzID0gZXhwcmVzc2lvbi5tYXRjaChVSV9TVEFURV9QQVRURVJOX0cpO1xyXG4gICAgaWYgKHVpU3RhdGVWYXJpYWJsZXMgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaPkOWPluWQjui+ueeahOi3r+W+hFxyXG4gICAgY29uc3QgVUlfU1RBVEVfUEFUVEVSTiA9IC9cXHtDT01NQU5EfihcXFMrPylcXH0vO1xyXG4gICAgdWlTdGF0ZVZhcmlhYmxlcy5mb3JFYWNoKCBzZXNzaW9uVmFyaWFibGUgPT4gIHtcclxuICAgICAgY29uc3QgcGF0aE1hdGNoZXMgPSBzZXNzaW9uVmFyaWFibGUubWF0Y2goVUlfU1RBVEVfUEFUVEVSTik7XHJcbiAgICAgIGlmIChwYXRoTWF0Y2hlcyAhPSBudWxsICYmIHBhdGhNYXRjaGVzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIHBhdGhzLnB1c2gocGF0aE1hdGNoZXNbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZVSVN0YXRlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZShwYXRoOiBzdHJpbmcsIGNvbnRleHQ6IGFueSkge1xyXG4gICAgaWYgKGNvbnRleHQgaW5zdGFuY2VvZiBDb21tYW5kQ29udGV4dCA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCflvZPliY3kuIrkuIvmlofkuI3mlK/mjIFDT01NQU5E5Y+Y6YeP77yM6K+35qOA5p+l77yBJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJ0cyA9IHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBbdHlwZSwgbmFtZV0gPSBwYXJ0cztcclxuICAgIGlmICh0eXBlID09PSAncGFyYW1zJykge1xyXG4gICAgICByZXR1cm4gY29udGV4dC5jb21tYW5kLnBhcmFtc1tuYW1lXTtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Jlc3VsdHMnKSB7XHJcbiAgICAgIHJldHVybiBjb250ZXh0LnJlc3VsdHNbbmFtZV07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBDb21tYW5kVmFyaWFibGVQYXJzZXIgfTtcclxuIl19