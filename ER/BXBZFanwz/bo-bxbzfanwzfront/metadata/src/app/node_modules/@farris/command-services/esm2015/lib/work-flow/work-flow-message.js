import { Injectable, Injector } from "@angular/core";
import { WorkFlowMessageService } from "./work-flow-message.service";
/**
 * 工作流消息
 * @warning 禁止使用表单上下文，所有上下文必须从外部传入
 */
export class WorkFlowMessage {
    constructor(injector, workFlowMessageService) {
        this.injector = injector;
        this.workFlowMessageService = workFlowMessageService;
        this.listeners = new Map();
    }
    setup() {
        if (!this.workFlowMessageService) {
            return;
        }
        this.workFlowMessageService.listen((message) => {
            if (!this.listeners || this.listeners.size < 1) {
                return;
            }
            this.listeners.forEach((callback, key) => {
                if (typeof callback === 'function') {
                    callback(message);
                }
            });
        });
    }
    addEventListener(callback) {
        const id = `${new Date().valueOf().toString(16)}-${Math.ceil(Math.random() * 100)}`;
        this.listeners.set(id, callback);
        return id;
    }
    removeEventListener(eventId) {
        if (!this.listeners || this.listeners.size < 1) {
            return;
        }
        this.listeners.delete(eventId);
    }
}
WorkFlowMessage.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WorkFlowMessage.ctorParameters = () => [
    { type: Injector },
    { type: WorkFlowMessageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay1mbG93LW1lc3NhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvd29yay1mbG93L3dvcmstZmxvdy1tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFOzs7R0FHRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBRTFCLFlBQW9CLFFBQWtCLEVBQVUsc0JBQThDO1FBQTFFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzVGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztJQUMxQyxDQUFDO0lBQ00sS0FBSztRQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDaEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQTBCLEVBQUUsRUFBRTtZQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7Z0JBQzlDLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBYSxFQUFFLEdBQVcsRUFBRSxFQUFFO2dCQUNwRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtvQkFDbEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ00sZ0JBQWdCLENBQUMsUUFBdUM7UUFDN0QsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3BGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqQyxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDTSxtQkFBbUIsQ0FBQyxPQUFlO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRTtZQUM5QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7WUEvQkYsVUFBVTs7OztZQVJVLFFBQVE7WUFFcEIsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBXb3JrRmxvdyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IFdvcmtGbG93TWVzc2FnZVNlcnZpY2UgfSBmcm9tIFwiLi93b3JrLWZsb3ctbWVzc2FnZS5zZXJ2aWNlXCI7XHJcblxyXG4vKipcclxuICog5bel5L2c5rWB5raI5oGvXHJcbiAqIEB3YXJuaW5nIOemgeatouS9v+eUqOihqOWNleS4iuS4i+aWh++8jOaJgOacieS4iuS4i+aWh+W/hemhu+S7juWklumDqOS8oOWFpVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV29ya0Zsb3dNZXNzYWdlIHtcclxuICBwcml2YXRlIGxpc3RlbmVyczogTWFwPHN0cmluZywgYW55PjtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSB3b3JrRmxvd01lc3NhZ2VTZXJ2aWNlOiBXb3JrRmxvd01lc3NhZ2VTZXJ2aWNlKSB7XHJcbiAgICB0aGlzLmxpc3RlbmVycyA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXR1cCgpIHtcclxuICAgIGlmICghdGhpcy53b3JrRmxvd01lc3NhZ2VTZXJ2aWNlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMud29ya0Zsb3dNZXNzYWdlU2VydmljZS5saXN0ZW4oKG1lc3NhZ2U6IFdvcmtGbG93LklNZXNzYWdlKSA9PiB7XHJcbiAgICAgIGlmICghdGhpcy5saXN0ZW5lcnMgfHwgdGhpcy5saXN0ZW5lcnMuc2l6ZSA8IDEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgoY2FsbGJhY2s6IGFueSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIoY2FsbGJhY2s6IChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB2b2lkKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGlkID0gYCR7bmV3IERhdGUoKS52YWx1ZU9mKCkudG9TdHJpbmcoMTYpfS0ke01hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwKX1gO1xyXG4gICAgdGhpcy5saXN0ZW5lcnMuc2V0KGlkLCBjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gaWQ7XHJcbiAgfVxyXG4gIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50SWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycyB8fCB0aGlzLmxpc3RlbmVycy5zaXplIDwgMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUoZXZlbnRJZCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==