/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
export class SearchComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearch($event) {
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit($event);
    }
}
SearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-search',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" [(ngModel)]=\"item.value.value\" \r\n    (clear)=\"onSearch($event)\" (blurHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" \r\n    (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
            }] }
];
/** @nocollapse */
SearchComponent.ctorParameters = () => [
    { type: SolutionService }
];
SearchComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    SearchComponent.prototype.item;
    /** @type {?} */
    SearchComponent.prototype.autoLabel;
    /** @type {?} */
    SearchComponent.prototype.disabled;
    /** @type {?} */
    SearchComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    SearchComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    SearchComponent.prototype.showlabel;
    /** @type {?} */
    SearchComponent.prototype.placeholder;
    /** @type {?} */
    SearchComponent.prototype.groupIcon;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9zZWFyY2hjb21wb25lbnQvc2VhcmNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXRHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQU9qRSxNQUFNLE9BQU8sZUFBZTs7OztJQTRCeEIsWUFBb0IsZUFBK0I7UUFBL0Isb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBcEIzQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7Ozs7UUFHMUQsV0FBTSxHQUFXLEtBQUssQ0FBQzs7OztRQUV2QixjQUFTLEdBQVcsSUFBSSxDQUFDO1FBYXpCLGNBQVMsR0FBRyx5Q0FBeUMsQ0FBQztJQUVELENBQUM7Ozs7SUFadEQsSUFDSSxRQUFRO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsSUFDSSxVQUFVO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0IsQ0FBQzs7OztJQU1ELFFBQVE7UUFDSixJQUFHLElBQUksQ0FBQyxJQUFJLEVBQUM7O2tCQUNILElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDbEUsSUFBRyxJQUFJLElBQUksb0JBQW9CLEVBQUM7Z0JBQzVCLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFDO29CQUNwRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztpQkFDcEQ7YUFDSjtpQkFDRztnQkFDQSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQzVDO1NBQ0o7UUFDRCxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBQzlFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDO2dCQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2hEO1NBQ0o7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVFLENBQUM7Ozs7SUFFRCxXQUFXO0lBRVgsQ0FBQzs7Ozs7Ozs7SUFNRCxxQkFBcUIsQ0FBQyxLQUFvQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsTUFBTTtRQUNYLElBQUcsSUFBSSxDQUFDLFFBQVEsRUFBQztZQUFDLE9BQU87U0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUF4RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLHVvQkFBc0M7YUFDekM7Ozs7WUFMUSxlQUFlOzs7bUJBWW5CLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLOzJCQUNMLE1BQU0sU0FBQyxjQUFjO3VCQVFyQixXQUFXLFNBQUMsd0JBQXdCO3lCQUtwQyxXQUFXLFNBQUMsK0JBQStCOzs7Ozs7O0lBaEI1QywrQkFBa0I7O0lBQ2xCLG9DQUEyQjs7SUFDM0IsbUNBQTBCOztJQUMxQix1Q0FBMEQ7Ozs7O0lBRzFELGlDQUF1Qjs7Ozs7SUFFdkIsb0NBQXlCOztJQUN6QixzQ0FBb0I7O0lBWXBCLG9DQUFzRDs7Ozs7SUFFMUMsMENBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEhvc3RCaW5kaW5nLCBPdXRwdXQsIEV2ZW50RW1pdHRlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtZmlsdGVyLXNlYXJjaCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCxPbkNoYW5nZXN7XHJcbiAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBRdWVyeUNvbmRpdGlvbuexu+Wei1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBpdGVtOmFueTtcclxuICAgIEBJbnB1dCgpIGF1dG9MYWJlbDpib29sZWFuO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6Ym9vbGVhbjtcclxuICAgIEBPdXRwdXQoJ3NlYXJjaEhhbmRsZScpIHNlYXJjaEhhbmRsZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICAvKirliKTmlq3mmK/lkKbmmK/lnKjmianlsZXljLrln5/lsZXnpLogKi9cclxuICAgIGV4dGVuZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKirliKTmlq3mmK/lkKbmmL7npLpsYWJlbCAqL1xyXG4gICAgc2hvd2xhYmVsOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmZpbHRlci1pdGVtLXdyYXAnKVxyXG4gICAgZ2V0IGlzRXh0ZW5kKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5leHRlbmQgJiYgdGhpcy5hdXRvTGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS1oaWRkZW5sYWJlbCcpXHJcbiAgICBnZXQgaGlkZW5MYWJlbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuc2hvd2xhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGdyb3VwSWNvbiA9ICc8c3BhbiBjbGFzcz1cImstaWNvbiBrLWktc2VhcmNoXCI+PC9zcGFuPic7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb2x1dGlvblNlcnZpY2U6U29sdXRpb25TZXJ2aWNlKXt9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtKXtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLml0ZW0ucGxhY2VIb2xkZXIpO1xyXG4gICAgICAgICAgICBpZih0eXBlID09ICdbb2JqZWN0IFVuZGVmaW5lZF0nKXtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXRlbS5jb250cm9sICYmIHRoaXMuaXRlbS5jb250cm9sLmhhc093blByb3BlcnR5KCdwbGFjZWhvbGRlcicpKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLmNvbnRyb2wucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0ucGxhY2VIb2xkZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5pdGVtICYmIHRoaXMuaXRlbS5jb250cm9sICYmIHRoaXMuaXRlbS5jb250cm9sLmhhc093blByb3BlcnR5KCdpc0V4dGVuZCcpKXtcclxuICAgICAgICAgICAgdGhpcy5leHRlbmQgPSB0aGlzLml0ZW0uY29udHJvbC5pc0V4dGVuZDtcclxuICAgICAgICAgICAgaWYoIXRoaXMuZXh0ZW5kKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd2xhYmVsID0gdGhpcy5pdGVtLmNvbnRyb2wuc2hvd0xhYmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS5hZGRGaWx0ZXJFZGl0b3JJbnN0YW5jZSh0aGlzLml0ZW0uZmllbGRDb2RlLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uLCBjb250cm9sVHlwZTogYW55KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1TdHlsZShmaWVsZCxjb250cm9sVHlwZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOlF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNlYXJjaCgkZXZlbnQpe1xyXG4gICAgICAgIGlmKHRoaXMuZGlzYWJsZWQpe3JldHVybjt9XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG59Il19