/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-26 17:17:32
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Input, NgZone, Renderer2, ElementRef, Inject, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DatagridBodyComponent } from './datagrid-body.component';
import { DatagridComponent } from './../../datagrid.component';
import { Utils } from './../../utils/utils';
var DatagridRowHoverDirective = /** @class */ (function () {
    function DatagridRowHoverDirective(dg, dgb, cd, el, zone, render) {
        this.dg = dg;
        this.dgb = dgb;
        this.cd = cd;
        this.el = el;
        this.zone = zone;
        this.render = render;
        this._mouseenter = null;
        this._mouseleave = null;
    }
    /**
     * @return {?}
     */
    DatagridRowHoverDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dg.rowHover) {
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this._mouseenter = Utils.on(_this.el.nativeElement, 'mouseenter', _this.onmouseenter.bind(_this), { target: '.f-datagrid-body-row', options: { capture: true } });
                _this._mouseleave = Utils.on(_this.el.nativeElement, 'mouseleave', _this.onmouseleave.bind(_this), { target: '.f-datagrid-body-row', options: { capture: true } });
            }));
        }
    };
    /**
     * @return {?}
     */
    DatagridRowHoverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._mouseenter) {
            this._mouseenter();
        }
        if (this._mouseleave) {
            this._mouseleave();
        }
    };
    // @HostListener('mouseenter')
    // @HostListener('mouseenter')
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridRowHoverDirective.prototype.onmouseenter = 
    // @HostListener('mouseenter')
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setRowHoverCls(event);
    };
    // @HostListener('mouseleave')
    // @HostListener('mouseleave')
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridRowHoverDirective.prototype.onmouseleave = 
    // @HostListener('mouseleave')
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setRowHoverCls(event, false);
    };
    /**
     * @param {?} event
     * @param {?=} hover
     * @return {?}
     */
    DatagridRowHoverDirective.prototype.setRowHoverCls = /**
     * @param {?} event
     * @param {?=} hover
     * @return {?}
     */
    function (event, hover) {
        if (hover === void 0) { hover = true; }
        if (!this.dg.rowHover) {
            return;
        }
        if (!event.target.matches('.f-datagrid-body-row')) {
            return;
        }
        this.rowIndex = event.target.getAttribute('index');
        /** @type {?} */
        var leftTableCls = 'f-datagrid-body-fixed-left';
        /** @type {?} */
        var rightTableCls = 'f-datagrid-body-fixed-right';
        /** @type {?} */
        var centerTableCls = 'f-datagrid-body-center';
        /** @type {?} */
        var body = this.dg.el.nativeElement.querySelector('.f-datagrid-body');
        if (!body) {
            return;
        }
        /** @type {?} */
        var leftTableDom = body.querySelector("." + leftTableCls);
        /** @type {?} */
        var rightTableDom = body.querySelector("." + rightTableCls);
        /** @type {?} */
        var centerTableDom = body.querySelector("." + centerTableCls);
        /** @type {?} */
        var method = hover ? 'addClass' : 'removeClass';
        /** @type {?} */
        var trSelector = "tr[index=\"" + this.rowIndex + "\"]";
        /** @type {?} */
        var dom = this.el.nativeElement.closest('div');
        if (dom && dom.className) {
            /** @type {?} */
            var trDom = centerTableDom.querySelector(trSelector);
            if (!trDom) {
                return;
            }
            if (trDom.className.indexOf('f-datagrid-disable-row') > -1) {
                return;
            }
            /** @type {?} */
            var ltr = null;
            /** @type {?} */
            var rtr = null;
            if (rightTableDom) {
                rtr = rightTableDom.querySelector(trSelector);
            }
            if (leftTableDom) {
                ltr = leftTableDom.querySelector(trSelector);
            }
            if (leftTableDom && ltr) {
                this.render[method](ltr, this.dg.hoverRowCls);
            }
            if (rightTableDom && rtr) {
                this.render[method](rtr, this.dg.hoverRowCls);
            }
            this.render[method](trDom, this.dg.hoverRowCls);
        }
    };
    DatagridRowHoverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[row-hover]',
                    exportAs: 'rowHover'
                },] }
    ];
    /** @nocollapse */
    DatagridRowHoverDirective.ctorParameters = function () { return [
        { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridComponent; })),] }] },
        { type: DatagridBodyComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridBodyComponent; })),] }] },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    DatagridRowHoverDirective.propDecorators = {
        rowIndex: [{ type: Input }],
        rowData: [{ type: Input, args: ['row-hover',] }]
    };
    return DatagridRowHoverDirective;
}());
export { DatagridRowHoverDirective };
if (false) {
    /** @type {?} */
    DatagridRowHoverDirective.prototype.rowIndex;
    /** @type {?} */
    DatagridRowHoverDirective.prototype.rowData;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype._mouseenter;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype._mouseleave;
    /** @type {?} */
    DatagridRowHoverDirective.prototype.dg;
    /** @type {?} */
    DatagridRowHoverDirective.prototype.dgb;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,