{"version":3,"sources":["ng://@farris/ui-text/lib/text.component.service.ts","ng://@farris/ui-text/lib/text.component.ts","ng://@farris/ui-text/lib/text.module.ts"],"names":["StaticTextControlService","Injectable","args","providedIn","TextComponent","Object","defineProperty","prototype","this","_tshowType","value","dateRange","text","formatValue","textChange","emit","changeTitle","ev","isTextArea","isPassword","mouseEnterChangeTitle","_option","ngOnInit","ngOnDestroy","ngAfterViewInit","textInnerEl","nativeElement","scrollHeight","clientHeight","staticTitle","length","control","formatLang","currentLanguage","getFormatNumberValue","format","toString","type","formatter","useThousands","precision","undefined","result","firstLetter","currencyToUpperCase","substring","Number","config","test","thousand","assign","decimal","expression","prefix","currencySymbol","numberHelper","formatMoney","toDecimal","toPercent","console","warn","indexOf","Array","join","filledSymbol","slice","toFixed","replace","word","toUpperCase","dateToUpperCase","newFormat","getFormatEnumValue","_this","data","curVals_1","split","enumDelimiter","nameResult","k","findObj","this_1","find","item","valueField","push","textField","getFormatCheckBoxValue","localeService","getValue","timeFormatTo","fmt","hourSystem","makeFormater","dateformat","returnFormat","getDateFromFormatedString","dtHelper","formatTo","dateString","year","month","day","hour","minite","second","m","a","b","c","d","parseInt","Date","str","dateValues","dateRangeDelimiter","dataStr_1","forEach","date","val","setText2Star","star","writeValue","beforeWriteValue","options","localizationType","showTime","ref","controlChange","registerOnChange","fn","registerOnTouched","controlTouch","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DateTimeHelperService","NumberHelperService","Injector","NgZone","HostBinding","ViewChild","read","ElementRef","Output","Input","HostListener","injector","ngzone","cls","EventEmitter","autoSize","height","showTitle","get","LocaleService","TextModule","NgModule","declarations","imports","CommonModule","LocaleModule","NumberHelperModule","DateHelperModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StaticTextControlService {\r\n\r\n  constructor() { }\r\n}\r\n","import {\r\n    Component, OnInit, forwardRef, Input, HostBinding, Output, EventEmitter, Injector,\r\n    SimpleChanges, ElementRef, ViewChild, NgZone, HostListener\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { NumberHelperService } from '@farris/ui-common/number';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'farris-text',\r\n    template: `\r\n        <span #textInner\r\n            [ngClass]=\"{'f-form-control-text':!isTextArea,'f-form-control-textarea':isTextArea,'f-component-text-auto-size': this.autoSize}\"\r\n            [title]=\"staticTitle\" [style.text-align]=\"textAlign\"\r\n            [style.height]=\"!autoSize&&height>0?height+'px':null\" [style.minHeight]=\"autoSize&&height>0?height+'px':null\"\r\n            [style.maxHeight]=\"autoSize&&maxHeight>0?maxHeight+'px':null\">{{text && text.length > 0 ?  text : control}}</span>\r\n    `,\r\n    styles: [],\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: forwardRef(() => TextComponent),\r\n        multi: true,\r\n    }]\r\n})\r\nexport class TextComponent implements OnInit, ControlValueAccessor {\r\n\r\n    @HostBinding('class.f-component-text') cls = true;\r\n    @ViewChild('textInner', { read: ElementRef }) textInnerEl: ElementRef;\r\n    @Output() textChange = new EventEmitter<any>();\r\n    /** æ¯å¦ä¸ºå¯ç è¾å¥ */\r\n    @Input() isPassword = false;\r\n    // æ¯å¦å¤è¡ææ¬\r\n    @Input() isTextArea = false;\r\n    // æ¯å¦å¯ç¨èªå¨å°ºå¯¸\r\n    @Input() autoSize = false;\r\n    // è®¾ç½®æå¤§é«åº¦\r\n    @Input() maxHeight: number;\r\n    // è®¾ç½®é«åº¦\r\n    @Input() height = 0;\r\n    // æ§ä»¶ç±»å\r\n    @Input() type: string;\r\n    // æ¯å¦æ¯æ¥æèå´\r\n    @Input() dateRange = false;\r\n    // éè¦è½¬åç±»åæ ¼å¼çè¡¨è¾¾å¼\r\n    @Input() format: any;\r\n    // å¤è¯­è¨\r\n    @Input() lang: string;\r\n    // è½¬æ¢ç±»åç¨å°çæ°æ®\r\n    @Input() data: any;\r\n    // ååä½ç¬¦å·\r\n    @Input() thousand = ',';\r\n    // å°æ°ç¹å¤ç¬¦å·\r\n    @Input() decimal = '.';\r\n    // è´§å¸ç¬¦å·åå¼å±ç°å½¢å¼\r\n    @Input() expression = '%s%v';\r\n    @Input() currentLanguage: string;\r\n    // formControlæ¾ç¤ºçææ¬\r\n    @Input() showTime: boolean;\r\n    @Input() textField = 'name';\r\n    @Input() valueField = 'value';\r\n    @Input() returnFormat = ''; // ä»æå¡å¨ç«¯åå¼æ¯æ ¼å¼ååç\r\n\r\n    // ææ¬æ¹å\r\n    @Input() textAlign;\r\n    // æ¥æèå´æ¨¡å¼ä¸inputçæ¾ç¤ºåå²ç¬¦å\r\n    @Input() dateRangeDelimiter = '~';\r\n    @Input() enumDelimiter = ',';\r\n    private _tshowType = 0;\r\n    @Input()\r\n    set showType(value: number) {\r\n        this._tshowType = value;\r\n        // å¦ææ¯å¨\r\n        if (value == 4) {\r\n            this.dateRange = true;\r\n        }\r\n    }\r\n    get showType(): number {\r\n        return this._tshowType;\r\n    }\r\n    /**\r\n     * å½éåç±»å\r\n     */\r\n    @Input() localizationType: string;\r\n    control: any;\r\n    // æ®éææ¬\r\n    text: any;\r\n    // è´§å¸ç¬¦å·ï¼é»è®¤æ¯RMB\r\n    currencySymbol = 'ï¿¥';\r\n    // åè¿å¶åé¢å¡«åçç¬¦å·\r\n    @Input() filledSymbol = '0';\r\n    // æ®éææ¬è¾å¥å¼\r\n    @Input()\r\n    set value(value: any) {\r\n        this.text = this.formatValue(value);\r\n        this.textChange.emit(this.text);\r\n    }\r\n    get value() {\r\n        return this.text;\r\n    }\r\n    @HostListener('mouseenter', ['$event']) changeTitle(ev) {\r\n        if (!this.isTextArea && !this.isPassword) {\r\n            this.mouseEnterChangeTitle();\r\n        }\r\n    }\r\n    // æ ç­¾\r\n    staticTitle = \"\";\r\n    // å¤çä¸­è±ææåµï¼ å ä¸ºå¤è¯­è¨ææ¶ä¸éè¿è¿ä¸ªå±æ§æ§å¶\r\n    @Input() showTitle = false;\r\n    //æ°å¼æ ¼å¼åæ°\r\n    _option;\r\n    @Input()\r\n    set option(value) {\r\n        this._option = value;\r\n    }\r\n    get option() {\r\n        return this._option;\r\n    }\r\n\r\n    private localeService: any;\r\n\r\n    beforeWriteValue: (val: any, options: any) => string = null;\r\n\r\n    private controlChange = (val) => { };\r\n    private controlTouch = (val) => { };\r\n\r\n    constructor(\r\n        private dtHelper: DateTimeHelperService,\r\n        private numberHelper: NumberHelperService,\r\n        private injector: Injector,\r\n        public ngzone: NgZone\r\n    ) {\r\n        this.localeService = this.injector.get(LocaleService);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngOnDestroy(): void {\r\n\r\n    }\r\n    ngAfterViewInit(): void {\r\n\r\n    }\r\n    private mouseEnterChangeTitle() {\r\n        if (this.textInnerEl.nativeElement.scrollHeight > this.textInnerEl.nativeElement.clientHeight) {\r\n            this.staticTitle = this.text && this.text.length > 0 ? this.text : this.control;\r\n        } else {\r\n            this.staticTitle = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¤çå¤è¯­è¨ï¼å¾å®\r\n     */\r\n    formatLang(value: any) {\r\n        return value && value[this.currentLanguage] ? value[this.currentLanguage] : '';\r\n    }\r\n    /**\r\n     * Cè´§å¸\r\n     * Dåè¿å¶\r\n     * Fæµ®ç¹æ°\r\n     * Næ°å­ï¼å¸¦ååä½\r\n     * Pç¾åæ¯\r\n     */\r\n    getFormatNumberValue(value: any) {\r\n        if (!this.format && !this._option) {\r\n            return value.toString();\r\n        }\r\n        if (this._option && this._option.type && this._option.type == 'number') {\r\n            if (this._option.formatter) {\r\n                return this._option.formatter(value);\r\n            } else {\r\n                if (this._option.useThousands) {\r\n                    if (this._option.precision != undefined) {\r\n                        this.format = 'n' + this._option.precision;\r\n                    } else {\r\n                        this.format = 'n2';\r\n                    }\r\n                } else {\r\n                    if (this._option.precision != undefined) {\r\n                        this.format = 'f' + this._option.precision;\r\n                    } else {\r\n                        this.format = 'f2';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const firstLetter = this.currencyToUpperCase(this.format.substring(0, 1));\r\n        const precision = Number(this.format.substring(1));\r\n        let config = {};\r\n        let result: any;\r\n        if (!/C|D|F|N|P/g.test(firstLetter)) {\r\n            console.warn(`ä¸æ¯æformatä¸º ${this.format} ç±»åçæ°å­æ ¼å¼å`);\r\n            return;\r\n        }\r\n        if (this.thousand) {\r\n            Object.assign(config, { thousand: this.thousand });\r\n        }\r\n        if (this.decimal) {\r\n            Object.assign(config, { decimal: this.decimal });\r\n        }\r\n        if (this.expression) {\r\n            Object.assign(config, { format: this.expression });\r\n        }\r\n        switch (firstLetter) {\r\n            case 'C':\r\n                Object.assign(config, { prefix: this.currencySymbol, precision });\r\n                result = this.numberHelper.formatMoney(value, config);\r\n                break;\r\n            case 'D':\r\n                result = this.toDecimal(value, precision);\r\n                break;\r\n            case 'F':\r\n                Object.assign(config, { prefix: '', thousand: '', precision });\r\n                result = this.numberHelper.formatMoney(value, config);\r\n                break;\r\n            case 'N':\r\n                Object.assign(config, { prefix: '', precision });\r\n                result = this.numberHelper.formatMoney(value, config);\r\n                break;\r\n            case 'P':\r\n                result = this.toPercent(value, precision);\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param value è½¬æ¢æåè¿å¶çæ°å­\r\n     * @param precision åè¿å¶æ°å­çé¿åº¦\r\n     */\r\n    toDecimal(value: any, precision: any) {\r\n        if (value.toString().indexOf('.') > -1) {\r\n            console.warn('åè¿å¶è½¬æ¢ä»éæ´åç±»å');\r\n            return;\r\n        }\r\n        return (Array(precision).join(this.filledSymbol) + value).slice(-precision);\r\n    }\r\n    /**\r\n     * @param value è½¬æ¢æç¾åæ°çæ°å­\r\n     * @param decimal å°æ°ç¹ä¿çå ä½\r\n     */\r\n    toPercent(value: any, precision: any) {\r\n        return Number(value * 100).toFixed(Number(precision)) + '%';\r\n    }\r\n\r\n    /**\r\n     * å°è´§å¸ç¬¦å·é¦å­æ¯è½¬æ¢æå¤§å\r\n     */\r\n    currencyToUpperCase(value: any) {\r\n        return value.replace(/[a-z]+/g, (word: any) => {\r\n            return word.toUpperCase();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * å¤çå¹´ï¼Y=>y, D=>d\r\n     */\r\n    dateToUpperCase(value: any) {\r\n        let newFormat: any;\r\n        if (/Y/g.test(value) === true) {\r\n            newFormat = value.replace(/Y/g, 'y');\r\n        } else {\r\n            newFormat = value;\r\n        }\r\n        if (/D/g.test(newFormat) === true) {\r\n            newFormat = newFormat.replace(/D/g, 'd');\r\n        }\r\n\r\n        return newFormat;\r\n    }\r\n    /**\r\n     * æä¸¾ç±»åå¤ç\r\n     */\r\n    getFormatEnumValue(value: any) {\r\n        if (value == undefined || value === null || value === '') {\r\n            return '';\r\n        }\r\n        if (this.data && this.data.length) {\r\n            // å¯è½å­å¨å¤éæä¸¾ï¼ä½ä¸ºåéç¬¦  \r\n            // let curVals = ('' + value).split(',');\r\n            let curVals = ('' + value).split(this.enumDelimiter);\r\n            let nameResult = [];\r\n            for (let k = 0; k < curVals.length; k++) {\r\n                let findObj = this.data.find(item => {\r\n                    return item[this.valueField] == curVals[k];\r\n                });\r\n                if (findObj) {\r\n                    nameResult.push(findObj[this.textField]);\r\n                }\r\n                else {\r\n                    nameResult.push(curVals[k]);\r\n                }\r\n            }\r\n            if (nameResult.length > 0) {\r\n                // return nameResult.join(',');\r\n                return nameResult.join(this.enumDelimiter);\r\n            }\r\n            return '';\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n    /**\r\n     * booleanå¼å¤ç\r\n     */\r\n    getFormatCheckBoxValue(value: boolean) {\r\n        if (value === true) {\r\n            return this.localeService.getValue('text.yes');\r\n        } else if (value === false || value == null || typeof value === 'undefined') {\r\n            return this.localeService.getValue('text.no');\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n\r\n    private timeFormatTo(value: any, fmt: string, hourSystem = 12) {\r\n\r\n    }\r\n\r\n    private makeFormater(fmt: string): string {\r\n        return fmt;\r\n    }\r\n    /*\r\n    * æ¥ææ ¼å¼å\r\n    */\r\n    dateformat(value) {\r\n        let str;\r\n        if (!this.format) {\r\n            this.format = 'YYYY-MM-DD';\r\n        }\r\n        // å½åå¼æ¯å·²ç»æ ¼å¼ååçæ¥æå­ç¬¦ä¸²\r\n        if (this.returnFormat && this.returnFormat != 'yyyy-MM-dd' && typeof value == 'string') {\r\n            value = this.getDateFromFormatedString(value, this.returnFormat);\r\n        }\r\n        //\r\n        if (this.format === 'hh:mm:ss' || this.format === 'HH:mm:ss') {\r\n            // æ ¼å¼åæ¶é´  ä¸´æ¶å¤ç\r\n            str = value;\r\n        } else {\r\n            // if (this.showTime && value instanceof String) {\r\n            //     str = value;\r\n            // } else {\r\n            //     const formArr = this.format.split(' ');\r\n            //     if (this.showTime && formArr.length < 2) {\r\n            //         formArr.push('HH:mm:ss');\r\n            //         this.format = formArr.join(' ');\r\n            //     }\r\n            //     // æ ¼å¼åæ¥æ\r\n            //     str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));\r\n            // }\r\n\r\n            str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));\r\n        }\r\n        return str;\r\n    }\r\n    private getDateFromFormatedString(dateString, format) {\r\n        var result = { year: 0, month: 0, day: 0, hour: 0, minite: 0, second: 0 }; // å½ç¶è¿éå¯ä»¥é»è®¤1970-1-1æ¥\r\n        if (dateString) {\r\n            format.replace(/y+|Y+|M+|d+|D+|h+|H+|m+|s+/g, function (m, a, b, c) {// è¿éåªåäºå¹´ææ¥  å æ¶åç§ä¹æ¯å¯ä»¥ç\r\n                dateString.substring(a).replace(/\\d+/, function (d) { c = parseInt(d, 10) });\r\n                if (/y+/i.test(m) && !result.year) result.year = c;\r\n                if (/M+/.test(m) && !result.month) result.month = c;\r\n                if (/d+/i.test(m) && !result.day) result.day = c;\r\n                if (/h+/i.test(m) && !result.hour) result.hour = c;\r\n                if (/m+/.test(m) && !result.minite) result.minite = c;\r\n                if (/s+/.test(m) && !result.second) result.second = c;\r\n            });\r\n        }\r\n        var resultDate = new Date(result.year + '/' + result.month + '/' + result.day + ' ' + result.hour + ':' + result.minite + ':' + result.second);\r\n        return resultDate;\r\n    }\r\n    /**\r\n     * æ ¼å¼åå¤ç\r\n     */\r\n    formatValue(value: any) {\r\n        let str: any;\r\n        if (this.currentLanguage) {\r\n            return this.formatLang(value);\r\n        }\r\n        // if (!value) {\r\n        //     return '';\r\n        // }\r\n        if (this.type !== 'boolean' && (value == null || typeof value === 'undefined')) {\r\n            return '';\r\n        }\r\n        switch (this.type) {\r\n            case 'string':\r\n                str = value;\r\n                break;\r\n            case 'date':\r\n            case 'datetime':\r\n                // console.log(this.format);\r\n                if (!this.dateRange) {\r\n                    // if (!this.format) {\r\n                    //     this.format = 'YYYY-MM-DD';\r\n                    // }\r\n                    // if (this.format === 'hh:mm:ss') {\r\n                    //     // æ ¼å¼åæ¶é´  ä¸´æ¶å¤ç\r\n                    //     str = value;\r\n                    // } else {\r\n                    //     if (this.showTime) {\r\n                    //         str = value;\r\n                    //     } else {\r\n                    //         // æ ¼å¼åæ¥æ\r\n                    //         str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));\r\n                    //     }\r\n                    // }\r\n\r\n                    str = this.dateformat(value);\r\n                    // console.log(str);\r\n                }\r\n                else {\r\n                    const dateValues = value.split(this.dateRangeDelimiter);\r\n\r\n                    let dataStr = [];\r\n                    if (dateValues && dateValues.length) {\r\n                        dateValues.forEach(date => {\r\n                            let val = this.dateformat(date);\r\n                            dataStr.push(val);\r\n                        });\r\n                    }\r\n                    str = dataStr.join(this.dateRangeDelimiter);\r\n                }\r\n\r\n                break;\r\n            // case 'dateTime':\r\n            //     str = this.timeFormatTo(value, this.makeFormater(this.format));\r\n            //     break;\r\n            case 'number':\r\n                str = this.getFormatNumberValue(value);\r\n                break;\r\n            case 'enum':\r\n                str = this.getFormatEnumValue(value);\r\n                break;\r\n            case 'boolean':\r\n                str = this.getFormatCheckBoxValue(value);\r\n                break;\r\n            default:\r\n                break; // throw new Error(`æä¸æ¯æ ${this.type} ç±»å`);\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    private setText2Star(value) {\r\n        if (this.isPassword) {\r\n            const star = value ? '******' : '';\r\n            this.text = star;\r\n            this.control = star;\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    writeValue(value: any): void {\r\n        // lucas 2021-08-27\r\n        if (this.setText2Star(value)) {\r\n            return;\r\n        }\r\n\r\n        // xia 2021-03-13\r\n        if (this.beforeWriteValue) {\r\n            const options = {\r\n                localizationType: this.localizationType,\r\n                showTime: this.showTime,\r\n                ref: this\r\n            };\r\n            const text = this.beforeWriteValue(value, options);\r\n            if (text !== undefined) {\r\n                this.text = text;\r\n                return;\r\n            }\r\n        }\r\n        this.control = this.formatValue(value);\r\n        this.controlChange(value);\r\n    }\r\n\r\n    registerOnChange(fn: () => {}): void {\r\n        this.controlChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn): void {\r\n        this.controlTouch = fn;\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { TextComponent } from './text.component';\r\nimport { NumberHelperModule } from '@farris/ui-common/number';\r\nimport { DateHelperModule } from '@farris/ui-common/date';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LocaleModule,\r\n    NumberHelperModule,\r\n    DateHelperModule\r\n  ],\r\n  exports: [\r\n    TextComponent\r\n  ]\r\n})\r\nexport class TextModule { }\r\n"]}