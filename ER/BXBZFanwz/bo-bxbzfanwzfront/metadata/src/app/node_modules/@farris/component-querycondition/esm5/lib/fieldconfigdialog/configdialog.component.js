/**
 * @fileoverview added by tsickle
 * Generated from: lib/fieldconfigdialog/configdialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, ViewEncapsulation, Input } from '@angular/core';
import { SolutionService } from '../service/solution.service';
import { LocaleService } from '@farris/ui-locale';
import { DialogComponent } from '@farris/ui-dialog';
import { MultiSelectComponent } from '@farris/ui-multi-select';
var ConfigDialogComponent = /** @class */ (function () {
    function ConfigDialogComponent(solutionService, localeService) {
        this.solutionService = solutionService;
        this.localeService = localeService;
        this.inputSelectedFileds = [];
        this.cancelEmitter = new EventEmitter();
        this.confirmEmitter = new EventEmitter();
        this.selectedIds = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ConfigDialogComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.inputSelectedFileds && changes.inputSelectedFileds.currentValue) {
            this.selectedIds = this.inputSelectedFileds.map((/**
             * @param {?} qc
             * @return {?}
             */
            function (qc) { return qc.id; }));
        }
    };
    /**
     * @return {?}
     */
    ConfigDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.title = this.localeService.getValue('queryCondition.container.config');
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @return {?}
     */
    ConfigDialogComponent.prototype.cancel = /**
     * 取消
     * @return {?}
     */
    function () {
        this.selectedIds = this.inputSelectedFileds.map((/**
         * @param {?} qc
         * @return {?}
         */
        function (qc) { return qc.id; }));
        this.cancelEmitter.emit(true);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    };
    /**
     * 确认
     */
    /**
     * 确认
     * @return {?}
     */
    ConfigDialogComponent.prototype.confirm = /**
     * 确认
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedFields = [];
        /** @type {?} */
        var _fieldData;
        this.selectedIds.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var index = _this.inputSelectedFileds.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.id == id; }));
            if (index > -1) {
                selectedFields.push(_this.inputSelectedFileds[index]);
            }
            else {
                _fieldData = _this.filedsDataSource.find((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) { return field.id == id; }));
                _fieldData.value.clearValue();
                selectedFields.push(_fieldData);
            }
        }));
        this.confirmEmitter.emit(selectedFields);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    };
    /**
     * 重置
     */
    /**
     * 重置
     * @return {?}
     */
    ConfigDialogComponent.prototype.reset = /**
     * 重置
     * @return {?}
     */
    function () {
    };
    ConfigDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-queryconfigdialog',
                    template: "<farris-dialog #dialog [buttons]=\"configDialogButtonRef\" [width]=\"699\" [height]=\"544\" [title]=\"title\">\r\n    <multi-select #searchMulti [dataSource]=\"filedsDataSource\" [idField]=\"'id'\" [textField]=\"'fieldName'\" [displayType]=\"'List'\" [(selectedId)]=\"selectedIds\" [showCheckbox]=\"true\">\r\n        <ng-template farrisTemplate=\"text\" let-data>\r\n            {{ data['fieldName'] }}\r\n        </ng-template>\r\n    </multi-select>\r\n</farris-dialog>\r\n<ng-template #configDialogButtonRef>\r\n    <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'queryCondition.configDialog.confirm' | locale}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'queryCondition.configDialog.cancel' | locale}}</button>\r\n</ng-template>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ConfigDialogComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: LocaleService }
    ]; };
    ConfigDialogComponent.propDecorators = {
        inputSelectedFileds: [{ type: Input }],
        filedsDataSource: [{ type: Input }],
        cancelEmitter: [{ type: Output }],
        confirmEmitter: [{ type: Output }],
        dialog: [{ type: ViewChild, args: ['dialog',] }],
        multiSelectCmp: [{ type: ViewChild, args: ['searchMulti',] }]
    };
    return ConfigDialogComponent;
}());
export { ConfigDialogComponent };
if (false) {
    /** @type {?} */
    ConfigDialogComponent.prototype.inputSelectedFileds;
    /** @type {?} */
    ConfigDialogComponent.prototype.filedsDataSource;
    /** @type {?} */
    ConfigDialogComponent.prototype.cancelEmitter;
    /** @type {?} */
    ConfigDialogComponent.prototype.confirmEmitter;
    /** @type {?} */
    ConfigDialogComponent.prototype.dialog;
    /** @type {?} */
    ConfigDialogComponent.prototype.multiSelectCmp;
    /** @type {?} */
    ConfigDialogComponent.prototype.selectedIds;
    /** @type {?} */
    ConfigDialogComponent.prototype.title;
    /**
     * @type {?}
     * @private
     */
    ConfigDialogComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    ConfigDialogComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2ZpZWxkY29uZmlnZGlhbG9nL2NvbmZpZ2RpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUE0QixpQkFBaUIsRUFBYyxLQUFLLEVBQXFGLE1BQU0sZUFBZSxDQUFDO0FBQ3RPLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9EO0lBZ0JJLCtCQUFvQixlQUFnQyxFQUFVLGFBQTRCO1FBQXRFLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBVGpGLHdCQUFtQixHQUEwQixFQUFFLENBQUM7UUFFL0Msa0JBQWEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUMzRCxtQkFBYyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBSXRFLGdCQUFXLEdBQWtCLEVBQUUsQ0FBQztJQUU4RCxDQUFDOzs7OztJQUUvRiwyQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsbUJBQW1CLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRTtZQUN6RSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHOzs7O1lBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsRUFBRSxFQUFMLENBQUssRUFBQyxDQUFDO1NBQ2hFO0lBQ0wsQ0FBQzs7OztJQUVELHdDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsaUNBQWlDLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBQ0Q7O09BRUc7Ozs7O0lBQ0gsc0NBQU07Ozs7SUFBTjtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxFQUFFLEVBQUwsQ0FBSyxFQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHVDQUFPOzs7O0lBQVA7UUFBQSxpQkFnQkM7O1lBZlMsY0FBYyxHQUFHLEVBQUU7O1lBQ3JCLFVBQTBCO1FBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsRUFBRTs7Z0JBQ2pCLEtBQUssR0FBRyxLQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUzs7OztZQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQWQsQ0FBYyxFQUFDO1lBQ3pFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNaLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDeEQ7aUJBQU07Z0JBQ0gsVUFBVSxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJOzs7O2dCQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQWQsQ0FBYyxFQUFDLENBQUM7Z0JBQ2pFLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQzlCLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDbkM7UUFDTCxDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxxQ0FBSzs7OztJQUFMO0lBRUEsQ0FBQzs7Z0JBL0RKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxveEJBQTRDO29CQUU1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQVZRLGVBQWU7Z0JBQ2YsYUFBYTs7O3NDQVdqQixLQUFLO21DQUNMLEtBQUs7Z0NBQ0wsTUFBTTtpQ0FDTixNQUFNO3lCQUNOLFNBQVMsU0FBQyxRQUFRO2lDQUNsQixTQUFTLFNBQUMsYUFBYTs7SUFvRDVCLDRCQUFDO0NBQUEsQUFoRUQsSUFnRUM7U0ExRFkscUJBQXFCOzs7SUFDOUIsb0RBQXlEOztJQUN6RCxpREFBaUQ7O0lBQ2pELDhDQUFxRTs7SUFDckUsK0NBQXNFOztJQUN0RSx1Q0FBNkM7O0lBQzdDLCtDQUErRDs7SUFFL0QsNENBQWdDOztJQUNoQyxzQ0FBYzs7Ozs7SUFDRixnREFBd0M7Ozs7O0lBQUUsOENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQsIFRlbXBsYXRlUmVmLCBIb3N0QmluZGluZywgVmlld0VuY2Fwc3VsYXRpb24sIEVsZW1lbnRSZWYsIElucHV0LCBTa2lwU2VsZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBDb250ZW50Q2hpbGQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kaWFsb2cnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IE11bHRpU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1tdWx0aS1zZWxlY3QnO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLXF1ZXJ5Y29uZmlnZGlhbG9nJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb25maWdkaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vY29uZmlnZGlhbG9nLmNvbXBvbmVudC5jc3MnXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbmZpZ0RpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgpIGlucHV0U2VsZWN0ZWRGaWxlZHM6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IFtdO1xyXG4gICAgQElucHV0KCkgZmlsZWRzRGF0YVNvdXJjZTogQXJyYXk8UXVlcnlDb25kaXRpb24+O1xyXG4gICAgQE91dHB1dCgpIGNhbmNlbEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBAT3V0cHV0KCkgY29uZmlybUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBAVmlld0NoaWxkKCdkaWFsb2cnKSBkaWFsb2c6IERpYWxvZ0NvbXBvbmVudDtcclxuICAgIEBWaWV3Q2hpbGQoJ3NlYXJjaE11bHRpJykgbXVsdGlTZWxlY3RDbXA6IE11bHRpU2VsZWN0Q29tcG9uZW50O1xyXG5cclxuICAgIHNlbGVjdGVkSWRzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb2x1dGlvblNlcnZpY2U6IFNvbHV0aW9uU2VydmljZSwgcHJpdmF0ZSBsb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlKSB7IH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMuaW5wdXRTZWxlY3RlZEZpbGVkcyAmJiBjaGFuZ2VzLmlucHV0U2VsZWN0ZWRGaWxlZHMuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJZHMgPSB0aGlzLmlucHV0U2VsZWN0ZWRGaWxlZHMubWFwKHFjID0+IHFjLmlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgncXVlcnlDb25kaXRpb24uY29udGFpbmVyLmNvbmZpZycpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlj5bmtohcclxuICAgICAqL1xyXG4gICAgY2FuY2VsKCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJZHMgPSB0aGlzLmlucHV0U2VsZWN0ZWRGaWxlZHMubWFwKHFjID0+IHFjLmlkKTtcclxuICAgICAgICB0aGlzLmNhbmNlbEVtaXR0ZXIuZW1pdCh0cnVlKTsgICAgICAgIFxyXG4gICAgICAgIHRoaXMubXVsdGlTZWxlY3RDbXAuc2VhcmNoVmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56Gu6K6kXHJcbiAgICAgKi9cclxuICAgIGNvbmZpcm0oKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRGaWVsZHMgPSBbXTtcclxuICAgICAgICBsZXQgX2ZpZWxkRGF0YTogUXVlcnlDb25kaXRpb247XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZElkcy5mb3JFYWNoKGlkID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmlucHV0U2VsZWN0ZWRGaWxlZHMuZmluZEluZGV4KGZpZWxkID0+IGZpZWxkLmlkID09IGlkKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkRmllbGRzLnB1c2godGhpcy5pbnB1dFNlbGVjdGVkRmlsZWRzW2luZGV4XSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfZmllbGREYXRhID0gdGhpcy5maWxlZHNEYXRhU291cmNlLmZpbmQoZmllbGQgPT4gZmllbGQuaWQgPT0gaWQpO1xyXG4gICAgICAgICAgICAgICAgX2ZpZWxkRGF0YS52YWx1ZS5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZpZWxkcy5wdXNoKF9maWVsZERhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25maXJtRW1pdHRlci5lbWl0KHNlbGVjdGVkRmllbGRzKTsgICAgICAgIFxyXG4gICAgICAgIHRoaXMubXVsdGlTZWxlY3RDbXAuc2VhcmNoVmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YeN572uXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG5cclxuICAgIH1cclxufVxyXG4iXX0=