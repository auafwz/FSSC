/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ElementRef, ViewChild, ViewContainerRef, ViewEncapsulation, Renderer2 } from '@angular/core';
export class TooltipComponent {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.contentIsString = true;
        this._tipWidth = '';
        this._tipCls = '';
        /* 位置 */
        this.placement = 'top';
        /* 位置样式 */
        this.positionStyle = {};
    }
    /* 普通文本内容 */
    /**
     * @param {?} value
     * @return {?}
     */
    set content(value) {
        if (value instanceof TemplateRef) {
            this.contentIsString = false;
            this.contentViewf.createEmbeddedView(value);
        }
        else {
            this.contentIsString = true;
            this.nfContent = value;
        }
    }
    /**
     * @return {?}
     */
    get content() {
        return this.nfContent;
    }
    /**
     * 因为表单生成没有排除factory,不能使用模板
     * @param {?} value
     * @return {?}
     */
    set tipWidth(value) {
        if (value != this._tipWidth) {
            if (value) {
                this.render.setStyle(this.innerNode.nativeElement, 'width', value);
                this.render.setStyle(this.innerNode.nativeElement, 'max-width', 'none');
            }
            else {
                this.render.removeStyle(this.innerNode.nativeElement, 'width');
                this.render.removeStyle(this.innerNode.nativeElement, 'max-width');
            }
            this._tipWidth = value;
        }
    }
    /**
     * @return {?}
     */
    get tipWidth() {
        return this._tipWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tipCls(value) {
        if (value != this._tipCls) {
            //移除旧样式
            this._tipCls && this.render.removeClass(this.el.nativeElement, this._tipCls);
            //追加新样式
            value && this.render.addClass(this.el.nativeElement, value);
            this._tipCls = value;
        }
    }
    /**
     * @return {?}
     */
    get tipCls() {
        return this._tipCls;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.hostBoundingClientRect) {
            this.judgeWidth();
            this.calculatePosition(this.hostBoundingClientRect);
        }
    }
    /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     * @return {?}
     */
    judgeWidth() {
        if (this.innerNode.nativeElement.scrollHeight > this.innerNode.nativeElement.clientHeight) {
            this.render.addClass(this.innerNode.nativeElement, 'tooltip-inner-lg');
        }
    }
    /* 计算tooltip最新位置 */
    /**
     * @param {?} hostPosition
     * @return {?}
     */
    calculatePosition(hostPosition) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        const tooltipSize = this.tooltipNode.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const arrowSize = this.arrowNode.nativeElement.getBoundingClientRect();
        if (this.placement === 'top') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
        }
        else if (this.placement === 'left') {
            top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
            left = hostPosition.left - tooltipSize.width - 2;
        }
        else if (this.placement === 'right') {
            top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
            left = hostPosition.right + 2;
        }
        else if (this.placement === 'bottom') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
        }
        else if (this.placement === 'top-left') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.left;
            this.arrowNode.nativeElement.style.left = '10%';
        }
        else if (this.placement === 'top-right') {
            top = hostPosition.top - tooltipSize.height - 2;
            left = hostPosition.right - tooltipSize.width;
            this.arrowNode.nativeElement.style.right = '10%';
        }
        else if (this.placement === 'right-top') {
            top = hostPosition.top;
            left = hostPosition.right + 2;
            this.arrowNode.nativeElement.style.top = '10%';
        }
        else if (this.placement === 'right-bottom') {
            top = hostPosition.bottom - tooltipSize.height;
            left = hostPosition.right + 2;
            this.arrowNode.nativeElement.style.bottom = '10%';
        }
        else if (this.placement === 'bottom-left') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.left;
            this.arrowNode.nativeElement.style.left = '10%';
        }
        else if (this.placement === 'bottom-right') {
            top = hostPosition.bottom + arrowSize.height + 2;
            left = hostPosition.right - tooltipSize.width;
            this.arrowNode.nativeElement.style.right = '10%';
        }
        else if (this.placement === 'left-top') {
            top = hostPosition.top;
            left = hostPosition.left - tooltipSize.width - 2;
            this.arrowNode.nativeElement.style.top = '10%';
        }
        else if (this.placement === 'left-bottom') {
            top = hostPosition.bottom - tooltipSize.height;
            left = hostPosition.left - tooltipSize.width - 2;
            this.arrowNode.nativeElement.style.bottom = '10%';
        }
        this.tooltipNode.nativeElement.style.top = top + 'px';
        this.tooltipNode.nativeElement.style.left = left + 'px';
    }
    /*
        *12个位置名解析
        * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
        */
    /**
     * @return {?}
     */
    offsetDirection() {
        /** @type {?} */
        const placement = this.placement;
        if (placement.indexOf('-') !== -1) {
            /** @type {?} */
            const index = placement.indexOf('-');
            return placement.substring(0, index);
        }
        return placement;
    }
}
TooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-tooltip',
                template: "<div #tooltipEle [class]=\"('bs-tooltip-'+offsetDirection())+' tooltip show'\">\r\n    <div #arrowEle class=\"arrow\"></div>\r\n    <div #innerEle class=\"tooltip-inner\">\r\n        <div #contentViewf class=\"tooltip-tmpl\">\r\n            <div *ngIf=\"contentIsString\" class=\"tooltip-text\" [innerHtml]=\"nfContent|tooltipHtml\"></div>\r\n            <ng-container *ngIf=\"!contentIsString\"> {{nfContent}}</ng-container>\r\n        </div>       \r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".bs-tooltip-bottom .arrow,.bs-tooltip-top .arrow{left:50%}.bs-tooltip-left .arrow,.bs-tooltip-right .arrow{top:25%}"]
            }] }
];
/** @nocollapse */
TooltipComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TooltipComponent.propDecorators = {
    contentViewf: [{ type: ViewChild, args: ['contentViewf', { read: ViewContainerRef },] }],
    tooltipNode: [{ type: ViewChild, args: ['tooltipEle', { read: ElementRef },] }],
    arrowNode: [{ type: ViewChild, args: ['arrowEle', { read: ElementRef },] }],
    innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
    content: [{ type: Input }],
    tipWidth: [{ type: Input }],
    tipCls: [{ type: Input }],
    placement: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TooltipComponent.prototype.contentViewf;
    /** @type {?} */
    TooltipComponent.prototype.tooltipNode;
    /** @type {?} */
    TooltipComponent.prototype.arrowNode;
    /** @type {?} */
    TooltipComponent.prototype.innerNode;
    /** @type {?} */
    TooltipComponent.prototype.contentIsString;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype._tipWidth;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype._tipCls;
    /** @type {?} */
    TooltipComponent.prototype.placement;
    /** @type {?} */
    TooltipComponent.prototype.hostBoundingClientRect;
    /** @type {?} */
    TooltipComponent.prototype.nfContent;
    /** @type {?} */
    TooltipComponent.prototype.positionStyle;
    /** @type {?} */
    TooltipComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,