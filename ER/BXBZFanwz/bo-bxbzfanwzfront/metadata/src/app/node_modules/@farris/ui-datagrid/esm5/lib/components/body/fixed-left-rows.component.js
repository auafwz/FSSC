/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectorRef, ElementRef, Injector, NgZone, Input, Output, EventEmitter, Renderer2 } from '@angular/core';
import { DatagridService } from './../../services/datagrid.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridBodyComponent } from './datagrid-body.component';
import { ROW_INDEX_FIELD, IS_GROUP_ROW_FIELD, GROUP_ROW_FIELD, IS_GROUP_FOOTER_ROW_FIELD, GROUP_VISIBLE_FIELD } from '../../services/state';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
var FixedLeftRowsComponent = /** @class */ (function () {
    function FixedLeftRowsComponent(cd, dg, dgb, dfs, el, injector, ngZone) {
        this.cd = cd;
        this.dg = dg;
        this.dgb = dgb;
        this.dfs = dfs;
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.columns = [];
        this.toggle = new EventEmitter();
        this.checkedRows = [];
        this.selectedRows = [];
        this.data = [];
        /**
         * 启用分组时，数据源中自动设置行索引字段
         */
        this.groupRowIndex = ROW_INDEX_FIELD;
        this.isGroupRow = IS_GROUP_ROW_FIELD;
        this.groupRow = GROUP_ROW_FIELD;
        this.isGroupFooter = IS_GROUP_FOOTER_ROW_FIELD;
        this.visible = GROUP_VISIBLE_FIELD;
        this.filterConditions = '';
        this.subscriptions = [];
        this.dgs = null;
        this.dgs = this.injector.get(DatagridService);
        this.render2 = this.injector.get(Renderer2);
    }
    /**
     * @private
     * @return {?}
     */
    FixedLeftRowsComponent.prototype.listenSubject = /**
     * @private
     * @return {?}
     */
    function () {
        // const _selectrow = this.dfs.selectRow$.subscribe(() => {
        //     this.detectChanges();
        // });
        // this.subscriptions.push(_selectrow);
        var _this = this;
        // const _selectrow = this.dfs.selectRow$.subscribe(() => {
        //     this.detectChanges();
        // });
        // this.subscriptions.push(_selectrow);
        // const _unselectrow = this.dfs.unSelectRow$.subscribe(() => {
        //     this.detectChanges();
        // });
        // this.subscriptions.push(_unselectrow);
        /** @type {?} */
        var _setselectrow = this.dgs.setSelecedRow.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            _this.detectChanges();
        }));
        this.subscriptions.push(_setselectrow);
        this.dfs.checkRow$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.checkedRows = _this.dfs.getCheckeds();
            _this.detectChanges();
        }));
        this.dfs.clearCheckeds$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.checkedRows = _this.dfs.getCheckeds();
            _this.detectChanges();
        }));
    };
    /**
     * @return {?}
     */
    FixedLeftRowsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.listenSubject();
    };
    /**
     * @return {?}
     */
    FixedLeftRowsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.unsubscribe(); }));
            this.subscriptions = [];
        }
    };
    /**
     * @private
     * @return {?}
     */
    FixedLeftRowsComponent.prototype.detectChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.cd['destroyed']) {
            // this.cd.markForCheck();
            this.cd.detectChanges();
        }
    };
    FixedLeftRowsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fixed-left-rows',
                    template: "\r\n<ng-template #groupActionCell>\r\n    <td *ngIf=\"dg.showLineNumber || dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-group-action\"></td>\r\n</ng-template>\r\n\r\n\r\n<table class=\"f-datagrid-rows\" style=\"width: 100%\" cellpadding=\"0\" cellspacing=\"0\" row-hover>\r\n    <colgroup>\r\n        <col width=\"36px\" *ngIf=\"dg.showCheckbox\" />\r\n        <col [style.width.px]=\"dg.lineNumberWidth\" *ngIf=\"dg.showLineNumber\" />\r\n        <col *ngFor=\"let col of columns\" [style.width.px]=\"col.width\" />\r\n    </colgroup>\r\n\r\n\r\n    <tbody *ngIf=\"dg.groupRows && dg.groupField\">\r\n        <ng-container *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\">\r\n            <tr *ngIf=\"row[isGroupRow]\" [style.display]=\"row[visible] ? '': 'none'\"\r\n            [attr.id]=\"row | rowDataId: false: true \"\r\n                class=\"f-datagrid-body-row fixed-left-row f-datagrid-group-row\" [attr.index]=\"dgb.startRowIndex + i\">\r\n\r\n                <ng-container *ngIf=\"dg.showLineNumber && dg.showCheckbox; else groupActionCell\">\r\n                    <td class=\"f-datagrid-cell f-datagrid-cell-checkbox\"></td>\r\n                    <td class=\"f-datagrid-cell f-datagrid-cell-rownumber\"></td>\r\n                </ng-container>\r\n\r\n            </tr>\r\n\r\n            <ng-container *ngIf=\"!row[isGroupRow]\">\r\n\r\n                <ng-container *ngIf=\"row[isGroupFooter] && dg.groupSummaryPosition === 'groupFooterRow'\">\r\n                    <tr class=\"f-datagrid-body-row fixed-left-row f-datagrid-group-footer\"\r\n                        [attr.index]=\"dgb.startRowIndex + i\" [style.display]=\"row[visible] ? '': 'none'\">\r\n                        <td *ngIf=\"dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\"></td>\r\n                        <td *ngIf=\"dg.showLineNumber\" class=\"f-datagrid-cell f-datagrid-cell-rownumber\"></td>\r\n                    </tr>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!row[isGroupFooter]\">\r\n                    <tr class=\"f-datagrid-body-row fixed-left-row\" [attr.index]=\"dgb.startRowIndex + i\"\r\n                        [class.f-datagrid-row-selected]=\"row | rowIsSelected: selectedRows\" [grid-row]=\"row\"\r\n                        [rowIndex]=\"dgb.startRowIndex + i\" [attr.id]=\"row | rowDataId: false: true \"\r\n                        [class.f-datagrid-disable-row]=\"row | disableRow: (dgb.startRowIndex + i) : dg.disableRow\"\r\n                        [style.display]=\"row[visible] ? '': 'none'\">\r\n\r\n                        <td *ngIf=\"dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center\">\r\n                            <div class=\"f-datagrid-cell-content checkbox-column\"  style=\"text-overflow: unset;\">\r\n                                <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\"\r\n                                    [rowData]=\"row\" [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                            </div>\r\n                        </td>\r\n\r\n                        <td *ngIf=\"dg.showLineNumber\" class=\"f-datagrid-cell f-datagrid-cell-rownumber\">\r\n                            <div class=\"f-datagrid-cell-content\">\r\n                                {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + row[groupRowIndex] + 1 }}\r\n                            </div>\r\n                        </td>\r\n\r\n                    </tr>\r\n\r\n                </ng-container>\r\n\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n\r\n    </tbody>\r\n\r\n\r\n    <tbody *ngIf=\"!dg.groupRows || !dg.groupField\">\r\n        <tr class=\"f-datagrid-body-row fixed-left-row\" [attr.index]=\"dgb.startRowIndex + i\"\r\n            [class.f-datagrid-row-selected]=\"row | rowIsSelected\" [grid-row]=\"row\" \r\n            [rowIndex]=\"dgb.startRowIndex + i\" [attr.id]=\"row | rowDataId: false: true \"\r\n            [class.f-datagrid-disable-row]=\"row | disableRow: (dgb.startRowIndex + i) : dg.disableRow\"\r\n            *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\"\r\n            >\r\n\r\n            <td *ngIf=\"dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center\">\r\n                <div class=\"f-datagrid-cell-content checkbox-column\" style=\"text-overflow: unset;\">\r\n                <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\" [rowData]=\"row\"\r\n                    [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                </div>\r\n            </td>\r\n\r\n            <td *ngIf=\"dg.showLineNumber\" [style.width.px]=\"dg.lineNumberWidth\"  class=\"f-datagrid-cell f-datagrid-cell-rownumber\">\r\n                <div class=\"f-datagrid-cell-content\">\r\n                    {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + i + 1 }}\r\n                </div>\r\n            </td>\r\n\r\n            <td [cell-editable]=\"row\" [column]=\"col\" [attr.field]=\"col.field\" class=\"f-datagrid-cell\"\r\n                [attr.align]=\"col.align\" *ngFor=\"let col of columns; let ci = index;\">\r\n                <grid-body-cell [width]=\"col.width\" [height]=\"dg.rowHeight\" [column]=\"col\" [rowData]=\"row\"\r\n                    [rowIndex]=\"dgb.startRowIndex + i\"></grid-body-cell>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n\r\n\r\n\r\n\r\n</table>"
                }] }
    ];
    /** @nocollapse */
    FixedLeftRowsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DatagridComponent },
        { type: DatagridBodyComponent },
        { type: DatagridFacadeService },
        { type: ElementRef },
        { type: Injector },
        { type: NgZone }
    ]; };
    FixedLeftRowsComponent.propDecorators = {
        columns: [{ type: Input }],
        toggle: [{ type: Output }],
        checkedRows: [{ type: Input }],
        selectedRows: [{ type: Input }],
        data: [{ type: Input }]
    };
    return FixedLeftRowsComponent;
}());
export { FixedLeftRowsComponent };
if (false) {
    /** @type {?} */
    FixedLeftRowsComponent.prototype.columns;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.toggle;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.checkedRows;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.selectedRows;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.data;
    /**
     * 启用分组时，数据源中自动设置行索引字段
     * @type {?}
     */
    FixedLeftRowsComponent.prototype.groupRowIndex;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.isGroupRow;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.groupRow;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.isGroupFooter;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.visible;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.filterConditions;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.subscriptions;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dgs;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.cd;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dg;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dgb;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dfs;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,