/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { throttleTime, debounceTime } from 'rxjs/operators';
import { animationFrame } from 'rxjs/internal/scheduler/animationFrame';
import * as i0 from "@angular/core";
/**
 * @record
 */
function ScrollElement() { }
if (false) {
    /** @type {?} */
    ScrollElement.prototype.element;
    /** @type {?} */
    ScrollElement.prototype.id;
}
/**
 * @record
 */
function ScrollSpy() { }
if (false) {
    /** @type {?} */
    ScrollSpy.prototype.elements;
    /** @type {?} */
    ScrollSpy.prototype.currentSectionId;
    /** @type {?} */
    ScrollSpy.prototype.subject;
    /** @type {?|undefined} */
    ScrollSpy.prototype.clickChange;
}
/**
 * @record
 */
function ScrollSpies() { }
/**
 * @record
 */
function ScrollFollow() { }
if (false) {
    /** @type {?} */
    ScrollFollow.prototype.element;
    /** @type {?} */
    ScrollFollow.prototype.id;
}
/**
 * @record
 */
function ScrollFollowSpipes() { }
/**
 * @record
 */
function ScrollContents() { }
/**
 * @record
 */
function Offsets() { }
/**
 * @record
 */
function ScrollChange() { }
/**
 * @record
 */
function CurrentId() { }
if (false) {
    /** @type {?} */
    CurrentId.prototype.subject;
    /** @type {?} */
    CurrentId.prototype.idValue;
}
/**
 * @record
 */
function CurrentIdObj() { }
var FarrisScrollSpyService = /** @class */ (function () {
    function FarrisScrollSpyService(ngzone) {
        this.ngzone = ngzone;
        // 监听区块当前时候的样式
        this.scrollSpyPartActiveClsName = 'f-scrollspy-part-active';
        this.fixedTabContainerClsName = 'f-scrollspy-container-fixed';
        /**
         * 被监听滚动的contents
         */
        this.scrollContents = {};
        /**
         * 被监听滚动的sections
         */
        this.scrollSpies = {};
        /**
         * 监听滚动的锚点部分
         */
        this.scrollFollowSpipes = {};
        this.scrollSpyListFollowTypeChanges = {};
        /**
         * 滚动监听偏移距离
         */
        this.offsets = {};
        /**
         * 默认监听分组名称
         */
        this.defaultId = 'default';
        // currentSectionId: Subject<any> = new Subject();
        this.currentSectionIdObj = {};
        this.scrollChange = {};
    }
    //获取currentid
    //获取currentid
    /**
     * @param {?} groupId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.getCurrentSectionId = 
    //获取currentid
    /**
     * @param {?} groupId
     * @return {?}
     */
    function (groupId) {
        if (!groupId) {
            groupId = this.defaultId;
        }
        return this.currentSectionIdObj[groupId].subject;
        // return this.currentSectionId;
    };
    //滚动变化时改变currentid
    //滚动变化时改变currentid
    /**
     * @param {?} groupId
     * @param {?} value
     * @return {?}
     */
    FarrisScrollSpyService.prototype.setCurrentSectionId = 
    //滚动变化时改变currentid
    /**
     * @param {?} groupId
     * @param {?} value
     * @return {?}
     */
    function (groupId, value) {
        if (!groupId) {
            groupId = this.defaultId;
        }
        this.currentSectionIdObj[groupId].subject.next(value);
        //console.log(this.currentSectionIdObj);
        // this.currentSectionId.next(value);
    };
    //设置不同group组的currentid
    //设置不同group组的currentid
    /**
     * @param {?} groupId
     * @param {?} value
     * @return {?}
     */
    FarrisScrollSpyService.prototype.setCurrentSectionIdObj = 
    //设置不同group组的currentid
    /**
     * @param {?} groupId
     * @param {?} value
     * @return {?}
     */
    function (groupId, value) {
        var _this = this;
        if (!groupId) {
            groupId = this.defaultId;
        }
        if (!this.currentSectionIdObj[groupId]) {
            this.currentSectionIdObj[groupId] = (/** @type {?} */ ({
                subject: new Subject(),
                idValue: value
            }));
        }
        else {
            this.currentSectionIdObj[groupId].idValue = value;
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.scrollFollowSpipes[groupId] && _this.scrollFollowSpipes[groupId].length) {
                /** @type {?} */
                var item = _this.scrollFollowSpipes[groupId].find((/**
                 * @param {?} scrollFollowItem
                 * @return {?}
                 */
                function (scrollFollowItem) {
                    return scrollFollowItem['id'] == _this.currentSectionIdObj[groupId].idValue;
                }));
                if (item) {
                    _this.fScrollFollowClick(groupId, item);
                }
            }
        }), 0);
        // this.fScrollFollowClick(key,follow);
    };
    /**
     * @return {?}
     */
    FarrisScrollSpyService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.scrollSubscription.unsubscribe();
    };
    /**Observer部分 供指令初始化调用 */
    // public getCurrentSection$(scrollSpyId: string = this.defaultId): Observable<string> {
    //   if(scrollSpyId !== ''){
    //     return this.scrollChange[scrollSpyId];
    //   }
    //   else{
    //     return this.scrollChange[this.defaultId];
    //   }
    // }
    /**
     * Observer部分 供指令初始化调用
     * @param {?=} scrollSpyId
     * @return {?}
     */
    // public getCurrentSection$(scrollSpyId: string = this.defaultId): Observable<string> {
    //   if(scrollSpyId !== ''){
    //     return this.scrollChange[scrollSpyId];
    //   }
    //   else{
    //     return this.scrollChange[this.defaultId];
    //   }
    // }
    FarrisScrollSpyService.prototype.updateScrollGroup = /**
     * Observer部分 供指令初始化调用
     * @param {?=} scrollSpyId
     * @return {?}
     */
    // public getCurrentSection$(scrollSpyId: string = this.defaultId): Observable<string> {
    //   if(scrollSpyId !== ''){
    //     return this.scrollChange[scrollSpyId];
    //   }
    //   else{
    //     return this.scrollChange[this.defaultId];
    //   }
    // }
    function (scrollSpyId) {
        if (scrollSpyId === void 0) { scrollSpyId = this.defaultId; }
        /** @type {?} */
        var groupId = scrollSpyId !== '' ? scrollSpyId : this.defaultId;
        if (!this.scrollChange[groupId]) {
            this.scrollChange[groupId] = new Subject();
        }
        return this.scrollChange[groupId];
    };
    /**content部分滚动事件监听 */
    /**
     * content部分滚动事件监听
     * @private
     * @param {?} key
     * @return {?}
     */
    FarrisScrollSpyService.prototype.subscribeScroll = /**
     * content部分滚动事件监听
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.scrollSubscription = fromEvent(_this.scrollContents[key], 'scroll')
                .pipe(debounceTime(20, animationFrame))
                .subscribe((/**
             * @return {?}
             */
            function () {
                if (_this.scrollSpies[key]) {
                    var _a = _this.scrollSpies[key], currentSectionId = _a.currentSectionId, elements = _a.elements, subject_1 = _a.subject;
                    /** @type {?} */
                    var scrollTop_1 = _this.scrollContents[key].scrollTop;
                    /** @type {?} */
                    var topElementInView = elements.filter((/**
                     * @param {?} el
                     * @return {?}
                     */
                    function (el) {
                        return el.element.offsetTop <= scrollTop_1 + _this.offsets[key];
                    }));
                    if (!topElementInView || !topElementInView.length) {
                        return;
                    }
                    //console.log(topElementInView);
                    /** @type {?} */
                    var topElementId_1 = topElementInView[0].id;
                    //判断 点击是否是点击引起的滚动
                    if (_this.scrollSpies[key].clickChange) {
                        _this.scrollSpies[key].clickChange = false;
                        return;
                    }
                    else {
                        _this.scrollSpies[key].clickChange = false;
                        if (topElementId_1 !== currentSectionId) {
                            _this.scrollSpies[key].currentSectionId = topElementId_1;
                            _this.ngzone.run((/**
                             * @return {?}
                             */
                            function () {
                                subject_1.next(topElementId_1);
                            }));
                        }
                    }
                }
            }));
        }));
    };
    /**tab部分点击事件监听 */
    /**
     * tab部分点击事件监听
     * @private
     * @param {?} key
     * @return {?}
     */
    FarrisScrollSpyService.prototype.subscribeClick = /**
     * tab部分点击事件监听
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        //Object.keys(this.scrollFollowSpipes).forEach((key:string):void=>{
        if (this.scrollFollowSpipes[key] && this.scrollFollowSpipes[key].length) {
            this.scrollFollowSpipes[key].forEach((/**
             * @param {?} follow
             * @return {?}
             */
            function (follow) {
                fromEvent(follow.element, 'click')
                    .pipe(throttleTime(100))
                    .subscribe((/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    event.stopPropagation();
                    _this.fScrollFollowClick(key, follow);
                    // if(this.scrollSpies[key]){
                    //   const { currentSectionId, elements, subject } = this.scrollSpies[key];
                    //   this.scrollSpies[key].clickChange = true;
                    //   if(follow.id !== currentSectionId){
                    //     const topElementInView = elements.find(el => el.id === follow.id);
                    //     if(!topElementInView) { return; }
                    //     this.scrollSpies[key].currentSectionId = follow.id;
                    //     //this.scrollContents[key].offsetTop
                    //     this.scrollContents[key].scrollTop = Math.round(topElementInView.element.offsetTop - this.offsets[key]);
                    //     subject.next(follow.id);
                    //   }
                    // }
                }));
            }));
        }
        //});
    };
    /**
     * @param {?} key
     * @param {?} follow
     * @return {?}
     */
    FarrisScrollSpyService.prototype.fScrollFollowClick = /**
     * @param {?} key
     * @param {?} follow
     * @return {?}
     */
    function (key, follow) {
        if (this.scrollSpies[key]) {
            var _a = this.scrollSpies[key], currentSectionId = _a.currentSectionId, elements = _a.elements, subject = _a.subject;
            this.scrollSpies[key].clickChange = true;
            if (follow.id !== currentSectionId) {
                /** @type {?} */
                var topElementInView = elements.find((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return el.id === follow.id; }));
                if (!topElementInView) {
                    return;
                }
                this.scrollSpies[key].currentSectionId = follow.id;
                //this.scrollContents[key].offsetTop
                if (this.scrollContents[key]) {
                    this.scrollContents[key].scrollTop = Math.round(topElementInView.element.offsetTop - this.offsets[key]);
                }
                subject.next(follow.id);
            }
        }
    };
    /**添加需要被滚动监听部分 */
    /**
     * 添加需要被滚动监听部分
     * @param {?} element
     * @param {?=} contentId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.addContentElement = /**
     * 添加需要被滚动监听部分
     * @param {?} element
     * @param {?=} contentId
     * @return {?}
     */
    function (element, contentId) {
        if (contentId === void 0) { contentId = this.defaultId; }
        if (contentId !== '') {
            this.scrollContents[contentId] = element;
            this.subscribeScroll(contentId);
        }
        else {
            this.scrollContents[this.defaultId] = element;
            this.subscribeScroll(this.defaultId);
        }
        // 判断是有待改变的状态
        this.updateContainerClsName(contentId);
    };
    /**移除需要被滚动监听部分元素 */
    /**
     * 移除需要被滚动监听部分元素
     * @param {?=} contentId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.removeContentElement = /**
     * 移除需要被滚动监听部分元素
     * @param {?=} contentId
     * @return {?}
     */
    function (contentId) {
        if (contentId === void 0) { contentId = this.defaultId; }
        /** @type {?} */
        var removeId = contentId !== '' ? contentId : this.defaultId;
        delete this.scrollSpies[removeId];
    };
    /**添加滚动监听tab部分元素*/
    /**
     * 添加滚动监听tab部分元素
     * @param {?} element
     * @param {?} followId
     * @param {?=} followContentId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.addFollowElement = /**
     * 添加滚动监听tab部分元素
     * @param {?} element
     * @param {?} followId
     * @param {?=} followContentId
     * @return {?}
     */
    function (element, followId, followContentId) {
        if (followContentId === void 0) { followContentId = this.defaultId; }
        /** @type {?} */
        var groupId = followContentId !== '' ? followContentId : this.defaultId;
        /** @type {?} */
        var follow = {
            element: element,
            id: followId
        };
        if (!this.scrollFollowSpipes[groupId]) {
            this.scrollFollowSpipes[groupId] = [];
        }
        /** @type {?} */
        var follows = this.scrollFollowSpipes[groupId];
        follows.push(follow);
        this.scrollFollowSpipes[groupId] = follows;
        this.subscribeClick(groupId);
    };
    /**移除滚动监听tab部分元素 */
    /**
     * 移除滚动监听tab部分元素
     * @param {?} followId
     * @param {?=} followContentId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.removeFollowElement = /**
     * 移除滚动监听tab部分元素
     * @param {?} followId
     * @param {?=} followContentId
     * @return {?}
     */
    function (followId, followContentId) {
        if (followContentId === void 0) { followContentId = this.defaultId; }
        /** @type {?} */
        var elements = this.scrollFollowSpipes[followContentId].filter((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            return el.id !== followId;
        }));
        if (!elements.length) {
            delete this.scrollFollowSpipes[followContentId];
            return;
        }
        this.scrollFollowSpipes[followContentId] = elements;
    };
    /**添加滚动监听锚点部分元素 */
    /**
     * 添加滚动监听锚点部分元素
     * @param {?} element
     * @param {?} scrollId
     * @param {?=} scrollGroupId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.addElement = /**
     * 添加滚动监听锚点部分元素
     * @param {?} element
     * @param {?} scrollId
     * @param {?=} scrollGroupId
     * @return {?}
     */
    function (element, scrollId, scrollGroupId) {
        var _this = this;
        if (scrollGroupId === void 0) { scrollGroupId = this.defaultId; }
        if (!this.scrollSpies[scrollGroupId]) {
            this.scrollSpies[scrollGroupId] = (/** @type {?} */ ({
                elements: [],
                currentSectionId: '',
                subject: new Subject(),
            }));
            this.scrollSpies[scrollGroupId].subject
                .subscribe((/**
             * @param {?} currentSection
             * @return {?}
             */
            function (currentSection) {
                if (_this.scrollChange[scrollGroupId]) {
                    _this.scrollChange[scrollGroupId].next(currentSection);
                }
            }));
        }
        if (this.hasElement(scrollId, scrollGroupId)) {
            return;
        }
        /** @type {?} */
        var el = {
            element: element,
            id: scrollId
        }
        // 加入时，判断是否是当前
        ;
        // 加入时，判断是否是当前
        this.updateScrollSpyActiveClsName(scrollGroupId, el);
        /** @type {?} */
        var elements = this.scrollSpies[scrollGroupId].elements;
        elements.push(el);
        elements.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return b.element.getBoundingClientRect().top - a.element.getBoundingClientRect().top; }));
        this.scrollSpies[scrollGroupId].elements = elements;
    };
    /**移除滚动监听锚点部分元素 */
    /**
     * 移除滚动监听锚点部分元素
     * @param {?} scrollId
     * @param {?=} scrollGroupId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.removeElement = /**
     * 移除滚动监听锚点部分元素
     * @param {?} scrollId
     * @param {?=} scrollGroupId
     * @return {?}
     */
    function (scrollId, scrollGroupId) {
        if (scrollGroupId === void 0) { scrollGroupId = this.defaultId; }
        /** @type {?} */
        var elements = this.scrollSpies[scrollGroupId].elements.filter((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            return el.id !== scrollId;
        }));
        if (!elements.length) {
            delete this.scrollSpies[scrollGroupId];
            return;
        }
        this.scrollSpies[scrollGroupId].elements = elements;
    };
    /**判断scrollGroupId 是否有id名为elementId 的元素 */
    /**
     * 判断scrollGroupId 是否有id名为elementId 的元素
     * @private
     * @param {?} elementId
     * @param {?} scrollGroupId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.hasElement = /**
     * 判断scrollGroupId 是否有id名为elementId 的元素
     * @private
     * @param {?} elementId
     * @param {?} scrollGroupId
     * @return {?}
     */
    function (elementId, scrollGroupId) {
        return this.scrollSpies[scrollGroupId].elements.some((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return element.id === elementId; }));
    };
    /**设置offset */
    /**
     * 设置offset
     * @param {?=} offset
     * @param {?=} contentId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.setOffset = /**
     * 设置offset
     * @param {?=} offset
     * @param {?=} contentId
     * @return {?}
     */
    function (offset, contentId) {
        if (offset === void 0) { offset = 0; }
        if (contentId === void 0) { contentId = this.defaultId; }
        if (contentId !== '') {
            this.offsets[contentId] = offset;
        }
        else {
            this.offsets[this.defaultId] = offset;
        }
    };
    /*ScrollSpy组件(锚点列表区域）初始化预设defaultId */
    /*ScrollSpy组件(锚点列表区域）初始化预设defaultId */
    /**
     * @param {?} groupid
     * @return {?}
     */
    FarrisScrollSpyService.prototype.setGroupId = /*ScrollSpy组件(锚点列表区域）初始化预设defaultId */
    /**
     * @param {?} groupid
     * @return {?}
     */
    function (groupid) {
        if (groupid) {
            this.defaultId = groupid;
        }
    };
    /**
     * @return {?}
     */
    FarrisScrollSpyService.prototype.getGroupId = /**
     * @return {?}
     */
    function () {
        return this.defaultId;
    };
    /*改变 ScrollSpy组件（锚点列表区域）的显示状态时 */
    /*改变 ScrollSpy组件（锚点列表区域）的显示状态时 */
    /**
     * @param {?} groupid
     * @param {?} followTypeData
     * @return {?}
     */
    FarrisScrollSpyService.prototype.changeGroupIdFollowType = /*改变 ScrollSpy组件（锚点列表区域）的显示状态时 */
    /**
     * @param {?} groupid
     * @param {?} followTypeData
     * @return {?}
     */
    function (groupid, followTypeData) {
        this.scrollSpyListFollowTypeChanges[groupid] = followTypeData;
        this.updateContainerClsName(groupid);
    };
    /**
     * @private
     * @param {?} groupid
     * @return {?}
     */
    FarrisScrollSpyService.prototype.updateContainerClsName = /**
     * @private
     * @param {?} groupid
     * @return {?}
     */
    function (groupid) {
        // 没有待更新变化
        if (!this.scrollSpyListFollowTypeChanges.hasOwnProperty(groupid)) {
            return;
        }
        // container并不存在的时候
        if (!this.scrollContents.hasOwnProperty(groupid)) {
            return;
        }
        /** @type {?} */
        var followTypeData = this.scrollSpyListFollowTypeChanges[groupid];
        /** @type {?} */
        var containerEl = this.scrollContents[groupid];
        // Container的Element 
        if (followTypeData['prev'] == 'fixedTab') {
            //移除class
            containerEl.className = containerEl.className.replace(this.fixedTabContainerClsName, '');
        }
        else if (followTypeData['next'] == 'fixedTab') {
            // 增加class
            containerEl.className += ' ' + this.fixedTabContainerClsName;
        }
        this.scrollSpyListFollowTypeChanges[groupid] = null;
    };
    /**
     * @param {?} groupId
     * @param {?} currentId
     * @return {?}
     */
    FarrisScrollSpyService.prototype.updateScrollSpiesActiveClsName = /**
     * @param {?} groupId
     * @param {?} currentId
     * @return {?}
     */
    function (groupId, currentId) {
        var _this = this;
        // 追加、移除class
        this.scrollSpies[groupId].elements.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.id == currentId) {
                // 找到当前
                if (item.element.className.indexOf(_this.scrollSpyPartActiveClsName) < 0) {
                    item.element.className += ' ' + _this.scrollSpyPartActiveClsName;
                }
            }
            else {
                // 其他
                item.element.className = item.element.className.replace(_this.scrollSpyPartActiveClsName, '');
            }
        }));
    };
    /**
     * 当追加ScrollSpy块的时候，判断是否是已经设置的当前
     * @param groupId
     * @param scrollEl
     */
    /**
     * 当追加ScrollSpy块的时候，判断是否是已经设置的当前
     * @private
     * @param {?} groupId
     * @param {?} scrollEl
     * @return {?}
     */
    FarrisScrollSpyService.prototype.updateScrollSpyActiveClsName = /**
     * 当追加ScrollSpy块的时候，判断是否是已经设置的当前
     * @private
     * @param {?} groupId
     * @param {?} scrollEl
     * @return {?}
     */
    function (groupId, scrollEl) {
        // 如果已设置
        if (this.currentSectionIdObj[groupId]) {
            if (this.currentSectionIdObj[groupId]['idValue'] == scrollEl.id) {
                scrollEl.element.className += ' ' + this.scrollSpyPartActiveClsName;
            }
        }
    };
    FarrisScrollSpyService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    FarrisScrollSpyService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    /** @nocollapse */ FarrisScrollSpyService.ngInjectableDef = i0.defineInjectable({ factory: function FarrisScrollSpyService_Factory() { return new FarrisScrollSpyService(i0.inject(i0.NgZone)); }, token: FarrisScrollSpyService, providedIn: "root" });
    return FarrisScrollSpyService;
}());
export { FarrisScrollSpyService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.scrollSpyPartActiveClsName;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.fixedTabContainerClsName;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.scrollSubscription;
    /**
     * 被监听滚动的contents
     * @type {?}
     */
    FarrisScrollSpyService.prototype.scrollContents;
    /**
     * 被监听滚动的sections
     * @type {?}
     */
    FarrisScrollSpyService.prototype.scrollSpies;
    /**
     * 监听滚动的锚点部分
     * @type {?}
     */
    FarrisScrollSpyService.prototype.scrollFollowSpipes;
    /**
     * @type {?}
     * @private
     */
    FarrisScrollSpyService.prototype.scrollSpyListFollowTypeChanges;
    /**
     * 滚动监听偏移距离
     * @type {?}
     */
    FarrisScrollSpyService.prototype.offsets;
    /**
     * 默认监听分组名称
     * @type {?}
     */
    FarrisScrollSpyService.prototype.defaultId;
    /** @type {?} */
    FarrisScrollSpyService.prototype.currentSectionIdObj;
    /** @type {?} */
    FarrisScrollSpyService.prototype.scrollChange;
    /** @type {?} */
    FarrisScrollSpyService.prototype.ngzone;
}
//# sourceMappingURL=data:application/json;base64,