import { Injectable, ElementRef } from '@angular/core';
import { Repository, FrameContext } from '@farris/devkit';
import { FrameContextService } from './frame-context.service';
import { FormControlService } from './form-control.service';
var FIXED_COLUMN_START_INDEX = 5000;
var GRID_COLUMN_START_INDEX = 10000;
/**
 * 表单验证服务
 * @scope FrameComponent
 */
var FocusInvalidService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function FocusInvalidService(repository, frameContext, frameContextService, formControlService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.frameContextService = frameContextService;
        this.formControlService = formControlService;
    }
    /**
     * 向第一个验证不通过的字段设置焦点
     */
    FocusInvalidService.prototype.focusInvalidInput = function (verifyInformations, rootElement) {
        // 无验证不通过信息时，直接返回。
        if (!verifyInformations || !verifyInformations.length) {
            return;
        }
        var targetField = null;
        var firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            if (targetField) {
                var canFocus = this.focusElement(targetField, rootElement);
                if (canFocus) {
                    verifyInformations['focused'] = true;
                }
            }
        }
    };
    /**
     * 设置DataGrid单元格焦点
     */
    FocusInvalidService.prototype.focusGridCell = function (verifyInformations, focusableDataGrid) {
        if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true) {
            return;
        }
        var targetField = null;
        var targetId = null;
        var firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            targetId = firstVerifyInformation.id;
            verifyInformations['focused'] = true;
            focusableDataGrid.editCell(targetId, targetField);
        }
    };
    FocusInvalidService.prototype.updateVerifyInformationsIndex = function (verifyInformations, rootElement) {
        var _this = this;
        verifyInformations = verifyInformations.filter(function (verifyInformation) {
            var frameContexts = _this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
            var frameContext = frameContexts && frameContexts[0] || null;
            return frameContext && frameContext.frameId === _this.frameContext.frameId;
        });
        return verifyInformations.map(function (verifyInformation) {
            var tabIndex = -1;
            if (verifyInformation) {
                if (rootElement && verifyInformation.targetField) {
                    var input = _this.getInputElementById(verifyInformation.targetField, rootElement);
                    tabIndex = input && input.getAttribute('tabindex') || -1;
                    tabIndex = Number(tabIndex);
                }
                var frameContexts = _this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
                var frameContext = frameContexts && frameContexts[0] || null;
                var frameIndex = frameContext.index + 1;
                verifyInformation.tabIndex = tabIndex;
                verifyInformation.domIndex = -1;
                verifyInformation.frameIndex = -1;
                verifyInformation.position = tabIndex;
                if (frameContext) {
                    var domIndex = _this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;
                    if (domIndex > 0) {
                        var rowIndex = verifyInformation.index || 0;
                        verifyInformation.domIndex = domIndex;
                        verifyInformation.frameIndex = frameContext.index;
                        verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);
                    }
                }
            }
            return verifyInformation;
        });
    };
    FocusInvalidService.prototype.isGridComponent = function (frameContext) {
        if (frameContext) {
            var dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
            return dataGridColumnsName ? true : false;
        }
        return undefined;
    };
    FocusInvalidService.prototype.getColumnIndex = function (frameContext, binding) {
        binding = binding.split('/').filter(function (p) { return p; }).join('/');
        var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
        var dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        var frameIndex = frameContext.index + 1;
        if (!dataGridColumnsName) {
            return undefined;
        }
        var columns = frameContext.viewModel[dataGridColumnsName];
        if (!columns || columns.length < 1) {
            return undefined;
        }
        // 打平columns
        columns = columns.reduce(function (results, item) {
            if (Array.isArray(item)) {
                return results.concat(item);
            }
            return results.concat([item]);
        }, []);
        var position = -1;
        var _loop_1 = function (index) {
            var column = columns[index];
            var fields = column && column.field && column.field.split('.').filter(function (p) { return p; }) || null;
            if (!fields) {
                return "continue";
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                var fixed_1 = column.fixed;
                if (fixed_1) {
                    var fixedColumns = columns.filter(function (item) { return item.fixed === fixed_1; });
                    var fixedColumnIndex = this_1.getIndexFromColumns(fixedColumns, binding);
                    if (fixed_1 === 'left') {
                        position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;
                    }
                    else {
                        position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;
                    }
                }
                else {
                    position = frameIndex * GRID_COLUMN_START_INDEX + index;
                }
                return "break";
            }
        };
        var this_1 = this;
        for (var index = 0; index < columns.length; index++) {
            var state_1 = _loop_1(index);
            if (state_1 === "break")
                break;
        }
        return position;
    };
    FocusInvalidService.prototype.getIndexFromColumns = function (columns, binding) {
        var bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
        return columns.findIndex(function (column) {
            var fields = column && column.field && column.field.split('.').filter(function (p) { return p; }) || null;
            if (!fields) {
                return false;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                return true;
            }
            return false;
        });
    };
    FocusInvalidService.prototype.selectFirstVerifyInformation = function (verifyInformations, rootElement) {
        verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);
        verifyInformations.sort(function (v1, v2) { return Number(v1.position) - Number(v2.position); });
        return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;
    };
    FocusInvalidService.prototype.getInputElementById = function (targetField, rootElement) {
        var element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;
        if (element && element.tagName !== 'INPUT') {
            var inputs = element.getElementsByTagName('input');
            if (inputs.length) {
                element = inputs[0];
            }
        }
        return element;
    };
    FocusInvalidService.prototype.getFrameContextsByPropertyPath = function (propertyPath, separtor) {
        if (separtor === void 0) { separtor = '/'; }
        if (!propertyPath) {
            return [];
        }
        var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter(function (frameContext) {
            var formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
            var bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
            if (formControls && Object.keys(formControls).length > 0) {
                var key = Object.keys(formControls).find(function (key) {
                    var formControl = formControls[key];
                    if (!formControl || !formControl.binding) {
                        return false;
                    }
                    var bindings = formControl.binding.split('.').filter(function (p) { return p; });
                    var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                    var fullPath = bindingPaths.concat(bindings);
                    return propertyPath.split(separtor).filter(function (p) { return p; }).join('/') === fullPath.join('/');
                });
                return key ? true : false;
            }
            return false;
        });
    };
    FocusInvalidService.prototype.getFormControlIndexByBindingPath = function (frameContext, binding) {
        var ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        var bindings = binding.split('/').filter(function (p) { return p; });
        return Object.values(ngFormControls).findIndex(function (ngFormControl) {
            if (!ngFormControl) {
                return false;
            }
            var bindingPath = frameContext.viewModel.bindingPath;
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            var formControlBindingPaths = ngFormControl.binding.split('.').filter(function (p) { return p; });
            var fullPath = bindingPaths.concat(formControlBindingPaths);
            return fullPath.join('/') === bindings.join('/');
        });
    };
    FocusInvalidService.prototype.getFieldIndex = function (frameContext, binding) {
        var isGridComponent = this.isGridComponent(frameContext);
        if (isGridComponent) {
            return this.getColumnIndex(frameContext, binding);
        }
        else {
            return this.getFormControlIndexByBindingPath(frameContext, binding);
        }
    };
    FocusInvalidService.prototype.getFormControlsByFrameContext = function (frameContext) {
        return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
    };
    FocusInvalidService.prototype.focusElement = function (elementId, rootElement) {
        var focused = false;
        var elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);
        // 未获取到指定字段时，返回，不再设置焦点。
        if (elementToFocus) {
            // 如果有多个id重复的元素，则不定位
            var elements = rootElement.nativeElement.ownerDocument.querySelectorAll("#" + elementId);
            if (elements && elements.length > 1) {
                return focused;
            }
            // 如果绑定目标字段的控件不是Input元素，则查找其下级节点。
            if (elementToFocus.tagName !== 'INPUT') {
                var subElements = elementToFocus.getElementsByTagName('input');
                if (subElements.length) {
                    elementToFocus = subElements[0];
                }
            }
            elementToFocus.focus();
            focused = true;
        }
        return focused;
    };
    /**
     * 设置焦点
     * @param verifyInformation 错误信息
     * @param frameContext 上下文
     * @returns
     */
    FocusInvalidService.prototype.focus = function (verifyInformation, frameContext) {
        if (!verifyInformation) {
            return;
        }
        var isGridValidation = verifyInformation.index !== null;
        if (isGridValidation) {
            var grid_1 = this.getGridRef(frameContext);
            if (grid_1) {
                setTimeout(function () {
                    grid_1.editCell(verifyInformation.id, verifyInformation.targetField);
                }, 0);
            }
        }
        else {
            var frameElement_1 = this.getComponentRef(frameContext);
            var elementId = verifyInformation.targetField;
            this.focusById(elementId, frameElement_1);
        }
    };
    /**
     * 通过控件id设置焦点
     * @param elementId
     * @param elementRef
     */
    FocusInvalidService.prototype.focusById = function (elementId, elementRef) {
        var document = elementRef && elementRef.nativeElement.ownerDocument || window.document;
        if (document) {
            var element = document.getElementById(elementId);
            if (element.tagName !== 'INPUT') {
                var subElements = element.getElementsByTagName('input');
                if (subElements.length) {
                    var input = subElements[0];
                    if (input && typeof input.focus === 'function') {
                        input.focus();
                    }
                }
            }
            else {
                element.focus();
            }
        }
    };
    /**
     * 获取组件实例
     * @param frameContext
     * @returns
     */
    FocusInvalidService.prototype.getComponentRef = function (frameContext) {
        return this.frameContext && this.frameContext.injector.get(ElementRef, null) || null;
    };
    /**
     * 获取grid实例
     * @param frameContext frameContext
     * @returns
     */
    FocusInvalidService.prototype.getGridRef = function (frameContext) {
        var _this = this;
        var namespace = frameContext.namespace;
        var bindingPath = frameContext.viewModel.bindingPath;
        var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];
        var matchedFrameContexts = frameContexts.filter(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString() === bindingPath.split('/').filter(function (p) { return p; }).toString(); });
        var result = null;
        if (matchedFrameContexts) {
            matchedFrameContexts.every(function (frameContext) {
                var frameId = frameContext.frameId;
                var componentsMap = _this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                if (!componentsMap) {
                    return true;
                }
                var datagridComponent = Array.from(componentsMap.values()).find(function (component) { return component && component['__component_type__'] === 'DatagridComponent'; });
                if (datagridComponent) {
                    result = datagridComponent;
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        return result;
    };
    FocusInvalidService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FocusInvalidService.ctorParameters = function () { return [
        { type: Repository },
        { type: FrameContext },
        { type: FrameContextService },
        { type: FormControlService }
    ]; };
    return FocusInvalidService;
}());
export { FocusInvalidService };
//# sourceMappingURL=data:application/json;base64,