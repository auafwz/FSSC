/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter, Injector, ChangeDetectorRef } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
export class DateRangeComponent {
    /**
     * @param {?} solutionService
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(solutionService, injector, cdr) {
        this.solutionService = solutionService;
        this.injector = injector;
        this.cdr = cdr;
        this.searchHandle = new EventEmitter();
        //TODO: need 2 placeholder text for date range
        // rangeDate = {
        //     begin:null,
        //     end:null
        // };
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    // showType:string;
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initDate();
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
            /** @type {?} */
            const beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
            if (beginplac == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.beginPlaceHolder = this.item.control.beginPlaceHolder;
                }
            }
            else {
                this.beginPlaceHolder = this.item.beginPlaceHolder;
            }
            /** @type {?} */
            const endplac = Object.prototype.toString.call(this.item.endPlaceHolder);
            if (endplac == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.endPlaceHolder = this.item.control.endPlaceHolder;
                }
            }
            else {
                this.endPlaceHolder = this.item.endPlaceHolder;
            }
            // this.showType = this.item.control.showType;
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.rangeDate = '';
        }));
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.initDate();
    }
    /**
     * @return {?}
     */
    initDate() {
        if (this.item && this.item.control && this.item.control.hasOwnProperty('format')) {
            /** @type {?} */
            let itemDateFormat = this.item.control.format;
            if (this.showTime) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.returnFormat = format;
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        /** @type {?} */
        const rangeDateValue = this.item && this.item.value;
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = `${rangeDateValue.startTime}~${rangeDateValue.endTime}`;
        }
    }
    /**
     * @param {?} dateString
     * @return {?}
     */
    getDate(dateString) {
        // let arr1:Array<any> = dateString.split(" "); 
        // let sdate = arr1[0].split('-'); 
        // let date = new Date(sdate[0], sdate[1]-1, sdate[2]);
        /** @type {?} */
        let date = new Date(dateString);
        return date;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event) {
            ((/** @type {?} */ (this.item.value))).startTime = event.returnFormatted.split('~')[0];
            ((/** @type {?} */ (this.item.value))).endTime = event.returnFormatted.split('~')[1];
        }
        else {
            // this.item.value = new DateRangeValue();
            this.item.value.startTime = '';
            this.item.value.endTime = '';
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(event);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
DateRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-daterange',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <ng-container *ngIf=\"showTime;else defaultdate\">\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker>\r\n    </ng-container>\r\n    <ng-template #defaultdate>\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\" [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss': (showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd'))\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showType]=\"showType\"></farris-datepicker>\r\n    </ng-template>\r\n    \r\n\r\n    <!-- <farris-datepicker [ngModel]=\"rangeDate\" [dateRange]=\"true\" [returnFormat]=\"'yyyy-MM-dd'\" [dateFormat]=\"item.control.format\" (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>\r\n<!-- [(ngModel)]=\"rangeDate\" -->"
            }] }
];
/** @nocollapse */
DateRangeComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: Injector },
    { type: ChangeDetectorRef }
];
DateRangeComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    showTime: [{ type: Input }],
    showType: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    DateRangeComponent.prototype.item;
    /** @type {?} */
    DateRangeComponent.prototype.autoLabel;
    /** @type {?} */
    DateRangeComponent.prototype.disabled;
    /** @type {?} */
    DateRangeComponent.prototype.showTime;
    /** @type {?} */
    DateRangeComponent.prototype.showType;
    /** @type {?} */
    DateRangeComponent.prototype.searchHandle;
    /** @type {?} */
    DateRangeComponent.prototype.startTime;
    /** @type {?} */
    DateRangeComponent.prototype.endTime;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    DateRangeComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    DateRangeComponent.prototype.showlabel;
    /** @type {?} */
    DateRangeComponent.prototype.rangeDate;
    /** @type {?} */
    DateRangeComponent.prototype.placeholder;
    /** @type {?} */
    DateRangeComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    DateRangeComponent.prototype.endPlaceHolder;
    /** @type {?} */
    DateRangeComponent.prototype.dateFormat;
    /** @type {?} */
    DateRangeComponent.prototype.returnFormat;
    /**
     * @type {?}
     * @private
     */
    DateRangeComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    DateRangeComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DateRangeComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,