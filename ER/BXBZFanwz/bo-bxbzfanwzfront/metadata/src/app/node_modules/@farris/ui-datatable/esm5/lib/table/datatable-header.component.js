/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-04-08 16:51:39
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-23 16:51:21
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, EventEmitter, Output, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { deepCopy, convertColumns } from '../datatable-column';
import { DataTableService } from '../datatable.service';
import { CommonUtils } from '@farris/ui-common';
import { DataTableComponent } from '../datatable.component';
import { DTCheckboxComponent } from '../datatable-checkbox.component';
var DataTableHeaderComponent = /** @class */ (function () {
    function DataTableHeaderComponent(el, dataService, render, utils, dt) {
        var _this = this;
        this.el = el;
        this.dataService = dataService;
        this.render = render;
        this.utils = utils;
        this.dt = dt;
        this.columns = [];
        this.singleSelect = true;
        this.checkedAll = new EventEmitter();
        this.rowsChange = new EventEmitter();
        this.loadData = new EventEmitter();
        this.sortType = {};
        this.filterFields = {};
        this.clickedUp = false;
        this.clickedDown = false;
        this.isCheckAll = false;
        this.allClass = ' ';
        this.width = '100%';
        this.allClass += this.el.nativeElement.classList.value;
        this.dataService.updateCheckAllStatus.subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n !== 2) {
                _this.isCheckAll = n ? true : false;
                // this.checkallEl.elementRef.nativeElement.checked = this.isCheckAll;
            }
            else {
                _this.isCheckAll = false;
                // this.checkallEl.elementRef.nativeElement.checked = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    DataTableHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.fixed === 'left') {
            this.columns = convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = convertColumns(this.columns, 'right');
        }
    };
    /**
     * @return {?}
     */
    DataTableHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} $event
     * @return {?}
     */
    DataTableHeaderComponent.prototype.onCheckedChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.isCheckAll = $event.checked;
        this.checkedAll.emit($event.checked);
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    DataTableHeaderComponent.prototype.createRowClassName = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    };
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    DataTableHeaderComponent.prototype.compare = /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (typeof a === 'string') {
            return a.localeCompare(b);
        }
        else {
            return a === b ? 0 : (a > b ? 1 : -1);
        }
    };
    /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    DataTableHeaderComponent.prototype._sort = /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    function (r1, r2) {
        /** @type {?} */
        var r = 0;
        /** @type {?} */
        var sortFields = this.dt.sortName.split(',');
        /** @type {?} */
        var orders = this.dt.sortOrder.split(',');
        if (!this.dt.sortName) {
            return r;
        }
        var _loop_1 = function (i) {
            /** @type {?} */
            var sn = sortFields[i];
            /** @type {?} */
            var so = orders[i];
            /** @type {?} */
            var col = this_1.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === sn; }));
            /** @type {?} */
            var orderby = col['sorter'] || this_1.compare;
            /** @type {?} */
            var v1 = this_1.utils.getValue(sn, r1);
            if (v1 === null || v1 === undefined) {
                v1 = '';
            }
            /** @type {?} */
            var v2 = this_1.utils.getValue(sn, r2);
            if (v2 === null || v2 === undefined) {
                v2 = '';
            }
            r = orderby(v1, v2);
            if (r !== 0) {
                return { value: r * (so === 'asc' ? 1 : -1) };
            }
        };
        var this_1 = this;
        for (var i = 0; i < sortFields.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return r;
    };
    /**
     * @private
     * @return {?}
     */
    DataTableHeaderComponent.prototype.clientSort = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sortedData = this.data.sort(this._sort.bind(this));
        this.loadData.emit(sortedData);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    DataTableHeaderComponent.prototype.onSortColumnClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        var _this = this;
        if (!col.sortable) {
            return;
        }
        /** @type {?} */
        var sortName = this.dt.sortName;
        /** @type {?} */
        var sortOrder = this.dt.sortOrder;
        /** @type {?} */
        var sortFields = [];
        /** @type {?} */
        var sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        var colOrder = col.order || 'asc';
        /** @type {?} */
        var newOrder = colOrder;
        /** @type {?} */
        var i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === col.field; }));
        if (i >= 0) {
            /** @type {?} */
            var _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            if (this.dt.multiSort && newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
                if (sortFields.length === 0) {
                    sortFields.push(col.field);
                    sortOrders.push('asc');
                    newOrder = 'asc';
                }
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.dt.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.dt.sortName = sortFields.join(',');
        this.dt.sortOrder = sortOrders.join(',');
        // this.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        if (!this.dt.multiSort) {
            /** @type {?} */
            var updateFieldOrder = (/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                if (!cols || !cols.length) {
                    return;
                }
                cols.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    c.order = undefined;
                    /** @type {?} */
                    var k = sortFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === c.field; }));
                    if (k >= 0) {
                        c.order = sortOrders[k];
                    }
                }));
            });
            updateFieldOrder(this.columns);
            // this.cdRef.detectChanges();
        }
        this.dt.beforeSortColumn(this.dt.sortName, this.dt.sortOrder).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.dt.remoteSort) {
                // this.reload();
            }
            else {
                _this.clientSort();
            }
            _this.dt.columnSorted.emit({ sortName: _this.dt.sortName, sortOrder: _this.dt.sortOrder });
        }));
    };
    /**
     * @return {?}
     */
    DataTableHeaderComponent.prototype.deepCopyData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copyColumns = deepCopy(this.columns);
        /** @type {?} */
        var copyRows = deepCopy(this.rows);
        copyColumns.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.sortType = 'normal';
        }));
        return {
            copyColumns: copyColumns,
            copyRows: copyRows
        };
    };
    /* 若存在筛选条件 保存按钮可点击
     */
    /* 若存在筛选条件 保存按钮可点击
         */
    /**
     * @param {?} col
     * @return {?}
     */
    DataTableHeaderComponent.prototype.hasChecked = /* 若存在筛选条件 保存按钮可点击
         */
    /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        if (this.filterFields.hasOwnProperty(col.field)) {
            this.filterFields[col.field].some((/**
             * @param {?} ele
             * @return {?}
             */
            function (ele) {
                return ele.checked;
            }));
        }
        return false;
    };
    DataTableHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datatable-header',
                    template: "\n        <table class=\"table\" [class.table-sm]=\"size === 'small'\">\n            <colgroup>\n                <col class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect\" />\n                <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" />\n            </colgroup>\n            <thead>\n                <tr>\n                    <th drag-column class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect\">\n                        <dt-checkbox #checkall [checked]=\"isCheckAll\" (checkedChange)=\"onCheckedChange($event)\"></dt-checkbox>\n                    </th>\n                    <th drag-column *ngFor=\"let col of columns; let i = index\" [style.textAlign]=\"col.hAlign || 'left'\">\n                        <span>{{ col.title }}</span>\n                        <ng-container *ngIf=\"col.sortable\">\n                            <span\n                                class=\"f-datatable-sort\"\n                                [class.f-datatable-sort-asc]=\"col.order === 'asc'\"\n                                [class.f-datatable-sort-desc]=\"col.order === 'desc'\"\n                                (click)=\"onSortColumnClick($event, col)\"\n                                *ngIf=\"col.order\"\n                                >\n                            </span>\n                            <span class=\"f-datatable-sort\" (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order\">\n                            </span>\n                        </ng-container>\n                    </th>\n                </tr>\n            </thead>\n        </table>\n    ",
                    styles: ["th>div{display:inline-block;float:right;width:20%;height:0;margin-right:5%}th>div>span.sort-container{position:relative;display:inline-block;width:100%;height:1rem}th span.farris-icon{position:absolute;left:0;opacity:.5;cursor:pointer}th span.k-i-arrow-60-up{top:0}th span.k-i-arrow-60-down{top:.5em}th span.k-i-filter{top:-.5rem}th span.clicked,th span.k-i-filter:hover{opacity:1}.farris-table-header{overflow:auto}"]
                }] }
    ];
    /** @nocollapse */
    DataTableHeaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataTableService },
        { type: Renderer2 },
        { type: CommonUtils },
        { type: DataTableComponent }
    ]; };
    DataTableHeaderComponent.propDecorators = {
        size: [{ type: Input }],
        hover: [{ type: Input }],
        columns: [{ type: Input }],
        singleSelect: [{ type: Input }],
        fixed: [{ type: Input }],
        rows: [{ type: Input }],
        data: [{ type: Input }],
        rowClassName: [{ type: Input }],
        checkedAll: [{ type: Output }],
        rowsChange: [{ type: Output }],
        loadData: [{ type: Output }],
        checkallEl: [{ type: ViewChild, args: ['checkall',] }]
    };
    return DataTableHeaderComponent;
}());
export { DataTableHeaderComponent };
if (false) {
    /** @type {?} */
    DataTableHeaderComponent.prototype.size;
    /** @type {?} */
    DataTableHeaderComponent.prototype.hover;
    /** @type {?} */
    DataTableHeaderComponent.prototype.columns;
    /** @type {?} */
    DataTableHeaderComponent.prototype.singleSelect;
    /** @type {?} */
    DataTableHeaderComponent.prototype.fixed;
    /** @type {?} */
    DataTableHeaderComponent.prototype.rows;
    /** @type {?} */
    DataTableHeaderComponent.prototype.data;
    /** @type {?} */
    DataTableHeaderComponent.prototype.rowClassName;
    /** @type {?} */
    DataTableHeaderComponent.prototype.checkedAll;
    /** @type {?} */
    DataTableHeaderComponent.prototype.rowsChange;
    /** @type {?} */
    DataTableHeaderComponent.prototype.loadData;
    /** @type {?} */
    DataTableHeaderComponent.prototype.checkallEl;
    /** @type {?} */
    DataTableHeaderComponent.prototype.sortType;
    /** @type {?} */
    DataTableHeaderComponent.prototype.filterFields;
    /** @type {?} */
    DataTableHeaderComponent.prototype.clickedUp;
    /** @type {?} */
    DataTableHeaderComponent.prototype.clickedDown;
    /** @type {?} */
    DataTableHeaderComponent.prototype.copyColumns;
    /** @type {?} */
    DataTableHeaderComponent.prototype.copyRows;
    /** @type {?} */
    DataTableHeaderComponent.prototype.originRows;
    /** @type {?} */
    DataTableHeaderComponent.prototype.isCheckAll;
    /** @type {?} */
    DataTableHeaderComponent.prototype.allClass;
    /** @type {?} */
    DataTableHeaderComponent.prototype.width;
    /** @type {?} */
    DataTableHeaderComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DataTableHeaderComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    DataTableHeaderComponent.prototype.render;
    /** @type {?} */
    DataTableHeaderComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    DataTableHeaderComponent.prototype.dt;
}
//# sourceMappingURL=data:application/json;base64,