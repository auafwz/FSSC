/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter, ChangeDetectorRef, Injector, Output } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { MessagerService } from '@farris/ui-messager';
var DatagridSettingsComponent = /** @class */ (function () {
    function DatagridSettingsComponent(cd, inject) {
        this.cd = cd;
        this.inject = inject;
        this.activeTabIndex = 1;
        /**
         * 排序列数据
         */
        this.sortTreeData = [];
        this.sortNames = [];
        this.sortInfo = {};
        /**
         * 显示列数据
         */
        this.viewTreeData = [];
        this.viewColumns = [];
        this.columnFormat = [];
        this.groupFields = [];
        this.canSetColumnSort = true;
        this.canSetColumnVisible = true;
        this.enableReset = false;
        this.cancelHandle = new EventEmitter();
        this.submitHandle = new EventEmitter();
        this.reset = new EventEmitter();
        this.concise = new EventEmitter();
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.messager = this.inject.get(MessagerService, null);
        this.localeSer = this.inject.get(LocaleService);
        this.searchItems = [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
        this.alignItems = [
            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
        ];
        this.summaryItems = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.summaryItems2 = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
    }
    /**
     * @return {?}
     */
    DatagridSettingsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
        this.viewColumns = this.getViewColumns();
        this.sortInfo = this.gridInstance['__sortInfo'] || {};
        this.columnFormat = tslib_1.__spread(this.columns[0]);
        this.groupFields = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridSettingsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            // console.log(this.columns);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.close = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.modalRef) {
            this.modalRef.close();
        }
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    DatagridSettingsComponent.prototype.changeTabs = /**
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        this.activeTabIndex = idx;
    };
    /**
     * @param {?} sortInfo
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSortInfoChange = /**
     * @param {?} sortInfo
     * @return {?}
     */
    function (sortInfo) {
        this.sortInfo = sortInfo;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.getViewColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 多表头
        /** @type {?} */
        var visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                visibleCls = visibleCls.concat(_this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return (n.visible || n.visible === undefined); }));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsComponent.prototype._getViewColumns = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
    };
    /**
     * @param {?} colFormatData
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onColumnFormatChange = /**
     * @param {?} colFormatData
     * @return {?}
     */
    function (colFormatData) {
        this.columnFormat = colFormatData;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSubmitClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.submitHandle.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onCancelClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.cancelHandle.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSettingReset = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        // this.reset.emit($event);
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.reset2Default();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.reset2Default = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            var newColumns_1 = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = _this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = tslib_1.__assign({}, c.footer || {});
                        col.groupFooter = tslib_1.__assign({}, c.groupFooter || {});
                        newColumns_1.push(col);
                    }
                }
            }));
            this.columns = [newColumns_1];
        }
        this.viewColumns = this.getViewColumns();
        if (options.sort) {
            /** @type {?} */
            var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        }
        else {
            this.sortNames = [];
            this.sortInfo = {};
        }
        this.columnFormat = tslib_1.__spread(this.columns[0]);
        this.groupFields = options.groupField ? options.groupField.split(',') : [];
    };
    /** 显示简洁模式窗口 */
    /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.showConcise = /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.concise.emit();
    };
    DatagridSettingsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-settings',
                    template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\">\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs(1)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.visible' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"canSetColumnSort\"\r\n                        [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs(2)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.sortting' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 3\" *ngIf=\"gridInstance?.groupRows\"\r\n                        (click)=\"changeTabs(3)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px; display: block;\">\r\n                            {{'datagrid.settings.groupping' | locale}}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\"\r\n                (formatChange)=\"onColumnFormatChange($event)\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [(groupFields)]=\"groupFields\" [fields]=\"viewColumns\" [columns]=\"columns\"\r\n                [(formatColumns)]=\"columnFormat\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n\n        .f-datagrid-settings .header {\n            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px\n        }\n\n        .f-datagrid-settings .header .title {\n            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;\n        }\n        .f-datagrid-settings .header .tabs {\n            height: 32px;\n            top: 12px; font-size: 14px;\n            position: relative;\n            line-height: 32px;\n        }\n        .f-datagrid-settings .header .tabs .tabs-labels {\n            background: #EFF5FF;border-radius: 17px;color:#6080AD\n        }\n\n        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {\n            line-height: 28px;\n            margin: 2px;\n            height: 28px;\n            background: rgb(246 250 255);\n            border-radius: 15px;\n            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)\n        }\n        .f-datagrid-settings .header .close {\n            line-height: 56px;padding: 0;width: 20px\n        }\n        .f-datagrid-settings .tabs-container {\n            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;\n        }\n        .f-datagrid-settings .buttons\n        {\n            height: 66px;text-align: right;padding: 14px 24px 20px 24px;\n        }\n\n        .f-datagrid-settings .buttons button {\n            width: 66px;height: 32px;\n        }\n        .f-datagrid-settings .buttons .cancel {\n            margin-left: 12px;margin-right: 8px;\n        }\n        .f-datagrid-settings .buttons .ok {\n            width: 100px;\n        }\n\n        .f-datagrid-settings .dg-column-format-setting>div{\n            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA\n        }\n\n        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{\n            margin-right: 5px; font-size: 14px;color: #0089FF;\n        }\n\n        .f-datagrid-settings  .column-group-setting .title{\n            height: 36px; line-height: 36px; color: #59a1ff\n        }\n\n        .f-datagrid-settings  .column-group-setting .all-fields {\n            background-color:#fff;padding-top: 0px!important;\n        }\n\n        .f-datagrid-settings  .column-group-setting .group-sum-fields {\n            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff\n        }\n\n\n        .smooth-dnd-ghost.format-setting-column {\n            border: 1px solid #2a87ff;\n            z-index: 999999999 !important;\n            background-color: #e7f1ff;;\n            padding: 4px 8px;\n            color: rgb(0 0 0);\n        }\n\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\n            float: right;\n        }\n\n        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {\n            background-color: #dee1ea;\n        }\n        .dg-column-format-setting .format-setting-column {\n            background: #fafbfd;\n            padding: 4px 8px;\n            margin-bottom: 5px;\n            border: 1px solid #f2f4f8;\n            border-radius: 5px;\n        }\n        .dg-column-format-setting .format-setting-column.active {\n            color: rgb(0 0 0);\n            border: 1px solid #2a87ff;\n            background: #e7f1ff;\n            border-top: 1px solid #2a87ff!important;\n            border-bottom: 1px solid #2a87ff!important;\n        }\n\n        .dg-column-format-setting .format-setting-column .field-drag-handle{\n            float: right;\n            cursor: grab;\n        }\n\n        .dg-column-format-setting .format-setting-column .field-drag-handle:active{\n            cursor: grabbing;\n        }\n\n        "]
                }] }
    ];
    /** @nocollapse */
    DatagridSettingsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    DatagridSettingsComponent.propDecorators = {
        enableReset: [{ type: Input }],
        columns: [{ type: Input }],
        cancelHandle: [{ type: Output }],
        submitHandle: [{ type: Output }],
        reset: [{ type: Output }],
        concise: [{ type: Output }],
        header: [{ type: ViewChild, args: ['header',] }]
    };
    return DatagridSettingsComponent;
}());
export { DatagridSettingsComponent };
if (false) {
    /** @type {?} */
    DatagridSettingsComponent.prototype.modalRef;
    /** @type {?} */
    DatagridSettingsComponent.prototype.gridInstance;
    /** @type {?} */
    DatagridSettingsComponent.prototype.activeTabIndex;
    /**
     * 排序列数据
     * @type {?}
     */
    DatagridSettingsComponent.prototype.sortTreeData;
    /** @type {?} */
    DatagridSettingsComponent.prototype.sortNames;
    /** @type {?} */
    DatagridSettingsComponent.prototype.sortInfo;
    /**
     * 显示列数据
     * @type {?}
     */
    DatagridSettingsComponent.prototype.viewTreeData;
    /** @type {?} */
    DatagridSettingsComponent.prototype.viewColumns;
    /** @type {?} */
    DatagridSettingsComponent.prototype.columnFormat;
    /** @type {?} */
    DatagridSettingsComponent.prototype.groupFields;
    /** @type {?} */
    DatagridSettingsComponent.prototype.canSetColumnSort;
    /** @type {?} */
    DatagridSettingsComponent.prototype.canSetColumnVisible;
    /** @type {?} */
    DatagridSettingsComponent.prototype.enableReset;
    /** @type {?} */
    DatagridSettingsComponent.prototype.columns;
    /** @type {?} */
    DatagridSettingsComponent.prototype.cancelHandle;
    /** @type {?} */
    DatagridSettingsComponent.prototype.submitHandle;
    /** @type {?} */
    DatagridSettingsComponent.prototype.reset;
    /** @type {?} */
    DatagridSettingsComponent.prototype.concise;
    /** @type {?} */
    DatagridSettingsComponent.prototype.header;
    /** @type {?} */
    DatagridSettingsComponent.prototype.searchItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.alignItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.summaryItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.summaryItems2;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,