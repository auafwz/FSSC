/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/f-file-uploader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Optional } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { mergeMap, finalize } from 'rxjs/operators';
import { FFileUtils } from '../utils/index';
import { UploadStatus, UploadServerService } from '../model/index';
export class FFileUploaderService {
    /**
     * @param {?} uploadServerSer
     */
    constructor(uploadServerSer) {
        this.uploadServerSer = uploadServerSer;
        this.allowedContentTypes = ['*'];
        //默认不限制,0代表不限制 Number.POSITIVE_INFINITY
        this.maxUploads = 0;
        // 单位M，默认是12M,0代表不限制
        this.maxFileSize = 12;
        this.concurrency = Number.POSITIVE_INFINITY;
        this.uploadedCount = 0;
        this.extendServerConfig = null;
        this.queue = [];
        this.serviceEvents = new EventEmitter();
        this.uploadScheduler = new Subject();
        this.subs = [];
        this.uploadScheduler
            .pipe(mergeMap((/**
         * @param {?} upload
         * @return {?}
         */
        upload => {
            return this.serverMethod(upload);
        }), this.concurrency))
            .subscribe((/**
         * @param {?} uploadOutput
         * @return {?}
         */
        uploadOutput => {
            // if (uploadOutput.type == 'removed' || uploadOutput.type == 'done') {
            //   // 删除或者done移除
            //   const subIndex = this.subs.findIndex(sub => sub.id === uploadOutput.file.id);
            //   if (subIndex > -1 && this.subs[subIndex].sub) {
            //     this.subs[subIndex].sub.unsubscribe();
            //   }
            //   this.subs.splice(subIndex, 1);
            // }
            if (uploadOutput.type == 'removed') {
                // 事件中返回的都是
                this.queue = this.queue.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.progress.status !== UploadStatus.Remove));
                if (!uploadOutput.hasOwnProperty('message')) {
                    uploadOutput['message'] = "被删除";
                }
            }
            if (uploadOutput.type == 'error') {
                // 上传失败的附件移除
                this.queue = this.queue.filter((/**
                 * @param {?} queueItem
                 * @return {?}
                 */
                queueItem => {
                    return uploadOutput.files.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => queueItem.id == item.id)) < 0;
                }));
            }
            this.serviceEvents.emit(uploadOutput);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        // 重置文件大小、类型、个数限制
        if (options) {
            for (let prop in options) {
                this[prop] = options[prop];
            }
        }
    }
    /**
     * @param {?} incomingFiles
     * @return {?}
     */
    handleFiles(incomingFiles) {
        /** @type {?} */
        const allowedIncomingFiles = [].reduce.call(incomingFiles, (/**
         * @param {?} acc
         * @param {?} checkFile
         * @param {?} i
         * @return {?}
         */
        (acc, checkFile, i) => {
            /** @type {?} */
            const futureQueueLength = acc.length + this.queue.length + 1;
            /** @type {?} */
            let judgeResult = this.rejectedReason(checkFile.name, checkFile.type, futureQueueLength, checkFile.size);
            if (judgeResult.allowed) {
                acc = acc.concat(checkFile);
            }
            else {
                // 不符合当前文件类型或者内容超出限制，抛出事件
                /** @type {?} */
                const rejectedFile = FFileUtils.makeUploadFile(checkFile, i);
                this.serviceEvents.emit({ type: 'rejected', file: rejectedFile, message: judgeResult.message });
            }
            return acc;
        }), []);
        // 构造文件结构，并单个抛出事件
        [].map.call(allowedIncomingFiles, (/**
         * @param {?} file
         * @param {?} i
         * @return {?}
         */
        (file, i) => {
            /** @type {?} */
            const uploadFile = FFileUtils.makeUploadFile(file, i);
            this.queue.push(uploadFile);
            this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });
        }));
        // 所有的文件都已经添加，抛出事件
        this.serviceEvents.emit({ type: 'allAddedToQueue' });
    }
    /**
     * @private
     * @param {?} name
     * @param {?} type
     * @param {?} queuelength
     * @param {?} size
     * @return {?}
     */
    rejectedReason(name, type, queuelength, size) {
        /** @type {?} */
        let allowed = false;
        /** @type {?} */
        let message = '';
        // 已存在同名文件
        /** @type {?} */
        let findDuplicateIndex = this.queue.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        file => file.name == name));
        if (findDuplicateIndex > -1) {
            message = '上传失败：已存在同名文件';
        }
        else if (!this.isContentTypeAllowed(name)) {
            message = '上传失败：只允许上传' + this.allowedContentTypes.join(',') + '类型的文档';
        }
        else if (this.maxUploads > 0 && (this.maxUploads <= this.uploadedCount || (queuelength + this.uploadedCount) > this.maxUploads)) {
            message = '上传失败：文件总个数超出' + this.maxUploads + '限制';
        }
        else if (!this.isFileSizeAllowed(size)) {
            message = '上传失败：单个文件大小超出' + this.maxFileSize + 'MB的限制';
        }
        else if (size == 0) {
            message = '上传失败：不允许文件为空';
        }
        else {
            allowed = true;
        }
        return {
            allowed, message
        };
    }
    /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param {?} input
     * @return {?}
     */
    initInputEvents(input) {
        //debugger
        return input.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            //debugger
            switch (event.type) {
                case 'upload':
                case 'multipartUpload':
                    /** @type {?} */
                    const uploadFileIndex = this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    file => file === event.file));
                    if (uploadFileIndex !== -1 && event.file) {
                        this.uploadScheduler.next({ files: [this.queue[uploadFileIndex]], event: event, file: null });
                    }
                    break;
                case 'uploadAll':
                    /** @type {?} */
                    const files = this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    file => file.progress.status === UploadStatus.Queue));
                    if (files.length > 0) {
                        event.type = 'upload';
                        this.uploadScheduler.next({ files: files, event: event, file: null });
                    }
                    break;
                case 'cancel':
                    /** @type {?} */
                    const id = event.id || null;
                    if (!id) {
                        return;
                    }
                    /** @type {?} */
                    const fileIndex = this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    file => file.id === id));
                    if (fileIndex !== -1) {
                        this.serviceEvents.emit({ type: 'cancelled', files: [this.queue[fileIndex]], message: '已取消附件上传' });
                        this.queue.splice(fileIndex, 1);
                    }
                    break;
                    // case 'cancel':
                    // debugger
                    // const id = event.id || null;
                    // if (!id) {
                    //   return;
                    // }
                    // const subs = this.subs.filter(sub => sub.id === id);
                    // subs.forEach(sub => {
                    //   if (sub.sub) {
                    //     sub.sub.unsubscribe();
                    //     const fileIndex = this.queue.findIndex(file => file.id === id);
                    //     if (fileIndex !== -1) {
                    //       this.queue[fileIndex].progress.status = UploadStatus.Cancelled;
                    //       this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });
                    //     }
                    //   }
                    // });
                    break;
                // case 'cancelAll':
                //   this.subs.forEach(sub => {
                //     if (sub.sub) {
                //       sub.sub.unsubscribe();
                //     }
                //     const file = this.queue.find(uploadFile => uploadFile.id === sub.id);
                //     if (file) {
                //       file.progress.status = UploadStatus.Cancelled;
                //       this.serviceEvents.emit({ type: 'cancelled', file: file });
                //     }
                //   });
                //   break;
                case 'hide':
                    if (!event.id) {
                        return;
                    }
                    /** @type {?} */
                    let ids = event.id.split(',');
                    this.queue = this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    file => {
                        /** @type {?} */
                        let tIndex = ids.findIndex((/**
                         * @param {?} tId
                         * @return {?}
                         */
                        tId => tId == file.id));
                        return tIndex > -1 ? false : true;
                    }));
                    break;
                case 'cancelAll':
                    // 取消，直接从队列中移除，不用修改状态
                    /** @type {?} */
                    const queueFiles = this.queue.filter((/**
                     * @param {?} uploadFile
                     * @return {?}
                     */
                    uploadFile => uploadFile.progress.status === UploadStatus.Queue));
                    if (queueFiles.length) {
                        this.serviceEvents.emit({ type: 'cancelled', files: queueFiles, message: '已取消附件上传' });
                        this.queue = this.queue.filter((/**
                         * @param {?} uploadFile
                         * @return {?}
                         */
                        uploadFile => uploadFile.progress.status != UploadStatus.Queue));
                    }
                    break;
                case 'remove':
                    if (!event.id) {
                        return;
                    }
                    /** @type {?} */
                    const removeIndex = this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    file => file.id === event.id));
                    if (removeIndex !== -1) {
                        // 得有个开始删除和已经删除
                        this.queue[removeIndex].progress.status = UploadStatus.Remove;
                        this.uploadScheduler.next({ files: [this.queue[removeIndex]], event: event, file: null });
                    }
                    break;
                case 'removeAll':
                    /** @type {?} */
                    const removeQueueFiles = this.queue.filter((/**
                     * @param {?} uploadFile
                     * @return {?}
                     */
                    uploadFile => uploadFile.progress.status === UploadStatus.Queue));
                    if (removeQueueFiles.length) {
                        this.serviceEvents.emit({ type: 'cancelled', files: removeQueueFiles, message: '删除附件成功' });
                        this.queue = this.queue.filter((/**
                         * @param {?} uploadFile
                         * @return {?}
                         */
                        uploadFile => uploadFile.progress.status != UploadStatus.Queue));
                    }
                    // 正在上传的附件是如何处理
                    // const doneFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Done);
                    if (this.queue.length) {
                        event.type = 'remove';
                        this.queue.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.progress.status = UploadStatus.Remove));
                        this.uploadScheduler.next({ files: this.queue, event: event, file: null });
                    }
                    break;
            }
        }));
    }
    /**
     * @param {?} extendSer
     * @return {?}
     */
    setExtendServerConfig(extendSer) {
        this.extendServerConfig = extendSer;
    }
    /**
     * @param {?} upload
     * @return {?}
     */
    serverMethod(upload) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            let sub;
            /** @type {?} */
            let ids = upload.files.map((/**
             * @param {?} fileItem
             * @return {?}
             */
            fileItem => fileItem.id));
            switch (upload.event.type) {
                case 'upload':
                    sub = this.upload(upload.files, upload.event);
                    break;
                case 'multipartUpload':
                    sub = this.multipartUpload(upload.files[0], upload.event);
                    break;
                // case 'uploadAll':
                //   ids = upload.files.map(fileItem => fileItem.id);
                //   sub = this.uploadAll(upload.files, upload.event);
                //   break;
                case 'remove':
                    sub = this.remove(upload.files, upload.event);
                    break;
                // case 'removeAll':
                //   ids = upload.files.map(fileItem => fileItem.id);
                //   sub = this.removeAll(upload.files, upload.event);
                //   break;
                default:
                    sub = null;
            }
            if (!sub) {
                return;
            }
            sub.pipe(finalize((/**
             * @return {?}
             */
            () => {
                // debugger;
                if (!observer.closed) {
                    observer.complete();
                }
            })))
                .subscribe((/**
             * @param {?} output
             * @return {?}
             */
            output => {
                // debugger;
                observer.next(output);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                observer.next(err);
            }), (/**
             * @return {?}
             */
            () => {
                observer.complete();
            }));
            this.subs.push({ ids: ids, sub: sub, id: '' });
            // switch (upload.event.type) {
            //   case 'uploadAll':
            //     this.subs.push({ ids: ids, sub: sub, id: '' });
            //     break;
            //   case 'removeAll':
            //     this.subs.push({ ids: ids, sub: sub, id: '' });
            //     break;
            //   default:
            // }
        }));
    }
    /**
     * 单个文件上传
     * @param {?} file
     * @param {?} event
     * @return {?}
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    multipartUpload(file, event) {
        // 抛出开始上传的事件
        this.serviceEvents.emit({ type: 'start', files: [file] });
        return this.uploadServerSer.multipartUpload(file, event, this.extendServerConfig);
    }
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    upload(files, event) {
        // 抛出开始上传的事件
        this.serviceEvents.emit({ type: 'start', files: files });
        return this.uploadServerSer.upload(files, event, this.extendServerConfig);
    }
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    remove(files, event) {
        return this.uploadServerSer.remove(files, event, this.extendServerConfig);
    }
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    /**
     * @return {?}
     */
    reset() {
        this.queue = [];
        //this.uploadScheduler = new Subject();
        // this.subs.forEach(sub => {
        //   if (sub.sub) {
        //     sub.sub.unsubscribe();
        //   }
        // });
        this.subs = [];
    }
    // 暂时
    /**
     * @param {?} contentTypes
     * @return {?}
     */
    setContentTypes(contentTypes) {
        if (typeof contentTypes !== 'undefined' && contentTypes instanceof Array) {
            if (contentTypes.find((/**
             * @param {?} type
             * @return {?}
             */
            (type) => type === '*')) !== undefined) {
                this.allowedContentTypes = ['*'];
            }
            else {
                this.allowedContentTypes = contentTypes;
            }
            return;
        }
        this.allowedContentTypes = ['*'];
    }
    /**
     * @return {?}
     */
    allContentTypesAllowed() {
        return this.allowedContentTypes.find((/**
         * @param {?} type
         * @return {?}
         */
        (type) => type === '*')) !== undefined;
    }
    /**
     *
     * @param {?} name
     * @return {?}
     */
    isContentTypeAllowed(name) {
        if (this.allContentTypesAllowed()) {
            return true;
        }
        // 附件没有后缀
        if (name.lastIndexOf('.') < 0) {
            return false;
        }
        /** @type {?} */
        let namesuffix = name.substr(name.lastIndexOf('.'));
        // 简化计算
        return this.allowedContentTypes.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item.toLowerCase() == namesuffix.toLowerCase())) > -1;
    }
    /**
     * @param {?} fileSize
     * @return {?}
     */
    isFileSizeAllowed(fileSize) {
        if (!this.maxFileSize) {
            return true;
        }
        // fileSize是b单位 maxFileSize是MB单位
        return fileSize <= this.maxFileSize * 8 * 1024 * 1024;
    }
}
/** @nocollapse */
FFileUploaderService.ctorParameters = () => [
    { type: UploadServerService, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    FFileUploaderService.prototype.queue;
    /** @type {?} */
    FFileUploaderService.prototype.serviceEvents;
    /** @type {?} */
    FFileUploaderService.prototype.uploadScheduler;
    /** @type {?} */
    FFileUploaderService.prototype.subs;
    /** @type {?} */
    FFileUploaderService.prototype.allowedContentTypes;
    /** @type {?} */
    FFileUploaderService.prototype.maxUploads;
    /** @type {?} */
    FFileUploaderService.prototype.maxFileSize;
    /** @type {?} */
    FFileUploaderService.prototype.concurrency;
    /** @type {?} */
    FFileUploaderService.prototype.uploadedCount;
    /**
     * @type {?}
     * @private
     */
    FFileUploaderService.prototype.extendServerConfig;
    /**
     * @type {?}
     * @private
     */
    FFileUploaderService.prototype.uploadServerSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1maWxlLXVwbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2YtZmlsZS11cGxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQW9CLE1BQU0sTUFBTSxDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBeUMsWUFBWSxFQUFZLG1CQUFtQixFQUFtQixNQUFNLGdCQUFnQixDQUFDO0FBRXJJLE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFhL0IsWUFDc0IsZUFBb0M7UUFBcEMsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBVDFELHdCQUFtQixHQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7O1FBRXRDLGVBQVUsR0FBVyxDQUFDLENBQUM7O1FBRXZCLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLGdCQUFXLEdBQVcsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1FBQy9DLGtCQUFhLEdBQVEsQ0FBQyxDQUFDO1FBQ2YsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO1FBS2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFDdEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWYsSUFBSSxDQUFDLGVBQWU7YUFDakIsSUFBSSxDQUNILFFBQVE7Ozs7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QUMsRUFBRSxDQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRyxDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLFFBQWdCO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxnQ0FBZ0M7UUFDaEMsT0FBTyxRQUFRLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztJQUN4RCxDQUFDOzs7O1lBalhxRSxtQkFBbUIsdUJBZ0J0RixRQUFROzs7O0lBYlgscUNBQW9COztJQUNwQiw2Q0FBMEM7O0lBQzFDLCtDQUF5Rjs7SUFDekYsb0NBQTBEOztJQUMxRCxtREFBc0M7O0lBRXRDLDBDQUF1Qjs7SUFFdkIsMkNBQXlCOztJQUN6QiwyQ0FBK0M7O0lBQy9DLDZDQUF1Qjs7Ozs7SUFDdkIsa0RBQWtDOzs7OztJQUVoQywrQ0FBd0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWVyZ2VNYXAsIGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGRmlsZVV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBVcGxvYWRGaWxlLCBVcGxvYWRPdXRwdXQsIFVwbG9hZElucHV0LCBVcGxvYWRTdGF0dXMsIEJsb2JGaWxlLCBVcGxvYWRTZXJ2ZXJTZXJ2aWNlLCBVcGxvYWRlck9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbC9pbmRleCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRkZpbGVVcGxvYWRlclNlcnZpY2Uge1xyXG4gIHF1ZXVlOiBVcGxvYWRGaWxlW107XHJcbiAgc2VydmljZUV2ZW50czogRXZlbnRFbWl0dGVyPFVwbG9hZE91dHB1dD47XHJcbiAgdXBsb2FkU2NoZWR1bGVyOiBTdWJqZWN0PHsgZmlsZTogVXBsb2FkRmlsZSwgZXZlbnQ6IFVwbG9hZElucHV0LCBmaWxlcz86IFVwbG9hZEZpbGVbXSB9PjtcclxuICBzdWJzOiB7IGlkOiBzdHJpbmcsIHN1YjogU3Vic2NyaXB0aW9uLCBpZHM/OiBzdHJpbmdbXSB9W107XHJcbiAgYWxsb3dlZENvbnRlbnRUeXBlczogc3RyaW5nW10gPSBbJyonXTtcclxuICAvL+m7mOiupOS4jemZkOWItiww5Luj6KGo5LiN6ZmQ5Yi2IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxyXG4gIG1heFVwbG9hZHM6IG51bWJlciA9IDA7XHJcbiAgLy8g5Y2V5L2NTe+8jOm7mOiupOaYrzEyTSww5Luj6KGo5LiN6ZmQ5Yi2XHJcbiAgbWF4RmlsZVNpemU6IG51bWJlciA9IDEyO1xyXG4gIGNvbmN1cnJlbmN5OiBudW1iZXIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgdXBsb2FkZWRDb3VudDpudW1iZXI9MDtcclxuICBwcml2YXRlIGV4dGVuZFNlcnZlckNvbmZpZyA9IG51bGw7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHVwbG9hZFNlcnZlclNlcjogVXBsb2FkU2VydmVyU2VydmljZVxyXG4gICkge1xyXG5cclxuICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgIHRoaXMuc2VydmljZUV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXI8VXBsb2FkT3V0cHV0PigpO1xyXG4gICAgdGhpcy51cGxvYWRTY2hlZHVsZXIgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgdGhpcy5zdWJzID0gW107XHJcblxyXG4gICAgdGhpcy51cGxvYWRTY2hlZHVsZXJcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgbWVyZ2VNYXAodXBsb2FkID0+IHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZlck1ldGhvZCh1cGxvYWQpO1xyXG4gICAgICAgIH0sIHRoaXMuY29uY3VycmVuY3kpXHJcbiAgICAgIClcclxuICAgICAgLnN1YnNjcmliZSh1cGxvYWRPdXRwdXQgPT4ge1xyXG4gICAgICAgIC8vIGlmICh1cGxvYWRPdXRwdXQudHlwZSA9PSAncmVtb3ZlZCcgfHwgdXBsb2FkT3V0cHV0LnR5cGUgPT0gJ2RvbmUnKSB7XHJcbiAgICAgICAgLy8gICAvLyDliKDpmaTmiJbogIVkb25l56e76ZmkXHJcbiAgICAgICAgLy8gICBjb25zdCBzdWJJbmRleCA9IHRoaXMuc3Vicy5maW5kSW5kZXgoc3ViID0+IHN1Yi5pZCA9PT0gdXBsb2FkT3V0cHV0LmZpbGUuaWQpO1xyXG4gICAgICAgIC8vICAgaWYgKHN1YkluZGV4ID4gLTEgJiYgdGhpcy5zdWJzW3N1YkluZGV4XS5zdWIpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5zdWJzW3N1YkluZGV4XS5zdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAvLyAgIH1cclxuICAgICAgICAvLyAgIHRoaXMuc3Vicy5zcGxpY2Uoc3ViSW5kZXgsIDEpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBpZiAodXBsb2FkT3V0cHV0LnR5cGUgPT0gJ3JlbW92ZWQnKSB7XHJcbiAgICAgICAgICAvLyDkuovku7bkuK3ov5Tlm57nmoTpg73mmK9cclxuICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihpdGVtID0+IGl0ZW0ucHJvZ3Jlc3Muc3RhdHVzICE9PSBVcGxvYWRTdGF0dXMuUmVtb3ZlKTtcclxuICAgICAgICAgIGlmICghdXBsb2FkT3V0cHV0Lmhhc093blByb3BlcnR5KCdtZXNzYWdlJykpIHtcclxuICAgICAgICAgICAgdXBsb2FkT3V0cHV0WydtZXNzYWdlJ10gPSBcIuiiq+WIoOmZpFwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXBsb2FkT3V0cHV0LnR5cGUgPT0gJ2Vycm9yJykge1xyXG4gICAgICAgICAgLy8g5LiK5Lyg5aSx6LSl55qE6ZmE5Lu256e76ZmkXHJcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIocXVldWVJdGVtID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVwbG9hZE91dHB1dC5maWxlcy5maW5kSW5kZXgoaXRlbSA9PiBxdWV1ZUl0ZW0uaWQgPT0gaXRlbS5pZCkgPCAwO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHVwbG9hZE91dHB1dCk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuICBzZXRPcHRpb25zKG9wdGlvbnM6IFVwbG9hZGVyT3B0aW9ucykge1xyXG4gICAgLy8g6YeN572u5paH5Lu25aSn5bCP44CB57G75Z6L44CB5Liq5pWw6ZmQ5Yi2XHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICBmb3IgKGxldCBwcm9wIGluIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBoYW5kbGVGaWxlcyhpbmNvbWluZ0ZpbGVzOiBGaWxlTGlzdCk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IGFsbG93ZWRJbmNvbWluZ0ZpbGVzOiBGaWxlW10gPSBbXS5yZWR1Y2UuY2FsbChpbmNvbWluZ0ZpbGVzLCAoYWNjOiBGaWxlW10sIGNoZWNrRmlsZTogRmlsZSwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgIGNvbnN0IGZ1dHVyZVF1ZXVlTGVuZ3RoID0gYWNjLmxlbmd0aCArIHRoaXMucXVldWUubGVuZ3RoICsgMTtcclxuICAgICAgbGV0IGp1ZGdlUmVzdWx0ID0gdGhpcy5yZWplY3RlZFJlYXNvbihjaGVja0ZpbGUubmFtZSwgY2hlY2tGaWxlLnR5cGUsIGZ1dHVyZVF1ZXVlTGVuZ3RoLCBjaGVja0ZpbGUuc2l6ZSk7XHJcbiAgICAgIGlmIChqdWRnZVJlc3VsdC5hbGxvd2VkKSB7XHJcbiAgICAgICAgYWNjID0gYWNjLmNvbmNhdChjaGVja0ZpbGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIOS4jeespuWQiOW9k+WJjeaWh+S7tuexu+Wei+aIluiAheWGheWuuei2heWHuumZkOWItu+8jOaKm+WHuuS6i+S7tlxyXG4gICAgICAgIGNvbnN0IHJlamVjdGVkRmlsZTogVXBsb2FkRmlsZSA9IEZGaWxlVXRpbHMubWFrZVVwbG9hZEZpbGUoY2hlY2tGaWxlLCBpKTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMuZW1pdCh7IHR5cGU6ICdyZWplY3RlZCcsIGZpbGU6IHJlamVjdGVkRmlsZSwgbWVzc2FnZToganVkZ2VSZXN1bHQubWVzc2FnZSB9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIC8vIOaehOmAoOaWh+S7tue7k+aehO+8jOW5tuWNleS4quaKm+WHuuS6i+S7tlxyXG4gICAgW10ubWFwLmNhbGwoYWxsb3dlZEluY29taW5nRmlsZXMsIChmaWxlOiBGaWxlLCBpOiBudW1iZXIpID0+IHtcclxuICAgICAgY29uc3QgdXBsb2FkRmlsZTogVXBsb2FkRmlsZSA9IEZGaWxlVXRpbHMubWFrZVVwbG9hZEZpbGUoZmlsZSwgaSk7XHJcbiAgICAgIHRoaXMucXVldWUucHVzaCh1cGxvYWRGaWxlKTtcclxuICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoeyB0eXBlOiAnYWRkZWRUb1F1ZXVlJywgZmlsZTogdXBsb2FkRmlsZSB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOaJgOacieeahOaWh+S7tumDveW3sue7j+a3u+WKoO+8jOaKm+WHuuS6i+S7tlxyXG4gICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoeyB0eXBlOiAnYWxsQWRkZWRUb1F1ZXVlJyB9KTtcclxuICB9XHJcbiAgcHJpdmF0ZSByZWplY3RlZFJlYXNvbihuYW1lLCB0eXBlLCBxdWV1ZWxlbmd0aCwgc2l6ZSkge1xyXG4gICAgbGV0IGFsbG93ZWQgPSBmYWxzZTtcclxuICAgIGxldCBtZXNzYWdlID0gJyc7XHJcbiAgICAvLyDlt7LlrZjlnKjlkIzlkI3mlofku7ZcclxuICAgIGxldCBmaW5kRHVwbGljYXRlSW5kZXggPSB0aGlzLnF1ZXVlLmZpbmRJbmRleChmaWxlID0+IGZpbGUubmFtZSA9PSBuYW1lKTtcclxuICAgIGlmIChmaW5kRHVwbGljYXRlSW5kZXggPiAtMSkge1xyXG4gICAgICBtZXNzYWdlID0gJ+S4iuS8oOWksei0pe+8muW3suWtmOWcqOWQjOWQjeaWh+S7tic7XHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzQ29udGVudFR5cGVBbGxvd2VkKG5hbWUpKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSAn5LiK5Lyg5aSx6LSl77ya5Y+q5YWB6K645LiK5LygJyArIHRoaXMuYWxsb3dlZENvbnRlbnRUeXBlcy5qb2luKCcsJykgKyAn57G75Z6L55qE5paH5qGjJztcclxuICAgIH0gZWxzZSBpZiAodGhpcy5tYXhVcGxvYWRzID4gMCAmJiAodGhpcy5tYXhVcGxvYWRzPD10aGlzLnVwbG9hZGVkQ291bnR8fCAocXVldWVsZW5ndGggK3RoaXMudXBsb2FkZWRDb3VudCkgPiB0aGlzLm1heFVwbG9hZHMpKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSAn5LiK5Lyg5aSx6LSl77ya5paH5Lu25oC75Liq5pWw6LaF5Ye6JyArIHRoaXMubWF4VXBsb2FkcyArICfpmZDliLYnO1xyXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc0ZpbGVTaXplQWxsb3dlZChzaXplKSkge1xyXG4gICAgICBtZXNzYWdlID0gJ+S4iuS8oOWksei0pe+8muWNleS4quaWh+S7tuWkp+Wwj+i2heWHuicgKyB0aGlzLm1heEZpbGVTaXplICsgJ01C55qE6ZmQ5Yi2JztcclxuICAgIH0gZWxzZSBpZiAoc2l6ZSA9PSAwKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSAn5LiK5Lyg5aSx6LSl77ya5LiN5YWB6K645paH5Lu25Li656m6J1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWxsb3dlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhbGxvd2VkLCBtZXNzYWdlXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS7juWJjeerr+S8oOadpeS6i+S7tu+8jOi/m+ihjOacjeWKoeWZqOerr+aWueazleexu+Wei+WIpOaWrVxyXG4gICAqIEBwYXJhbSBpbnB1dCBcclxuICAgKi9cclxuICBpbml0SW5wdXRFdmVudHMoaW5wdXQ6IEV2ZW50RW1pdHRlcjxVcGxvYWRJbnB1dD4pOiBTdWJzY3JpcHRpb24ge1xyXG4gICAgLy9kZWJ1Z2dlclxyXG4gICAgcmV0dXJuIGlucHV0LnN1YnNjcmliZSgoZXZlbnQ6IFVwbG9hZElucHV0KSA9PiB7XHJcbiAgICAgIC8vZGVidWdnZXJcclxuICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAndXBsb2FkJzpcclxuICAgICAgICBjYXNlICdtdWx0aXBhcnRVcGxvYWQnOlxyXG4gICAgICAgICAgY29uc3QgdXBsb2FkRmlsZUluZGV4ID0gdGhpcy5xdWV1ZS5maW5kSW5kZXgoZmlsZSA9PiBmaWxlID09PSBldmVudC5maWxlKTtcclxuICAgICAgICAgIGlmICh1cGxvYWRGaWxlSW5kZXggIT09IC0xICYmIGV2ZW50LmZpbGUpIHtcclxuICAgICAgICAgICAgdGhpcy51cGxvYWRTY2hlZHVsZXIubmV4dCh7IGZpbGVzOiBbdGhpcy5xdWV1ZVt1cGxvYWRGaWxlSW5kZXhdXSwgZXZlbnQ6IGV2ZW50LCBmaWxlOiBudWxsIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndXBsb2FkQWxsJzpcclxuICAgICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5xdWV1ZS5maWx0ZXIoZmlsZSA9PiBmaWxlLnByb2dyZXNzLnN0YXR1cyA9PT0gVXBsb2FkU3RhdHVzLlF1ZXVlKTtcclxuICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnR5cGUgPSAndXBsb2FkJztcclxuICAgICAgICAgICAgdGhpcy51cGxvYWRTY2hlZHVsZXIubmV4dCh7IGZpbGVzOiBmaWxlcywgZXZlbnQ6IGV2ZW50LCBmaWxlOiBudWxsIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjYW5jZWwnOlxyXG4gICAgICAgICAgY29uc3QgaWQgPSBldmVudC5pZCB8fCBudWxsO1xyXG4gICAgICAgICAgaWYgKCFpZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBmaWxlSW5kZXggPSB0aGlzLnF1ZXVlLmZpbmRJbmRleChmaWxlID0+IGZpbGUuaWQgPT09IGlkKTtcclxuICAgICAgICAgIGlmIChmaWxlSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHsgdHlwZTogJ2NhbmNlbGxlZCcsIGZpbGVzOiBbdGhpcy5xdWV1ZVtmaWxlSW5kZXhdXSwgbWVzc2FnZTogJ+W3suWPlua2iOmZhOS7tuS4iuS8oCcgfSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUuc3BsaWNlKGZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIC8vIGNhc2UgJ2NhbmNlbCc6XHJcbiAgICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgICAgLy8gY29uc3QgaWQgPSBldmVudC5pZCB8fCBudWxsO1xyXG4gICAgICAgICAgLy8gaWYgKCFpZCkge1xyXG4gICAgICAgICAgLy8gICByZXR1cm47XHJcbiAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAvLyBjb25zdCBzdWJzID0gdGhpcy5zdWJzLmZpbHRlcihzdWIgPT4gc3ViLmlkID09PSBpZCk7XHJcbiAgICAgICAgICAvLyBzdWJzLmZvckVhY2goc3ViID0+IHtcclxuICAgICAgICAgIC8vICAgaWYgKHN1Yi5zdWIpIHtcclxuICAgICAgICAgIC8vICAgICBzdWIuc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAvLyAgICAgY29uc3QgZmlsZUluZGV4ID0gdGhpcy5xdWV1ZS5maW5kSW5kZXgoZmlsZSA9PiBmaWxlLmlkID09PSBpZCk7XHJcbiAgICAgICAgICAvLyAgICAgaWYgKGZpbGVJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgIC8vICAgICAgIHRoaXMucXVldWVbZmlsZUluZGV4XS5wcm9ncmVzcy5zdGF0dXMgPSBVcGxvYWRTdGF0dXMuQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgLy8gICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoeyB0eXBlOiAnY2FuY2VsbGVkJywgZmlsZTogdGhpcy5xdWV1ZVtmaWxlSW5kZXhdIH0pO1xyXG4gICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgIC8vICAgfVxyXG4gICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICAvLyBjYXNlICdjYW5jZWxBbGwnOlxyXG4gICAgICAgIC8vICAgdGhpcy5zdWJzLmZvckVhY2goc3ViID0+IHtcclxuICAgICAgICAvLyAgICAgaWYgKHN1Yi5zdWIpIHtcclxuICAgICAgICAvLyAgICAgICBzdWIuc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuXHJcbiAgICAgICAgLy8gICAgIGNvbnN0IGZpbGUgPSB0aGlzLnF1ZXVlLmZpbmQodXBsb2FkRmlsZSA9PiB1cGxvYWRGaWxlLmlkID09PSBzdWIuaWQpO1xyXG4gICAgICAgIC8vICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgIC8vICAgICAgIGZpbGUucHJvZ3Jlc3Muc3RhdHVzID0gVXBsb2FkU3RhdHVzLkNhbmNlbGxlZDtcclxuICAgICAgICAvLyAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMuZW1pdCh7IHR5cGU6ICdjYW5jZWxsZWQnLCBmaWxlOiBmaWxlIH0pO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICB9KTtcclxuICAgICAgICAvLyAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2hpZGUnOlxyXG4gICAgICAgICAgaWYgKCFldmVudC5pZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsZXQgaWRzID0gZXZlbnQuaWQuc3BsaXQoJywnKTtcclxuICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihmaWxlID0+IHtcclxuICAgICAgICAgICAgbGV0IHRJbmRleCA9IGlkcy5maW5kSW5kZXgodElkID0+IHRJZCA9PSBmaWxlLmlkKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRJbmRleCA+IC0xID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjYW5jZWxBbGwnOlxyXG4gICAgICAgICAgLy8g5Y+W5raI77yM55u05o6l5LuO6Zif5YiX5Lit56e76Zmk77yM5LiN55So5L+u5pS554q25oCBXHJcbiAgICAgICAgICBjb25zdCBxdWV1ZUZpbGVzID0gdGhpcy5xdWV1ZS5maWx0ZXIodXBsb2FkRmlsZSA9PiB1cGxvYWRGaWxlLnByb2dyZXNzLnN0YXR1cyA9PT0gVXBsb2FkU3RhdHVzLlF1ZXVlKTtcclxuICAgICAgICAgIGlmIChxdWV1ZUZpbGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMuZW1pdCh7IHR5cGU6ICdjYW5jZWxsZWQnLCBmaWxlczogcXVldWVGaWxlcywgbWVzc2FnZTogJ+W3suWPlua2iOmZhOS7tuS4iuS8oCcgfSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcih1cGxvYWRGaWxlID0+IHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3RhdHVzICE9IFVwbG9hZFN0YXR1cy5RdWV1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZW1vdmUnOlxyXG4gICAgICAgICAgaWYgKCFldmVudC5pZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCByZW1vdmVJbmRleCA9IHRoaXMucXVldWUuZmluZEluZGV4KGZpbGUgPT4gZmlsZS5pZCA9PT0gZXZlbnQuaWQpO1xyXG4gICAgICAgICAgaWYgKHJlbW92ZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAvLyDlvpfmnInkuKrlvIDlp4vliKDpmaTlkozlt7Lnu4/liKDpmaRcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZVtyZW1vdmVJbmRleF0ucHJvZ3Jlc3Muc3RhdHVzID0gVXBsb2FkU3RhdHVzLlJlbW92ZVxyXG4gICAgICAgICAgICB0aGlzLnVwbG9hZFNjaGVkdWxlci5uZXh0KHsgZmlsZXM6IFt0aGlzLnF1ZXVlW3JlbW92ZUluZGV4XV0sIGV2ZW50OiBldmVudCwgZmlsZTogbnVsbCB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JlbW92ZUFsbCc6XHJcbiAgICAgICAgICBjb25zdCByZW1vdmVRdWV1ZUZpbGVzID0gdGhpcy5xdWV1ZS5maWx0ZXIodXBsb2FkRmlsZSA9PiB1cGxvYWRGaWxlLnByb2dyZXNzLnN0YXR1cyA9PT0gVXBsb2FkU3RhdHVzLlF1ZXVlKTtcclxuICAgICAgICAgIGlmIChyZW1vdmVRdWV1ZUZpbGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMuZW1pdCh7IHR5cGU6ICdjYW5jZWxsZWQnLCBmaWxlczogcmVtb3ZlUXVldWVGaWxlcywgbWVzc2FnZTogJ+WIoOmZpOmZhOS7tuaIkOWKnycgfSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcih1cGxvYWRGaWxlID0+IHVwbG9hZEZpbGUucHJvZ3Jlc3Muc3RhdHVzICE9IFVwbG9hZFN0YXR1cy5RdWV1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyDmraPlnKjkuIrkvKDnmoTpmYTku7bmmK/lpoLkvZXlpITnkIZcclxuICAgICAgICAgIC8vIGNvbnN0IGRvbmVGaWxlcyA9IHRoaXMucXVldWUuZmlsdGVyKHVwbG9hZEZpbGUgPT4gdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5Eb25lKTtcclxuICAgICAgICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBldmVudC50eXBlID0gJ3JlbW92ZSc7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUubWFwKGl0ZW0gPT4gaXRlbS5wcm9ncmVzcy5zdGF0dXMgPSBVcGxvYWRTdGF0dXMuUmVtb3ZlKTtcclxuICAgICAgICAgICAgdGhpcy51cGxvYWRTY2hlZHVsZXIubmV4dCh7IGZpbGVzOiB0aGlzLnF1ZXVlLCBldmVudDogZXZlbnQsIGZpbGU6IG51bGwgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRFeHRlbmRTZXJ2ZXJDb25maWcoZXh0ZW5kU2VyKSB7XHJcbiAgICB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyA9IGV4dGVuZFNlcjtcclxuICB9XHJcblxyXG4gIHNlcnZlck1ldGhvZCh1cGxvYWQ6IHsgZmlsZTogVXBsb2FkRmlsZSwgZXZlbnQ6IFVwbG9hZElucHV0LCBmaWxlcz86IFVwbG9hZEZpbGVbXSB9KTogT2JzZXJ2YWJsZTxVcGxvYWRPdXRwdXQ+IHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XHJcbiAgICAgIGxldCBzdWI7XHJcbiAgICAgIGxldCBpZHMgPSB1cGxvYWQuZmlsZXMubWFwKGZpbGVJdGVtID0+IGZpbGVJdGVtLmlkKTtcclxuICAgICAgc3dpdGNoICh1cGxvYWQuZXZlbnQudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3VwbG9hZCc6XHJcbiAgICAgICAgICBzdWIgPSB0aGlzLnVwbG9hZCh1cGxvYWQuZmlsZXMsIHVwbG9hZC5ldmVudCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdtdWx0aXBhcnRVcGxvYWQnOlxyXG4gICAgICAgICAgc3ViPXRoaXMubXVsdGlwYXJ0VXBsb2FkKHVwbG9hZC5maWxlc1swXSwgdXBsb2FkLmV2ZW50KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vIGNhc2UgJ3VwbG9hZEFsbCc6XHJcbiAgICAgICAgLy8gICBpZHMgPSB1cGxvYWQuZmlsZXMubWFwKGZpbGVJdGVtID0+IGZpbGVJdGVtLmlkKTtcclxuICAgICAgICAvLyAgIHN1YiA9IHRoaXMudXBsb2FkQWxsKHVwbG9hZC5maWxlcywgdXBsb2FkLmV2ZW50KTtcclxuICAgICAgICAvLyAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JlbW92ZSc6XHJcbiAgICAgICAgICBzdWIgPSB0aGlzLnJlbW92ZSh1cGxvYWQuZmlsZXMsIHVwbG9hZC5ldmVudCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICAvLyBjYXNlICdyZW1vdmVBbGwnOlxyXG4gICAgICAgIC8vICAgaWRzID0gdXBsb2FkLmZpbGVzLm1hcChmaWxlSXRlbSA9PiBmaWxlSXRlbS5pZCk7XHJcbiAgICAgICAgLy8gICBzdWIgPSB0aGlzLnJlbW92ZUFsbCh1cGxvYWQuZmlsZXMsIHVwbG9hZC5ldmVudCk7XHJcbiAgICAgICAgLy8gICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgc3ViID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBzdWIucGlwZShmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgICAgLy8gZGVidWdnZXI7XHJcbiAgICAgICAgaWYgKCFvYnNlcnZlci5jbG9zZWQpIHtcclxuICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSlcclxuICAgICAgICAuc3Vic2NyaWJlKG91dHB1dCA9PiB7XHJcbiAgICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICAgIG9ic2VydmVyLm5leHQob3V0cHV0KTtcclxuICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dChlcnIpO1xyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIHRoaXMuc3Vicy5wdXNoKHsgaWRzOiBpZHMsIHN1Yjogc3ViLCBpZDogJycgfSk7XHJcbiAgICAgIC8vIHN3aXRjaCAodXBsb2FkLmV2ZW50LnR5cGUpIHtcclxuICAgICAgLy8gICBjYXNlICd1cGxvYWRBbGwnOlxyXG4gICAgICAvLyAgICAgdGhpcy5zdWJzLnB1c2goeyBpZHM6IGlkcywgc3ViOiBzdWIsIGlkOiAnJyB9KTtcclxuICAgICAgLy8gICAgIGJyZWFrO1xyXG4gICAgICAvLyAgIGNhc2UgJ3JlbW92ZUFsbCc6XHJcbiAgICAgIC8vICAgICB0aGlzLnN1YnMucHVzaCh7IGlkczogaWRzLCBzdWI6IHN1YiwgaWQ6ICcnIH0pO1xyXG4gICAgICAvLyAgICAgYnJlYWs7XHJcbiAgICAgIC8vICAgZGVmYXVsdDpcclxuXHJcbiAgICAgIC8vIH1cclxuXHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Y2V5Liq5paH5Lu25LiK5LygXHJcbiAgICogQHBhcmFtIGZpbGUgXHJcbiAgICogQHBhcmFtIGV2ZW50IFxyXG4gICAqL1xyXG4gIC8vIHVwbG9hZEZpbGUoZmlsZTogVXBsb2FkRmlsZSwgZXZlbnQ6IFVwbG9hZElucHV0KTogT2JzZXJ2YWJsZTxVcGxvYWRPdXRwdXQ+IHtcclxuICAvLyAgIGNvbnN0IHVwbG9hZEZpbGUgPSA8QmxvYkZpbGU+ZmlsZS5uYXRpdmVGaWxlO1xyXG4gIC8vICAgY29uc3QgdXBsb2FkSW5kZXggPSB0aGlzLnF1ZXVlLmZpbmRJbmRleChvdXRGaWxlID0+IG91dEZpbGUubmF0aXZlRmlsZSA9PT0gdXBsb2FkRmlsZSk7XHJcblxyXG4gIC8vICAgLy8g5bey57uP6KKr5Y+W5raI55qE5LiN6IO96KKr5LiK5LygXHJcbiAgLy8gICBpZiAodGhpcy5xdWV1ZVt1cGxvYWRJbmRleF0ucHJvZ3Jlc3Muc3RhdHVzID09PSBVcGxvYWRTdGF0dXMuQ2FuY2VsbGVkKSB7XHJcbiAgLy8gICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XHJcbiAgLy8gICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAvLyAgICAgfSk7XHJcbiAgLy8gICB9XHJcbiAgLy8gICAvLyDmipvlh7rlvIDlp4vkuIrkvKDnmoTkuovku7ZcclxuICAvLyAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHsgdHlwZTogJ3N0YXJ0JywgZmlsZXM6IFtmaWxlXSB9KTtcclxuICAvLyAgIHJldHVybiB0aGlzLnVwbG9hZFNlcnZlclNlci51cGxvYWQoZmlsZSwgZXZlbnQsIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICAvLyB9XHJcbiAgbXVsdGlwYXJ0VXBsb2FkKGZpbGU6IFVwbG9hZEZpbGUsIGV2ZW50OiBVcGxvYWRJbnB1dCk6IE9ic2VydmFibGU8VXBsb2FkT3V0cHV0PiB7XHJcbiAgICAvLyDmipvlh7rlvIDlp4vkuIrkvKDnmoTkuovku7ZcclxuICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHsgdHlwZTogJ3N0YXJ0JywgZmlsZXM6IFtmaWxlXSB9KTtcclxuICAgIHJldHVybiB0aGlzLnVwbG9hZFNlcnZlclNlci5tdWx0aXBhcnRVcGxvYWQoZmlsZSwgZXZlbnQsIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICB9XHJcbiAgdXBsb2FkKGZpbGVzOiBVcGxvYWRGaWxlW10sIGV2ZW50OiBVcGxvYWRJbnB1dCk6IE9ic2VydmFibGU8VXBsb2FkT3V0cHV0PiB7XHJcbiAgICAvLyDmipvlh7rlvIDlp4vkuIrkvKDnmoTkuovku7ZcclxuICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHsgdHlwZTogJ3N0YXJ0JywgZmlsZXM6IGZpbGVzIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMudXBsb2FkU2VydmVyU2VyLnVwbG9hZChmaWxlcywgZXZlbnQsIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZShmaWxlczogVXBsb2FkRmlsZVtdLCBldmVudDogVXBsb2FkSW5wdXQpOiBPYnNlcnZhYmxlPFVwbG9hZE91dHB1dD4ge1xyXG4gICAgcmV0dXJuIHRoaXMudXBsb2FkU2VydmVyU2VyLnJlbW92ZShmaWxlcywgZXZlbnQsIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICB9XHJcbiAgLy8gcmVtb3ZlQWxsKGZpbGVzOiBVcGxvYWRGaWxlW10sIGV2ZW50OiBVcGxvYWRJbnB1dCk6IE9ic2VydmFibGU8VXBsb2FkT3V0cHV0PiB7XHJcbiAgLy8gICByZXR1cm4gdGhpcy51cGxvYWRTZXJ2ZXJTZXIucmVtb3ZlQWxsKGZpbGVzLCBldmVudCwgdGhpcy5leHRlbmRTZXJ2ZXJDb25maWcpO1xyXG4gIC8vIH1cclxuICAvLyDph43nva5cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgIC8vdGhpcy51cGxvYWRTY2hlZHVsZXIgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgLy8gdGhpcy5zdWJzLmZvckVhY2goc3ViID0+IHtcclxuICAgIC8vICAgaWYgKHN1Yi5zdWIpIHtcclxuICAgIC8vICAgICBzdWIuc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH0pO1xyXG4gICAgdGhpcy5zdWJzID0gW107XHJcbiAgfVxyXG5cclxuICAvLyDmmoLml7ZcclxuICBzZXRDb250ZW50VHlwZXMoY29udGVudFR5cGVzOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgaWYgKHR5cGVvZiBjb250ZW50VHlwZXMgIT09ICd1bmRlZmluZWQnICYmIGNvbnRlbnRUeXBlcyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIGlmIChjb250ZW50VHlwZXMuZmluZCgodHlwZTogc3RyaW5nKSA9PiB0eXBlID09PSAnKicpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLmFsbG93ZWRDb250ZW50VHlwZXMgPSBbJyonXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmFsbG93ZWRDb250ZW50VHlwZXMgPSBjb250ZW50VHlwZXM7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hbGxvd2VkQ29udGVudFR5cGVzID0gWycqJ107XHJcbiAgfVxyXG5cclxuICBhbGxDb250ZW50VHlwZXNBbGxvd2VkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWxsb3dlZENvbnRlbnRUeXBlcy5maW5kKCh0eXBlOiBzdHJpbmcpID0+IHR5cGUgPT09ICcqJykgIT09IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIG5hbWUgXHJcbiAgICovXHJcbiAgaXNDb250ZW50VHlwZUFsbG93ZWQobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5hbGxDb250ZW50VHlwZXNBbGxvd2VkKCkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyDpmYTku7bmsqHmnInlkI7nvIBcclxuICAgIGlmIChuYW1lLmxhc3RJbmRleE9mKCcuJykgPCAwKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGxldCBuYW1lc3VmZml4ID0gbmFtZS5zdWJzdHIobmFtZS5sYXN0SW5kZXhPZignLicpKTtcclxuICAgIC8vIOeugOWMluiuoeeul1xyXG4gICAgcmV0dXJuIHRoaXMuYWxsb3dlZENvbnRlbnRUeXBlcy5maW5kSW5kZXgoaXRlbSA9PiAgaXRlbS50b0xvd2VyQ2FzZSgpID09IG5hbWVzdWZmaXgudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuICB9XHJcblxyXG4gIGlzRmlsZVNpemVBbGxvd2VkKGZpbGVTaXplOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5tYXhGaWxlU2l6ZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIGZpbGVTaXpl5pivYuWNleS9jSBtYXhGaWxlU2l6ZeaYr01C5Y2V5L2NXHJcbiAgICByZXR1cm4gZmlsZVNpemUgPD0gdGhpcy5tYXhGaWxlU2l6ZSAqIDggKiAxMDI0ICogMTAyNDtcclxuICB9XHJcbn1cclxuIl19