/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-07-29 08:14:22
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-10 15:11:09
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import PerfectScrollbar from 'perfect-scrollbar';
import ResizeObserver from 'resize-observer-polyfill';
import { Subject, fromEvent } from 'rxjs';
import { auditTime, takeUntil } from 'rxjs/operators';
import { NgZone, Inject, Optional, ElementRef, Directive, Input, Output, EventEmitter, KeyValueDiffers } from '@angular/core';
import { Geometry, Position } from './scrollbar.interfaces';
import { SCROLLBAR_CONFIG, ScrollbarConfig, ScrollbarEvents } from './scrollbar.interfaces';
export class ScrollbarDirective {
    /**
     * @param {?} zone
     * @param {?} differs
     * @param {?} elementRef
     * @param {?} platformId
     * @param {?} defaults
     */
    constructor(zone, differs, elementRef, platformId, defaults) {
        this.zone = zone;
        this.differs = differs;
        this.elementRef = elementRef;
        this.platformId = platformId;
        this.defaults = defaults;
        this.instance = null;
        this.ro = null;
        this.timeout = null;
        this.animation = null;
        this.configDiff = null;
        this.ngDestroy = new Subject();
        this.disabled = false;
        this.psScrollY = new EventEmitter();
        this.psScrollX = new EventEmitter();
        this.psScrollUp = new EventEmitter();
        this.psScrollDown = new EventEmitter();
        this.psScrollLeft = new EventEmitter();
        this.psScrollRight = new EventEmitter();
        this.psYReachEnd = new EventEmitter();
        this.psYReachStart = new EventEmitter();
        this.psXReachEnd = new EventEmitter();
        this.psXReachStart = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.disabled && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const config = new ScrollbarConfig(this.defaults);
            config.assign(this.config); // Custom configuration
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.instance = new PerfectScrollbar(this.elementRef.nativeElement, config);
                }));
            }));
            if (!this.configDiff) {
                this.configDiff = this.differs.find(this.config || {}).create();
                this.configDiff.diff(this.config || {});
            }
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.ro = new ResizeObserver((/**
                 * @return {?}
                 */
                () => {
                    this.update();
                }));
                if (this.elementRef.nativeElement.children[0]) {
                    this.ro.observe(this.elementRef.nativeElement.children[0]);
                }
                this.ro.observe(this.elementRef.nativeElement);
            }));
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                ScrollbarEvents.forEach((/**
                 * @param {?} eventName
                 * @return {?}
                 */
                (eventName) => {
                    /** @type {?} */
                    const eventType = eventName.replace(/([A-Z])/g, (/**
                     * @param {?} c
                     * @return {?}
                     */
                    (c) => `-${c.toLowerCase()}`));
                    if (eventName.indexOf('X') > -1 || eventName.indexOf('Left') > -1 || eventName.indexOf('Right') > -1) {
                        fromEvent(this.elementRef.nativeElement, eventType).subscribe((/**
                         * @param {?} event
                         * @return {?}
                         */
                        (event) => {
                            this[eventName].emit(event);
                        }));
                    }
                    else {
                        fromEvent(this.elementRef.nativeElement, eventType).pipe(
                        // debounceTime(20),
                        // throttle(ev => interval(20)),
                        auditTime(20), // auditTime 静默指定的时间，在此时间内忽略所有发出的值，时间过后，发出最新的值
                        takeUntil(this.ngDestroy))
                            .subscribe((/**
                         * @param {?} event
                         * @return {?}
                         */
                        (event) => {
                            this[eventName].emit(event);
                        }));
                    }
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // this.zone.runOutsideAngular(() => {
        //     this.instance = new PerfectScrollbar(this.elementRef.nativeElement, this.config);
        // });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (isPlatformBrowser(this.platformId)) {
            this.ngDestroy.next();
            this.ngDestroy.complete();
            if (this.ro) {
                this.ro.disconnect();
            }
            if (this.timeout && typeof window !== 'undefined') {
                window.clearTimeout(this.timeout);
            }
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                if (this.instance) {
                    this.instance.destroy();
                }
            }));
            this.instance = null;
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (!this.disabled && this.configDiff && isPlatformBrowser(this.platformId)) {
            /** @type {?} */
            const changes = this.configDiff.diff(this.config || {});
            if (changes) {
                this.ngOnDestroy();
                this.ngOnInit();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['disabled'] && !changes['disabled'].isFirstChange() && isPlatformBrowser(this.platformId)) {
            if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {
                if (changes['disabled'].currentValue === true) {
                    this.ngOnDestroy();
                }
                else if (changes['disabled'].currentValue === false) {
                    this.ngOnInit();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ps() {
        return this.instance;
    }
    /**
     * @return {?}
     */
    update() {
        if (typeof window !== 'undefined') {
            if (this.timeout) {
                window.clearTimeout(this.timeout);
            }
            this.timeout = window.setTimeout((/**
             * @return {?}
             */
            () => {
                if (!this.disabled && this.configDiff) {
                    try {
                        this.zone.runOutsideAngular((/**
                         * @return {?}
                         */
                        () => {
                            if (this.instance) {
                                this.instance.update();
                            }
                        }));
                    }
                    catch (error) {
                        // Update can be finished after destroy so catch errors
                    }
                }
            }), 0);
        }
    }
    /**
     * @param {?=} prefix
     * @return {?}
     */
    geometry(prefix = 'scroll') {
        return new Geometry(this.elementRef.nativeElement[prefix + 'Left'], this.elementRef.nativeElement[prefix + 'Top'], this.elementRef.nativeElement[prefix + 'Width'], this.elementRef.nativeElement[prefix + 'Height']);
    }
    /**
     * @param {?=} absolute
     * @return {?}
     */
    position(absolute = false) {
        if (!absolute && this.instance) {
            return new Position(this.instance.reach.x || 0, this.instance.reach.y || 0);
        }
        else {
            return new Position(this.elementRef.nativeElement.scrollLeft, this.elementRef.nativeElement.scrollTop);
        }
    }
    /**
     * @param {?=} direction
     * @return {?}
     */
    scrollable(direction = 'any') {
        /** @type {?} */
        const element = this.elementRef.nativeElement;
        if (direction === 'any') {
            return element.classList.contains('ps--active-x') ||
                element.classList.contains('ps--active-y');
        }
        else if (direction === 'both') {
            return element.classList.contains('ps--active-x') &&
                element.classList.contains('ps--active-y');
        }
        else {
            return element.classList.contains('ps--active-' + direction);
        }
    }
    /**
     * @param {?} x
     * @param {?=} y
     * @param {?=} speed
     * @return {?}
     */
    scrollTo(x, y, speed) {
        if (!this.disabled) {
            if (y == null && speed == null) {
                this.animateScrolling('scrollTop', x, speed);
            }
            else {
                if (x != null) {
                    this.animateScrolling('scrollLeft', x, speed);
                }
                if (y != null) {
                    this.animateScrolling('scrollTop', y, speed);
                }
            }
        }
    }
    /**
     * @param {?} x
     * @param {?=} speed
     * @return {?}
     */
    scrollToX(x, speed) {
        this.animateScrolling('scrollLeft', x, speed);
    }
    /**
     * @param {?} y
     * @param {?=} speed
     * @return {?}
     */
    scrollToY(y, speed) {
        this.animateScrolling('scrollTop', y, speed);
    }
    /**
     * @param {?=} offset
     * @param {?=} speed
     * @return {?}
     */
    scrollToTop(offset, speed) {
        this.animateScrolling('scrollTop', (offset || 0), speed);
    }
    /**
     * @param {?=} offset
     * @param {?=} speed
     * @return {?}
     */
    scrollToLeft(offset, speed) {
        this.animateScrolling('scrollLeft', (offset || 0), speed);
    }
    /**
     * @param {?=} offset
     * @param {?=} speed
     * @return {?}
     */
    scrollToRight(offset, speed) {
        /** @type {?} */
        const left = this.elementRef.nativeElement.scrollWidth -
            this.elementRef.nativeElement.clientWidth;
        this.animateScrolling('scrollLeft', left - (offset || 0), speed);
    }
    /**
     * @param {?=} offset
     * @param {?=} speed
     * @return {?}
     */
    scrollToBottom(offset, speed) {
        /** @type {?} */
        const top = this.elementRef.nativeElement.scrollHeight -
            this.elementRef.nativeElement.clientHeight;
        this.animateScrolling('scrollTop', top - (offset || 0), speed);
    }
    /**
     * @param {?} qs
     * @param {?=} offset
     * @param {?=} speed
     * @return {?}
     */
    scrollToElement(qs, offset, speed) {
        /** @type {?} */
        const element = this.elementRef.nativeElement.querySelector(qs);
        if (element) {
            /** @type {?} */
            const elementPos = element.getBoundingClientRect();
            /** @type {?} */
            const scrollerPos = this.elementRef.nativeElement.getBoundingClientRect();
            if (this.elementRef.nativeElement.classList.contains('ps--active-x')) {
                /** @type {?} */
                const currentPos = this.elementRef.nativeElement['scrollLeft'];
                /** @type {?} */
                const position = elementPos.left - scrollerPos.left + currentPos;
                this.animateScrolling('scrollLeft', position + (offset || 0), speed);
            }
            if (this.elementRef.nativeElement.classList.contains('ps--active-y')) {
                /** @type {?} */
                const currentPos = this.elementRef.nativeElement['scrollTop'];
                /** @type {?} */
                const position = elementPos.top - scrollerPos.top + currentPos;
                this.animateScrolling('scrollTop', position + (offset || 0), speed);
            }
        }
    }
    /**
     * @private
     * @param {?} target
     * @param {?} value
     * @param {?=} speed
     * @return {?}
     */
    animateScrolling(target, value, speed) {
        if (this.animation) {
            window.cancelAnimationFrame(this.animation);
            this.animation = null;
        }
        if (!speed || typeof window === 'undefined') {
            this.elementRef.nativeElement[target] = value;
        }
        else if (value !== this.elementRef.nativeElement[target]) {
            /** @type {?} */
            let newValue = 0;
            /** @type {?} */
            let scrollCount = 0;
            /** @type {?} */
            let oldTimestamp = performance.now();
            /** @type {?} */
            let oldValue = this.elementRef.nativeElement[target];
            /** @type {?} */
            const cosParameter = (oldValue - value) / 2;
            /** @type {?} */
            const step = (/**
             * @param {?} newTimestamp
             * @return {?}
             */
            (newTimestamp) => {
                scrollCount += Math.PI / (speed / (newTimestamp - oldTimestamp));
                newValue = Math.round(value + cosParameter + cosParameter * Math.cos(scrollCount));
                // Only continue animation if scroll position has not changed
                if (this.elementRef.nativeElement[target] === oldValue) {
                    if (scrollCount >= Math.PI) {
                        this.animateScrolling(target, value, 0);
                    }
                    else {
                        this.elementRef.nativeElement[target] = newValue;
                        // On a zoomed out page the resulting offset may differ
                        oldValue = this.elementRef.nativeElement[target];
                        oldTimestamp = newTimestamp;
                        this.animation = window.requestAnimationFrame(step);
                    }
                }
            });
            window.requestAnimationFrame(step);
        }
    }
}
ScrollbarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scrollbar]',
                exportAs: 'ngxScrollbar'
            },] }
];
/** @nocollapse */
ScrollbarDirective.ctorParameters = () => [
    { type: NgZone },
    { type: KeyValueDiffers },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SCROLLBAR_CONFIG,] }] }
];
ScrollbarDirective.propDecorators = {
    disabled: [{ type: Input }],
    config: [{ type: Input, args: ['scrollbar',] }],
    psScrollY: [{ type: Output }],
    psScrollX: [{ type: Output }],
    psScrollUp: [{ type: Output }],
    psScrollDown: [{ type: Output }],
    psScrollLeft: [{ type: Output }],
    psScrollRight: [{ type: Output }],
    psYReachEnd: [{ type: Output }],
    psYReachStart: [{ type: Output }],
    psXReachEnd: [{ type: Output }],
    psXReachStart: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ScrollbarDirective.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.timeout;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.animation;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.configDiff;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.ngDestroy;
    /** @type {?} */
    ScrollbarDirective.prototype.disabled;
    /** @type {?} */
    ScrollbarDirective.prototype.config;
    /** @type {?} */
    ScrollbarDirective.prototype.psScrollY;
    /** @type {?} */
    ScrollbarDirective.prototype.psScrollX;
    /** @type {?} */
    ScrollbarDirective.prototype.psScrollUp;
    /** @type {?} */
    ScrollbarDirective.prototype.psScrollDown;
    /** @type {?} */
    ScrollbarDirective.prototype.psScrollLeft;
    /** @type {?} */
    ScrollbarDirective.prototype.psScrollRight;
    /** @type {?} */
    ScrollbarDirective.prototype.psYReachEnd;
    /** @type {?} */
    ScrollbarDirective.prototype.psYReachStart;
    /** @type {?} */
    ScrollbarDirective.prototype.psXReachEnd;
    /** @type {?} */
    ScrollbarDirective.prototype.psXReachStart;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.differs;
    /** @type {?} */
    ScrollbarDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    ScrollbarDirective.prototype.defaults;
}
//# sourceMappingURL=data:application/json;base64,