/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, ChangeDetectorRef, Inject, Renderer2, forwardRef, ChangeDetectionStrategy, ViewEncapsulation, Input, Injector, ViewChild, HostBinding, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatalistComponent } from '@farris/ui-datalist';
import { BaseComboComponent } from './base-combo.component';
import { ComboService } from './combo.service';
/** @type {?} */
export const INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => ComboListComponent)),
    multi: true
};
export class ComboListComponent extends BaseComboComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        super(el, cdr, document, render, comboService, injector);
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        /**
         * 显示面板方式： click | focus, 默认： click
         */
        this.showPanelType = 'click';
        this.cls = true;
        this.filterData = [];
    }
    /**
     * @return {?}
     */
    get clsTag() {
        return this.viewType === 'tag';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (this.multiSelect) {
            this.enableCancelSelected = this.multiSelect;
        }
        this.remoteSearch = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /**
         * 如果直接绑定一个数组作为列表数据并且 data 是异步数据，需要此方法，同步displayText与selectedValues
         */
        if (changes.data && !changes.data.firstChange && !this.uri) {
            /** @type {?} */
            const datas = changes.data.currentValue;
            /** @type {?} */
            const val = this.selectedValues || this.displayText;
            if (val !== undefined && val !== null && datas && datas.length > 0) {
                /** @type {?} */
                const textArr = this.filterSelections(val, this.data);
                this.displayText = textArr.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => !!v)).join(this.separator);
                this.updateSelections(val, this.data);
                this.comboService.selections$.next({ action: 'initData' });
            }
            else {
                this.selections = [];
                this.displayText = '';
            }
        }
        // if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
        //     this.enableCancelSelected = this.multiSelect;
        // }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    registerKeyboardEvent($event) {
        if (this.multiSelect || (this.readonly || this.disabled)) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown' ||
            (!this.editable && !this.readonly && !this.disabled && $event.code === 'Space')) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        const selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            this.comboService.selectItem(data[index], index, false);
            /** @type {?} */
            const params = { data: data[index], index };
            if (this.isOpen) {
                this.scrollToCurrentItem(index);
            }
            this.updateSelectValues(params);
        });
        /** @type {?} */
        let data = this.filterData && this.filterData.length ? this.filterData : this.data;
        if (!this['_cmbPanel']) {
            data = this.data;
        }
        if ($event.code === 'ArrowUp') { // up
            if (this.selectedValues) {
                /** @type {?} */
                const idx = data.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => this.commonUtils.getValue(this.idField, n) === this.selectedValues));
                /** @type {?} */
                let prevIdx = idx - 1;
                if (prevIdx < 0) {
                    prevIdx = data.length - 1;
                }
                selectItem(prevIdx);
            }
        }
        if ($event.code === 'ArrowDown' || ($event.code === 'Space' && !this.editable)) { // down
            // down
            /** @type {?} */
            const idx = data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => this.commonUtils.getValue(this.idField, n) === this.selectedValues));
            /** @type {?} */
            let nextIdx = idx + 1;
            if (nextIdx >= data.length) {
                nextIdx = 0;
            }
            selectItem(nextIdx);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    escHandlerEvent($event) {
        if (this.isOpen) {
            this.hide(false);
        }
    }
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    onSelectionsChange(v) {
        if (this.uri) {
            if (this.selections && this.selections.length) {
                this.selectedValues = this.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField])).join(this.separator);
            }
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?=} emitEvent
     * @return {?}
     */
    updateSelectValues(item, emitEvent = true) {
        const { data, index } = Object.assign({}, item);
        this.comboService.selectItem(data, index);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        if (!this.multiSelect) {
            this.selectedValues = data[this.idField];
        }
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        if (emitEvent) {
            this.selectChange.emit({ data, index, instance: this, selections: this.selections });
            this.cdr.markForCheck();
            this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    scrollToCurrentItem(index) {
        /** @type {?} */
        const ulEl = this.dataListRef.el.nativeElement.querySelector('ul.list-group');
        if (ulEl && ulEl.children && ulEl.children[index]) {
            ulEl.children[index].scrollIntoView({ block: 'nearest' });
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) {
        this.updateSelectValues(item, true);
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUnSelected(value) {
        const { data } = Object.assign({}, value);
        this.comboService.unSelectItem(data);
        if (this.dataListRef) {
            this.selectedValues = this.dataListRef.selectedValues;
        }
        // if (!this.multiSelect) {
        //     this.selectedValues = data[this.idField];
        // }
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.cdr.markForCheck();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnter(event) {
        if (this.isOpen) {
            this.hide();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeyup($event) {
        // console.log('key up', $event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydown($event) {
        // console.log('key down', $event);
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (this.showPanelType === 'focus') {
            this.show();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    removeSelectItem($event, item) {
        if ($event) {
            $event.stopPropagation();
        }
        this.comboService.unSelectItem(item);
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        this.cdr.detectChanges();
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    }
    /**
     * @protected
     * @return {?}
     */
    initDatasChangeAction() {
        this.comboService.data$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.filterData = data;
        }));
    }
}
ComboListComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-combo-list',
                template: "<input-group *ngIf=\"!viewType || viewType === 'text'\"\r\n    #input\r\n    [attr.title]=\"enableTitle? displayText: ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear] = \"enableClear\"\r\n    [maxLength]=\"maxLength\"\r\n    (clickHandle)=\"onClick($event)\"\r\n    (enterHandle)=\"onEnter($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    style=\"display: block;\">\r\n</input-group>\r\n\r\n<div #input2 class=\"f-cmp-inputgroup\" *ngIf=\"viewType === 'tag'\" (click)=\"onClick($event)\" [attr.title]=\"displayText\">\r\n    <div class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\">\r\n        <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\">\r\n            <div class=\"multi--content\">\r\n                <span class=\"multi--item\" *ngFor=\"let it of selections\" >\r\n                    {{it[textField]}}\r\n                    <i class=\"f-icon multi--close\" *ngIf=\"!readonly && !disabled \" (click)=\"removeSelectItem($event, it)\"></i>\r\n                </span>\r\n            </div>\r\n            <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n                <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group-append\" >\r\n            <span class=\"input-group-text input-group-clear ng-star-inserted\" style=\"display: none;\">\r\n                <i class=\"f-icon modal_close\"></i>\r\n            </span>\r\n            <span class=\"input-group-text ng-star-inserted\" (click)=\"onClick($event)\">\r\n                <span class=\"f-icon f-icon-arrow-60-down\"></span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\" style=\"z-index: 99999\"  #comboPanel>\r\n    <farris-datalist\r\n        #dl\r\n        [itemHeight]=\"itemHeight\"\r\n        [height]=\"panelHeight\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [idField]=\"idField\"\r\n        [multiSelect]=\"multiSelect\"\r\n        [selectedValues]=\"selectedValuesStr\"\r\n        [valueField]=\"valueField\"\r\n        [textField]=\"textField\"\r\n        [enableCancelSelected]=\"enableCancelSelected\"\r\n        (selected)=\"onSelect($event)\"\r\n        (unSelected)=\"onUnSelected($event)\"\r\n        [separator]=\"separator\"\r\n        style=\"position: relative;\"\r\n    >\r\n        <ng-template list-item-tmp let-item=\"data.data\" let-idx=\"index\" *ngIf=\"itemTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: { $implicit: item, index: idx }\"> </ng-container>\r\n        </ng-template>\r\n    </farris-datalist>\r\n</div>\r\n",
                // styleUrls: ['./combo-list.component.scss'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService]
            }] }
];
/** @nocollapse */
ComboListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
ComboListComponent.propDecorators = {
    itemTemplate: [{ type: Input }],
    showPanelType: [{ type: Input }],
    dataListRef: [{ type: ViewChild, args: ['dl',] }],
    itemHeight: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class.f-combo-list',] }],
    clsTag: [{ type: HostBinding, args: ['class.f-combo-list--tag',] }],
    registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    escHandlerEvent: [{ type: HostListener, args: ['keydown.esc', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ComboListComponent.prototype.itemTemplate;
    /**
     * 显示面板方式： click | focus, 默认： click
     * @type {?}
     */
    ComboListComponent.prototype.showPanelType;
    /** @type {?} */
    ComboListComponent.prototype.dataListRef;
    /** @type {?} */
    ComboListComponent.prototype.itemHeight;
    /** @type {?} */
    ComboListComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    ComboListComponent.prototype.filterData;
    /** @type {?} */
    ComboListComponent.prototype.el;
    /** @type {?} */
    ComboListComponent.prototype.cdr;
    /** @type {?} */
    ComboListComponent.prototype.document;
    /** @type {?} */
    ComboListComponent.prototype.render;
    /** @type {?} */
    ComboListComponent.prototype.comboService;
    /** @type {?} */
    ComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8tbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWNvbWJvLWxpc3QvIiwic291cmNlcyI6WyJsaWIvY29tYm8tbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUNoRyxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFvQyxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUkvQyxNQUFNLE9BQU8sMEJBQTBCLEdBQVE7SUFDM0MsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7SUFDakQsS0FBSyxFQUFFLElBQUk7Q0FDZDtBQVNELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxrQkFBa0I7Ozs7Ozs7OztJQWV0RCxZQUNXLEVBQWMsRUFDZCxHQUFzQixFQUNKLFFBQWEsRUFDL0IsTUFBaUIsRUFDakIsWUFBMEIsRUFDMUIsUUFBa0I7UUFFekIsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFQbEQsT0FBRSxHQUFGLEVBQUUsQ0FB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WUFBWTtZQU5jLFFBQVE7OzsyQkF3QnRDLEtBQUs7NEJBSUwsS0FBSzswQkFDTCxTQUFTLFNBQUMsSUFBSTt5QkFDZCxLQUFLO2tCQUNMLFdBQVcsU0FBQyxvQkFBb0I7cUJBQ2hDLFdBQVcsU0FBQyx5QkFBeUI7b0NBZ0RyQyxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDOzhCQWtEbEMsWUFBWSxTQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7OztJQTFHdkMsMENBQTJCOzs7OztJQUkzQiwyQ0FBa0Q7O0lBQ2xELHlDQUFnRDs7SUFDaEQsd0NBQTRCOztJQUM1QixpQ0FBOEM7Ozs7O0lBTTlDLHdDQUErQjs7SUFFM0IsZ0NBQXFCOztJQUNyQixpQ0FBNkI7O0lBQzdCLHNDQUFzQzs7SUFDdEMsb0NBQXdCOztJQUN4QiwwQ0FBaUM7O0lBQ2pDLHNDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmLCBJbmplY3QsIFJlbmRlcmVyMiwgZm9yd2FyZFJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXHJcbiAgICAgICAgIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgSW5qZWN0b3IsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRGF0YWxpc3RDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFsaXN0JztcclxuaW1wb3J0IHsgQmFzZUNvbWJvQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlLWNvbWJvLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNlbGVjdEl0ZW0gfSBmcm9tICcuL2NvbWJvLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IENvbWJvU2VydmljZSB9IGZyb20gJy4vY29tYm8uc2VydmljZSc7XHJcbmltcG9ydCB7IGZpbHRlciwgdGFrZSwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBLZXkgfSBmcm9tICdwcm90cmFjdG9yJztcclxuXHJcbmV4cG9ydCBjb25zdCBJTlBVVF9DT01CT19WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDb21ib0xpc3RDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1jb21iby1saXN0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb21iby1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICAgIC8vIHN0eWxlVXJsczogWycuL2NvbWJvLWxpc3QuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAgIHByb3ZpZGVyczogW0lOUFVUX0NPTUJPX1ZBTFVFX0FDQ0VTU09SLCBDb21ib1NlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb21ib0xpc3RDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tYm9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICBASW5wdXQoKSBpdGVtVGVtcGxhdGU6IGFueTtcclxuICAgIC8qKlxyXG4gICAgICog5pi+56S66Z2i5p2/5pa55byP77yaIGNsaWNrIHwgZm9jdXMsIOm7mOiupO+8miBjbGlja1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBzaG93UGFuZWxUeXBlOiAnY2xpY2snfCdmb2N1cycgPSAnY2xpY2snO1xyXG4gICAgQFZpZXdDaGlsZCgnZGwnKSBkYXRhTGlzdFJlZjogRGF0YWxpc3RDb21wb25lbnQ7XHJcbiAgICBASW5wdXQoKSBpdGVtSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmYtY29tYm8tbGlzdCcpIGNscyA9IHRydWU7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmYtY29tYm8tbGlzdC0tdGFnJylcclxuICAgIGdldCBjbHNUYWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld1R5cGUgPT09ICd0YWcnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsdGVyRGF0YTogYW55W10gPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwdWJsaWMgZG9jdW1lbnQ6IGFueSxcclxuICAgICAgICBwdWJsaWMgcmVuZGVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgcHVibGljIGNvbWJvU2VydmljZTogQ29tYm9TZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGVsLCBjZHIsIGRvY3VtZW50LCByZW5kZXIsIGNvbWJvU2VydmljZSwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlQ2FuY2VsU2VsZWN0ZWQgPSB0aGlzLm11bHRpU2VsZWN0O1xyXG4gICAgICAgfVxyXG4gICAgICAgdGhpcy5yZW1vdGVTZWFyY2ggPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5aaC5p6c55u05o6l57uR5a6a5LiA5Liq5pWw57uE5L2c5Li65YiX6KGo5pWw5o2u5bm25LiUIGRhdGEg5piv5byC5q2l5pWw5o2u77yM6ZyA6KaB5q2k5pa55rOV77yM5ZCM5q2lZGlzcGxheVRleHTkuI5zZWxlY3RlZFZhbHVlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLmRhdGEgJiYgIWNoYW5nZXMuZGF0YS5maXJzdENoYW5nZSAmJiAhdGhpcy51cmkpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YXMgPSBjaGFuZ2VzLmRhdGEuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLnNlbGVjdGVkVmFsdWVzIHx8IHRoaXMuZGlzcGxheVRleHQ7XHJcbiAgICAgICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwgJiYgZGF0YXMgJiYgZGF0YXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMuZmlsdGVyU2VsZWN0aW9ucyh2YWwsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gdGV4dEFyci5maWx0ZXIodiA9PiAhIXYpLmpvaW4odGhpcy5zZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZWxlY3Rpb25zKHZhbCwgdGhpcy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLnNlbGVjdGlvbnMkLm5leHQoe2FjdGlvbjogJ2luaXREYXRhJ30pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIChjaGFuZ2VzLm11bHRpU2VsZWN0ICYmICFjaGFuZ2VzLm11bHRpU2VsZWN0LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmVuYWJsZUNhbmNlbFNlbGVjdGVkID0gdGhpcy5tdWx0aVNlbGVjdDtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXHJcbiAgICByZWdpc3RlcktleWJvYXJkRXZlbnQoJGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0IHx8ICh0aGlzLnJlYWRvbmx5IHx8IHRoaXMuZGlzYWJsZWQpKSAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJGV2ZW50LmNvZGUgPT09ICdBcnJvd1VwJyB8fCAkZXZlbnQuY29kZSA9PT0gJ0Fycm93RG93bicgfHxcclxuICAgICAgICAgICAgKCF0aGlzLmVkaXRhYmxlICYmICF0aGlzLnJlYWRvbmx5ICYmICF0aGlzLmRpc2FibGVkICYmICRldmVudC5jb2RlID09PSAnU3BhY2UnKSkge1xyXG4gICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0SXRlbSA9IChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5zZWxlY3RJdGVtKGRhdGFbaW5kZXhdLCBpbmRleCwgZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7ZGF0YTogZGF0YVtpbmRleF0sIGluZGV4fTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvQ3VycmVudEl0ZW0oaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VsZWN0VmFsdWVzKHBhcmFtcyk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5maWx0ZXJEYXRhICYmIHRoaXMuZmlsdGVyRGF0YS5sZW5ndGggPyB0aGlzLmZpbHRlckRhdGEgOiB0aGlzLmRhdGE7XHJcblxyXG4gICAgICAgIGlmICghdGhpc1snX2NtYlBhbmVsJ10pIHtcclxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkZXZlbnQuY29kZSA9PT0gJ0Fycm93VXAnKSB7ICAvLyB1cFxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWR4ID0gZGF0YS5maW5kSW5kZXgobiA9PiB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgbikgPT09IHRoaXMuc2VsZWN0ZWRWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByZXZJZHggPSBpZHggLSAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZJZHggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldklkeCA9IGRhdGEubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGVjdEl0ZW0ocHJldklkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCRldmVudC5jb2RlID09PSAnQXJyb3dEb3duJyB8fCAoJGV2ZW50LmNvZGUgPT09ICdTcGFjZScgJiYgIXRoaXMuZWRpdGFibGUpKSB7IC8vIGRvd25cclxuICAgICAgICAgICAgY29uc3QgaWR4ID0gZGF0YS5maW5kSW5kZXgobiA9PiB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgbikgPT09IHRoaXMuc2VsZWN0ZWRWYWx1ZXMpO1xyXG4gICAgICAgICAgICBsZXQgbmV4dElkeCA9IGlkeCArIDE7XHJcbiAgICAgICAgICAgIGlmIChuZXh0SWR4ID49IGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0SWR4ID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZWN0SXRlbShuZXh0SWR4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5lc2MnLCBbJyRldmVudCddKVxyXG4gICAgZXNjSGFuZGxlckV2ZW50KCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIG9uU2VsZWN0aW9uc0NoYW5nZSh2OiBhbnlbXSkge1xyXG4gICAgICAgIGlmICh0aGlzLnVyaSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25zICYmIHRoaXMuc2VsZWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLnNlbGVjdGlvbnMubWFwKG4gPT4gblt0aGlzLmlkRmllbGRdKS5qb2luKHRoaXMuc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVNlbGVjdFZhbHVlcyhpdGVtOiBTZWxlY3RJdGVtLCBlbWl0RXZlbnQgPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCBpbmRleCB9ID0geyAuLi5pdGVtIH07XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2Uuc2VsZWN0SXRlbShkYXRhLCBpbmRleCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YUxpc3RSZWYpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IHRoaXMuZGF0YUxpc3RSZWYuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gZGF0YVt0aGlzLmlkRmllbGRdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgX2Rpc3BsYXlUZXh0ID0gdGhpcy5jb21ib1NlcnZpY2UuZ2V0VmFsdWUodGhpcy50ZXh0RmllbGQpO1xyXG4gICAgICAgIGlmIChlbWl0RXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RDaGFuZ2UuZW1pdCh7IGRhdGEsIGluZGV4LCBpbnN0YW5jZTogdGhpcywgc2VsZWN0aW9uczogdGhpcy5zZWxlY3Rpb25zIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKHsgdGV4dDogX2Rpc3BsYXlUZXh0LCB2YWx1ZTogdGhpcy5zZWxlY3RlZFZhbHVlcywgc2VsZWN0aW9uczogdGhpcy5zZWxlY3Rpb25zIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNjcm9sbFRvQ3VycmVudEl0ZW0oaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHVsRWwgPSB0aGlzLmRhdGFMaXN0UmVmLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcigndWwubGlzdC1ncm91cCcpO1xyXG4gICAgICAgIGlmICh1bEVsICYmIHVsRWwuY2hpbGRyZW4gJiYgdWxFbC5jaGlsZHJlbltpbmRleF0pIHtcclxuICAgICAgICAgICAgdWxFbC5jaGlsZHJlbltpbmRleF0uc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOiAnbmVhcmVzdCd9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWxlY3QoaXRlbTogU2VsZWN0SXRlbSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0VmFsdWVzKGl0ZW0sIHRydWUpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UuaXNPcGVuJC5uZXh0KGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25VblNlbGVjdGVkKHZhbHVlOiBTZWxlY3RJdGVtKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSB7IC4uLnZhbHVlIH07XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UudW5TZWxlY3RJdGVtKGRhdGEpO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGFMaXN0UmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLmRhdGFMaXN0UmVmLnNlbGVjdGVkVmFsdWVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiAoIXRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IGRhdGFbdGhpcy5pZEZpZWxkXTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgY29uc3QgX2Rpc3BsYXlUZXh0ID0gdGhpcy5jb21ib1NlcnZpY2UuZ2V0VmFsdWUodGhpcy50ZXh0RmllbGQpO1xyXG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSh7IHRleHQ6IF9kaXNwbGF5VGV4dCwgdmFsdWU6IHRoaXMuc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGlvbnM6IHRoaXMuc2VsZWN0aW9ucyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkVudGVyKGV2ZW50OiBFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25LZXl1cCgkZXZlbnQpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygna2V5IHVwJywgJGV2ZW50KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25LZXlkb3duKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdrZXkgZG93bicsICRldmVudCk7XHJcbiAgICAgICAgaWYgKCRldmVudC5jb2RlID09PSAnVGFiJykge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkZvY3VzKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dQYW5lbFR5cGUgPT09ICdmb2N1cycpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVNlbGVjdEl0ZW0oJGV2ZW50OiBNb3VzZUV2ZW50LCBpdGVtKSB7XHJcbiAgICAgICAgaWYgKCRldmVudCkge1xyXG4gICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLnVuU2VsZWN0SXRlbShpdGVtKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gdGhpcy5jb21ib1NlcnZpY2UuZ2V0VmFsdWUodGhpcy5pZEZpZWxkKTtcclxuICAgICAgICBjb25zdCBfZGlzcGxheVRleHQgPSB0aGlzLmNvbWJvU2VydmljZS5nZXRWYWx1ZSh0aGlzLnRleHRGaWVsZCk7XHJcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSh7IHRleHQ6IF9kaXNwbGF5VGV4dCwgdmFsdWU6IHRoaXMuc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGlvbnM6IHRoaXMuc2VsZWN0aW9ucyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgaW5pdERhdGFzQ2hhbmdlQWN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLmRhdGEkLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gZGF0YTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbiJdfQ==