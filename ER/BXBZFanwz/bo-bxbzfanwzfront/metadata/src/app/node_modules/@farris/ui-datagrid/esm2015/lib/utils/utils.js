/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 20:31:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
export class Utils {
    /**
     * @return {?}
     */
    static uuid() {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line: no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    static getValue(field, data, safe = false) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1 || data.hasOwnProperty(field)) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        if (safe) {
            return this.escapeValue(resultVal);
        }
        return resultVal;
    }
    /**
     * @param {?} field
     * @param {?} val
     * @param {?} obj
     * @param {?=} nest
     * @return {?}
     */
    static setValue(field, val, obj, nest = true) {
        if (field) {
            if (field.indexOf('.') > -1 && nest) {
                /** @type {?} */
                let lastObj = null;
                /** @type {?} */
                const _fields = field.split('.');
                _fields.reduce((/**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                (c, p) => {
                    lastObj = c;
                    return c[p];
                }), obj);
                if (lastObj) {
                    lastObj[_fields.pop()] = val;
                }
            }
            else {
                obj[field] = val;
            }
        }
    }
    /**
     * 获取多语值
     * @param {?} valObj
     * @param {?} localeId
     * @return {?}
     */
    static getMultilingualValue(valObj, localeId) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            localeId = localeId || 'zh-CHS';
            /** @type {?} */
            const val = valObj[localeId];
            if (val !== undefined) {
                return val;
            }
            else {
                console.log(`can not find '${localeId}' in `, valObj);
                return '';
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    static escapeValue(val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        /** @type {?} */
        const escapeHTML = (/**
         * @param {?} unsafe_str
         * @return {?}
         */
        (unsafe_str) => {
            return unsafe_str
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\"/g, '&quot;')
                .replace(/\'/g, '&#39;')
                .replace(/\//g, '&#x2F;');
            // .replace('src','drc');
        });
        if (typeof val === 'string') {
            return escapeHTML(val);
        }
        return val;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    static eventPath(evt) {
        /** @type {?} */
        const path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        const target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        const getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        (node, memo = undefined) => {
            memo = memo || [];
            /** @type {?} */
            const parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    }
    /**
     * @return {?}
     */
    static hasDialogOpen() {
        // return document.body.classList.value.indexOf('modal-open') > -1;
        // 兼容IE 11
        return document.body.className.indexOf('modal-open') > -1;
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} fn
     * @param {?=} opts
     * @return {?}
     */
    static on(el, evt, fn, opts = {}) {
        /** @type {?} */
        const delegatorFn = (/**
         * @param {?} e
         * @return {?}
         */
        e => e.target.matches(opts.target) && fn.call(e.target, e));
        el.addEventListener(evt, opts.target ? delegatorFn : fn, opts.options || false);
        return (/**
         * @return {?}
         */
        () => {
            el.removeEventListener(evt, delegatorFn, opts);
        });
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?=} fn
     * @param {?=} opts
     * @return {?}
     */
    static off(el, evt, fn = (/**
     * @return {?}
     */
    () => { }), opts = {}) {
        el.removeEventListener(evt, fn, opts);
    }
    /**
     * 获取字符长度，中文汉字占2个字符
     * @param {?} str
     * @return {?}
     */
    static getBLen(str) {
        if (str == null) {
            return 0;
        }
        if (typeof str !== 'string') {
            str += '';
        }
        return str.replace(/[^\x00-\xff]/g, '01').length;
    }
    // static difference(first: any[], second: any[]): any[] {
    //     return first.filter(item => !second.includes(item));
    // }
    // static getDiffItems(arr1, arr2) {
    //     const diff1 = Utils.difference(arr1, arr2);
    //     const diff2 = Utils.difference(arr2, arr1);
    //     return diff1.concat(diff2);
    // }
    /**
     * @param {?} col
     * @param {?} localeId
     * @return {?}
     */
    static getWhenEmptyText(col, localeId) {
        /** @type {?} */
        const EMPTY_INPUT_TEXT = {
            'zh-CHS': '请输入',
            'zh-CHT': '請輸入',
            en: 'Please input'
        };
        /** @type {?} */
        const EMPTY_SELECT_TEXT = {
            'zh-CHS': '请选择',
            'zh-CHT': '請選擇',
            en: 'Please select'
        };
        if (col.editor) {
            switch (col.editor.type) {
                case 'datepicker':
                case 'select':
                case 'lookup':
                case 'combolist':
                case 'combo-lookup':
                    return EMPTY_SELECT_TEXT[localeId];
                default:
                    return EMPTY_INPUT_TEXT[localeId];
            }
        }
        // 控制面板列
        if (col.field === '_datagrid-setting-control_') {
            return '';
        }
        return EMPTY_INPUT_TEXT[localeId];
    }
}
//# sourceMappingURL=data:application/json;base64,