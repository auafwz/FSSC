/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-organization/to.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Injector, ViewChild, TemplateRef, HostBinding, NgZone } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import * as _ from 'lodash-es';
import { of } from 'rxjs';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ChangeType } from '../../utils/index.type';
import { CommonUtil } from '../../utils/common.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { StateMgrTool } from '../../utils/state.mgr.tool';
import { switchMap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
export class OrganizationComponent {
    /**
     * @param {?} apiService
     * @param {?} cdr
     * @param {?} favoritesTool
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} stateMgr
     * @param {?} msgService
     */
    constructor(apiService, cdr, favoritesTool, injector, ngZone, stateMgr, msgService) {
        this.apiService = apiService;
        this.cdr = cdr;
        this.favoritesTool = favoritesTool;
        this.injector = injector;
        this.ngZone = ngZone;
        this.stateMgr = stateMgr;
        this.msgService = msgService;
        this.baseCls = true;
        this.primaryField = 'orgId';
        this.pathLength = 4;
        this.selectionsChange = new EventEmitter();
        this.originalTreeData = [];
        this.locationOrgText = '';
        this.treeListData = [];
        this.treeTableCols = [];
        this.selections = [];
        this.favoritesList = [];
        this.initLoad = true;
        this.checkedOrgs = [];
        this.beforeClickNode = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.enableHierarchicalLoading) {
                return of(true);
            }
            if (!this.multiSelect) {
                if (e.rowNode.isSelected) {
                    this.setSelections([]);
                }
                else {
                    this.setSelections(new Array(e.rowNode.node.data), ChangeType.ValueChanged, 'other');
                }
                return of(false);
            }
            /** @type {?} */
            const param = {
                absOrgType: this.absOrgType,
                notGetStopOrg: this.notGetStopOrg,
                getCurUser: false,
                parentID: e.rowNode.id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data['data'].length > this.selectedLimit && !e.rowNode.isChecked) {
                    this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
                    return of(false);
                }
                if (!e.rowNode.isChecked) {
                    // todo 待验证，加入selection，
                    data.data.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.selections) === -1) {
                            this.setSelections(item, ChangeType.Append, 'other');
                        }
                    }));
                }
                else {
                    this.selections.forEach((/**
                     * @param {?} selection
                     * @param {?} index
                     * @return {?}
                     */
                    (selection, index) => {
                        data.data.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            if (selection[this.primaryField] === item[this.primaryField]) {
                                this.setSelections(item, ChangeType.Remove, 'other');
                            }
                        }));
                    }));
                }
                this.cdr.detectChanges();
                return of(false);
            })));
        });
        this.beforeCheckAll = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.enableHierarchicalLoading) {
                return of(true);
            }
            /** @type {?} */
            const param = {
                absOrgType: this.absOrgType,
                notGetStopOrg: this.notGetStopOrg,
                getCurUser: false,
                parentID: e.instance.data[0].id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data['data'].length > this.selectedLimit) {
                    this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
                    return of(false);
                }
                this.setSelections(data['data'], ChangeType.ValueChanged, 'other');
                return of(true);
            })));
        });
        this.cdr = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.favoritesSub.unsubscribe();
        this.selectionsSub.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.treeTableCols = [
            { field: 'name', title: '组织名称', template: this.orgNameCell },
            { field: 'code', title: '组织编号' }
        ];
        if (this.enableFavorites) {
            this.treeTableCols.push({
                field: '',
                title: '收藏',
                template: this.favoritesCell
            });
            this.treeTableCols[0].width = 300;
            this.treeTableCols[1].width = 300;
        }
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.favoritesList = data;
            this.setFavorites(this.treeListData);
            this.farrisTree.detectChanges();
        }));
        this.selectionsSub = this.stateMgr.selectionsSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data.changeType === ChangeType.ValueChanged) {
                this.selections = _.cloneDeep(data.value);
                if (this.selections.length === 0) {
                    this.farrisTree.clearCheckeds();
                    this.farrisTree.clearSelections();
                    this.farrisTree.detectChanges();
                }
                if (data.from === 'other') {
                    this.tickSelections();
                }
            }
            else if (data.changeType === ChangeType.Remove) {
                this.selections = this.selections.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item[this.primaryField] !== data.value[this.primaryField]));
                if (this.multiSelect) {
                    this.inTreeList(this.treeListData, data.value);
                    if (!!data.value.inTreeList) {
                        this.farrisTree.unCheckedNode(data.value[this.primaryField]);
                    }
                }
                else {
                    this.farrisTree.unSelectNode(data.value[this.primaryField]);
                }
            }
            else if (data.changeType === ChangeType.Append) {
                CommonUtil.findIndex(data.value[this.primaryField], this.primaryField, this.selections) === -1 ? this.selections.push(data.value) : null;
                if (this.multiSelect) {
                    this.inTreeList(this.treeListData, data.value);
                    if (!!data.value.inTreeList) {
                        this.farrisTree.checkedNode(data.value[this.primaryField]);
                    }
                }
                else {
                    this.farrisTree.selectNode(data.value[this.primaryField]);
                }
            }
            if (this.initLoad) {
                if (this.enableHierarchicalLoading) {
                    this.hlAssembleData();
                }
                else {
                    this.assembleData();
                }
                this.initLoad = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /*
        const orgIdsChange = changes.orgIds;
        if (orgIdsChange && orgIdsChange.currentValue) {
            this.checkedOrgs = orgIdsChange.currentValue;
        }
        */
    }
    // 设置当前组织树各个节点的收藏状态
    /**
     * @private
     * @param {?} treeListData
     * @return {?}
     */
    setFavorites(treeListData) {
        for (let i = 0; i < treeListData.length; i++) {
            if (CommonUtil.findIndex(treeListData[i].id, this.primaryField, this.favoritesList) === -1) {
                treeListData[i].data.inFavorites = false;
            }
            else {
                treeListData[i].data.inFavorites = true;
            }
            if (treeListData[i].children.length) {
                this.setFavorites(treeListData[i].children);
            }
        }
    }
    /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    setSelections(selections, changeType = ChangeType.ValueChanged, from = 'tree') {
        this.stateMgr.emitSelections(selections, changeType, from);
    }
    // 组织树全选事件
    /**
     * @return {?}
     */
    checkAll() {
        if (!this.enableHierarchicalLoading) {
            /** @type {?} */
            const checkeds = [];
            this.farrisTree.checkeds.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                checkeds.push(item.data);
            }));
            this.setSelections(checkeds);
        }
    }
    // 组织树取消全选事件
    /**
     * @return {?}
     */
    unCheckAll() {
        this.setSelections([]);
    }
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    /**
     * @param {?} e
     * @return {?}
     */
    changeSelections(e) {
        if (!this.enableHierarchicalLoading && !!e.originalEvent) {
            this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleChecked(e) {
        /** @type {?} */
        let checkeds = [];
        e && e.instance && e.instance.checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            checkeds.push(item.data);
        }));
        this.setSelections(checkeds);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSelected(e) {
        /** @type {?} */
        let selected = [];
        e && e.instance && e.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            selected.push(item.data);
        }));
        this.setSelections(selected);
    }
    // 根据传入的组织id确定已选择组织
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    assembleDataByOrgIds(ids) {
        if (!ids || ids.length === 0) {
            return;
        }
        if (ids && ids.length > 0 && !this.multiSelect) {
            console.warn('单选模式下，只允许选中一条数据~');
            return;
        }
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            idList: ids,
            getCurUser: false,
            getOrgAllPath: true,
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res && res.data && res.data.length > 0) {
                this.checkedOrgs = res.data;
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.selections) === -1) {
                        this.setSelections(item, ChangeType.Append, 'other');
                    }
                }));
                this.tickSelections();
                this.cdr.detectChanges();
            }
        }));
    }
    // 分层加载组织树
    /**
     * @return {?}
     */
    hlAssembleData() {
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        /** @type {?} */
        const layerList = [];
        /** @type {?} */
        let layer = this.layer;
        while (layer > 0) {
            layerList.push(layer);
            layer -= 1;
        }
        param.layerList = layerList;
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res || !res.data) {
                return;
            }
            if (this.orgIds.length == 0) {
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    item.selectable = true;
                }));
            }
            if (this.enableFavorites) {
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }));
            }
            this.originalTreeData = res.data;
            if (res && res.curAbsUser && res.curAbsUser.orgAllPathInfo) {
                /** @type {?} */
                const curUserOrgPath = res.curAbsUser.orgAllPathInfo;
                curUserOrgPath.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, res.data) === -1) {
                        res.data.push(item);
                    }
                }));
            }
            this.treeListData = this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            this.farrisTree.loadData(this.treeListData);
            /*
            if(this.checkedOrgs && this.checkedOrgs.length) {
                this.assembleDataByOrgIds(this.checkedOrgs);
                return;
            }
            */
            this.tickSelections();
            this.cdr.detectChanges();
        }));
    }
    // 全加载组织树
    /**
     * @return {?}
     */
    assembleData() {
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res || !res.data) {
                return;
            }
            if (this.enableFavorites) {
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }));
            }
            this.originalTreeData = res.data;
            this.treeListData = this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            this.farrisTree.loadData(this.treeListData);
            /*
            if(this.checkedOrgs && this.checkedOrgs.length) {
                this.assembleDataByOrgIds(this.checkedOrgs);
                return;
            }
            */
            this.tickSelections();
            this.cdr.detectChanges();
        }));
    }
    // 确定已选组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    inTreeList(treeListData, item) {
        for (let i = 0; i < treeListData.length; i++) {
            if (treeListData[i].id === item[this.primaryField]) {
                item.inTreeList = true;
                break;
            }
            if (treeListData[i].children.length) {
                this.inTreeList(treeListData[i].children, item);
            }
        }
    }
    // 在当前组织树内勾选所有已选择的组织
    /**
     * @private
     * @return {?}
     */
    tickSelections() {
        /** @type {?} */
        const ids = [];
        this.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.inTreeList(this.treeListData, item);
            if (!!item.inTreeList) {
                ids.push(item[this.primaryField]);
            }
        }));
        /*
        if(this.checkedOrgs && this.checkedOrgs.length) {
            this.checkedOrgs.forEach(orgId => {
                if(CommonUtil.findIndex(orgId, this.primaryField, this.selections) === -1) {
                    ids.push(orgId);
                }
            });
        }
        */
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (!ids.length) {
                    return;
                }
                if (this.multiSelect) {
                    this.farrisTree.checkedNodes(ids, true, true);
                }
                else {
                    if (ids.length > 1) {
                        this.msgService.show('warning', `亲，单选模式下，选中了${ids.length}条数据~`, true);
                        return;
                    }
                    this.farrisTree.clearSelections();
                    this.farrisTree.detectChanges();
                    this.farrisTree.selectNode(ids.join());
                }
            }));
        }));
    }
    /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    dataToTree(plainSource, layer, expandedPath = '') {
        /** @type {?} */
        const treeSource = this.dealData(plainSource, expandedPath);
        /** @type {?} */
        const parents = treeSource.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.data.layer === layer;
        }));
        this.treeData(parents, treeSource, 1);
        return parents;
    }
    /**
     * 预处理组织数据
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    dealData(data, expandedPath = '') {
        /** @type {?} */
        const pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            let maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (let a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        /** @type {?} */
        const newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const newsDataObj = {
                    data: {
                        orgId: item[this.primaryField],
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        layer: Number(item.layer),
                        orgAllPath: item.orgAllPath,
                        inFavorites: item.inFavorites
                    },
                    expanded: true,
                    children: []
                };
                // let expanded = [];
                // if (this.enableHierarchicalLoading) {
                //     this.nodeExpanded(newsDataObj, this.treeListData, expanded);
                // }
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1) {
                    newsDataObj.expanded = true;
                }
                else {
                    newsDataObj.expanded = false;
                    if (this.enableHierarchicalLoading && item.isDetail === '0') {
                        newsDataObj.leaf = false;
                    }
                }
                // todo 分层加载需要
                //if (this.enableHierarchicalLoading && item.isDetail === '0' && Number(item.layer) >= this.layer) {
                //newsDataObj.leaf = false;
                // newsDataObj.expanded = false;
                //}
                newDatas.push(newsDataObj);
            }));
        }
        return newDatas;
    }
    /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    treeData(parents, treeSource, layer) {
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        parent => {
            /** @type {?} */
            const parentPath = parent['data']['path'];
            /** @type {?} */
            const parentLayer = parent['data']['layer'];
            treeSource.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item && item['data'] && item['data']['path']) {
                    /** @type {?} */
                    const itemPath = item['data']['path'];
                    /** @type {?} */
                    const itemLayer = item['data']['layer'];
                    /** @type {?} */
                    let targetPath;
                    if (itemPath && itemPath.length > parentPath.length) {
                        targetPath = itemPath.substr(0, Number(layer) * 4);
                    }
                    if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                        parent['children'].push(item);
                    }
                    if (parentPath === targetPath) {
                        this.treeData([item], treeSource, Number(layer) + 1);
                    }
                }
            }));
        }));
    }
    // 收藏或取消收藏当前节点对应的组织
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    toggleFavorites(e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    }
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    listenTreeExpand(obj) {
        // todo 分层加载
        if (this.enableHierarchicalLoading && obj.children.length === 0) {
            this.getOrganizationByParentNode(obj);
        }
    }
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    getOrganizationByParentNode(parentNode) {
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            parentID: parentNode.id,
            notGetStopOrg: this.notGetStopOrg,
            getCurUser: false,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res && res.data) {
                /** @type {?} */
                const newDatas = [];
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.originalTreeData) === -1) {
                        item.selectable = true;
                        this.originalTreeData.push(item);
                    }
                    if (this.enableFavorites) {
                        item.inFavorites = true;
                        if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.favoritesList) === -1) {
                            item.inFavorites = false;
                        }
                    }
                    newDatas.push(item);
                }));
                /** @type {?} */
                const nodes = this.dealData(newDatas);
                this.farrisTree.appendChildren(nodes, parentNode);
                this.farrisTree.detectChanges();
                this.tickSelections();
            }
        }));
    }
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    nodeExpanded(item, arr, expanded) {
        for (let i = 0; i < arr.length; i++) {
            if (item.data.id === arr[i].data.id) {
                expanded[0] = arr[i].expanded;
            }
            else if (arr[i].children.length) {
                this.nodeExpanded(item, arr[i].children, expanded);
            }
        }
    }
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    expandTreeNode(treeData, path, layer) {
        treeData.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (path.includes(node.data.path)) {
                this.farrisTree.expandNode(node.data.id);
            }
            if (node.data.layer < layer && node.children.length) {
                this.expandTreeNode(node.children, path, layer);
            }
        }));
    }
}
OrganizationComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-org',
                template: "<farris-treetable #farristree style=\"cursor:pointer\" [width]=\"'100%'\" [data]=\"treeListData\" [idField]=\"primaryField\"\r\n    [columns]=\"treeTableCols\" [singleSelect]=\"!multiSelect\" [showBorder]=\"false\" [showCheckbox]=\"multiSelect\"\r\n    [showIcon]=\"false\" [showHeader]=\"true\" [fixedHeader]=\"true\" [disabled]=\"false\" [fit]=\"true\" [checkOnSelect]=\"true\"\r\n    [striped]=\"true\" [cascadeCheck]=\"cascadeCheck\" [cascadeDown]=\"cascadeDown\" [cascadeUp]=\"cascadeUp\"\r\n    [keepSelect]=\"keepSelect\" [showCheckAll]=\"showCheckAll\" [onlySelectSelf]=\"true\"\r\n    [beforeClickNode]=\"beforeClickNode\" [beforeCheckAll]=\"beforeCheckAll\"\r\n    (nodeChecked)=\"changeSelections($event)\" (nodeUnChecked)=\"changeSelections($event)\"\r\n    (nodeSelected)=\"changeSelections($event)\" (nodeUnSelect)=\"changeSelections($event)\"\r\n    (checkAll)=\"checkAll()\" (unCheckAll)=\"unCheckAll()\"\r\n    (expand)=\"listenTreeExpand($event)\" class=\"fos-treetable\">\r\n</farris-treetable>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F -->\r\n<ng-template #orgNameCell let-ctx>\r\n    <span style=\"font-size: 13px;\" title=\"{{ctx.node.data.name}}\">{{ctx.node.data.name}}</span>\r\n</ng-template>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F-\u6536\u85CF\u5217 -->\r\n<ng-template #favoritesCell let-ctx>\r\n    <span class=\"f-icon f-icon-star\" [class.default-light-color]=\"ctx.node.data.inFavorites\"\r\n        [class.default-dark-color]=\"!ctx.node.data.inFavorites\" (click)=\"toggleFavorites($event, ctx.node.data)\"></span>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
OrganizationComponent.ctorParameters = () => [
    { type: ApiService },
    { type: ChangeDetectorRef },
    { type: FavoritesTool },
    { type: Injector },
    { type: NgZone },
    { type: StateMgrTool },
    { type: MessagerService }
];
OrganizationComponent.propDecorators = {
    enableFavorites: [{ type: Input }],
    baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
    farrisTree: [{ type: ViewChild, args: ['farristree',] }],
    orgNameCell: [{ type: ViewChild, args: ['orgNameCell',] }],
    favoritesCell: [{ type: ViewChild, args: ['favoritesCell',] }],
    primaryField: [{ type: Input }],
    enableHierarchicalLoading: [{ type: Input }],
    notGetStopOrg: [{ type: Input }],
    layer: [{ type: Input }],
    multiSelect: [{ type: Input }],
    absOrgType: [{ type: Input }],
    cascadeCheck: [{ type: Input }],
    cascadeUp: [{ type: Input }],
    cascadeDown: [{ type: Input }],
    showCheckAll: [{ type: Input }],
    keepSelect: [{ type: Input }],
    pathLength: [{ type: Input }],
    orgIds: [{ type: Input }],
    selectedLimit: [{ type: Input }],
    selectionsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    OrganizationComponent.prototype.enableFavorites;
    /** @type {?} */
    OrganizationComponent.prototype.baseCls;
    /** @type {?} */
    OrganizationComponent.prototype.farrisTree;
    /** @type {?} */
    OrganizationComponent.prototype.orgNameCell;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesCell;
    /** @type {?} */
    OrganizationComponent.prototype.primaryField;
    /** @type {?} */
    OrganizationComponent.prototype.enableHierarchicalLoading;
    /** @type {?} */
    OrganizationComponent.prototype.notGetStopOrg;
    /** @type {?} */
    OrganizationComponent.prototype.layer;
    /** @type {?} */
    OrganizationComponent.prototype.multiSelect;
    /** @type {?} */
    OrganizationComponent.prototype.absOrgType;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeCheck;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeUp;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeDown;
    /** @type {?} */
    OrganizationComponent.prototype.showCheckAll;
    /** @type {?} */
    OrganizationComponent.prototype.keepSelect;
    /** @type {?} */
    OrganizationComponent.prototype.pathLength;
    /** @type {?} */
    OrganizationComponent.prototype.orgIds;
    /** @type {?} */
    OrganizationComponent.prototype.selectedLimit;
    /** @type {?} */
    OrganizationComponent.prototype.selectionsChange;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.selectionsSub;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesSub;
    /** @type {?} */
    OrganizationComponent.prototype.originalTreeData;
    /** @type {?} */
    OrganizationComponent.prototype.locationOrgText;
    /** @type {?} */
    OrganizationComponent.prototype.treeListData;
    /** @type {?} */
    OrganizationComponent.prototype.treeTableCols;
    /** @type {?} */
    OrganizationComponent.prototype.selections;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesList;
    /** @type {?} */
    OrganizationComponent.prototype.initLoad;
    /** @type {?} */
    OrganizationComponent.prototype.checkedOrgs;
    /** @type {?} */
    OrganizationComponent.prototype.beforeClickNode;
    /** @type {?} */
    OrganizationComponent.prototype.beforeCheckAll;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.stateMgr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.msgService;
}
//# sourceMappingURL=data:application/json;base64,