/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 15:48:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Input, ElementRef, Renderer2, ContentChild, Injector, forwardRef, Inject, NgZone } from '@angular/core';
import { filter, debounceTime } from 'rxjs/operators';
import { DatagridService } from './../../services/datagrid.service';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DatagridBodyComponent } from './datagrid-body.component';
import { DatagridRowDirective } from './datagrid-row.directive';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { CELL_SELECTED_CLS, CELL_EDITING_CLS, ALLOW_EDIT_CELL_HIGHLIGHT_CLS } from '../../types/constant';
import { DomHandler } from '../../services/domhandler';
import { of } from 'rxjs';
import { Utils } from '../../utils/utils';
var DatagridCellEditableDirective = /** @class */ (function () {
    function DatagridCellEditableDirective(injector, el, render, dg, ngZone) {
        var _this = this;
        this.injector = injector;
        this.el = el;
        this.render = render;
        this.dg = dg;
        this.ngZone = ngZone;
        // private _readonly$ = null;
        this.cellEditorCreatedSubscription = null;
        this.cellEditorDestorySubscription = null;
        this.dgb = this.injector.get(DatagridBodyComponent);
        this.dr = this.injector.get(DatagridRowDirective);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        if (!this.cellEditorCreatedSubscription) {
            this.cellEditorCreatedSubscription = this.dgs.cellEditorCreated.pipe(filter((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var column = _a.column, editorRef = _a.editorRef, cellEditorRef = _a.cellEditorRef, templateRef = _a.templateRef;
                return column.field === _this.column.field && _this.dg.selectedRow.id === _this.dr.rowId;
            }))).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var editorRef = _a.editorRef, cellEditorRef = _a.cellEditorRef, templateRef = _a.templateRef;
                // console.log('单元格编辑器创建OK', editorRef);
                if (editorRef) {
                    _this['editor'] = editorRef.instance;
                    _this['formControl'] = (/** @type {?} */ (_this.editor.formControl));
                    _this.cellEditorRef = cellEditorRef;
                    _this.emitBeginEdit();
                }
                else {
                    _this['formControl'] = (/** @type {?} */ (_this.dr.form.get(_this.column.field)));
                    _this.bindEditorInputEvent();
                    _this.dg.beginEdit.emit({ editor: null, column: _this.column, rowData: _this.rowData, gridInstance: _this.dg, template: templateRef });
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.setCellClsWithEditorType();
        }
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initCellEvent();
        this.setCellClsWithEditorType();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.initCellEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // this.cellclick = this.render.listen(this.el.nativeElement, 'click', (e) => this.onClickCell(e));
        if (this.column && (this.column.editor || this.column.editorTemplate)) {
            if (!this.dg.clickToEdit) {
                this.celldblclick = this.render.listen(this.el.nativeElement, 'dblclick', (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    _this.onDblClickCell(e);
                }));
            }
            this.el.nativeElement.edit = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.onClickCell(e); });
            this.el.nativeElement.editCell = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.openCellEditor();
            });
        }
        else {
            this.clickTimer = 0;
        }
        this.el.nativeElement.gridCellData = { rowData: this.rowData, rowIndex: this.dr.rowIndex };
        this.el.nativeElement.closeEdit = (/**
         * @return {?}
         */
        function () { return _this.closeEditingCell(); });
        this.el.nativeElement.selectCell = (/**
         * @param {?} e
         * @param {?} el
         * @return {?}
         */
        function (e, el) {
            if (_this.dg.disableRow && _this.dg.disableRow(_this.rowData, _this.dr.rowIndex)) {
                return;
            }
            if (_this.dg.currentCell && _this.dg.currentCell.cellElement.id === el.id && !_this.dg.keepSelect) {
                _this.dg.cancelSelectCell();
            }
            else {
                _this.selectCell(_this.column.field, el);
                _this.dg.cellClick.emit({ column: _this.column, rowData: _this.rowData, gridInstance: _this.dg, event: e });
            }
        });
        this.el.nativeElement.cancelSelected = (/**
         * @return {?}
         */
        function () {
            DomHandler.removeClass(_this.el.nativeElement, CELL_SELECTED_CLS);
            _this.render.removeClass(_this.el.nativeElement, CELL_EDITING_CLS);
        });
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cellclick) {
            this.cellclick();
        }
        if (this.celldblclick) {
            this.celldblclick();
        }
        this.unBindEditorInputEvent();
        if (this.bindCellEventSubscription) {
            this.bindCellEventSubscription.unsubscribe();
            this.bindCellEventSubscription = null;
        }
        if (this.cellEditorCreatedSubscription) {
            this.cellEditorCreatedSubscription.unsubscribe();
            this.cellEditorCreatedSubscription = null;
        }
        if (this.cellEditorDestorySubscription) {
            this.cellEditorDestorySubscription.unsubscribe();
            this.cellEditorDestorySubscription = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.isDifferentCell = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.dg.currentCell) {
            return true;
        }
        else {
            if (!this.dg.selectedRow || this.dg.selectedRow.index !== this.dr.rowIndex) {
                return true;
            }
            else {
                if (this.dr.rowIndex !== this.dg.currentCell.rowIndex) {
                    return true;
                }
                else {
                    return this.dg.currentCell.field !== this.column.field;
                }
            }
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.onClickCell = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // 关闭其他Grid 的编辑器
        document.body.click();
        this.dg.beforeClickCell.emit({ rowIndex: this.dr.rowIndex, rowData: this.rowData, column: this.column, gridInstance: this.dg });
        if (this.dr.disabled) {
            return;
        }
        // 20210422
        // if (this.dg.closeOtherGridEditor) {
        //     document.body.click();
        // }
        if (this.dg.disabled) {
            return;
        }
        else {
            if (!this.dg.editable || this.isReadonly()) {
                if (this.dg.enableHighlightCell) {
                    event.stopPropagation();
                    this.dg.endEditing();
                    this.selectCell(this.column.field);
                }
                return;
            }
            else {
                if (this.dg.editMode === 'row') {
                    return;
                }
            }
        }
        if (this.dg.selectionMode === 'default' && event) {
            if (event.ctrlKey || event.shiftKey) {
                return;
            }
        }
        event.stopPropagation();
        if (event.target['nodeName'] === 'INPUT') {
            return;
        }
        if (this.dg.clickToEdit && !this.dg.dblclickRow.observers.length) {
            this.dg.clickDelay = 0;
        }
        this.render.addClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
        if (!this.dg.isSingleClick && this.dg.editMode) {
            this.dg.isSingleClick = true;
            this.clickTimer = setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.dg.isSingleClick && _this.dg.editable && _this.dg.editMode === 'cell') {
                    _this.dg.isSingleClick = false;
                    clearTimeout(_this.clickTimer);
                    // if (!this.closeEditingCell()) {
                    //     return;
                    // }
                    _this.closeEditingCell().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        if (f) {
                            if (_this.dg.clickToEdit) {
                                _this.openCellEditor();
                            }
                            else {
                                _this.selectCell(_this.column.field);
                            }
                            _this.render.removeClass(_this.dg.el.nativeElement, 'f-datagrid-unselect');
                            event.preventDefault();
                        }
                    }));
                }
            }), this.dg.clickDelay);
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.onDblClickCell = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.dg.disabled || this.isReadonly()) {
            return;
        }
        if (event.target['nodeName'] === 'INPUT' || event.target['nodeName'] === 'TEXTAREA') {
            return;
        }
        if (this.dg.editable && this.dg.editMode === 'cell') {
            // if (!this.closeEditingCell()) {
            //     return;
            // }
            this.closeEditingCell().subscribe((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (f) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.openCellEditor();
                    }));
                }
            }));
        }
        if (this.clickTimer) {
            this.dg.isSingleClick = false;
            clearTimeout(this.clickTimer);
            this.clickTimer = null;
        }
    };
    /**
     * @param {?=} col
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.isReadonly = /**
     * @param {?=} col
     * @return {?}
     */
    function (col) {
        if (col === void 0) { col = this.column; }
        // 参与合并的单元格不允许编辑
        if (this.dg.mergeCell && this.dg.mergeFields.indexOf(col.field) > -1) {
            return true;
        }
        return this.getReadonlyValue(col);
    };
    /**
     * @private
     * @param {?=} col
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.getReadonlyValue = /**
     * @private
     * @param {?=} col
     * @return {?}
     */
    function (col) {
        if (col === void 0) { col = this.column; }
        if (col.readonly !== undefined) {
            if (typeof col.readonly === 'boolean') {
                return col.readonly;
            }
            else if (typeof col.readonly === 'function') {
                return col.readonly(this.rowData);
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.openCellEditor = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 当前行禁用，不允许编辑。
        if (this.dr.disabled) {
            return;
        }
        if ((!this.column.editor && !this.column.editorTemplate) || !this.dg.editable || this.isReadonly()) {
            this.selectCell(this.column.field);
            return;
        }
        /** @type {?} */
        var beforeEditEvent = this.dg.beforeEdit({ rowIndex: this.dr.rowIndex, rowData: this.rowData, column: this.column, gridInstance: this.dg });
        if (!beforeEditEvent || !beforeEditEvent.subscribe) {
            console.warn('please return an Observable Type.');
            return;
        }
        if (this.dg.currentCell) {
            if (!this.dg.currentCell.cellRef || this.dg.currentCell.cellRef.column.field !== this.column.field) {
                this.dg.currentCell.cellRef = this.dc;
            }
        }
        beforeEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            if (flag) {
                if (_this.isDifferentCell()) {
                    _this.selectCell(_this.column.field);
                }
                _this.dfs.editCell();
                // this.emitBeginEdit();
            }
            else {
                _this.selectCell(_this.column.field);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.emitBeginEdit = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _cellEditorRef = this.cellEditorRef || this.dc.cellEditor;
        this.render.removeClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
        if (this.dg.editMode === 'cell') {
            this.dg.selectedRow.editors = [this.editor];
            this.dg.currentCell.editor = this.editor;
            this.dg.currentCell.cellEditorRef = _cellEditorRef;
            this.bindEditorInputEvent();
            this.render.addClass(this.el.nativeElement, CELL_EDITING_CLS);
            // this.formControl.setValue(this.dc.value);
            this.dg.beginEdit.emit({ editor: _cellEditorRef, column: this.column, rowData: this.rowData, gridInstance: this.dg });
            if (this.column.editor.type === 'textarea' && this.column.editor.options && this.column.editor.options.editType === 'dialog') {
                this.editor.showDialog();
            }
        }
        if (this.dr && !this.dg.nowrap) {
            this.dr.updateRowHeight();
        }
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.closeEditingCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.dg.isCellEditing()) {
            return of(true);
        }
        /** @type {?} */
        var currentCell = null;
        /** @type {?} */
        var editor = null;
        if (this.dg.currentCell) {
            // this.dg.currentCell.isEditing = false;
            // this.dfs.getCurrentCell().isEditing = false;
            currentCell = (/** @type {?} */ (this.dg.currentCell.cellRef));
            if (currentCell) {
                if (!currentCell.isEditing) {
                    return of(true);
                }
                if (currentCell.cellEditor && currentCell.cellEditor.componentRef && !currentCell.column.editorTemplate) {
                    editor = currentCell.cellEditor.componentRef.instance;
                    if (editor) {
                        // 执行blur 事件
                        if (editor.inputElement) {
                            /** @type {?} */
                            var domName = editor.inputElement.nodeName;
                            /** @type {?} */
                            var blurFn = editor.options && editor.options.onBlur;
                            if (blurFn) {
                                if ((domName === 'INPUT' || domName === 'TEXTAREA') && this.dg['focusElement'] === editor.inputElement) {
                                    blurFn({ editorRef: editor, rowData: currentCell.rowData });
                                }
                            }
                            if (editor.inputElement.blur) {
                                editor.inputElement.blur();
                            }
                            this.dg['focusElement'] = null;
                        }
                        if (editor.blur) {
                            editor.blur();
                        }
                        if (editor.pending) {
                            return of(false);
                        }
                        if (editor.formControl) {
                            if (editor.formControl.pending) {
                                return of(false);
                            }
                            if (editor.formControl && editor.formControl.invalid && !this.dg.endEditByInvalid) {
                                return of(false);
                            }
                        }
                        else {
                            return of(true);
                        }
                    }
                    else {
                        return of(true);
                    }
                }
            }
        }
        else {
            return of(true);
        }
        this.dg.isSingleClick = false;
        /** @type {?} */
        var _col_ = (editor || currentCell).column;
        /** @type {?} */
        var afterEditEvent = this.dg.afterEdit(currentCell.rowIndex, currentCell.rowData, _col_, editor);
        if (!afterEditEvent || !afterEditEvent.subscribe) {
            console.warn('please return an Observable Type.');
            return;
        }
        /** @type {?} */
        var cellEndEdit = of(undefined);
        afterEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            if (flag) {
                /** @type {?} */
                var val = currentCell.value;
                if (currentCell && currentCell.formControl && val !== currentCell.formControl.value) {
                    val = currentCell.formControl.value;
                    currentCell.isEditing = false;
                    currentCell.updateValue(val);
                }
                _this.dfs.endEditCell();
                _this.dgs.onEndCellEdit(_this.dfs.getCurrentCell());
                _this.unBindEditorInputEvent();
                // 移除编辑样式
                _this.render.removeClass(_this.el.nativeElement, CELL_EDITING_CLS);
                if (_this.dg.selectedRow) {
                    _this.dg.selectedRow.editors = [];
                }
                // this.dg.selectedRow.data = this.rowData;
                // 更新行样式或者单元格样式
                _this.dfs.rowUpdate$.next({ index: currentCell.rowIndex, data: currentCell.rowData, cellRef: currentCell });
                _this.dg.endEdit.emit({ rowIndex: currentCell.rowIndex, rowData: currentCell.rowData, column: _col_, value: val });
                // 更新footerData
                _this.dgs.refreshFooterData.emit();
                cellEndEdit = of(true);
                // 刷新行数据
                // this.dr.refresh();
                if (_this.dg.selectedRow && _this.dg.selectedRow.dr) {
                    _this.dg.selectedRow.dr.refresh();
                }
            }
            else {
                if (currentCell && currentCell.cellEditor) {
                    editor = currentCell.cellEditor.componentRef.instance;
                    editor.inputElement.focus();
                    cellEndEdit = of(false);
                }
                else {
                    cellEndEdit = of(true);
                }
            }
        }));
        return cellEndEdit;
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.cancelCellEditing = /**
     * @return {?}
     */
    function () {
        if (this.dg.currentCell && this.dg.currentCell.isEditing && this.dg.selectedRow.index > -1) {
            this.dfs.resetRow(this.dg.selectedRow.id);
            this.dc.rowData = this.dg.selectedRow.data;
            this.formControl.reset(Utils.getValue(this.column.field, this.dc.rowData));
            this.closeEditingCell();
        }
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.bindEditorInputEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ceRef = this.cellEditorRef || this.dc.cellEditor;
        /** @type {?} */
        var input = null;
        if (ceRef) {
            input = ceRef.componentRef.instance.inputElement;
        }
        else {
            if (this.column.editorTemplate) {
                input = this.dc.el.nativeElement.querySelector('input,textarea');
            }
        }
        if (input) {
            input.focus();
            if (this.dg.selectOnEditing && this.column.editorTemplate) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (input.select) {
                        input.select();
                    }
                }));
            }
            this.editorInputKeydownEvent = this.render.listen(input, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.onKeyDownForInput(e);
            }));
        }
    };
    /**
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.unBindEditorInputEvent = /**
     * @return {?}
     */
    function () {
        if (this.editorInputKeydownEvent) {
            this.editorInputKeydownEvent();
            this.editorInputKeydownEvent = null;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.onKeyDownForInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        /** @type {?} */
        var keyCode = e.keyCode;
        if (e.altKey || e.ctrlKey) {
            return;
        }
        if ((this.editor && this.editor.stopPropagation) || keyCode === 13 || this.column.editorTemplate) {
            e.stopPropagation();
        }
        switch (keyCode) {
            case 32: // SPACE
                if (this.column.editor.type === 'switch') {
                    e.preventDefault();
                    this.editor.instance.updateChecked(e, false);
                }
                break;
            case 13: // Enter
                this.closeEditingCell().pipe(debounceTime(100)).subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    if (f) {
                        /** @type {?} */
                        var enterParam = { gird: _this.dg, cell: _this.dg.currentCell, event: e };
                        if (_this.column.onEnterHandler) {
                            _this.column.onEnterHandler(enterParam);
                        }
                        else {
                            /** @type {?} */
                            var nextTd = _this.dg.currentCell.cellElement.nextElementSibling;
                            if (_this.dg.currentCell.lastRow && !nextTd) {
                                _this.dg.lastCellEnterHandle.emit(enterParam);
                            }
                        }
                    }
                }));
                break;
            case 27: // ESC
                this.cancelCellEditing();
                break;
            case 9: // Tab
                e.stopPropagation();
                this.dg.clickDelay = 0;
                if (e.shiftKey) {
                    this.closeEditingCell().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        if (f) {
                            _this.movePrevCellAndEdit();
                        }
                    }));
                }
                else {
                    this.closeEditingCell().subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        if (f) {
                            _this.moveNextCellAndEdit(e);
                        }
                    }));
                    e.preventDefault();
                }
                break;
        }
    };
    /**
     * @private
     * @param {?} field
     * @param {?=} tdElement
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.selectCell = /**
     * @private
     * @param {?} field
     * @param {?=} tdElement
     * @return {?}
     */
    function (field, tdElement) {
        this.closeEditingCell();
        tdElement = tdElement || this.el.nativeElement;
        this.clearCellSelectedClass();
        if (field !== this.dg.ControlPanelFeild) {
            this.render.addClass(tdElement, CELL_SELECTED_CLS);
        }
        // this.dr.drHover.setRowHoverCls(false);
        this.dfs.setCurrentCell(this.dr, field, tdElement, this.dc);
        this.moveScrollbar(tdElement);
    };
    /**
     * @private
     * @param {?} td
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.moveScrollbar = /**
     * @private
     * @param {?} td
     * @return {?}
     */
    function (td) {
        /** @type {?} */
        var tdPosLeft = td.offsetLeft + td.offsetWidth;
        /** @type {?} */
        var containerWidth = this.dg.width - this.dgb.columnsGroup.leftFixedWidth;
        /** @type {?} */
        var tdRect = td.getBoundingClientRect();
        /** @type {?} */
        var scrollContainer = this.dgb.ps.elementRef.nativeElement;
        /** @type {?} */
        var psContainer = scrollContainer.getBoundingClientRect();
        /** @type {?} */
        var scrollTop = scrollContainer.scrollTop;
        /** @type {?} */
        var scrollLeft = scrollContainer.scrollLeft;
        /** @type {?} */
        var scrollbarXLeft = this.dgb.ps.elementRef.nativeElement.scrollLeft;
        if (tdPosLeft > containerWidth) {
            /** @type {?} */
            var x = tdPosLeft - containerWidth + 2;
            if (x > scrollbarXLeft) {
                this.dgb.ps.scrollToX(x);
            }
        }
        else {
            if (tdRect.x < psContainer.x) {
                /** @type {?} */
                var x = scrollLeft - tdRect.x;
                this.dgb.ps.scrollToX(x);
            }
        }
        /** @type {?} */
        var tdPosTop = tdRect.top - psContainer.top + tdRect.height;
        if (tdPosTop > psContainer.height) {
            /** @type {?} */
            var y = tdPosTop - psContainer.height;
            this.dgb.ps.scrollToY(scrollTop + y);
        }
        else {
            if (tdRect.y < psContainer.y) {
                this.dgb.ps.scrollToY(scrollTop - (psContainer.y - tdRect.y));
            }
        }
    };
    /**
     * @private
     * @param {?=} event
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.moveNextCellAndEdit = /**
     * @private
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        // if (!this.closeEditingCell()) {
        //     return;
        // }
        /** @type {?} */
        var fieldIndex = this.dfs.getColumnIndex(this.column.field);
        if (fieldIndex + 1 < this.dgb.columnsGroup.normalColumns.length) {
            /** @type {?} */
            var nextColumn = this.dgb.columnsGroup.normalColumns[fieldIndex + 1];
            /** @type {?} */
            var nextTd = this.dg.currentCell.cellElement.nextElementSibling;
            if (nextColumn && ((!nextColumn.editor && !nextColumn.editorTemplate) || this.isReadonly(nextColumn))) {
                if (nextTd) {
                    nextTd.selectCell(event, nextTd);
                }
                return;
            }
            if (nextTd) {
                nextTd.focus();
                if (nextColumn.editor || nextColumn.editorTemplate) {
                    nextTd.editCell();
                    this.dgs.onCellEdit(nextTd);
                }
            }
        }
        else {
            // next row's first cell to editing
            /** @type {?} */
            var nextTr = this.dg.currentCell.cellElement.parentElement.nextElementSibling;
            if (nextTr && nextTr.tagName === 'TR') {
                // nextTr.children.find(td => td.editCell).editCell();
                /** @type {?} */
                var firstEditor = false;
                /** @type {?} */
                var i = 0;
                while (!firstEditor) {
                    firstEditor = !!nextTr.children[i].editCell;
                    if (!firstEditor) {
                        i++;
                    }
                }
                if (this.dg.selectionMode === 'default') {
                    this.dg.clearCheckeds();
                }
                nextTr.children[i].editCell();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.movePrevCellAndEdit = /**
     * @private
     * @return {?}
     */
    function () {
        // if (!this.closeEditingCell()) {
        //     return;
        // }
        /** @type {?} */
        var fieldIndex = this.dfs.getColumnIndex(this.column.field);
        if (fieldIndex - 1 >= 0) {
            /** @type {?} */
            var nextColumn = this.dgb.columnsGroup.normalColumns[fieldIndex - 1];
            if (nextColumn && this.isReadonly(nextColumn)) {
                return;
            }
            /** @type {?} */
            var nextTd = this.dg.currentCell.cellElement.previousElementSibling;
            if (nextTd) {
                // this.selectCell(nextColumn.field, nextTd);
                nextTd.focus();
                if (nextColumn.editor) {
                    // this.dfs.editCell();
                    nextTd.click();
                    this.dgs.onCellEdit(nextTd);
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.clearCellSelectedClass = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dg.currentCell) {
            DomHandler.removeClass(this.dg.currentCell.cellElement, CELL_SELECTED_CLS);
            this.render.removeClass(this.dg.currentCell.cellElement, CELL_EDITING_CLS);
            /** @type {?} */
            var selectedCell = this.dg.el.nativeElement.querySelectorAll('.' + CELL_SELECTED_CLS);
            if (selectedCell.length) {
                selectedCell.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this.render.removeClass(n, CELL_SELECTED_CLS);
                }));
            }
        }
        this.dg.removeCellSelectedCls();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.setCellClsWithEditorType = /**
     * @private
     * @return {?}
     */
    function () {
        // 设置当前选中单元格样式
        if (this.dg.currentCell && this.dg.enableHighlightCell) {
            if (this.dg.currentCell.field === this.column.field && this.dg.currentCell.rowId === this.rowData[this.dg.idField] && !this.dc.isEditing) {
                this.clearCellSelectedClass();
                this.render.addClass(this.el.nativeElement, CELL_SELECTED_CLS);
            }
        }
        if (!this.dg.enableEditCellStyle) {
            return;
        }
        /** @type {?} */
        var td = this.el.nativeElement;
        this.cleanOtherEditorIcon(td);
        // 当前行禁用，不允许编辑。
        if (this.dr.disabled) {
            return;
        }
        if (!this.column.editor) {
            return;
        }
        if (this.isReadonly()) {
            return;
        }
        /** @type {?} */
        var editorType = this.column.editor.type;
        /** @type {?} */
        var cls = this.column.align === 'right' ? 'allow-edit-cell-left' : 'allow-edit-cell';
        this.render.addClass(td, cls);
        this.render.addClass(td, ALLOW_EDIT_CELL_HIGHLIGHT_CLS[editorType]);
    };
    /**
     * @private
     * @param {?} td
     * @return {?}
     */
    DatagridCellEditableDirective.prototype.cleanOtherEditorIcon = /**
     * @private
     * @param {?} td
     * @return {?}
     */
    function (td) {
        /** @type {?} */
        var values = Object.values(ALLOW_EDIT_CELL_HIGHLIGHT_CLS);
        values.forEach((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (td.className.indexOf(v) > -1) {
                td.className = td.className.replace('allow-edit-cell-left', '').replace('allow-edit-cell', '');
                td.className = td.className.replace(v, '');
            }
        }));
    };
    DatagridCellEditableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[cell-editable]',
                    exportAs: 'cellEditable'
                },] }
    ];
    /** @nocollapse */
    DatagridCellEditableDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridComponent; })),] }] },
        { type: NgZone }
    ]; };
    DatagridCellEditableDirective.propDecorators = {
        rowData: [{ type: Input, args: ['cell-editable',] }],
        column: [{ type: Input }],
        dc: [{ type: ContentChild, args: [DatagridCellComponent,] }]
    };
    return DatagridCellEditableDirective;
}());
export { DatagridCellEditableDirective };
if (false) {
    /** @type {?} */
    DatagridCellEditableDirective.prototype.rowData;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.column;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.clickTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.celldblclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.bindCellEventSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.editorInputKeydownEvent;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.editor;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.formControl;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.cellEditorRef;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.dc;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dgb;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dr;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellEditorCreatedSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellEditorDestorySubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.injector;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.render;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.dg;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,