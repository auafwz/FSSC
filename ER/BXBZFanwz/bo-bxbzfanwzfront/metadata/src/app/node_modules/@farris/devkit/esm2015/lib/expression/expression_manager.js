import { Inject, Injectable, Injector } from "@angular/core";
import { BigNumber } from 'bignumber.js';
import { EMPTY, of } from "rxjs";
import { FrameContext } from "../frame/index";
import { Repository } from "../repository/index";
import { ENTITY_TEMPLATE, ResolveService } from "../resolver/index";
import { ExpressionUtil } from "../utils/expression_util";
import { ExpressionExecutor } from "./expression_executor";
import { ExpressionRegistry } from "./expression_registry";
import { Expression } from './types';
import { ExpressionResult } from "./expression_result";
import { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from "../core/index";
import { TranslateToken } from "../i18n";
export class ExpressionManager {
    constructor(injector, resolveService, expressionExecutor, expressionRegistry, expressionResult, messageService, notifyService) {
        this.injector = injector;
        this.resolveService = resolveService;
        this.expressionExecutor = expressionExecutor;
        this.expressionRegistry = expressionRegistry;
        this.expressionResult = expressionResult;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.frameContext = null;
        this.frameContext = this.injector.get(FrameContext, null);
    }
    /**
     * 根据表达式id进行计算
     * @param expressionId 表达式id
     * @param viewModel viewModel
     * @param rowData rowData
     * @returns
     */
    eval(expressionId, viewModel, rowData) {
        const expressionObject = this.expressionRegistry.getExpressionById(expressionId);
        if (expressionObject) {
            const customContext = {};
            const bindingPath = viewModel && viewModel.bindingPath || null;
            if (bindingPath && rowData) {
                const bindingPaths = bindingPath.split('/').filter(p => p);
                const bindingList = this.frameContext.bindingData.getValue(bindingPaths);
                let primaryKey = 'id';
                if (bindingList) {
                    primaryKey = bindingList.primaryKey;
                }
                const primaryValue = rowData[primaryKey] || bindingList.currentId;
                if (primaryValue) {
                    customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue }];
                }
            }
            let result = this.execute(expressionObject.expression, customContext);
            if (expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Visible) {
                result = result === true ? true : false;
            }
            this.expressionResult.set(expressionId, result);
            return result;
        }
        else {
            // console.warn('ExpressionManager 执行失败，未获取到表达式!');
        }
        return undefined;
    }
    validate(expressionId, options) {
        const expressionObject = this.expressionRegistry.getExpressionById(expressionId);
        if (expressionObject) {
            const patch = options && options.patch || null;
            const customContext = {};
            if (patch) {
                customContext.patch = patch;
            }
            const currentRow = options.currentRow || null;
            const currentRows = options.currentRows || [];
            if (currentRow) {
                customContext.currentRows = customContext.currentRows || [];
                customContext.currentRows.push(currentRow);
            }
            if (currentRows && currentRows.length > 0) {
                customContext.currentRows = customContext.currentRows || [];
                Array.prototype.push.apply(customContext.currentRows, currentRows);
            }
            const result = this.execute(expressionObject.expression, customContext);
            this.expressionResult.set(expressionId, result);
            return result;
        }
        else {
            console.warn('ExpressionManager 执行失败，未获取到表达式!');
        }
        return undefined;
    }
    /**
     * 帮助前封装
     * @param event
     */
    onDataPicking(configs) {
        const expressionId = configs && configs.expressionId || null;
        if (!expressionId) {
            console.warn(`ExpressionManager 相关表达式设置错误，没有表达式编号。`);
            return of(true);
        }
        const result = this.eval(expressionId);
        if (!result) {
            const expressionObject = this.expressionRegistry.getExpressionById(expressionId);
            if (!expressionObject) {
                console.warn(`ExpressionManager 无法找到对应的表达式${expressionId}`);
                return of(true);
            }
            const messageType = expressionObject.messageType || Expression.MessageType.warning;
            const message = expressionObject.message;
            if (message) {
                this.notifyService[messageType](message, { hideTitle: true });
            }
            return EMPTY;
        }
        return of(result);
    }
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    execute(expression, customContext) {
        const deps = this.resolveService.resolve(expression);
        const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);
        const entityContext = this.buildEntityContext(deps, groupDependencies, customContext);
        const stateContext = this.buildStateContext();
        const data = customContext && customContext.contexts || null;
        const translate = this.injector.get(TranslateToken, null);
        const context = Object.assign({ [this.entityOriginalNodeCode]: entityContext }, stateContext, { BigNumber, frameContext: this.frameContext, bindingData: this.frameContext.bindingData, repository: this.frameContext.repository, CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS' }, data);
        if (!entityContext) {
            return undefined;
        }
        return this.expressionExecutor.eval(expression, context);
    }
    /**
     * 执行表达式（返回可观察对象）
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    executeAsync(expression, customContext) {
        const result = this.execute(expression, customContext);
        return of(result);
    }
    /**
     * 构造实体上下文
     * @param deps
     * @param groupDependencies
     * @param context
     * @returns
     */
    buildEntityContext(deps, groupDependencies, context) {
        const currentRows = context && context.currentRows || null;
        const index = deps.findIndex((dep) => {
            const isEntityDependency = this.isEntityDependency(dep);
            // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系
            // 表达式依赖了实体
            if (isEntityDependency) {
                const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;
                // 是聚合依赖
                if (isGroupDependency) {
                    const dependencyLength = dep.split('/').filter(p => p).length - 1;
                    if (dependencyLength === 1) {
                        // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。
                        return true;
                    }
                    else {
                        // 聚合了子表字段，只需要传递当前实体
                        return false;
                    }
                }
                else {
                    // 当前依赖不是聚合，只需要传递当前实体
                    return false;
                }
            }
            return false;
        });
        const isGroupdMainEntity = index !== -1;
        const options = {};
        if (currentRows && currentRows.length > 0) {
            currentRows.forEach((currentRow) => {
                options[currentRow.bindingPath || '/'] = currentRow.primaryValue;
            });
        }
        const entity = this.getEntity(options);
        const patch = context && context.patch || null;
        if (!entity) {
            return null;
        }
        if (patch && Object.keys(patch).length > 0) {
            Object.keys(patch).forEach((key) => {
                const paths = key.split('/').filter(p => p);
                const value = patch[key];
                this.setValue(entity, paths, value);
            });
        }
        if (isGroupdMainEntity) {
            const collection = this.frameContext.repository.entityCollection.toJSON();
            entity['__type__'] = 'List';
            entity['__items__'] = collection;
        }
        return entity;
    }
    setValue(target, paths, value) {
        if (paths.length === 1) {
            target[paths[0]] = value;
        }
        else {
            const propertyName = paths.pop();
            const result = paths.reduce((object, path) => {
                return object && object[path];
            }, target);
            result[propertyName] = value;
        }
    }
    /**
     * 是否为实体依赖
     * @param dep
     * @returns
     */
    isEntityDependency(dep) {
        return dep.startsWith(ENTITY_TEMPLATE);
    }
    /**
     * 获取实体
     * @param options
     * @returns
     */
    getEntity(options) {
        const entityTypeInfo = this.frameContext.repository.entityTypeInfo;
        const bindingData = this.frameContext.bindingData;
        const childrenEntityPaths = [];
        let entity = null;
        if (options['/']) {
            // 修正主表
            entity = this.frameContext.bindingData.list.findById(options['/']);
            if (entity) {
                entity = entity.toJSON();
            }
        }
        else {
            entity = this.frameContext.bindingData.list.currentItem.toJSON();
        }
        if (!entity) {
            return null;
        }
        ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
        entity['__type__'] = 'Entity';
        if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
            return entity;
        }
        // 找到所有子表
        childrenEntityPaths.forEach((paths) => {
            let row = null;
            if (options && options[paths.join('/')]) {
                const parentPaths = paths.slice(0, 1);
                if (paths.length == 2 && options[parentPaths.join('/')]) {
                    const parentRow = options[parentPaths.join('/')];
                    // 从从表
                    // 需要切换上级表
                    row = this.getPropertyValue(entity, parentPaths.concat([parentRow, paths[1], options[paths.join('/')]]));
                }
                else {
                    // 不应该使用bindingData，这样就默认使用了当前行
                    const bindingList = bindingData.getValue(paths);
                    const currentRowId = options[paths.join('/')];
                    let currentRow = null;
                    if (currentRowId !== bindingList.currentId) {
                        currentRow = bindingList.findById(currentRowId);
                    }
                    else {
                        currentRow = bindingList.currentItem;
                    }
                    if (currentRow && currentRow.primaryKeyValue) {
                        row = currentRow.toJSON();
                    }
                }
            }
            else {
                // 如果上级表已经切换了当前行，那么下级表也应该切换
                const parentTableCurrentRowChanged = options && !!Object.keys(options).find(path => {
                    const fullPath = path.split('/').join('/');
                    return paths.join('/').startsWith(fullPath);
                }) || false;
                if (parentTableCurrentRowChanged) {
                    const primaryValue = options && options['/'] || bindingData.list.currentId;
                    const entity = this.frameContext.repository.entityCollection.getEntityById(primaryValue);
                    const fullPaths = [];
                    const data = paths.reduce((object, path) => {
                        fullPaths.push(path);
                        const item = object && object[path];
                        if (item) {
                            const currentRowId = options && options[fullPaths.join('/')] || item.items[0] && item.items[0].primaryValue || null;
                            if (currentRowId) {
                                const currentRow = item.get(currentRowId);
                                return currentRow || null;
                            }
                        }
                        return null;
                    }, entity);
                    if (data) {
                        row = data.toJSON();
                    }
                    else {
                        row = {};
                    }
                }
                else {
                    row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);
                }
            }
            const propertyName = paths.pop();
            let parent = paths.reduce((object, path) => {
                return object && object[path] || null;
            }, entity);
            const list = parent[propertyName];
            const node = Object.assign({ __items__: [] }, row && row || {}, { __type__: 'List' });
            node.length = () => node.__items__.length;
            if (list && Array.isArray(list)) {
                node.__items__ = [].concat(list);
            }
            parent[propertyName] = node;
        });
        return entity;
    }
    getPropertyValue(entity, paths) {
        return paths.reduce((object, path) => {
            if (object['__type__'] === 'List') {
                return object['__items__'].find(item => item.id === path);
            }
            else if (Array.isArray(object)) {
                return object.find(item => item.id === path);
            }
            else {
                return object && object[path];
            }
        }, entity);
    }
    /**
     * 获取主实体原始字段名
     */
    get entityOriginalNodeCode() {
        const repository = this.injector.get(Repository);
        return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;
    }
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext() {
        const result = {};
        if (this.frameContext) {
            const rootFrameContext = this.frameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                const uiState = rootFrameContext.viewModel.uiState;
                const propertyNames = Object.getOwnPropertyNames(uiState) || [];
                propertyNames.forEach((prop) => {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState[prop];
                    }
                });
            }
        }
        return result;
    }
}
ExpressionManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExpressionManager.ctorParameters = () => [
    { type: Injector },
    { type: ResolveService },
    { type: ExpressionExecutor },
    { type: ExpressionRegistry },
    { type: ExpressionResult },
    { type: undefined, decorators: [{ type: Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NOTIFY_SERVICE_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,