/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class TreeNodeHelper {
    /**
     * @param {?} instance
     */
    constructor(instance) {
        this.instance = instance;
        this.flatAllNodes = [];
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    getTreeInfo(treeNode) {
        if (treeNode.data[this.treeInfo.dataField]) {
            return treeNode.data[this.treeInfo.dataField];
        }
        /** @type {?} */
        const data = treeNode.data;
        if (data && this.treeInfo.dataField) {
            /** @type {?} */
            const treeInfoDataField = this.treeInfo.dataField.toLowerCase();
            /** @type {?} */
            const dataField = Object.keys(treeNode.data).find((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return n.toLowerCase() === treeInfoDataField;
            }));
            if (dataField) {
                return data[dataField];
            }
            else {
                console.error(`未找到树形信息数据字段【${this.treeInfo.dataField}】`);
            }
        }
        else {
            console.error(`未找到树形信息数据字段【${this.treeInfo.dataField}】`);
        }
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    getTreeNodeLayer(treeNode) {
        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];
    }
    /**
     * 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     * @param {?} treeNodes
     * @param {?=} treeInfo
     * @return {?}
     */
    updateTreeNodeExpanded(treeNodes, treeInfo = null) {
        if (treeInfo) {
            this.treeInfo = treeInfo;
        }
        else {
            this.treeInfo = this.instance.treeInfo;
        }
        /** @type {?} */
        const expandLevel = this.instance.expandLevel;
        if (expandLevel === -1) {
            return;
        }
        if (!this.flatAllNodes.length) {
            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);
        }
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        (tn) => {
            tn.expanded = this.shoudExpand(expandLevel, this.getTreeNodeLayer(tn));
            if (this.isSelectNodeParent(tn)) {
                tn.expanded = true;
            }
            if (tn.children && tn.children.length) {
                this.updateTreeNodeExpanded(tn.children, treeInfo);
            }
            else {
                tn.leaf = true;
            }
        }));
    }
    /**
     * @private
     * @param {?} parent
     * @param {?} nodes
     * @param {?} level
     * @param {?} parentIds
     * @return {?}
     */
    treeData2Flat(parent, nodes, level, parentIds) {
        /** @type {?} */
        const idField = this.instance.idField;
        /** @type {?} */
        let arr = [];
        if (nodes && nodes.length) {
            nodes.forEach((/**
             * @param {?} node
             * @param {?} index
             * @return {?}
             */
            (node, index) => {
                // node.parent = parent;
                // node.parent = parent;
                /** @type {?} */
                let parents = [];
                if (parent) {
                    /** @type {?} */
                    const parentID = parent.data[idField];
                    /** @type {?} */
                    const _parents = parentIds || [];
                    parents = parents.concat(_parents.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n)));
                    parents.push(parentID);
                }
                /** @type {?} */
                const rowNode = {
                    id: node.data[idField],
                    node,
                    level,
                    parents,
                };
                arr.push(rowNode);
                arr = arr.concat(this.treeData2Flat(node, node.children, level + 1, parents));
            }));
        }
        return arr;
    }
    /**
     * @private
     * @param {?} expandLevel
     * @param {?} nodeLayer
     * @return {?}
     */
    shoudExpand(expandLevel, nodeLayer) {
        if (expandLevel === -1) {
            // -1 为不展开
            return false;
        }
        else if (expandLevel === 0) {
            // 0 为全部展开
            return true;
        }
        else {
            // 没有启用分层加载，通过展开层级确定是否展开该节点
            return nodeLayer <= expandLevel;
        }
    }
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    isSelectNodeParent(treeNode) {
        if (this.instance.navSelectedIds) {
            /** @type {?} */
            const allParentIds = this.flatAllNodes.find((/**
             * @param {?} f
             * @return {?}
             */
            f => f.id === this.instance.navSelectedIds)).parents;
            if (allParentIds && allParentIds.length) {
                return allParentIds.includes(treeNode.id);
            }
            return false;
        }
        return false;
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    getLeafNode(treeNode) {
        if (treeNode && (!treeNode.children || !treeNode.children.length)) {
            return treeNode;
        }
        else {
            if (treeNode.children.length === 1) {
                return this.getLeafNode(treeNode.children[0]);
            }
            else {
                return treeNode.children;
            }
        }
    }
    /**
     * @param {?} items
     * @param {?=} result
     * @return {?}
     */
    flatTreeNodes(items, result = []) {
        items = items || [];
        return items.reduce((/**
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        (c, n) => {
            c.push(n);
            if (n.children && n.children.length) {
                this.flatTreeNodes(n.children, c);
            }
            return c;
        }), result);
    }
}
if (false) {
    /** @type {?} */
    TreeNodeHelper.prototype.treeInfo;
    /** @type {?} */
    TreeNodeHelper.prototype.flatAllNodes;
    /**
     * @type {?}
     * @private
     */
    TreeNodeHelper.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,