export class MessageManager {
    // private parent:Window;
    // private children = new Map<string,Window>();
    constructor() {
    }
    /**
     * 获取当前window上的MessageManager对象
     */
    static getMessager() {
        if (!window['igix_messagemanager']) {
            window['igix_messagemanager'] = new MessageManager();
        }
        return window['igix_messagemanager'];
    }
    // addParentTarget(target: Window){
    //     this.parent = target;
    // }
    // addChildTarget(key: string,target: Window){
    //     this.children.set(key,target);
    // }
    listner(callbackfn) {
        window.addEventListener('message', function (e) {
            const data = e.data;
            data.sender = e.source;
            callbackfn(data);
        });
    }
    // listnerMessage(targetId: string,callbackfn: (e: any) => any){
    //     const win = this.children.get(targetId);
    //     if(!win){
    //         throw Error('This TargetId Can Not Find Window Object');
    //     }
    //     win.addEventListener('message',async function(e){
    //         await callbackfn(e);
    //     });
    // }
    send(msg) {
        // const win = this.children.get(targetId);
        let win;
        if (msg.target) {
            win = msg.target;
            delete msg.target;
        }
        else {
            win = window;
        }
        win.postMessage(msg, '*');
    }
    setAppContext(appContext) {
        this.curAppContext = appContext;
    }
    getAppContext() {
        return this.curAppContext;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9tZXNzYWdlL21lc3NhZ2VtYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sT0FBTyxjQUFjO0lBR3ZCLHlCQUF5QjtJQUN6QiwrQ0FBK0M7SUFFL0M7SUFFQSxDQUFDO0lBR0Q7O09BRUc7SUFDSCxNQUFNLENBQUMsV0FBVztRQUNkLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRTtZQUNoQyxNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsbUNBQW1DO0lBQ25DLDRCQUE0QjtJQUM1QixJQUFJO0lBRUosOENBQThDO0lBQzlDLHFDQUFxQztJQUNyQyxJQUFJO0lBRUosT0FBTyxDQUFDLFVBQW1DO1FBQ3ZDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBUyxDQUFDO1lBQ3pDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFtQixDQUFDO1lBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN2QixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsZ0VBQWdFO0lBQ2hFLCtDQUErQztJQUMvQyxnQkFBZ0I7SUFDaEIsbUVBQW1FO0lBQ25FLFFBQVE7SUFFUix3REFBd0Q7SUFDeEQsK0JBQStCO0lBQy9CLFVBQVU7SUFDVixJQUFJO0lBRUosSUFBSSxDQUFDLEdBQWdCO1FBQ2pCLDJDQUEyQztRQUMzQyxJQUFJLEdBQUcsQ0FBQztRQUNSLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNaLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBZ0IsQ0FBQztZQUMzQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUM7U0FDckI7YUFBTTtZQUNILEdBQUcsR0FBRyxNQUFNLENBQUM7U0FDaEI7UUFFRCxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsYUFBYSxDQUFDLFVBQXNCO1FBQ2hDLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lc3NhZ2VCb2R5IH0gZnJvbSAnLi9tZXNzYWdlYm9keSc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAvYXBwX2NvbnRleHQnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZU1hbmFnZXIge1xyXG5cclxuICAgIHByaXZhdGUgY3VyQXBwQ29udGV4dDogQXBwQ29udGV4dDtcclxuICAgIC8vIHByaXZhdGUgcGFyZW50OldpbmRvdztcclxuICAgIC8vIHByaXZhdGUgY2hpbGRyZW4gPSBuZXcgTWFwPHN0cmluZyxXaW5kb3c+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5b2T5YmNd2luZG935LiK55qETWVzc2FnZU1hbmFnZXLlr7nosaFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldE1lc3NhZ2VyKCk6IE1lc3NhZ2VNYW5hZ2VyIHtcclxuICAgICAgICBpZiAoIXdpbmRvd1snaWdpeF9tZXNzYWdlbWFuYWdlciddKSB7XHJcbiAgICAgICAgICAgIHdpbmRvd1snaWdpeF9tZXNzYWdlbWFuYWdlciddID0gbmV3IE1lc3NhZ2VNYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3aW5kb3dbJ2lnaXhfbWVzc2FnZW1hbmFnZXInXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhZGRQYXJlbnRUYXJnZXQodGFyZ2V0OiBXaW5kb3cpe1xyXG4gICAgLy8gICAgIHRoaXMucGFyZW50ID0gdGFyZ2V0O1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGFkZENoaWxkVGFyZ2V0KGtleTogc3RyaW5nLHRhcmdldDogV2luZG93KXtcclxuICAgIC8vICAgICB0aGlzLmNoaWxkcmVuLnNldChrZXksdGFyZ2V0KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBsaXN0bmVyKGNhbGxiYWNrZm46IChlOiBNZXNzYWdlQm9keSkgPT4gYW55KSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLmRhdGEgYXMgTWVzc2FnZUJvZHk7XHJcbiAgICAgICAgICAgIGRhdGEuc2VuZGVyID0gZS5zb3VyY2U7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrZm4oZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGlzdG5lck1lc3NhZ2UodGFyZ2V0SWQ6IHN0cmluZyxjYWxsYmFja2ZuOiAoZTogYW55KSA9PiBhbnkpe1xyXG4gICAgLy8gICAgIGNvbnN0IHdpbiA9IHRoaXMuY2hpbGRyZW4uZ2V0KHRhcmdldElkKTtcclxuICAgIC8vICAgICBpZighd2luKXtcclxuICAgIC8vICAgICAgICAgdGhyb3cgRXJyb3IoJ1RoaXMgVGFyZ2V0SWQgQ2FuIE5vdCBGaW5kIFdpbmRvdyBPYmplY3QnKTtcclxuICAgIC8vICAgICB9XHJcblxyXG4gICAgLy8gICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJyxhc3luYyBmdW5jdGlvbihlKXtcclxuICAgIC8vICAgICAgICAgYXdhaXQgY2FsbGJhY2tmbihlKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBzZW5kKG1zZzogTWVzc2FnZUJvZHkpIHtcclxuICAgICAgICAvLyBjb25zdCB3aW4gPSB0aGlzLmNoaWxkcmVuLmdldCh0YXJnZXRJZCk7XHJcbiAgICAgICAgbGV0IHdpbjtcclxuICAgICAgICBpZiAobXNnLnRhcmdldCkge1xyXG4gICAgICAgICAgICB3aW4gPSBtc2cudGFyZ2V0IGFzIFdpbmRvdztcclxuICAgICAgICAgICAgZGVsZXRlIG1zZy50YXJnZXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luID0gd2luZG93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2luLnBvc3RNZXNzYWdlKG1zZywgJyonKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBcHBDb250ZXh0KGFwcENvbnRleHQ6IEFwcENvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmN1ckFwcENvbnRleHQgPSBhcHBDb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFwcENvbnRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VyQXBwQ29udGV4dDtcclxuICAgIH1cclxufSJdfQ==