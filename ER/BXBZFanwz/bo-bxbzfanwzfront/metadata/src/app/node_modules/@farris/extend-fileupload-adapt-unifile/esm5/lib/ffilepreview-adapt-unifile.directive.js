/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';
var FFilePreviewAdaptUnifileDirective = /** @class */ (function () {
    function FFilePreviewAdaptUnifileDirective(previewSer) {
        this.previewSer = previewSer;
        /**
         * 处理扩展的服务器端配置
         */
        this._extendServeConfig = null;
    }
    /**
     * 捕获预览事件
     * @param fileInfo
     */
    /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    FFilePreviewAdaptUnifileDirective.prototype.filePreviewEventHandler = /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    function (fileInfo) {
        this.previewSer.previewFile(fileInfo, this.extendServerConfig);
    };
    /**
     * 捕获下载事件
     * @param fileInfo
     */
    /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    FFilePreviewAdaptUnifileDirective.prototype.fileDownloadEventHandler = /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    function (downloadEv) {
        // 如果是批量下载, downloadEv={fileInfos:[],name:}
        if (downloadEv && downloadEv['fileInfos'].length > 0) {
            if (downloadEv['fileInfos'].length > 1) {
                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'], downloadEv['name'], this.extendServerConfig);
            }
            else {
                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);
            }
        }
    };
    Object.defineProperty(FFilePreviewAdaptUnifileDirective.prototype, "extendServerConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extendServeConfig;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._extendServeConfig = value;
            this.previewSer.setPreviwExtendServerConfig(value);
        },
        enumerable: true,
        configurable: true
    });
    FFilePreviewAdaptUnifileDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fFilePreviewAdaptUnifile]',
                    providers: [FfilepreviewAdaptUnifileService]
                },] }
    ];
    /** @nocollapse */
    FFilePreviewAdaptUnifileDirective.ctorParameters = function () { return [
        { type: FfilepreviewAdaptUnifileService }
    ]; };
    FFilePreviewAdaptUnifileDirective.propDecorators = {
        filePreviewEventHandler: [{ type: HostListener, args: ['filePreviewEvent', ['$event'],] }],
        fileDownloadEventHandler: [{ type: HostListener, args: ['fileDownloadEvent', ['$event'],] }],
        extendServerConfig: [{ type: Input }]
    };
    return FFilePreviewAdaptUnifileDirective;
}());
export { FFilePreviewAdaptUnifileDirective };
if (false) {
    /**
     * 处理扩展的服务器端配置
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype._extendServeConfig;
    /**
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype.previewSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9leHRlbmQtZmlsZXVwbG9hZC1hZGFwdC11bmlmaWxlLyIsInNvdXJjZXMiOlsibGliL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUV2RjtJQXlDSSwyQ0FBb0IsVUFBMkM7UUFBM0MsZUFBVSxHQUFWLFVBQVUsQ0FBaUM7Ozs7UUFUdkQsdUJBQWtCLEdBQUMsSUFBSSxDQUFDO0lBV2hDLENBQUM7SUF0Q0Q7OztPQUdHOzs7Ozs7SUFFSCxtRUFBdUI7Ozs7O0lBRHZCLFVBQ3dCLFFBQVE7UUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFDRDs7O09BR0c7Ozs7OztJQUVILG9FQUF3Qjs7Ozs7SUFEeEIsVUFDeUIsVUFBVTtRQUMvQiwyQ0FBMkM7UUFDM0MsSUFBSSxVQUFVLElBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUU7WUFDOUMsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3BIO2lCQUFJO2dCQUNELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzthQUNyRjtTQUNKO0lBQ0wsQ0FBQztJQU1ELHNCQUNJLGlFQUFrQjs7OztRQUl0QjtZQUNJLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ25DLENBQUM7Ozs7O1FBUEQsVUFDdUIsS0FBSztZQUN4QixJQUFJLENBQUMsa0JBQWtCLEdBQUMsS0FBSyxDQUFDO1lBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsMkJBQTJCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsQ0FBQzs7O09BQUE7O2dCQXJDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsU0FBUyxFQUFDLENBQUMsK0JBQStCLENBQUM7aUJBQzlDOzs7O2dCQUxRLCtCQUErQjs7OzBDQVduQyxZQUFZLFNBQUMsa0JBQWtCLEVBQUUsQ0FBQyxRQUFRLENBQUM7MkNBUTNDLFlBQVksU0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQztxQ0FnQjVDLEtBQUs7O0lBWVYsd0NBQUM7Q0FBQSxBQTdDRCxJQTZDQztTQXpDWSxpQ0FBaUM7Ozs7Ozs7SUE0QjFDLCtEQUFnQzs7Ozs7SUFTcEIsdURBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UgfSBmcm9tICcuL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVdJyxcclxuICAgIHByb3ZpZGVyczpbRmZpbGVwcmV2aWV3QWRhcHRVbmlmaWxlU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZGaWxlUHJldmlld0FkYXB0VW5pZmlsZURpcmVjdGl2ZSB7XHJcbiAgICAvKipcclxuICAgICAqIOaNleiOt+mihOiniOS6i+S7tlxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIFxyXG4gICAgICovXHJcbiAgICBASG9zdExpc3RlbmVyKCdmaWxlUHJldmlld0V2ZW50JywgWyckZXZlbnQnXSlcclxuICAgIGZpbGVQcmV2aWV3RXZlbnRIYW5kbGVyKGZpbGVJbmZvKSB7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3U2VyLnByZXZpZXdGaWxlKGZpbGVJbmZvLCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOaNleiOt+S4i+i9veS6i+S7tlxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIFxyXG4gICAgICovXHJcbiAgICBASG9zdExpc3RlbmVyKCdmaWxlRG93bmxvYWRFdmVudCcsIFsnJGV2ZW50J10pXHJcbiAgICBmaWxlRG93bmxvYWRFdmVudEhhbmRsZXIoZG93bmxvYWRFdikge1xyXG4gICAgICAgIC8vIOWmguaenOaYr+aJuemHj+S4i+i9vSwgZG93bmxvYWRFdj17ZmlsZUluZm9zOltdLG5hbWU6fVxyXG4gICAgICAgIGlmIChkb3dubG9hZEV2JiZkb3dubG9hZEV2WydmaWxlSW5mb3MnXS5sZW5ndGg+MCkge1xyXG4gICAgICAgICAgICBpZiAoZG93bmxvYWRFdlsnZmlsZUluZm9zJ10ubGVuZ3RoPjEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlld1Nlci5tdWx0aURvd25sb2FkRmlsZXNXaWR0aE5hbWUoZG93bmxvYWRFdlsnZmlsZUluZm9zJ10sZG93bmxvYWRFdlsnbmFtZSddLCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3U2VyLmRvd25sb2FkRmlsZShkb3dubG9hZEV2WydmaWxlSW5mb3MnXVswXSwgdGhpcy5leHRlbmRTZXJ2ZXJDb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpITnkIbmianlsZXnmoTmnI3liqHlmajnq6/phY3nva5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfZXh0ZW5kU2VydmVDb25maWc9bnVsbDtcclxuICAgIEBJbnB1dCgpIFxyXG4gICAgc2V0IGV4dGVuZFNlcnZlckNvbmZpZyh2YWx1ZSl7XHJcbiAgICAgICAgdGhpcy5fZXh0ZW5kU2VydmVDb25maWc9dmFsdWU7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3U2VyLnNldFByZXZpd0V4dGVuZFNlcnZlckNvbmZpZyh2YWx1ZSk7XHJcbiAgICB9IFxyXG4gICAgZ2V0IGV4dGVuZFNlcnZlckNvbmZpZygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9leHRlbmRTZXJ2ZUNvbmZpZztcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJldmlld1NlcjogRmZpbGVwcmV2aWV3QWRhcHRVbmlmaWxlU2VydmljZSkge1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIl19