import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { FieldMetadataUtil } from '@farris/devkit';
/**
 * 路径树仓库
 */
class PathTreeRepository {
    /**
     * 添加兄弟节点
     */
    addSibling(repository, id) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSiblingUri = `${baseUri}/service/pathhierarchycreatesibling`;
        const body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加兄弟节点
     */
    addChild(repository, parentId) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addChildUri = `${baseUri}/service/pathhierarchycreatechildlayer`;
        const body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加子表兄弟节点
     */
    addSubSibling(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubSiblingUri = `${baseUri}/service/childnodepathhierarchycreatesibling`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    /**
    * 添加子表子节点
    */
    addSubChild(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubChildUri = `${baseUri}/service/childnodepathhierarchycreatechildlayer`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    getPaths(nodes, ids) {
        let paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (let i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + `/${ids[i]}`;
                    paths = paths + `/${nodes[i]}s`;
                }
            }
        }
        return paths;
    }
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    loadByParentId(repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow = false, pagination, frameContext, reload = false) {
        const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        const restService = repository.restService;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        const isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        const entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        const requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map((responseInfo) => {
            const paginationInfo = this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    }
    // tslint:disable-next-line: max-line-length
    loadFullTree(repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const queryUrl = `${baseUri}/service/parentidfulltreequery`;
        const pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        const body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType,
            loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap((responseInfo) => {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                const frameContext = context.frameContext;
                const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    const list = responseInfo.returnValue.result;
                    const selectedRowId = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);
                    const hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);
                }
            }
        }), map((responseInfo) => {
            const frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    }
    /**
     * 插入对父节点的过滤
     */
    buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        const parentFilterArray = [
            {
                "FilterField": `${originalHierarchyInfoKey}.Layer`,
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        // 父路径过滤，如果为空，则不添加（兼容oracle取数）
        const parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';
        if (parentPath) {
            parentFilterArray.push({
                "FilterField": `${originalHierarchyInfoKey}.Path`,
                "Value": parentPath,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 7
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    }
    buildEntityFilter(filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter) {
            filter = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].Relation = 0;
        }
        const entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 清空后代实体
     */
    clearDescendantEntities(repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow = false) {
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        const fPath = parentHierarchyInfo.path;
        const fLayer = parentHierarchyInfo.layer;
        if (frozenCurrentRow) {
            repository.entityCollection.removeData((entity) => {
                const hierarchyInfo = entity[hierarchyInfokey];
                const path = hierarchyInfo.path;
                const layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
        else {
            repository.entityCollection.removeEntities((entity) => {
                const hierarchyInfo = entity[hierarchyInfokey];
                const path = hierarchyInfo.path;
                const layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
    }
    /**
     * 获取实体的分级信息
     */
    getHierarchyInfoById(repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        const entity = repository.entityCollection.getEntityById(id);
        const hierarchyInfoEntity = entity[hierarchyInfokey];
        return hierarchyInfoEntity.toJSON();
    }
    /**
     * 获取分级码的原始的字段名
     */
    getOriginalHierarchyInfoKey(repository, hierarchyInfokey) {
        const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    }
    getPaginationInfo(responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    }
    findParent(hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(item => {
            const currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
        });
    }
    getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository) {
        let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        const ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    }
    getHierarchyInfo(entity, hierarchyInfoKey) {
        return entity[hierarchyInfoKey];
    }
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    getChildren(repository, hierarchyInfoKey, id) {
        const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        const layer = hierarchyInfo.layer;
        const path = hierarchyInfo.path;
        const entities = repository.entityCollection.getEntities((entity) => {
            const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);
            const matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    }
}
export { PathTreeRepository };
//# sourceMappingURL=data:application/json;base64,