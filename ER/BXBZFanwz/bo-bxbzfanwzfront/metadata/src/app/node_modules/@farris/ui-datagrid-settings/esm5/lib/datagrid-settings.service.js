/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
/** @type {?} */
export var GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
var DatagridSettingsService = /** @class */ (function () {
    function DatagridSettingsService(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this.gridInstance = null;
        this.gridRefs = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    DatagridSettingsService.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id && this.gridRefs && this.gridRefs[id]) {
            delete this.gridRefs[id];
        }
        else {
            this.gridRefs = null;
        }
    };
    /**
     * @param {?} dg
     * @return {?}
     */
    DatagridSettingsService.prototype.registerGridInstance = /**
     * @param {?} dg
     * @return {?}
     */
    function (dg) {
        if (!dg) {
            console.log('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        var id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    };
    /**
     * @param {?} dgID
     * @return {?}
     */
    DatagridSettingsService.prototype.getGridInstance = /**
     * @param {?} dgID
     * @return {?}
     */
    function (dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    };
    /**
     * @return {?}
     */
    DatagridSettingsService.prototype.getSearchTypes = /**
     * @return {?}
     */
    function () {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    };
    /**
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.showSimple = /**
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        var _this = this;
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            var simpleRef_1 = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef_1.hostView);
            simpleRef_1.instance.columns = columns;
            simpleRef_1.instance.seartTypes = searchTypes;
            simpleRef_1.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef_1.instance.top = 76;
            }
            document.body.appendChild(simpleRef_1.location.nativeElement);
            simpleRef_1.instance.closed.subscribe((/**
             * @return {?}
             */
            function () {
                simpleRef_1.location.nativeElement.remove();
                simpleRef_1.destroy();
                simpleRef_1 = null;
            }));
            simpleRef_1.instance.advanced.subscribe((/**
             * @return {?}
             */
            function () {
                _this.showAdvanced(gridInstance);
            }));
            simpleRef_1.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.target.disabled = true;
                if (_this.saving) {
                    return;
                }
                if (!_this.saving) {
                    _this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef_1.hostView.detectChanges();
            return simpleRef_1;
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.show = /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.showAdvanced = /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        var _this = this;
        /** @type {?} */
        var _editColSortInfo = true;
        /** @type {?} */
        var editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        var showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        var getActiveTabIndex = (/**
         * @return {?}
         */
        function () {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        var activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        var viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        var modalRef = null;
        /** @type {?} */
        var okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        var cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        var resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        var defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns: columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance: gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex: activeTabIndex
            },
            showButtons: false
        };
        /** @type {?} */
        var modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.target.disabled = true;
            if (_this.saving) {
                return;
            }
            if (!_this.saving) {
                _this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
        }));
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
            _this.showSimple(gridInstance);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.canSetColumnSort = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.hasEnableSortColumns = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        function (c, r) {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    DatagridSettingsService.prototype.isHeaderGroup = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    };
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.getChilds = /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, rowIndex, colStartIndex, colCount, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var childCols = [];
        /** @type {?} */
        var _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        function (c, i) {
            /** @type {?} */
            var n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: _this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    };
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumns2TreeData = /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            c.map((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                _.colspan = _.colspan || 1;
                return _;
            }));
            return c;
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            function (c, i) {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: _this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    DatagridSettingsService.prototype.checkViewTreeNodes = /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        var _this = this;
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                _this.checkViewTreeNodes(tn.children);
            }
        }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumnsToSimple = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        // 移除设置列
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        function (_cols) {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }));
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.resetGridView = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        var dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            var options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_1 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns_1.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns_1;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    };
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    DatagridSettingsService.prototype.updateGridView = /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    function (modalRef, gridInstance, btn) {
        var _this = this;
        if (btn === void 0) { btn = null; }
        /** @type {?} */
        var settings = modalRef.content;
        if (settings) {
            /** @type {?} */
            var key = this.createConfigKey(gridInstance.id);
            var sortInfo_1 = settings.sortInfo, viewColumns_1 = settings.viewColumns, columnFormat_1 = settings.columnFormat, groupFields = settings.groupFields;
            this.saving = true;
            /** @type {?} */
            var groupField = '';
            if (gridInstance.groupRows && groupFields && groupFields.length) {
                groupField = groupFields.join(',');
            }
            gridInstance.groupField = groupField;
            this.setUserConfig(key, { sortInfo: sortInfo_1, viewColumns: viewColumns_1, groupField: groupField, columnFormat: columnFormat_1 }).subscribe((/**
             * @return {?}
             */
            function () {
                if (btn) {
                    btn.disabled = false;
                }
                _this.saving = false;
                modalRef.close();
                if (sortInfo_1 && Object.keys(sortInfo_1).length) {
                    var sortName = sortInfo_1.sortName, sortOrder = sortInfo_1.sortOrder;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                if (viewColumns_1 && viewColumns_1.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    function (cols) {
                        _this.updateColumnFormat(cols, columnFormat_1, gridInstance);
                        return _this.newVisibleOrderColumns(cols, viewColumns_1, columnFormat_1);
                    }));
                }
                gridInstance.columnsChanged(true);
            }));
        }
        else {
            modalRef.close();
        }
    };
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @return {?}
     */
    DatagridSettingsService.prototype.newVisibleOrderColumns = /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @return {?}
     */
    function (cols, viewColumns, columnFormat) {
        var _this = this;
        /** @type {?} */
        var hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (_this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_') {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        var newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === field; }));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c && c.field && c.field !== '_datagrid-setting-control_'; }));
    };
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    DatagridSettingsService.prototype.isNewAddColumn = /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    function (field, columns) {
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field === field; }));
    };
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.updateColumnFormat = /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                /** @type {?} */
                var formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.field === col.field; }));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    };
    // 创建唯一key, 由uri + gridId 组成，并混淆
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.createConfigKey = 
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            console.log('DatagridSettingService: Can not find the grid instance.');
        }
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.saveUserConfig = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            var sortName = gridInstance.sortName, sortOrder = gridInstance.sortOrder, columns = gridInstance.columns;
            if (sortName) {
                /** @type {?} */
                var sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            var viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible || n.visible === undefined; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(columns)[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return this.setUserConfig(key, config);
    };
    /**
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype.setUserConfig = /**
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        var currentConfig = localStorage.getItem(key);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype.getUserConfig = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            var config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                var con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    };
    /**
     * @param {?} gridID
     * @return {?}
     */
    DatagridSettingsService.prototype.getSettings = /**
     * @param {?} gridID
     * @return {?}
     */
    function (gridID) {
        /** @type {?} */
        var key = this.createConfigKey(gridID);
        return this.getUserConfig(key);
    };
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype._saveUserConfig = /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        try {
            /** @type {?} */
            var userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            console.error(e);
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    DatagridSettingsService.prototype.resetUserConfig = /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    function (gridInstance, modalRef) {
        var _this = this;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                /** @type {?} */
                var key = _this.createConfigKey(gridInstance.id);
                return _this.setUserConfig(key, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype._getUserConfig = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                var _a;
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    var c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[_this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[_this.localeSer.localeId];
                        }
                        else {
                            localStorage.setItem(key, JSON.stringify((_a = {}, _a[_this.localeSer.localeId] = c, _a)));
                            if (Object.keys(c).indexOf('viewColumns') > -1) {
                                return c;
                            }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            console.error(e);
        }
    };
    DatagridSettingsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridSettingsService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: IdService },
        { type: LocaleService }
    ]; };
    return DatagridSettingsService;
}());
export { DatagridSettingsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notSupportHeaderGroupMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /** @type {?} */
    DatagridSettingsService.prototype.httpRestService;
    /** @type {?} */
    DatagridSettingsService.prototype.gridInstance;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
}
//# sourceMappingURL=data:application/json;base64,