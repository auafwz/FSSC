{"version":3,"sources":["ng://@farris/command-services/lib/form-loading/hide-event.service.ts","ng://@farris/command-services/lib/form-loading/form-loading.service.ts","ng://@farris/command-services/lib/languages/language-message-en.ts","ng://@farris/command-services/lib/languages/language-message-zh.ts","ng://@farris/command-services/lib/languages/language-message-zhft.ts","ng://@farris/command-services/lib/languages/language-message-factory.ts","ng://@farris/command-services/lib/languag.service.ts","node_modules/tslib/tslib.es6.js","ng://@farris/command-services/lib/util/device-ability.ts","ng://@farris/command-services/lib/error/exception_strategy.ts","ng://@farris/command-services/lib/error/exception_strategy_factory.ts","ng://@farris/command-services/lib/util/http.ts","ng://@farris/command-services/lib/error/form-error.service.ts","ng://@farris/command-services/lib/form-message.service.ts","ng://@farris/command-services/lib/form-notify.service.ts","ng://@farris/command-services/lib/form-wizard.service.ts","ng://@farris/command-services/lib/check.service.ts","ng://@farris/command-services/lib/data-check.service.ts","ng://@farris/command-services/lib/event.service.ts","ng://@farris/command-services/lib/menu-state.service.ts","ng://@farris/command-services/lib/router.service.ts","ng://@farris/command-services/lib/types.ts","ng://@farris/command-services/lib/querystring.ts","ng://@farris/command-services/lib/rtf-service.ts","ng://@farris/command-services/lib/navigation-event.service.ts","ng://@farris/command-services/lib/farris-form.service.ts","ng://@farris/command-services/lib/navigation.service.ts","ng://@farris/command-services/lib/data-services/utils/edit-state.util.ts","ng://@farris/command-services/lib/form-notify-strategy.service.ts","ng://@farris/command-services/lib/command-service.ts","ng://@farris/command-services/lib/validation.service.ts","ng://@farris/command-services/lib/data-services/card-data.service.ts","ng://@farris/command-services/lib/navigation-middleware.service.ts","ng://@farris/command-services/lib/grid.middleware.service.ts","ng://@farris/command-services/lib/param.service.ts","ng://@farris/command-services/lib/keybinding-service.ts","ng://@farris/command-services/lib/filter-condition.service.ts","ng://@farris/command-services/lib/ui-state.service.ts","ng://@farris/command-services/lib/state-machine.service.ts","ng://@farris/command-services/lib/binding-data.service.ts","ng://@farris/command-services/lib/application-param.service.ts","ng://@farris/command-services/lib/entity-services/entity-traversing.service.ts","ng://@farris/command-services/lib/entity-services/entity-manipulation.service.ts","ng://@farris/command-services/lib/entity-services/entity-aggregation.service.ts","ng://@farris/command-services/lib/entity-services/entity-list.service.ts","ng://@farris/command-services/lib/entity-services/entity.service.ts","ng://@farris/command-services/lib/binding-path.service.ts","ng://@farris/command-services/lib/form-control.service.ts","ng://@farris/command-services/lib/frame-context.service.ts","ng://@farris/command-services/lib/focus-invalid.service.ts","ng://@farris/command-services/lib/change-item.service.ts","ng://@farris/command-services/lib/data-services/list-data.service.ts","ng://@farris/command-services/lib/data-services/sub-list-data.service.ts","ng://@farris/command-services/lib/data-services/base-data.service.ts","ng://@farris/command-services/lib/data-services/tree-table/util/parent-tree.util.ts","ng://@farris/command-services/lib/data-services/tree-table/util/path-tree.util.ts","ng://@farris/command-services/lib/data-services/tree-table/util/tree-util-factory.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/parent-tree-repository.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/path-tree-repository.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/tree-repository-factory.ts","ng://@farris/command-services/lib/data-services/tree-data.service.ts","ng://@farris/command-services/lib/data-services/filter-condition-data.service.ts","ng://@farris/command-services/lib/data-services/edit-data.service.ts","ng://@farris/command-services/lib/data-services/remove-data.service.ts","ng://@farris/command-services/lib/data-services/save-data.service.ts","ng://@farris/command-services/lib/data-services/sub-tree-data-service.ts","ng://@farris/command-services/lib/be-action.service.ts","ng://@farris/command-services/lib/approve.service.ts","ng://@farris/command-services/lib/print.service.ts","ng://@farris/command-services/lib/attachment/attachment.util.ts","ng://@farris/command-services/lib/attachment/attachment-data.service.ts","ng://@farris/command-services/lib/attachment/attachment.service.ts","ng://@farris/command-services/lib/attachment/file.service.ts","ng://@farris/command-services/lib/dialog.service.ts","ng://@farris/command-services/lib/sidebar-service.ts","ng://@farris/command-services/lib/filter-service.ts","ng://@farris/command-services/lib/component-manager.service.ts","ng://@farris/command-services/lib/authority/authority.service.ts","ng://@farris/command-services/lib/authority/authority.ts","ng://@farris/command-services/lib/exception.handler.ts","ng://@farris/command-services/lib/providers/legacy_providers.ts","ng://@farris/command-services/lib/user-settings.service.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.service.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.handler.ts","ng://@farris/command-services/lib/providers/module_providers.ts","ng://@farris/command-services/lib/query-solution/enum/compare-type.enum.ts","ng://@farris/command-services/lib/query-solution/enum/value-type.enum.ts","ng://@farris/command-services/lib/query-solution/enum/relation-type.enum.ts","ng://@farris/command-services/lib/query-solution/handlers/text.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/daterage.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/dropdown.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/numberrage.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/smarthelp.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-year.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/checkbox.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-month.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/monthrange.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-date-time.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-number.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-date.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/combolookup.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/radio.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/inputgroup.handler.ts","ng://@farris/command-services/lib/query-solution/querycondition.handler.factory.ts","ng://@farris/command-services/lib/query-solution/query-solution.service.ts","ng://@farris/command-services/lib/end-edit.service.ts","ng://@farris/command-services/lib/remote-summary.service.ts","ng://@farris/command-services/lib/batch-edit.service.ts","ng://@farris/command-services/lib/discussion-group.service.ts","ng://@farris/command-services/lib/list-filter/list-filter.service.ts","ng://@farris/command-services/lib/manifest/form_manifest_service.ts","ng://@farris/command-services/lib/manifest/form_expression_manifest_service.ts","ng://@farris/command-services/lib/localization.service.ts","ng://@farris/command-services/lib/service.ts","ng://@farris/command-services/lib/data-grid.service.ts","ng://@farris/command-services/lib/form-attention.service.ts","ng://@farris/command-services/lib/feature-edit/types.ts","ng://@farris/command-services/lib/feature-edit/feature-repository.ts","ng://@farris/command-services/lib/feature-edit/feature-data.service.ts","ng://@farris/command-services/lib/feature-edit/feature-edit.service.ts","ng://@farris/command-services/lib/expression_service.ts","ng://@farris/command-services/lib/dirty-checking.service.ts","ng://@farris/command-services/lib/pop_up.service.ts","ng://@farris/command-services/lib/form.service.ts","ng://@farris/command-services/lib/view-model.service.ts","ng://@farris/command-services/lib/pagination.service.ts","ng://@farris/command-services/lib/providers/frame_providers.ts","ng://@farris/command-services/lib/providers/dynamic_providers.ts","ng://@farris/command-services/lib/command-services-module.ts","ng://@farris/command-services/lib/rtf-message/message-pipe.ts","ng://@farris/command-services/lib/rtf-message/message-pipe-service.ts","ng://@farris/command-services/lib/back_end_message_handler.ts"],"names":["HideEventService","Injectable","this","hideEvent","Subject","FormLoadingService","prototype","setSuspend","flag","isSuspend","show","configOrMessage","loadingCmp","close","loadingConfig","buildLoadingConfig","loadingService","showLoadingWithDelay","delayTime","_this","timerId","setTimeout","loadingTimerIds","push","hideDelayLoading","timerIdToClear","clearLoadingTimer","hide","message","hasOwnProperty","delay","clearAll","clearAllLoadingTimers","clearTimeout","filter","forEach","registerService","services","window","LoadingService","decorators","type","Optional","AppContext","hideEventService","applicationContext","subscribe","result","LanguageMessageForEn","yes","no","unsaveNotifyTitle","clientNotifyTitle","serverNotifyTitle","cancelApproveSuccess","cancelApproveFailed","unallowEmptyProcessInstanceName","unallowEmptyBizBillId","unallowEmptyChildBizBillId","bizDefKeyRequired","procInsIdRequired","addChildFailed","addSiblingFailed","addSubChildFailed","addSubSiblingFailed","deleteFailed","multiSaveFailed","appendFailed","queryFailed","cancelFailed","updateFailed","addFailed","loadFailed","saveSuccess","saveFailed","deleteSuccess","deleteFaild","confirmDeletion","submitSuccess","submitFaild","notifyTitle","httpError","gridDataNotSave","exitWithoutSave","notSupportMenuType","cancelWithoutSave","plsSelectDeleteData","errorHierarchyKey","plsSelectParentNode","deleteChildFirst","incorrectHierarchyConfig","operationFailed","plsSelectEditData","plsSelectViewData","plsUploadFirst","defaultDialogTitle","changeToFirst","changeToLast","noProcessInstanceId","noDataExist","noAttachment","confirm","cancel","plsSelectCopyData","copyFieldsRequired","pathIsRequired","propsIsEmpty","historyAttachment","plsSelectDownloadAtt","noDownloadAtt","plsCheckBatchEditRows","plsSelectDetailFormData","dataAndStateChanged","dataChanged","stateChanged","defaultStateName","copy","copySuccess","copyFailed","roger","LanguageMessageForZh","LanguageMessageForZhft","LanguageMessageFactory","create","language","languageMessageMap","has","get","languageMessage","set","Map","LanguageService","Object","defineProperty","getInstance","innerInstance","instance","extendProperties","keys","propName","Inject","args","LOCALE_ID","localeId","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","__extends","__","constructor","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","error","__spread","concat","DeviceAbility","copyToClipboard","text","windowRef","clipboardData","setData","document","queryCommandSupported","textarea","createElement","textContent","style","position","body","appendChild","select","execCommand","ex","console","warn","removeChild","ExceptionStrategy","MessagerService","messagerService","languageService","_super","InfoExceptionStrategy","tslib_1.__extends","handleException","info","Message","WarningExceptionStrategy","warning","ErrorExceptionStrategy","handleErrorLevel","bsModalRef","exceptionMsg","date","Date","localDate","moment","format","detail","Detail","innerMessage","options","showMaxButton","buttons","langService","cls","handle","width","height","safeHtml","exception","copyButton","onClick","content","showMiniNotify","displayError","FatalExceptionStrategy","HttpStatusType","ExceptionFactory","exceptionFactory","getExceptionHandleStrategy","exceptionLevel","exceptionStrategy","HttpUtil","getHttpStatusType","httpResponseSatus","statusType","Info","Success","Redirect","ClientError","ServerError","FormErrorService","isHttpErrorResponse","httpErrorHandler","commonErrorHandler","status","msgService","http401Error","httpErrorInClient","httpErrorInServer","Error","errorMsg","name","HttpErrorResponse","FormMessageService","question","confirmResult$","confirmPromise","from","question2","promise$","Promise","resolve","reject","dialogRef","defaultFocus","prompt","title","JSON","parse","Level","undefined","replace","showHeader","dialogShownKey","i18n","en","sessionInvalid","ok","zh-CHS","curLanguage","messageOptions","initialState","okText","okHandle","modalRef","redirectUri","redirect_uri","location","href","cancelText","cancelHandle","fitContent","dialog","closed","FormNotifyService","default","log","notifyService","msg","timeout","notifyOptions","hideTitle","success","NotifyService","FormWizardService","preStep","currentPageId","wizardSer","getCurrentPageId","updateWizardState","WizardEventType","Prev","nextStep","Next","cancelWizard","finishWizard","WizardService","CheckService","checkEmpty","DataCheckService","checkBeforeEdit","idToEdit","ifSkipCheck","formNotifyService","empty","checkBeforeView","idToView","id","params","command","messageService","EventService","trigger","eventType","eventData","frameIds","eventBus","FrameEventBus","MenuStateService","getState","data","sessionStorage","getItem","COMMAND_SERVICE_LINK_STORAGE_KEY","setState","links","setItem","stringify","addMenuState","parentMenuId","childMenuId","state","isParentExist","childItem","find","item","getMenuState","parentMenu","childMenu","updateMenuState","key","removeMenu","menuId","removeParentMenu","removeChildMenu","childMenus","child","index","splice","RouterService","route","url","router","createUrlTree","toString","setParams","navigateByUrl","registerEvent","getAppId","getFuncId","frameworkService","eventListner","FuncSwitch","getOriginalId","tabId","menuState","menuStateService","formReload","lastSwitchId","FuncClosed","onClosed","removeMenuState","lastCloseId","indexOf","split","_a","openMenu","funcId","reload","paramsMap","buildParamMap","openFuncWithParam","openApp","appId","appEntrance","paramMap","appService","closeMenu","findDialog","isDialogComponent","rootComponent","closeFunc","getAppEntrance","closeApp","frameContext","parentFrameContext","object","path","defaultVal","PATH","isArray","shift","paramsObj","routerParamService","hash","decodeURLParams","getParentMenuId","WEB_FORM_ROUTER_PARENT_ID","query","search","slice","reduce","val","decodeURIComponent","Router","RouterParamService","FrameworkService","AppService","TAB_EVENT","onTabClosed","onTabClosing","onTabSwitched","QuerystringService","queryString","RuntimeFrameworkService","getService","env","top","isSameOrigin","parent","rtfService","func","openMenu$","openMenuByStream","EMPTY","getEntityParam","callback","once","beforeCloseMenu","beforeClose","getMenuParams","addEventListener","token","handler","frmEvent","eventListener","getMenuSwitchControlEvent","subject","tabId_1","options_1","response","menuSwitchControl","subjectRegister","code","broadcast","subjectRemove","subjectNotify","notify","subjectResponse","observerToken","UID","responseUnSubscribe","environment","host","NavigationEventService","querystringService","formToken","runtimeFrameworkService","querystrings","handleTabSwitchEvent","handleTabClosedEvent","handleTabClosingEvent","eventTabId","fireTabSwitchEvent","onTabSwitchListeners","size","map","fireTabClosingEvent","formEventServices","delete","onClosingListeners","of","listeners","values","result$","userRejected","pipe","concatMap","take","tap","switchMap","every","fireTabClosedEvent","onClosedListeners","removeEventListener","clearEventListener","clear","FARRIS_FORM_COMPONENTS","InjectionToken","FarrisFormService","append","cmpIns","controls","getControls","initCtrls","APP_CONTEXT_MANAGER","NavigationService","context","navigationEventService","appContext","injector","FrameContext","formAppContext","ApplicationId","appContextManager","enableRefresh","tabName","destructuring","translate","queryStringParams","convertToBoolean","buildParam","currentTabId","appType","AppType","Menu","entityParams","isReload","openMenuWithDimension","dim1","dim2","metadataId","App","openApp$","isInDialog","destory","parseParams","open","mode","modalId","configs","tabType","funcOrAppId","pageModalService","FEPageModalService","uiStateConfig","getObjectTypeConfig","modalConfig","buildConfigs","dialogType","pageModalRef","farrisFormService","componentType","componentRef","createComponentRef","showByUrl","isDialogRootComponent","navigate","commands","activatedRoute","ActivatedRoute","queryParams","lodash","merge","extras","skipLocationChange","relativeTo","String","translateService","TranslateToken","startsWith","endsWith","trim","transform","config","defaultConfigs","showButtons","objectTypeConfig","onClosingHandler","refresh","refreshCommandName","commandName","refreshFrameId","frameId","cancelChanges","ref","refreshForm","component","repository","frameContextManager","getFrameContextById","viewModel","uiStateObject","getFrameContext","componentFactoryResolver","getComponentFactoryResolver","contentCmptFactory","resolveComponentFactory","modalContentInjector","ReflectiveInjector","resolveAndCreate","uiState","setPropertyValue","ComponentFactoryResolver","Injector","IS_ADD","LAST_MODIFIED_ID","EditStateUtil","getLastModifiedId","virtualRootFrameContext","getVirtualRootFrameContext","lastModifiedId","getParam","setLastModifiedId","setParam","getAddState","setAddState","cancelAddState","setEditState","FormNotifyStrategyService","querystring","odocDisableNotification","toLowerCase","urlSearchParams","URLSearchParams","CommandService","innerContext","execute","waitForBeSession","restService","sessionService","getBeSessionId","beSessionId","extractResult","taskName","results","suspendFrameContextRowSelectedEvent","bindingData","rowSelectedEventSuspend","resumeFrameContextRowSelectedEvent","ViewModel","ValidationService","validate","getList","result_1","tslib_1.__values","result_1_1","isValid","alert","validationResults","validateCurrentRow","primaryValue","list","currentId","entities","entityCollection","getEntityById","namespace","frameContexts","getFrameContextsByNamespace","getFrameContexts","isModal","hasOwnVerifyDetailService","rootViewModel","root","toValidate","formErrors","form","enableValidate","verifyInformations","formValid","formValidationRules","formContext","bindingObject","getObject","setShowValidationMsg","getValidationRules","rules","rule","isFormValid","observableList","entity","getIndexById","zip","resultList","handleErrors","errors","validationError","children","errMsgObj","findId","target","PARENT_CLASS","parentPathData","isUdt","isGrid","getPaths","join","constraints","paths","property","changes","ChangeType","UpdateErrors","x","isValidated","collectValidationErrors","verifycationChanged","validateAll","getAllEntities","isMultiEntityValiate","validationResultTypes","offset","findIndex","targetField","field","propertyName","fullPath","resetValidation","isDialog","namespace_1","frameComponent","VerifyDetailService","Repository","validationAllResult","CardDataService","load","loadingTimerId","getById","formErrorService","onLoading","transitionActionParamName","skip","listening","sync","action_1","action","ngCommand","metadatas","actionName","formPrimaryValue","formState","stateMachine","stateName","ngAction","actions","transitTo","states","primaryValueChanged","showLoadingConfirm","resetForm","add","cascadeAdd","currentNamespace","currentFormFrameContexts","bindingPaths","childFrameContexts","bindingPath","childBindingPaths","sort","a","rid","fpath","getPath","appendByPath","last","edit","update","update$","updateById","updateWithoutEmpty","updateWithNotify","loadPaged","save","successMsg","updateChangesById","save$","applyChangesById","updateResult","showMessage","cancelWithCheck","revert","cancelWithoutCheck","BefRepositoryUtil","isExistUnsaveData","formMessageService","ifCancel","loadEntities","subPaths","subPath","subData","validationService","commandService","NavigationMiddlewareService","onClosing","navigationService","isChanged","opened","beforeCloseHandle","selectedChange","conform","cardDataService","getTabId","targetId","befRepository","getFormAppContext","GridMiddlewareService","onPageChanging","filters","eventParam","pageIndex","filterConditionManager","setConditions","ParamService","parseMapParams","asObservable","param","KeybindingService","bind","keybindingMap","keyBinding","method","register","binding","combo","_getCombo","keyMap","ctrlKey","altKey","shiftKey","bindingProvider","_dispatch","unregister","unbind","repeat","ready","keyInfo","charCodeAt","metaKey","Mousetrap.default","FilterConditionService","UIStateService","componentId","StateMachineService","transit","_currentFrameContext","_initLoad","initFormState","currentRootFrameContext","getCurrentRootFrameContext","toggleFormState","currentFrameContext","getAllRootFrameContext","rootFc","getFrameContextManagerMap","getFrameContextMap","rootFrameContextArr","ElementRef","nativeElement","className","includes","_clsDefaultName","addCssClass","removeCssClass","elementRef","originalClassName","getFormRootComponent","viewContext","virtualRootContext","StateMachine","BindingDataService","setCurrentId","getAllFrameContexts","setCurrentRow","BindingData","ApplicationParamService","highOrderInvoke","paramService","setupParams","getParams","setQueryParams","setStaticParams","parsedQueryParams","innerData","paramName","updateUIState","staicParams","staticParamsObj","mapStaticParamsToObject","staticParams","inDialog","sessionInfo","setSessionInfo","sessionId","Token","setBeSessionId","webFormRouteParams","decodeURI","encodeURI","prop","controlEvent","isObservable","event","EntityTraversingService","getPropValue","getValue","getEntityData","bindingListOrObject","BindingList","currentItem","toJSON","getEntityListData","EntityManipulationService","setPropValue","setValue","EntityAggregationService","count","splitedPath","splitPath","traversingService","listPath","sum","accTotal","entityData","propValue","parseFloat","propPath","isNaN","avg","total","max","accMax","min","accMin","currentData","pathItem","currentNode","propPathItem","pop","unshift","EntityListService","pageSize","EntityService","manipulationService","aggregationService","BindingPathService","getBindingPathsByFrameContext","getBindingPathsByTableName","dataTypeInfo","tableName","level","entityInfo","nodeCode","originalCode","props","propInfoMap","typeInfo","idx","dataTypeInfo_1","getBindingPathsByPath","entityTypeInfo","nodeCodes","getPropInfoByPath","group","getPathInfo","entityPath","propertyNames","FormControlService","getFormControlsByFrameContext","ngFormControls","getFormControlByBinding","ngFormControl","getFormControlIndexByFullPath","bindings","formControlBindingPaths","getFormControlIndexByBinding","FrameContextService","getFrameContextsByTableName","bindingPathService","getFrameContextsByPropertyPath","propertyPath","separtor","formControls","formControl","getFrameContextsByColumnName","columnName","getTypeInfoByPath","columnPropInfo","getPropInfos","dataPropInfo","metadataInfo","originalDataField","dataField","formControlService","getFrameContextsByBindingPath","FocusInvalidService","focusInvalidInput","rootElement","firstVerifyInformation","selectFirstVerifyInformation","focusElement","focusGridCell","focusableDataGrid","editCell","updateVerifyInformationsIndex","verifyInformation","tabIndex","input","getInputElementById","getAttribute","Number","frameIndex","domIndex","getFieldIndex","rowIndex","isGridComponent","getColumnIndex","dataGridColumnsName","columns","column","fields","fixed_1","fixed","fixedColumns","fixedColumnIndex","this_1","getIndexFromColumns","v1","v2","element","ownerDocument","getElementById","tagName","inputs","getElementsByTagName","getFormControlIndexByBindingPath","elementId","focused","elementToFocus","elements","querySelectorAll","subElements","focus","grid_1","getGridRef","frameElement_1","getComponentRef","focusById","matchedFrameContexts","componentsMap","componentManager","getComponentsByFrameId","datagridComponent","frameContextService","POSTER","RECEIVER","REPOSITORY","TAB_ID","ChangeItemService","init","changeItem","setBykey","getByKey","setIframePoster","itemChangePoster","getIframePoster","itemChangeReceiver","parentId","Observable","subscriber","getNextItemByCurrentId","setRepository","paginationInfo","currentIdx","nextIdx","getEntities","ListDataService","mergeFilterConditions","mergeSortConditions","fireQueryEvent","queryChild","fullPaths","EntityPathConverter","toEntityPathArray","substr","parentPaths","configPath","getPaginationConfigByPath","_b","messagePipe","messageType","insert","updateChanges","updateAllChanges","applyChanges","remove","ifSave","remove$","removeById","removeRows","ids","deleteCurrentRowIfNoChecks","removeByIds","refreshAfterRemoving","loadCmdName","loadCmdFrameId","_cancel","originalConditions","getFilters","conditions","lastFilter","Relation","relation","sorts","sortConditionManager","getConditionsByBindingPath","direction","filterConditionService","SubListDataService","insertByPath","innerRemove","removeWithoutConfirm","removeChildrenByIds","batchRemoveByPath","isConfirm","removeByPath","removeAndSave","fid","move","targets","bindingList","findById","exchangeRowIndex","exchangeRowId","getIdByIndex","exchangeRow","exchangeRowPosition","isNullOrEmpty","swapById","BaseDataService","ParentTreeNodeUtil","selectFirstRootNode","hierarchyInfoKey","treeNodesData","firstRootNodeId","getFirstNodeId","selectedNode","selectNodeByBindingList","selectedNodeId","selectedNodeData","getNodeDataById","hasChildNodes","rootData","itemData","rootLayer_1","getRootLayer","layer","layers","minLayer","Math","getNextNodeId","currentNodeData","fLayer","fParentElement","siblingtreeNodesData","getChildNodesData","getNextSiblingNodeId","parentData","currentIndex","parentElement","nodeData","PathTreeNodeUtil","currentPath","fPath","substring","TreeUtilFactory","treeType","util","ParentTreeRepository","addSibling","addSiblingUri","baseUri","dataID","requestInfo","buildRequestInfo","headers","HttpHeaders","Content-Type","invoke","responseInfo","buildEntity","returnValue","addEntity","addChild","addChildUri","addSubSibling","nodes","addSubSiblingUri","entityManager","appendEntityByPath","addSubChild","addSubChildUri","loadByParentId","frozenCurrentRow","pagination","localEntities","getChildren","parentHierarchyInfo","getHierarchyInfoById","originalHierarchyInfoKey","getOriginalHierarchyInfoKey","entityFilter","FilterConditions","buildFiltersWithParent","SortConditions","IsUsePagination","Pagination","PageIndex","PageSize","PageCount","TotalCount","extendQuery","getPaginationInfo","updatePaginationInfoByPath","clearDescendantEntities","listData","buildEntities","addData","addEntities","loadFullTree","fullTreeType","loadType","queryUrl","dataId","isUsePagination","virtualPropertyName","buildEntityFilter","selectedRowId","selectedRowId_1","hierarchyInfo","primaryKey","getAllParentIds","filterArray","relationType","parentLayer","parentFilterArray","FilterField","Value","Lbracket","Rbracket","Expresstype","Compare","hierarchyInfokey","getChildNodes","removeEntities","removeData","fparentElement","flayer","childHierarchyInfo","childs","getHierarchyInfo","FieldMetadataUtil","getNgObjects","entityType","findParent","currentHierarchyInfo","PathTreeRepository","pathHierarchyInfo","parentPath","TreeRepositoryFactory","TreeDataService","filtersArray","parseConditions","sortsArray","correctSelectedNode","hierarchyType","getHierarchyType","treeNodeUtil","errorService","loadByLevel","setLoadByLevelState","getIdToExpand","buildPaginationInfo","currentRowId","primaryKeyValue","firstChildId","expandNodes","idToExpand","setIdToExpand","conditionsString","reloadChild$","reloadByLevel","addChild$","nextNodeId","enableNodePagination","nodePageSize","nodePageIndex","isAdd","removeEntityById","getTreeNodeUtil","getNextNodeIdAfterRemoving","idToRemove","setNextNodeAfterRemoving","selectFirstRow","hierarchyInfoNgObjectInfo","FilterConditionDataService","EditDataService","editEntityById","RemoveDataService","enableRemoveAndSave","innerRemoveById","removeAndSaveById","removeAndSaveByIdForTree","checkIdsToRemove","treeDataService","removeAndSaveByIds","confirm$","confirmToRemove","removeEntityAndSaveById","ifRemove","listDataService","SaveDataService","SubTreeDataService","hierarchyInfoField","nodeCodeArray","BeActionService","invokeAction","actionUri","httpMethod","httpHeaders","innerInvokeAction","executeAction","buildQueryParams","queryParamsString","getRestService","hasRequestInfo","fullActionUri","ApproveService","submitApproveWithInteraction","bizBillID","submitApprove","interactionResult","beActionService","bizInstID","procDefId","processDefinitionId","formLoadingService","excutionResponse","procInstId","needInteraction","submitter","excute","interactionResponse","catchError","submitApproveWithBizDefKey","bizDefKey","approvePayload","startProcessPayload","variables","processDefinitionKey","submitApproveWithBizDefKeyUseControl","payload","wfTaskHandlerService","startProcess","childSubmitApproveWithBizDefKey","bizId","childBizId","cancelApprove","cancelSubmit","viewProcess","flowchartService","viewFlowChart","switchPrefixLetter","jsonObj","toUpper","_c","toUpperCase","WFSubmiteService","WFFlowchartService","WfTaskHandlerService","PrintService","printSingle","beMetaId","bizBillId","printArray","showWarning","printByIds","dataIds","printByIdsWithDimension","billCategoryId","sourceOptions","buildSourceOptions","sourceId","outputOptions","buildOutputOptions","FirstDimensionVal","SecondDimensionVal","printService","outputBEData","printMulti","filterCondition","sortCondition","includeChildData","entryFilter","filterConditions","sortConditions","sourceFilterOptions","buildSourceFilterOptions","outputBEDataWithFilter","printMultiWithDimension","sfo","DataIds","SourceId","RetrieveParam","retrieveParam","FormatId","formatId","ServiceUnit","serviceUnit","currentPage","pageRowCount","queryType","queryServiceId","queryParam","OutputType","outputType","PRINT","FileType","fileType","Html5","Path","DeviceId","deviceId","printJob","printerName","printSetting","printType","PrintType","Form","EntityFilter","commandContext","CloudprintService","AttachmentUtil","convertToAttachmentInfos","fileInfos","fileInfo","convertToAttachmentInfo","attachmentId","fileName","getFirstAttachmentInfo","attachmentInfos","peekAttachmentIds","attachmentInfo","AttachmentDataService","updateRow","attachmentInfoFieldPath","updateUri","updateAttachInfo","createUpdateAttachInfo","syncAttachmentInfosToClient","updateRowWithPropertyName","updateRows","serverAttachInfo","createBatchCreateAttachInfo","isRootEntity","NodeCodes","batchUploadInfo","appendAttachmentInfosToClient","updateRowsWithConfigs","appendAttachmentInfos","updateRowsWithPropertyName","parentBindingPathArray","BindingPathConverter","toBindingPathArray","BefDataPathUtil","convertToObjectCodes","HiretryIds","convertToDataIdsForUpdate","AttachmentIds","AttachmentId","attachmentIds","convertToDataIdsForAdd","rootDataId","updateEntityById","keyValues","updateEntities","updateEntity","setValueByPath","prev","AttachmentService","setLanguageService","InjectFlags","uploadAndUpdateRow","rootDirId","parentDirName","rootId","defaultRootDirId","formId","defaultParentDirName","uploadLimit","UploadLimit","fileCount","attachmentIdList","getSpecialRow","getCurrentRow","getAttachmentIdsByPathAndDataIds","uploadDialogService","uploadFileWithLimit","FileState","New","firstAttachmentInfo","attachDataService","uploadAndUpdateRowWithPropertyName","uploadAndBatchAddRows","uploadAndBatchAddRowsWithPropertyName","download","attachId","getDownloadUrl","batchDownload","attachIds","metadataidlist","downloadService","attachIdsString","getMultipleDownloadUrl","downloadByDataId","batchDownloadByDataIds","previewByAttachmentInfoFieldPath","previewByAttachmentIds","previewByAttachmentInfoFieldPathWithIndex","currentRow","attachmentFieldName","getCurrentAttachmentId","previewFileListWithIndex","previewBySubDirName","subDirName","fileViewerService","viewerFormFile","previewBySubDirNameWithIndex","viewerFormFileWithIndex","viewerFileList","viewerFileListWithIndex","genVersion","versions","updateAttachmentVersion","versionField","historyField","attachmentFieldPath","attachmentField","attachmentBindingList","DataPathCreator","createByShortPathFromRoot","toArray","attachments_1","versionedRows","row","getEntityByPath","version","isAttachmentCanDelete","updateAttachmentHistory","fileNameMap_1","paths_1","array","y","xVersion","parseInt","entityListData","entityService","filteredEntityListData","UploadDialogService","DownloadService","FileViewerService","FileService","addFileRows","fileInfoFieldPath","getAttachmentInfosToAddFromContext","addFileRowsWithConfigs","process","attachmentInfos_1","mapFields","fileExtends","getFileExtendsFromContext","fUploadOutPut","extend","removeFileRows","getDataIdsToRemoveFromContext","isSublist","removeObservables","removeObservable","subListDataService","forkJoin","fileExtendFieldPath","fileExtend","fileId","convertFileIdToDataId","fileBindingPath","fileFieldName","fileListBindingPath","debounceTime","DialogService","createModalComponentRef","_providers","modalService","openModal","configObj","innerCompopnent","remote","useIsolateJs","parameter","dialogServiceInstance","componentCallback","componentModify","modalInstanceCallback","createRemoteForm","cmpRef","uistate","openHelpModal","events","editor","_d","mapFields_1","valueOf","modals","openCallbackableModal","subject_1","_e","frameId_1","_f","handle_1","_g","currentRow_1","formCmp","selectedItems","frameComtext","rows","mapFields_2","_h","event_1","_j","context_1","selectedItems_1","k","sourceKeyArray","targetValue","bindingPaths_1","targetPath","closeModal","moduleName_1","moduleName","System","import","then","module","moduleRef","entryComponent","componentRef_1","BsModalService","_componentFactoryResolver","SidebarService","openSidebar","sidebarUIService","sendIsOpen","closeSidebar","confirmBeforeClosingSidebar","checkAllEntityChanges","confirmResult","continueClosingSidebar","stopClosingSidebar","FarrisSidebarService","FilterService","stripFiltersWithSpecialValue","specialValues","strippedFilterArray","filterValue","getFilterValue","ComponentManagerService","appendControl","getControl","AuthorityService","queryOperationAuthority","operationIds","queryResult","j","dummyResult","Authority","setLabelMap","labelMap","operationLabelMap","opId","label","initialize","authorityService","operationAuth","authOfLabel","hasOperation","ExceptionHandler","setContext","FARRIS_COMMAND_SERVICE_PROVIDERS","UserSettingsService","timezone","baseOffset","i18nSetting","defaultLanguage","userDateFormat","userTimeFormat","userNumberFormat","negativeSign","numberDecimalDigits","numberDecimalSeparator","numberGroupSeparator","userRegionCode","frmI18nSettingService","getSetting","userSettings","FrmI18nSettingService","WorkFlowMessageService","listen","sender","source","send","win","postMessage","WorkFlowMessage","setup","workFlowMessageService","ceil","random","eventId","WorkFlowMessageHandler","onComponentInit","workFlowMessage","resultTask","formFrameContexts","getFormFrameContexts","validation","message_1","buildMessage","throwIfEmpty","AppContextManager","appContexts","getAppContexts","contexts","frame","CompareType","ValueType","RelationType","FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS","provide","UserSettingsToken","useClass","TextHandler","convert","qc","tv","fieldCode","Like","And","DateRangeHandler","arr","drv","startTime","GreaterOrEqual","endTime","LessOrEqual","DropDownHandler","ddv","dv","Equal","Or","NumberRangeHandler","nrv","startValue","endValue","SmartHelpHandler","shv","isInputText","valueField","textValue","getOriginalValue","SingleYearHandler","yv","yearValue","CheckBoxHandler","tvv","SingleMonthHandler","mv","monthValue","MonthRangeHandler","mrv","SingleDateTimeHandler","dtv","datetimeValue","SingleNumberHandler","numValue","SingleDateHandler","dateValue","ComboLookUpHandler","cluv","arr_1","RadioHandler","rv","InputGroupHandler","igv","textField","itemValue","QueryConditionHandlerFactory","_instance","getHandler","controlType","queryConditionHandlerMapping","ControlType","Text","InputGroup","DateRange","DateTimeRange","DropDownList","NumberRange","SmartHelp","SingleYear","BoolCheck","SingleMonth","MonthRange","SingleDateTime","SingleNumber","SingleDate","ComboLookUp","Radio","QuerySolutionService","getUserSessionId","frameworkSessionService","setFilterConditions","queryConditionHandler","filterConditionList","isEmpty","control","getControlType","setCurrentQueryConditions","FrameworkSessionService","EndEditService","endEdit","RemoteSummaryService","summary","methodName","proxy","BatchEditService","openBatchEditDialog","batchEditDialogService","gridViewModel","ids_1","dialogRef_1","batchEdit","onConfirm","changeDetectionController","detach","updateBindingData","reattach","openHiddenHelp","helpId","componentManagerService","showDialog","clearHelpSelections","helpElement","displayValue","checkCurrentRow","mappings","getValueByPath","batchAppend","mappings_1","defaultValues_1","defaultValue","batchAppendByPathBasedOnHelpSelections","mappings_2","defaultValues_2","buildPath","batchAppendByPath","batchAppendBasedOnRowHelpSelections","bindingPath_1","defaultValues_3","bindingList_1","currentEntity","headItem","mappingRow","idMapField","sourceItemId_1","emptyRows_1","targetItem","request","clone","buildIds","copyRow","ignoreFields","ignoreFieldsArray","sources","action$","extractedFields","current","loadChild","afterIncrementalSelectHelpClose","associatedField","foreignKey","rootFrameContext","currentData_1","currentDataArray_1","appends","itemId","removes","selectItem","addAction$","removeAction$","removeEntityByPath","beforeMultiSelectHelpOpen","afterMultiSelectHelpClose","commandFrameId","onHelpClose","onHelpCloseHandler","path_1","createByPath","newEntity","suspendFrameContextEvent","resumeFrameContextEvent","suspend","updateLookupField","updateSimpleField","currentColumnType","dataType","dateStr","dateService","formatTo","updateBindingList","helpData","helpFields","idIndex","helpField","helpValue","targetBindingObject_1","fpaths","targetPropertyName","getBindingPathArray","f","filteredPaths","part","tailPath","EntityList","currentItemId","Entity","BatchEditDialogService","DateTimeHelperService","DiscussionGroupService","addComment","configId","visibility","buildAddCommentParam","queryComments","buildQueryCommentsUrl","queryAllOrgs","queryFrequentAtUsers","buildQueryFrequentAtUsersUrl","queryAtUsers","user","buildQueryAtUsersUrl","serverUri","bill","billId","comment","ListFilterConditionsService","setCurrentFilterConditions","FormManifestService","modulePath","formManifestPath","request$","mainfests","req$","httpClient","responseType","share","FORM_PATH_TOKEN","HttpClient","FormExpressionManifestService","formManifestService","formManifest","expressionManifest","expressions","ns","expressionPath","FORM_MANIFEST_SERVICE_TOKEN","LocalizationService","dateFormat","timeFormat","dateTimeFormat","numberFormat","date$$1","number","localize","transformDate","transformDateTime","transformNumber","getFormat","localizationType","formats","parseDateFormat","dateTime","parseTimeFormat","bigNumber","BigNumber","isBigNumber","isNegative","buildNumberFormat","prefix","absoluteValue","toFormat","groupSize","decimalSeparator","groupSeparator","Service","DataGridService","clearChecks","QueryCondition","gridComponents","getFormGridComponents","gridComponent","clearSelections","clearCheckeds","uncheckDeletedRows","unCheckRows","uncheckRows","grids","componentRefs","DatagridComponent","FormAttentionService","blink","duration","idOrEl","attentionService","catchAttention","AttentionService","Prop","InputType","FeatureRepository","getFeaturesByMaterialId","materialId","materialID","getConfigedValueByFeatureId","configID","configType","objType","objID","applyFeatures","charactValue","getHelpInfo","helpid","httpParams","condition","searchValue","helpID","filterStr","FeatureDataService","propset","propsets","translateName","inputtype","enum","enuminfo","isreadonly","isrequired","FeatureEditService","materialFeatureId","featureDataService","featureEditorService","buildFeatures","featureSet","featureTemplate","mergeFeatures","FeatureEditorService","ExpressionService","expression","customContext","deps","resolveService","groupDependencies","ExpressionUtil","getGroupFunctionDependency","entityContext","buildEntityContext","stateContext","buildStateContext","entityOriginalNodeCode","bignumber_js","expressionExecutor","eval","executeAsync","isGroupdMainEntity","dep","isEntityDependency","isGroupDependency","getEntity","collection","ENTITY_TEMPLATE","childrenEntityPaths","getChildrenEntityPaths","getCurrentRowByPaths","parent_1","node","__items__","__type__","uiState_1","getOwnPropertyNames","match","ResolveService","ExpressionExecutor","DirtyCheckingService","detectChanges","global","appRef","tick","cd","detectChangesAfter","ChangeDetectorRef","ApplicationRef","PopUpService","longPaths","entityListPaths","originalData","entityList_1","getEntityNodeByPath","item_1","entity_1","updateCurrentRow","getRootFrameContext","paths_2","modalBindingList","closeCheck","entityList","FormService","getIndex","ViewModelService","getGridColumns","PaginationService","resetChildrenPagination","childrenEntityCodes","getPropNamesByGroup","DataPropGroup","List","pageCount","FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS","QUERYSOLUTION_HANDLER_TOKEN","LISTFILTER_HANDLER_TOKEN","FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN","MESSAGE_SERVICE_TOKEN","NOTIFY_SERVICE_TOKEN","FRAME_COMPONENT_INIT_HANDLER_TOKEN","multi","DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS","NgModule","providers","imports","WfTaskHandlerModule","exports","CommandServicesModule","MessagePipe","sendMessage","MessagePipeService","pipeName","useFormContext","pipeType","BackEndMessageHandler","isException","hasThrowError","collect","updateFormErrors","resetFormMessage","targetFrameContext","findTargetFrameContext","all","backEndMessage","bizMessages","hasFormlessError","bizMessage","location_1","getBindingPath","getFrameContextsByBindingPathAndColumnName","isDataGridComponent","isReadonlyDataGrid","isCurrentRow","getFormControlByColumnName","domPropertyName","mergeMessage","viewModelName","formGroupName","primary_1","buildItemTitle","defaultI18nValue","columns_1","columns_1_1","rows_1","rows_1_1","bizMessages_1","bizMessages_1_1","post","formItems","isPropertyExist","backend-message-1","template","zh-CHT","currentLanguage","getCurrentLanguage","getBindingPathByTableName","entityPropertyInfo","propInfo","entityPropertyName_1","randomFrameContext","mappingName_1","entries","clearBackendError","TabId","AppId","AppEntrance","FuncId"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * åéæ¶æ¯ç»FormLoadingServiceï¼\r\n * ä½¿å¶æ¥æ¶åè°ç¨hide()å½æ°\r\n * æ­¤æå¡ä»ç¨äºå¤çHttpå¼å¸¸\r\n */\r\n@Injectable()\r\nclass HideEventService {\r\n    public hideEvent = new Subject<any>();\r\n}\r\n\r\nexport { HideEventService };","import { Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport { LoadingService, LoadingConfig, LoadingComponent } from '@farris/ui-loading';\r\nimport { HideEventService } from './hide-event.service';\r\nimport { AppContext } from '@farris/devkit';\r\n// tslint:disable: no-string-literal\r\n/**\r\n * å è½½æç¤ºHelper\r\n * 1ãåè£@farris/uiçLoadingServiceï¼\r\n * 2ãæä¾éå¯¹è¡¨åçå¿«æ·æ¹æ³ï¼\r\n */\r\n@Injectable()\r\nclass FormLoadingService {\r\n  private static isSuspend = false;\r\n  /**\r\n   * å è½½ä¸­ç»ä»¶å®ä¾\r\n   */\r\n  private loadingCmp: LoadingComponent;\r\n\r\n  /**\r\n   * å»¶è¿loadingå®æ¶å¨\r\n   */\r\n  private loadingTimerIds: any[] = [];\r\n\r\n  /**\r\n   * å¼ºå¶æ¾ç¤ºï¼ä¸è½éè\r\n   */\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * æ³¨å¥@farris/uiçLoadingService\r\n   */\r\n  constructor(\r\n    private loadingService: LoadingService,\r\n    @Optional() private hideEventService: HideEventService,\r\n    @Optional() private applicationContext: AppContext,\r\n  ) {\r\n    if (hideEventService) {\r\n      this.hideEventService.hideEvent.subscribe(\r\n        result => {\r\n          this.hide();\r\n        }\r\n      );\r\n    }\r\n    this.registerService();\r\n\r\n  }\r\n  public setSuspend(flag: boolean) {\r\n    FormLoadingService.isSuspend = flag;\r\n  }\r\n  /**\r\n   * æ¾ç¤ºå è½½ä¸­\r\n   */\r\n  public show(configOrMessage?: any): LoadingComponent {\r\n    if (FormLoadingService.isSuspend === true) {\r\n      return;\r\n    }\r\n    if (this.loadingCmp) {\r\n      this.loadingCmp.close();\r\n      this.loadingCmp = null;\r\n    }\r\n\r\n    const loadingConfig = this.buildLoadingConfig(configOrMessage);\r\n    this.loadingCmp = this.loadingService.show(loadingConfig);\r\n    return this.loadingCmp;\r\n  }\r\n\r\n  /**\r\n   * å»¶è¿æ¾ç¤ºLoading\r\n   */\r\n  public showLoadingWithDelay(delayTime: number, configOrMessage?: any): any {\r\n    // this.show(configOrMessage);\r\n    const timerId = setTimeout(() => {\r\n      this.show(configOrMessage);\r\n    }, delayTime);\r\n    this.loadingTimerIds.push(timerId);\r\n    return timerId;\r\n  }\r\n\r\n  /**\r\n   * éèå»¶è¿çLoading\r\n   */\r\n  public hideDelayLoading(timerIdToClear: any) {\r\n    this.clearLoadingTimer(timerIdToClear);\r\n    this.hide();\r\n  }\r\n\r\n  /**\r\n   * æé LoadingConfig\r\n   * @param configOrMessage éç½®å¯¹è±¡ææ¶æ¯å­ç¬¦ä¸²\r\n   */\r\n  private buildLoadingConfig(configOrMessage: any): LoadingConfig {\r\n    let loadingConfig: LoadingConfig;\r\n    if (!!configOrMessage) {\r\n      if (typeof configOrMessage === 'object') {\r\n        loadingConfig = configOrMessage;\r\n      } else {\r\n        loadingConfig = { 'message': configOrMessage };\r\n      }\r\n    } else {\r\n      loadingConfig = {};\r\n    }\r\n    if (!loadingConfig.hasOwnProperty('delay')) {\r\n      loadingConfig.delay = 0;\r\n    }\r\n    return loadingConfig;\r\n  }\r\n\r\n  /**\r\n   * å³é­ææloading\r\n   */\r\n  public clearAll() {\r\n    FormLoadingService.isSuspend = false;\r\n    this.loadingService.clearAll();\r\n    this.loadingCmp = null;\r\n    this.clearAllLoadingTimers();\r\n  }\r\n\r\n  /**\r\n   * æ¸ç©ºLoadingå®æ¶å¨\r\n   */\r\n  private clearLoadingTimer(timerIdToClear: any) {\r\n    clearTimeout(timerIdToClear);\r\n    this.loadingTimerIds = this.loadingTimerIds.filter((timerId: any) => {\r\n      return timerId !== timerIdToClear;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * æ¸ç©ºææLoadingå®æ¶å¨\r\n   */\r\n  private clearAllLoadingTimers() {\r\n    this.loadingTimerIds.forEach((timerId: any) => {\r\n      this.clearLoadingTimer(timerId);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * éèå è½½ä¸­\r\n   */\r\n  public hide() {\r\n    if (!this.loadingCmp) {\r\n      return;\r\n    }\r\n    if (FormLoadingService.isSuspend === true) {\r\n      return;\r\n    }\r\n    this.loadingCmp.close();\r\n    this.loadingCmp = null;\r\n  }\r\n\r\n  /**\r\n   * æ³¨åææçLoadingServiceå®ä¾\r\n   */\r\n  private registerService() {\r\n    const services: any[] = window['DEVKIT_LOADING_SERVICE'] || [];\r\n    services.push(this);\r\n    window['DEVKIT_LOADING_SERVICE'] = services;\r\n  }\r\n}\r\n\r\n\r\nexport { FormLoadingService };\r\n","\r\nimport { LanguageMessage } from './language-message';\r\n\r\n/**\r\n * è±æè¯­è¨æ¶æ¯\r\n */\r\nclass LanguageMessageForEn implements LanguageMessage {\r\n  yes = 'Yes';\r\n  no = 'No';\r\n  unsaveNotifyTitle = 'Exist unsave record. Do save operation or not?';\r\n  clientNotifyTitle = 'System Prompt In The Frontend';\r\n  serverNotifyTitle = 'System Prompt In The Backend';\r\n  cancelApproveSuccess = 'Cancel Approve Success';\r\n  cancelApproveFailed = 'Cancel Approve Failed';\r\n  unallowEmptyProcessInstanceName = 'Process Instance Name Can Not Be Empty';\r\n  unallowEmptyBizBillId = 'Biz Bill Id Can Not Be Empty';\r\n  unallowEmptyChildBizBillId = 'Child Biz Bill Id Can Not Be Empty';\r\n  bizDefKeyRequired = 'Biz Def Key can\\'t be empty.';\r\n  procInsIdRequired = 'Process instance Id can\\'t be empty.';\r\n  addChildFailed = 'Add Child Failed';\r\n  addSiblingFailed = 'Add Sibling Failed';\r\n  addSubChildFailed = 'Add Sub Child Failed';\r\n  addSubSiblingFailed = 'Add Sub Sibling Failed';\r\n  deleteFailed = 'Delete Failed';\r\n  multiSaveFailed = 'MultiSave Failed';\r\n  appendFailed = 'Append Failed';\r\n  queryFailed = 'Query Failed';\r\n  cancelFailed = 'Cancel Failed';\r\n  updateFailed = 'Update Failed';\r\n  addFailed = 'Add Failed';\r\n  loadFailed = 'Load Failed';\r\n  saveSuccess = 'Successfully saved!';\r\n  saveFailed = 'Save failed!';\r\n  deleteSuccess = 'Successfully deleted!';\r\n  deleteFaild = 'Failed to delete!';\r\n  confirmDeletion = 'Confirm deletion?';\r\n  submitSuccess = 'Submit successfully!';\r\n  submitFaild = 'Submit failed!';\r\n  notifyTitle = 'System prompt';\r\n  httpError = 'HTTP request error! Please check the server error!';\r\n  gridDataNotSave = 'The current page data is not saved. Turning the page will result in data loss. Do you want to continue turning the page?';\r\n  exitWithoutSave = 'There is unsaved data. Do you want to continue closing?';\r\n  notSupportMenuType = 'Not supported menu type!';\r\n  cancelWithoutSave = 'Exist unsaved change,Confirm to cancel?';\r\n  plsSelectDeleteData = 'Please select the data to delete!';\r\n  errorHierarchyKey = 'Incorrect ierarchy key';\r\n  plsSelectParentNode = 'Please select parent node!';\r\n  deleteChildFirst = 'Please delete the child nodes first!';\r\n  incorrectHierarchyConfig = 'Hierarchy config is incorrect!';\r\n  operationFailed = 'The operation failed.';\r\n  plsSelectEditData = 'Please select the data you want to edit!';\r\n  plsSelectViewData = 'Please select the data you want to view!';\r\n  plsUploadFirst = 'Please upload attachment first!';\r\n  defaultDialogTitle = 'Dialog';\r\n  public changeToFirst = 'The first data.';\r\n  public changeToLast = 'The last data.';\r\n  public noProcessInstanceId = 'Please provide the process instance id.';\r\n  public noDataExist = 'Data does not exist to access the edit state!';\r\n  public noAttachment = 'There are no attachments to preview.';\r\n  public confirm = 'Confirm';\r\n  public cancel = 'Cancel';\r\n  public plsSelectCopyData = 'Please select the data you want to copy!';\r\n  public copyFieldsRequired = 'The copy fields can`t be empty!';\r\n  public pathIsRequired = 'The request url can`t be empty!';\r\n  public propsIsEmpty = 'The material has no props!';\r\n  public historyAttachment = 'The history attachment can`t be delete!';\r\n  public plsSelectDownloadAtt = 'Please select the attachment you want to download!';\r\n  public noDownloadAtt = 'There are no attachments to download!';\r\n  public plsCheckBatchEditRows = 'Please check the rows you want to edit!';\r\n  public plsSelectDetailFormData = 'Please select a detail form data first!';\r\n  public dataAndStateChanged = 'Are you sure you want to load the new data and switch to $1 state?';\r\n  public dataChanged = 'Are you sure you want to load the data and discards the current modification?';\r\n  public stateChanged = 'Are you sure you want to switch $1 state?';\r\n  public defaultStateName = 'init';\r\n  public copy = 'Copy detail message';\r\n  public copySuccess = 'Copy success';\r\n  public copyFailed = 'Copy failed';\r\n  public roger = 'Roger';\r\n}\r\n\r\nexport { LanguageMessageForEn };\r\n","import { LanguageMessage } from './language-message';\r\n\r\n/**\r\n * è±æè¯­è¨æ¶æ¯\r\n */\r\nclass LanguageMessageForZh implements LanguageMessage {\r\n  public yes = 'æ¯';\r\n  public no = 'å¦';\r\n  public unsaveNotifyTitle = 'å­å¨æªä¿å­è®°å½ãæ¯å¦è¦ä¿å­ï¼';\r\n  public clientNotifyTitle = 'åç«¯å¼å¸¸æç¤º';\r\n  public serverNotifyTitle = 'æå¡å¨ç«¯å¼å¸¸æç¤º';\r\n  public cancelApproveSuccess = 'åæ¶æäº¤æåï¼';\r\n  public cancelApproveFailed = 'åæ¶æäº¤å¤±è´¥ï¼';\r\n  public unallowEmptyProcessInstanceName = 'æµç¨å®ä¾åç§°ä¸è½ä¸ºç©º';\r\n  public unallowEmptyBizBillId = 'è¯·éæ©ä¸æ¡æ°æ®';\r\n  public bizDefKeyRequired = 'å¥å£åæ®ä¸è½ä¸ºç©º';\r\n  public unallowEmptyChildBizBillId = 'ä»è¡¨ä¸å¡åæ®ç¼å·ä¸è½ä¸ºç©ºï¼';\r\n  public procInsIdRequired = 'æµç¨å®ä¾Idä¸è½ä¸ºç©ºï¼';\r\n  public addChildFailed = 'æ°å¢å­çº§å¤±è´¥';\r\n  public addSiblingFailed = 'æ°å¢åçº§å¤±è´¥';\r\n  public addSubChildFailed = 'æ°å¢ä»è¡¨å­çº§å¤±è´¥';\r\n  public addSubSiblingFailed = 'æ°å¢ä»è¡¨åçº§å¤±è´¥';\r\n  public deleteFailed = 'å é¤å¤±è´¥';\r\n  public multiSaveFailed = 'æ¹éä¿å­å¤±è´¥';\r\n  public appendFailed = 'è¿½å å¤±è´¥';\r\n  public queryFailed = 'æ¥è¯¢å¤±è´¥';\r\n  public cancelFailed = 'åæ¶å¤±è´¥';\r\n  public updateFailed = 'æ´æ°å¤±è´¥';\r\n  public addFailed = 'æ°å¢å¤±è´¥';\r\n  public loadFailed = 'å è½½å¤±è´¥';\r\n  public saveSuccess = 'ä¿å­æåï¼';\r\n  public saveFailed = 'ä¿å­å¤±è´¥ï¼';\r\n  public deleteSuccess = 'å é¤æåï¼';\r\n  public deleteFaild = 'å é¤å¤±è´¥ï¼';\r\n  public confirmDeletion = 'ç¡®è®¤å é¤ï¼';\r\n  public submitSuccess = 'æäº¤å®¡æ¹æåï¼';\r\n  public submitFaild = 'æäº¤å®¡æ¹å¤±è´¥ï¼';\r\n  public notifyTitle = 'ç³»ç»æç¤º';\r\n  public httpError = 'HTTPè¯·æ±éè¯¯ï¼è¯·æ£æ¥Serverç«¯éè¯¯ï¼';\r\n  public gridDataNotSave = 'å½åé¡µæ°æ®æªä¿å­ï¼ç¿»é¡µå°å¯¼è´æ°æ®ä¸¢å¤±ï¼æ¯å¦ç»§ç»­ç¿»é¡µï¼';\r\n  public exitWithoutSave = 'å­å¨æªä¿å­çæ°æ®ï¼æ¯å¦ç»§ç»­å³é­ï¼';\r\n  public notSupportMenuType = 'å³é­çæ¢ä¸æ¯èåä¹ä¸æ¯åºç¨ã';\r\n  public cancelWithoutSave = 'å­å¨æªä¿å­çåæ´ï¼ç¡®è®¤åæ¶ï¼';\r\n  public plsSelectDeleteData = 'è¯·éæ©è¦å é¤çæ°æ®ï¼';\r\n  public errorHierarchyKey = 'éè¯¯çåçº§ç ';\r\n  public plsSelectParentNode = 'è¯·éæ©ç¶èç¹';\r\n  public deleteChildFirst = 'è¯·åå é¤å­èç¹';\r\n  public incorrectHierarchyConfig = 'åçº§ç éç½®ä¿¡æ¯éè¯¯';\r\n  public operationFailed = 'æä½æ§è¡å¤±è´¥ã';\r\n  public plsSelectEditData = 'è¯·éæ©è¦ç¼è¾çæ°æ®ï¼';\r\n  public plsSelectViewData = 'è¯·éæ©è¦æ¥ççæ°æ®ï¼';\r\n  public plsUploadFirst = 'è¯·åä¸ä¼ éä»¶ï¼';\r\n  public defaultDialogTitle = 'å¼¹çª';\r\n  public changeToFirst = 'å·²å°è¾¾ç¬¬ä¸æ¡æ°æ®';\r\n  public changeToLast = 'å·²å°è¾¾æåä¸æ¡æ°æ®';\r\n  public noProcessInstanceId = 'è¯·æå®æµç¨å®ä¾æ è¯ã';\r\n  public noDataExist = 'è¦ç¼è¾çæ°æ®ä¸å­å¨ï¼æ æ³è¿å¥ç¼è¾ç¶æï¼';\r\n  public noAttachment = 'æ²¡æå¯ä»¥é¢è§çéä»¶ã';\r\n  public confirm = 'ç¡®å®';\r\n  public cancel = 'åæ¶';\r\n  public plsSelectCopyData = 'è¯·éæ©è¦å¤å¶çæ°æ®ï¼';\r\n  public copyFieldsRequired = 'è¦å¤å¶çå­æ®µä¸è½ä¸ºç©ºï¼';\r\n  public pathIsRequired = 'è¯·æ±è·¯å¾ä¸è½ä¸ºç©ºï¼';\r\n  public propsIsEmpty = 'æ²¡æå¯ä»¥ç¼è¾çç©æç¹å¾ï¼';\r\n  public historyAttachment = 'åå²çæ¬éä»¶ç¦æ­¢å é¤ï¼';\r\n  public plsSelectDownloadAtt = 'è¯·éæ©è¦ä¸è½½çéä»¶!';\r\n  public noDownloadAtt = 'æ¾ä¸å°è¦ä¸è½½çéä»¶!'\r\n  public plsCheckBatchEditRows = 'è¯·å¾éè¦æ¹éç¼è¾çè¡ï¼';\r\n  public plsSelectDetailFormData = 'è¯·åéæ©ä¸æ¡ä»è¡¨æ°æ®ï¼';\r\n  public dataAndStateChanged = 'ç¡®å®è¦å è½½æ°æ®å¹¶åæ¢å°$1ç¶æï¼';\r\n  public dataChanged = 'ç¡®å®è¦å è½½æ°æ®å¹¶æ¾å¼å½åä¿®æ¹ï¼';\r\n  public stateChanged = 'ç¡®å®è¦åæ¢å°$1ç¶æï¼';\r\n  public defaultStateName = 'åå§';\r\n  public copy = 'å¤å¶è¯¦ç»ä¿¡æ¯';\r\n  public copySuccess = 'å¤å¶æå';\r\n  public copyFailed = 'å¤å¶å¤±è´¥';\r\n  public roger = 'ç¥éäº';\r\n}\r\n\r\nexport { LanguageMessageForZh };\r\n","import { LanguageMessage } from './language-message';\r\n\r\n/**\r\n * ç¹ä½ä¸­æè¯­è¨æ¶æ¯\r\n */\r\nclass LanguageMessageForZhft implements LanguageMessage {\r\n  public yes = 'æ¯';\r\n  public no = 'å¦';\r\n  public unsaveNotifyTitle = 'å­å¨æªä¿å­è¨éãæ¯å¦è¦ä¿å­ï¼';\r\n  public clientNotifyTitle = 'åç«¯ç°å¸¸æç¤º';\r\n  public serverNotifyTitle = 'æåå¨ç«¯ç°å¸¸æç¤º';\r\n  public cancelApproveSuccess = 'åæ¶æäº¤æåï¼';\r\n  public cancelApproveFailed = 'åæ¶æäº¤å¤±æï¼';\r\n  public unallowEmptyProcessInstanceName = 'æµç¨å¯¦ä¾åç¨±ä¸è½çºç©º';\r\n  public unallowEmptyBizBillId = 'è«é¸æå£¹æ¢æ¸æ';\r\n  public bizDefKeyRequired = 'å¥å£å®æä¸è½çºç©º';\r\n  public unallowEmptyChildBizBillId = 'å¾è¡¨æ¥­åå®æç·¨èä¸è½çºç©ºï¼';\r\n  public procInsIdRequired = 'æµç¨å¯¦ä¾idä¸è½çºç©ºï¼';\r\n  public addChildFailed = 'æ°å¢å­ç´å¤±æ';\r\n  public addSiblingFailed = 'æ°å¢åç´å¤±æ';\r\n  public addSubChildFailed = 'æ°å¢å¾è¡¨å­ç´å¤±æ';\r\n  public addSubSiblingFailed = 'æ°å¢å¾è¡¨åç´å¤±æ';\r\n  public deleteFailed = 'åªé¤å¤±æ';\r\n  public multiSaveFailed = 'æ¹éä¿å­å¤±æ';\r\n  public appendFailed = 'è¿½å å¤±æ';\r\n  public queryFailed = 'æ¥è©¢å¤±æ';\r\n  public cancelFailed = 'åæ¶å¤±æ';\r\n  public updateFailed = 'æ´æ°å¤±æ';\r\n  public addFailed = 'æ°å¢å¤±æ';\r\n  public loadFailed = 'å è¼å¤±æ';\r\n  public saveSuccess = 'ä¿å­æåï¼';\r\n  public saveFailed = 'ä¿å­å¤±æï¼';\r\n  public deleteSuccess = 'åªé¤æåï¼';\r\n  public deleteFaild = 'åªé¤å¤±æï¼';\r\n  public confirmDeletion = 'ç¢ºèªåªé¤ï¼';\r\n  public submitSuccess = 'æäº¤å¯©æ¹æåï¼';\r\n  public submitFaild = 'æäº¤å¯©æ¹å¤±æï¼';\r\n  public notifyTitle = 'ç³»çµ±æç¤º';\r\n  public httpError = 'HTTPè«æ±é¯èª¤ï¼è«æª¢æ¥Serverç«¯é¯èª¤ï¼';\r\n  public gridDataNotSave = 'ç¶åé æ¸ææªä¿å­ï¼ç¿»é å°å°è´æ¸æä¸å¤±ï¼æ¯å¦ç¹¼çºç¿»é ï¼';\r\n  public exitWithoutSave = 'å­å¨æªä¿å­çæ¸æï¼æ¯å¦ç¹¼çºééï¼';\r\n  public notSupportMenuType = 'ééçæ¢ä¸æ¯èå®ä¹ä¸æ¯æç¨ã';\r\n  public cancelWithoutSave = 'å­å¨æªä¿å­çè®æ´ï¼ç¢ºèªåæ¶ï¼';\r\n  public plsSelectDeleteData = 'è«é¸æè¦åªé¤çæ¸æï¼';\r\n  public errorHierarchyKey = 'é¯èª¤çåç´ç¢¼';\r\n  public plsSelectParentNode = 'è«é¸æç¶ç¯é»';\r\n  public deleteChildFirst = 'è«ååªé¤å­ç¯é»';\r\n  public incorrectHierarchyConfig = 'åç´ç¢¼éç½®ä¿¡æ¯é¯èª¤';\r\n  public operationFailed = 'æä½å·è¡å¤±æã';\r\n  public plsSelectEditData = 'è«é¸æè¦ç·¨è¼¯çæ¸æï¼';\r\n  public plsSelectViewData = 'è«é¸æè¦æ¥ççæ¸æï¼';\r\n  public plsUploadFirst = 'è«åä¸å³éä»¶ï¼';\r\n  public defaultDialogTitle = 'å½çª';\r\n  public changeToFirst = 'å·²å°éç¬¬å£¹æ¢æ¸æ';\r\n  public changeToLast = 'å·²å°éæå¾å£¹æ¢æ¸æ';\r\n  public noProcessInstanceId = 'è«æå®æµç¨å¯¦ä¾æ¨è­ã';\r\n  public noDataExist = 'è¦ç·¨è¼¯çæ¸æä¸å­å¨ï¼ç¡æ³é²å¥ç·¨è¼¯çæï¼';\r\n  public noAttachment = 'æ²æå¯ä»¥é è¦½çéä»¶ã';\r\n  public confirm = 'ç¢ºå®';\r\n  public cancel = 'åæ¶';\r\n  public plsSelectCopyData = 'è«é¸æè¦å¾©å¶çæ¸æï¼';\r\n  public copyFieldsRequired = 'è¦å¾©å¶çå­æ®µä¸è½çºç©ºï¼';\r\n  public pathIsRequired = 'è«æ±è·¯å¾ä¸è½çºç©ºï¼';\r\n  public propsIsEmpty = 'æ²æå¯ä»¥ç·¨è¼¯çç©æç¹å¾ï¼';\r\n  public historyAttachment = 'æå²çæ¬éä»¶ç¦æ­¢åªé¤ï¼';\r\n  public plsSelectDownloadAtt = 'è«é¸æè¦ä¸è¼çéä»¶!';\r\n  public noDownloadAtt = 'æ¾ä¸å°è¦ä¸è¼çéä»¶ï¼';\r\n  public plsCheckBatchEditRows = 'è«å¾é¸è¦æ¹éç·¨è¼¯çè¡ï¼';\r\n  public plsSelectDetailFormData = 'è«åé¸æä¸æ¢å¾è¡¨æ¸æï¼';\r\n  public dataAndStateChanged = 'ç¢ºå®è¦å è¼æ¸æä¸¦åæå°$1çæï¼';\r\n  public dataChanged = 'ç¢ºå®è¦å è¼æ¸æä¸¦æ¾æ£ç¶åä¿®æ¹ï¼';\r\n  public stateChanged = 'ç¢ºå®è¦åæå°$1çæï¼';\r\n  public defaultStateName = 'åå§';\r\n  public copy = 'å¾©å¶è©³ç´°ä¿¡æ¯';\r\n  public copySuccess = 'å¾©å¶æå';\r\n  public copyFailed = 'å¾©å¶å¤±æ';\r\n  public roger = 'ç¥éäº';\r\n}\r\n\r\nexport { LanguageMessageForZhft };\r\n","import { LanguageMessage } from './language-message';\r\nimport { LanguageMessageForZh } from './language-message-zh';\r\nimport { LanguageMessageForEn } from './language-message-en';\r\nimport { LanguageMessageForZhft } from './language-message-zhft';\r\nclass LanguageMessageFactory {\r\n\r\n  private static languageMessageMap: Map<string, LanguageMessage> = new Map<string, LanguageMessage>();\r\n\r\n  /**\r\n   * Create an instance by language\r\n   */\r\n  public static create(language: string): LanguageMessage {\r\n    if (this.languageMessageMap.has(language) === true) {\r\n      return this.languageMessageMap.get(language);\r\n    }\r\n\r\n    let languageMessage: LanguageMessage;\r\n    switch (language) {\r\n      case 'zh-CHS':\r\n        languageMessage = new LanguageMessageForZh();\r\n        break;\r\n      case 'en':\r\n        languageMessage = new LanguageMessageForEn();\r\n        break;\r\n      case 'zh-CHT':\r\n        languageMessage = new LanguageMessageForZhft();\r\n        break;\r\n      default:\r\n        languageMessage = new LanguageMessageForZh();\r\n        break;\r\n    }\r\n    this.languageMessageMap.set(language, languageMessage);\r\n\r\n    return languageMessage;\r\n  }\r\n}\r\n\r\nexport { LanguageMessageFactory };\r\n","import { Injectable, LOCALE_ID, Optional, Inject } from '@angular/core';\r\nimport { LanguageMessage, LanguageMessageFactory } from './languages/index';\r\n\r\n\r\n/**\r\n * å¤è¯­è¨æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass LanguageService implements LanguageMessage {\r\n\r\n  /**\r\n   * åä¾å¯¹è±¡\r\n   */\r\n  private static innerInstance: LanguageService = null;\r\n\r\n  // #region å®ç°LanguageMessageæ¥å£ï¼æ¹ä¾¿ä¹¦å\r\n  public yes: string;\r\n  public no: string;\r\n  public unsaveNotifyTitle: string;\r\n  public clientNotifyTitle: string;\r\n  public serverNotifyTitle: string;\r\n  public cancelApproveSuccess: string;\r\n  public cancelApproveFailed: string;\r\n  public unallowEmptyProcessInstanceName: string;\r\n  public unallowEmptyBizBillId: string;\r\n  public unallowEmptyChildBizBillId: string;\r\n  public bizDefKeyRequired: string;\r\n  public procInsIdRequired: string;\r\n  public addChildFailed: string;\r\n  public addSiblingFailed: string;\r\n  public addSubChildFailed: string;\r\n  public addSubSiblingFailed: string;\r\n  public deleteFailed: string;\r\n  public multiSaveFailed: string;\r\n  public appendFailed: string;\r\n  public queryFailed: string;\r\n  public cancelFailed: string;\r\n  public updateFailed: string;\r\n  public addFailed: string;\r\n  public loadFailed: string;\r\n  public saveSuccess: string;\r\n  public saveFailed: string;\r\n  public deleteSuccess: string;\r\n  public deleteFaild: string;\r\n  public confirmDeletion: string;\r\n  public submitSuccess: string;\r\n  public submitFaild: string;\r\n  public notifyTitle: string;\r\n  public httpError: string;\r\n  public gridDataNotSave: string;\r\n  public exitWithoutSave: string;\r\n  public notSupportMenuType: string;\r\n  public cancelWithoutSave: string;\r\n  public plsSelectDeleteData: string;\r\n  public errorHierarchyKey: string;\r\n  public plsSelectParentNode: string;\r\n  public deleteChildFirst: string;\r\n  public incorrectHierarchyConfig: string;\r\n  public operationFailed: string;\r\n  public plsSelectEditData: string;\r\n  public plsSelectViewData: string;\r\n  public plsUploadFirst: string;\r\n  public defaultDialogTitle: string;\r\n  public changeToFirst: string;\r\n  public changeToLast: string;\r\n  public noProcessInstanceId: string;\r\n  public noDataExist: string;\r\n  public noAttachment: string;\r\n  public confirm: string;\r\n  public cancel: string;\r\n  public plsSelectCopyData: string;\r\n  public copyFieldsRequired: string;\r\n  public pathIsRequired: string;\r\n  public propsIsEmpty: string;\r\n  public historyAttachment: string;\r\n  public plsSelectDownloadAtt: string;\r\n  public noDownloadAtt: string;\r\n  public plsCheckBatchEditRows: string;\r\n  public plsSelectDetailFormData: string;\r\n  public dataAndStateChanged: string;\r\n  public dataChanged: string;\r\n  public stateChanged: string;\r\n  public defaultStateName: string;\r\n  public copy: string;\r\n  public copySuccess: string;\r\n  public copyFailed: string;\r\n  public roger: string;\r\n  // #endregion\r\n\r\n  /**\r\n   * å½åè¯­è¨\r\n   */\r\n  protected language = 'zh-CHS';\r\n\r\n  /**\r\n   * å½åè¯­è¨å\r\n   */\r\n  protected get languageMessage(): LanguageMessage {\r\n    return LanguageMessageFactory.create(this.language);\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(@Optional() @Inject(LOCALE_ID) localeId?: string) {\r\n    this.language = localeId || 'zh-CHS';\r\n    this.extendProperties();\r\n    LanguageService.innerInstance = this;\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä¾\r\n   */\r\n  public static getInstance() {\r\n    if (this.innerInstance) {\r\n      return this.innerInstance;\r\n    }\r\n    const instance = new LanguageService('zh-CHS');\r\n    LanguageService.innerInstance = instance;\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * æ©å±å±æ§\r\n   */\r\n  private extendProperties() {\r\n    Object.keys(this.languageMessage).forEach((propName: string) => {\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.languageMessage[propName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { LanguageService };\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class DeviceAbility {\r\n  /**\r\n   * å¤å¶å°ç²è´´æ¿\r\n   * @param text \r\n   * @returns \r\n   */\r\n  public static copyToClipboard(text): boolean {\r\n    const windowRef: any = window;\r\n    if (windowRef.clipboardData && windowRef.clipboardData.setData) {\r\n      return windowRef.clipboardData.setData(\"Text\", text);\r\n    } else if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\r\n      var textarea = document.createElement(\"textarea\");\r\n      textarea.textContent = text;\r\n      textarea.style.position = \"fixed\";\r\n      document.body.appendChild(textarea);\r\n      textarea.select();\r\n      try {\r\n        return document.execCommand(\"copy\");\r\n      } catch (ex) {\r\n        console.warn(\"Copy to clipboard failed.\", ex);\r\n      } finally {\r\n        document.body.removeChild(textarea);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}","\r\nimport { Optional } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { LanguageService } from '../languag.service';\r\nimport { ServerExceptionEntity } from './types';\r\nimport { DeviceAbility } from '../util/device-ability';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport moment from 'moment';\r\n/**\r\n * å¼å¸¸å¤çæ¥å£\r\n */\r\nexport interface IExceptionStrategy {\r\n  handleException(error: ServerExceptionEntity): void;\r\n}\r\n\r\n\r\n/**\r\n * å¼å¸¸å¤çåºç±»\r\n */\r\nexport class ExceptionStrategy {\r\n  constructor(\r\n    public messagerService: MessagerService,\r\n    @Optional() public languageService: LanguageService) {\r\n  }\r\n}\r\n\r\n/**\r\n * ä¿¡æ¯çº§å«å¼å¸¸å¤ç\r\n */\r\nexport class InfoExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.messagerService.info(error.Message);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * è­¦åçº§å«å¼å¸¸å¤ç\r\n */\r\nexport class WarningExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.messagerService.warning(error.Message);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * éè¯¯çº§å«å¼å¸¸å¤ç\r\n */\r\nexport class ErrorExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  private langService: LanguageService = null;\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n    this.langService = languageService;\r\n    if (!this.langService) {\r\n      this.langService = new LanguageService();\r\n    }\r\n\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.handleErrorLevel(error);\r\n  }\r\n\r\n  private handleErrorLevel(error: ServerExceptionEntity): void {\r\n    const exceptionMsg = error.Message || '';\r\n    const date = error.date || new Date();\r\n    const localDate = moment(date).format('YYYY-MM-DD HH:mm:ss');\r\n    const detail = error.Detail || `${error.Message}\\r\\nåçæ¶é´ï¼${localDate}\\r\\nè¯¦ç»ä¿¡æ¯ï¼${error.innerMessage}` || '';\r\n\r\n    const innerMessage = error.innerMessage || null;\r\n    let bsModalRef: BsModalRef;\r\n    const options = {\r\n      // title: this.languageService.serverNotifyTitle,\r\n      showMaxButton: false,\r\n      buttons: [\r\n        {\r\n          text: this.langService.roger,\r\n          cls: 'btn btn-primary btn-lg',\r\n          handle: () => {\r\n            bsModalRef.close();\r\n          }\r\n        }\r\n      ],\r\n      // showHeader: false,\r\n      width: 440,\r\n      height: 200,\r\n      safeHtml: false,\r\n      exception: {\r\n        date: localDate,\r\n        message: innerMessage,\r\n        copyButton: {\r\n          text: this.langService.copy,\r\n          onClick: (e) => {\r\n            const result = DeviceAbility.copyToClipboard(detail);\r\n            const frameContext: FrameContext = error && error['__frame_context__'];\r\n            if (frameContext) {\r\n              const text = result ? this.langService.copySuccess : this.langService.copyFailed;\r\n              // const formNotifyService = frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\r\n              // if (formNotifyService) {\r\n              // formNotifyService.info(text, { hideTitle: true });\r\n              bsModalRef.content.showMiniNotify(text, 1500);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    this.displayError(error);\r\n    bsModalRef = this.messagerService.show('exception', exceptionMsg, options);\r\n  }\r\n  /**\r\n   * å¨æ§å¶å°ä¸­æ¾ç¤ºéè¯¯ä¿¡æ¯\r\n   */\r\n  private displayError(error: ServerExceptionEntity) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n * è´å½éè¯¯çº§å«å¼å¸¸å¤ç\r\n */\r\nexport class FatalExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.messagerService.error(error.Message);\r\n  }\r\n}\r\n","import { Optional, Injectable } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { LanguageService } from '../languag.service';\r\nimport { ServerExceptionEntity, ExceptionLevel } from './types';\r\nimport {\r\n  IExceptionStrategy, InfoExceptionStrategy, WarningExceptionStrategy, ErrorExceptionStrategy, FatalExceptionStrategy\r\n} from './exception_strategy';\r\n\r\n\r\n@Injectable()\r\nexport class ExceptionFactory {\r\n\r\n  /**\r\n   * å¼å¸¸å·¥åå®ä¾\r\n   */\r\n  private static exceptionFactory: ExceptionFactory = null;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param messagerService æ¶æ¯æå¡\r\n   * @param languageService å¤è¯­è¨æå¡\r\n   */\r\n  private constructor(\r\n    public messagerService: MessagerService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n\r\n  }\r\n\r\n  /**\r\n   * è·åå·¥åå®ä¾\r\n   * @param messagerService æ¶æ¯æå¡\r\n   * @param languageService å¤è¯­è¨æå¡\r\n   */\r\n  public static getInstance(messagerService: MessagerService, languageService: LanguageService): ExceptionFactory {\r\n    if (!this.exceptionFactory) {\r\n      this.exceptionFactory = new ExceptionFactory(messagerService, languageService);\r\n    }\r\n\r\n    return this.exceptionFactory;\r\n  }\r\n\r\n  /**\r\n   * è·åå¼å¸¸å¤çç­ç¥\r\n   * @param exceptionLevel å¼å¸¸ç­çº§\r\n   */\r\n  public getExceptionHandleStrategy(exceptionLevel: ExceptionLevel): IExceptionStrategy {\r\n    let exceptionStrategy: IExceptionStrategy;\r\n\r\n    switch (exceptionLevel) {\r\n      case ExceptionLevel.Info:\r\n        exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      case ExceptionLevel.Warning:\r\n        exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      case ExceptionLevel.Error:\r\n        exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      case ExceptionLevel.Fatal:\r\n        exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      default:\r\n\r\n        // é»è®¤å¼å¸¸ç­çº§æ¯éè¯¯\r\n        exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n    }\r\n\r\n    return exceptionStrategy;\r\n  }\r\n}\r\n","// https://github.com/typeslick/status-code-enum\r\nenum HttpStatusType {\r\n    Info = 1,\r\n    Success,\r\n    Redirect,\r\n    ClientError,\r\n    ServerError\r\n}\r\n\r\n/**\r\n * httpéç¨ç±»\r\n */\r\nclass HttpUtil {\r\n\r\n    /**\r\n     * åºäºhttpç¶æç è¿åç¶æç±»å\r\n     * @param httpResponseSatus httpè¯·æ±è¿åç¶æç \r\n     * @returns null | HttpStatusType\r\n     */\r\n    public static getHttpStatusType(httpResponseSatus: number): any {\r\n        if (!httpResponseSatus) {\r\n            return null;\r\n        }\r\n        \r\n        let statusType = null; // é»è®¤å¼ä¸ºç©º\r\n        \r\n        if (httpResponseSatus < 100 || httpResponseSatus > 600) {\r\n            statusType = null; // ä¸åçç¶æç \r\n        } else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {\r\n            statusType = HttpStatusType.Info;\r\n        } else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {\r\n            statusType = HttpStatusType.Success;\r\n        } else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {\r\n            statusType = HttpStatusType.Redirect;\r\n        } else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {\r\n            statusType = HttpStatusType.ClientError;\r\n        } else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {\r\n            statusType = HttpStatusType.ServerError;\r\n        }\r\n\r\n        return statusType;\r\n    }\r\n}\r\n\r\nexport { HttpUtil, HttpStatusType };","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { HttpUtil, HttpStatusType } from '../util/http';\r\n\r\n/**\r\n * è¡¨åéè¯¯æç¤ºæå¡\r\n * @description ç»ä¸å¤çååç«¯å¼å¸¸\r\n */\r\n@Injectable()\r\nclass FormErrorService {\r\n\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * å¼å¸¸è·¯ç±æ¹æ³\r\n   */\r\n  public exception(message: string, error: any) {\r\n    // éå¯¹sessionå¤±æåç¹æ®å¤ç\r\n    if (error && error.hasOwnProperty('expired') && error['expired'] === true) {\r\n      return;\r\n    }\r\n    if (error && this.isHttpErrorResponse(error)) {\r\n      this.httpErrorHandler(error);\r\n    } else {\r\n\r\n      // todo: ç»åå¼å¸¸å¤çåï¼ç»§ç»­æè§£è¯¥æ¹æ³\r\n      this.commonErrorHandler(message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * httpè¯·æ±å¼å¸¸å¤çå¨\r\n   */\r\n  public httpErrorHandler(httpError: HttpErrorResponse): void {\r\n    if (!httpError) {\r\n      return;\r\n    }\r\n\r\n    const statusType = HttpUtil.getHttpStatusType(httpError.status);\r\n\r\n    switch (statusType) {\r\n      case HttpStatusType.ClientError:\r\n        if (httpError.status === 401) {\r\n          this.msgService.http401Error(httpError);\r\n          break;\r\n        }\r\n\r\n        this.msgService.httpErrorInClient(httpError);\r\n        break;\r\n      case HttpStatusType.ServerError:\r\n        this.msgService.httpErrorInServer(httpError);\r\n        break;\r\n      default:\r\n        throw new Error('Get invalid status code when using httpErrorHandler method.');\r\n    }\r\n  }\r\n\r\n  private commonErrorHandler(errorMsg: string): void {\r\n    if (!errorMsg) {\r\n      return;\r\n    }\r\n    this.msgService.error(errorMsg);\r\n  }\r\n  /**\r\n   * httpErrorResponse like\r\n   * @param error å¼å¸¸\r\n   */\r\n  private isHttpErrorResponse(error) {\r\n    if (!error) {\r\n      return false;\r\n    }\r\n    if (typeof error !== 'object') {\r\n      return false;\r\n    }\r\n    if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {\r\n      return true;\r\n    }\r\n    if (error instanceof HttpErrorResponse) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { FormErrorService };\r\n\r\n","import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, Subject, of, from } from 'rxjs';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { LanguageService } from './languag.service';\r\nimport { ServerExceptionEntity, ExceptionFactory, IExceptionStrategy } from './error/index';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\n\r\n/**\r\n * è¡¨åæ¶æ¯æå¡\r\n * @scope FormModule\r\n * @summary\r\n * 1ãåè£@farris/uiçæ¶æ¯æå¡ï¼\r\n * 2ãæä¾éå¯¹è¡¨åçå¿«æ·æ¹æ³ï¼\r\n */\r\n@Injectable()\r\nclass FormMessageService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * æ³¨å¥@farris/uiçLoadingService\r\n   */\r\n  constructor(\r\n    private messagerService: MessagerService,\r\n    @Optional() private languageService: LanguageService,\r\n    @Inject(LOCALE_ID) private curLanguage: string, // ä¸ºäºç¬ç«å¼¹åºéæ°ç»å½æç¤ºæ¡ï¼åæ¢å°è¿è¡æ¡æ¶httpæå¡åå¯ä»¥å é¤\r\n  ) {\r\n    this.languageService = this.languageService || LanguageService.getInstance();\r\n  }\r\n  /**\r\n   * questionå¼¹çª\r\n   */\r\n  public question(content: string): Observable<boolean> {\r\n    const confirmResult$: Promise<boolean> = this.confirmPromise(content);\r\n    return from(confirmResult$);\r\n  }\r\n\r\n  /**\r\n   * å¸¦é»è®¤ç¦ç¹çå¼¹åºæç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public question2(content: string): Observable<boolean> {\r\n    const promise$: Promise<boolean> = new Promise((resolve, reject) => {\r\n      const dialogRef = this.messagerService.question2(\r\n        content,\r\n        [\r\n          {\r\n            text: this.languageService.yes,\r\n            cls: 'btn btn-primary',\r\n            defaultFocus: true,\r\n            handle: () => {\r\n              resolve(true);\r\n              dialogRef.close();\r\n            }\r\n          },\r\n          {\r\n            text: this.languageService.no,\r\n            cls: 'btn btn-secondary',\r\n            handle: () => {\r\n              resolve(false);\r\n              dialogRef.close();\r\n            }\r\n          }\r\n        ]);\r\n    });\r\n    return from(promise$);\r\n  }\r\n\r\n  /**\r\n   * å¼¹åºè¾å¥å¯¹è¯æ¡\r\n   * @param title æ é¢\r\n   */\r\n  public prompt(title: string): Observable<any> {\r\n    return this.messagerService.prompt(title);\r\n  }\r\n\r\n  /**\r\n   * ä½¿ç¨Promiseå®ä¾åè£åè°æ¹æ³ï¼ä»¥åæ­¥åè°æ¹æ³æ§è¡åç»æ\r\n   * @param content\r\n   */\r\n  private confirmPromise(content: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      this.messagerService.question(\r\n        content,\r\n        () => { resolve(true); },\r\n        () => { resolve(false); }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ç¡®è®¤å¼¹æ¡\r\n   * @param content å¼¹åºåå®¹æç¤º\r\n   */\r\n  public confirm(content: string): Observable<boolean> {\r\n    return this.messagerService.confirm(content);\r\n  }\r\n\r\n  /**\r\n   * æ¶æ¯å¼¹æ¡\r\n   */\r\n  public info(content: string) {\r\n    this.messagerService.info(content);\r\n  }\r\n\r\n  /**\r\n   * éè¯¯å¼¹æ¡\r\n   */\r\n  public error(content: string) {\r\n    this.messagerService.error(content);\r\n  }\r\n\r\n  /**\r\n   * è­¦åå¼¹æ¡\r\n   */\r\n  public warning(content: string) {\r\n    this.messagerService.warning(content);\r\n  }\r\n\r\n  /**\r\n   * æå¡å¨ç«¯å¼å¸¸æç¤ºå¼¹æ¡\r\n   */\r\n  public httpErrorInServer(httpError: HttpErrorResponse): void {\r\n    let error: ServerExceptionEntity = httpError.error;\r\n    if (typeof (error) === 'string') {\r\n      try {\r\n        error = JSON.parse(error);\r\n      } catch (e) { }\r\n    }\r\n    if (!error || error.Level == null || error.Level == undefined) { // æªå°è£errorææªè®¾ç½®å¼å¸¸ç­çº§\r\n      this.messagerService.error(httpError.message);\r\n      return;\r\n    }\r\n    const exceptionStrategy: IExceptionStrategy = ExceptionFactory.getInstance(this.messagerService, this.languageService).getExceptionHandleStrategy(error.Level);\r\n    exceptionStrategy.handleException(error);\r\n  }\r\n\r\n  /**\r\n   * å®¢æ·ç«¯å¼å¸¸æç¤ºå¼¹æ¡\r\n   */\r\n  public httpErrorInClient(httpError: HttpErrorResponse): void {\r\n    if (!httpError) {\r\n      return;\r\n    }\r\n    const message = httpError.error && httpError.error.error && httpError.error.error.message;\r\n    const exceptionMsg = message || httpError.message && httpError.message.replace(/http:\\/\\/[a-zA-Z0-9.:]{1,}/, '');\r\n    const options = {\r\n      // title: this.languageService.clientNotifyTitle,\r\n      // showMaxButton: true,\r\n      showHeader: false,\r\n      width: 400,\r\n      height: 200,\r\n      safeHtml: false\r\n    };\r\n\r\n    this.messagerService.show('error', exceptionMsg, options);\r\n  }\r\n\r\n  /**\r\n   * 401å¼å¸¸å¤ç\r\n   * ä¸ºäºç¬ç«å¼¹åºéæ°ç»å½æç¤ºæ¡ï¼åæ¢å°è¿è¡æ¡æ¶httpæå¡åå¯ä»¥å é¤\r\n   * @param httpError å¼å¸¸\r\n   */\r\n  public http401Error(httpError: HttpErrorResponse): void {\r\n    const dialogShownKey = '401ErrorShownFlag';\r\n\r\n    if (!httpError || window[dialogShownKey]) {\r\n      return;\r\n    }\r\n\r\n    const i18n = {\r\n      en: {\r\n        title: 'Warning',\r\n        sessionInvalid: 'Your login has expired, please login again.',\r\n        ok: 'ok',\r\n        cancel: 'cancel'\r\n      },\r\n      'zh-CHS': {\r\n        title: 'æç¤º',\r\n        sessionInvalid: 'ç¨æ·ç»å½ä¿¡æ¯å·²å¤±æï¼æ¯å¦éæ°ç»å½?',\r\n        ok: 'ç¡®è®¤',\r\n        cancel: 'åæ¶'\r\n      }\r\n    };\r\n    this.curLanguage = this.curLanguage || 'zh-CHS';\r\n\r\n    const messageOptions = {\r\n      title: i18n[this.curLanguage].title,\r\n      initialState: {\r\n        okText: i18n[this.curLanguage].ok,\r\n        okHandle: () => {\r\n          modalRef.close();\r\n          window[dialogShownKey] = false;\r\n          const eventResult = httpError && httpError.error || {};\r\n          const redirectUri = eventResult.redirect_uri || '/login.html';\r\n          window.location.href = `/logout.html#?logout-before-redirect=true&loginUri=${redirectUri}`;\r\n        },\r\n        cancelText: i18n[this.curLanguage].cancel,\r\n        cancelHandle: () => {\r\n          modalRef.close();\r\n          window[dialogShownKey] = false;\r\n        }\r\n      },\r\n      showHeader: true,\r\n      width: 420,\r\n      height: 180,\r\n      fitContent: false\r\n    };\r\n    const modalRef = this.messagerService.show('question', i18n[this.curLanguage].sessionInvalid, messageOptions);\r\n    window[dialogShownKey] = true;\r\n    if (modalRef && modalRef.dialog && modalRef.dialog.instance.closed) {\r\n      modalRef.dialog.instance.closed.subscribe(() => {\r\n        window[dialogShownKey] = false;\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { FormMessageService };\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { LanguageService } from './languag.service';\r\n\r\n/**\r\n * éç¥æå¡\r\n * @scope FormModule\r\n * @description\r\n * æ¶æ¯æç¤ºä½¿ç¨ç­ç¥ï¼æåä½¿ç¨successï¼å¤±è´¥ä½¿ç¨errorï¼è­¦åä½¿ç¨warningï¼å¶ä»åºæ¯ä½¿ç¨info\r\n */\r\n@Injectable()\r\nclass FormNotifyService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * æ³¨å¥@farris/uiçNotifyService\r\n   */\r\n  constructor(private notifyService: NotifyService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ä¿¡æ¯æç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public default(content: string) {\r\n    console.log(`DEFAULT: ${content}`);\r\n    return this.notifyService.default(<NotifyOptions>{\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ä¿¡æ¯æç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public info(content: string, options?: { [prop: string]: any }) {\r\n    console.log(`INFO: ${content}`);\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    return this.notifyService.info(notifyOptions);\r\n  }\r\n\r\n  /**\r\n   * æåæç¤º\r\n   * @param content åå®¹\r\n   * @param options? éé¡¹ {shorTitle: false}\r\n   */\r\n  public success(content: string, options?: { [prop: string]: any }) {\r\n    console.log(`SUCCESS: ${content}`);\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    this.notifyService.success(notifyOptions);\r\n  }\r\n\r\n  /**\r\n   * è­¦åæç¤º\r\n   * @param content åå®¹\r\n   * @param options éé¡¹\r\n   */\r\n  public warning(content: string, options?: { [prop: string]: any }) {\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    this.notifyService.warning(notifyOptions);\r\n  }\r\n\r\n  /**\r\n   * éè¯¯æç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public error(content: string, options?: { [prop: string]: any }) {\r\n    console.log(`ERROR: ${content}`);\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    this.notifyService.error(notifyOptions);\r\n  }\r\n}\r\n\r\nexport { FormNotifyService };\r\n","import { Injectable } from '@angular/core';\r\nimport { WizardService, WizardEventType } from '@farris/ui-wizard';\r\nimport { FrameContext } from '@farris/devkit';\r\n\r\n@Injectable()\r\nexport class FormWizardService {\r\n    constructor(\r\n        private wizardSer: WizardService\r\n    ) { }\r\n\r\n    public preStep() {\r\n        const currentPageId = this.wizardSer.getCurrentPageId();\r\n        this.wizardSer.updateWizardState(WizardEventType.Prev, currentPageId);\r\n    }\r\n    public nextStep() {\r\n        const currentPageId = this.wizardSer.getCurrentPageId();\r\n        this.wizardSer.updateWizardState(WizardEventType.Next, currentPageId);\r\n    }\r\n    public cancelWizard() {\r\n        this.wizardSer.cancelWizard();\r\n    }\r\n\r\n    public finishWizard() {\r\n        this.wizardSer.finishWizard();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * æ£æ¥è§å\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass CheckService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦ä¸ºç©º\r\n   */\r\n  public checkEmpty(value: any) {\r\n    return !!value;\r\n  }\r\n}\r\n\r\nexport { CheckService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, empty, of } from 'rxjs';\r\nimport { CommandContext } from '@farris/devkit';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n/**\r\n * æ°æ®æ£æ¥æå¡\r\n */\r\n@Injectable()\r\nclass DataCheckService {\r\n\r\n  constructor(\r\n    private messageService: FormMessageService,\r\n    private formNotifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ç¼è¾åæ£æ¥\r\n   */\r\n  public checkBeforeEdit(idToEdit: string): any {\r\n\r\n    const ifSkipCheck = this.ifSkipCheck(idToEdit);\r\n    if (ifSkipCheck === true) {\r\n      return true;\r\n    }\r\n\r\n    if (idToEdit) {\r\n      return true;\r\n    }\r\n\r\n    this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });\r\n    return empty();\r\n  }\r\n\r\n  /**\r\n   * æ¥çåæ£æ¥\r\n   */\r\n  public checkBeforeView(idToView: string): any {\r\n    const ifSkipCheck = this.ifSkipCheck(idToView);\r\n    if (ifSkipCheck === true) {\r\n      return true;\r\n    }\r\n\r\n    if (idToView) {\r\n      return true;\r\n    }\r\n\r\n    this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });\r\n    return empty();\r\n  }\r\n\r\n  /**\r\n   * èè¡¨åè·³è¿æ£æ¥\r\n   * @todoï¼å¾å é¤ï¼å¼å®¹èè¡¨å\r\n   */\r\n  public ifSkipCheck(id: string): boolean {\r\n    const context = this['context'] as CommandContext;\r\n    const params = context.command.params;\r\n\r\n    // è¡¨åæ²¡æéæ°ä¿å­è¿çæåµ\r\n    if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {\r\n      return true;\r\n    }\r\n\r\n    // ä¿å­è¿ä½æ²¡æå¡«åæ°çæåµ\r\n    // @todo: ä¼æ¼æç©ºä¸²çæåµï¼ç®åä¸»é®è§£æçè¿åå¼æ¯undefinedï¼æä¸èèç©ºä¸²åºæ¯\r\n    if (id === '') {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { DataCheckService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameEventBus } from '@farris/devkit';\r\n\r\n/**\r\n * æ¡æ¶äºä»¶æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass EventService {\r\n\r\n  constructor(private eventBus: FrameEventBus) {\r\n  }\r\n\r\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\r\n    this.eventBus.trigger(eventType, eventData, frameIds);\r\n  }\r\n}\r\n\r\nexport { EventService };\r\n","import { Injectable } from '@angular/core';\r\n// tslint:disable: no-unused-expression\r\n/**\r\n * èåç¶ææå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass MenuStateService {\r\n    private readonly COMMAND_SERVICE_LINK_STORAGE_KEY = 'COMMAND_SERVICE_LINK_STORAGE_KEY';\r\n    private getState() {\r\n        const data = !!sessionStorage && sessionStorage.getItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY) || null;\r\n        if (!!data) {\r\n            return JSON.parse(data);\r\n        }\r\n        return {};\r\n    }\r\n    private setState(links) {\r\n        !!sessionStorage && sessionStorage.setItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY, JSON.stringify(links));\r\n    }\r\n    public addMenuState(parentMenuId: string, childMenuId: string, status: boolean = true) {\r\n        if (!childMenuId) {\r\n            return;\r\n        }\r\n        const state = this.getState();\r\n        const isParentExist = !!state && state.hasOwnProperty(parentMenuId);\r\n        const childItem = { id: childMenuId, status };\r\n        if (isParentExist) {\r\n            const parent = state[parentMenuId];\r\n            const isChildItemExist = parent.find(item => item.id === childMenuId);\r\n            if (!isChildItemExist) {\r\n                state[parentMenuId].push(childItem);\r\n            }\r\n        } else {\r\n            state[parentMenuId] = [childItem];\r\n        }\r\n        this.setState(state);\r\n    }\r\n    public getMenuState(parentMenuId: string, childMenuId?: string) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return null;\r\n        }\r\n        const isParentExist = state.hasOwnProperty(parentMenuId);\r\n        if (!isParentExist) {\r\n            return null;\r\n        }\r\n        const parentMenu = state[parentMenuId];\r\n        const childMenu = parentMenu.filter(item => item.status === true);\r\n        if (typeof childMenuId === 'undefined' || childMenuId.length < 1) {\r\n            return childMenu;\r\n        }\r\n        return parentMenu.filter(item => item.status && item.id === childMenuId);\r\n    }\r\n    public updateMenuState(childMenuId: string, status: boolean) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        Object.keys(state).forEach(key => {\r\n            const childMenu = state[key].find(item => item.id === childMenuId);\r\n            if (!!childMenu) {\r\n                childMenu.status = status;\r\n            }\r\n        });\r\n        this.setState(state);\r\n    }\r\n    public removeMenu(menuId: string) {\r\n        this.removeParentMenu(menuId);\r\n        this.removeChildMenu(menuId);\r\n    }\r\n    private removeParentMenu(menuId: string) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return null;\r\n        }\r\n        Object.keys(state).forEach(item => {\r\n            if (item === menuId && state[menuId].length < 1) {\r\n                delete state[item];\r\n            }\r\n        });\r\n        this.setState(state);\r\n    }\r\n    private removeChildMenu(menuId: string) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        Object.keys(state).forEach(parentMenuId => {\r\n            const childMenus = state[parentMenuId];\r\n            if (childMenus && childMenus.length > 0) {\r\n                childMenus.forEach((child, index) => {\r\n                    if (child.id === menuId) {\r\n                        childMenus.splice(index, 1);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        this.setState(state);\r\n    }\r\n}\r\n\r\nexport { MenuStateService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-15 15:56:11\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-07-09 16:23:04\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { RouterParamService } from '@farris/devkit';\r\nimport { FrameworkService, AppService } from '@gsp-sys/rtf-common';\r\nimport { MenuStateService } from './menu-state.service';\r\nimport { Subject } from 'rxjs';\r\nimport { LanguageService } from './languag.service';\r\n\r\n// tslint:disable: no-string-literal\r\n/**\r\n * è·¯ç±æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass RouterService {\r\n  /**\r\n   * ä¸æ¬¡åæ¢çTabId\r\n   */\r\n  private lastSwitchId: string = null;\r\n  /**\r\n   * ä¸æ¬¡å³é­çTabId\r\n   */\r\n  private lastCloseId: string = null;\r\n  // private menuStateService: MenuStateService = null;\r\n  public onClosed: Subject<any> = null;\r\n  constructor(\r\n    private router: Router,\r\n    private routerParamService: RouterParamService,\r\n    private frameworkService: FrameworkService,\r\n    @Optional() private appService: AppService,\r\n    @Optional() private menuStateService: MenuStateService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.menuStateService) {\r\n      this.menuStateService = new MenuStateService();\r\n    }\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    this.onClosed = new Subject<any>();\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * åæ¢è·¯ç±\r\n   * @param url èåID\r\n   * @param params è·¯ç±åæ°\r\n   */\r\n  public route(url: string, params: any) {\r\n    url = this.router.createUrlTree([url]).toString();\r\n    this.setParams(url, params);\r\n    this.router.navigateByUrl(url);\r\n  }\r\n  /**\r\n   * æ³¨åè¿è¡æ¡æ¶äºä»¶\r\n   */\r\n  public registerEvent() {\r\n    const menuId = this.getAppId() || this.getFuncId();\r\n    this.frameworkService.eventListner(this.frameworkService.FuncSwitch, e => {\r\n      if (!e) {\r\n        return;\r\n      }\r\n      const id = this.getOriginalId(e.id) || e.tabId;\r\n      const menuState = this.menuStateService.getMenuState(id);\r\n      if (!!id && menuId === id && !!menuState && menuState.length > 0) {\r\n        this.formReload();\r\n        this.lastSwitchId = id;\r\n      }\r\n    });\r\n\r\n    this.frameworkService.eventListner(this.frameworkService.FuncClosed, e => {\r\n      if (!e) {\r\n        return;\r\n      }\r\n      this.onClosed.next(e);\r\n      const id = this.getOriginalId(e.id) || e.tabId;\r\n      if (menuId === id) {\r\n        return;\r\n      }\r\n      const menuState = this.menuStateService.getMenuState(menuId, id);\r\n      // && id !== this.lastCloseId\r\n      if (!!id && !!menuState && menuState.length > 0) {\r\n        this.removeMenuState(id);\r\n        this.formReload();\r\n        this.lastCloseId = id;\r\n      }\r\n    });\r\n  }\r\n\r\n  private removeMenuState(tabId: string) {\r\n    if (this['context']) {\r\n      this.menuStateService.removeMenu(tabId);\r\n    }\r\n  }\r\n  /**\r\n   * è·ååå§åè½id\r\n   * @param id id\r\n   */\r\n  private getOriginalId(id: string) {\r\n    if (!id) {\r\n      return id;\r\n    }\r\n    if (id.indexOf('_') !== -1) {\r\n      id = id.split('_')[0];\r\n    }\r\n    return id;\r\n  }\r\n  /**\r\n   * å·æ°ç»ä»¶æ°æ®\r\n   */\r\n  private formReload() {\r\n    try {\r\n      this['context']['frameContext']['appContext']['refresh']();\r\n    } catch{ }\r\n  }\r\n  /**\r\n   * æå¼åè½èå\r\n   * @param funcId èååç \r\n   * @param params è·¯ç±åæ°ï¼å½¢å¦ï¼ { key1: val1, key2: value2 }\r\n   */\r\n  public openMenu(funcId: string, params: any, reload?: boolean) {\r\n    if (typeof reload === 'undefined' || typeof reload !== 'boolean') {\r\n      reload = false;\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const parentMenuId = this.getFuncId() || this.getAppId();\r\n    this.menuStateService.addMenuState(parentMenuId, funcId);\r\n    paramsMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);\r\n    this.frameworkService.openFuncWithParam(funcId, paramsMap, reload);\r\n  }\r\n\r\n  /**\r\n   * æå¼åºç¨\r\n   * @param appId åºç¨åç \r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params è·¯ç±åæ°ï¼å½¢å¦ï¼ { key1: val1, key2: value2 }\r\n   */\r\n  public openApp(appId: string, appEntrance: string, params: any, reload?: boolean) {\r\n    if (typeof reload === 'undefined' || typeof reload !== 'boolean') {\r\n      reload = false;\r\n    }\r\n    const paramMap = this.buildParamMap(params);\r\n    const parentMenuId = this.getAppId() || this.getFuncId();\r\n    this.menuStateService.addMenuState(parentMenuId, appId);\r\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);\r\n    if (!!this.appService) {\r\n      this.appService.openApp(appId, appEntrance, paramMap, reload);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æé åæ°\r\n   */\r\n  private buildParamMap(params: any): Map<string, string> {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (typeof params === 'object') {\r\n      params = JSON.stringify(params);\r\n    }\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    return paramMap;\r\n  }\r\n\r\n  /**\r\n   * å³é­åè½èå\r\n   */\r\n  public closeMenu() {\r\n    const funcId: string | null = this.getFuncId();\r\n    const appId: string | null = this.getAppId();\r\n    const { isDialogComponent, rootComponent } = this.findDialog();\r\n    if (isDialogComponent) {\r\n      const modalRef = this.get(rootComponent, 'dialogRef');\r\n      modalRef['close']();\r\n      return;\r\n    }\r\n\r\n    if (funcId !== null && typeof funcId === 'string' && funcId.length > 0) {\r\n      this.closeFunc(funcId);\r\n    } else if (appId !== null && typeof appId === 'string' && appId.length > 0) {\r\n      const appEntrance = this.getAppEntrance();\r\n      this.closeApp(appId, appEntrance);\r\n    } else {\r\n      console.error(this.languageService['notSupportMenuType']);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ¥æ¾å¼¹çªç»ä»¶\r\n   */\r\n  private findDialog() {\r\n    let frameContext = this.get(this, 'context.frameContext');\r\n    let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n\r\n    let parentFrameContext = this.get(frameContext, 'parent');\r\n    while (parentFrameContext != null && !isDialogComponent) {\r\n      frameContext = this.get(frameContext, 'parent');\r\n      parentFrameContext = this.get(parentFrameContext, 'parent');\r\n      isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n    }\r\n    const rootComponent = this.get(frameContext, 'frameComponent');\r\n    return { isDialogComponent, rootComponent };\r\n\r\n  }\r\n\r\n  /**\r\n   * loadsh get\r\n   * @param object å¯¹è±¡\r\n   * @param path è·¯å¾\r\n   * @param defaultVal é»è®¤å¼\r\n   */\r\n  private get(object: any, path: Array<string> | string, defaultVal: any = null) {\r\n    const PATH = Array.isArray(path)\r\n      ? path\r\n      : path.split('.').filter(i => i.length);\r\n    if (!PATH.length) {\r\n      return object === undefined ? defaultVal : object;\r\n    }\r\n\r\n    if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {\r\n      return defaultVal;\r\n    }\r\n\r\n    return this.get(object[PATH.shift()], PATH, defaultVal);\r\n  }\r\n\r\n  /**\r\n   * å³é­èå\r\n   * @param funcId èåid\r\n   */\r\n  public closeFunc(funcId?: string) {\r\n    if (!funcId) {\r\n      funcId = this.getFuncId();\r\n    }\r\n    if (!!this.frameworkService) {\r\n      this.frameworkService.closeFunc(funcId).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å³é­app\r\n   * @param appId åºç¨id\r\n   */\r\n  public closeApp(appId?: string, appEntrance?: string) {\r\n    if (!appId) {\r\n      appId = this.getAppId();\r\n    }\r\n    if (typeof appEntrance === 'undefined') {\r\n      appEntrance = this.getAppEntrance();\r\n    }\r\n    if (!!this.appService) {\r\n      this.appService.closeApp(appId, appEntrance).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®åæ°\r\n   * @param params è·¯ç±åæ°\r\n   */\r\n  private setParams(url: string, params: string | { [key: string]: any; }) {\r\n    let paramsObj;\r\n    if (typeof params === 'string' && params !== '') {\r\n      paramsObj = JSON.parse(params);\r\n    } else {\r\n      paramsObj = params || {};\r\n    }\r\n\r\n    // è®¾ç½®è·¯ç±åæ°\r\n    this.routerParamService.setParams(url, paramsObj);\r\n  }\r\n\r\n  /**\r\n   * è·åfuncId\r\n   */\r\n  private getFuncId() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('funcId')) {\r\n      return params.funcId;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åappId\r\n   */\r\n  private getAppId() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('appId')) {\r\n      return params.appId;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getParentMenuId() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('WEB_FORM_ROUTER_PARENT_ID')) {\r\n      return params.WEB_FORM_ROUTER_PARENT_ID;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * è·ååºç¨å¥å£\r\n   */\r\n  private getAppEntrance() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('appEntrance')) {\r\n      return params.appEntrance;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * è§£ç åæ°\r\n   * @param query search|hash\r\n   */\r\n  private decodeURLParams(query: string): { [propName: string]: any } {\r\n    if (typeof query === 'undefined') {\r\n      query = window.location.hash || window.location.search;\r\n    }\r\n    const hashes = query.slice(query.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n\r\nexport { RouterService };\r\n","import { RequestInfo } from '@farris/bef';\r\n// tslint:disable: unified-signatures\r\nexport const TAB_EVENT = {\r\n    /**\r\n     * Tabå³é­å\r\n     */\r\n    onTabClosed: 'FuncClosed',\r\n    /**\r\n     * Tabå³é­å\r\n     */\r\n    onTabClosing: 'beforeFuncCloseEvent',\r\n    /**\r\n     * Tabåæ¢\r\n     */\r\n    onTabSwitched: 'funcSwitchEvent'\r\n};\r\n\r\nexport const TAB_QUERY_STRING = {\r\n    TabId: 'tabId',\r\n    AppType: 'appType',\r\n    AppId: 'appId',\r\n    AppEntrance: 'appEntrance',\r\n    FuncId: 'funcId'\r\n};\r\n\r\n/**\r\n * å¸¦RequestInfoçbodyå¯¹è±¡\r\n */\r\nexport interface BodyWithRequestInfo {\r\n    requestInfo: RequestInfo;\r\n    [key: string]: any;\r\n}\r\n\r\nexport const WEB_FORM_ROUTE_PARAMS_KEY = 'WEB_FORM_ROUTE_PARAMS';\r\nexport const enum DataType{\r\n  map = '[object Map]'\r\n}","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * æ¥è¯¢åæ°æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class QuerystringService {\r\n    /**\r\n     * è§£ç åæ°\r\n     * @param queryString search|hash\r\n     */\r\n    public parse(queryString: string): { [propName: string]: any } {\r\n        if (!queryString) {\r\n            return {};\r\n        }\r\n        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n        return hashes.reduce((params, hash) => {\r\n            const split = hash.indexOf('=');\r\n            const key = hash.slice(0, split);\r\n            const val = hash.slice(split + 1);\r\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n        }, {});\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { UID } from '@farris/devkit';\r\nimport { switchMap } from 'rxjs/operators';\r\n/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-07-23 15:56:11 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-11-27 15:31:36\r\n */\r\n\r\n\r\n/**\r\n * RuntimeFrameworkService\r\n * @scope @FormModule\r\n */\r\n// tslint:disable: no-string-literal disable: max-line-length\r\n@Injectable()\r\nexport class RuntimeFrameworkService {\r\n  private rtfService: any;\r\n  constructor() {\r\n    this.rtfService = this.getService();\r\n  }\r\n  /**\r\n   * éåè·årtfæå¡\r\n   */\r\n  private getService() {\r\n    let env: Window = window;\r\n    while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {\r\n      env = env.parent;\r\n    }\r\n    return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};\r\n  }\r\n  // #region å¯¼èªæå¡\r\n  /**\r\n   * æå¼èåæåºç¨\r\n   * @param options options\r\n   */\r\n  openMenu(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenu'] === 'function') {\r\n      this.rtfService.func.openMenu(options);\r\n    }\r\n  }\r\n  /**\r\n   * æå¼èåæåºç¨\r\n   * @param options options\r\n   */\r\n  openMenu$(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenuByStream'] === 'function') {\r\n      return this.rtfService.func.openMenuByStream(options);\r\n    }\r\n    return EMPTY;\r\n  }\r\n  /**\r\n   * è·åå¯¼èªå®ä½æ°æ®\r\n   * @param tabId tabid\r\n   * @param callback callback\r\n   * @param once once\r\n   */\r\n  getEntityParam(tabId: string, callback: any, once: boolean = true) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getEntityParam'] === 'function') {\r\n      this.rtfService.func.getEntityParam(tabId, callback, once);\r\n    }\r\n  }\r\n  /**\r\n   * å°è¯å³é­èåæåºç¨\r\n   * @param options optins\r\n   */\r\n  beforeCloseMenu(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['beforeClose'] === 'function') {\r\n      this.rtfService.func.beforeClose(options);\r\n    }\r\n  }\r\n  /**\r\n   * å³é­èå\r\n   * @param options options\r\n   */\r\n  closeMenu(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['close'] === 'function') {\r\n      this.rtfService.func.close(options);\r\n    }\r\n  }\r\n  /**\r\n   * è·åèåéæåæ°\r\n   * @param funcId èåid\r\n   * @param callback åè°\r\n   */\r\n  getMenuParams(funcId: string, callback: (params) => void) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getMenuParams'] === 'function') {\r\n      this.rtfService.func.getMenuParams(funcId, callback);\r\n    }\r\n  }\r\n  /**\r\n   * æ·»å äºä»¶çå¬\r\n   */\r\n  addEventListener(token: string, handler: (value: any) => void, options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('frmEvent') && typeof this.rtfService['frmEvent']['eventListener'] === 'function') {\r\n      this.rtfService.frmEvent.eventListener(token, handler, options);\r\n    }\r\n  }\r\n  /**\r\n   * è·åè¿è¡æ¡æ¶èååæ¢æ§å¶äºä»¶\r\n   * @returns Observable<any>\r\n   */\r\n  public getMenuSwitchControlEvent(): Observable<any> {\r\n    const subject = new Subject<any>();\r\n    const frmEvent = this.rtfService && this.rtfService.frmEvent || null;\r\n    if (frmEvent) {\r\n      const tabId = this.tabId;\r\n      const options = this.params;\r\n      window.setTimeout(() => {\r\n        frmEvent.eventListener(tabId, (response: { menuSwitchControl: { key: any, value: any }, [prop: string]: any }) => {\r\n          const menuSwitchControl = response && response.menuSwitchControl || null;\r\n          if (menuSwitchControl && menuSwitchControl.key === tabId) {\r\n            subject.next(menuSwitchControl.value);\r\n          } else {\r\n            subject.next(null);\r\n          }\r\n        }, options);\r\n      }, 0);\r\n    }\r\n    return subject;\r\n  }\r\n  //#endregion\r\n\r\n  // #region ééå±å±æ§\r\n  public get params() {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('session') && typeof this.rtfService['session']['getCommonVariable'] === 'function') {\r\n      return this.rtfService['session']['getCommonVariable']();\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * è·åtabId\r\n   */\r\n  public get tabId() {\r\n    return this.params && this.params['tabId'] || null;\r\n  }\r\n  /**\r\n   * è·åformToken\r\n   */\r\n  public get formToken() {\r\n    return this.params && this.params['formToken'] || null;\r\n  }\r\n  /**\r\n   * è·åfuncId\r\n   */\r\n  public get funcId() {\r\n    return this.params && this.params['funcId'] || null;\r\n  }\r\n  // #endregion\r\n\r\n  // #region äºä»¶éä¿¡\r\n  /**\r\n   * æ³¨åä¸»é¢\r\n   * @param code ä¸»é¢çæ è¯\r\n   * @param options tokençæè§å\r\n   * @param subject èªå®ä¹ä¸»é¢ï¼é»è®¤ä½¿ç¨Subject\r\n   * @returns string æ³¨åæååè¿åä¸»é¢çå¯ä¸æ è¯\r\n   */\r\n  public subjectRegister(code: string, options: any, subject?: Subject<any>): string {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRegister'] === 'function') {\r\n      return this.rtfService.broadcast.subjectRegister(code, options, subject);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * ç§»é¤ä¸»é¢\r\n   * @param token ä¸»é¢å¯ä¸æ è¯\r\n   */\r\n  public subjectRemove(token: string) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRemove'] === 'function') {\r\n      this.rtfService.broadcast.subjectRemove(token);\r\n    }\r\n  }\r\n  /**\r\n   * ç»ä¸»é¢åéæ¶æ¯\r\n   * @param token ä¸»é¢æ è¯\r\n   * @param info æ¶æ¯\r\n   */\r\n  public subjectNotify(token: string, info: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['notify'] === 'function') {\r\n      this.rtfService.broadcast.notify(token, info);\r\n    }\r\n  }\r\n  /**\r\n   * æ³¨åä¸»é¢çå¬å¨\r\n   * @param token ä¸»é¢æ è¯\r\n   * @param handler ä¸»é¢å¤çå¨\r\n   * @param observerToken çå¬å¨id(å¯é)\r\n   * @returns çå¬å¨Id\r\n   * @description çå¬ä¸»é¢æ¶æ¯ï¼çå¬æåè¿åå½åçå¬èçå¯ä¸æ è¯\r\n   */\r\n  public subjectResponse(token: string, handler: (data: any) => void, observerToken?: string): string {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['response'] === 'function') {\r\n      let code = observerToken;\r\n      if (typeof observerToken === 'undefined' || !observerToken || observerToken.length < 1) {\r\n        code = UID.create();\r\n      }\r\n      this.rtfService.broadcast.response(token, code, handler);\r\n      return code;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * åæ¶å¯¹ä¸»é¢ççå¬\r\n   * @param token ä¸»é¢æ è¯\r\n   * @param observerToken çå¬å¨æ è¯\r\n   */\r\n  public responseUnSubscribe(token: string, observerToken: string) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['responseUnSubscribe'] === 'function') {\r\n      this.rtfService.broadcast.responseUnSubscribe(token, observerToken);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  // #region å·¥å·å½æ°\r\n  /**\r\n   * æ¯å¦åæº\r\n   * @param environment window\r\n   */\r\n  private isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // #endregion\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of, from, EMPTY } from 'rxjs';\r\nimport { every, concatMap, switchMap, take, tap } from 'rxjs/operators';\r\nimport { AppOptions } from '@gsp-sys/rtf-common';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { MenuStateService } from './menu-state.service';\r\nimport { TAB_EVENT } from './types';\r\nimport { QuerystringService } from './querystring';\r\nimport { UID } from '@farris/devkit';\r\n\r\n/**\r\n * å¯¼èªäºä»¶æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class NavigationEventService {\r\n  /**\r\n   * å³é­åäºä»¶å¤çå¨\r\n   */\r\n  private onClosedListeners: Map<string, (options?: AppOptions) => void>;\r\n  /**\r\n   * å³é­åå¤çå¨\r\n   */\r\n  private onClosingListeners: Map<string, (options?: AppOptions) => Observable<boolean>>;\r\n  private onTabSwitchListeners: Map<string, (options?: AppOptions) => void>;\r\n  private params: { [propName: string]: any };\r\n\r\n  constructor(\r\n    private runtimeFrameworkService: RuntimeFrameworkService,\r\n    private menuStateService: MenuStateService,\r\n    private querystringService: QuerystringService\r\n  ) {\r\n    this.onClosedListeners = new Map<string, (options?: AppOptions) => void>();\r\n    this.onClosingListeners = new Map<string, (options?: AppOptions) => Observable<boolean>>();\r\n    this.onTabSwitchListeners = new Map<string, (options?: AppOptions) => void>();\r\n  }\r\n  private get querystrings() {\r\n    const params = this.querystringService.parse(window.location.hash);\r\n    // ä¿®æ­£formToken\r\n    if (params) {\r\n      params.formToken = this.runtimeFrameworkService.formToken;\r\n    }\r\n    return params;\r\n  }\r\n  /**\r\n   * æ³¨åäºä»¶\r\n   */\r\n  public registerEvent() {\r\n    const options = this.querystrings;\r\n    this.params = options;\r\n    // æ³¨åæ ç­¾é¡µåæ¢äºä»¶\r\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabSwitched, (e) => this.handleTabSwitchEvent(e), options);\r\n    // æ³¨åæ ç­¾é¡µå³é­åäºä»¶\r\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosed, (e) => this.handleTabClosedEvent(e), options);\r\n    // æ³¨åæ ç­¾é¡µå³é­åäºä»¶\r\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosing, (e) => this.handleTabClosingEvent(e), options);\r\n  }\r\n  /**\r\n   * å¤çæ ç­¾é¡µåæ¢äºä»¶\r\n   */\r\n  private handleTabSwitchEvent(e: any) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    // éä¸­çè¡¨åä¸ºç³»ç»è¡¨åï¼åªè½è¿åidï¼æ²¡ætabId\r\n    const eventTabId = e.tabId || e.id || null;\r\n    if (!eventTabId) {\r\n      return;\r\n    }\r\n    const options = this.params; // this.querystrings;\r\n    const tabId = options.tabId || options.funcId || options.appId;\r\n    const menuState = this.menuStateService.getMenuState(eventTabId);\r\n    if (!!tabId && tabId === eventTabId && !!menuState && menuState.length > 0) {\r\n      this.formReload();\r\n    }\r\n    this.fireTabSwitchEvent(e);\r\n  }\r\n  /**\r\n   * è§¦åtabåæ¢äºä»¶\r\n   * @param e e\r\n   */\r\n  private fireTabSwitchEvent(e: any) {\r\n    if (!this.onTabSwitchListeners || this.onTabSwitchListeners.size < 1) {\r\n      return;\r\n    }\r\n    this.onTabSwitchListeners.forEach((handle, key, map) => {\r\n      if (typeof handle === 'function') {\r\n        handle(e);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æ ç­¾é¡µå³é­åäºä»¶\r\n   */\r\n  private handleTabClosingEvent(e: any) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    // è¦å³é­çè¡¨åä¸ºç³»ç»è¡¨åï¼åªè½è¿åidï¼æ²¡ætabId\r\n    const eventTabId = e.tabId || e.id || null;\r\n    const options = this.params; // this.querystrings;\r\n    const tabId = options.tabId || options.funcId || options.appId;\r\n    if (!!eventTabId && !!tabId && tabId === eventTabId) {\r\n      this.fireTabClosingEvent(e).subscribe(result => {\r\n        if (result) {\r\n          setTimeout(() => this.removeMenuState(eventTabId), 500);\r\n          const formEventServices: Map<string, any> = window['formEventServices'];\r\n          if (formEventServices.has(eventTabId)) {\r\n            formEventServices.delete(eventTabId);\r\n            window['formEventServices'] = formEventServices;\r\n          }\r\n          if (!(e && e.hasOwnProperty('token'))) {\r\n            e = Object.assign({}, e, { token: options.formToken });\r\n          }\r\n          this.runtimeFrameworkService.closeMenu(e);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * è§¦åå³é­åäºä»¶\r\n   */\r\n  private fireTabClosingEvent(e: any): Observable<boolean> {\r\n    if (!this.onClosingListeners || this.onClosingListeners.size < 1) {\r\n      return of(true);\r\n    }\r\n    const listeners = this.onClosingListeners.values();\r\n    const result$ = from(listeners);\r\n    // ç¨æ·æç»\r\n    let userRejected = false;\r\n    return result$.pipe(\r\n      concatMap(handle => {\r\n        if (userRejected) {\r\n          return EMPTY;\r\n        }\r\n        return handle(e).pipe(\r\n          take(1),\r\n          tap(result => userRejected = !result),\r\n          switchMap(result => of(result))\r\n        );\r\n      }),\r\n      every(result => result)\r\n    );\r\n  }\r\n  /**\r\n   * æ ç­¾é¡µå³é­åäºä»¶\r\n   */\r\n  private handleTabClosedEvent(e: any) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    const options = this.params; // this.querystrings;\r\n    const tabId = options.tabId || options.funcId || options.appId;\r\n    const eventTabId = e.tabId || e.id || null;\r\n    if (tabId === eventTabId) {\r\n      return;\r\n    }\r\n    const menuState = this.menuStateService.getMenuState(tabId, eventTabId);\r\n    if (!!eventTabId && !!menuState && menuState.length > 0) {\r\n      this.removeMenuState(eventTabId);\r\n      this.formReload();\r\n    }\r\n    this.fireTabClosedEvent(e);\r\n  }\r\n  private removeMenuState(tabId: string) {\r\n    if (this['context']) {\r\n      this.menuStateService.removeMenu(tabId);\r\n    }\r\n  }\r\n  /**\r\n   * è§¦åå³é­åäºä»¶\r\n   * @param e event\r\n   */\r\n  private fireTabClosedEvent(e: any) {\r\n    if (!this.onClosedListeners || this.onClosedListeners.size < 1) {\r\n      return;\r\n    }\r\n    this.onClosedListeners.forEach((handle, key, map) => {\r\n      if (typeof handle === 'function') {\r\n        handle(e);\r\n      }\r\n    });\r\n  }\r\n  // #endregion\r\n  /**\r\n   * æ³¨åäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å onTabClosed\r\n   * @param handler å¤çå¨\r\n   */\r\n  public addEventListener(eventType: string, handler: (options: AppOptions) => any): string {\r\n    const key = UID.create();\r\n    if (eventType === TAB_EVENT.onTabClosed) {\r\n      this.onClosedListeners.set(key, handler);\r\n      return key;\r\n    } else if (eventType === TAB_EVENT.onTabClosing) {\r\n      this.onClosingListeners.set(key, handler);\r\n      return key;\r\n    } else if (eventType === TAB_EVENT.onTabSwitched) {\r\n      this.onTabSwitchListeners.set(key, handler);\r\n      return key;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * ç§»é¤äºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å\r\n   * @param key äºä»¶æ è¯\r\n   */\r\n  public removeEventListener(eventType: string, key: string) {\r\n    if (eventType === TAB_EVENT.onTabClosed) {\r\n      return this.onClosedListeners.delete(key);\r\n    } else if (eventType === TAB_EVENT.onTabClosing) {\r\n      return this.onClosingListeners.delete(key);\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * æ¸ç©ºäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å\r\n   */\r\n  public clearEventListener(eventType: string): void {\r\n    if (eventType === TAB_EVENT.onTabClosed) {\r\n      this.onClosedListeners.clear();\r\n    } else if (eventType === TAB_EVENT.onTabClosing) {\r\n      this.onClosingListeners.clear();\r\n    }\r\n  }\r\n  /**\r\n   * å·æ°ç»ä»¶æ°æ®\r\n   */\r\n  private formReload() {\r\n    try {\r\n      // tslint:disable-next-line: no-string-literal\r\n      this['context']['frameContext']['appContext']['refresh']();\r\n    } catch { }\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\r\nexport const FARRIS_FORM_COMPONENTS = new InjectionToken<{[key: string]: any}>('è¡¨åå¼¹åºçªå£æéèç»ä»¶åè¡¨');\r\n\r\n/**\r\n * è¡¨åæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class FarrisFormService {\r\n\r\n    private controls: { [key: string]: any} = {};\r\n\r\n    constructor(@Optional()@Inject(FARRIS_FORM_COMPONENTS) initCtrls: any = {}) {\r\n      if (!initCtrls) {\r\n        initCtrls = {};\r\n      }\r\n      this.controls = { ...initCtrls };\r\n    }\r\n\r\n    append(key: string, cmpIns: any) {\r\n        this.controls[key] = cmpIns;\r\n    }\r\n\r\n    getControls(key: string) {\r\n        if (this.controls[key]) {\r\n            return this.controls[key];\r\n        } else {\r\n            console.warn(`æªæ¾å°Keyä¸º${key}çç»ä»¶ï¼`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * @Author: aalizzwell\r\n * @Date: 2019-08-02 15:31:34\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2020-03-03 09:33:43\r\n */\r\nimport { Injectable, Optional, Injector, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { AppOptions, AppType } from '@gsp-sys/rtf-common';\r\nimport { MenuStateService } from './menu-state.service';\r\nimport { NavigationEventService } from './navigation-event.service';\r\nimport { QuerystringService } from './querystring';\r\nimport { FrameContext, TranslateToken, Translate, FrameComponent } from '@farris/devkit';\r\nimport { FEPageModalService } from '@farris/extend-page-modal';\r\nimport lodash from 'lodash-es';\r\nimport { FarrisFormService } from './farris-form.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\ndeclare const System: any;\r\n// tslint:disable: no-string-literal max-line-length\r\nconst APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';\r\n/**\r\n * å¯¼èªæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class NavigationService {\r\n  constructor(\r\n    private runtimeFrameworkService: RuntimeFrameworkService,\r\n    private menuStateService: MenuStateService,\r\n    private navigationEventService: NavigationEventService,\r\n    private querystringService: QuerystringService,\r\n    @Optional() private frameContext: FrameContext,\r\n    @Optional() private injector: Injector,\r\n    // @Optional() private pageModalService: FEPageModalService,\r\n    // @Optional() private farrisFormService: FarrisFormService,\r\n    // @Optional() private languageService: LanguageService\r\n  ) {\r\n    // appIdä¸åäºtabIdï¼æ¯æ¬¡è¡¨åå®ä¾åæ¶é½ä¼éæ°çæ\r\n    const appId = this.formAppContext && this.formAppContext.ApplicationId;\r\n    let tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    // å·²ç»ç¼è¯çè¡¨åï¼ä½¿ç¨appIdè®°å½hash\r\n    if (appId) {\r\n      const appContextManager = window[APP_CONTEXT_MANAGER] || new Map<string, any>();\r\n      if (appContextManager && !appContextManager.has(appId)) {\r\n        appContextManager.set(appId, { hash: window.location.hash });\r\n        window[APP_CONTEXT_MANAGER] = appContextManager;\r\n      }\r\n    }\r\n    if (tabId) {\r\n      const formEventServices: Map<string, any> = window['formEventServices'] || new Map<string, any>();\r\n      // tabIdãappIdé½å­å¨æ¶ï¼ä½¿ç¨appIdæ¿æ¢tabId\r\n      if (appId) {\r\n        tabId = appId;\r\n      }\r\n      if (formEventServices && formEventServices.has(tabId)) {\r\n        this.navigationEventService = formEventServices.get(tabId);\r\n      } else {\r\n        this.navigationEventService.registerEvent();\r\n        formEventServices.set(tabId, this.navigationEventService);\r\n        window['formEventServices'] = formEventServices;\r\n      }\r\n    }\r\n\r\n  }\r\n  public set context(context) {\r\n    this.navigationEventService['context'] = context;\r\n    this['commandContext'] = context;\r\n  }\r\n  /**\r\n   * è·åæ´ä¸ªè¡¨åçappcontextï¼é¤moduleä¸çappcontextï¼\r\n   */\r\n  private get formAppContext() {\r\n    if (this.frameContext) {\r\n      let appContext = this.frameContext.appContext;\r\n      // tslint:disable-next-line: max-line-length\r\n      while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(FrameContext, null) !== null) {\r\n        appContext = appContext.parent;\r\n      }\r\n      return appContext;\r\n    }\r\n    return null;\r\n  }\r\n  private get querystrings() {\r\n    let hash = window.location.hash;\r\n    const appId = this.formAppContext && this.formAppContext.ApplicationId;\r\n    if (appId) {\r\n      const appContextManager = window[APP_CONTEXT_MANAGER];\r\n      const appContext = appContextManager && appContextManager.get(appId);\r\n      hash = appContext && appContext.hash || hash;\r\n    }\r\n    const params = this.querystringService.parse(hash);\r\n    if (params) {\r\n      params.formToken = this.runtimeFrameworkService.formToken;\r\n    }\r\n    return params;\r\n  }\r\n  // #region æ¥å£\r\n\r\n  /**\r\n   * æå¼èå\r\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param funcId èåId\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param tabName tabæ é¢\r\n   * @param destructuring æ¯å¦è§£æåæ°\r\n   */\r\n  public openMenu(tabId: string, funcId: string, params: any, reload?: boolean, enableRefresh?: any, tabName?: string, destructuring?: any) {\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      funcId,\r\n      appType: AppType.Menu,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      appId: undefined,\r\n      appEntrance: undefined,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\r\n    // æ²¡æä¼ éè¯¥åæ°æè¯¥åæ°ä¸ºç©ºï¼åè®¤ä¸ºæç§ä¹åçé»è¾å¤çï¼é»è®¤å·æ°\r\n    // null false \"false\" \"true\" undefined\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    this.runtimeFrameworkService.openMenu(options);\r\n  }\r\n  /**\r\n   * æå¼èåï¼æµï¼\r\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param funcId èåId\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n  public openMenu$(tabId: string, funcId: string, params: any, reload?: boolean, enableRefresh?: any, tabName?: string, destructuring?: any) {\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      funcId,\r\n      appType: AppType.Menu,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      appId: undefined,\r\n      appEntrance: undefined,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    return this.runtimeFrameworkService.openMenu$(options);\r\n  }\r\n  /**\r\n   * æå¼èå(å¸¦ç»´åº¦)\r\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param funcId èåId\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param dim1 dim1\r\n   * @param dim2 dim2\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n  public openMenuWithDimension(tabId: string, funcId: string, params: any, enableRefresh?: any, dim1?: any, dim2?: any, tabName?: string, metadataId?: string, destructuring?: any) {\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    if (metadataId === undefined || metadataId === null) {\r\n      metadataId = '';\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n\r\n    const paramsMap = this.buildParamMap(params);\r\n    queryStringParams.set('dim1', dim1 ? dim1 : 'public');\r\n    queryStringParams.set('dim2', dim2 ? dim2 : 'public');\r\n    queryStringParams.set('metadataId', metadataId);\r\n    queryStringParams.set('isRtc', '1');\r\n    queryStringParams.set('isRootMetadata', 'true');\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      funcId,\r\n      appType: AppType.Menu,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      appId: undefined,\r\n      appEntrance: undefined,\r\n      isReload: false,\r\n      tabName: tabName || null\r\n    };\r\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\r\n    // æ²¡æä¼ éè¯¥åæ°æè¯¥åæ°ä¸ºç©ºï¼åè®¤ä¸ºæç§ä¹åçé»è¾å¤çï¼é»è®¤å·æ°\r\n    // null false \"false\" \"true\" undefined\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    this.runtimeFrameworkService.openMenu(options);\r\n  }\r\n  /**\r\n   * æå¼åºç¨\r\n   * @param tabId tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param appId åºç¨Id\r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param tabName tabæ é¢\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n\r\n  public openApp(tabId: string, appId: string, appEntrance: string, params: any, reload?: boolean, tabName?: string, enableRefresh?: any, destructuring?: any) {\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      appId,\r\n      appEntrance,\r\n      funcId: undefined,\r\n      appType: AppType.App,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    this.runtimeFrameworkService.openMenu(options);\r\n  }\r\n  /**\r\n   * æå¼åºç¨(æµå¼)\r\n   * @param tabId tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param appId åºç¨Id\r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param tabName tabæ é¢\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n  public openApp$(tabId: string, appId: string, appEntrance: string, params: any, reload?: boolean, tabName?: string, enableRefresh?: any, destructuring?: any) {\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      appId,\r\n      appEntrance,\r\n      funcId: undefined,\r\n      appType: AppType.App,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    return this.runtimeFrameworkService.openMenu$(options);\r\n  }\r\n  /**\r\n   * å³é­\r\n   * @param onCloseing å³é­åäºä»¶å¤çå¨\r\n   */\r\n  public close() {\r\n    const options = this.querystrings;\r\n    const { isDialogComponent: isInDialog, rootComponent } = this.findDialog();\r\n    if (isInDialog) {\r\n      const modalRef = this.get(rootComponent, 'dialogRef');\r\n      modalRef['close']();\r\n      return;\r\n    }\r\n    options.token = options.formToken;\r\n    this.runtimeFrameworkService.beforeCloseMenu(options);\r\n  }\r\n  /**\r\n   * å¼ºå¶å³é­\r\n   */\r\n  public destory() {\r\n    const options = this.querystrings;\r\n    options.token = options.formToken;\r\n    this.runtimeFrameworkService.closeMenu(options);\r\n  }\r\n  /**\r\n   * \r\n   * @param params params\r\n   * @deprecated å¾åºå¼ï¼ä¸buildParamMapéå¤\r\n   */\r\n  private parseParams(params: any) {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (typeof params === 'object') {\r\n      params = JSON.stringify(params);\r\n    }\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    return paramMap;\r\n  }\r\n  /**\r\n   * æ³¨åäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å onTabClosed\r\n   * @param handler å¤çå¨\r\n   * @returns string è¿åäºä»¶æ è¯\r\n   */\r\n  public addEventListener(eventType: string, handler: (options: AppOptions) => any): string {\r\n    return this.navigationEventService.addEventListener(eventType, handler);\r\n  }\r\n  /**\r\n   * ç§»é¤äºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å onTabClosed | onTabCloseing\r\n   * @param key äºä»¶æ è¯\r\n   */\r\n  public removeEventListener(eventType: string, key: string): boolean {\r\n    return this.navigationEventService.removeEventListener(eventType, key);\r\n  }\r\n  /**\r\n   * æ¸ç©ºäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å\r\n   */\r\n  public clearEventListener(eventType: string): void {\r\n    this.navigationEventService.clearEventListener(eventType);\r\n  }\r\n  /**\r\n   * ä»¥å¼¹æ¡ãä¾§è¾¹æ ææ°æ ç­¾é¡µæ¹å¼æå¼è¡¨å\r\n   * @param mode æå¼æ¹å¼ï¼æ¯æ`modal`å¼¹çªã`sidebar`ä¾§è¾¹æ ã`tab`æ°æ ç­¾é¡µ\r\n   * @param modalId å¼¹çªidï¼å¦æmode=`modal`ä¸æ²¡æurlï¼\r\n   * @param configs å¼¹çªéç½®\r\n   * @param url è¿ç«¯è¡¨åurl\r\n   * @param tabId æ ç­¾é¡µidï¼modal=tabæ¶å¿å¡«\r\n   * @param tabType æ ç­¾é¡µç±»åï¼`menu` æ`app`\r\n   * @param funcOrAppId èåæåºç¨id\r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params åæ°\r\n   * @param tabName æ°æ ç­¾é¡µåç§°\r\n   * @param enableRefresh å¯ç¨å¯å¨å·æ°\r\n   * @param destructuring æ¯å¦è§£æ\r\n   */\r\n  public open(mode: 'modal' | 'sidebar' | 'tab', modalId?: string, url?: string, configs?: any, tabId?: string, tabType?: 'menu' | 'app', funcOrAppId?: string, appEntrance?: string, params?: any, tabName?: string, enableRefresh?: any, destructuring?: any) {\r\n    const pageModalService = this.injector.get<FEPageModalService>(FEPageModalService, null);\r\n    if (!pageModalService) {\r\n      throw new Error('get FEPageModalService failed.');\r\n    }\r\n    // æ ¡éªåæ°æ¯å¦åæ³\r\n    if (!mode) {\r\n      throw new Error('[NavigationService]->open,modeåæ°ä¸è½ä¸ºç©ºï¼');\r\n    }\r\n    if (mode === 'modal' || mode === 'sidebar') {\r\n      if (!modalId && !url) {\r\n        throw new Error('å¼¹çªåä¾§è¾¹æ æ¨¡å¼æ¶å¼¹çªå®¹å¨idåè¡¨åè·¯å¾ä¸è½åæ¶ä¸ºç©ºï¼');\r\n      }\r\n      if (modalId && url) {\r\n        throw new Error('å¼¹çªåä¾§è¾¹æ æ¨¡å¼æ¶å¼¹çªå®¹å¨idåè¡¨åè·¯å¾ä¸è½åæ¶å­å¨ï¼');\r\n      }\r\n      const uiStateConfig = this.getObjectTypeConfig(params);\r\n      const modalConfig = this.buildConfigs(configs);\r\n      if (mode === 'sidebar') {\r\n        modalConfig.dialogType = mode;\r\n      }\r\n      let pageModalRef = null;\r\n      if (modalId) {\r\n        const farrisFormService = this.injector.get<FarrisFormService>(FarrisFormService, null);\r\n        if (!farrisFormService) {\r\n          return;\r\n        }\r\n        let componentType = farrisFormService.getControls(modalId);\r\n        const componentRef = this.createComponentRef(componentType, uiStateConfig);\r\n        pageModalRef = pageModalService.show(componentRef, modalConfig);\r\n      } else if (url) {\r\n        pageModalRef = pageModalService.showByUrl(url, modalConfig);\r\n      }\r\n      if (pageModalRef && !!pageModalRef.content) {\r\n        pageModalRef.content.isDialogRootComponent = true;\r\n        pageModalRef.content.dialogRef = pageModalRef;\r\n      }\r\n    } else if (mode === 'tab') {\r\n      if (!tabId || !tabType || !funcOrAppId) {\r\n        throw new Error('æ°æ ç­¾æ¨¡å¼æ¶æ ç­¾é¡µidãæ ç­¾ç±»åãèåæåºç¨idåä¸è½ä¸ºç©ºï¼');\r\n      }\r\n      if (tabType === 'app' && !appEntrance) {\r\n        throw new Error('ä»¥åºç¨æ¹å¼æå¼æ¶å¥å£åºç¨ä¸è½ä¸ºç©ºï¼');\r\n      }\r\n      if (tabType == 'app') {\r\n        this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);\r\n      } else if (tabType === 'menu') {\r\n        this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);\r\n      }\r\n    } else {\r\n      throw new Error('ä¸æ¯æçæ¨¡å¼ï¼');\r\n    }\r\n    // this.pageModalService.\r\n  }\r\n  /**\r\n   * in app navigate\r\n   * @param commands commands\r\n   */\r\n  // public navigate(commands: any[]);\r\n  /**\r\n   * in app navigate\r\n   * @param commands commands\r\n   * @param options options\r\n   * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}\r\n   */\r\n  public navigate(commands: any[], options?: any): Promise<boolean> {\r\n    const router = this.injector && this.injector.get<Router>(Router, null);\r\n    const activatedRoute = this.injector && this.injector.get<ActivatedRoute>(ActivatedRoute, null);\r\n    const queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});\r\n    if (options && options.hasOwnProperty('queryParams')) {\r\n      delete options.queryParams;\r\n    }\r\n    const extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams }, options || {});\r\n    if (router) {\r\n      return router.navigate(commands, extras);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  // #region ç§ææ¹æ³\r\n\r\n  /**\r\n   * å°è£è·¯ç±åæ°\r\n   * @param params åæ°\r\n   * @param options éç½®åæ°\r\n   */\r\n  private buildParamMap(params: any, options?: any): Map<string, string> {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (options && Object.keys(options).length > 0) {\r\n      if (typeof params !== 'object') {\r\n        params = JSON.parse(params);\r\n      }\r\n      params = lodash.merge(params, options);\r\n    }\r\n    if (typeof params === 'object') {\r\n      params = JSON.stringify(params);\r\n    }\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);\r\n    return paramMap;\r\n  }\r\n  private buildParam(params, options?: any): Map<string, string> {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (options && Object.keys(options).length > 0) {\r\n      if (typeof params !== 'object') {\r\n        params = JSON.parse(params);\r\n      }\r\n      params = lodash.merge(params, options);\r\n    }\r\n    if (typeof params !== 'object') {\r\n      params = JSON.parse(params);\r\n    }\r\n    Object.keys(params).forEach(key => {\r\n      paramMap.set(key, params[key]);\r\n    });\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);\r\n    return paramMap;\r\n  }\r\n  /**\r\n   * æ¥æ¾å¼¹çªç»ä»¶\r\n   */\r\n  private findDialog() {\r\n    let frameContext = this.get(this, 'commandContext.frameContext');\r\n    let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n\r\n    let parentFrameContext = this.get(frameContext, 'parent');\r\n    while (parentFrameContext != null && !isDialogComponent) {\r\n      frameContext = this.get(frameContext, 'parent');\r\n      parentFrameContext = this.get(parentFrameContext, 'parent');\r\n      isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n    }\r\n    const rootComponent = this.get(frameContext, 'frameComponent');\r\n    return { isDialogComponent, rootComponent };\r\n  }\r\n\r\n  /**\r\n   * loadsh get\r\n   * @param object å¯¹è±¡\r\n   * @param path è·¯å¾\r\n   * @param defaultVal é»è®¤å¼\r\n   */\r\n  private get(object: any, path: Array<string> | string, defaultVal: any = null) {\r\n    const PATH = Array.isArray(path)\r\n      ? path\r\n      : path.split('.').filter(i => i.length);\r\n    if (!PATH.length) {\r\n      return object === undefined ? defaultVal : object;\r\n    }\r\n\r\n    if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {\r\n      return defaultVal;\r\n    }\r\n\r\n    return this.get(object[PATH.shift()], PATH, defaultVal);\r\n  }\r\n  private convertToBoolean(value: any, defaultVal: boolean = false) {\r\n    if (typeof value === 'undefined' || value === null) {\r\n      value = defaultVal;\r\n    }\r\n    if (typeof value === 'string') {\r\n      value = value || String(defaultVal);\r\n      value = value === 'true' ? true : false;\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * ç¿»è¯èµæºé¡¹\r\n   * @param key èµæºé¡¹key\r\n   */\r\n  private translate(key: string) {\r\n    const translateService = this.injector && this.injector.get<Translate>(TranslateToken, null) || null;\r\n    if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {\r\n      key = key.replace('{{', '').replace('}}', '').trim();\r\n      return translateService.transform(key, null);\r\n    }\r\n    return key;\r\n  }\r\n  // #endregion\r\n\r\n  //#region å¼¹çªç¸å³æ¹æ³\r\n  private buildConfigs(config: any): { [prop: string]: any } {\r\n    let languageService = this.injector.get<LanguageService>(LanguageService, null);\r\n    if (!languageService) {\r\n      languageService = LanguageService.getInstance();\r\n    }\r\n\r\n    const defaultConfigs: any = {\r\n      title: languageService && languageService.defaultDialogTitle || '',\r\n      width: 800,\r\n      height: 500,\r\n      showButtons: false\r\n    };\r\n    const objectTypeConfig = this.getObjectTypeConfig(config);\r\n    const configs = Object.assign(defaultConfigs, objectTypeConfig);\r\n    const onClosingHandler = configs.beforeClose;\r\n    const refresh = configs['refresh'] || {};\r\n    const refreshCommandName = refresh && refresh.commandName || null;\r\n    const refreshFrameId = refresh && refresh.frameId || null;\r\n    // tslint:disable: no-string-literal\r\n    const cancelChanges = configs['cancelChanges'] || false;\r\n    configs.beforeClose = (ref) => {\r\n      if (!!onClosingHandler && typeof onClosingHandler === 'function') {\r\n        return onClosingHandler(ref).pipe(\r\n          switchMap(result => {\r\n            if (result) {\r\n              if (cancelChanges) {\r\n                return this.cancelChanges(ref).pipe(\r\n                  switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId))\r\n                );\r\n              }\r\n            }\r\n            return of(result);\r\n          })\r\n        );\r\n      } else {\r\n        if (cancelChanges) {\r\n          return this.cancelChanges(ref).pipe(\r\n            switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId))\r\n          );\r\n        } else {\r\n          return of(true);\r\n        }\r\n      }\r\n\r\n    };\r\n    return configs;\r\n  }\r\n  private getObjectTypeConfig(config: any) {\r\n    let objectTypeConfig: any\r\n    if (typeof config === 'undefined') {\r\n      config = {};\r\n    }\r\n    if (typeof config === 'string') {\r\n      if (config.length) {\r\n        try {\r\n          objectTypeConfig = JSON.parse(config);\r\n        } catch {\r\n          throw new Error(config + 'ä¸æ¯åæ³çjsonå­ç¬¦ä¸²');\r\n        }\r\n      } else {\r\n        objectTypeConfig = {};\r\n      }\r\n    } else if (typeof config === 'object') {\r\n      objectTypeConfig = Object.assign({}, config);\r\n    } else {\r\n      throw new Error('å¡«åå¯¹è±¡æ ¼å¼æjsonå­ç¬¦ä¸²');\r\n    }\r\n    return objectTypeConfig;\r\n  }\r\n  /**\r\n   * åæ¶æå¡å¨åæ´é\r\n   */\r\n  private cancelChanges(ref: any): Observable<boolean> {\r\n    if (ref && ref.modalRef && ref.modalRef.content) {\r\n      const component: FrameComponent = ref.modalRef.content as FrameComponent;\r\n      if (component && component.context) {\r\n        const repository = component.context.repository || null;\r\n        if (repository) {\r\n          return repository.cancelChanges().pipe(switchMap(() => of(true)));\r\n        }\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n  private refreshForm(refreshCommandName: string, refreshFrameId: string): Observable<any> {\r\n    if (refreshCommandName && refreshFrameId) {\r\n      const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);\r\n      if (frameContext) {\r\n        const viewModel = frameContext.viewModel;\r\n        return viewModel[refreshCommandName]().pipe(\r\n          map(() => true)\r\n        );\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n  private createComponentRef(componentType: any, uiStateObject: any) {\r\n    let componentRef: any;\r\n    const frameContext = this.getFrameContext();\r\n    const componentFactoryResolver = this.getComponentFactoryResolver();\r\n    if (frameContext && componentFactoryResolver) {\r\n      const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);\r\n      const modalContentInjector = ReflectiveInjector.resolveAndCreate([], frameContext.injector);\r\n      componentRef = contentCmptFactory.create(modalContentInjector);\r\n      if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\r\n        if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {\r\n          Object.keys(uiStateObject).forEach(item => {\r\n            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);\r\n          });\r\n        }\r\n        // éå isDialogåæ°\r\n        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n      }\r\n    }\r\n    return componentRef;\r\n  }\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åframeContext\r\n   */\r\n  private getFrameContext() {\r\n    if (this.frameContext) {\r\n      return this.frameContext\r\n    }\r\n    if (this['context'] && this['context']['frameContext']) {\r\n      return this['context']['frameContext'];\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åComponentFactoryResolver\r\n   */\r\n  private getComponentFactoryResolver() {\r\n    const frameContext = this.getFrameContext();\r\n    let componentFactoryResolver: any;\r\n    if (frameContext) {\r\n      componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);\r\n    }\r\n    return componentFactoryResolver;\r\n  }\r\n  //#endregion\r\n}\r\n","import { FrameContext } from '@farris/devkit';\r\nimport { AppParamUtil } from './app-param.util';\r\n\r\nconst IS_ADD = 'IS_ADD';\r\nconst LAST_MODIFIED_ID = 'LAST_MODIFIED_ID';\r\n\r\n/**\r\n * è¡¨åç¶æå·¥å·ç±»\r\n * @internal\r\n */\r\nclass EditStateUtil {\r\n\r\n    /**\r\n     * è·åå½åè¡id\r\n     */\r\n    public static getLastModifiedId(frameContext: FrameContext): string {\r\n        // const lastModifiedId = AppParamUtil.get(frameContext, LAST_MODIFIED_ID);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        let lastModifiedId = null;\r\n        if (virtualRootFrameContext) {\r\n            lastModifiedId = virtualRootFrameContext.getParam(LAST_MODIFIED_ID);\r\n            return lastModifiedId ? lastModifiedId : null;\r\n        }\r\n        return lastModifiedId;\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®æåä¿®æ¹çid\r\n     */\r\n    public static setLastModifiedId(frameContext: FrameContext, lastModifiedId: string): void {\r\n        // AppParamUtil.set(frameContext, LAST_MODIFIED_ID, lastModifiedId);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(LAST_MODIFIED_ID, lastModifiedId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è·åæ°å¢ç¶æ\r\n     */\r\n    public static getAddState(frameContext: FrameContext, ): boolean {\r\n        // return AppParamUtil.get(frameContext, IS_ADD);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            return virtualRootFrameContext.getParam(IS_ADD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®æ°å¢ç¶æ\r\n     */\r\n    public static setAddState(frameContext: FrameContext, lastModifiedId: string): void {\r\n        // AppParamUtil.set(frameContext, IS_ADD, true);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(IS_ADD, true);\r\n        }\r\n        this.setLastModifiedId(frameContext, lastModifiedId);\r\n    }\r\n\r\n    /**\r\n     * åæ¶æ°å¢ç¶æ\r\n     */\r\n    public static cancelAddState(frameContext: FrameContext) {\r\n        // AppParamUtil.set(frameContext, IS_ADD, false);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(IS_ADD, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®ç¼è¾ç¶æ\r\n     */\r\n    public static setEditState(frameContext: FrameContext, id: string) {\r\n        // AppParamUtil.set(frameContext, IS_ADD, false);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(IS_ADD, false);\r\n        }\r\n        this.setLastModifiedId(frameContext, id);\r\n    }\r\n}\r\n\r\nexport { EditStateUtil };\r\n","import { FormNotifyService } from './form-notify.service';\r\n\r\nclass FormNotifyStrategyService {\r\n  /**\r\n   * æ¶æ¯æç¤º\r\n   * @param formNotifyService formNotifyService\r\n   * @param content content\r\n   */\r\n  public static info(formNotifyService: FormNotifyService, content: string) {\r\n    const search = window.location.hash;\r\n    const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);\r\n    if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {\r\n      return;\r\n    }\r\n    formNotifyService.info(content, { hideTitle: true });\r\n  }\r\n  /**\r\n   * æåæç¤º\r\n   * @param formNotifyService formNotifyService\r\n   * @param content content\r\n   */\r\n  public static success(formNotifyService: FormNotifyService, content: string) {\r\n    const search = window.location.hash;\r\n    const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);\r\n    if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {\r\n      return;\r\n    }\r\n    formNotifyService.success(content, { hideTitle: true });\r\n  }\r\n  private static querystring(querystring: string): any {\r\n    const urlSearchParams = new URLSearchParams(querystring);\r\n    const result = {};\r\n    urlSearchParams.forEach((value: string, key: string) => {\r\n      result[key] = value;\r\n    });\r\n    return result;\r\n  }\r\n}\r\nexport { FormNotifyStrategyService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { AppContext, ViewModel, CommandContext, Entity, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\n\r\n/**\r\n * å½ä»¤æå¡\r\n * @scope FrameConmponent\r\n */\r\n@Injectable()\r\nclass CommandService {\r\n\r\n  /**\r\n   * åé¨cotnext\r\n   */\r\n  private innerContext: CommandContext;\r\n\r\n  /**\r\n   * contextåå¼æ¹æ³\r\n   */\r\n  public get context(): CommandContext {\r\n    return this.innerContext;\r\n  }\r\n\r\n  /**\r\n   * contextè®¾å¼æ¹æ³\r\n   */\r\n  public set context(context: CommandContext) {\r\n    this.innerContext = context;\r\n  }\r\n\r\n  constructor(\r\n    private viewModel: ViewModel,\r\n    private appContext: AppContext\r\n  ) { }\r\n\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   * @param frameId æ¡æ¶ID\r\n   */\r\n  public execute(commandName: string, frameId?: string): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return;\r\n    }\r\n    let viewModel = this.viewModel;\r\n    if (frameId) {\r\n      const targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);\r\n      viewModel = targetContext.viewModel;\r\n    }\r\n    return viewModel[commandName]();\r\n  }\r\n\r\n  /**\r\n   * ç­å¾BeSessionåå»º\r\n   * @returns ææ°åå»ºåºæ¥çBeSession\r\n   */\r\n  public waitForBeSession(): Observable<string> {\r\n    const frameContext = this.context.frameContext;\r\n    const befRepository = frameContext.repository as BefRepository<Entity>;\r\n    const sessionService = befRepository.restService.sessionService;\r\n    return sessionService.getBeSessionId().pipe(\r\n      filter((beSessionId: string) => {\r\n        return beSessionId !== null;\r\n      }),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æåæä¸ªä»»å¡çæ§è¡ç»æ\r\n   * @param taskName ä»»å¡åç§°\r\n   * @reutrn è¿åtaskNameå¯¹åºä»»å¡çæ§è¡ç»æ\r\n   */\r\n  public extractResult(taskName: string) {\r\n    const results = this.context.results;\r\n    return results[taskName];\r\n  }\r\n  /**\r\n   * æåå½åç»ä»¶çè¡åæ¢äºä»¶æåº\r\n   */\r\n  public suspendFrameContextRowSelectedEvent(frameId?: string) {\r\n    let frameContext: FrameContext = this.viewModel.frameContext;\r\n    if (frameId) {\r\n      frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    }\r\n    if (frameContext) {\r\n      frameContext.bindingData.rowSelectedEventSuspend = true;\r\n    }\r\n\r\n  }\r\n  public resumeFrameContextRowSelectedEvent(frameId?: string) {\r\n    let frameContext: FrameContext = this.viewModel.frameContext;\r\n    if (frameId) {\r\n      frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    }\r\n    if (frameContext) {\r\n      frameContext.bindingData.rowSelectedEventSuspend = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandService };\r\n","// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { Repository, Entity, FrameContext, PARENT_CLASS, ChangeType, ValidationResult, ValidationError, ValidateRule, ViewModel } from '@farris/devkit';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { zip } from 'rxjs/observable/zip';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { VerifyDetailService } from '@farris/ui-verify-detail';\r\n\r\n/**\r\n * è¡¨åéªè¯æå¡\r\n * @scope FrameComponent\r\n */\r\n\r\n@Injectable()\r\nclass ValidationService {\r\n\r\n  private validationResults = new Subject<any>();\r\n  private validationAllResult = new Subject<any>();\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private frameContext: FrameContext\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * éªè¯è¡¨ååçææè¡¨å\r\n   */\r\n  public validate() {\r\n    this.repository.getList().subscribe(\r\n      (result: Entity[]) => {\r\n        for (const entity of result) {\r\n          entity.validate().subscribe((result: ValidationResult) => {\r\n            if (!result.isValid) {\r\n              alert(result.message);\r\n              this.validationResults.next(result);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n    return this.validationResults;\r\n  }\r\n  /**\r\n   * æ ¡éªå½åè¡\r\n   */\r\n  public validateCurrentRow(): Observable<any> {\r\n    // ç»åè¡¨ååªæ ¡éªå½åæé®æå¨çè¡¨å\r\n    const primaryValue = this.frameContext.bindingData.list.currentId;\r\n    const entities: Entity[] = [this.repository.entityCollection.getEntityById(primaryValue)];\r\n    const namespace = this.frameContext.namespace;\r\n    let frameContexts = [];\r\n    if (namespace) {\r\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\r\n    } else {\r\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    }\r\n\r\n    const isModal = this.isInDialog();\r\n    const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();\r\n    let rootViewModel = this.frameContext.root.viewModel;\r\n    if (isModal && hasOwnVerifyDetailService) {\r\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\r\n    }\r\n\r\n    let toValidate = false;\r\n    const formErrors = [];\r\n    frameContexts.forEach((frameContext: FrameContext) => {\r\n      if (frameContext.form && frameContext.form.enableValidate) {\r\n        toValidate = true;\r\n      }\r\n    });\r\n    if (!toValidate || entities.length < 1) {\r\n      return of(true);\r\n    }\r\n    rootViewModel.verifyInformations = [];\r\n    let formValid = true;\r\n    let entityValid = true;\r\n    const formValidationRules = new Map<string, ValidateRule[]>();\r\n    frameContexts.forEach((formContext: FrameContext) => {\r\n      const bindingObject = formContext.bindingData.getObject();\r\n      // éç¥ææbindingData,\r\n      bindingObject && bindingObject.setShowValidationMsg(true);\r\n      if (formContext.form && formContext.form.enableValidate) {\r\n        // è·åå½åè¡¨åä¸çææéªè¯è§å\r\n        const currentFormValidationRules = formContext.form.getValidationRules();\r\n        currentFormValidationRules.forEach((rules, path) => {\r\n          if (formValidationRules.has(path)) {\r\n            rules.forEach(rule => formValidationRules.get(path).push(rule));\r\n          } else {\r\n            formValidationRules.set(path, [...rules]);\r\n          }\r\n        });\r\n        formContext.form.setShowValidationMsg(true);\r\n        // éä¸ªè°ç¨è¡¨åçéªè¯ï¼éªè¯åç«¯è¡¨åè§å\r\n        if (!formContext.form.isFormValid()) {\r\n          formErrors.push(formContext.form);\r\n          formValid = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    // éªè¯ææå®ä½\r\n    const observableList = entities.map((entity: Entity) => {\r\n      const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);\r\n      return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);\r\n    });\r\n    const result$ = zip(...observableList).pipe(\r\n      tap((resultList) => {\r\n        frameContexts.forEach((formContext: FrameContext) => {\r\n          if (!formContext.form.enableValidate) {\r\n            return;\r\n          }\r\n          const handleErrors = (errors: ValidationError[]) => {\r\n            errors.forEach((validationError: ValidationError) => {\r\n              if (validationError.children && validationError.children.length) {\r\n                handleErrors(validationError.children);\r\n              }\r\n              const errMsgObj = {};\r\n              let id = '';\r\n              const findId = (target: any) => {\r\n                if (target && target.data && target.data.id) {\r\n                  id = target.data.id;\r\n                  return;\r\n                } else if (target[PARENT_CLASS]) {\r\n                  findId(target[PARENT_CLASS]);\r\n                }\r\n              };\r\n              findId(validationError.target);\r\n\r\n              // å®ä½éªè¯åºéï¼éè¦å°éè¯¯å±ç¤ºå°çé¢ä¸\r\n              // å®ä½ä¸ä¸å®æ¯å½åè¡\r\n              let parentPathData = {\r\n                path: [],\r\n                isUdt: false,\r\n                isGrid: false\r\n              };\r\n              if (validationError.target) {\r\n                parentPathData = validationError.target.getPaths();\r\n              }\r\n              const bindingPath = '/' + parentPathData.path.join('/');\r\n              if (validationError.constraints) {\r\n                Object.keys(validationError.constraints).forEach(key => {\r\n                  errMsgObj[key] = {\r\n                    name: validationError.constraints[key]\r\n                  };\r\n                  // if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n                  //   rootViewModel['verifyInformations'].push({\r\n                  //     id: id,\r\n                  //     title: key,\r\n                  //     msg: validationError.constraints[key],\r\n                  //     type: 'warn'\r\n                  //   })\r\n                  // }\r\n                });\r\n              }\r\n              const paths = parentPathData.path.concat(validationError.property);\r\n\r\n              //if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n              // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n              formContext.bindingData.changes.next({\r\n                type: ChangeType.UpdateErrors,\r\n                id,\r\n                path: paths,\r\n                isUdt: parentPathData.isUdt,\r\n                isGrid: parentPathData.isGrid,\r\n                value: validationError.value,\r\n                errors: errMsgObj\r\n              });\r\n              //}\r\n            });\r\n          };\r\n          // å±å¼éªè¯ç»æ\r\n          const isValidList = resultList.map((result: ValidationResult) => result.isValid);\r\n          // ä¿å­ååè°ç¨å®ä½ä¸çéªè¯è§åï¼å¨é¨éè¿ä¹åæä¿å­\r\n          // å®ä½éªè¯éè¿\r\n          if (isValidList.filter(x => x).length === observableList.length) {\r\n            // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n            formContext.bindingData.changes.next({\r\n              type: ChangeType.UpdateErrors,\r\n              path: []\r\n            });\r\n            // éªè¯æååéèè¾å¥æ¶çéªè¯\r\n            if (formValid) {\r\n              const bindingObject = formContext.bindingData.getObject();\r\n              bindingObject && bindingObject.setShowValidationMsg(false);\r\n              const form = formContext.form;\r\n              if (form) {\r\n                form.setShowValidationMsg(false);\r\n              }\r\n            }\r\n          } else {\r\n            // å®ä½éªè¯æéè¯¯\r\n            entityValid = false;\r\n            resultList.forEach((result: ValidationResult) => {\r\n              if (result.isValid) {\r\n                // æ¸é¤éªè¯éè¿çéè¯¯\r\n                formContext.bindingData.changes.next({\r\n                  type: ChangeType.UpdateErrors,\r\n                  path: []\r\n                });\r\n              } else {\r\n                handleErrors(result.errors);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }),\r\n      switchMap((resultList) => {\r\n        let isValidated = true;\r\n        const errors = [];\r\n        resultList.forEach((result: ValidationResult) => {\r\n          if (!result.isValid) {\r\n            isValidated = false;\r\n          }\r\n          errors.push(...result.errors);\r\n        });\r\n        if (errors.length > 0) {\r\n          this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);\r\n        }\r\n        // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);\r\n        let verifyInformations = rootViewModel.verifyInformations;\r\n        if (isModal && hasOwnVerifyDetailService) {\r\n          verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);\r\n        }\r\n        rootViewModel.verifycationChanged.next(verifyInformations);\r\n        if (isValidated && formValid) {\r\n          return of(true);\r\n        } else {\r\n          return empty();\r\n        }\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * è°ç¨è¡¨ååå®ä½ä¸çéªè¯è§å, éè¿åè°ç¨åè°cb\r\n   */\r\n  validateAll(): Observable<any> {\r\n    // ç»åè¡¨ååªæ ¡éªå½åæé®æå¨çè¡¨å\r\n    const entities: Entity[] = this.repository.entityCollection.getAllEntities();\r\n    const namespace = this.frameContext.namespace;\r\n    let frameContexts = [];\r\n    if (namespace !== null) {\r\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\r\n    } else {\r\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    }\r\n\r\n    let toValidate = false;\r\n    const formErrors = [];\r\n    frameContexts.forEach((frameContext: FrameContext) => {\r\n      if (frameContext.form && frameContext.form.enableValidate) {\r\n        toValidate = true;\r\n      }\r\n    });\r\n    if (!toValidate || entities.length < 1) {\r\n      return of(true);\r\n    }\r\n    const isModal = this.isInDialog();\r\n    const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();\r\n    let rootViewModel = this.frameContext.root.viewModel;\r\n    if (isModal && hasOwnVerifyDetailService) {\r\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\r\n    }\r\n\r\n    let formValid = true;\r\n    let entityValid = true;\r\n    const formValidationRules = new Map<string, ValidateRule[]>();\r\n    frameContexts.forEach((formContext: FrameContext) => {\r\n      const bindingObject = formContext.bindingData.getObject();\r\n      // éç¥ææbindingData,\r\n      bindingObject && bindingObject.setShowValidationMsg(true);\r\n      if (formContext.form && formContext.form.enableValidate) {\r\n        // è·åå½åè¡¨åä¸çææéªè¯è§å\r\n        const currentFormValidationRules = formContext.form.getValidationRules();\r\n        currentFormValidationRules.forEach((rules, path) => {\r\n          if (formValidationRules.has(path)) {\r\n            rules.forEach(rule => formValidationRules.get(path).push(rule));\r\n          } else {\r\n            formValidationRules.set(path, [...rules]);\r\n          }\r\n        });\r\n        formContext.form.setShowValidationMsg(true);\r\n        // éä¸ªè°ç¨è¡¨åçéªè¯ï¼éªè¯åç«¯è¡¨åè§å\r\n        if (!formContext.form.isFormValid()) {\r\n          formErrors.push(formContext.form);\r\n          formValid = false;\r\n        }\r\n      }\r\n    });\r\n    // è§¦åææå®ä½çvalidateäºä»¶\r\n    const isMultiEntityValiate = entities.length > 0;\r\n\r\n    // éªè¯ææå®ä½\r\n    const observableList = entities.map((entity: Entity, index: number) =>\r\n      entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));\r\n    const result$ = zip(...observableList).pipe(\r\n      tap((resultList) => {\r\n        frameContexts.forEach((formContext: FrameContext) => {\r\n          if (!formContext.form.enableValidate) {\r\n            return;\r\n          }\r\n          const handleErrors = (errors: ValidationError[]) => {\r\n            errors.forEach((validationError: ValidationError) => {\r\n              if (validationError.children && validationError.children.length) {\r\n                handleErrors(validationError.children);\r\n              }\r\n              const errMsgObj = {};\r\n              let id = '';\r\n              const findId = (target: any) => {\r\n                if (target && target.data && target.data.id) {\r\n                  id = target.data.id;\r\n                  return;\r\n                } else if (target[PARENT_CLASS]) {\r\n                  findId(target[PARENT_CLASS]);\r\n                }\r\n              };\r\n              findId(validationError.target);\r\n\r\n              // å®ä½éªè¯åºéï¼éè¦å°éè¯¯å±ç¤ºå°çé¢ä¸\r\n              // å®ä½ä¸ä¸å®æ¯å½åè¡\r\n              let parentPathData = {\r\n                path: [],\r\n                isUdt: false,\r\n                isGrid: false\r\n              };\r\n              if (validationError.target) {\r\n                parentPathData = validationError.target.getPaths();\r\n              }\r\n              const bindingPath = '/' + parentPathData.path.join('/');\r\n              if (validationError.constraints) {\r\n                Object.keys(validationError.constraints).forEach(key => {\r\n                  errMsgObj[key] = {\r\n                    name: validationError.constraints[key]\r\n                  };\r\n                  // if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n                  //   rootViewModel['verifyInformations'].push({\r\n                  //     id: id,\r\n                  //     title: key,\r\n                  //     msg: validationError.constraints[key],\r\n                  //     type: 'warn'\r\n                  //   })\r\n                  // }\r\n                });\r\n              }\r\n              const paths = parentPathData.path.concat(validationError.property);\r\n\r\n              //if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n              // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n              formContext.bindingData.changes.next({\r\n                type: ChangeType.UpdateErrors,\r\n                id,\r\n                path: paths,\r\n                isUdt: parentPathData.isUdt,\r\n                isGrid: parentPathData.isGrid,\r\n                value: validationError.value,\r\n                errors: errMsgObj\r\n              });\r\n              //}\r\n            });\r\n          };\r\n          // å±å¼éªè¯ç»æ\r\n          const isValidList = resultList.map((result: ValidationResult) => result.isValid);\r\n          // ä¿å­ååè°ç¨å®ä½ä¸çéªè¯è§åï¼å¨é¨éè¿ä¹åæä¿å­\r\n          // å®ä½éªè¯éè¿\r\n          if (isValidList.filter(x => x).length === observableList.length) {\r\n            // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n            formContext.bindingData.changes.next({\r\n              type: ChangeType.UpdateErrors,\r\n              path: []\r\n            });\r\n            // éªè¯æååéèè¾å¥æ¶çéªè¯\r\n            if (formValid) {\r\n              const bindingObject = formContext.bindingData.getObject();\r\n              bindingObject && bindingObject.setShowValidationMsg(false);\r\n              const form = formContext.form;\r\n              if (form) {\r\n                form.setShowValidationMsg(false);\r\n              }\r\n            }\r\n          } else {\r\n            // å®ä½éªè¯æéè¯¯\r\n            entityValid = false;\r\n            resultList.forEach((result: ValidationResult) => {\r\n              if (result.isValid) {\r\n                // æ¸é¤éªè¯éè¿çéè¯¯\r\n                formContext.bindingData.changes.next({\r\n                  type: ChangeType.UpdateErrors,\r\n                  path: []\r\n                });\r\n              } else {\r\n                handleErrors(result.errors);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }),\r\n      switchMap((resultList) => {\r\n        let isValidated = true;\r\n        const errors = [];\r\n        resultList.forEach((result: ValidationResult) => {\r\n          if (!result.isValid) {\r\n            isValidated = false;\r\n          }\r\n          errors.push(...result.errors);\r\n        });\r\n        if (errors.length > 0) {\r\n          this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);\r\n        }\r\n        let verifyInformations = rootViewModel.verifyInformations;\r\n        if (isModal && hasOwnVerifyDetailService) {\r\n          verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);\r\n        }\r\n        // å ä¸ºæ ¡éªç´¯å çç¼æï¼å¯¼è´ä¹åçæ ¡éªä¿¡æ¯ä¸ç´å­å¨ï¼åªè½éè¿æ ¡éªç»ææ¥ç¡®å®æ¯å¦è¿æéè¯¯ä¿¡æ¯\r\n        if (isValidated && formValid) {\r\n          verifyInformations = rootViewModel.verifyInformations = [];\r\n        }\r\n        rootViewModel.verifycationChanged.next(verifyInformations);\r\n        if (isValidated && formValid) {\r\n          return of(true);\r\n        } else {\r\n          return empty();\r\n        }\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  collectValidationErrors(rootViewModel: ViewModel, errors: ValidationError[], namespace: string, filter: boolean = true) {\r\n    if (filter) {\r\n      rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);\r\n    }\r\n    errors.forEach((validationError: ValidationError) => {\r\n      if (validationError.children && validationError.children.length) {\r\n        this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);\r\n      }\r\n      let id = '';\r\n      const findId = (target: any) => {\r\n        if (target && target.data && target.data.id) {\r\n          id = target.data.id;\r\n          return;\r\n        } else if (target[PARENT_CLASS]) {\r\n          findId(target[PARENT_CLASS]);\r\n        }\r\n      };\r\n      findId(validationError.target);\r\n      if (validationError.constraints) {\r\n        const validationResultTypes = Object.keys(validationError.constraints);\r\n        if (validationResultTypes.length) {\r\n          const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;\r\n          let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);\r\n          index = index === -1 ? 0 : index + offset;\r\n          rootViewModel.verifyInformations.splice(index, 0, {\r\n            id: id,\r\n            namespace,\r\n            targetField: validationError.field,\r\n            index: validationError.index,\r\n            title: validationError.propertyName,\r\n            msg: validationError.constraints[validationResultTypes[0]],\r\n            frameContext: validationError.frameContext,\r\n            fullPath: validationError.fullPath,\r\n            type: validationResultTypes[0] === 'required' ? 'empty' : 'error'\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * éç½®æ ¡éªä¿¡æ¯ï¼ä»å½åè¡¨åï¼\r\n   */\r\n  public resetValidation(): Observable<any> {\r\n    const isDialog = this.isInDialog();\r\n    let rootViewModel = this.frameContext.root.viewModel;\r\n    if (isDialog) {\r\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\r\n    }\r\n    let verifyInformations = rootViewModel.verifyInformations;\r\n    if (verifyInformations.length) {\r\n      const namespace = this.frameContext.namespace;\r\n      if (namespace !== null) {\r\n        verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);\r\n      }\r\n      rootViewModel.verifyInformations = verifyInformations;\r\n      //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);\r\n    }\r\n    rootViewModel.verifycationChanged.next(verifyInformations);\r\n    return of(null);\r\n  }\r\n  /**\r\n   * æ¯å¦å¨å¼¹çªåé¨\r\n   */\r\n  private isInDialog() {\r\n    return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;\r\n  }\r\n  /**\r\n   * æ¥æç¬èªçæ ¡éªæç¤ºæå¡\r\n   */\r\n  private hasOwnVerifyDetailService() {\r\n    return this.frameContext.injector.get<VerifyDetailService>(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get<VerifyDetailService>(VerifyDetailService, null);;\r\n  }\r\n}\r\n\r\nexport { ValidationService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Entity, BindingData, FrameContext, ViewModel } from '@farris/devkit';\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\nimport { Observable, of, empty, EMPTY, concat, zip, from, Subject } from 'rxjs';\r\nimport { tap, switchMap, concatMap, concatAll, takeLast, last } from 'rxjs/operators';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { EditStateUtil } from './utils/index';\r\nimport { FormNotifyStrategyService } from '../form-notify-strategy.service';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { DataType, WEB_FORM_ROUTE_PARAMS_KEY } from '../types';\r\nimport { CommandService } from '../command-service';\r\nimport { ValidationService } from '../validation.service';\r\n// tslint:disable: no-string-literal\r\n// tslint:disable: max-line-length\r\n/**\r\n * å¡çä»åºæå¡\r\n */\r\n@Injectable()\r\nclass CardDataService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindingData: BindingData;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private formMessageService: FormMessageService,\r\n    private frameContext: FrameContext,\r\n    private loadingService: FormLoadingService,\r\n    private formNotifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService,\r\n    private formErrorService: FormErrorService,\r\n    private runtimeFrameworkService: RuntimeFrameworkService,\r\n    private commandService: CommandService\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    this.repository = this.frameContext.repository as BefRepository<Entity>;\r\n    this.bindingData = this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * å è½½æ°æ®\r\n   * @param id ä¸»å®ä½id\r\n   * @param enableChildrenPagination å¯ç¨å­è¡¨åé¡µ\r\n   */\r\n  public load(id: string): Observable<Entity> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    this.frameContext.appContext.params.set(\"retrieveing\",true);\r\n    this.frameContext.appContext.params.delete('queryChild');\r\n    const get$ = this.repository.getById(id);\r\n    return get$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å è½½å\r\n   * @param id id\r\n   * @param transitionActionParamName ç¶æè¿ç§»å¨ä½åæ°ç¼å·\r\n   * @returns \r\n   */\r\n  public onLoading(transitionActionParamName: string) {\r\n    const tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;\r\n    if (!tabId) {\r\n      return;\r\n    }\r\n    let skip = true;\r\n    const listening = this.frameContext.appContext.params.get(tabId) || false;\r\n    transitionActionParamName = transitionActionParamName || 'transitionAction';\r\n    if (!listening) {\r\n      this.frameContext.appContext.params.set(tabId, true);\r\n      this.runtimeFrameworkService.getEntityParam(tabId, (options: any) => {\r\n        if (skip) {\r\n          skip = false;\r\n          return;\r\n        }\r\n        const params = this.parseParams(options);\r\n        if (params && params.sync) {\r\n          const action = params.action;\r\n          const id = params.id;\r\n          const ngCommand = this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.metadatas && this.frameContext.viewModel.metadatas[action];\r\n          const actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;\r\n          const formPrimaryValue = this.frameContext.bindingData.list.currentId;\r\n          const formState = this.frameContext.stateMachine.context.state;\r\n          let state = null;\r\n          let stateName: string;\r\n          if (!actionName) {\r\n            // å¯è½æ¯ç¨æ·èªå·±éç½®çå½ä»¤ï¼æ²¡æç¶ææºåæ¢ï¼æ­¤æ¶ä¸åå¤æ­ç¶ææº\r\n            state = formState;\r\n          }\r\n          else {\r\n            const ngAction = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.actions && this.frameContext.stateMachine.metadatas.actions[actionName];\r\n            state = ngAction && ngAction.transitTo || formState;\r\n            stateName = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.states[state] && this.frameContext.stateMachine.metadatas.states[state].name || this.languageService.defaultStateName;\r\n            if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {\r\n              const key = stateName.replace('{{', '').replace('}}', '');\r\n              stateName = this.frameContext.translate.transform(key, null);\r\n            }\r\n          }\r\n          const primaryValueChanged = formPrimaryValue !== id;\r\n          const stateChanged = formState !== state;\r\n\r\n          if (primaryValueChanged && stateChanged) {\r\n            // ååçåå\r\n            const message = this.languageService.dataAndStateChanged.replace(/\\$1/g, stateName);\r\n            this.showLoadingConfirm(message).pipe(switchMap(() => {\r\n              return this.resetForm(action);\r\n            })).subscribe();\r\n          } else if (primaryValueChanged) {\r\n            // ä¸»é®åçåå\r\n            this.showLoadingConfirm(this.languageService.dataChanged).pipe(switchMap(() => {\r\n              return this.resetForm(action);\r\n            })).subscribe();\r\n          } else if (stateChanged) {\r\n            // ç¶æåçåå\r\n            const message = this.languageService.stateChanged.replace(/\\$1/g, stateName);\r\n            this.showLoadingConfirm(message).pipe(switchMap(() => {\r\n              return this.resetForm(action);\r\n            })).subscribe();\r\n          } else {\r\n            // æ°æ®åç¶æåæªåçåå\r\n            return of(true);\r\n          }\r\n        }\r\n      }, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ°å¢\r\n   */\r\n  public add(): Observable<any> {\r\n    const lastModifiedId = this.bindingData.list.currentId;\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const create$ = this.repository.create();\r\n    return create$.pipe(\r\n      tap(\r\n        () => {\r\n          EditStateUtil.setEditState(this.frameContext, lastModifiedId);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.addFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * çº§èæ°å¢\r\n   */\r\n  public cascadeAdd(): Observable<any> {\r\n    const subject = new Subject<any>();\r\n    // æ¾å°ææviewmodel,æ¿å°äºææçframeContextï¼å¯è½æç»åè¡¨åç\r\n    const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    // æ¾å°å½åframeContextçå¬å±namespace\r\n    const currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;\r\n    // æ¿å°å½åå½ä»¤æå¨frameçè¡¨åçææframeContext\r\n    const currentFormFrameContexts = frameContexts.filter((context: FrameContext) => context.namespace === currentNamespace) || [];\r\n    let bindingPaths = [];\r\n    if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {\r\n      // æ¾å°ææä¸çº§frameContext\r\n      const childFrameContexts = currentFormFrameContexts.filter((context: FrameContext) => context.viewModel.bindingPath && context.viewModel.bindingPath !== '/');\r\n      if (childFrameContexts && childFrameContexts.length > 0) {\r\n        const childBindingPaths = childFrameContexts.map((context: FrameContext) => context.viewModel.bindingPath);\r\n        if (childBindingPaths && childBindingPaths.length > 0) {\r\n          bindingPaths = childBindingPaths.map(path => path.split('/').filter(p => p)).sort((a, b) => a.length - b.length);\r\n        }\r\n      }\r\n    }\r\n    this.loadingService.show();\r\n    this.repository.create().pipe(\r\n      switchMap((entity: Entity) => {\r\n        const rid = entity.primaryValue;\r\n        if (bindingPaths && bindingPaths.length > 0) {\r\n          return from(bindingPaths).pipe(\r\n            concatMap((bindingPath: Array<any>) => {\r\n              const fpath = this.getPath(this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);\r\n              return this.repository.appendByPath(fpath);\r\n            })\r\n          );\r\n        } else {\r\n          return of(entity);\r\n        }\r\n      })\r\n    ).pipe(last()).subscribe(\r\n      () => {\r\n        this.loadingService.hide();\r\n        subject.next();\r\n      },\r\n      (error: any) => {\r\n        this.loadingService.hide();\r\n        this.formErrorService.exception(this.languageService.addFailed, error);\r\n      });\r\n    return subject;\r\n  }\r\n\r\n  /**\r\n   * ç¼è¾ï¼æ´æ°æ°æ®å¹¶æ è®°ç¼è¾ç¶æï¼\r\n   */\r\n  public edit(id?: string): Observable<Entity> {\r\n    const update$ = this.update();\r\n    return update$.pipe(\r\n      tap(() => {\r\n        const currentId = this.bindingData.list.currentId\r\n        EditStateUtil.setEditState(this.frameContext, currentId);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ´æ°\r\n   * @param id ä¸»å®ä½id\r\n   * @param enableChildrenPagination å¯ç¨å­è¡¨åé¡µ\r\n   */\r\n  public update(id?: string): Observable<Entity> {\r\n    // è·åid\r\n    id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return empty();\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const update$ = this.repository.updateById(id);\r\n    this.frameContext.appContext.params.set(\"retrieveing\",true);\r\n    return update$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.updateFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  public updateWithoutEmpty() {\r\n    // è·åid\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return of(null);\r\n    } else {\r\n      return this.update();\r\n    }\r\n  }\r\n  public updateWithNotify() {\r\n    // è·åid\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });\r\n      return EMPTY;\r\n    } else {\r\n      return this.update();\r\n    }\r\n  }\r\n  /**\r\n   * å è½½å¡çæ°æ®ï¼åé¡µå è½½å­è¡¨æ°æ®ï¼\r\n   * @deprecated æ¹æ³å·²åºå¼ï¼è¯·å¿ä½¿ç¨\r\n   */\r\n  public loadPaged(filter?: string, sort?: string) {\r\n    // è·åid\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    // this.frameContext.root.params.set('updateWithPaging', true);\r\n    const update$ = of(null);//this.repository.updateEntityById(id, true);\r\n    return update$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.updateFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * ä¿å­\r\n   */\r\n  public save(successMsg?: string): Observable<boolean> {\r\n    // è·åå½åè¡\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return of(false);\r\n    }\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const update$ = this.repository.updateChangesById(id);\r\n    const save$ = this.repository.applyChangesById(id);\r\n    const result$ = update$.pipe(\r\n\r\n      // update$ => save$\r\n      switchMap((updateResult: boolean) => {\r\n        if (updateResult === false) {\r\n          return of(false);\r\n        } else {\r\n          return save$;\r\n        }\r\n      }),\r\n\r\n      // éèloading\r\n      tap(() => {\r\n\r\n        // åæ¶æ°å¢ç¶æ\r\n        EditStateUtil.setEditState(this.frameContext, id);\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n        // this.formNotifyService.info(this.languageService.saveSuccess);\r\n        if (successMsg && successMsg.trim()) {\r\n          let showMessage: boolean = true;\r\n          if (successMsg.startsWith('{') && successMsg.endsWith('}')) {\r\n            try {\r\n              const options = JSON.parse(successMsg);\r\n              if (options && options.showMessage === false) {\r\n                showMessage = false;\r\n              }\r\n            } catch { }\r\n          }\r\n          if (showMessage !== false) {\r\n            this.formNotifyService.success(successMsg, { hideTitle: true });\r\n          }\r\n        } else {\r\n          FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);\r\n        }\r\n        // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.saveFailed, error);\r\n        }\r\n      )\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n\r\n  // #region åæ¶ç¸å³æ¹æ³\r\n\r\n  /**\r\n   * åæ¶ï¼é»è®¤åæ¶ï¼\r\n   */\r\n  public cancel(): Observable<any> {\r\n    return this.cancelWithCheck();\r\n  }\r\n\r\n  /**\r\n   * è¿ååæ´é\r\n   * @description ä¸å¸¦åæ´æ£æµæç¤º\r\n   */\r\n  public revert(options?: any): Observable<any> {\r\n    return this.cancelWithoutCheck(options);\r\n  }\r\n\r\n  /**\r\n   * åæ¶ï¼åæ¶åæ£æ¥æªä¿å­çåæ´ï¼\r\n   * @summary\r\n   * 1ãç¨æ·è¯¯æä½ï¼åªéè¦åä¸ªæç¤ºå°±å¯ä»¥äºï¼\r\n   * 2ãç¨æ·ææåæ¶ï¼ç¹å»åæ¶å°±æ¯è¦æ¾å¼ææåæ´ï¼è¿æ¶åè¯¢é®äººå®¶æ¯å¦è¦ä¿å­æèæç¤ºå­å¨åæ´æç¹å¤æ­¤ä¸ä¸¾ï¼ç¡®è®¤ä¸æå³å¯ã\r\n   * 3ãç¨æ·è¯¯æä½ï¼æ²¡æåæ´çæåµä¸ç´æ¥ç»åæ¶äºï¼ç¨æ·ä¼äº§çææï¼å ä¸ºç¨æ·ææ¶åå¹¶ä¸ç¡®å®æ¯å¦æåæ´ï¼åºè¯¥ä¹ç¡®è®¤ä¸æã\r\n   * @todo\r\n   * 1ãç±äºäº§åé¨å¾å¤ä»£ç è¯¯ç¨äºè¯¥æ¹æ³ï¼ä¾èµäºæ²¡æåæ´çæ¶åç´æ¥åæ¶ï¼ç°å¨å¼¹çªç¡®è®¤æ¡æ¥ï¼ä¸å¤ªåéï¼\r\n   * 2ãäº§åé¨éè¦ç¨cancelWithoutCheckæ¹æ³ä»£æ¿ï¼ç®ååç»å¼å®¹çï¼å¾å é¤ã\r\n   */\r\n  public cancelWithCheck() {\r\n\r\n    // @todel\r\n    const hasUnSavedChanges = BefRepositoryUtil.isExistUnsaveData(this.repository);\r\n    if (!hasUnSavedChanges) {\r\n      return this.cancelChanges();\r\n    }\r\n\r\n    // ç¡®è®¤æ¯å¦åæ¶\r\n    const confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);\r\n    const result$ = confirm$.pipe(\r\n      switchMap((ifCancel: boolean) => {\r\n        if (ifCancel === false) {\r\n          return EMPTY;\r\n        }\r\n        return this.cancelChanges();\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * åæ¶ï¼ç´æ¥åæ¶ï¼ä¸æ§è¡æ£æ¥ï¼\r\n   */\r\n  public cancelWithoutCheck(options?: any) {\r\n    return this.cancelChanges(options);\r\n  }\r\n\r\n  /**\r\n   * åæ¶\r\n   */\r\n  private cancelChanges(options?: any): Observable<any> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const cancel$ = this.repository.cancelChanges(options);\r\n    return cancel$.pipe(\r\n      tap(\r\n        () => {\r\n          EditStateUtil.setEditState(this.frameContext, '');\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.cancelFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * éæ°å è½½ï¼ä»ä¾å¡çåæ¶åéæ°å è½½æ°æ®ï¼å¶ä»åºæ¯è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public reload() {\r\n    const isAdd = EditStateUtil.getAddState(this.frameContext);\r\n    let id;\r\n    if (isAdd === true) {\r\n      id = EditStateUtil.getLastModifiedId(this.frameContext);\r\n    } else {\r\n      id = this.bindingData.list.currentId as string;\r\n    }\r\n\r\n    if (!id) {\r\n      this.repository.entityCollection.loadEntities([]);\r\n      return;\r\n    }\r\n\r\n    return this.load(id);\r\n  }\r\n  private getPath(viewModel: ViewModel, bindingPath: string, rid: string): string {\r\n    let path = '/' + rid;\r\n\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n  private resetForm(action: string) {\r\n    const validationService = this.frameContext.injector.get<ValidationService>(ValidationService, null);\r\n    return this.frameContext.repository.cancelChanges().pipe(\r\n      switchMap(() => this.commandService.execute(action).pipe(switchMap(() => {\r\n        return validationService && validationService.resetValidation() || of(null);\r\n      }))));\r\n  }\r\n  private parseParams(options: any): { action: string, id: string, sync: boolean } | null {\r\n    if (options && Object.prototype.toString.call(options) === DataType.map) {\r\n      let params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);\r\n      if (params && typeof params === 'string') {\r\n        params = decodeURIComponent(params);\r\n        if (params.startsWith('{') && params.endsWith('}')) {\r\n          params = JSON.parse(params);\r\n        }\r\n        return {\r\n          action: params.action,\r\n          id: params.idToView || params.idToEdit || params.id,\r\n          sync: params.sync || false\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private showLoadingConfirm(message: string) {\r\n    return this.formMessageService.confirm(message).pipe(\r\n      switchMap((result: boolean) => {\r\n        if (result === true) {\r\n          return of(true);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\nexport { CardDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\nimport { TAB_EVENT } from './types';\r\nimport { NavigationService } from './navigation.service';\r\nimport { FrameContext, Repository, UID } from '@farris/devkit';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { CardDataService } from './data-services/card-data.service';\r\n/**\r\n * å¯¼èªä¸­é´ä»¶æå¡\r\n * @scope FrameComponent\r\n */\r\n// tslint:disable: no-string-literal\r\n@Injectable()\r\nexport class NavigationMiddlewareService {\r\n  private repository: Repository<any>;\r\n\r\n  private appContext: any;\r\n  constructor(\r\n    private navigationService: NavigationService,\r\n    private frameContext: FrameContext,\r\n    private msgService: FormMessageService,\r\n    @Optional() private languageService: LanguageService,\r\n    private cardDataService: CardDataService\r\n  ) {\r\n    this.repository = frameContext.repository;\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    if (this.frameContext) {\r\n      this.appContext = this.frameContext.getFormAppContext() || null;\r\n    }\r\n  }\r\n  /**\r\n   * å³é­åå¤ç\r\n   */\r\n  public onClosing() {\r\n    if (this.isInDialog()) {\r\n      return;\r\n    }\r\n    this.navigationService.addEventListener(TAB_EVENT.onTabClosing, (options) => {\r\n      if (this.isChanged && !this.appContext.opened) {\r\n        // å¦æéè¦ç¨æ·ç¡®è®¤å°±åæ¢å°å½åtab\r\n        if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {\r\n          options.beforeCloseHandle({ selectedChange: true });\r\n        }\r\n        const conform = this.msgService.question(this.languageService['exitWithoutSave']);\r\n        /*è®°å½å¼¹çªå·²æå¼*/\r\n        this.appContext.opened = true;\r\n        return conform.pipe(\r\n          switchMap((result: boolean) => {\r\n            this.appContext.opened = false;\r\n            if (result) {\r\n              /*è®°å½ç¨æ·å³é­å¼¹çª*/\r\n              if (!!this.cardDataService) {\r\n                const revert$ = this.cardDataService.revert(options);\r\n                return revert$.pipe(\r\n                  switchMap(() => of(result))\r\n                );\r\n              }\r\n            }\r\n            return of(result);\r\n          })\r\n        );\r\n      } else if (this.isChanged && this.appContext.opened) {\r\n        return of(false);\r\n      } else {\r\n        return of(true);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æ¯å¦å¨æ¯å¼¹çªçªå£å\r\n   */\r\n  private isInDialog() {\r\n    let frameContext = this.frameContext;\r\n    let isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;\r\n    while (frameContext.parent !== null && !isDialogRootComponent) {\r\n      frameContext = frameContext.parent;\r\n      isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];\r\n    }\r\n    return isDialogRootComponent;\r\n  }\r\n  /**\r\n   * è·åtabid,å¦ætargetIdå­å¨åç´æ¥ä½¿ç¨targetId\r\n   * @description å°ç¨æ·è¦æ¥ççæ°æ®idè½¬æ¢ä¸ºè¿è¡æ¡æ¶éè¦çtabId\r\n   * @param params routeråæ°\r\n   * @param targetId è¦ç¼è¾/æ¥ççæ°æ®id\r\n   */\r\n  public getTabId(params: string, targetId: string): any {\r\n    if (!!targetId) {\r\n      return targetId;\r\n    }\r\n    let paramsObj: any = null;\r\n    if (!!params && params.startsWith('{') && params.endsWith('}')) {\r\n      paramsObj = JSON.parse(params);\r\n    }\r\n    let paramId = null;\r\n    if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {\r\n      paramId = paramsObj.id;\r\n    } else {\r\n      paramId = UID.create();\r\n    }\r\n    return paramId;\r\n  }\r\n  /**\r\n   * æ¯å¦ææªä¿å­çåæ´\r\n   */\r\n  private get isChanged(): boolean {\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n  }\r\n}\r\n","/*\r\n * @Author: aalizzwell\r\n * @Date: 2019-08-05 11:48:27\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-08-06 15:01:53\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FrameContext, Repository, ViewModel } from '@farris/devkit';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { BefRepositoryUtil, BefRepository } from '@farris/bef';\r\nimport { CommandService } from './command-service';\r\n\r\n// tslint:disable: no-string-literal\r\n/**\r\n * Gridä¸­é´ä»¶æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nexport class GridMiddlewareService {\r\n  private repository: Repository<any>;\r\n\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private msgService: FormMessageService,\r\n    @Optional() private languageService: LanguageService,\r\n    private viewModel: ViewModel,\r\n    private commandService: CommandService\r\n  ) {\r\n    this.repository = this.frameContext.repository;\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n  /**\r\n   * é¡µç åæ¢å\r\n   */\r\n  public onPageChanging() {\r\n    if (this.isChanged) {\r\n      return this.msgService.question(this.languageService['gridDataNotSave']).pipe(\r\n        switchMap((result: boolean) => {\r\n          if (!result) {\r\n            return EMPTY;\r\n          } else {\r\n            return of(true);\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      return of(true);\r\n    }\r\n  }\r\n  /**\r\n   * è¡¨æ ¼è¿æ»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   * @param frameId frameId\r\n   * @returns \r\n   */\r\n  public filter(commandName: string, frameId: string) {\r\n    const self: any = this;\r\n    let filters = self.context && self.context.eventParam || [];\r\n    if (typeof (filters) === 'string') {\r\n      filters = JSON.parse(filters);\r\n    }\r\n    // æ¥è¯¢æ¶éç½®é¡µç ä¸ºç¬¬ä¸é¡µ\r\n    this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;\r\n    this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);\r\n    return this.commandService.execute(commandName, frameId);\r\n  }\r\n  /**\r\n   * æ¯å¦ææªä¿å­çåæ´\r\n   */\r\n  private get isChanged(): boolean {\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { QuerystringService } from './querystring';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { of, Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n// tslint:disable: no-string-literal\r\n/**\r\n * åæ°æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class ParamService {\r\n    constructor(\r\n        private querystringService: QuerystringService,\r\n        private runtimeFrameworkService: RuntimeFrameworkService\r\n    ) { }\r\n    /**\r\n     * ééè·åææåæ°\r\n     */\r\n    public get params(): Observable<{ [propName: string]: any }> {\r\n        // åä»hashä¸­è·ååæ°\r\n        const hash = window.location.hash;\r\n        const params = this.querystringService.parse(hash);\r\n        /*\r\n        const appMode = params.appMode;\r\n        // appModeæ²¡æå®ä¹ï¼è®¤ä¸ºæ¯èè¡¨å,appMode = mdi æ spa\r\n        if (typeof appMode === 'undefined' || appMode === null) {\r\n            return of(params);\r\n        }\r\n        // appModeå­å¨ï¼ä½ä¸ºç©ºï¼ä¹è®¤ä¸ºæ¯èè¡¨å\r\n        if (appMode.length < 1) {\r\n            return of(params);\r\n        }\r\n        // æ°è¡¨åï¼ä½¿ç¨iframeæ¨¡å¼\r\n        if (appMode.toLowerCase() === 'mdi') {\r\n            return of(params);\r\n        }\r\n        */\r\n        // è·åtabIdï¼ææ°çæ¬ä¸å®ætabIdï¼å¦æåä¸å°tabIdåè®¤ä¸ºæ¯èè¡¨åï¼ç´æ¥ä»urlè·ååæ°\r\n        const tabId = params.tabId;\r\n        if (!tabId) {\r\n            // throw new Error('TabId can`t be empty!');\r\n            return of(params);\r\n        }\r\n        const subject = new Subject<any>();\r\n        // ç®¡éåæ°eå¯è½ä¸ºobjectãMapç±»å\r\n        this.runtimeFrameworkService.addEventListener(tabId, (e: any) => {\r\n            let map = {};\r\n            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {\r\n                map = this.parseMapParams(e);\r\n            }\r\n            setTimeout(() => {\r\n                subject.next(Object.assign({}, e, map, params));\r\n            }, 0);\r\n        }, params);\r\n        return subject.asObservable();\r\n    }\r\n    /**\r\n     * è§£æmapç±»åçåæ°\r\n     * @param params params\r\n     */\r\n    private parseMapParams(params: Map<any, any>) {\r\n        const map = {};\r\n        map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));\r\n        params.forEach((value, key) => {\r\n            if (key !== 'WEB_FORM_ROUTE_PARAMS') {\r\n                map[key] = value;\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n    /**\r\n     * è·åparamåæ°\r\n     * @param param key\r\n     */\r\n    public get(param: string): Observable<any> {\r\n        return this.params.pipe(\r\n            switchMap(options => {\r\n                if (!!options && options.hasOwnProperty(param)) {\r\n                    return of(options.param);\r\n                } else {\r\n                    return of(undefined);\r\n                }\r\n            })\r\n        );\r\n    }\r\n    /**\r\n     * åæ°è½¬ä¸ºå¯¹è±¡\r\n     */\r\n    public parse(): Observable<any> {\r\n        return this.params.pipe(\r\n            switchMap(options => {\r\n                return of(options);\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Keybinding, ViewModel } from '@farris/devkit'\r\nimport * as Mousetrap from 'mousetrap';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst enum CharCode {\r\n\r\n  Digit0 = 48,\r\n  Digit1 = 49,\r\n  Digit2 = 50,\r\n  Digit3 = 51,\r\n  Digit4 = 52,\r\n  Digit5 = 53,\r\n  Digit6 = 54,\r\n  Digit7 = 55,\r\n  Digit8 = 56,\r\n  Digit9 = 57,\r\n\r\n  A = 65,\r\n  B = 66,\r\n  C = 67,\r\n  D = 68,\r\n  E = 69,\r\n  F = 70,\r\n  G = 71,\r\n  H = 72,\r\n  I = 73,\r\n  J = 74,\r\n  K = 75,\r\n  L = 76,\r\n  M = 77,\r\n  N = 78,\r\n  O = 79,\r\n  P = 80,\r\n  Q = 81,\r\n  R = 82,\r\n  S = 83,\r\n  T = 84,\r\n  U = 85,\r\n  V = 86,\r\n  W = 87,\r\n  X = 88,\r\n  Y = 89,\r\n  Z = 90,\r\n\r\n  a = 97,\r\n  b = 98,\r\n  c = 99,\r\n  d = 100,\r\n  e = 101,\r\n  f = 102,\r\n  g = 103,\r\n  h = 104,\r\n  i = 105,\r\n  j = 106,\r\n  k = 107,\r\n  l = 108,\r\n  m = 109,\r\n  n = 110,\r\n  o = 111,\r\n  p = 112,\r\n  q = 113,\r\n  r = 114,\r\n  s = 115,\r\n  t = 116,\r\n  u = 117,\r\n  v = 118,\r\n  w = 119,\r\n  x = 120,\r\n  y = 121,\r\n  z = 122\r\n}\r\n\r\n/**\r\n * å¿«æ·é®æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class KeybindingService {\r\n  private keyMap: Map<String, () => Observable<any>>;\r\n  private bindingProvider: Mousetrap;\r\n  private ready: boolean;\r\n\r\n  constructor() {\r\n    this.keyMap = new Map<String, () => Observable<any>>();\r\n    this.bindingProvider = Mousetrap.default;\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * å¯¹è§å¾æ¨¡åè®¾ç½®çå¿«æ·é®è¿è¡ç»å®å¤ç\r\n   * @param viewModel è§å¾æ¨¡å\r\n   */\r\n  public bind(viewModel: ViewModel) {\r\n    viewModel.keybindingMap.forEach((keyBinding, method) => {\r\n      this.register(keyBinding, () => {\r\n        return viewModel[method]();\r\n      });\r\n    });\r\n  }\r\n\r\n\t/**\r\n\t * æ³¨åå¿«æ·é®\r\n\t * @param binding é®çç»å®ä¿¡æ¯\r\n\t * @param handler ååºäºä»¶\r\n\t */\r\n  public register(binding: Keybinding, handler: () => Observable<any>) {\r\n    var combo = this._getCombo(binding);\r\n    if (combo) {\r\n      this.keyMap.set(combo, handler);\r\n      if (binding.ctrlKey && binding.altKey && !binding.shiftKey) {\r\n        // å®éåç°ï¼ctrl+altç»åï¼åªè½è§¦åkeyupäºä»¶\r\n        this.bindingProvider.bind(combo, this._dispatch.bind(this), 'keyup');\r\n      } else {\r\n        this.bindingProvider.bind(combo, this._dispatch.bind(this));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åæ¶å¿«æ·é®æ³¨å\r\n   * @param binding é®çç»å®ä¿¡æ¯ \r\n   */\r\n  public unregister(binding: Keybinding) {\r\n    var combo = this._getCombo(binding);\r\n    if (combo) {\r\n      this.keyMap.delete(combo);\r\n      this.bindingProvider.unbind(combo);\r\n    }\r\n  }\r\n\r\n  private _dispatch(e: KeyboardEvent): boolean {\r\n    if (e.repeat) return false;\r\n    if (this.ready) {\r\n      var combo = this._getCombo(e);\r\n      if (combo && this.keyMap.has(combo)) {\r\n        this.ready = false;\r\n        this.keyMap.get(combo)().subscribe(() => {\r\n          this.ready = true;\r\n        }, (error) => {\r\n          this.ready = true;\r\n        }, () => {\r\n          this.ready = true;\r\n        });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\t/**\r\n\t * è¿åctrl+shift+alt+aå½¢å¼çç»åå­ç¬¦ä¸²ï¼å¨é¨ä¸ºå°å\r\n\t * @param keyInfo \r\n\t */\r\n  private _getCombo(keyInfo: Keybinding | KeyboardEvent): String | null {\r\n    var key = keyInfo.key.toLowerCase();\r\n    if (key.length != 1 || key.charCodeAt(0) < CharCode.a || key.charCodeAt(0) > CharCode.z) {\r\n      console.warn(\"å¿«æ·é®å­æ¯å½¢å¼ä¸ºa-z\");\r\n      return null;\r\n    }\r\n    var combo = (keyInfo.ctrlKey ? 'ctrl+' : '')\r\n      + (keyInfo.shiftKey ? 'shift+' : '')\r\n      + (keyInfo.altKey ? 'alt+' : '')\r\n      + (keyInfo.metaKey ? 'meta+' : '')\r\n      + key;\r\n\r\n    if (combo.length == 1) {\r\n      console.warn(\"å¿«æ·é®è³å°åå«ä¸ä¸ªModifieré®\");\r\n      return null;\r\n    }\r\n\r\n    return combo;\r\n  }\r\n}","// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * @deprecated å·²åºé¤\r\n */\r\n@Injectable()\r\nclass FilterConditionService {\r\n}\r\nexport { FilterConditionService };\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * UIç¶ææå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass UIStateService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  getState(componentId: string, stateName: string) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  setState(componentId: string, stateName: string, value: any) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nexport { UIStateService };\r\n","import { Injectable, ElementRef } from '@angular/core';\r\nimport { StateMachine, FrameContext, AppContext } from '@farris/devkit';\r\n// tslint:disable: max-line-length\r\n/**\r\n * ç¶ææºæå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass StateMachineService {\r\n\r\n  constructor(\r\n    private stateMachine: StateMachine\r\n  ) {\r\n    if (this.stateMachine.initialState.name === 'init') {\r\n      window.setTimeout(() => {\r\n        this.initFormState();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  private _clsDefaultName = 'f-form-state-default';\r\n  private _initLoad = true;\r\n  private _currentFrameContext: any\r\n\r\n  transit(action: string) {\r\n    if (action && typeof this.stateMachine[action] === 'function') {\r\n      this.stateMachine[action]();\r\n      this._currentFrameContext = this['context'] && this['context']['frameContext'];\r\n      if (this._initLoad) {\r\n        this.initFormState();\r\n        this._initLoad = false;\r\n      }\r\n      if (!this._currentFrameContext) {\r\n        return;\r\n      }\r\n      const currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);\r\n      if (!!currentRootFrameContext) {\r\n        this.toggleFormState(action, currentRootFrameContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getCurrentRootFrameContext(currentFrameContext: FrameContext): FrameContext {\r\n    let currentRootFrameContext: FrameContext;\r\n    this.getAllRootFrameContext().forEach((rootFc: FrameContext) => {\r\n      if (currentFrameContext.namespace === rootFc.namespace) {\r\n        currentRootFrameContext = rootFc;\r\n      }\r\n    })\r\n    return currentRootFrameContext;\r\n  }\r\n\r\n  private getFrameContextManagerMap() {\r\n    if (this.stateMachine && this.stateMachine.frameContext) {\r\n      const appContext = this.stateMachine.frameContext.appContext as AppContext;\r\n      if (appContext) {\r\n        const frameContextManager = appContext.frameContextManager;\r\n        return frameContextManager.getFrameContextMap();\r\n      }\r\n    }\r\n    return null;\r\n    // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();\r\n  }\r\n\r\n  private getAllRootFrameContext(): any[] {\r\n    const rootFrameContextArr = [];\r\n    this.getFrameContextManagerMap().forEach(item => {\r\n      if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {\r\n        rootFrameContextArr.push(item);\r\n      }\r\n    })\r\n\r\n    return rootFrameContextArr;\r\n  }\r\n\r\n  private initFormState() {\r\n    if (!this.getFrameContextManagerMap()) {\r\n      return;\r\n    }\r\n    this.getAllRootFrameContext().forEach((rootFc: FrameContext) => {\r\n      const rootComponent = rootFc.injector.get<ElementRef>(ElementRef, null) || null;\r\n      if (!rootComponent || !rootComponent.nativeElement) {\r\n        return;\r\n      }\r\n      if (!rootComponent.nativeElement.className.includes(this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {\r\n        this.addCssClass(rootComponent, this._clsDefaultName);\r\n      }\r\n    })\r\n  }\r\n\r\n  private toggleFormState(action: string, frameContext: FrameContext) {\r\n    const rootComponent = frameContext.injector.get<ElementRef>(ElementRef, null) || null;\r\n    if (!rootComponent || !rootComponent.nativeElement || !action) {\r\n      return;\r\n    }\r\n    action = action.toLowerCase();\r\n    if (action && ['create', 'edit'].includes(action)) {\r\n      if (action === 'create') {\r\n        this.addCssClass(rootComponent, 'f-form-state-create');\r\n      } else if (action === 'edit') {\r\n        this.addCssClass(rootComponent, 'f-form-state-edit');\r\n      }\r\n      this.removeCssClass(rootComponent, this._clsDefaultName);\r\n    } else {\r\n      ['f-form-state-create', 'f-form-state-edit'].forEach(item => this.removeCssClass(rootComponent, item));\r\n      this.addCssClass(rootComponent, this._clsDefaultName);\r\n    }\r\n  }\r\n  private addCssClass(elementRef: ElementRef, className: string) {\r\n    if (!elementRef || !className || !elementRef.nativeElement) {\r\n      return;\r\n    }\r\n    const originalClassName: string = elementRef.nativeElement.className || '';\r\n    if (!originalClassName.includes(className)) {\r\n      elementRef.nativeElement.className = `${originalClassName} ${className}`;\r\n    }\r\n  }\r\n  private removeCssClass(elementRef: ElementRef, className: string) {\r\n    if (!elementRef || !className || !elementRef.nativeElement) {\r\n      return;\r\n    }\r\n    const originalClassName: string = elementRef.nativeElement.className || '';\r\n    if (originalClassName.includes(className)) {\r\n      elementRef.nativeElement.className = originalClassName.split(' ').filter(p => p && p !== className).join(' ');\r\n    }\r\n  }\r\n  private getFormRootComponent() {\r\n    if (this.stateMachine && this.stateMachine.frameContext) {\r\n      const viewContext = this.stateMachine.frameContext;\r\n      if (viewContext) {\r\n        const virtualRootContext = viewContext.getVirtualRootFrameContext();\r\n        if (virtualRootContext) {\r\n          const injector = virtualRootContext.injector;\r\n          if (typeof injector.get === 'function') {\r\n            return injector.get<ElementRef>(ElementRef, null);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n    // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;\r\n  }\r\n}\r\n\r\nexport { StateMachineService };\r\n","import { Injectable } from '@angular/core';\r\nimport { AppContext, BindingData, FrameContext } from '@farris/devkit';\r\n\r\n/**\r\n * å®ä½æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass BindingDataService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private bindingData: BindingData,\r\n    private appContext: AppContext\r\n  ) { }\r\n\r\n  /**\r\n   * è®¾ç½®å½åæ¡æ¶çå½åè¡\r\n   */\r\n  setCurrentId(id: string, frameId: string) {\r\n    // let bindingData = this.bindingData;\r\n    // if (frameId) {\r\n    //   const targetContext = this.appContext.getFrameContext(frameId);\r\n    //   bindingData = targetContext.bindingData;\r\n    // }\r\n    // bindingData.list.setCurrentId(id);\r\n\r\n    // @todoï¼å¨é¨éæ°è®¾ç½®ä¸é\r\n    const frameContexts = Array.from(this.appContext.getAllFrameContexts().values());\r\n    frameContexts.forEach((frameContext: FrameContext) => {\r\n      const bindingData = frameContext.bindingData;\r\n      bindingData.list.setCurrentId(id, true, false);\r\n    });\r\n  }\r\n  public setCurrentRow(id: string, frameId: string) {\r\n    let bindingData = this.bindingData;\r\n    if (frameId) {\r\n      const targetContext = this.appContext.getFrameContext(frameId);\r\n      bindingData = targetContext.bindingData;\r\n    }\r\n    bindingData.getList().setCurrentId(id);\r\n  }\r\n}\r\n\r\nexport { BindingDataService };\r\n","import { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { FrameworkService } from '@gsp-sys/rtf-common';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { ParamService } from './param.service';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { isObservable } from 'rxjs';\r\n\r\n/**\r\n * åºç¨åæ°æå¡\r\n * @scope FormModule\r\n */\r\n\r\n@Injectable()\r\nexport class ApplicationParamService {\r\n  constructor(\r\n    @Optional() private paramService: ParamService,\r\n    @Optional() private runtimeFrameworkService: RuntimeFrameworkService,\r\n  ) {\r\n    if (!this.runtimeFrameworkService) {\r\n      this.runtimeFrameworkService = new RuntimeFrameworkService();\r\n    }\r\n  }\r\n  /**\r\n   * è§£æåæ°\r\n   */\r\n  public parseParams(route: ActivatedRoute, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void) {\r\n    const highOrderInvoke = this.highOrderInvoke(callback);\r\n    if (!this.paramService) {\r\n      route.queryParams.pipe(take(1)).subscribe((params: any) => {\r\n        this.setupParams(params, frameworkService, viewModel, highOrderInvoke);\r\n      });\r\n    } else {\r\n      this.paramService.parse().pipe(take(1)).subscribe(params => {\r\n        this.setupParams(params, frameworkService, viewModel, highOrderInvoke);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®åæ°\r\n   */\r\n  private setupParams(params, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void) {\r\n    const queryParams = this.getParams(params);\r\n    if (!queryParams) {\r\n      callback();\r\n      return;\r\n    }\r\n\r\n    // åè®¾ç½®åæ°ï¼ä¿è¯æ®éè·¯ç±ä¹è½æ­£å¸¸æ§è¡ã\r\n    this.setQueryParams(queryParams, viewModel);\r\n\r\n    const funcId = this.getFuncId(queryParams);\r\n    const appId = this.getAppId(queryParams);\r\n    if (!funcId && !appId) {\r\n      callback();\r\n      return;\r\n    }\r\n\r\n    if (funcId) {\r\n      this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n  /**\r\n   * è®¾ç½®æ¥è¯¢åæ°\r\n   */\r\n  private setQueryParams(queryParams: any, viewModel: ViewModel): any {\r\n    const parsedQueryParams = {};\r\n    // è®¾ç½®è¡¨ååæ°\r\n    // é¦åå¤æ­æ¯å¦ä¸ºå¼¹çª\r\n    const isInDialog = this.isInDialog(viewModel);\r\n    const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};\r\n    // å¦ææ¯å¼¹çªï¼å¼¹çªå¤çåæ°ï¼æ è®ºè¡¨ååæ°æéæåæ°ï¼ä¸åºè¯¥è¦çå¼¹çªçåæ°ãå¼¹çªæå¼æ¶ä¼ éçåæ°ç¸å½äºå±é¨åéï¼ä¸åºè¢«è¦ç\r\n    Object.keys(queryParams).forEach((paramName: string) => {\r\n      if (!isInDialog) {\r\n        parsedQueryParams[paramName] = queryParams[paramName];\r\n      } else {\r\n        if (!uiState.hasOwnProperty(paramName)) {\r\n          parsedQueryParams[paramName] = queryParams[paramName];\r\n        }\r\n      }\r\n    });\r\n    this.updateUIState(viewModel, parsedQueryParams);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®éæåæ°\r\n   */\r\n  private setStaticParams(\r\n    funcId: string, queryParams: any, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void\r\n  ) {\r\n    this.runtimeFrameworkService.getMenuParams(funcId, (staicParams) => {\r\n      const staticParamsObj = this.mapStaticParamsToObject(staicParams, queryParams, viewModel);\r\n      if (!staticParamsObj) {\r\n        callback();\r\n        return;\r\n      }\r\n      this.updateUIState(viewModel, staticParamsObj);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * å°staticParamsè½¬æ¢ä¸ºæ®éå¯¹è±¡\r\n   * @param staticParamsï¼å½¢å¦ï¼[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]\r\n   * @return å½¢å¦ï¼{key1: val1, key2: value2 }\r\n   */\r\n  private mapStaticParamsToObject(staticParams: Map<any, any>, queryParams: any, viewModel?: ViewModel): any {\r\n    if (!staticParams) {\r\n      return;\r\n    }\r\n    const inDialog = this.isInDialog(viewModel);\r\n    const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};\r\n    const result = {};\r\n    staticParams.forEach((value, key, map) => {\r\n      if (!inDialog) {\r\n        // éæåæ°ä¸è½è¦çæ¥è¯¢åæ°\r\n        if (!queryParams.hasOwnProperty(key)) {\r\n          result[key] = value;\r\n        }\r\n      } else {\r\n        if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {\r\n          result[key] = value;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * æ¯å¦å¨å¼¹çªå\r\n   * @param viewModel viewmodel\r\n   */\r\n  private isInDialog(viewModel: ViewModel) {\r\n    let isInDialog = false;\r\n    if (viewModel && viewModel.uiState) {\r\n      // tslint:disable-next-line: max-line-length\r\n      if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {\r\n        isInDialog = true;\r\n      }\r\n    }\r\n    return isInDialog;\r\n  }\r\n  /**\r\n   * æ´æ°UIState\r\n   */\r\n  private updateUIState(viewModel: ViewModel, params: any) {\r\n    if (!viewModel || !params) {\r\n      return;\r\n    }\r\n    const uiState = viewModel.uiState;\r\n\r\n    // å¼å®¹ä½¿ç¨stringä¼ éparamså¯¹è±¡çåºæ¯\r\n    if (typeof params === 'string' && params !== '') {\r\n      params = JSON.parse(params);\r\n    }\r\n\r\n    // å¨UIStateä¸ºåæ°åå»ºå±æ§\r\n    Object.keys(params).forEach((propName: string) => {\r\n      uiState.setPropertyValue(propName, params[propName]);\r\n      if (propName && propName === 'union_session') {\r\n        let sessionInfo = params[propName];\r\n        this.setSessionInfo(viewModel, sessionInfo);\r\n      }\r\n    });\r\n  }\r\n  private setSessionInfo(viewModel: ViewModel, sessionInfo: any) {\r\n    if (!viewModel || !sessionInfo) {\r\n      return;\r\n    }\r\n    if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {\r\n      sessionInfo = JSON.parse(sessionInfo);\r\n    }\r\n    const token = sessionInfo && sessionInfo.token || null;\r\n    const sessionId = sessionInfo && sessionInfo.sessionId || null;\r\n    if (token) {\r\n      viewModel.frameContext.appContext.Token = token;\r\n    }\r\n    if (sessionId) {\r\n      const befRepository = viewModel.frameContext.repository as BefRepository<any>;\r\n      if (befRepository) {\r\n        befRepository.restService.sessionService.setBeSessionId(sessionId);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·ååè½èåid\r\n   */\r\n  private getFuncId(queryParams: any): any {\r\n    if (!queryParams) {\r\n      return;\r\n    }\r\n    return queryParams['funcId'];\r\n  }\r\n\r\n  /**\r\n   * è·ååºç¨id\r\n   */\r\n  private getAppId(queryParams: any): any {\r\n    if (!queryParams) {\r\n      return;\r\n    }\r\n    return queryParams['appId'];\r\n  }\r\n  /**\r\n   * è·åurlåæ°å¯¹è±¡\r\n   * @param queryParams urlåæ°\r\n   */\r\n  private getParams(queryParams: any): { [propName: string]: any } {\r\n    if (!queryParams) {\r\n      return {};\r\n    }\r\n    let result = {};\r\n    if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {\r\n      let webFormRouteParams: string = queryParams['WEB_FORM_ROUTE_PARAMS'];\r\n      if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {\r\n        webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\\\n').replace(/%09/g, '\\\\t').replace(/%0D/g, '\\\\r'));\r\n        result = JSON.parse(webFormRouteParams);\r\n      }\r\n      Object.keys(queryParams).forEach(prop => {\r\n        if (prop !== 'WEB_FORM_ROUTE_PARAMS') {\r\n          result[prop] = queryParams[prop];\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n    return queryParams;\r\n  }\r\n  private highOrderInvoke(callback) {\r\n    return () => {\r\n      try {\r\n        const controlEvent = this.runtimeFrameworkService.getMenuSwitchControlEvent();\r\n        if (controlEvent && isObservable(controlEvent)) {\r\n          controlEvent.subscribe((event: any) => {\r\n            if (event) {\r\n              event.next('ok');\r\n            }\r\n          });\r\n        }\r\n      } catch (e) { console.warn(e);}\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, BindingData, BindingList, BindingObject } from '@farris/devkit';\r\n\r\n/**\r\n * å®ä½éåæå¡\r\n * @todo\r\n * å®ä½å±æ²¡æå°è£ç¸å³æ¹æ³ï¼ä¸´æ¶éè¿BindingDataæ¥è·åæ°æ®\r\n */\r\n@Injectable()\r\nclass EntityTraversingService {\r\n\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n  }\r\n\r\n  /**\r\n   * è·åå¼\r\n   */\r\n  public getPropValue(path: string[]): any {\r\n    return this.bindingData.getValue(path);\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä½æ°æ®\r\n   */\r\n  public getEntityData(path: string[]): any {\r\n    let bindingObj: BindingObject;\r\n    const bindingListOrObject = this.bindingData.getValue(path);\r\n    if (bindingListOrObject instanceof BindingList === true) {\r\n      bindingObj = bindingListOrObject.currentItem;\r\n    } else {\r\n      bindingObj = bindingListOrObject;\r\n    }\r\n    return bindingObj.toJSON();\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä½åè¡¨æ°æ®\r\n   */\r\n  public getEntityListData(path: string[]): any[] {\r\n    const bindingList = this.bindingData.getValue(path) as BindingList;\r\n    return bindingList.toJSON();\r\n  }\r\n\r\n}\r\n\r\nexport { EntityTraversingService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, BindingData } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass EntityManipulationService {\r\n\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçå­æ®µå¼\r\n   */\r\n  public setPropValue(path: string[], value: any): any {\r\n\r\n    // å®ä½å±è¿æ²¡æå°è£ï¼ä¸´æ¶ç¨BindingDataç¸å³æ¹æ³ä»£æ¿\r\n    this.bindingData.setValue(path, value, true, true);\r\n  }\r\n\r\n}\r\n\r\nexport { EntityManipulationService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, BindingData, BindingList, BindingObject } from '@farris/devkit';\r\nimport { EntityTraversingService } from './entity-traversing.service';\r\n\r\ninterface SplitedPath {\r\n  listPath: string[];\r\n  propPath: string[];\r\n}\r\n\r\n/**\r\n * å®ä½èåæå¡\r\n */\r\n@Injectable()\r\nclass EntityAggregationService {\r\n\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  private traversingService: EntityTraversingService;\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n    this.traversingService   = this.frameContext.injector.get<EntityTraversingService>(EntityTraversingService);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºåè¡¨è®°å½çæ¡æ°\r\n   */\r\n  public count(path: string[]): number {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n    return entityListData.length;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçå\r\n   */\r\n  public sum(path: string[]) {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n\r\n    const total = entityListData.reduce((accTotal: number, entityData: any) => {\r\n      let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\r\n      propValue = isNaN(propValue) ? 0 : propValue;\r\n      accTotal += propValue;\r\n      return accTotal;\r\n    }, 0);\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçå¹³åå¼\r\n   */\r\n  public avg(path: string[]) {\r\n    const count = this.count(path);\r\n    const total = this.sum(path);\r\n    return count !== 0 ? total / count : 0;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçæå¤§å¼\r\n   */\r\n  public max(path: string[]): number {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n\r\n    const max =  entityListData.reduce((accMax: number, entityData: any) => {\r\n      const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\r\n      if (isNaN(propValue) === false && ( !accMax || propValue > accMax)) {\r\n        accMax = propValue;\r\n      }\r\n      return accMax;\r\n    }, null);\r\n    return max ? max : 0;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçæå°å¼\r\n   */\r\n  public min(path: string[]): number {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n\r\n    const min = entityListData.reduce((accMin: number, entityData: any) => {\r\n      const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\r\n      if (isNaN(propValue) === false && ( !accMin || propValue < accMin)) {\r\n        accMin = propValue;\r\n      }\r\n      return accMin;\r\n    }, null);\r\n    return min ? min : 0;\r\n  }\r\n\r\n  /**\r\n   * è·åå±æ§å¼\r\n   */\r\n  private getPropValue(entityData: any, path: string[]) {\r\n    let currentData = entityData;\r\n    path.forEach((pathItem: string) => {\r\n\r\n      // æåéåºçé½éç½®ä¸ºnullï¼ä¸»è¦éå¯¹å³èå¯¹è±¡æªèµå¼åºæ¯\r\n      if (!currentData) {\r\n        currentData = null;\r\n        return;\r\n      }\r\n      currentData = currentData[pathItem];\r\n    });\r\n\r\n    return currentData;\r\n  }\r\n\r\n  /**\r\n   * åéè·¯å¾ï¼åéç¬¦åè¡¨è·¯å¾åå±æ§è·¯å¾\r\n   * @return å½¢å¦ {parentListPath: [], propertyPath: []}\r\n   */\r\n  private splitPath(path: string[]): SplitedPath {\r\n    const listPath = path.concat([]);\r\n    const propPath = [];\r\n    let currentNode = this.bindingData.getValue(listPath);\r\n    while (currentNode instanceof BindingList !== true) {\r\n      const propPathItem = listPath.pop();\r\n      if (!propPathItem) {\r\n        return;\r\n      }\r\n      propPath.unshift(propPathItem);\r\n      currentNode = this.bindingData.getValue(listPath);\r\n    }\r\n\r\n    return {\r\n      listPath: listPath,\r\n      propPath: propPath\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport { EntityAggregationService };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-29 19:07:30 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-05-29 19:31:19\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { BindingData } from '@farris/devkit';\r\n\r\n/**\r\n * EntityListæå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass EntityListService {\r\n\r\n  constructor(private bindingData: BindingData) {}\r\n\r\n    /**\r\n     * è·åå½åé¡µç \r\n     */\r\n    public get pageIndex() {\r\n        return this.bindingData.list.pageIndex;\r\n    }\r\n\r\n    /**\r\n     * è·åå½ååé¡µå¤§å°\r\n     */\r\n    public get pageSize() {\r\n        return this.bindingData.list.pageSize;\r\n    }\r\n}\r\n\r\nexport { EntityListService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { EntityTraversingService } from './entity-traversing.service';\r\nimport { EntityManipulationService } from './entity-manipulation.service';\r\nimport { EntityAggregationService} from './entity-aggregation.service';\r\n\r\n/**\r\n * å®ä½æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass EntityService {\r\n\r\n  private traversingService: EntityTraversingService;\r\n\r\n  private manipulationService: EntityManipulationService;\r\n\r\n  private aggregationService: EntityAggregationService;\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n    const injector = this.frameContext.injector;\r\n    this.traversingService   = injector.get<EntityTraversingService>(EntityTraversingService);\r\n    this.manipulationService = injector.get<EntityManipulationService>(EntityManipulationService);\r\n    this.aggregationService  = injector.get<EntityAggregationService>(EntityAggregationService);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºçå±æ§å¼\r\n   */\r\n  public getPropValue(path: string[]): any {\r\n    return this.traversingService.getPropValue(path);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçå±æ§å¼\r\n   */\r\n  public setPropValue(path: string[], value: any): void {\r\n    return this.manipulationService.setPropValue(path, value);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçEntityæ°æ®\r\n   */\r\n  public getEntityData(path: string[]): any {\r\n    return this.traversingService.getEntityData(path);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçEntityListæ°æ®\r\n   */\r\n  public getEntityListData(path: string[]): any {\r\n    return this.traversingService.getEntityListData(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºEntityListè®°å½æ°\r\n   */\r\n  public count(path: string[]): number {\r\n    return this.aggregationService.count(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çåè®¡å¼\r\n   */\r\n  public sum(path: string[]): number {\r\n    return this.aggregationService.sum(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çå¹³åå¼\r\n   */\r\n  public avg(path: string[]): number {\r\n    return this.aggregationService.avg(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çæå¤§å¼\r\n   */\r\n  public max(path: string[]): number {\r\n    return this.aggregationService.max(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çæå°å¼\r\n   */\r\n  public min(path: string[]): number {\r\n    return this.aggregationService.min(path);\r\n  }\r\n}\r\n\r\nexport { EntityService };\r\n","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, DataTypeInfo, Entity, FrameContext, Repository } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class BindingPathService {\r\n  constructor(private injector: Injector, private appContext: AppContext, private repository: Repository<Entity>) { }\r\n  /**\r\n   * è·åç»ä»¶ä¸ä¸æçç»å®è·¯å¾\r\n   * @param frameContext ç»ä»¶ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public getBindingPathsByFrameContext(frameContext: FrameContext): string[] {\r\n    return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(p => p) || null;\r\n  }\r\n  /**\r\n   * éè¿BEè¡¨åè·åbindingPath\r\n   * @param dataTypeInfo \r\n   * @param tableName \r\n   * @param paths \r\n   * @param level\r\n   * @returns \r\n   */\r\n  public getBindingPathsByTableName(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = [], level: number = 0): string[] {\r\n    level++;\r\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\r\n      if (level !== 1) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      }\r\n      return paths;\r\n    }\r\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\r\n    if (props.length < 1) {\r\n      paths = [];\r\n      return paths;\r\n    }\r\n    if (dataTypeInfo.entityInfo) {\r\n      if (level !== 1) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      }\r\n    }\r\n\r\n    for (let idx = 0; idx < props.length; idx++) {\r\n      const dataTypeInfo = props[idx].typeInfo;\r\n      const path = this.getBindingPathsByTableName(dataTypeInfo, tableName, paths, level);\r\n      if (!path || path.length < 1) {\r\n        continue;\r\n      } else {\r\n        paths = paths.concat(path);\r\n        return paths;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * è·åå±æ§è·¯å¾ä¸­çç»å®è·¯å¾\r\n   * @param paths paths\r\n   * @param entityTypeInfo \r\n   * @returns \r\n   */\r\n  public getBindingPathsByPath(paths: string[] | string, entityTypeInfo: DataTypeInfo): string[] {\r\n    let nodeCodes = [];\r\n    if (typeof paths === 'string') {\r\n      paths = paths.split('/').filter(p => p);\r\n    }\r\n    paths = paths.concat([]);\r\n    while (paths.length > 0) {\r\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n      if (dataPropInfo.group === 'List') {\r\n        nodeCodes = paths;\r\n        break;\r\n      }\r\n      paths.pop();\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * è·åå±æ§è·¯å¾ä¿¡æ¯\r\n   * @param path å±æ§è·¯å¾\r\n   * @returns \r\n   */\r\n  public getPathInfo(path: string): { bindingPath: string, propertyName: string, bindingPaths: string[], propertyNames: string[] } {\r\n    const paths = path.split('/').filter(p => p);\r\n    // è·åæå¤§å®ä½å±çº§ï¼å¶ä½ä¸ºå±æ§ï¼ç®åå±æ§ãudtãå³èãå³èåµå¥å³èï¼\r\n    const entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);\r\n    const propertyName = paths.slice(entityPath.length).join('/');\r\n    return { bindingPath: entityPath.join('/'), propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { FrameContext, NgFormControl } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class FormControlService {\r\n  constructor() { }\r\n  public getFormControlsByFrameContext(frameContext: FrameContext): { [propertyName: string]: NgFormControl } | null {\r\n    return frameContext && frameContext.form && frameContext.form.ngFormControls || null;\r\n  }\r\n  /**\r\n   * éè¿bindingåæ°æ®è·åNgFormControl\r\n   * @param frameContext \r\n   * @param binding binding\r\n   * @returns \r\n   */\r\n  public getFormControlByBinding(frameContext: FrameContext, binding: string): NgFormControl {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    return Object.values(ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl && ngFormControl.binding === binding);\r\n\r\n  }\r\n  /**\r\n   * \r\n   * @param frameContext frameContext\r\n   * @param fullPath \r\n   * @returns \r\n   */\r\n  public getFormControlIndexByFullPath(frameContext: FrameContext, fullPath: string): number {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    const bindings = fullPath.split('/').filter(p => p);\r\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => {\r\n      if (!ngFormControl) {\r\n        return false;\r\n      }\r\n      const bindingPath = frameContext.viewModel.bindingPath;\r\n      const bindingPaths = bindingPath.split('/').filter(p => p);\r\n      const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);\r\n      const fullPath = bindingPaths.concat(formControlBindingPaths);\r\n      return fullPath.join('/') === bindings.join('/');\r\n    });\r\n  }\r\n  /**\r\n   * éè¿bindingåæ°æ®è·åNgFormControlä½ç½®\r\n   * @param frameContext \r\n   * @param binding binding\r\n   * @returns ä»0å¼å§\r\n   */\r\n  public getFormControlIndexByBinding(frameContext: FrameContext, binding: string): number {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => ngFormControl && ngFormControl.binding === binding);\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, DataPropInfo, Entity, FrameContext, Repository } from \"@farris/devkit\";\r\nimport { BindingPathService } from \"./binding-path.service\";\r\nimport { FormControlService } from './form-control.service';\r\n\r\n@Injectable()\r\nexport class FrameContextService {\r\n  constructor(\r\n    private injector: Injector, \r\n    private appContext: AppContext, \r\n    private frameContext: FrameContext, \r\n    private repository: Repository<Entity>,\r\n    private bindingPathService: BindingPathService,\r\n    private formControlService: FormControlService\r\n    ) { }\r\n  /**\r\n     * éè¿BEè¡¨åè·åå¯¹åºçframeContext\r\n     * @param tableName \r\n     * @returns \r\n     */\r\n  public getFrameContextsByTableName(tableName: string): null | FrameContext[] {\r\n    if (!tableName) {\r\n      throw new Error('tableName ä¸è½ä¸ºç©ºã');\r\n    }\r\n    const dataTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n    if (!dataTypeInfo) {\r\n      return null;\r\n    }\r\n    const bindingPaths = [];\r\n    this.bindingPathService.getBindingPathsByTableName(dataTypeInfo, tableName, bindingPaths);\r\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\r\n    if (!frameContexts || frameContexts.length === 0) {\r\n      return null;\r\n    }\r\n    return frameContexts.filter((frameContext: FrameContext) => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPaths.join('/'));\r\n  }\r\n  /**\r\n   * æ ¹æ®å­æ®µå®æ´è·¯å¾è·åæå¨çä¸ä¸æ\r\n   * @param propertyPath \r\n   * @param separtor \r\n   * @returns \r\n   */\r\n  public getFrameContextsByPropertyPath(propertyPath: string, separtor: string = '/'): FrameContext[] {\r\n    if (!propertyPath) {\r\n      throw new Error('propertyPath ä¸è½ä¸ºç©ºã');\r\n    }\r\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\r\n    return frameContexts.filter((frameContext: FrameContext) => {\r\n      const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};\r\n      const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';\r\n      if (formControls && Object.keys(formControls).length > 0) {\r\n        const key = Object.keys(formControls).find((key: string) => {\r\n          const formControl = formControls[key];\r\n          if (!formControl || !formControl.binding) {\r\n            return false;\r\n          }\r\n          const bindings = formControl.binding.split('.').filter(p => p);\r\n          const bindingPaths = bindingPath.split('/').filter(p => p);\r\n          const fullPath = bindingPaths.concat(bindings);\r\n          return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');\r\n        });\r\n        return key ? true : false;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  /**\r\n   * éè¿BEå­æ®µåè·åå­æ®µçbindingPath\r\n   * @param bindingPaths ç»å®è·¯å¾\r\n   * @param columnName BEå­æ®µå\r\n   * @returns \r\n   */\r\n  public getFrameContextsByColumnName(bindingPaths: string[], columnName: string): FrameContext[] | null {\r\n    if (!bindingPaths) {\r\n      throw new Error('bindingPath ä¸è½ä¸ºç©ºã');\r\n    }\r\n    if (!columnName) {\r\n      throw new Error('columnName ä¸è½ä¸ºç©ºã');\r\n    }\r\n    bindingPaths = bindingPaths.filter(p => p);\r\n    const entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n    if (!entityTypeInfo) {\r\n      return null;\r\n    }\r\n    const dataTypeInfo = entityTypeInfo.getTypeInfoByPath(bindingPaths);\r\n    const dataPropInfos = dataTypeInfo && dataTypeInfo.getPropInfos() || [];\r\n    const columnPropInfo = dataPropInfos.find((dataPropInfo: DataPropInfo) => dataPropInfo.metadataInfo && (dataPropInfo.metadataInfo.originalDataField === columnName || dataPropInfo.metadataInfo.dataField === columnName));\r\n    if (!columnPropInfo || !columnPropInfo.metadataInfo) {\r\n      return null;\r\n    }\r\n    const frameContexts = this.appContext.frameContextManager.getFrameContexts();\r\n    return frameContexts.filter((frameContext: FrameContext) => {\r\n      const ngFormControls = this.formControlService.getFormControlsByFrameContext(frameContext);\r\n      if (!ngFormControls || Object.keys(ngFormControls).length < 1) {\r\n        return false;\r\n      }\r\n      const currentBindingPaths = this.bindingPathService.getBindingPathsByFrameContext(frameContext) || [];\r\n      const isValidFrameContext = currentBindingPaths.join('/') === bindingPaths.join('/');\r\n      if (!isValidFrameContext) {\r\n        return false;\r\n      }\r\n      const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === columnPropInfo.metadataInfo.path);\r\n      return ngFormControl ? true : false;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * éè¿ç»å®è·¯å¾è·åå¯¹åºçç»ä»¶ä¸ä¸ææ°ç»\r\n   * @param bindingPath bindingPathå­ç¬¦ä¸²\r\n   * @param namespace ns,é»è®¤ä¸º''\r\n   */\r\n   public getFrameContextsByBindingPath(bindingPath: string | string[], namespace: string = ''): FrameContext[] {\r\n    if (Array.isArray(bindingPath)) {\r\n      bindingPath = bindingPath.join('/');\r\n    }\r\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\r\n    return frameContexts.filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace && frameContext.viewModel.bindingPath === bindingPath);\r\n  }\r\n}","import { Injectable, ElementRef } from '@angular/core';\r\nimport { Repository, FrameContext, NgFormControl } from '@farris/devkit';\r\nimport { FrameContextService } from './frame-context.service';\r\nimport { FormControlService } from './form-control.service';\r\n\r\nconst FIXED_COLUMN_START_INDEX = 5000;\r\nconst GRID_COLUMN_START_INDEX = 10000;\r\ninterface FocusableInvalidationGrid {\r\n  editCell(rowId: any, field: string): void;\r\n}\r\n\r\n/**\r\n * è¡¨åéªè¯æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass FocusInvalidService {\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private frameContext: FrameContext,\r\n    private frameContextService: FrameContextService,\r\n    private formControlService: FormControlService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * åç¬¬ä¸ä¸ªéªè¯ä¸éè¿çå­æ®µè®¾ç½®ç¦ç¹\r\n   */\r\n  public focusInvalidInput(verifyInformations: any[], rootElement: ElementRef<any>) {\r\n    // æ éªè¯ä¸éè¿ä¿¡æ¯æ¶ï¼ç´æ¥è¿åã\r\n    if (!verifyInformations || !verifyInformations.length) {\r\n      return;\r\n    }\r\n    let targetField = null;\r\n    const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);\r\n    if (firstVerifyInformation) {\r\n      targetField = firstVerifyInformation.targetField;\r\n      if (targetField) {\r\n        const canFocus = this.focusElement(targetField, rootElement);\r\n        if (canFocus) {\r\n          verifyInformations['focused'] = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®DataGridååæ ¼ç¦ç¹\r\n   */\r\n  public focusGridCell(verifyInformations: any[], focusableDataGrid: FocusableInvalidationGrid) {\r\n    if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true) {\r\n      return;\r\n    }\r\n    let targetField = null;\r\n    let targetId = null;\r\n    const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);\r\n    if (firstVerifyInformation) {\r\n      targetField = firstVerifyInformation.targetField;\r\n      targetId = firstVerifyInformation.id;\r\n      verifyInformations['focused'] = true;\r\n      focusableDataGrid.editCell(targetId, targetField);\r\n    }\r\n  }\r\n  private updateVerifyInformationsIndex(verifyInformations: any[], rootElement?: ElementRef<any>) {\r\n    verifyInformations = verifyInformations.filter((verifyInformation: any) => {\r\n      const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');\r\n      const frameContext = frameContexts && frameContexts[0] || null;\r\n      return frameContext && frameContext.frameId === this.frameContext.frameId;\r\n    });\r\n    return verifyInformations.map((verifyInformation: any) => {\r\n      let tabIndex = -1;\r\n      if (verifyInformation) {\r\n        if (rootElement && verifyInformation.targetField) {\r\n          const input = this.getInputElementById(verifyInformation.targetField, rootElement);\r\n          tabIndex = input && input.getAttribute('tabindex') || -1;\r\n          tabIndex = Number(tabIndex);\r\n        }\r\n        const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');\r\n        const frameContext = frameContexts && frameContexts[0] || null;\r\n        const frameIndex = frameContext.index + 1;\r\n        verifyInformation.tabIndex = tabIndex;\r\n        verifyInformation.domIndex = -1;\r\n        verifyInformation.frameIndex = -1;\r\n        verifyInformation.position = tabIndex;\r\n        if (frameContext) {\r\n          const domIndex = this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;\r\n          if (domIndex > 0) {\r\n            const rowIndex = verifyInformation.index || 0;\r\n            verifyInformation.domIndex = domIndex;\r\n            verifyInformation.frameIndex = frameContext.index;\r\n            verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);\r\n          }\r\n        }\r\n      }\r\n      return verifyInformation;\r\n    });\r\n  }\r\n  private isGridComponent(frameContext: FrameContext) {\r\n    if (frameContext) {\r\n      const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\r\n      return dataGridColumnsName ? true : false;\r\n    }\r\n    return undefined;\r\n  }\r\n  private getColumnIndex(frameContext: FrameContext, binding: string) {\r\n    binding = binding.split('/').filter(p => p).join('/');\r\n    const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n    const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\r\n    const frameIndex = frameContext.index + 1;\r\n    if (!dataGridColumnsName) {\r\n      return undefined;\r\n    }\r\n    let columns: any[] = frameContext.viewModel[dataGridColumnsName];\r\n    if (!columns || columns.length < 1) {\r\n      return undefined;\r\n    }\r\n    // æå¹³columns\r\n    columns = columns.reduce((results: any[], item) => {\r\n      if (Array.isArray(item)) {\r\n        return results.concat(item);\r\n      }\r\n      return results.concat([item]);\r\n    }, []);\r\n    let position = -1;\r\n    for (let index = 0; index < columns.length; index++) {\r\n      const column: any | any[] = columns[index];\r\n      const fields = column && column.field && column.field.split('.').filter(p => p) || null;\r\n      if (!fields) {\r\n        continue;\r\n      }\r\n      if (bindingPaths.concat(fields).join('/') === binding) {\r\n        const fixed = column.fixed;\r\n        if (fixed) {\r\n          const fixedColumns = columns.filter(item => item.fixed === fixed);\r\n          const fixedColumnIndex = this.getIndexFromColumns(fixedColumns, binding);\r\n          if (fixed === 'left') {\r\n            position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;\r\n          } else {\r\n            position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;\r\n          }\r\n        } else {\r\n          position = frameIndex * GRID_COLUMN_START_INDEX + index;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return position;\r\n  }\r\n  private getIndexFromColumns(columns: any[], binding: string) {\r\n    const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n    return columns.findIndex(column => {\r\n      const fields = column && column.field && column.field.split('.').filter(p => p) || null;\r\n      if (!fields) {\r\n        return false;\r\n      }\r\n      if (bindingPaths.concat(fields).join('/') === binding) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  private selectFirstVerifyInformation(verifyInformations: any[], rootElement?: ElementRef<any>) {\r\n    verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);\r\n    verifyInformations.sort((v1: any, v2: any) => Number(v1.position) - Number(v2.position));\r\n    return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;\r\n  }\r\n  private getInputElementById(targetField: string, rootElement: ElementRef<any>) {\r\n    let element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;\r\n    if (element && element.tagName !== 'INPUT') {\r\n      const inputs = element.getElementsByTagName('input');\r\n      if (inputs.length) {\r\n        element = inputs[0];\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n  public getFrameContextsByPropertyPath(propertyPath: string, separtor: string = '/'): FrameContext[] {\r\n    if (!propertyPath) {\r\n      return [];\r\n    }\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];\r\n    return frameContexts.filter((frameContext: FrameContext) => {\r\n      const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};\r\n      const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';\r\n      if (formControls && Object.keys(formControls).length > 0) {\r\n        const key = Object.keys(formControls).find((key: string) => {\r\n          const formControl = formControls[key];\r\n          if (!formControl || !formControl.binding) {\r\n            return false;\r\n          }\r\n          const bindings = formControl.binding.split('.').filter(p => p);\r\n          const bindingPaths = bindingPath.split('/').filter(p => p);\r\n          const fullPath = bindingPaths.concat(bindings);\r\n          return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');\r\n        });\r\n        return key ? true : false;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  public getFormControlIndexByBindingPath(frameContext: FrameContext, binding: string): number {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    const bindings = binding.split('/').filter(p => p);\r\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => {\r\n      if (!ngFormControl) {\r\n        return false;\r\n      }\r\n      const bindingPath = frameContext.viewModel.bindingPath;\r\n      const bindingPaths = bindingPath.split('/').filter(p => p);\r\n      const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);\r\n      const fullPath = bindingPaths.concat(formControlBindingPaths);\r\n      return fullPath.join('/') === bindings.join('/');\r\n    });\r\n  }\r\n  public getFieldIndex(frameContext: FrameContext, binding: string) {\r\n    const isGridComponent = this.isGridComponent(frameContext);\r\n    if (isGridComponent) {\r\n      return this.getColumnIndex(frameContext, binding);\r\n    } else {\r\n      return this.getFormControlIndexByBindingPath(frameContext, binding);\r\n    }\r\n  }\r\n  public getFormControlsByFrameContext(frameContext: FrameContext): { [propertyName: string]: NgFormControl } | null {\r\n    return frameContext && frameContext.form && frameContext.form.ngFormControls || null;\r\n  }\r\n  public focusElement(elementId: string, rootElement: ElementRef<any>): boolean {\r\n    let focused = false;\r\n    let elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);\r\n    // æªè·åå°æå®å­æ®µæ¶ï¼è¿åï¼ä¸åè®¾ç½®ç¦ç¹ã\r\n    if (elementToFocus) {\r\n      // å¦ææå¤ä¸ªidéå¤çåç´ ï¼åä¸å®ä½\r\n      const elements = rootElement.nativeElement.ownerDocument.querySelectorAll(`#${elementId}`);\r\n      if (elements && elements.length > 1) {\r\n        return focused;\r\n      }\r\n      // å¦æç»å®ç®æ å­æ®µçæ§ä»¶ä¸æ¯Inputåç´ ï¼åæ¥æ¾å¶ä¸çº§èç¹ã\r\n      if (elementToFocus.tagName !== 'INPUT') {\r\n        const subElements = elementToFocus.getElementsByTagName('input');\r\n        if (subElements.length) {\r\n          elementToFocus = subElements[0];\r\n        }\r\n      }\r\n      elementToFocus.focus();\r\n      focused = true;\r\n    }\r\n    return focused;\r\n  }\r\n  /**\r\n   * è®¾ç½®ç¦ç¹\r\n   * @param verifyInformation éè¯¯ä¿¡æ¯\r\n   * @param frameContext ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public focus(verifyInformation: any, frameContext: FrameContext) {\r\n    if (!verifyInformation) {\r\n      return;\r\n    }\r\n    const isGridValidation = verifyInformation.index !== null;\r\n    if (isGridValidation) {\r\n      const grid = this.getGridRef(frameContext);\r\n      if (grid) {\r\n        setTimeout(() => {\r\n          grid.editCell(verifyInformation.id, verifyInformation.targetField);\r\n        }, 0);\r\n      }\r\n    } else {\r\n      const frameElement = this.getComponentRef(frameContext);\r\n      const elementId = verifyInformation.targetField;\r\n      this.focusById(elementId, frameElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * éè¿æ§ä»¶idè®¾ç½®ç¦ç¹\r\n   * @param elementId \r\n   * @param elementRef \r\n   */\r\n  private focusById(elementId: string, elementRef?: ElementRef) {\r\n    const document: any = elementRef && elementRef.nativeElement.ownerDocument || window.document;\r\n    if (document) {\r\n      const element = document.getElementById(elementId);\r\n      if (element.tagName !== 'INPUT') {\r\n        const subElements = element.getElementsByTagName('input');\r\n        if (subElements.length) {\r\n          const input = subElements[0];\r\n          if (input && typeof input.focus === 'function') {\r\n            input.focus();\r\n          }\r\n        }\r\n      } else {\r\n        element.focus();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åç»ä»¶å®ä¾\r\n   * @param frameContext \r\n   * @returns \r\n   */\r\n  private getComponentRef(frameContext: FrameContext) {\r\n    return this.frameContext && this.frameContext.injector.get<ElementRef>(ElementRef, null) || null;\r\n  }\r\n  /**\r\n   * è·ågridå®ä¾\r\n   * @param frameContext frameContext\r\n   * @returns \r\n   */\r\n  private getGridRef(frameContext: FrameContext): FocusableInvalidationGrid {\r\n    const namespace = frameContext.namespace;\r\n    const bindingPath = frameContext.viewModel.bindingPath;\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];\r\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    let result = null;\r\n    if (matchedFrameContexts) {\r\n      matchedFrameContexts.every((frameContext: FrameContext) => {\r\n        const frameId = frameContext.frameId;\r\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\r\n        if (!componentsMap) {\r\n          return true;\r\n        }\r\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\r\n        if (datagridComponent) {\r\n          result = datagridComponent;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { FocusableInvalidationGrid, FocusInvalidService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Repository, Entity, FrameContext, PARENT_CLASS, ChangeType, ValidationResult } from '@farris/devkit';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { Observable, Subject, Subscriber } from 'rxjs';\r\nimport { zip } from 'rxjs/observable/zip';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n\r\nconst POSTER = 'iframePoster';\r\nconst RECEIVER = 'iframeReceiver';\r\nconst REPOSITORY = 'repository';\r\n// window.hashä¸­funcIdçå±æ§å\r\nconst FUNC_ID = 'funcId=';\r\nconst TAB_ID = 'tabId=';\r\n/**\r\n * ChangeItemService\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass ChangeItemService {\r\n\r\n  public top = top;\r\n  private funcId: string;\r\n  private tabId: string;\r\n  public itemChangePoster = new Subject<any>();\r\n  public itemChangeReceiver = new Subject<any>();\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private frameContext: FrameContext,\r\n    private notifyService: FormNotifyService,\r\n    private languageService: LanguageService\r\n  ) {\r\n  }\r\n\r\n  init() {\r\n    this.top['topMap'] = this.top['topMap'] || {};\r\n    this.changeItem = this.changeItem.bind(this);\r\n  }\r\n\r\n  setBykey(key: string, value: any) {\r\n    this.top['topMap'] = this.top['topMap'] || {};\r\n    this.top['topMap'][this.tabId] = this.top['topMap'][this.tabId] || {};\r\n    const topObject = this.top['topMap'][this.tabId];\r\n    topObject[key] = value;\r\n  }\r\n\r\n  getByKey(key: string) {\r\n    const topObject = this.top['topMap'][this.tabId] || {};\r\n    return topObject[key];\r\n  }\r\n\r\n  // å»ºç«iframeéä¿¡\r\n  setIframePoster() {\r\n    if (this.getByKey[POSTER]) {\r\n      return;\r\n    } else {\r\n      this.setBykey(POSTER, this.itemChangePoster);\r\n    }\r\n  }\r\n\r\n  getIframePoster() {\r\n    this.itemChangePoster = this.getByKey(RECEIVER);\r\n    this.setBykey(RECEIVER, this.itemChangeReceiver);\r\n  }\r\n\r\n  changeItem(type: string, id: string, parentId: string) {\r\n    // æ ¹æ®æ¯å¦æ¯å¼¹åºå¼å¡çåä¸åçtabId\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    const virtualRootComponent = virtualRootFrameContext.frameComponent;\r\n    const isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;\r\n    if (isDialogComponent) {\r\n      this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));\r\n    } else {\r\n      this.tabId = parentId;\r\n    }\r\n    this.itemChangeReceiver = this.getByKey(RECEIVER);\r\n    return Observable.create((subscriber: Subscriber<any>) => {\r\n      this.getNextItemByCurrentId(id, type).subscribe((result: any) => {\r\n        subscriber.next(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  // å¨liståå§åæ¶è°ç¨ï¼ç¼å­listçrepository\r\n  setRepository() {\r\n    if (window.location.hash.includes(TAB_ID)) {\r\n      this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));\r\n      this.setBykey(REPOSITORY, this.frameContext.repository);\r\n      this.setIframePoster();\r\n      this.getIframePoster();\r\n    }\r\n  }\r\n\r\n  // æ ¹æ®ç±»ååidè·åç¸é»çæ°æ®\r\n  getNextItemByCurrentId(currentId: string, type: string) {\r\n    const repository = this.getByKey(REPOSITORY);\r\n    const { pageSize, pageIndex, total } = repository.entityCollection.paginationInfo;\r\n    let currentIdx = null;\r\n    const list = repository.entityCollection.getAllEntities();\r\n    list.find((x: any, idx: string) => {\r\n      if (x.id === currentId) {\r\n        currentIdx = idx;\r\n      }\r\n    });\r\n    // æ²¡æå¨åè¡¨ä¸­æ¾å°æ°æ®ï¼è¿åç©º\r\n    if (currentIdx === null) {\r\n      // æ°å¢åæ¶å½åæ æ°æ®æ¶ç¹ä¸ä¸æ¡ä¸ä¸æ¡\r\n      if (list.length) {\r\n        switch (type) {\r\n          case 'prev':\r\n            return of(list[list.length - 1].id);\r\n            break;\r\n          case 'next':\r\n            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });\r\n            return of(null);\r\n            break;\r\n        }\r\n      }\r\n      return of(null);\r\n    }\r\n    let nextIdx = currentIdx;\r\n    switch (type) {\r\n      case 'prev':\r\n        // å½åé¡µç¬¬ä¸æ¡,ä¸éç¬¬ä¸é¡µ,åä¸ä¸é¡µæåä¸æ¡\r\n        if (currentIdx === 0 && pageIndex !== 1) {\r\n          return repository.getEntities([], [], pageSize, pageIndex - 1).pipe(\r\n            switchMap(result => {\r\n              nextIdx = pageSize - 1;\r\n              return of(result[nextIdx].id);\r\n            })\r\n          );\r\n        }\r\n        // ç¬¬ä¸é¡µç¬¬ä¸æ¡ï¼ä»è¿ååææ°æ®\r\n        else if (currentIdx === 0 && pageIndex === 1) {\r\n          this.notifyService.info(this.languageService.changeToFirst, { hideTitle: true });\r\n          return of(list[nextIdx].id);\r\n        }\r\n        // ä¸æ¯ç¬¬ä¸æ¡ï¼è¿åä¸ä¸æ¡\r\n        else {\r\n          nextIdx = currentIdx - 1;\r\n          return of(list[nextIdx].id);\r\n        }\r\n        break;\r\n      case 'next':\r\n        // è¶è¿å½åé¡µ\r\n        if (currentIdx + 1 + 1 > list.length) {\r\n          // ä¸éæåä¸æ¡æ°æ®,åä¸ä¸é¡µç¬¬ä¸æ¡æ°æ®\r\n          if (((pageIndex - 1) * pageSize + currentIdx + 1) < total) {\r\n            return repository.getEntities([], [], pageSize, pageIndex + 1).pipe(switchMap(result => {\r\n              return of(result[0].id);\r\n            }));\r\n          }\r\n          // æåä¸æ¡æ°æ®ï¼ä»è¿ååæ°æ®\r\n          else {\r\n            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });\r\n            return of(list[nextIdx].id);\r\n          }\r\n        } else {\r\n          nextIdx = currentIdx + 1;\r\n          return of(list[nextIdx].id);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { ChangeItemService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of, empty, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap, catchError } from 'rxjs/operators';\r\nimport { Repository, BindingData, Entity, ViewModel, BindingList, EntityPathConverter, BindingObject } from '@farris/devkit';\r\nimport { BefRepository, BefRepositoryUtil, BefDataPathUtil } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { CommandService } from '../command-service';\r\nimport { FilterConditionService } from '../filter-condition.service';\r\n// tslint:disable: no-string-literal max-line-length\r\n\r\n/**\r\n * åè¡¨ä»åºæå¡\r\n */\r\n@Injectable()\r\nclass ListDataService {\r\n\r\n  /**\r\n   * æé \r\n   * @param msgService msgService\r\n   * @param repository repository\r\n   * @param bindingData bindingData\r\n   * @param loadingService loadingService\r\n   * @param languageService languageService\r\n   * @param formNotifyService formNotifyService\r\n   * @param formErrorService formErrorService\r\n   * ! @param viewModel viewModel,vmæ¯åææ³¨å¥çï¼èè¡¨åè·åä¸å°ï¼ä¸å®è¦åéç©ºå¤æ­\r\n   * @param filterConditionService filterConditionService\r\n   */\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    private repository: Repository<any>,\r\n    private bindingData: BindingData,\r\n    private loadingService: FormLoadingService,\r\n    @Optional() private languageService: LanguageService,\r\n    private formNotifyService: FormNotifyService,\r\n    private formErrorService: FormErrorService,\r\n    private viewModel: ViewModel,\r\n    private filterConditionService: FilterConditionService,\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n\r\n    // if (!filterConditionService) {\r\n    //   this.filterConditionService = new FilterConditionService();\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * å è½½\r\n   */\r\n  public load(filter?: string, sort?: string): Observable<Entity[]> {\r\n\r\n    // åæ°å¤ç\r\n    filter = !filter ? '[]' : filter;\r\n    sort = !sort ? '[]' : sort;\r\n    // åå¹¶è¿æ»¤æ¡ä»¶\r\n    filter = this.mergeFilterConditions(filter);\r\n    // åå¹¶æåºæ¡ä»¶\r\n    sort = this.mergeSortConditions(sort);\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(200);\r\n    const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n          // è§¦åè¿ç«¯åè®¡äºä»¶\r\n          this.fireQueryEvent(filter);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * è¿æ»¤æ°æ®\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param sort æåºæ¡ä»¶\r\n   */\r\n  public filter(filter?: string, sort?: string): Observable<Entity[]> {\r\n    // åæ°å¤ç\r\n    filter = !filter ? '[]' : filter;\r\n    sort = !sort ? '[]' : sort;\r\n    // åå¹¶è¿æ»¤æ¡ä»¶\r\n    filter = this.mergeFilterConditions(filter);\r\n    // åå¹¶æåºæ¡ä»¶\r\n    sort = this.mergeSortConditions(sort);\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(200);\r\n    const query$ = this.repository.filter(JSON.parse(filter), JSON.parse(sort));\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n          // è§¦åè¿ç«¯åè®¡äºä»¶\r\n          this.fireQueryEvent(filter);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢\r\n   */\r\n  public query(filter: string, sort: string, pageSize: number, pageIndex: number): Observable<Entity[]> {\r\n    // åæ°å¤ç\r\n    filter = (filter === '') ? '[]' : filter;\r\n    sort = (sort === '') ? '[]' : sort;\r\n    // åå¹¶è¿æ»¤æ¡ä»¶\r\n    filter = this.mergeFilterConditions(filter);\r\n    // åå¹¶æåºæ¡ä»¶\r\n    sort = this.mergeSortConditions(sort);\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(5);\r\n    const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), pageSize, pageIndex);\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n          // è§¦åè¿ç«¯åè®¡äºä»¶\r\n          this.fireQueryEvent(filter);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.queryFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  public queryChild(filter: string, sort: string) {\r\n    // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;\r\n    // if (isUpdateWithPaging) {\r\n    //   return of(null);\r\n    // }\r\n    // tslint:disable-next-line: max-line-length\r\n    const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n    const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n    // debug\r\n    // tslint:disable-next-line: max-line-length\r\n    const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n    const bindingData = this.viewModel.bindingData;\r\n    let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n    nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n    // è·åä¸çº§å®ä½\r\n    const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n    const parentObject = bindingData.getValue(parentPaths) as BindingObject;\r\n    if (!parentObject) {\r\n      throw new Error('ä¸çº§å®ä½ä¸å­å¨');\r\n    }\r\n    this.viewModel.frameContext.appContext.params.delete(\"retrieveing\");\r\n    // const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n    const configPath = `/${nodeCode}`;\r\n    // const configPath = '/' + this.viewModel.bindingPath.substring(1, this.viewModel.bindingPath.length - 1);\r\n    this.viewModel.frameContext.appContext.params.set('queryChild', true);\r\n    const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);\r\n    const request$ = this.repository.queryChild(paths, pageIndex, pageSize);\r\n    return request$.pipe(\r\n      tap(() => { },\r\n        error => {\r\n          this.formErrorService.exception(this.languageService.queryFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * è¿½å ä¸æ¡æ°æ°æ®\r\n   */\r\n  public append(): Observable<Entity> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'append' });\r\n    }\r\n    const append$ = this.repository.append();\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.appendFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å½åè¡åæåæå¥æ°æ®\r\n   * @param position 1 | -1\r\n   */\r\n  public insert(position: 1 | -1 = -1) {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'insert' });\r\n    }\r\n    const append$ = this.repository.insert(position);\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.appendFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æäº¤åæ´ï¼æ¹éç¼è¾é¡µé¢ï¼è¡åæ¢æ¶æäº¤å¢éï¼\r\n   */\r\n  public updateChanges(): Observable<boolean> {\r\n    const update$ = this.repository.updateAllChanges();\r\n    return update$;\r\n  }\r\n\r\n  /**\r\n   * æ¹éä¿å­\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  public save(successMsg?: string): Observable<boolean> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'save' });\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const save$ = this.repository.applyChanges();\r\n    const result$ = save$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          if (successMsg && successMsg.trim()) {\r\n            this.formNotifyService.success(successMsg, { hideTitle: true });\r\n          } else {\r\n            this.formNotifyService.success(this.languageService.saveSuccess, { hideTitle: true });\r\n          }\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.multiSaveFailed, error);\r\n        }\r\n      )\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * å é¤\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  public remove(id: string, ifSave?: boolean, successMsg?: string, confirm: boolean = true): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'delete' });\r\n    }\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n    const action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : of(true);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n        ifSave = (ifSave === false) ? false : true;\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeById(id, ifSave);\r\n        if (!remove$) {\r\n          return empty();\r\n        }\r\n        return remove$.pipe(\r\n          tap(\r\n            () => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              if (successMsg && successMsg.trim()) {\r\n                this.formNotifyService.success(successMsg, { hideTitle: true });\r\n              } else {\r\n                this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n              }\r\n            },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          ),\r\n          switchMap(() => {\r\n            if (ifSave === true) {\r\n              // return this.load();\r\n              return of([]);\r\n            } else {\r\n              return empty();\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¹éå é¤\r\n   * @param ids ids\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   * @param deleteCurrentRowIfNoChecks æ²¡æå¾éæ¶å é¤å½åè¡\r\n   */\r\n  public removeRows(ids: string[], ifSave?: boolean | string, successMsg?: string, deleteCurrentRowIfNoChecks: boolean | string = false): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'removeRows' });\r\n    }\r\n    deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;\r\n    if (!ids || ids.length === 0) {\r\n      const currentId = this.bindingData.list.currentId;\r\n      if (deleteCurrentRowIfNoChecks === true && currentId) {\r\n        ids = [this.bindingData.list.currentId];\r\n      } else {\r\n        this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n        return empty();\r\n      }\r\n    }\r\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n        if (typeof ifSave === 'undefined') {\r\n          ifSave = true;\r\n        }\r\n        if (typeof ifSave === 'string') {\r\n          ifSave = ifSave.toLowerCase() === 'false' ? false : true;\r\n        }\r\n        ifSave = (ifSave === false) ? false : true;\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeByIds(ids, ifSave);\r\n\r\n        if (!remove$) {\r\n          return empty();\r\n        }\r\n\r\n        return remove$.pipe(\r\n          tap(\r\n            () => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              if (successMsg && successMsg.trim()) {\r\n                this.formNotifyService.success(successMsg, { hideTitle: true });\r\n              } else {\r\n                this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n              }\r\n              // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          ),\r\n          switchMap(() => {\r\n            return of([]);\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * å é¤åçå·æ°\r\n   */\r\n  public refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\r\n    if (this.viewModel && loadCmdName && loadCmdFrameId) {\r\n      const commandService = this.viewModel.frameContext.injector.get<CommandService>(CommandService, null);\r\n      return commandService.execute(loadCmdName, loadCmdFrameId);\r\n    }\r\n    return this.load();\r\n  }\r\n\r\n  /**\r\n   * å·æ°\r\n   * @param loadCmdName å·æ°å½ä»¤\r\n   * @param loadCmdFrameId å·æ°å½ä»¤æå¨çframeId\r\n   */\r\n  public refresh(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\r\n    if (this.viewModel && loadCmdName && loadCmdFrameId) {\r\n      const commandService = this.viewModel.frameContext.injector.get<CommandService>(CommandService, null);\r\n      return commandService.execute(loadCmdName, loadCmdFrameId);\r\n    }\r\n    return this.load();\r\n  }\r\n  /**\r\n   * åæ¶æ¶æ£æµæªä¿å­è®°å½\r\n   */\r\n  public cancel(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'cancel' });\r\n    }\r\n    // æ²¡æåæ´æ¶ç´æ¥åæ¶\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n    if (hasUnsavedData === false) {\r\n      return this._cancel();\r\n    }\r\n\r\n    const confirmResult$ = this.msgService.question(this.languageService['cancelWithoutSave']).pipe(\r\n      switchMap((ifCancel: boolean) => {\r\n        if (ifCancel === false) {\r\n          return EMPTY;\r\n        }\r\n\r\n        return this._cancel();\r\n      })\r\n    );\r\n\r\n    return confirmResult$;\r\n  }\r\n  /**\r\n   * è¿ååæ´é\r\n   * @description ä¸å¸¦åæ´æ£æµæç¤º\r\n   */\r\n  public revert(): Observable<any> {\r\n    return this._cancel();\r\n  }\r\n  /**\r\n   * åæ¶ï¼åé¨åæ¶ï¼\r\n   */\r\n  private _cancel(): Observable<any> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const cancel$ = this.repository.cancelChanges();\r\n    return cancel$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.cancelFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * è·åæ ¹ç»ä»¶appContext\r\n   */\r\n  private get messagePipe() {\r\n    if (this.viewModel && this.viewModel.frameContext) {\r\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * è§¦åæ¥è¯¢äºä»¶\r\n   * @param filters è¿æ»¤æ¡ä»¶\r\n   */\r\n  private fireQueryEvent(filters: any) {\r\n    const messagePipe = this.messagePipe;\r\n    // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;\r\n    if (messagePipe) {\r\n      messagePipe.next({ type: 'query' });\r\n    }\r\n  }\r\n  /**\r\n   * åå¹¶è¿æ»¤æ¡ä»¶\r\n   * @param filter è¡¨åè¿æ»¤æ¡ä»¶\r\n   */\r\n  private mergeFilterConditions(filter: any) {\r\n    if (typeof filter === 'string') {\r\n      filter = JSON.parse(filter) || [];\r\n    }\r\n    const filters: Array<any> = filter;\r\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\r\n    if (bindingPath) {\r\n      const originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];\r\n      // this.filterConditionService.getFilters(bindingPath) || [];\r\n      const conditions = Array.from(originalConditions);\r\n      if (conditions && conditions.length > 0) {\r\n        /*filters.forEach((item: any, index: number) => {\r\n          const field = item.FilterField || null;\r\n          if (field) {\r\n            const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);\r\n            if (duplicateIndex !== -1) {\r\n              filters[index] = conditions[duplicateIndex];\r\n              conditions.splice(duplicateIndex, 1);\r\n            }\r\n          }\r\n        });*/\r\n        // ä¿®æ¹å½ä»¤ä¸è¿æ»¤æ¡ä»¶çæåä¸ä¸ªæ¥è¯¢å³ç³»ä¸ºand\r\n        if (filters.length > 0) {\r\n          // æåä¸ä¸ªè¿æ»¤æ¡ä»¶\r\n          const lastFilter = filters[filters.length - 1];\r\n          if (lastFilter) {\r\n            if (lastFilter.hasOwnProperty('Relation')) {\r\n              delete lastFilter.Relation;\r\n            }\r\n            lastFilter.relation = 1;\r\n          }\r\n        }\r\n        // åå¹¶æ°çè¿æ»¤æ¡ä»¶ååæ¥å½ä»¤ä¸çè¿æ»¤æ¡ä»¶\r\n        filters.push(...conditions);\r\n      }\r\n    }\r\n\r\n    return JSON.stringify(filters);\r\n  }\r\n  /**\r\n   * åå¹¶æåºæ¡ä»¶\r\n   * @param sort æåºæ¡ä»¶\r\n   */\r\n  private mergeSortConditions(sort: any) {\r\n    if (typeof sort === 'string') {\r\n      sort = JSON.parse(sort) || [];\r\n    }\r\n    const sorts: Array<any> = sort;\r\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\r\n    if (bindingPath) {\r\n      // è·åå½åç»å®è·¯å¾çæææåºæ¡ä»¶\r\n      const originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, (direction) => {\r\n        if (direction === 'asc') {\r\n          return 0;\r\n        } else { return 1; }\r\n      }) || [];\r\n      const conditions = Array.from(originalConditions);\r\n      // å¦æå½åç»å®è·¯å¾ææåºæ¡ä»¶ï¼åå¿½ç¥å½ä»¤ä¸é¢å¶çæåºæ¡ä»¶\r\n      if (conditions && conditions.length > 0) {\r\n        // éåå·²æçè¿æ»¤æ¡ä»¶ï¼å¦ææéå¤çfieldï¼ç¨åèçè¦çå·²æç\r\n        /*sorts.forEach((item: any, index: number) => {\r\n          const field = item.SortField || null;\r\n          if (field) {\r\n            const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);\r\n            if (duplicateIndex !== -1) {\r\n              sorts[index] = conditions[duplicateIndex];\r\n              conditions.splice(duplicateIndex, 1);\r\n            }\r\n          }\r\n        });*/\r\n        return JSON.stringify(conditions);\r\n        // å°å¶ä½æåºæ¡ä»¶æ·»å å°æåºæ°ç»\r\n        // sorts.push(...conditions);\r\n      }\r\n    }\r\n    return JSON.stringify(sorts);\r\n  }\r\n}\r\nexport { ListDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, empty, of, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\nimport { BindingList, Repository, ViewModel } from '@farris/devkit';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\n\r\n/**\r\n * å­åè¡¨åæ°æå¡\r\n */\r\n@Injectable()\r\nclass SubListDataService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    private repository: Repository<any>,\r\n    private loadingService: FormLoadingService,\r\n    private viewModel: ViewModel,\r\n    @Optional() private languageService: LanguageService,\r\n    private formNotifyService: FormNotifyService,\r\n    private formErrorService: FormErrorService\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    this.viewModel = viewModel;\r\n  }\r\n\r\n  /**\r\n   * æ°å¢\r\n   */\r\n  add(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'add' });\r\n    }\r\n    const path = this.getPath();\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const append$ = this.repository.appendByPath(path);\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.addFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å¨æå®ä½ç½®æå¥\r\n   * @param position ä½ç½®\r\n   */\r\n  public insert(position: 1 | -1 = -1) {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'insert' });\r\n    }\r\n    const path = this.getPath();\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const append$ = this.repository.insertByPath(path, position);\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.addFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å é¤å­è¡¨æ°æ®\r\n   */\r\n  remove(id: string, successMsg?: string): Observable<any> {\r\n    const msg = successMsg ? successMsg : '';\r\n    return this.innerRemove(id, false, msg);\r\n  }\r\n\r\n  /**\r\n   * å é¤å­è¡¨æ°æ®ï¼ä¸ç¡®è®¤ï¼\r\n   */\r\n  removeWithoutConfirm(id: string): Observable<any> {\r\n    return this.innerRemove(id, true, '');\r\n  }\r\n\r\n  /**\r\n   * æ¹éå é¤å­è¡¨\r\n   * @param ids ids\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  removeChildrenByIds(ids: string, successMsg?: string): Observable<any> {\r\n    if (!ids) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return EMPTY;\r\n        }\r\n        const path = this.getPath();\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.batchRemoveByPath(path, ids);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * å é¤\r\n   */\r\n  innerRemove(id: string, isConfirm: boolean, successMsg: string): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'remove' });\r\n    }\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    let action$: Observable<boolean>;\r\n    if (isConfirm === false) {\r\n      action$ = this.msgService.question(this.languageService.confirmDeletion);\r\n    } else {\r\n      action$ = of(true);\r\n    }\r\n\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n        const path = this.getPath();\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeByPath(path, id);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * å é¤å¹¶ä¿å­\r\n   * @param id id\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  removeAndSave(id: string, successMsg?: string): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'removeAndSave' });\r\n    }\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\r\n      return empty();\r\n    }\r\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n\r\n        // å é¤å­è¡¨æ°æ®\r\n        const path = this.getPath();\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeByPath(path, id);\r\n\r\n        return remove$.pipe(\r\n\r\n          // æ§è¡ä¸»è¡¨ä¿å­\r\n          switchMap(() => {\r\n            const fid = this.viewModel.bindingData.list.currentId as string;\r\n            return this.repository.applyChangesById(fid);\r\n          }),\r\n\r\n          // éèå è½½ä¸­\r\n          tap(() => {\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * ä¸ç§»æä¸ç§»æ°æ®\r\n   * @param direction æ¹åï¼up | down\r\n   * @param field æåºå­æ®µ\r\n   * @param targets è¦ç§»å¨çæ°æ®\r\n   * @description\r\n   * ä½¿ç¨è¯¥æ¹æ³æ¶æåºå­æ®µå¿é¡»æå¼ï¼å¦åæ æ³æåº\r\n   */\r\n  public move(direction: string | 'up' | 'down', field: string, targets: Array<any> | string) {\r\n    if (!targets) {\r\n      return;\r\n    }\r\n    if (typeof targets === 'string') {\r\n      targets = targets.split(',').filter(p => p);\r\n    }\r\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\r\n    if (!bindingPath) {\r\n      return;\r\n    }\r\n    const bindingList = this.viewModel.bindingData.getList() as BindingList;\r\n    if (!bindingList || bindingList.length < 1) {\r\n      return;\r\n    }\r\n    targets.forEach((target) => {\r\n      const index = bindingList.getIndexById(target);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      const item = bindingList.findById(target);\r\n      const position = item.getValue(field);\r\n      const base = direction === 'up'  ? -1 : 1;\r\n      // å¾äº¤æ¢çè¡ä¿¡æ¯\r\n      const exchangeRowIndex = index + base;\r\n      if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {\r\n        // ç¬¬ä¸è¡æ æ³ä¸ç§»ï¼æåä¸è¡æ æ³ä¸ç§»\r\n        return;\r\n      }\r\n      const exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);\r\n      const exchangeRow = bindingList.findById(exchangeRowId);\r\n      const exchangeRowPosition = exchangeRow[field];\r\n      // ç§»å¨è¡åäº¤æ¢è¡é½æ²¡ææåº\r\n      if (this.isNullOrEmpty(position) && this.isNullOrEmpty(exchangeRowPosition)) {\r\n        return;\r\n      }\r\n      bindingList.swapById(target, exchangeRowId);\r\n      exchangeRow.setValue(field, position,true,true);\r\n      item.setValue(field, exchangeRowPosition,true,true);\r\n    });\r\n\r\n  }\r\n  private isNullOrEmpty(value: any) {\r\n    return value === '' || value === null || value === undefined;\r\n  }\r\n  /**\r\n   * è·åå®æ´è·¯å¾\r\n   * @todoï¼å¼ºè¯å«å°ä»è¡¨è¿ä¸çº§\r\n   * fixed by justin: æ ¹æ®bindingPathï¼å¦ææ¯ä»ä»è¡¨ï¼éè¦è·åä¸»è¡¨æ°æ®idåä»è¡¨æ°æ®id\r\n   */\r\n  private getPath(): string {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\r\n    let path = '/' + rid;\r\n\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = this.viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n  /**\r\n   * è·åæ ¹ç»ä»¶appContext\r\n   */\r\n  private get messagePipe() {\r\n    if (this.viewModel && this.viewModel.frameContext) {\r\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\nexport { SubListDataService };\r\n","\r\nimport { Entity, FrameContext, BindingData } from '@farris/devkit';\r\nimport { BefRepository, BefRestService } from '@farris/bef';\r\n\r\n/**\r\n * åºç¡æ°æ®æå¡\r\n */\r\nclass BaseDataService {\r\n\r\n  /**\r\n   * æ¡æ¶ä¸ä¸æ\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  protected get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  /**\r\n   * Restæå¡\r\n   */\r\n  protected get restService(): BefRestService {\r\n    return this.repository.restService;\r\n  }\r\n\r\n  /**\r\n   * æ°æ®ç»å®\r\n   */\r\n  protected get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(frameContext: FrameContext) {\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n}\r\n\r\nexport { BaseDataService };\r\n","import { BindingData, BindingList } from '@farris/devkit';\r\n\r\n/**\r\n * æ æ°æ®çå¸®å©ç±»\r\n */\r\nclass ParentTreeNodeUtil {\r\n\r\n  /**\r\n   * éä¸­ç¬¬ä¸ä¸ªæ ¹èç¹\r\n   */\r\n  public selectFirstRootNode(bindingData: BindingData, hierarchyInfoKey: string) {\r\n\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);\r\n  }\r\n  public selectNodeByBindingList(bindingList: BindingList, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingList.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n    setTimeout(() => {\r\n      bindingList.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n  /**\r\n   * éä¸­èç¹\r\n   */\r\n  public selectedNode(bindingData: BindingData, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n    if (bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      bindingData.list.currentId = null;\r\n      bindingData.list.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦æå­èç¹\r\n   */\r\n  public hasChildNodes(treeNodesData: any[], hierarchyInfoKey: string, fid: string): boolean {\r\n    const fNodeData = this.getNodeDataById(treeNodesData, fid);\r\n    // const fLayer = fNodeData[hierarchyInfoKey]['layer'];\r\n    const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];\r\n\r\n    // éæç»èç¹ï¼è¿åtrue\r\n    if (fIsDetail === false) {\r\n      return true;\r\n    }\r\n    return false;\r\n\r\n    // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fid);\r\n    // return childNodesData.length > 0;\r\n  }\r\n\r\n  /**\r\n   * è·åæ ¹èç¹ï¼å¤ä¸ªæ ¹èç¹æ¶è·åç¬¬ä¸ä¸ªï¼\r\n   * @return æ¾ä¸å°æ¶è¿ånull\r\n   */\r\n  private getFirstNodeId(treeNodesData: any[], hierarchyInfoKey: string): string {\r\n    let rootData = treeNodesData.find((itemData: any) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      return layer === 1;\r\n    });\r\n    if (!rootData) {\r\n      const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);\r\n      rootData = treeNodesData.find((itemData: any) => {\r\n        const layer = itemData[hierarchyInfoKey]['layer'];\r\n        return layer === rootLayer;\r\n      });\r\n    }\r\n    return rootData ? rootData['id'] : '';\r\n  }\r\n  private getRootLayer(treeNodesData: any[], hierarchyInfoKey: string) {\r\n    let layer = null;\r\n    if (treeNodesData && Array.isArray(treeNodesData)) {\r\n      const layers = treeNodesData.map(item => {\r\n        const layer = item[hierarchyInfoKey]['layer'];\r\n        return layer;\r\n      });\r\n      const minLayer = Math.min.apply(Math, layers);\r\n      if (!isNaN(minLayer)) {\r\n        layer = minLayer;\r\n      }\r\n    }\r\n    return layer;\r\n  }\r\n  /**\r\n   * è·åä¸ä¸ä¸ªèç¹ï¼å é¤åï¼\r\n   */\r\n  public getNextNodeId(treeNodesData: any[], hierarchyInfoKey: string, currentId: string): string {\r\n\r\n    // å½åèç¹ä¿¡æ¯\r\n    const currentNodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n    const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];\r\n\r\n    // ç¶èç¹ä¿¡æ¯\r\n    const fLayer = currentLayer - 1;\r\n    const fParentElement = currentNodeData[hierarchyInfoKey]['parentElement'];\r\n\r\n    // æ¥æ¾åå¼èç¹\r\n    const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement);\r\n\r\n    // å¦ææ²¡æåå¼èç¹ï¼åä¸æ¥æ¾\r\n    if (siblingtreeNodesData.length === 1) {\r\n      const parentData = treeNodesData.find((itemData: any) => {\r\n        return itemData['id'] === fParentElement;\r\n      });\r\n\r\n      // å­å¨ç¶èç¹ï¼åè®¾ç½®ç¶èç¹ï¼\r\n      // ä¸å­å¨ç¶èç¹ï¼åè®¾ç½®ç¬¬ä¸ä¸ªæ ¹èç¹ã\r\n      if (!parentData) {\r\n        return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n      }\r\n      return parentData['id'];\r\n    } else {\r\n      return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åä¸ä¸ªåå¼èç¹çid\r\n   */\r\n  public getNextSiblingNodeId(siblingtreeNodesData: any[], currentId: string): string {\r\n    if (siblingtreeNodesData.length <= 1) {\r\n      return '';\r\n    }\r\n\r\n    const currentIndex = siblingtreeNodesData.findIndex((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n\r\n    // æåä¸è¡ä¸ç§»ä¸è¡ï¼å¶ä»ä¸ç§»ä¸è¡\r\n    let nextIndex = -1;\r\n    if (currentIndex === siblingtreeNodesData.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n\r\n    return siblingtreeNodesData[nextIndex]['id'];\r\n  }\r\n\r\n  /**\r\n   * è·åä¸çº§èç¹çBindingObjectséå\r\n   */\r\n  public getChildNodesData(treeNodesData: any[], hierarchyInfoKey: string, fLayer: number, fParentElement: string): any[] {\r\n    const childtreeNodesData = treeNodesData.filter((itemData) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      const parentElement = itemData[hierarchyInfoKey]['parentElement'];\r\n      return (layer === fLayer + 1) && fParentElement == parentElement;\r\n    });\r\n    return childtreeNodesData;\r\n  }\r\n\r\n  /**\r\n   * è·åidè·åèç¹æ°æ®\r\n   */\r\n  public getNodeDataById(treeNodesData: any[], id: string): any {\r\n    const nodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === id;\r\n    });\r\n    return nodeData ? nodeData : null;\r\n  }\r\n}\r\n\r\nexport { ParentTreeNodeUtil };\r\n","import { BindingData, BindingList } from '@farris/devkit';\r\n\r\n/**\r\n * æ æ°æ®çå¸®å©ç±»\r\n */\r\nclass PathTreeNodeUtil {\r\n\r\n  /**\r\n   * éä¸­ç¬¬ä¸ä¸ªæ ¹èç¹\r\n   */\r\n  public selectFirstRootNode(bindingData: BindingData, hierarchyInfoKey: string) {\r\n\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);\r\n  }\r\n  public selectNodeByBindingList(bindingList: BindingList, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingList.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      bindingList.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n  /**\r\n   * éä¸­èç¹\r\n   */\r\n  public selectedNode(bindingData: BindingData, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n    if (bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      bindingData.list.currentId = null;\r\n      bindingData.list.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦æå­èç¹\r\n   */\r\n  public hasChildNodes(treeNodesData: any[], hierarchyInfoKey: string, fid: string): boolean {\r\n    const fNodeData = this.getNodeDataById(treeNodesData, fid);\r\n    // const fLayer = fNodeData[hierarchyInfoKey]['layer'];\r\n    // const fPath  = fNodeData[hierarchyInfoKey]['path'];\r\n    const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];\r\n\r\n    // éæç»èç¹ï¼è¿åtrue\r\n    if (fIsDetail === false) {\r\n      return true;\r\n    }\r\n    return false;\r\n    // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);\r\n    // return childNodesData.length > 0;\r\n  }\r\n\r\n  /**\r\n   * è·åæ ¹èç¹ï¼å¤ä¸ªæ ¹èç¹æ¶è·åç¬¬ä¸ä¸ªï¼\r\n   * @return æ¾ä¸å°æ¶è¿ånull\r\n   */\r\n  private getFirstNodeId(treeNodesData: any[], hierarchyInfoKey: string): string {\r\n    let rootData = treeNodesData.find((itemData: any) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      return layer === 1;\r\n    });\r\n    if (!rootData) {\r\n      const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);\r\n      rootData = treeNodesData.find((itemData: any) => {\r\n        const layer = itemData[hierarchyInfoKey]['layer'];\r\n        return layer === rootLayer;\r\n      });\r\n    }\r\n    return rootData ? rootData['id'] : '';\r\n  }\r\n  private getRootLayer(treeNodesData: any[], hierarchyInfoKey: string) {\r\n    let layer = null;\r\n    if (treeNodesData && Array.isArray(treeNodesData)) {\r\n      const layers = treeNodesData.map(item => {\r\n        const layer = item[hierarchyInfoKey]['layer'];\r\n        return layer;\r\n      });\r\n      const minLayer = Math.min.apply(Math, layers);\r\n      if (!isNaN(minLayer)) {\r\n        layer = minLayer;\r\n      }\r\n    }\r\n    return layer;\r\n  }\r\n  /**\r\n   * è·åä¸ä¸ä¸ªèç¹ï¼å é¤åï¼\r\n   */\r\n  public getNextNodeId(treeNodesData: any[], hierarchyInfoKey: string, currentId: string): string {\r\n\r\n    // å½åèç¹ä¿¡æ¯\r\n    const currentNodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n    const currentPath = currentNodeData[hierarchyInfoKey]['path'];\r\n    const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];\r\n\r\n    // ç¶èç¹ä¿¡æ¯\r\n    const fLayer = currentLayer - 1;\r\n    const fPath = currentPath.substring(0, currentPath.length - 4);\r\n\r\n    // æ¥æ¾åå¼èç¹\r\n    const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);\r\n\r\n    // å¦ææ²¡æåå¼èç¹ï¼åä¸æ¥æ¾\r\n    if (siblingtreeNodesData.length === 1) {\r\n      const parentData = treeNodesData.find((itemData: any) => {\r\n        return itemData[hierarchyInfoKey]['path'] === fPath;\r\n      });\r\n\r\n      // å­å¨ç¶èç¹ï¼åè®¾ç½®ç¶èç¹ï¼\r\n      // ä¸å­å¨ç¶èç¹ï¼åè®¾ç½®ç¬¬ä¸ä¸ªæ ¹èç¹ã\r\n      if (!parentData) {\r\n        return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n      }\r\n      return parentData['id'];\r\n    } else {\r\n      return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åä¸ä¸ªåå¼èç¹çid\r\n   */\r\n  public getNextSiblingNodeId(siblingtreeNodesData: any[], currentId: string): string {\r\n    if (siblingtreeNodesData.length <= 1) {\r\n      return '';\r\n    }\r\n\r\n    const currentIndex = siblingtreeNodesData.findIndex((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n\r\n    // æåä¸è¡ä¸ç§»ä¸è¡ï¼å¶ä»ä¸ç§»ä¸è¡\r\n    let nextIndex = -1;\r\n    if (currentIndex === siblingtreeNodesData.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n\r\n    return siblingtreeNodesData[nextIndex]['id'];\r\n  }\r\n\r\n  /**\r\n   * è·åä¸çº§èç¹çBindingObjectséå\r\n   */\r\n  public getChildNodesData(treeNodesData: any[], hierarchyInfoKey: string, fLayer: number, fPath: string): any[] {\r\n    const childtreeNodesData = treeNodesData.filter((itemData) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      const path = itemData[hierarchyInfoKey]['path'];\r\n      return (layer === fLayer + 1) && path.startsWith(fPath);\r\n    });\r\n    return childtreeNodesData;\r\n  }\r\n\r\n  /**\r\n   * è·åidè·åèç¹æ°æ®\r\n   */\r\n  public getNodeDataById(treeNodesData: any[], id: string): any {\r\n    const nodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === id;\r\n    });\r\n    return nodeData ? nodeData : null;\r\n  }\r\n}\r\n\r\nexport { PathTreeNodeUtil };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 14:12:39 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-05-30 16:18:47\r\n */\r\nimport { ParentTreeNodeUtil } from './parent-tree.util';\r\nimport { PathTreeNodeUtil } from './path-tree.util';\r\n\r\nexport class TreeUtilFactory {\r\n  static getInstance(treeType: string) {\r\n    let util = null;\r\n    switch (treeType) {\r\n      case 'path':\r\n        util = new PathTreeNodeUtil();\r\n        break;\r\n      case 'parent':\r\n        util = new ParentTreeNodeUtil();\r\n        break;\r\n      default: break;\r\n    }\r\n    return util;\r\n  }\r\n}","import { HttpHeaders } from '@angular/common/http';\r\nimport { of, Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Entity, FieldMetadataUtil, FrameContext, Repository } from '@farris/devkit';\r\nimport { ResponseInfo, BefRepository } from '@farris/bef';\r\n\r\n/**\r\n * ç¶å­æ ä»åº\r\n */\r\nclass ParentTreeRepository {\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addSibling(repository: BefRepository<Entity>, id: string): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSiblingUri = `${baseUri}/service/parenthierarchycreatesibling`;\r\n    const body = {\r\n      dataID: id,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addChild(repository: BefRepository<Entity>, parentId: string) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addChildUri = `${baseUri}/service/parenthierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      dataID: parentId,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å å­è¡¨åå¼èç¹\r\n   */\r\n  public addSubSibling(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubSiblingUri = `${baseUri}/service/childnodeparenthierarchycreatesibling`;\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let path = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å å­è¡¨å­èç¹\r\n   */\r\n  public addSubChild(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubChildUri = `${baseUri}/service/childnodeparenthierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let paths = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getPaths(nodes: string[], ids: string[]) {\r\n    let paths = '';\r\n    if (nodes && nodes.length > 0 && ids && ids.length > 0) {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        if (nodes[i]) {\r\n          paths = paths + `/${ids[i]}`;\r\n          paths = paths + `/${nodes[i]}s`;\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * å è½½ç¶èç¹\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadByParentId(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, filters: any[], sorts: any[], frozenCurrentRow: boolean = false, pagination?: { pageSize: number, pageIndex: number }, frameContext?: FrameContext, reload: boolean = false): Observable<Entity[]> {\r\n    const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);\r\n    if (localEntities && localEntities.length > 0 && !reload) {\r\n      return of(localEntities);\r\n    }\r\n    const restService = repository.restService;\r\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);\r\n    const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);\r\n    const isUsePagination = pagination && pagination.pageSize > 0 || false;\r\n    // ç»ç»EntityFilter\r\n    const entityFilter = {\r\n      FilterConditions: filtersWithParent,\r\n      SortConditions: sorts,\r\n      IsUsePagination: isUsePagination,\r\n      Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }\r\n    };\r\n    const requestInfo = restService.buildRequestInfo();\r\n    return restService.extendQuery(entityFilter, requestInfo).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const paginationInfo = this.getPaginationInfo(responseInfo);\r\n        if (parentId) {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);\r\n          }\r\n        } else {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\r\n          }\r\n        }\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities);\r\n        } else {\r\n          repository.entityCollection.addEntities(entities);\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadFullTree(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, propertyName: string, fullTreeType: string, loadType: string, filters?: any[], context?: any): Observable<Entity[]> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const queryUrl = `${baseUri}/service/parentidfulltreequery`;\r\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const entityFilter = this.buildEntityFilter(filters, null, 0, 0);\r\n\r\n    const body = {\r\n      dataId: parentId || '',\r\n      isUsePagination: false,\r\n      virtualPropertyName: propertyName,\r\n      pagination: {},\r\n      fullTreeType,\r\n      loadType,\r\n      filter: entityFilter,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(queryUrl, 'PUT', null, options).pipe(\r\n      tap((responseInfo: ResponseInfo) => {\r\n        // ä¿å­å±å¼çèç¹\r\n        if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {\r\n          const frameContext = context.frameContext as FrameContext;\r\n          const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;\r\n          if (virtualRootFrameContext) {\r\n            const list = responseInfo.returnValue.result as any[];\r\n            const selectedRowId = responseInfo.returnValue.selectedRowId;\r\n            // ä»é¡¶å±å¼å§è®¡ç®ææéè¦å±å¼çèç¹\r\n            const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);\r\n            const hierarchyInfo = leafNodeInfo[hierarchyInfoKey] as { isDetail: boolean, layer: number, parentElement: string };\r\n            const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);\r\n            virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));\r\n            virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);\r\n            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);\r\n          }\r\n        }\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const frozenCurrentRow = context && context.frozenCurrentRow || false;\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities);\r\n        } else {\r\n          repository.entityCollection.addEntities(entities);\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æå¥å¯¹ç¶èç¹çè¿æ»¤\r\n   */\r\n  public buildFiltersWithParent(originalHierarchyInfoKey: string, parentHierarchyInfo: any, filterArray: any[]): any {\r\n    const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;\r\n    const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;\r\n    const parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';\r\n\r\n    const parentFilterArray = [\r\n      {\r\n        \"FilterField\": `${originalHierarchyInfoKey}.Layer`,\r\n        \"Value\": parentLayer + 1,\r\n        \"Lbracket\": null,\r\n        \"Rbracket\": null,\r\n        \"Relation\": 1,\r\n        \"Expresstype\": 0,\r\n        \"Compare\": 0\r\n      }\r\n    ];\r\n    if (parentElement) {\r\n      parentFilterArray.push(\r\n        {\r\n          \"FilterField\": `${originalHierarchyInfoKey}.ParentElement`,\r\n          \"Value\": parentElement,\r\n          \"Lbracket\": null,\r\n          \"Rbracket\": null,\r\n          \"Relation\": relationType,\r\n          \"Expresstype\": 0,\r\n          \"Compare\": 0\r\n        }\r\n      );\r\n    } else {\r\n      parentFilterArray[0].Relation = relationType;\r\n    }\r\n    return parentFilterArray.concat(filterArray);\r\n  }\r\n  public buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n\r\n    // @todoï¼ä¸´æ¶å¼å®¹èä»£ç ï¼éä½æ¹å¨å¸¦æ¥çé£é©\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n    if (!filter) {\r\n      filter = [];\r\n    }\r\n    if (!sort) {\r\n      sort = [];\r\n    }\r\n    // çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].Relation = 0;\r\n    }\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * æ¸ç©ºåä»£å®ä½\r\n   * @description parentHierarchyInfoä¸­layerä¸ºè¦æ¸ç©ºåä»£èç¹çlayerï¼ä½éé¢çparentElementä¸æ¯ç¶çº§çidï¼èæ¯è¦æ¸ç©ºåä»£èç¹çid\r\n   */\r\n  public clearDescendantEntities(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any, frozenCurrentRow: boolean = false): void {\r\n    // æ¸ç©ºæ ¹èç¹\r\n    if (!parentHierarchyInfo) {\r\n      repository.entityCollection.clear();\r\n      return;\r\n    }\r\n    const nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);\r\n    if (frozenCurrentRow) {\r\n      repository.entityCollection.removeEntities((entity: Entity) => {\r\n        const id = entity[entity.primaryKey];\r\n        return nodes.includes(id);\r\n      });\r\n    } else {\r\n      repository.entityCollection.removeData((entity: Entity) => {\r\n        const id = entity[entity.primaryKey];\r\n        return nodes.includes(id);\r\n      });\r\n    }\r\n\r\n  }\r\n  /**\r\n   * è·åæä¸ªèç¹çææå­èç¹\r\n   * @param repository repository\r\n   * @param hierarchyInfokey hierarchyInfokey\r\n   * @param parentHierarchyInfo parentHierarchyInfo\r\n   */\r\n  private getChildNodes(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any) {\r\n    const fparentElement = parentHierarchyInfo.id;\r\n    const flayer = parentHierarchyInfo.layer;\r\n    let nodes = [];\r\n    repository.entityCollection.getAllEntities().forEach(entity => {\r\n      const hierarchyInfo = entity[hierarchyInfokey];\r\n      const parentElement = hierarchyInfo.parentElement;\r\n      const layer = hierarchyInfo.layer;\r\n      const result = layer >= (flayer + 1) && parentElement === fparentElement;\r\n      if (result) {\r\n        const id = entity[entity.primaryKey];\r\n        nodes.push(id);\r\n        const childHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfokey, id);\r\n        const childs = this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);\r\n        if (childs && childs.length > 0) {\r\n          nodes = nodes.concat(childs);\r\n        }\r\n      }\r\n    });\r\n    return nodes;\r\n  }\r\n  /**\r\n   * è·åå®ä½çåçº§ä¿¡æ¯\r\n   */\r\n  public getHierarchyInfoById(repository: BefRepository<Entity>, hierarchyInfokey: string, id: string): any {\r\n    if (!id) {\r\n      return null;\r\n    }\r\n    const entity: Entity = repository.entityCollection.getEntityById(id);\r\n    const hierarchyInfoEntity: Entity = entity[hierarchyInfokey];\r\n    const result = hierarchyInfoEntity.toJSON();\r\n    result['id'] = id;\r\n    return result;\r\n  }\r\n  public getHierarchyInfo(entity: Entity, hierarchyInfokey: string): { parentElement: string, layer: number, isDetail: boolean } {\r\n    return entity[hierarchyInfokey];\r\n  }\r\n  /**\r\n   * è·ååçº§ç çåå§çå­æ®µå\r\n   */\r\n  public getOriginalHierarchyInfoKey(repository: BefRepository<Entity>, hierarchyInfokey: string): string {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);\r\n    const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];\r\n    return hierarchyInfoNgObject.originalDataField as string;\r\n  }\r\n  private getPaginationInfo(responseInfo: ResponseInfo) {\r\n    return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;\r\n  }\r\n  private findParent(hierarchyInfo: { isDetail: boolean, layer: number, parentElement: string }, list: any[], hierarchyInfoKey: string) {\r\n    return list.find(item => {\r\n      const currentHierarchyInfo = item[hierarchyInfoKey] as { isDetail: boolean, layer: number, parentElement: string };\r\n      return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;\r\n    });\r\n  }\r\n  private getAllParentIds(hierarchyInfo: { isDetail: boolean, layer: number, parentElement: string }, list: any[], hierarchyInfoKey: string, repository: Repository<any>) {\r\n    let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);\r\n    const ids = [];\r\n    while (item) {\r\n      ids.push(item[repository.primaryKey]);\r\n      item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);\r\n    }\r\n    return ids;\r\n  }\r\n  /**\r\n   * æ¥æ¾èç¹ä¸ææå­çº§ï¼ç¬¬ä¸çº§ï¼\r\n   * @param repository repository\r\n   * @param hierarchyInfoKey åçº§ç å­æ®µ\r\n   * @param id id\r\n   * @returns \r\n   */\r\n  private getChildren(repository: BefRepository<Entity>, hierarchyInfoKey: string, id: string): Entity[] {\r\n    const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);\r\n    if (!hierarchyInfo) {\r\n      return null;\r\n    }\r\n    const layer = hierarchyInfo.layer;\r\n    const parentElement = hierarchyInfo.parentElement;\r\n    const entities: Entity[] = repository.entityCollection.getEntities((entity: Entity) => {\r\n      const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);\r\n      const matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);\r\n      if (matched) {\r\n        return entity;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    return entities;\r\n  }\r\n}\r\n\r\nexport { ParentTreeRepository };\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Entity, FieldMetadataUtil, FrameContext, Repository } from '@farris/devkit';\r\nimport { ResponseInfo, BefRepository } from '@farris/bef';\r\n\r\n/**\r\n * è·¯å¾æ ä»åº\r\n */\r\nclass PathTreeRepository {\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addSibling(repository: BefRepository<Entity>, id: string): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSiblingUri = `${baseUri}/service/pathhierarchycreatesibling`;\r\n    const body = {\r\n      dataID: id,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addChild(repository: BefRepository<Entity>, parentId: string) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addChildUri = `${baseUri}/service/pathhierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      dataID: parentId,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å å­è¡¨åå¼èç¹\r\n   */\r\n  public addSubSibling(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubSiblingUri = `${baseUri}/service/childnodepathhierarchycreatesibling`;\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let path = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n  * æ·»å å­è¡¨å­èç¹\r\n  */\r\n  public addSubChild(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubChildUri = `${baseUri}/service/childnodepathhierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let path = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getPaths(nodes: string[], ids: string[]) {\r\n    let paths = '';\r\n    if (nodes && nodes.length > 0 && ids && ids.length > 0) {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        if (nodes[i]) {\r\n          paths = paths + `/${ids[i]}`;\r\n          paths = paths + `/${nodes[i]}s`;\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * å è½½ç¶èç¹\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadByParentId(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, filters: any[], sorts: any[], frozenCurrentRow: boolean = false, pagination?: { pageSize: number, pageIndex: number }, frameContext?: FrameContext, reload: boolean = false): Observable<Entity[]> {\r\n    const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);\r\n    if (localEntities && localEntities.length > 0 && !reload) {\r\n      return of(localEntities);\r\n    }\r\n    const restService = repository.restService;\r\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);\r\n    const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);\r\n    const isUsePagination = pagination && pagination.pageSize > 0 || false;\r\n    // ç»ç»EntityFilter\r\n    const entityFilter = {\r\n      FilterConditions: filtersWithParent,\r\n      SortConditions: sorts,\r\n      IsUsePagination: isUsePagination,\r\n      Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }\r\n    };\r\n    const requestInfo = restService.buildRequestInfo();\r\n    return restService.extendQuery(entityFilter, requestInfo).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const paginationInfo = this.getPaginationInfo(responseInfo);\r\n        if (parentId) {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);\r\n          }\r\n        } else {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\r\n          }\r\n        }\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities);\r\n        } else {\r\n          repository.entityCollection.addEntities(entities);\r\n        }\r\n\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadFullTree(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, propertyName: string, fullTreeType: string, loadType: string, filters?: any[], context?: any): Observable<Entity[]> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const queryUrl = `${baseUri}/service/parentidfulltreequery`;\r\n    const pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const entityFilter = this.buildEntityFilter(filters, null, 0, 0);\r\n    const body = {\r\n      dataId: parentId || '',\r\n      isUsePagination: false,\r\n      virtualPropertyName: propertyName,\r\n      pagination: {},\r\n      fullTreeType,\r\n      loadType,\r\n      filter: entityFilter,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(queryUrl, 'PUT', null, options).pipe(\r\n      tap((responseInfo: ResponseInfo) => {\r\n        // ä¿å­å±å¼çèç¹\r\n        if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {\r\n          const frameContext = context.frameContext as FrameContext;\r\n          const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;\r\n          if (virtualRootFrameContext) {\r\n            const list = responseInfo.returnValue.result as any[];\r\n            const selectedRowId = responseInfo.returnValue.selectedRowId;\r\n            // ä»é¡¶å±å¼å§è®¡ç®ææéè¦å±å¼çèç¹\r\n            const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);\r\n            const hierarchyInfo = leafNodeInfo[hierarchyInfoKey] as { isDetail: boolean, layer: number, path: string };\r\n            const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);\r\n            virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));\r\n            virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);\r\n            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);\r\n          }\r\n        }\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const frozenCurrentRow: boolean = context && context.frozenCurrentRow || false;\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities);\r\n        } else {\r\n          repository.entityCollection.addEntities(entities);\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æå¥å¯¹ç¶èç¹çè¿æ»¤\r\n   */\r\n  public buildFiltersWithParent(originalHierarchyInfoKey: string, parentHierarchyInfo: any, filterArray: any[]): any {\r\n    const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;\r\n\r\n    const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;\r\n    const parentFilterArray = [\r\n      {\r\n        \"FilterField\": `${originalHierarchyInfoKey}.Layer`,\r\n        \"Value\": parentLayer + 1,\r\n        \"Lbracket\": null,\r\n        \"Rbracket\": null,\r\n        \"Relation\": 1,\r\n        \"Expresstype\": 0,\r\n        \"Compare\": 0\r\n      }\r\n    ];\r\n\r\n    // ç¶è·¯å¾è¿æ»¤ï¼å¦æä¸ºç©ºï¼åä¸æ·»å ï¼å¼å®¹oracleåæ°ï¼\r\n    const parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';\r\n    if (parentPath) {\r\n      parentFilterArray.push({\r\n        \"FilterField\": `${originalHierarchyInfoKey}.Path`,\r\n        \"Value\": parentPath,\r\n        \"Lbracket\": null,\r\n        \"Rbracket\": null,\r\n        \"Relation\": relationType,\r\n        \"Expresstype\": 0,\r\n        \"Compare\": 7\r\n      });\r\n    } else {\r\n      parentFilterArray[0].Relation = relationType;\r\n    }\r\n\r\n    return parentFilterArray.concat(filterArray);\r\n  }\r\n  public buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n\r\n    // @todoï¼ä¸´æ¶å¼å®¹èä»£ç ï¼éä½æ¹å¨å¸¦æ¥çé£é©\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n    if (!filter) {\r\n      filter = [];\r\n    }\r\n    if (!sort) {\r\n      sort = [];\r\n    }\r\n    // çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].Relation = 0;\r\n    }\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * æ¸ç©ºåä»£å®ä½\r\n   */\r\n  public clearDescendantEntities(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any, frozenCurrentRow: boolean = false): void {\r\n\r\n    // æ¸ç©ºæ ¹èç¹\r\n    if (!parentHierarchyInfo) {\r\n      repository.entityCollection.clear();\r\n      return;\r\n    }\r\n    const fPath = parentHierarchyInfo.path;\r\n    const fLayer = parentHierarchyInfo.layer;\r\n    if (frozenCurrentRow) {\r\n      repository.entityCollection.removeData((entity: Entity) => {\r\n        const hierarchyInfo = entity[hierarchyInfokey];\r\n        const path = hierarchyInfo.path;\r\n        const layer = hierarchyInfo.layer;\r\n        return layer > fLayer && path.startsWith(fPath);\r\n      });\r\n    } else {\r\n      repository.entityCollection.removeEntities((entity: Entity) => {\r\n        const hierarchyInfo = entity[hierarchyInfokey];\r\n        const path = hierarchyInfo.path;\r\n        const layer = hierarchyInfo.layer;\r\n        return layer > fLayer && path.startsWith(fPath);\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä½çåçº§ä¿¡æ¯\r\n   */\r\n  public getHierarchyInfoById(repository: BefRepository<Entity>, hierarchyInfokey: string, id: string): any {\r\n    if (!id) {\r\n      return null;\r\n    }\r\n    const entity: Entity = repository.entityCollection.getEntityById(id);\r\n    const hierarchyInfoEntity: Entity = entity[hierarchyInfokey];\r\n    return hierarchyInfoEntity.toJSON();\r\n  }\r\n\r\n  /**\r\n   * è·ååçº§ç çåå§çå­æ®µå\r\n   */\r\n  public getOriginalHierarchyInfoKey(repository: BefRepository<Entity>, hierarchyInfokey: string): string {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);\r\n    const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];\r\n    return hierarchyInfoNgObject.originalDataField as string;\r\n  }\r\n  private getPaginationInfo(responseInfo: ResponseInfo) {\r\n    return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;\r\n  }\r\n  private findParent(hierarchyInfo: { isDetail: boolean, layer: number, path: string }, list: any[], hierarchyInfoKey: string) {\r\n    return list.find(item => {\r\n      const currentHierarchyInfo = item[hierarchyInfoKey] as { isDetail: boolean, layer: number, path: string };\r\n      return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);\r\n    });\r\n  }\r\n  private getAllParentIds(hierarchyInfo: { isDetail: boolean, layer: number, path: string }, list: any[], hierarchyInfoKey: string, repository: Repository<any>) {\r\n    let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);\r\n    const ids = [];\r\n    while (item) {\r\n      ids.push(item[repository.primaryKey]);\r\n      item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);\r\n    }\r\n    return ids;\r\n  }\r\n  private getHierarchyInfo(entity: Entity, hierarchyInfoKey: string): { path: string, layer: number, isDetail: boolean } {\r\n    return entity[hierarchyInfoKey];\r\n  }\r\n  /**\r\n   * æ¥æ¾èç¹ä¸ææå­çº§ï¼ç¬¬ä¸çº§ï¼\r\n   * @param repository repository\r\n   * @param hierarchyInfoKey åçº§ç å­æ®µ\r\n   * @param id id\r\n   * @returns \r\n   */\r\n  private getChildren(repository: BefRepository<Entity>, hierarchyInfoKey: string, id: string): Entity[] {\r\n    const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);\r\n    if (!hierarchyInfo) {\r\n      return null;\r\n    }\r\n    const layer = hierarchyInfo.layer;\r\n    const path = hierarchyInfo.path;\r\n    const entities: Entity[] = repository.entityCollection.getEntities((entity: Entity) => {\r\n      const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);\r\n      const matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);\r\n      if (matched) {\r\n        return entity;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    return entities;\r\n  }\r\n}\r\n\r\nexport { PathTreeRepository };\r\n","import { ParentTreeRepository } from './parent-tree-repository';\r\nimport { PathTreeRepository } from './path-tree-repository';\r\n\r\nexport class TreeRepositoryFactory {\r\n    static getInstance(treeType: string){\r\n        let repository=null;\r\n        switch (treeType) {\r\n            case \"path\":\r\n                repository = new PathTreeRepository();\r\n                break;\r\n            case \"parent\":\r\n                repository = new ParentTreeRepository();\r\n                break;\r\n            default: break;\r\n        }\r\n        return repository;\r\n    }\r\n}","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of, empty, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\n\r\nimport { Entity, FrameContext, FieldMetadataUtil, NgFieldProperty } from '@farris/devkit';\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\n\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\n\r\nimport { BaseDataService } from './base-data.service';\r\nimport { EditStateUtil } from './utils/index';\r\nimport { TreeUtilFactory } from './tree-table/util/tree-util-factory';\r\nimport { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';\r\n// tslint:disable: no-string-literal\r\n\r\n/**\r\n * æ æ°æ®æå¡\r\n */\r\n@Injectable()\r\nclass TreeDataService extends BaseDataService {\r\n\r\n  /**\r\n   * åçº§ä¿¡æ¯å­æ®µå\r\n   */\r\n  private get hierarchyInfoKey(): string {\r\n    return this.virtualRootFrameContext.getParam('hierarchyInfoKey');\r\n  }\r\n  private get virtualRootFrameContext() {\r\n    return this.frameContext.getVirtualRootFrameContext();\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    frameContext: FrameContext,\r\n    private messageService: FormMessageService,\r\n    private loadingService: FormLoadingService,\r\n    private notifyService: FormNotifyService,\r\n    private errorService: FormErrorService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    super(frameContext);\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å è½½æ°æ®\r\n   */\r\n  public load(filters?: string, sorts?: string): Observable<Entity[]> {\r\n    const filtersArray = this.parseConditions(filters);\r\n    const sortsArray = this.parseConditions(sorts);\r\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n\r\n          // çº æ­£éä¸­èç¹\r\n          if (correctSelectedNode === true) {\r\n            const hierarchyType = this.getHierarchyType();\r\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n            if (treeNodeUtil !== null) {\r\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n            }\r\n          }\r\n\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * åå±å è½½æ°æ®\r\n   */\r\n  public loadByLevel(filters?: string, sorts?: string, frozenCurrentRow?: boolean | string): Observable<Entity[]> {\r\n    this.setLoadByLevelState(filters, sorts);\r\n    const filtersArray = this.parseConditions(filters);\r\n    const sortsArray = this.parseConditions(sorts);\r\n    // const parentId = this.bindingData.list.currentId;\r\n    const parentId = this.getIdToExpand();\r\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\r\n    if (frozenCurrentRow === undefined) {\r\n      frozenCurrentRow = false;\r\n    }\r\n    if (typeof frozenCurrentRow !== 'boolean') {\r\n      frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;\r\n    }\r\n    const hierarchyType = this.getHierarchyType();\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n\r\n    if (repository === null) {\r\n      return empty();\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    // æé åé¡µä¿¡æ¯\r\n    const pagination = this.buildPaginationInfo(parentId);\r\n    const reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;\r\n    const query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);\r\n    return query$.pipe(\r\n      tap(\r\n        (entities: Entity[]) => {\r\n          this.frameContext.params.delete('_RELOAD_CHILDREN_');\r\n          // çº æ­£éä¸­èç¹\r\n          if (correctSelectedNode === true) {\r\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n            if (treeNodeUtil !== null) {\r\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n            }\r\n          }\r\n          const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;\r\n          if (frozenCurrentRow) {\r\n            // å¦æä¸ä¸æ¬¡éä¸­è¡ä¸ºæ¬æ¬¡å è½½æ°æ®ä¸­çä¸æ¡ï¼ååºè¯¥éæ°éä¸­è¯¥è¡\r\n            const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);\r\n            if (containsCurrentRow) {\r\n              this.setCurrentId(currentRowId);\r\n            }\r\n            // åæ¥çå½åè¡ä¸å¨å·²ç»å è½½çæ°æ®ä¸­ï¼å¦å±å¼å°ç¬¬ä¸çº§ï¼å°ç¬¬ä¸çº§çæè¡è®¾ä¸ºå½åè¡ï¼å¨é¨æ¶èµ·ï¼å±å¼ç¬¬ä¸çº§\r\n            if (!this.repository.entityCollection.getEntityById(currentRowId)) {\r\n              const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;\r\n              if (firstChildId) {\r\n                this.setCurrentId(firstChildId);\r\n              }\r\n            }\r\n          }\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å è½½å®æ´æ \r\n   * @param virtualPropertyName èæå­æ®µ\r\n   * @param fullTreeType æ¯å¦æ¯å®æ´æ å è½½ 0ï¼å®æ´æ  1ï¼é¨åæ \r\n   * @param loadType æ¯å¦åçº§å è½½ 0ï¼å¨é¨å è½½ 1ï¼åçº§å è½½\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param frozenCurrentRow å»ç»å½åè¡\r\n   */\r\n  public loadFullTree(virtualPropertyName: string, fullTreeType: string, loadType: string, filters: string, frozenCurrentRow?: boolean | string): Observable<Entity[]> {\r\n    if (typeof fullTreeType !== 'string') {\r\n      throw new Error('ArgumentError: fullTreeType ä¸è½ä¸ºç©ºä¸å¿é¡»ä¸ºå­ç¬¦ä¸²ã');\r\n    }\r\n    if (typeof loadType !== 'string') {\r\n      throw new Error('ArgumentError: loadType ä¸è½ä¸ºç©ºä¸å¿é¡»ä¸ºå­ç¬¦ä¸²ã');\r\n    }\r\n    if (frozenCurrentRow === undefined) {\r\n      frozenCurrentRow = false;\r\n    }\r\n    if (typeof frozenCurrentRow !== 'boolean') {\r\n      frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;\r\n    }\r\n    const virtualRootFrameContext = this.virtualRootFrameContext;\r\n    // è¿åä¸æ¬¡è®¾ç½®çç»æé\r\n    virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');\r\n    virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');\r\n    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);\r\n    const filtersArray = this.parseConditions(filters);\r\n    const parentId = this.getIdToExpand();\r\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\r\n    const hierarchyType = this.getHierarchyType();\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n\r\n    if (repository === null) {\r\n      return EMPTY;\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const context = {\r\n      frameContext: this.frameContext,\r\n      frozenCurrentRow\r\n    };\r\n    // tslint:disable-next-line: max-line-length\r\n    const query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);\r\n    return query$.pipe(\r\n      tap(\r\n        (entities: Entity[]) => {\r\n          const selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');\r\n          // çº æ­£éä¸­èç¹\r\n          if (correctSelectedNode === true || !selectedRowId) {\r\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n            if (treeNodeUtil !== null) {\r\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n            }\r\n          }\r\n          const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;\r\n          if (frozenCurrentRow) {\r\n            // å¦æä¸ä¸æ¬¡éä¸­è¡ä¸ºæ¬æ¬¡å è½½æ°æ®ä¸­çä¸æ¡ï¼ååºè¯¥éæ°éä¸­è¯¥è¡\r\n            const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);\r\n            if (containsCurrentRow) {\r\n              this.setCurrentId(currentRowId);\r\n            }\r\n            // åæ¥çå½åè¡ä¸å¨å·²ç»å è½½çæ°æ®ä¸­ï¼å¦å±å¼å°ç¬¬ä¸çº§ï¼å°ç¬¬ä¸çº§çæè¡è®¾ä¸ºå½åè¡ï¼å¨é¨æ¶èµ·ï¼å±å¼ç¬¬ä¸çº§\r\n            if (!this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {\r\n              const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;\r\n              if (firstChildId) {\r\n                this.setCurrentId(firstChildId);\r\n              }\r\n            }\r\n          }\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * è·åææ°å±å¼çèç¹\r\n   */\r\n  public getIdToExpand() {\r\n    const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    const idToExpand = expandNodes.pop();\r\n    this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n    return idToExpand;\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®ææ°å±å¼çèç¹\r\n   */\r\n  public setIdToExpand(idToExpand: string): void {\r\n    const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    expandNodes.push(idToExpand);\r\n    this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n  }\r\n\r\n  /**\r\n   * è§£æè¿æ»¤æ¡ä»¶\r\n   */\r\n  public parseConditions(conditions?: string): any[] {\r\n    const conditionsString = (!conditions || conditions === '') ? '[]' : conditions;\r\n    return JSON.parse(conditionsString);\r\n  }\r\n\r\n  /**\r\n   * æ°å¢åçº§\r\n   */\r\n  public addSibling(id: string): Observable<any> {\r\n\r\n    // è®¾è®¡æ¶idçè·åæ¹ä¸ºä»å½ä»¤åæ°ä¸è·åï¼ä½è®¾è®¡æ¶æ²¡æåæ°å¿å¡«æ£æ¥ï¼\r\n    // å¦ææå¼è¡¨åä¿å­äºï¼å³æ´æ°äºææ°çå½ä»¤æä»¶ï¼ï¼ä½æ²¡æéç½®è¯¥åæ°ï¼å¯è½ä¼ä¼ éè¿æ¥ä¸ä¸ªç©ºå¼ï¼\r\n    // ä¸ºäºå¼å®¹æ­¤æåµï¼ä½¿ç¨å½åè¡idä½ä¸ºidçå¼\r\n    id = id ? id : this.bindingData.list.currentId;\r\n\r\n    // åæ°æ£æ¥\r\n    if (!id || id === 'undefined') {\r\n      id = '';\r\n    }\r\n\r\n    // è®°å½æè¿ä¸æ¬¡ä¿®æ¹çæ°æ®id\r\n    const lastModifiedId = this.bindingData.list.currentId;\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType: string = this.getHierarchyType();\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      // éè¯¯çåçº§ç \r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const result$ = repository.addSibling(this.repository, id);\r\n    return result$.pipe(\r\n      tap(\r\n        () => {\r\n          this.virtualRootFrameContext.setParam('IS_ADD', true);\r\n          this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.addSiblingFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ°å¢ä¸çº§\r\n   */\r\n  public addChild(id: string): Observable<any> {\r\n\r\n    // åå åaddSiblingçä¿®æ¹\r\n    id = id ? id : this.bindingData.list.currentId;\r\n\r\n    // åæ°æ£æ¥\r\n    if (!id) {\r\n      // è¯·éæ©ç¶èç¹\r\n      this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    // è®°å½æè¿ä¸æ¬¡ä¿®æ¹çæ°æ®id\r\n    const lastModifiedId = this.bindingData.list.currentId;\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType = this.getHierarchyType();\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n\r\n    // æ°å¢çæ¶åï¼è¦å±å¼ç¶èç¹\r\n    this.setIdToExpand(id);\r\n    const reloadChild$ = this.reloadByLevel();\r\n\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const addChild$ = repository.addChild(this.repository, id);\r\n    const result$ = reloadChild$.pipe(\r\n      switchMap(() => {\r\n        return addChild$;\r\n      }),\r\n      tap(\r\n        () => {\r\n          this.virtualRootFrameContext.setParam('IS_ADD', true);\r\n          this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.addChildFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * æ¹éä¿å­\r\n   */\r\n  public save(): Observable<boolean> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'save' });\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const save$ = this.repository.applyChanges();\r\n    const result$ = save$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.notifyService.success(this.languageService.saveSuccess, { hideTitle: true });\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.multiSaveFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * å é¤\r\n   */\r\n  public remove(id: string, successMsg?: string): Observable<boolean> {\r\n\r\n    // åå åaddSibling\r\n    id = id ? id : this.bindingData.list.currentId;\r\n\r\n    // åæ°æ£æ¥\r\n    if (!id) {\r\n      this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    // å­å¨å­èç¹ä¸åè®¸å é¤\r\n    const treeNodesData = this.repository.entityCollection.toJSON();\r\n    const hierarchyType = this.getHierarchyType();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil === null) {\r\n      return empty();\r\n    }\r\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {\r\n      this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    // ç¡®è®¤å é¤\r\n    const action$ = this.messageService.question(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n\r\n        // è·åå é¤åè¦è®¾ç½®çèç¹id\r\n        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, id);\r\n\r\n        // æ§è¡å é¤\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.frameContext.repository.removeById(id);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n\r\n            // è®¾ç½®éä¸­èç¹\r\n            treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);\r\n\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.notifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.errorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * åæ¶æ¶æ£æµæªä¿å­è®°å½\r\n   */\r\n  public cancel(): Observable<any> {\r\n\r\n    // æ²¡æåæ´æ¶ç´æ¥åæ¶\r\n    // const cardDataService = this.frameContext.injector.get<CardDataService>(CardDataService);\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n    if (!hasUnsavedData) {\r\n      return this._cancel();\r\n    }\r\n\r\n    const confirmResult$ = this.messageService.question(this.languageService['cancelWithoutSave']).pipe(\r\n      switchMap((ifCancel: boolean) => {\r\n        if (ifCancel === false) {\r\n          return EMPTY;\r\n        }\r\n        return this._cancel();\r\n      })\r\n    );\r\n    return confirmResult$;\r\n  }\r\n  /**\r\n   * æé åé¡µä¿¡æ¯\r\n   * @param parentId parentId\r\n   * @returns \r\n   */\r\n  private buildPaginationInfo(parentId: any) {\r\n    const pagination: any = { pageIndex: 0, pageSize: 0 };\r\n    const enableNodePagination = this.frameContext.params.get('enableNodePagination');\r\n    if (!parentId) {\r\n      // ä¸çº§åé¡µ\r\n      const pageSize = this.repository.entityCollection.pageSize || 0;\r\n      const pageIndex = this.repository.entityCollection.pageIndex || 0;\r\n      // å¯ç¨äºä¸çº§åé¡µ\r\n      if (pageSize !== 0) {\r\n        pagination.pageSize = pageSize;\r\n        pagination.pageIndex = pageIndex;\r\n      }\r\n    } else {\r\n      // å¦ææªå¯ç¨èç¹åé¡µæå½åä¸ºé¡¶çº§èç¹å è½½ï¼åä¸å¤çèç¹åé¡µ\r\n      if (enableNodePagination) {\r\n        const nodePageSize = this.frameContext.params.get('nodePageSize') || 0;\r\n        let nodePageIndex = this.frameContext.params.get(`_NODE_${parentId}_PAGE_INDEX_`);\r\n        if (!nodePageIndex) {\r\n          this.frameContext.params.set(`_NODE_${parentId}_PAGE_INDEX_`, 1);\r\n          nodePageIndex = 1;\r\n        }\r\n        pagination.pageIndex = nodePageIndex;\r\n        pagination.pageSize = nodePageSize;\r\n      }\r\n    }\r\n    return pagination;\r\n  }\r\n\r\n  /**\r\n   * åæ¶åæ´\r\n   */\r\n  private _cancel(): Observable<any> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const cancel$ = this.repository.cancelChanges();\r\n    return cancel$.pipe(\r\n      switchMap(() => {\r\n        const isAdd = this.virtualRootFrameContext.getParam('IS_ADD');\r\n        const lastModifiedId = this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');\r\n        const currentId = this.bindingData.list.currentId;\r\n\r\n        if (isAdd === true) {\r\n          this.repository.entityCollection.removeEntityById(currentId);\r\n\r\n          // éç½®ç¼è¾ç¶æ\r\n          this.virtualRootFrameContext.setParam('IS_ADD', false);\r\n          if (lastModifiedId) {\r\n            setTimeout(() => {\r\n              this.bindingData.list.setCurrentId(lastModifiedId, true, true);\r\n            }, 0);\r\n          }\r\n          return of(null);\r\n        } else {\r\n          return this.repository.updateById(currentId);\r\n        }\r\n      }),\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.cancelFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦å­å¨ä¸çº§èç¹ï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public hasChildNodes(id: string, treeNodesData: any[]): boolean {\r\n    const treeNodeUtil = this.getTreeNodeUtil();\r\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * è®¡ç®å é¤åçå½åèç¹idï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public getNextNodeIdAfterRemoving(idToRemove: string, treeNodesData: any[]): string {\r\n    const treeNodeUtil = this.getTreeNodeUtil();\r\n    const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);\r\n    return nextNodeId;\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®å é¤åçå½åèç¹èç¹ï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public setNextNodeAfterRemoving(nextNodeId: string): void {\r\n    const treeNodeUtil = this.getTreeNodeUtil();\r\n    treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);\r\n  }\r\n  /**\r\n   * è®¾ç½®æ çå½åè¡(ç»å®æ´æ ä½¿ç¨)\r\n   * @param id id\r\n   */\r\n  public setCurrentId(id: string) {\r\n    id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    this.frameContext.bindingData.list.setCurrentId(id, true, true, true);\r\n  }\r\n  /**\r\n   * éä¸­æ çç¬¬ä¸ä¸ªèç¹\r\n   */\r\n  public selectFirstRow() {\r\n    const hierarchyType = this.getHierarchyType();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil !== null) {\r\n      treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n    }\r\n  }\r\n  /**\r\n   * è·åæ èç¹å·¥å·ç±»å®ä¾\r\n   */\r\n  private getTreeNodeUtil(): any {\r\n    const hierarchyType = this.getHierarchyType();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil === null) {\r\n      throw new Error(`ä¸æ¯æ${hierarchyType}ç±»åçåçº§`);\r\n    }\r\n    return treeNodeUtil;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * è®°å½å è½½ç¶æ\r\n   * @todoï¼å¾å é¤\r\n   */\r\n  private setLoadByLevelState(filters: string, sorts: string) {\r\n\r\n    // @todoï¼ä¸´æ¶å¤ç\r\n    this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);\r\n    this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);\r\n    this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);\r\n  }\r\n\r\n  /**\r\n   * å±å¼å½åèç¹\r\n   * @todoï¼å¾å é¤\r\n   */\r\n  private reloadByLevel(): Observable<Entity[]> {\r\n    const isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');\r\n    if (isLoadByLevel === true) {\r\n      const filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');\r\n      const sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');\r\n      return this.loadByLevel(filters, sorts);\r\n    }\r\n    return of([]);\r\n  }\r\n\r\n  private getHierarchyType() {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);\r\n    const hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];\r\n    let hierarchyType = 'path'; // åçº§ç é»è®¤ä¸ºpathï¼å¼å®¹åè¡¨å\r\n    if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {\r\n      hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'] as string;\r\n    }\r\n    if (hierarchyType == null || hierarchyType.length < 1) {\r\n      // 'åçº§ç éç½®ä¿¡æ¯éè¯¯'\r\n      throw new Error(this.languageService['incorrectHierarchyConfig']);\r\n    }\r\n    return hierarchyType;\r\n  }\r\n  /**\r\n   * è·åæ ¹ç»ä»¶æ¶æ¯ç®¡é\r\n   */\r\n  private get messagePipe() {\r\n    if (this.frameContext) {\r\n      const appContext = this.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\nexport { TreeDataService };\r\n","import { Injectable } from '@angular/core';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { FilterConditionService } from '../filter-condition.service';\r\nimport { CommandService } from '../command-service';\r\n\r\n@Injectable()\r\nclass FilterConditionDataService {\r\n    constructor(\r\n        private viewModel: ViewModel,\r\n        private filterConditionService: FilterConditionService,\r\n        private commandService: CommandService\r\n    ) { }\r\n\r\n    /**\r\n     * æ§è¡è¿æ»¤\r\n     * @param commandName å½ä»¤åç§°\r\n     * @param frameId å½ä»¤æå¨çframeId\r\n     */\r\n    public filter(commandName: string, frameId: string) {\r\n        const self: any = this;\r\n        let filters = self.context && self.context.eventParam && self.context.eventParam.data || [];\r\n        if (typeof (filters) === 'string') {\r\n            filters = JSON.parse(filters);\r\n        }\r\n        // æ¥è¯¢æ¶éç½®é¡µç ä¸ºç¬¬ä¸é¡µ\r\n        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;\r\n        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);\r\n        return this.commandService.execute(commandName, frameId);\r\n    }\r\n}\r\nexport { FilterConditionDataService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Entity, BindingData, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { EditStateUtil } from './utils/index';\r\n\r\n\r\n/**\r\n * æ°æ®ç¼è¾æå¡\r\n */\r\n@Injectable()\r\nclass EditDataService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindingData: BindingData;\r\n\r\n  /**\r\n   * Loadingæå¡\r\n   */\r\n  private loadingService: FormLoadingService;\r\n\r\n  /**\r\n   * è¯­è¨æå¡\r\n   */\r\n  private languageService: LanguageService;\r\n\r\n  /**\r\n   * éè¯¯å¤çæå¡\r\n   */\r\n  private errorService: FormErrorService;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(private frameContext: FrameContext) {\r\n    this.repository = this.frameContext.repository as BefRepository<Entity>;\r\n    this.bindingData = this.frameContext.bindingData;\r\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\r\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\r\n    this.errorService = this.frameContext.injector.get<FormErrorService>(FormErrorService, null);\r\n  }\r\n\r\n  /**\r\n   * ç¼è¾ï¼æ¯æå éï¼\r\n   */\r\n  public edit(id: string): Observable<Entity> {\r\n\r\n    id = id || this.bindingData.list.currentId;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const edit$ = this.repository.editEntityById(id);\r\n    const result$ = edit$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          EditStateUtil.setEditState(this.frameContext, id);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.updateFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n}\r\n\r\n\r\nexport { EditDataService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\nimport { FrameContext, Entity, } from '@farris/devkit';\r\nimport { BefRepository, } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { CommandService } from '../command-service';\r\nimport { ListDataService } from './list-data.service';\r\nimport { TreeDataService } from './tree-data.service';\r\n\r\n/**\r\n * å é¤æå¡\r\n */\r\n@Injectable()\r\nclass RemoveDataService {\r\n\r\n  private notifyService: FormNotifyService;\r\n\r\n  private messageService: FormMessageService;\r\n\r\n  private loadingService: FormLoadingService;\r\n\r\n  private errorService: FormErrorService;\r\n\r\n  private languageService: LanguageService;\r\n\r\n  private befRepository: BefRepository<any>;\r\n\r\n  private commandService: CommandService;\r\n\r\n  private listDataService: ListDataService;\r\n\r\n  private treeDataService: TreeDataService;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param frameContext ç»ä»¶ä¸ä¸æ\r\n   */\r\n  constructor(private frameContext: FrameContext) {\r\n    this.notifyService = this.frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    this.messageService = this.frameContext.injector.get<FormMessageService>(FormMessageService, null);\r\n    this.errorService = this.frameContext.injector.get<FormErrorService>(FormErrorService, null);\r\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\r\n\r\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\r\n    this.commandService = this.frameContext.injector.get<CommandService>(CommandService, null);\r\n    this.listDataService = this.frameContext.injector.get<ListDataService>(ListDataService, null);\r\n    this.treeDataService = this.frameContext.injector.get<TreeDataService>(TreeDataService, null);\r\n    this.befRepository = this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  /**\r\n   * å é¤idå¯¹åºçå®ä½\r\n   * @param id è¦å é¤çæ°æ®id\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param enableRemoveAndSave æ¯å¦å¯ç¨å é¤å¹¶ä¿å­ï¼ä»ä¸ºå¼å®¹ï¼æ°è°ç¨è¯·å¿è®¾ç½®ï¼\r\n   * @summary\r\n   * enableRemoveAndSaveå­å¨çæä¹ï¼\r\n   * 1ãèè¡¨åçå¯è½æ²¡ædelAndSaveæ¹æ³ï¼\r\n   * 2ãä¸ºäºå°ListDataServiceä¸­çremoveæ¹æ³è¿ç§»å°æ­¤æ¹æ³ä¸ï¼æ¾ç¤ºè®¾ç½®ä¸ºfalseï¼ä¿æåä»¥åè¡ä¸ºä¸è´ï¼\r\n   * 3ãè¯¥åæ°é»è®¤ä¸ºtrueï¼å¹¶ä¸å¨WebComponentå±ä¸æ´é²ï¼æ°å½ä»¤ä¸éè¦ä¼ éï¼é»è®¤ä¸ºtrueï¼\r\n   */\r\n  public removeById(id: string, ifSave: boolean, enableRemoveAndSave: boolean = true, successMsg?: string): Observable<boolean> {\r\n    const msg = successMsg ? successMsg : '';\r\n    return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);\r\n  }\r\n\r\n  public removeByIds(ids: string[]): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * å é¤idå¯¹åºçå®ä½ï¼å¹¶æ§è¡ä¿å­\r\n   */\r\n  public removeAndSaveById(id: string, successMsg?: string): Observable<boolean> {\r\n    const msg = successMsg ? successMsg : '';\r\n    return this.innerRemoveById(id, true, true, msg);\r\n  }\r\n\r\n  /**\r\n   * å é¤å¹¶ä¿å­æ èç¹æ°æ®\r\n   */\r\n  public removeAndSaveByIdForTree(id: string, successMsg?: string): Observable<boolean> {\r\n    const msg = successMsg ? successMsg : '';\r\n    // æ£æ¥è¦å é¤çidæ¯å¦å­å¨\r\n    if (this.checkIdsToRemove([id]) === false) {\r\n      this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    // æ£æ¥æ¯å¦æå­èç¹\r\n    const treeNodesData = this.befRepository.entityCollection.toJSON();\r\n    if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {\r\n      this.messageService.warning(this.languageService.deleteChildFirst);\r\n      return EMPTY;\r\n    }\r\n\r\n    // æ§è¡å é¤\r\n    const remove$ = this.innerRemoveById(id, true, true, msg);\r\n    const nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);;\r\n    const result$ = remove$.pipe(\r\n      tap(() => {\r\n        this.treeDataService.setNextNodeAfterRemoving(nextNodeId);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n\r\n  /**\r\n   * æ¹éå é¤å¹¶ä¿å­\r\n   */\r\n  public removeAndSaveByIds() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * å é¤åçå·æ°\r\n   */\r\n  public refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\r\n    if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {\r\n      return;\r\n    }\r\n    const commandService = this.frameContext.injector.get<CommandService>(CommandService, null);\r\n    return commandService.execute(loadCmdName, loadCmdFrameId);\r\n  }\r\n\r\n  /**\r\n   * å é¤idå¯¹åºçå®ä½\r\n   * @param id å®ä½id\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param enableRemoveAndSave æ¯å¦å¯ç¨å é¤å¹¶ä¿å­ï¼èEAPIä¸æ²¡ææ­¤æ¹æ³ï¼éè¿å¼å³è¿è¡å¼å®¹ï¼\r\n   * @summary\r\n   * enableRemoveAndSaveåæ°è¯´æï¼\r\n   * 1ãèEAPIä¸æ²¡ædelAndSaveæ¹æ³ï¼åªè½åä¸¤æ¬¡è¯·æ±ï¼å é¤åä¿å­ï¼ï¼\r\n   * 2ãæ­¤å¼å³ç¨äºéæ©ä½¿ç¨åªç§æ¹å¼ï¼å¼å®¹èè¡¨åã\r\n   */\r\n  private innerRemoveById(id: string, ifSave: boolean, enableRemoveAndSave: boolean, successMsg: string): Observable<boolean> {\r\n\r\n    // æ£æ¥è¦å é¤çidæ¯å¦å­å¨\r\n    if (this.checkIdsToRemove([id]) === false) {\r\n      this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const confirm$ = this.confirmToRemove();\r\n    const remove$ = enableRemoveAndSave && ifSave ?\r\n      this.befRepository.removeEntityAndSaveById(id) :\r\n      this.befRepository.removeById(id, ifSave);\r\n\r\n    const result$ = confirm$.pipe(\r\n      concatMap((ifRemove: boolean) => {\r\n        if (ifRemove === false) {\r\n          return EMPTY;\r\n        }\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        return remove$.pipe(\r\n          tap(\r\n            () => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              if (successMsg && successMsg.trim()) {\r\n                this.notifyService.success(successMsg, { hideTitle: true });\r\n              } else {\r\n                this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n              }\r\n              // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            },\r\n            (error: any) => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.errorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          ),\r\n          switchMap(() => {\r\n            const saved = enableRemoveAndSave && ifSave;\r\n            if (!saved) {\r\n              return EMPTY;\r\n            } else {\r\n              return of(null);\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥è¦å é¤çidsæ¯å¦ä¸ºç©º\r\n   */\r\n  private checkIdsToRemove(ids: string[]): boolean {\r\n    if (!ids) {\r\n      return false;\r\n    }\r\n    const filteredIds = ids.filter((id: string) => {\r\n      return !!id;\r\n    });\r\n    if (filteredIds.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ç¡®è®¤å é¤\r\n   */\r\n  private confirmToRemove(): Observable<boolean> {\r\n    const confirm$ = this.messageService.question(this.languageService.confirmDeletion);\r\n    const result$ = confirm$.pipe(\r\n      concatMap((ifRemove: boolean) => {\r\n        if (ifRemove === false) {\r\n          return EMPTY;\r\n        } else {\r\n          return of(true);\r\n        }\r\n      }\r\n      ));\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { RemoveDataService };\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, Entity } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\n\r\n/**\r\n * å é¤æå¡\r\n */\r\n@Injectable()\r\nclass SaveDataService {\r\n\r\n  private notifyService: FormNotifyService;\r\n\r\n  private messageService: FormMessageService;\r\n\r\n  private loadingService: FormLoadingService;\r\n\r\n  private errorService: FormErrorService;\r\n\r\n  private languageService: LanguageService;\r\n\r\n  private befRepository: BefRepository<any>;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param frameContext ç»ä»¶ä¸ä¸æ\r\n   */\r\n  constructor(private frameContext: FrameContext) {\r\n    this.notifyService = this.frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    this.messageService = this.frameContext.injector.get<FormMessageService>(FormMessageService, null);\r\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\r\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\r\n    this.befRepository = this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n}\r\n\r\nexport { SaveDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\n\r\nimport { BindingList, FrameContext, ViewModel } from '@farris/devkit';\r\nimport { BaseDataService } from './base-data.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';\r\nimport { TreeUtilFactory } from './tree-table/util/tree-util-factory';\r\n\r\n\r\n\r\n/**\r\n * æ æ°æ®æå¡\r\n */\r\n@Injectable()\r\nclass SubTreeDataService extends BaseDataService {\r\n\r\n  /**\r\n   * åçº§ç ä¿¡æ¯\r\n   */\r\n  private get hierarchyInfoKey(): string {\r\n    return this.virtualRootFrameContext.getParam('hierarchyInfoKey');\r\n  }\r\n  private get hierarchyInfoField(): string {\r\n    return this.hierarchyInfoKey.split('/').filter(p => p).pop();\r\n  }\r\n  private get virtualRootFrameContext() {\r\n    return this.frameContext.getVirtualRootFrameContext();\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    frameContext: FrameContext,\r\n    private viewModel: ViewModel,\r\n    private messageService: FormMessageService,\r\n    private loadingService: FormLoadingService,\r\n    private errorService: FormErrorService,\r\n    private formNotifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    super(frameContext);\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  private get messagePipe() {\r\n    if (this.viewModel && this.viewModel.frameContext) {\r\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * æ°å¢å­è¡¨åçº§\r\n   */\r\n  public addSubSibling(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'addSubSibling' });\r\n    }\r\n    let params: { nodeCodes: string[], ids: string[] } = this.getParams();\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType: string = this.getHierarchyType();\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      // éè¯¯çåçº§ç \r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);\r\n    return result$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.errorService.exception(this.languageService.addSubSiblingFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ°å¢ä¸çº§\r\n   */\r\n  public addSubChild(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'addSubChild' });\r\n    }\r\n    let params: { nodeCodes: string[], ids: string[] } = this.getParams();\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType = this.getHierarchyType();\r\n\r\n    const currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();\r\n    if (!currentList['currentId']) {\r\n      // è¯·éæ©ç¶èç¹\r\n      this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);\r\n    const result$ = addSubChild$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.addSubChildFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * å é¤å­è¡¨æ èç¹\r\n   * @param id id\r\n   */\r\n  public remove(id: string, successMsg?: string): Observable<any> {\r\n    // åæ°æ£æ¥\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType = this.getHierarchyType();\r\n    // æå­èç¹æ¶ä¸åè®¸å é¤\r\n    const treeNodesData = this.frameContext.bindingData.getList().toJSON();\r\n    const bindingList = this.frameContext.bindingData.getList();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil === null) {\r\n      return EMPTY;\r\n    }\r\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {\r\n      this.messageService.warning(this.languageService['deleteChildFirst']);\r\n      return EMPTY;\r\n    }\r\n    // ç¡®è®¤å é¤\r\n    const action$ = this.messageService.question(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return EMPTY;\r\n        }\r\n        // è·åå é¤åè¦è®¾ç½®çèç¹id\r\n        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoField, id);\r\n\r\n        // æ§è¡å é¤\r\n        const loadingTimerId = this.loadingService.show();\r\n        const path = this.getPath();\r\n        const remove$ = this.frameContext.repository.removeByPath(path, id);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n            // è®¾ç½®éä¸­èç¹\r\n            treeNodeUtil.selectNodeByBindingList(bindingList, this.hierarchyInfoField, nextNodeId);\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.errorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private getHierarchyType() {\r\n    const propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));\r\n    let hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;\r\n    if (hierarchyType == null || hierarchyType.length < 1) {\r\n      // 'åçº§ç éç½®ä¿¡æ¯éè¯¯'\r\n      throw new Error(this.languageService['incorrectHierarchyConfig']);\r\n    }\r\n    return hierarchyType;\r\n  }\r\n\r\n  /**\r\n   * è·ååæ°\r\n   * /parentId/childCodes/childId/grandsonCodes\r\n   * [childCodes, grandsonCodes]\r\n   * [parntId, childId]\r\n   */\r\n  private getParams(): { nodeCodes: string[], ids: string[] } {\r\n    let nodeCodes = this.viewModel.bindingPath.substr(1).split('/');\r\n    let ids = [];\r\n    let nodeCodeArray = [];\r\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\r\n    ids.push(rid);\r\n    let subData: any = this.viewModel.bindingData;\r\n    if (nodeCodes.length > 0) {\r\n      nodeCodes.map(nodeCode => {\r\n        subData = subData[nodeCode];\r\n        if (subData && subData.currentId) {\r\n          ids.push(subData.currentId);\r\n        }\r\n        //å»é¤nodeCodeçs\r\n        nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);\r\n      })\r\n    }\r\n    return { nodeCodes: nodeCodeArray, ids: ids };\r\n  }\r\n  /**\r\n   * è·åå®æ´è·¯å¾\r\n   * fixed by justin: æ ¹æ®bindingPathï¼å¦ææ¯ä»ä»è¡¨ï¼éè¦è·åä¸»è¡¨æ°æ®idåä»è¡¨æ°æ®id\r\n   */\r\n  private getPath(): string {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\r\n    let path = '/' + rid;\r\n\r\n    const subPaths = bindingPath.split('/').filter(p => p);\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['edus', 'grades']\r\n      let subData: any = this.viewModel.bindingData;\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        subData = subData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n}\r\nexport { SubTreeDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository, BefRestService, RequestInfo, ResponseInfo } from '@farris/bef';\r\nimport { BodyWithRequestInfo } from './types';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { FormErrorService } from './error/form-error.service';\r\nimport { LanguageService } from './languag.service';\r\n// tslint:disable: no-string-literal\r\n\r\n/**\r\n * åè¡¨ä»åºæå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass BeActionService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private loadingService: FormLoadingService,\r\n    private msgService: FormMessageService,\r\n    private notifyService: FormNotifyService,\r\n    private formErrorService: FormErrorService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ§è¡èªå®ä¹å¨ä½\r\n   */\r\n  public invokeAction(\r\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: BodyWithRequestInfo\r\n  ): Observable<ResponseInfo> {\r\n    return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, true);\r\n  }\r\n\r\n  /**\r\n   * å·²å¼ç¨ï¼è¯·ä½¿ç¨invokeActionä»£æ¿\r\n   * @deprecated\r\n   * @summary\r\n   * è¿ç§»æ¶è¯·æ³¨æï¼invokeActionä¸­bodyè¯·ä¼ éæ»¡è¶³BodyWithRequestInfoæ¥å£çæ ¼å¼ï¼å½¢å¦ï¼\r\n   * { requestInfo: reqeustInfoInstance, key1: value1, key2: value2 }\r\n   */\r\n  public executeAction(\r\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: any\r\n  ): Observable<any> {\r\n\r\n    // 1ãä¸ç¡®å®bodyä¸­æ¯å¦æRequestInfoå¯¹è±¡\r\n    // 2ãrestServiceçreqeustä¼æ ¹æ®bodyä¸­æ¯å¦ækeyä¸ºReqeustInfoï¼å¤§åå¼å¤´ï¼çåæ°æ¥ç¡®å®ï¼\r\n    // 3ãå¦æbodyä¸­æ²¡ækeyä¸ºReqeustInfoçåæ°ï¼ä¸ç´æ¥è¿åResponseInfoï¼èæ¯è¿ä¸æ­¥è§£æï¼è¿åå¶ä¸­çreturnValueã\r\n    return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, false);\r\n  }\r\n\r\n  /**\r\n   * æé æ¥è¯¢å­ç¬¦ä¸²\r\n   */\r\n  public buildQueryParams(queryParams: string): string {\r\n    if (typeof queryParams === 'string') {\r\n      queryParams = JSON.parse(queryParams);\r\n    }\r\n\r\n    let queryParamsString = '';\r\n    Object.keys(queryParams).forEach((key: string) => {\r\n      queryParamsString += `${key}=${queryParams[key]}`;\r\n    });\r\n\r\n    return queryParamsString;\r\n  }\r\n\r\n  /**\r\n   * è·åRestæå¡\r\n   */\r\n  public getRestService(): BefRestService {\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    return befRepository.restService;\r\n  }\r\n\r\n\r\n  /**\r\n   * è°ç¨èªå®ä¹å¨ä½\r\n   */\r\n  private innerInvokeAction(\r\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: any, hasRequestInfo?: boolean\r\n  ): Observable<any>  {\r\n    const options = {};\r\n    const restService = this.getRestService();\r\n    const baseUri = restService.baseUri;\r\n\r\n    // æé url\r\n    let fullActionUri = `${baseUri}/service/${actionUri}`;\r\n    if (queryParams && queryParams !== '') {\r\n      const queryParamsString = this.buildQueryParams(queryParams);\r\n      fullActionUri += queryParamsString;\r\n    }\r\n\r\n\r\n    // bodyæé \r\n    if (body && body !== '') {\r\n      if (typeof body === 'string' && body.startsWith('{') && body.endsWith('}')) {\r\n        body = JSON.parse(body);\r\n      }\r\n      options['body'] = body;\r\n    }\r\n\r\n    // httpå¤´æé \r\n    if (httpHeaders && httpHeaders !== '') {\r\n      httpHeaders = JSON.parse(httpHeaders);\r\n\r\n      // å¦ææ²¡æè®¾ç½®Content-Typeï¼é»è®¤ç¨jsonæ ¼å¼\r\n      if (!httpHeaders['Content-Type']) {\r\n        httpHeaders['Content-Type'] = 'application/json';\r\n      }\r\n      options['headers'] = new HttpHeaders(httpHeaders);\r\n    } else {\r\n      options['headers'] = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    }\r\n\r\n    // æ§è¡æå¡å¨ç«¯è¯·æ±\r\n    this.loadingService.show();\r\n\r\n    // invokeæ¹æ³\r\n    // 1ãRequestInfo=>æ¥é\r\n    // 2ãrequestInfo=>ResponseInfo\r\n    // requestæ¹æ³\r\n    // 1ãRequestInfo=>ResponseInfo\r\n    // 2ãrequestInfo=>returnValue\r\n    const methodName = hasRequestInfo ? 'invoke' : 'request';\r\n    const result$ = restService[methodName](fullActionUri, httpMethod, null, options);\r\n    return result$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hide();\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hide();\r\n          const errorMsg = fullActionUri + this.languageService['operationFailed'];\r\n          this.formErrorService.exception(errorMsg, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport { BeActionService };\r\n\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, empty, of, from, EMPTY } from 'rxjs';\r\nimport { tap, map, switchMap, catchError } from 'rxjs/operators';\r\nimport { BeActionService } from './be-action.service';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { FormErrorService } from './error/form-error.service';\r\nimport { WFSubmiteService, InteractionResponse, ExcutionResponse } from '@gsp-wf/rtdevkit';\r\nimport { WfTaskHandlerService } from '@gsp-wf/wf-task-handler';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { Entity, FrameContext } from '@farris/devkit';\r\nimport { WFFlowchartService } from '@gsp-wf/ui-flowchart';\r\nimport { FormNotifyStrategyService } from './form-notify-strategy.service';\r\nimport { BodyWithRequestInfo } from './../lib/types';\r\n// tslint:disable: max-line-length\r\n/**\r\n * å®¡æ¹æå¡\r\n * @Scope FrameComponent\r\n */\r\n@Injectable()\r\nclass ApproveService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private formLoadingService: FormLoadingService,\r\n    private beActionService: BeActionService,\r\n    private msgService: FormMessageService,\r\n    private notifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService,\r\n    private formErrorService: FormErrorService,\r\n    private frameContext: FrameContext,\r\n    @Optional() private submitter: WFSubmiteService,\r\n    @Optional() private flowchartService: WFFlowchartService,\r\n    @Optional() private wfTaskHandlerService: WfTaskHandlerService\r\n  ) {\r\n    if (this.frameContext) {\r\n      this.repository = this.frameContext.repository as BefRepository<Entity>;\r\n      if (!this.wfTaskHandlerService) {\r\n        this.wfTaskHandlerService = this.frameContext.injector.get(WfTaskHandlerService, null);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¸¦æäº¤äºçæäº¤å®¡æ¹\r\n   */\r\n  submitApproveWithInteraction(bizBillID: string) {\r\n    return this.submitApprove(bizBillID);\r\n  }\r\n\r\n  /**\r\n   * æäº¤å®¡æ¹\r\n   * @param bizBillID ä¸å¡åæ®id\r\n   * @param interactionResult åç«¯äº¤äºç»æ\r\n   * @deprecated å·²åºå¼ï¼æ¸ä½¿ç¨åå«å¥å£åæ®çå®¡æ¹\r\n   */\r\n  submitApprove(bizBillID: string, interactionResult?: InteractionResponse): Observable<any> {\r\n    if (!bizBillID) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.notifyService.info(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    const actionUri = 'submittoapprovevoaction';\r\n\r\n    const restService = this.beActionService.getRestService();\r\n\r\n    const body: BodyWithRequestInfo = {\r\n      requestInfo: restService.buildRequestInfo(),\r\n      bizInstID: bizBillID,\r\n      interactionResult: interactionResult ? {\r\n        procDefId: interactionResult.processDefinitionId\r\n      } : {}\r\n    };\r\n\r\n    this.formLoadingService.show();\r\n\r\n    // æ·»å æç¤º\r\n    const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);\r\n    // ç®ååå«ä¸ç§æåµï¼\r\n    // 1. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾id\r\n    // 2. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾idï¼å¹¶è¿åå¤ä¸ªåä¸èï¼äº¤äºæ¶æäº¤åä¸è\r\n    // 3. ç¬¬ä¸æ¬¡æäº¤æªæåï¼æå¡ç«¯è¿åå¤ä¸ªæµç¨å®ä¹ï¼éè¦äº¤äºåç¬¬äºæ¬¡æäº¤å®¡æ¹ï¼ç¬¬äºæ¬¡æäº¤ä¼åºç°æåµ1åæåµ2\r\n\r\n    return action$.pipe(\r\n      map((result): ExcutionResponse => {\r\n        if (result && result.returnValue && result.returnValue.excutionResponse) {\r\n          var wfResponse: ExcutionResponse = result.returnValue.excutionResponse;\r\n          return wfResponse;\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response && response.procInstId) {\r\n          if (this.repository) {\r\n            const updating$ = this.repository.updateById(bizBillID);\r\n            return updating$.pipe(tap(() => {\r\n              this.formLoadingService.hide();\r\n              // this.notifyService.info(this.languageService.submitSuccess);\r\n              FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            }), map(() => {\r\n              return response;\r\n            }));\r\n          } else {\r\n            this.formLoadingService.hide();\r\n            // this.notifyService.info(this.languageService.submitSuccess);\r\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            return of(response);\r\n          }\r\n        } else {\r\n          return of(response);\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response.needInteraction) {\r\n          return from(new Promise((resolve) => {\r\n            this.submitter.excute(response, (interactionResponse: InteractionResponse) => {\r\n              // å¦ææ­¤æ¬¡æªæäº¤ï¼èéæ©åå¾å°äºæµç¨å®ä¹IDï¼åå¨æ­¤æäº¤å®¡æ¹\r\n              if (!response.procInstId && interactionResponse.processDefinitionId) {\r\n                this.submitApprove(bizBillID, interactionResponse).subscribe(() => {\r\n                  resolve();\r\n                });\r\n              } else {\r\n                resolve();\r\n              }\r\n            });\r\n          }));\r\n        } else {\r\n          return of(null);\r\n        }\r\n      }),\r\n      catchError(\r\n        error => {\r\n          this.formLoadingService.hide();\r\n          // this.formErrorService.exception(this.languageService.submitFaild, error);\r\n          return of(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * æäº¤å®¡æ¹(å¸¦å¥å£åæ®)\r\n   * @param bizBillID ä¸å¡åæ®Id\r\n   * @param bizDefKey å¥å£åæ®Id\r\n   * @param options options\r\n   * @param interactionResult äº¤äºç»æ\r\n   */\r\n\r\n  public submitApproveWithBizDefKey(bizBillID: string, bizDefKey: string, options?: any, interactionResult?: InteractionResponse): Observable<any> {\r\n    if (!bizBillID) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!bizDefKey) {\r\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    try {\r\n      if (options && typeof (options) === 'string') {\r\n        options = JSON.parse(options);\r\n      }\r\n    } catch (e) {\r\n      throw new Error('ArgumentError:options not a valid json string.');\r\n    }\r\n\r\n    const actionUri = 'submittoapprovewithpayload';\r\n\r\n    const restService = this.beActionService.getRestService();\r\n\r\n    const body: BodyWithRequestInfo = {\r\n      requestInfo: restService.buildRequestInfo(),\r\n      approvePayload: {\r\n        startProcessPayload: {\r\n          bizDefKey: bizDefKey,\r\n          dataId: bizBillID,\r\n          name: options && options.name || '',\r\n          variables: options && options.variables || {}\r\n        }\r\n      }\r\n    };\r\n    if (interactionResult) {\r\n      body.approvePayload.startProcessPayload.processDefinitionId = interactionResult.processDefinitionId;\r\n      body.approvePayload.startProcessPayload.processDefinitionKey = interactionResult['processDefinitionKey'];\r\n    }\r\n    this.formLoadingService.show();\r\n\r\n    // æ·»å æç¤º\r\n    const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);\r\n    // ç®ååå«ä¸ç§æåµï¼\r\n    // 1. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾id\r\n    // 2. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾idï¼å¹¶è¿åå¤ä¸ªåä¸èï¼äº¤äºæ¶æäº¤åä¸è\r\n    // 3. ç¬¬ä¸æ¬¡æäº¤æªæåï¼æå¡ç«¯è¿åå¤ä¸ªæµç¨å®ä¹ï¼éè¦äº¤äºåç¬¬äºæ¬¡æäº¤å®¡æ¹ï¼ç¬¬äºæ¬¡æäº¤ä¼åºç°æåµ1åæåµ2\r\n\r\n    return action$.pipe(\r\n      map((result): ExcutionResponse => {\r\n        if (result && result.returnValue && result.returnValue.excutionResponse) {\r\n          const wfResponse: ExcutionResponse = result.returnValue.excutionResponse;\r\n          return wfResponse;\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response && response.procInstId) {\r\n          if (this.repository) {\r\n            const updating$ = this.repository.updateById(bizBillID);\r\n            return updating$.pipe(tap(() => {\r\n              this.formLoadingService.hide();\r\n              // this.notifyService.info(this.languageService.submitSuccess);\r\n              FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            }), map(() => {\r\n              return response;\r\n            }));\r\n          } else {\r\n            this.formLoadingService.hide();\r\n            // this.notifyService.info(this.languageService.submitSuccess);\r\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            return of(response);\r\n          }\r\n        } else {\r\n          return of(response);\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response.needInteraction) {\r\n          return from(new Promise((resolve) => {\r\n            this.submitter.excute(response, (interactionResponse: InteractionResponse) => {\r\n              // å¦ææ­¤æ¬¡æªæäº¤ï¼èéæ©åå¾å°äºæµç¨å®ä¹IDï¼åå¨æ­¤æäº¤å®¡æ¹\r\n              console.log(response);\r\n              if (!response.procInstId && interactionResponse.processDefinitionId) {\r\n                this.submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResponse).subscribe(() => {\r\n                  resolve();\r\n                });\r\n              } else {\r\n                resolve();\r\n              }\r\n            });\r\n          }));\r\n        } else {\r\n          return of(null);\r\n        }\r\n      }),\r\n      catchError(\r\n        error => {\r\n          this.formLoadingService.hide();\r\n          // this.formErrorService.exception(this.languageService.submitFaild, error);\r\n          return of(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * æäº¤å®¡æ¹(å¸¦å¥å£åæ®ä½¿ç¨wfæ§ä»¶)\r\n   * @param bizBillID ä¸å¡åæ®Id\r\n   * @param bizDefKey å¥å£åæ®Id\r\n   * @param options ä¸ä¸æåæ°\r\n   * @param variables å¯éåæ°\r\n   */\r\n  public submitApproveWithBizDefKeyUseControl(bizBillID: string, bizDefKey: string, options: any = {}, variables?: any) {\r\n    if (!bizBillID) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!bizDefKey) {\r\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!options || typeof options !== 'object') {\r\n      options = {};\r\n    }\r\n    const payload: any = {\r\n      dataId: bizBillID,\r\n      bizDefKey,\r\n      ...options\r\n    };\r\n    // å¤çvariablesåæ°\r\n    if (variables) {\r\n      if (variables.startsWith('{') && variables.endsWith('}')) {\r\n        try {\r\n          variables = JSON.parse(variables);\r\n        } catch {\r\n          console.log('variables parse failed!');\r\n          variables = {};\r\n        }\r\n      }\r\n      payload.variables = variables;\r\n    }\r\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);\r\n  }\r\n  /**\r\n   * å­è¡¨æäº¤å®¡æ¹\r\n   * @param bizDefKey å¥å£åæ®Id\r\n   * @param bizId ä¸å¡åæ®Idï¼ä¸»è¡¨ï¼\r\n   * @param childBizId ä¸å¡åæ®Idï¼ä»è¡¨ï¼\r\n   * @param options ä¸ä¸æåæ°\r\n   * @param variables å¯éåæ°\r\n   */\r\n  public childSubmitApproveWithBizDefKey(bizDefKey: string, bizId: string, childBizId: string, options: any = {}, variables?: any): Observable<any> {\r\n    // å¥å£åæ®ä¸è½ä¸ºç©º\r\n    if (!bizDefKey) {\r\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // ä¸»ä¸å¡åæ®Idä¸è½ä¸ºç©º\r\n    if (!bizId) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // ä»è¡¨ä¸å¡åæ®Idä¸è½ä¸ºç©º\r\n    if (!childBizId) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyChildBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!options || typeof options !== 'object') {\r\n      options = {};\r\n    }\r\n    const payload: any = {\r\n      dataId: `${bizId},${childBizId}`,\r\n      bizDefKey,\r\n      ...options\r\n    };\r\n    // å¤çvariablesåæ°\r\n    if (variables) {\r\n      if (variables.startsWith('{') && variables.endsWith('}')) {\r\n        try {\r\n          variables = JSON.parse(variables);\r\n        } catch {\r\n          console.log('variables parse failed!');\r\n          variables = {};\r\n        }\r\n      }\r\n      payload.variables = variables;\r\n    }\r\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);\r\n  }\r\n  /**\r\n   * åæ¶å®¡æ¹\r\n   * @deprecated å·²åºå¼ï¼è¯·ä½¿ç¨cancelSubmit\r\n   */\r\n  public cancelApprove(bizBillID: string): Observable<any> {\r\n    if (!bizBillID) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    const actionUri = 'canceltosubmitvoaction';\r\n\r\n    const restService = this.beActionService.getRestService();\r\n\r\n    const body = {\r\n      requestInfo: restService.buildRequestInfo(),\r\n      bizInstID: bizBillID,\r\n    };\r\n\r\n    this.formLoadingService.show();\r\n\r\n    const action$ = this.beActionService.executeAction(actionUri, 'PUT', null, null, body);\r\n    return action$.pipe(\r\n      switchMap(() => {\r\n        if (this.repository) {\r\n          const updating$ = this.repository.updateById(bizBillID);\r\n          return updating$.pipe(tap(() => {\r\n            this.formLoadingService.hide();\r\n            // this.notifyService.info(this.languageService.cancelApproveSuccess);\r\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);\r\n          }));\r\n        } else {\r\n          this.formLoadingService.hide();\r\n          // this.notifyService.info(this.languageService.cancelApproveSuccess);\r\n          FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);\r\n          return of();\r\n        }\r\n      }\r\n      ),\r\n      catchError(error => {\r\n        this.formLoadingService.hide();\r\n        // this.formErrorService.exception(this.languageService.cancelApproveFailed, error);\r\n        return of(error);\r\n      }));\r\n  }\r\n  /**\r\n   * åæ¶å®¡æ¹(æ¯æä¸»è¡¨ãå­è¡¨)\r\n   * @param procInstId æµç¨å®ä¾Id\r\n   */\r\n  public cancelSubmit(procInstId: string): Observable<any> {\r\n    if (!procInstId) {\r\n      this.notifyService.warning(this.languageService.procInsIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ procInstId: procInstId });\r\n  }\r\n  /**\r\n   * æ¥çæµç¨å¾\r\n   * @param procInstId æµç¨å®ä¾ID\r\n   */\r\n  viewProcess(procInstId: string) {\r\n    if (this.flowchartService) {\r\n      if (!procInstId) {\r\n        this.notifyService.warning(this.languageService.noProcessInstanceId, { hideTitle: true });\r\n        return;\r\n      }\r\n      return this.flowchartService.viewFlowChart(procInstId);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * è½¬æ¢éç½®å¤§å°å\r\n   * @param jsonObj Object\r\n   * @deprecated\r\n   */\r\n  private switchPrefixLetter(jsonObj: any, toUpper: boolean): any {\r\n    if (typeof (jsonObj) === 'object' && !!jsonObj) {\r\n      if (Array.isArray(jsonObj)) {\r\n        for (var i = 0; i < jsonObj.length; i++) {\r\n          this.switchPrefixLetter(jsonObj[i], toUpper);\r\n        }\r\n      } else {\r\n        for (const key of Object.keys(jsonObj)) {\r\n          var newKey = (toUpper ? key.substring(0, 1).toUpperCase() : key.substring(0, 1).toLowerCase()) + key.substring(1);\r\n          jsonObj[newKey] = jsonObj[key];\r\n          if (typeof jsonObj[key] === 'object') {\r\n            this.switchPrefixLetter(jsonObj[key], toUpper);\r\n          }\r\n          delete (jsonObj[key]);\r\n        }\r\n      }\r\n    }\r\n    return jsonObj;\r\n  }\r\n}\r\nexport { ApproveService };\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { CommandContext, Entity, FrameContext } from '@farris/devkit';\r\nimport { CloudprintService, OutputOptions, SourceOptions, OutputType, FileType, SourceFilterOptions, PrintType } from '@gsp-svc/cloudprint';\r\nimport { FormNotifyService } from './form-notify.service';\r\n// tslint:disable: unified-signatures\r\n// tslint:disable: max-line-length\r\n/**\r\n * æå°æå¡\r\n * @Scope FrameComponent\r\n */\r\n@Injectable()\r\nclass PrintService {\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    private languageService: LanguageService,\r\n    private printService: CloudprintService,\r\n    @Optional() private formNotifyService: FormNotifyService,\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * æå°åæ®\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param bizBillId ä¸å¡åæ®æ è¯\r\n   */\r\n  public printSingle(beMetaId: string, bizBillId: string) {\r\n    if (!bizBillId) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    return this.printArray(beMetaId, [bizBillId]);\r\n  }\r\n  /**\r\n   * æå°åæ®ï¼éè¿idæidsï¼\r\n   * @param beMetaId beåæ°æ®Id\r\n   * @param ids åæ®idæids\r\n   */\r\n  public printByIds(beMetaId: string, ids: string) {\r\n    if (!ids) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    const dataIds: Array<string> = ids.split(',').filter(item => item);\r\n    return this.printArray(beMetaId, dataIds);\r\n  }\r\n  /**\r\n   * æå°åæ®ï¼å¸¦ç»´åº¦ï¼\r\n   * @param beMetaId beåæ°æ®Id\r\n   * @param ids åæ®idæids\r\n   * @param dim1 ç»´åº¦1å¼\r\n   * @param dim2 ç»´åº¦2å¼\r\n   * @param billCategoryId åæ®ç±»åId\r\n   */\r\n  public printByIdsWithDimension(beMetaId: string, ids: string, dim1: string, dim2: string, billCategoryId?: string) {\r\n    if (!ids) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    const dataIds: Array<string> = ids.split(',').filter(item => item);\r\n    return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);\r\n  }\r\n  /**\r\n   * æå°å¤ä¸ªåæ®\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param dataIds ä¸å¡åæ®æ è¯æ°ç»\r\n   * @param dim1 ç»´åº¦1\r\n   * @param dim2 ç»´åº¦2\r\n   * @param billCategoryId ä¸å¡åæ®ç±»åId\r\n   */\r\n  public printArray(beMetaId: string, dataIds: string[], dim1?: any, dim2?: any, billCategoryId?: string) {\r\n    if (!dataIds || dataIds.length === 0) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    const sourceOptions: SourceOptions = this.buildSourceOptions({\r\n      dataIds: dataIds,\r\n      sourceId: beMetaId\r\n    });\r\n\r\n    const outputOptions: OutputOptions = this.buildOutputOptions();\r\n\r\n    if (typeof dim1 !== 'undefined') {\r\n      sourceOptions.FirstDimensionVal = dim1;\r\n    }\r\n    if (typeof dim2 !== 'undefined') {\r\n      sourceOptions.SecondDimensionVal = dim2;\r\n    }\r\n    if (typeof billCategoryId !== 'undefined') {\r\n      sourceOptions.billCategoryId = billCategoryId;\r\n    }\r\n    return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');\r\n  }\r\n\r\n  /**\r\n   * æç§BEåæ°æ¹å¼æ¹éæå°åæ®\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param filterCondition è¿æ»¤æ¡ä»¶\r\n   * @param sortCondition æåºæ¡ä»¶\r\n   * @param includeChildData åå«å­è¡¨æ°æ®\r\n   */\r\n  public printMulti(beMetaId: string, filterCondition: string, sortCondition: string, includeChildData: boolean = true) {\r\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\r\n    if (filterCondition) {\r\n      // ç»ä¸çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n      const filters = JSON.parse(filterCondition);\r\n      if (filters && filters.length > 0) {\r\n        filters[filters.length - 1].Relation = 0;\r\n      }\r\n      entryFilter.filterConditions = filters;\r\n    }\r\n\r\n    if (sortCondition) {\r\n      entryFilter.sortConditions = JSON.parse(sortCondition);\r\n    }\r\n    // sfo:SourceFilterOptions\r\n    const sourceFilterOptions: SourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });\r\n    const outputOptions: OutputOptions = this.buildOutputOptions();\r\n    return this.printService.outputBEDataWithFilter(sourceFilterOptions, outputOptions, 'tab');\r\n  }\r\n  /**\r\n   * æç§BEåæ°æ¹å¼æ¹éæå°åæ®(å¸¦ç»´åº¦)\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param filterCondition è¿æ»¤æ¡ä»¶\r\n   * @param sortCondition æåºæ¡ä»¶\r\n   * @param dim1 ç»´åº¦1value\r\n   * @param dim2 ç»´åº¦2value\r\n   * @param billCategoryId ä¸å¡åæ®ç±»åId\r\n   * @param includeChildData åå«å­è¡¨æ°æ®\r\n   */\r\n  public printMultiWithDimension(beMetaId: string, filterCondition: string, sortCondition: string, dim1: string, dim2: string, billCategoryId?: string, includeChildData: boolean = true) {\r\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\r\n    if (filterCondition) {\r\n      // ç»ä¸çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n      const filters = JSON.parse(filterCondition);\r\n      if (filters && filters.length > 0) {\r\n        filters[filters.length - 1].Relation = 0;\r\n      }\r\n      entryFilter.filterConditions = filters;\r\n    }\r\n\r\n    if (sortCondition) {\r\n      entryFilter.sortConditions = JSON.parse(sortCondition);\r\n    }\r\n    const sfo: SourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });\r\n    if (typeof dim1 !== 'undefined') {\r\n      sfo.FirstDimensionVal = dim1;\r\n    }\r\n    if (typeof dim2 !== 'undefined') {\r\n      sfo.SecondDimensionVal = dim2;\r\n    }\r\n    if (typeof billCategoryId !== 'undefined') {\r\n      sfo.billCategoryId = billCategoryId;\r\n    }\r\n    const outputOptions: OutputOptions = this.buildOutputOptions();\r\n    return this.printService.outputBEDataWithFilter(sfo, outputOptions, 'tab');\r\n  }\r\n  /**\r\n   * æé SourceOptions\r\n   * @param options options\r\n   */\r\n  private buildSourceOptions(options: { dataIds: string[], sourceId: string, [prop: string]: any }): SourceOptions {\r\n    const so: SourceOptions = {\r\n      DataIds: options && options.dataIds || undefined,\r\n      SourceId: options && options.sourceId || undefined,\r\n      FirstDimensionVal: options && options.dim1 || undefined,\r\n      SecondDimensionVal: options && options.dim2 || undefined,\r\n      RetrieveParam: options && options.retrieveParam || undefined,\r\n      FormatId: options && options.formatId || undefined,\r\n      billCategoryId: options && options.billCategoryId || undefined,\r\n      ServiceUnit: options && options.serviceUnit || undefined,\r\n      currentPage: options && options.currentPage || undefined,\r\n      pageRowCount: options && options.pageRowCount || undefined,\r\n      queryType: options && options.queryType || undefined,\r\n      queryServiceId: options && options.queryServiceId || undefined,\r\n      queryParam: options && options.queryParam || undefined\r\n    };\r\n    return so;\r\n  }\r\n  /**\r\n   * æé OutputOptions\r\n   * @param options options\r\n   */\r\n  private buildOutputOptions(options?: { [prop: string]: any }): OutputOptions {\r\n    const oo: OutputOptions = {\r\n      OutputType: options && options.outputType || OutputType.PRINT,\r\n      FileType: options && options.fileType || FileType.Html5,\r\n      Path: options && options.path || undefined,\r\n      DeviceId: options && options.deviceId || undefined,\r\n      printJob: options && options.printJob || undefined,\r\n      printerName: options && options.printerName || undefined,\r\n      printSetting: options && options.printSetting || undefined,\r\n      printType: options && options.printType || PrintType.Form\r\n    };\r\n    return oo;\r\n  }\r\n  /**\r\n   * æé SourceFilterOptions\r\n   * @param options options\r\n   */\r\n  private buildSourceFilterOptions(options: { sourceId: string, [prop: string]: any }): SourceFilterOptions {\r\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\r\n    const sfo: SourceFilterOptions & { [prop: string]: any } = {\r\n      SourceId: options.sourceId,\r\n      EntityFilter: options && options.entryFilter || entryFilter,\r\n      FirstDimensionVal: options && options.dim1 || undefined,\r\n      SecondDimensionVal: options && options.dim2 || undefined,\r\n      FormatId: options && options.formatId || undefined,\r\n      ServiceUnit: options && options.serviceUnit || undefined,\r\n      billCategoryId: options && options.billCategoryId || undefined,\r\n      currentPage: options && options.currentPage || undefined,\r\n      pageRowCount: options && options.pageRowCount || undefined,\r\n      queryParam: options && options.queryParam || undefined,\r\n      queryServiceId: options && options.queryServiceId || undefined,\r\n      queryType: options && options.queryType || undefined,\r\n      includeChildData: options && options.hasOwnProperty('includeChildData') ? options.includeChildData : true\r\n    };\r\n    return sfo;\r\n  }\r\n  /**\r\n   * å±ç¤ºéè¯¯æ¶æ¯\r\n   * @param message éè¯¯æ¶æ¯\r\n   */\r\n  private showWarning(message: string) {\r\n    if (this.notifyService) {\r\n      this.notifyService.warning(message, { hideTitle: true });\r\n    } else if (this.msgService) {\r\n      this.msgService.error(message);\r\n    }\r\n  }\r\n  private get notifyService(): FormNotifyService | null {\r\n    if (this.formNotifyService) {\r\n      return this.formNotifyService;\r\n    } else if (this.injector) {\r\n      return this.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    }\r\n    return null;\r\n  }\r\n  private get commandContext(): CommandContext | null {\r\n    return this['context'] || null;\r\n  }\r\n  private get frameContext(): FrameContext | null {\r\n    return this.commandContext && this.commandContext.frameContext || null;\r\n  }\r\n  private get injector(): Injector | null {\r\n    return this.frameContext && this.frameContext.injector || null;\r\n  }\r\n}\r\n\r\nexport { PrintService };\r\n","import { UploadFileInfo } from '@gsp-svc/formdoc-upload';\r\nimport { AttachmentInfo } from './types';\r\n\r\n/**\r\n * éä»¶ä¿¡æ¯å¤çå·¥å·ç±»\r\n */\r\nclass AttachmentUtil {\r\n\r\n  /**\r\n   * è½¬æ¢ä¸ºéä»¶ä¿¡æ¯æ°ç»\r\n   */\r\n  public static convertToAttachmentInfos(fileInfos: UploadFileInfo[]): AttachmentInfo[] {\r\n    if (!fileInfos) {\r\n      return [];\r\n    }\r\n    const attachmentInfos: AttachmentInfo[] = fileInfos.map((fileInfo: UploadFileInfo) => {\r\n      return this.convertToAttachmentInfo(fileInfo);\r\n    });\r\n    return attachmentInfos;\r\n  }\r\n\r\n  /**\r\n   * è½¬æ¢ä¸ºéä»¶ä¿¡æ¯\r\n   */\r\n  public static convertToAttachmentInfo(fileInfo: UploadFileInfo): AttachmentInfo {\r\n    const attachmentInfo: AttachmentInfo = {\r\n      attachmentId: fileInfo.metadataId,\r\n      fileName: fileInfo.fileName\r\n    };\r\n    return attachmentInfo;\r\n  }\r\n\r\n  /**\r\n   * è·åéä»¶åè¡¨ä¸­çç¬¬ä¸ä¸ªéä»¶\r\n   */\r\n  public static getFirstAttachmentInfo(attachmentInfos: AttachmentInfo[]) {\r\n    if (!attachmentInfos || attachmentInfos.length === 0) {\r\n      return;\r\n    }\r\n    const firstAttachmentInfo = attachmentInfos[0];\r\n    return firstAttachmentInfo;\r\n  }\r\n\r\n  /**\r\n   * æåéä»¶idæ°ç»\r\n   */\r\n  public static peekAttachmentIds(attachmentInfos: AttachmentInfo[]) {\r\n    if (!attachmentInfos) {\r\n      attachmentInfos = [];\r\n    }\r\n    const attachmentIds = attachmentInfos.map((attachmentInfo: AttachmentInfo) => {\r\n      return attachmentInfo.attachmentId;\r\n    });\r\n\r\n    return attachmentIds;\r\n  }\r\n\r\n}\r\n\r\nexport { AttachmentUtil };\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, switchMap, map } from 'rxjs/operators';\r\nimport { FrameContext, Entity, BindingData, BindingPathConverter } from '@farris/devkit';\r\nimport { BefRepository, BefDataPathUtil, ResponseInfo } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { AttachmentInfo, ServerAttachmentInfo } from './types';\r\nimport { AttachmentUtil } from './attachment.util';\r\n\r\n/**\r\n * éä»¶è°ç¨\r\n */\r\n@Injectable()\r\nclass AttachmentDataService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  constructor(private frameContext: FrameContext, private loadingService: FormLoadingService) {\r\n  }\r\n\r\n  /**\r\n   * æ´æ°éä»¶ä¿¡æ¯\r\n   */\r\n  public updateRow(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/updateattachment`;\r\n    const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);\r\n    const body = {\r\n      updateAttachInfo: serverAttachInfo,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    this.loadingService.show();\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.syncAttachmentInfosToClient();\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * éè¿å±æ§åæ´æ°éä»¶ä¿¡æ¯\r\n   * @param attachmentInfoFieldPath éä»¶å­æ®µ\r\n   * @param attachmentInfo éä»¶ä¿¡æ¯\r\n   */\r\n  public updateRowWithPropertyName(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/updateattachmentwithproptyname`;\r\n    const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);\r\n    const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();\r\n    const body = {\r\n      updateAttachInfo: serverAttachInfo,\r\n      propertyName,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    this.loadingService.show();\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.syncAttachmentInfosToClient();\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¹éåå»ºéä»¶è¡æ°æ®\r\n   */\r\n  public updateRows(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[]): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/batchuploadattachment`;\r\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\r\n    const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\r\n\r\n    const body = {\r\n      batchUploadInfo: serverAttachInfo,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¹éåå»ºéä»¶è¡æ°æ®\r\n   */\r\n  public updateRowsWithConfigs(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[], configs: { [prop: string]: any }): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/batchuploadattachment`;\r\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\r\n    // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\r\n\r\n    const body = {\r\n      batchUploadInfo: serverAttachInfo,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.appendAttachmentInfos(responseInfo.returnValue, configs);\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ ¹æ®å±æ§åæ¹éåå»ºéä»¶è¡æ°æ®\r\n   */\r\n  public updateRowsWithPropertyName(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[]): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/batchuploadattachmentwithproptyname`;\r\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\r\n    const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\r\n    const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();\r\n\r\n    const body = {\r\n      batchUploadInfo: serverAttachInfo,\r\n      propertyName,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * åå»ºæå¡å¨ç«¯éè¦çæ´æ°ä¿¡æ¯\r\n   */\r\n  private createUpdateAttachInfo(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): ServerAttachmentInfo {\r\n\r\n    const attachmentId = attachmentInfo.attachmentId;\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);\r\n    const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);\r\n\r\n    const serverAttachInfo: ServerAttachmentInfo = {\r\n      NodeCodes: nodeCodes,\r\n      HiretryIds: hiretryIds,\r\n      AttachmentIds: [attachmentId],\r\n      AttachmentId: attachmentId\r\n    };\r\n\r\n    return serverAttachInfo;\r\n  }\r\n\r\n  /**\r\n   * åå»ºæå¡å¨ç«¯éè¦çæ¹éæ°å¢éä»¶ä¿¡æ¯\r\n   */\r\n  private createBatchCreateAttachInfo(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo[]): ServerAttachmentInfo {\r\n    const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);\r\n\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);\r\n    const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);\r\n\r\n    const serverAttachInfo = {\r\n      NodeCodes: nodeCodes,\r\n      HiretryIds: hiretryIds,\r\n      AttachmentIds: attachmentIds,\r\n      AttachmentId: null\r\n    };\r\n\r\n    return serverAttachInfo;\r\n  }\r\n\r\n  /**\r\n   * åæ­¥æå¡å¨ç«¯ææ°ä¿¡æ¯å°å®¢æ·ç«¯\r\n   * @todo:\r\n   * 1ãä¸»å¯¹è±¡æ¹éæ°å¢æ¶ä¸æ¯æ\r\n   */\r\n  public syncAttachmentInfosToClient() {\r\n    const rootDataId = this.bindingData.list.currentId;\r\n    return this.repository.updateEntityById(rootDataId);\r\n  }\r\n\r\n  /**\r\n   * è¿½å ä¸»è¡¨æ°æ®å°å®¢æ·ç«¯\r\n   */\r\n  public appendAttachmentInfosToClient(listData: any[], isRootEntity: boolean): Observable<any[]> {\r\n    if (isRootEntity === true) {\r\n      const entities = this.repository.buildEntities(listData);\r\n      this.repository.entityCollection.addEntities(entities);\r\n      return of(listData);\r\n    } else {\r\n      const rootDataId = this.bindingData.list.currentId;\r\n      return this.repository.updateEntityById(rootDataId).pipe(\r\n        map(() => listData)\r\n      );\r\n    }\r\n  }\r\n  public appendAttachmentInfos(listData: any[], keyValues: { [prop: string]: any }): Observable<any[]> {\r\n    const entities = this.repository.buildEntities(listData);\r\n    this.repository.entityCollection.addEntities(entities);\r\n    // æ´æ°å®ä½ä½¿ä¹äº§çåæ´é\r\n    this.updateEntities(entities, keyValues);\r\n    return of(listData);\r\n  }\r\n  private updateEntities(entities: Entity[], keyValues: { [prop: string]: any }) {\r\n    entities.forEach((entity: Entity) => {\r\n      this.updateEntity(entity, keyValues);\r\n    });\r\n  }\r\n  private updateEntity(target: Entity, keyValues: { [prop: string]: any }) {\r\n    Object.keys(keyValues).forEach((key: string) => {\r\n      this.setValueByPath(target, key, keyValues[key]);\r\n    });\r\n  }\r\n  private setValueByPath(target: object, path: string, value: any) {\r\n    if (target) {\r\n      const paths = path.split('.');\r\n      if (paths.length <= 1) {\r\n        target[path] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport { AttachmentDataService };\r\n","import { Injectable, InjectFlags, Optional } from '@angular/core';\r\nimport { Observable, from, of, empty, EMPTY } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { UploadDialogService, UploadFileInfo, UploadLimit, DownloadService, FileState } from '@gsp-svc/formdoc-upload';\r\nimport { FileViewerService } from '@gsp-svc/file-viewer';\r\nimport { FrameContext, BindingData, BindingPathConverter, BindingList, DataPathUtil, DataPathCreator, EntityList, Entity } from '@farris/devkit';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { AttachmentUtil } from './attachment.util';\r\nimport { AttachmentDataService } from './attachment-data.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { EntityService } from '../entity-services/index';\r\nimport { BefRepository } from '@farris/bef';\r\n\r\n// tslint:disable: max-line-length\r\n/**\r\n * éä»¶æå¡\r\n */\r\n@Injectable()\r\nclass AttachmentService {\r\n\r\n  /**\r\n   * é»è®¤æ ¹ç®å½\r\n   */\r\n  private defaultRootDirId = '';\r\n\r\n  /**\r\n   * é»è®¤ç¶è·¯å¾\r\n   */\r\n  private get defaultParentDirName(): string {\r\n    return this.frameContext.bindingData.list.currentId;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * å¤è¯­æå¡\r\n   */\r\n  private languageService: LanguageService;\r\n\r\n  /**\r\n   * éä»¶é¢è§æå¡\r\n   */\r\n  private fileViewerService: FileViewerService;\r\n\r\n  /**\r\n   * å®ä½æå¡\r\n   */\r\n  private entityService: EntityService;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private attachDataService: AttachmentDataService,\r\n    private notifyService: FormNotifyService,\r\n    private uploadDialogService: UploadDialogService,\r\n    @Optional() private downloadService: DownloadService\r\n  ) {\r\n    this.setLanguageService();\r\n    this.fileViewerService = this.frameContext.injector.get<FileViewerService>(FileViewerService, null, InjectFlags.Optional);\r\n    this.entityService = this.frameContext.injector.get<EntityService>(EntityService, null, InjectFlags.Optional);\r\n    if (!this.downloadService && typeof DownloadService !== 'undefined') {\r\n      this.downloadService = this.frameContext.injector.get<DownloadService>(DownloadService, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®è¯­è¨æå¡\r\n   */\r\n  private setLanguageService() {\r\n    const injector = this.frameContext.injector;\r\n    this.languageService = injector.get<LanguageService>(LanguageService, null, InjectFlags.Optional);\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ä¸ä¼ åä¸ªæä»¶\r\n   * @param attachmentIdPath éä»¶åç å­æ®µçè·¯å¾ï¼å½¢å¦/attachInfo/attachmentIdï¼\r\n   * @param attachmentNamePath éä»¶åç§°å­æ®µçè·¯å¾\r\n   */\r\n  public uploadAndUpdateRow(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    uploadLimit.fileCount = 1;\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n    // è·åèçéä»¶idæ°ç»\r\n    const attachmentIdList = [];\r\n    let currentItem = null;\r\n    if (id) {\r\n      // ä¿®æ­£å½åè¡\r\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\r\n      if (bindingList.currentId !== id) {\r\n        bindingList.setCurrentId(id, true, true);\r\n      }\r\n      // å¦ææå®äºidåè·åæå®idçè¡\r\n      currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);\r\n    } else {\r\n      // æ²¡ææå®åä½¿ç¨å½åè¡ï¼å¯è½å­å¨å½åè¡åäºä»¶è¡ä¸ä¸è´çæåµï¼æ­¤æ¶åºè¯¥å¨å½ä»¤ä¸­ä¼ éidåæ°\r\n      currentItem = this.getCurrentRow(attachmentInfoFieldPath);\r\n    }\r\n    if (currentItem && currentItem.primaryKeyValue) {\r\n      const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);\r\n      if (attachmentIds && attachmentIds.length > 0) {\r\n        attachmentIdList.push.apply(attachmentIdList, attachmentIds);\r\n      }\r\n    }\r\n\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return empty();\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        // æ¯å¦ä¸ä¼ å¤æ­\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);\r\n        return this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸ä¼ åä¸ªæä»¶ï¼æ¯æå¤åï¼\r\n   * @param attachmentInfoFieldPath éä»¶åç å­æ®µçè·¯å¾ï¼å½¢å¦/attachInfo/attachmentIdï¼\r\n   * @param rootDirId éä»¶å­å¨æ ¹ç®å½\r\n   * @param parentDirName éä»¶å­å¨ç®å½\r\n   * @param fileType æä»¶ç±»åï¼like .txt,.docx\r\n   */\r\n  public uploadAndUpdateRowWithPropertyName(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    uploadLimit.fileCount = 1;\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n\r\n    // è·åèçéä»¶idæ°ç»\r\n    const attachmentIdList = [];\r\n    let currentItem = null;\r\n    if (id) {\r\n      // ä¿®æ­£å½åè¡\r\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\r\n      if (bindingList.currentId !== id) {\r\n        bindingList.setCurrentId(id, true, true);\r\n      }\r\n      // å¦ææå®äºidåè·åæå®idçè¡\r\n      currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);\r\n    } else {\r\n      // æ²¡ææå®åä½¿ç¨å½åè¡ï¼å¯è½å­å¨å½åè¡åäºä»¶è¡ä¸ä¸è´çæåµï¼æ­¤æ¶åºè¯¥å¨å½ä»¤ä¸­ä¼ éidåæ°\r\n      currentItem = this.getCurrentRow(attachmentInfoFieldPath);\r\n    }\r\n    if (currentItem && currentItem.primaryKeyValue) {\r\n      const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);\r\n      if (attachmentIds && attachmentIds.length > 0) {\r\n        attachmentIdList.push.apply(attachmentIdList, attachmentIds);\r\n      }\r\n    }\r\n\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        // æ¯å¦ä¸ä¼ å¤æ­\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);\r\n        return this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸ä¼ å¤ä¸ªæä»¶\r\n   */\r\n  public uploadAndBatchAddRows(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        return this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸ä¼ å¤ä¸ªæä»¶\r\n   */\r\n  public uploadAndBatchAddRowsWithPropertyName(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        return this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸è½½éä»¶ï¼æ ¹æ®éä»¶idï¼\r\n   */\r\n  public download(attachId: string, rootId?: string): any {\r\n    if (!attachId) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    rootId = rootId || 'default-root';\r\n    const url = this.getDownloadUrl([attachId], rootId);\r\n    // let url = '';\r\n    // if (rootId) {\r\n    //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;\r\n    // } else {\r\n    //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;\r\n    // }\r\n    window.open(url);\r\n    return of(true);\r\n  }\r\n  /**\r\n   * æ¹éä¸è½½éä»¶ï¼æ ¹æ®éä»¶idæ°ç»ï¼\r\n   */\r\n  public batchDownload(attachIds: string[], rootId: string): any {\r\n    if (!attachIds || attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // åªéæ©ä¸ä¸ªéä»¶æ¶æåä¸ªéä»¶ä¸è½½å¤ç\r\n    if (attachIds.length === 1) {\r\n      return this.download(attachIds[0], rootId);\r\n    }\r\n    // const attachIdsString = JSON.stringify(attachIds);\r\n    // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;\r\n    const url = this.getDownloadUrl(attachIds, rootId);\r\n    window.open(url);\r\n    return of(true);\r\n  }\r\n  /**\r\n   * è·åä¸è½½è·¯å¾\r\n   * @param metadataidlist éä»¶idæ°ç»\r\n   * @param rootId rootId\r\n   */\r\n  private getDownloadUrl(metadataidlist: Array<string>, rootId: string): string {\r\n    rootId = rootId || 'default-root';\r\n    if (this.downloadService) {\r\n      if (metadataidlist.length === 1) {\r\n        return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);\r\n      } else {\r\n        const attachIdsString = JSON.stringify(metadataidlist);\r\n        return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);\r\n      }\r\n    } else {\r\n      console.warn('å å®å¨é®é¢ï¼éä»¶ä¸è½½æä¾å®å¨æ ¡éªæºå¶ï¼éä»¶ä¸è½½åè½ééæ°ç¼è¯ã');\r\n      if (metadataidlist.length === 1) {\r\n        return `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${metadataidlist[0]}&rootid=${rootId}`;\r\n      } else {\r\n        const attachIdsString = JSON.stringify(metadataidlist);\r\n        return `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * ä¸è½½ï¼æ ¹æ®æ°æ®idï¼\r\n   */\r\n  public downloadByDataId(dataId: string, attachmentInfoFieldPath: string, rootId: string): Observable<any> {\r\n    if (!dataId) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const dataIds = [dataId];\r\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);\r\n    if (attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const attachId = attachIds[0];\r\n    return this.download(attachId);\r\n  }\r\n\r\n  /**\r\n   * æ¹éä¸è½½éä»¶\r\n   */\r\n  public batchDownloadByDataIds(dataIds: string[] | string, attachmentInfoFieldPath: string, rootId: string): Observable<any> {\r\n    if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {\r\n      dataIds = dataIds.split(',').filter(p => p);\r\n    }\r\n    if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const ids = [].concat(dataIds);\r\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);\r\n    if (attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    return this.batchDownload(attachIds, rootId);\r\n  }\r\n\r\n  /**\r\n   * æ ¹æ®éä»¶UDTå­æ®µçè·¯å¾é¢è§éä»¶\r\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\r\n   * @param rootDirId è·ç®å½id\r\n   * @param ids éä»¶id\r\n   */\r\n  public previewByAttachmentInfoFieldPath(attachmentInfoFieldPath: string, rootDirId: string, ids?: any) {\r\n    if (!attachmentInfoFieldPath || !rootDirId) {\r\n      throw new Error('attachmentInfoFieldPathårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    let attachIds = [];\r\n    let dataIds = [];\r\n    if (ids && ids.length > 0) {\r\n      if (typeof (ids) === 'string') {\r\n        dataIds.push(ids);\r\n      } else {\r\n        dataIds = ids;\r\n      }\r\n      attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);\r\n    } else {\r\n      attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\r\n    }\r\n    if (attachIds && attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    return this.previewByAttachmentIds(attachIds, rootDirId);\r\n  }\r\n  /**\r\n   * æ ¹æ®éä»¶UDTå­æ®µçè·¯å¾é¢è§å½åè¡çéä»¶\r\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewByAttachmentInfoFieldPathWithIndex(attachmentInfoFieldPath: string, rootDirId: string): Observable<any> {\r\n    if (!attachmentInfoFieldPath || !rootDirId) {\r\n      throw new Error('attachmentInfoFieldPathårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    const currentRow = this.getCurrentRow(attachmentInfoFieldPath);\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentFieldName = parentBindingPathArray.pop();\r\n    if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\r\n    if (attachIds && attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);\r\n    if (!attachmentId) {\r\n      throw new Error('è¦é¢è§çéä»¶idä¸å­å¨ï¼è¯·ç¡®è®¤');\r\n    } else {\r\n      return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);\r\n    }\r\n  }\r\n  /**\r\n   * æ ¹æ®ç®å½é¢è§éä»¶\r\n   * @param subDirName ç¶ç®å½åç§°\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewBySubDirName(subDirName: string, rootDirId: string): Observable<any> {\r\n    if (!subDirName || !rootDirId) {\r\n      throw new Error('subDirNameårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    const viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * æ ¹æ®ç®å½é¢è§æå®ç´¢å¼çéä»¶\r\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\r\n   * @param subDirName å­ç®å½åç§°\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewBySubDirNameWithIndex(attachmentInfoFieldPath: string, subDirName: string, rootDirId: string): Observable<any> {\r\n    if (!subDirName || !rootDirId) {\r\n      throw new Error('subDirNameårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\r\n    const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);\r\n    if (!attachmentId) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * æ ¹æ®éä»¶idæ°ç»é¢è§éä»¶\r\n   * @param attachmentIds éä»¶idæ°ç»\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewByAttachmentIds(attachmentIds: string[], rootDirId: string): Observable<any> {\r\n    const viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * æ ¹æ®éä»¶idæ°ç»é¢è§æå®ç´¢å¼çéä»¶\r\n   * @param attachmentIds éä»¶idæ°ç»\r\n   * @param rootDirId æ ¹ç®å½id\r\n   * @param attachmentId éä»¶Id\r\n   */\r\n  public previewFileListWithIndex(attachmentIds: string[], rootDirId: string, attachmentId: string) {\r\n    const viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * çæçæ¬å·\r\n   * @param versions åå²çæ¬å·\r\n   * @description é»è®¤ç¼ç è§åv1.0 v2.0 ...\r\n   */\r\n  public genVersion(versions: string[]) {\r\n    if (!versions) {\r\n      versions = [];\r\n    }\r\n    const mainCode = versions.length + 1;\r\n    return `V${mainCode}.0`;\r\n  }\r\n  /**\r\n   * æ´æ°éä»¶çæ¬ä¿¡æ¯\r\n   * @param versionField éä»¶çæ¬å­æ®µ\r\n   * @param historyField æ¯å¦åå²çæ¬å­æ®µ\r\n   * @param attachmentFieldPath éä»¶udtå­æ®µè·¯å¾\r\n   */\r\n  public updateAttachmentVersion(versionField: string, historyField: string, attachmentFieldPath: string) {\r\n    /**\r\n     * éåææéä»¶è¡\r\n     * æ¾å°æææ²¡æéä»¶çæ¬çè¡\r\n     * éåè¿äºè¡\r\n     * éè¿æä»¶åå»æ¥æ¾ååçä¸æéä»¶çæ¬å·çè¡ \r\n     * è¿äºè¡åå²çæ¬å­æ®µç½®ä¸ºtrue\r\n     * æ çæ¬å·çè¡ï¼çæ¬= ä¸è¡æ° + 1\r\n     * \r\n     */\r\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\r\n    // å¼¹åºéä»¶udtå­æ®µ\r\n    const attachmentField = bindingPaths.pop();\r\n    // è·åå°ææçéä»¶\r\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n    const befRepository = this.frameContext.repository as BefRepository<any>;\r\n    const entityManager = befRepository.entityManager;\r\n    const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);\r\n    const paths = dataPath.toArray().map((path: string) => {\r\n      if (path.startsWith('PropName:')) {\r\n        return path.split(':')[1];\r\n      } else {\r\n        return path;\r\n      }\r\n    });\r\n    if (attachmentBindingList) {\r\n      const attachments = attachmentBindingList.toJSON();\r\n      // åªå¤çæéä»¶çæåµ\r\n      if (attachments) {\r\n        const versionLessRows = attachments.filter(item => !item[versionField]);\r\n        versionLessRows.forEach(item => {\r\n          const fileName = item[attachmentField]['fileName'];\r\n          const versionedRows = attachments.filter(row => row[attachmentField]['fileName'] === fileName && row[versionField]);\r\n          paths.pop();\r\n          paths.push(`DataId:${item[attachmentBindingList.primaryKey]}`);\r\n          let entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\r\n          const version = this.genVersion(versionedRows);\r\n          entity[versionField] = version;\r\n          entity[historyField] = false;\r\n          // å¤çåå²è®°å½\r\n          versionedRows.forEach(row => {\r\n            paths.pop();\r\n            paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);\r\n            entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\r\n            entity[historyField] = true;\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public isAttachmentCanDelete(historyField: string, attachmentFieldPath: string) {\r\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\r\n    // å¼¹åºéä»¶udtå­æ®µ\r\n    bindingPaths.pop();\r\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n    const bindingObject = attachmentBindingList.currentItem;\r\n    if (bindingObject[historyField] === true) {\r\n      this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n  }\r\n  public updateAttachmentHistory(versionField: string, historyField: string, attachmentFieldPath: string) {\r\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\r\n    // å¼¹åºéä»¶udtå­æ®µ\r\n    const attachmentField = bindingPaths.pop();\r\n    // è·åå°ææçéä»¶\r\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n    // const befRepository = this.frameContext.repository as BefRepository<any>;\r\n    // const entityManager = befRepository.entityManager;\r\n    if (attachmentBindingList) {\r\n      const attachments = attachmentBindingList.toJSON();\r\n      const versionedRows = attachments.filter(item => item[versionField]);\r\n      const fileNameMap = new Map<string, Array<any>>();\r\n      const befRepository = this.frameContext.repository as BefRepository<any>;\r\n      const entityManager = befRepository.entityManager;\r\n      const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);\r\n      const paths = dataPath.toArray().map((path: string) => {\r\n        if (path.startsWith('PropName:')) {\r\n          return path.split(':')[1];\r\n        } else {\r\n          return path;\r\n        }\r\n      });\r\n      versionedRows.forEach(item => {\r\n        const fileName = item[attachmentField]['fileName'];\r\n        if (fileNameMap.has(fileName)) {\r\n          fileNameMap.get(fileName).push(item);\r\n        } else {\r\n          fileNameMap.set(fileName, [item]);\r\n        }\r\n      });\r\n      Array.from(fileNameMap.values()).forEach((array: Array<any>) => {\r\n        array.sort((x, y) => {\r\n          const xVersion = parseInt(x[versionField].replace(/[a-zA-Z\\.]/g, ''));\r\n          const yVersion = parseInt(y[versionField].replace(/[a-zA-Z\\.]/g, ''));\r\n          return yVersion - xVersion;\r\n        });\r\n        const row = array[0];\r\n        paths.pop();\r\n        paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);\r\n        const entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\r\n        entity[historyField] = false;\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * è·åå½åè§å¾æ¨¡åå½åè¡çéä»¶id\r\n   * @param attachmentInfoFieldPath éä»¶udtå­æ®µ\r\n   */\r\n  private getCurrentAttachmentId(attachmentInfoFieldPath: string) {\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentFieldName = parentBindingPathArray.pop();\r\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\r\n    const currentItem = bindingList.currentItem;\r\n    if (currentItem && currentItem.primaryKeyValue) {\r\n      return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * è·åå½åè¡\r\n   * @param attachmentInfoFieldPath udtå­æ®µ\r\n   */\r\n  private getCurrentRow(attachmentInfoFieldPath: string) {\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\r\n    const currentItem = bindingList && bindingList.currentItem;\r\n    return currentItem;\r\n  }\r\n  /**\r\n   * è·åæå®éä»¶ä¿¡æ¯è¡¨çæå®è¡\r\n   * @param attachmentInfoFieldPath \r\n   * @param primaryValue \r\n   * @returns \r\n   */\r\n  private getSpecialRow(attachmentInfoFieldPath: string, primaryValue: string) {\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\r\n    const currentItem = bindingList && bindingList.findById(primaryValue);\r\n    return currentItem;\r\n  }\r\n  /**\r\n   * è·ådataIdså¯¹åºEntityä¸çéä»¶idæ°ç»\r\n   */\r\n  private getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath: string, dataIds?: string[]): string[] {\r\n\r\n    // è§£æè·¯å¾\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentFieldName = parentBindingPathArray.pop();\r\n\r\n    // è·åéä»¶æå¨å®ä½çæ°æ®åè¡¨ï¼ä¸ä¼ édataIdsåæ°ï¼åè¿åå¨é¨\r\n    const entityListData = this.entityService.getEntityListData(parentBindingPathArray);\r\n    let filteredEntityListData = [];\r\n    if (dataIds && Array.isArray(dataIds) === true) {\r\n      filteredEntityListData = entityListData.filter((entityData: any) => {\r\n        return dataIds.indexOf(entityData.id) > -1;\r\n      });\r\n    } else {\r\n      filteredEntityListData = entityListData;\r\n    }\r\n\r\n    // è½¬æ¢ä¸ºéä»¶Idæ°ç»\r\n    const attachmentIds = [];\r\n    filteredEntityListData.forEach((entityData: any) => {\r\n      if (entityData[attachmentFieldName]) {\r\n        const attachmentId = entityData[attachmentFieldName]['attachmentId'];\r\n        if (attachmentId) {\r\n          attachmentIds.push(attachmentId);\r\n        }\r\n      }\r\n    });\r\n\r\n    return attachmentIds;\r\n  }\r\n}\r\n\r\nexport { AttachmentService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, forkJoin, Subject } from 'rxjs';\r\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\r\nimport { FrameContext, CommandContext, BindingPathConverter } from '@farris/devkit';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { AttachmentInfo } from './types';\r\nimport { AttachmentDataService } from './attachment-data.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { EntityService } from '../entity-services/index';\r\nimport { ListDataService, SubListDataService } from '../data-services/index';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\n/**\r\n * éä»¶ä¸ä¼ \r\n * @summary\r\n * fileExtendï¼å½åæä»¶ä¸ä¼ æé¢è§ç»ä»¶ä¼ éè¿æ¥çæ°æ®ï¼\r\n * fileExtendFieldPathï¼å½åéä»¶UDTçå­æ®µè·¯å¾ï¼\r\n * attachmentInfoï¼å½åéä»¶UDTæéçä¿¡æ¯ï¼\r\n */\r\n@Injectable()\r\nclass FileService {\r\n  private subject: Subject<{ fileInfoFieldPath: string, configs: string }>;\r\n  private attachmentInfos: AttachmentInfo[];\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private attachDataService: AttachmentDataService,\r\n    private entityService: EntityService,\r\n    private subListDataService: SubListDataService,\r\n    private notifyService: FormNotifyService,\r\n    private languageService: LanguageService,\r\n    private listDataService: ListDataService,\r\n    @Optional() private formLoadingService: FormLoadingService\r\n  ) {\r\n    this.subject = new Subject<{ fileInfoFieldPath: string, configs: string }>();\r\n    this.subject.pipe(debounceTime(500)).subscribe((data: { fileInfoFieldPath: string, configs: string }) => {\r\n      this.process(data.fileInfoFieldPath, data.configs);\r\n    });\r\n    this.attachmentInfos = [];\r\n  }\r\n\r\n  // #region ä¸ä¼ æä»¶\r\n\r\n  /**\r\n   * æ¹éæ·»å éä»¶è¡\r\n   */\r\n  public addFileRows(fileInfoFieldPath: string) {\r\n    const attachmentInfos = this.getAttachmentInfosToAddFromContext();\r\n    if (attachmentInfos.length === 0) {\r\n      this.notifyService.info('è¯·åä¸ä¼ éä»¶');\r\n    }\r\n    return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);\r\n  }\r\n  /**\r\n   * æ¹éæ·»å å¸¦éä»¶ç±»åçéä»¶è¡\r\n   * @param fileInfoFieldPath éä»¶udtå­æ®µ\r\n   * @param configs éä»¶æ©å±ä¿¡æ¯éç½® \r\n   * @description configséç½®å¦{\"billId\":\"{UISTATE~/root/billId}\",\"rowId\":\"{UISTATE~/root/rowId}\",\"attachmentType\":\"xueli\"}\r\n   */\r\n  public addFileRowsWithConfigs(fileInfoFieldPath: string, configs: string) {\r\n    const attachmentInfos = this.getAttachmentInfosToAddFromContext();\r\n    if (attachmentInfos.length === 0) {\r\n      this.notifyService.info('è¯·åä¸ä¼ éä»¶');\r\n    }\r\n    // let mapFields = null;\r\n    // if (typeof configs === 'string') {\r\n    //   // å»æé¦å°¾ç©ºæ ¼\r\n    //   configs = configs.trim();\r\n    // }\r\n    // if (configs.startsWith('{') && configs.endsWith('}')) {\r\n    //   try {\r\n    //     mapFields = JSON.parse(configs);\r\n    //   } catch {\r\n    //     throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n    //   }\r\n    // } else {\r\n    //   throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n    // }\r\n    this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);\r\n    this.subject.next({ fileInfoFieldPath, configs });\r\n    //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);\r\n  }\r\n  private process(fileInfoFieldPath: string, configs: string) {\r\n    if (this.attachmentInfos && this.attachmentInfos.length > 0) {\r\n      const attachmentInfos = this.attachmentInfos.concat([]);\r\n      let mapFields = null;\r\n      if (typeof configs === 'string') {\r\n        // å»æé¦å°¾ç©ºæ ¼\r\n        configs = configs.trim();\r\n      }\r\n      if (configs.startsWith('{') && configs.endsWith('}')) {\r\n        try {\r\n          mapFields = JSON.parse(configs);\r\n        } catch {\r\n          throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n        }\r\n      } else {\r\n        throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n      }\r\n      this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields).pipe(\r\n        tap(() => {\r\n          this.attachmentInfos = this.attachmentInfos.filter(item => !attachmentInfos.find(attachmentInfo => attachmentInfo.attachmentId === item.attachmentId));\r\n          if (this.attachmentInfos.length > 0) {\r\n            this.process(fileInfoFieldPath, configs);\r\n          }\r\n        })\r\n      ).subscribe();\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * è·åè¦æ·»å çéä»¶ä¿¡æ¯æ°ç»\r\n   */\r\n  private getAttachmentInfosToAddFromContext(): AttachmentInfo[] {\r\n    const fileExtends = this.getFileExtendsFromContext();\r\n    const attachmentInfos = this.convertToAttachmentInfos(fileExtends);\r\n    return attachmentInfos;\r\n  }\r\n\r\n  /**\r\n   * å°éä»¶ä¸ä¼ ç»ä»¶è¿åçéä»¶ä¿¡æ¯è½¬æ¢ä¸ºæå¡å¨ç«¯éè¦çæ ¼å¼\r\n   */\r\n  private convertToAttachmentInfos(fileExtends: FUploadFileExtend[]): AttachmentInfo[] {\r\n    if (!fileExtends) {\r\n      return [];\r\n    }\r\n\r\n    const attachmentInfos: AttachmentInfo[] = [];\r\n    fileExtends.forEach((fUploadOutPut: FUploadFileExtend) => {\r\n      const attachmentInfo: AttachmentInfo = {\r\n        attachmentId: fUploadOutPut.extend.metadataId,\r\n        fileName: fUploadOutPut.extend.fileName,\r\n      };\r\n      attachmentInfos.push(attachmentInfo);\r\n    });\r\n    return attachmentInfos;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region å é¤æä»¶\r\n\r\n  /**\r\n   * å é¤éä»¶è¡\r\n   */\r\n  public removeFileRows(fileInfoFieldPath: string): Observable<any> {\r\n    const dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);\r\n    if (dataIds.length === 0) {\r\n      this.notifyService.info('è¯·éæ©è¦å é¤çéä»¶');\r\n    }\r\n    const isSublist = fileInfoFieldPath.split('/').filter(p => p).length >= 2;\r\n    const removeObservables: Observable<any>[] = [];\r\n    if (isSublist) {\r\n      dataIds.forEach((dataId: string) => {\r\n        let removeObservable;\r\n        removeObservable = this.subListDataService.removeWithoutConfirm(dataId);\r\n        removeObservables.push(removeObservable);\r\n      });\r\n      return forkJoin(removeObservables);\r\n    } else {\r\n      return this.listDataService.removeRows(dataIds, false, null, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åè¦å é¤çæ°æ®\r\n   */\r\n  private getDataIdsToRemoveFromContext(fileExtendFieldPath: string): string[] {\r\n\r\n    // ä»ä¸ä¸æä¸­è·åè¦å¤ççéä»¶ä¿¡æ¯æ°ç»\r\n    const fileExtends = this.getFileExtendsFromContext();\r\n\r\n    // å°éä»¶æ°ç»è½¬æ¢ä¸ºå¯¹åºçæ°æ®id\r\n    const dataIds: string[] = [];\r\n    fileExtends.forEach((fileExtend: FUploadFileExtend) => {\r\n\r\n      // ä¸ä¼ å é¤åé¢è§å é¤ä¼ éè¿æ¥çfileIdçkeyå¯è½ä¸ä¸è´ï¼è¦åå¼å®¹\r\n      const fileId = fileExtend.extend.metadataId;\r\n      const dataId = this.convertFileIdToDataId(fileId, fileExtendFieldPath);\r\n      dataIds.push(dataId);\r\n    });\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * æ ¹æ®è·¯å¾è·åéä»¶å­æ®µå¼æ°ç»\r\n   * @param fieldPath å­æ®µè·¯å¾\r\n   */\r\n  private convertFileIdToDataId(fileId: string, fileExtendFieldPath: string): string {\r\n\r\n    // è§£æè·¯å¾\r\n    const fileBindingPath = BindingPathConverter.toBindingPathArray(fileExtendFieldPath);\r\n    const fileFieldName = fileBindingPath.pop();\r\n    const fileListBindingPath = fileBindingPath;\r\n\r\n    // è·åéä»¶idæ°ç»\r\n    const entityListData = this.entityService.getEntityListData(fileListBindingPath);\r\n    const targetEntityData = entityListData.find((entityData: any) => {\r\n      if (entityData[fileFieldName]) {\r\n        const attachmentId = entityData[fileFieldName]['attachmentId'];\r\n        if (attachmentId === fileId) {\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return targetEntityData.id;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region å¶ä»å·¥å·æ¹æ³\r\n\r\n  /**\r\n   * ä»ä¸ä¸æä¸­è·åè¦å¤ççéä»¶ä¿¡æ¯æ°ç»\r\n   * @summary\r\n   * ä¸ºäºç»ä¸åä¸ªåå¤ä¸ªéä»¶çå¤çæ¹å¼ï¼ç»ä¸åè£ä¸ºæ°ç»\r\n   */\r\n  private getFileExtendsFromContext(): FUploadFileExtend[] {\r\n\r\n    const commandContext = this['context'] as CommandContext;\r\n    const eventParam = commandContext.eventParam;\r\n    if (!eventParam) {\r\n      return [];\r\n    }\r\n\r\n    let fileExtends: any[];\r\n    if (Array.isArray(eventParam) === false) {\r\n      fileExtends = [eventParam];\r\n    } else {\r\n      fileExtends = eventParam.concat([]);\r\n    }\r\n\r\n    return fileExtends as FUploadFileExtend[];\r\n  }\r\n  // #endregion\r\n}\r\n\r\nexport { FileService };\r\n","import { Injectable, ComponentFactoryResolver, ReflectiveInjector, Provider, ComponentRef, InjectFlags, NgModuleFactory, Injector, Optional } from '@angular/core';\r\nimport { BsModalService, ModalOptions } from '@farris/ui-modal';\r\nimport { FarrisFormService } from './farris-form.service';\r\nimport { FrameContext, FrameComponent, BindingList } from '@farris/devkit';\r\nimport { of, Observable, Subject } from 'rxjs';\r\nimport { LanguageService } from './languag.service';\r\nimport { switchMap } from 'rxjs/operators';\r\ndeclare const System: any;\r\n/**\r\n * å¼¹çªæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass DialogService {\r\n\r\n  private _providers: Provider[] = [];\r\n\r\n  private languageService: LanguageService;\r\n  private modalRef: any;\r\n  private modals: any = {};\r\n\r\n  constructor(\r\n    private modalService: BsModalService,\r\n    private farrisFormService: FarrisFormService,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private frameContext?: FrameContext,\r\n    @Optional() private injector?: Injector\r\n  ) {\r\n    this.setLanguageService();\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®è¯­è¨æå¡\r\n   */\r\n  private setLanguageService() {\r\n\r\n    // FrameContextä¸ä¸å®å­å¨ï¼ä¸è½ç´æ¥ç¨\r\n    const frameContext = this.getFrameContext();\r\n    if (frameContext) {\r\n      const injector = this.frameContext.injector;\r\n      this.languageService = injector.get<LanguageService>(LanguageService, null, InjectFlags.Optional);\r\n    }\r\n\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åframeContext\r\n   */\r\n  private getFrameContext() {\r\n    if (this.frameContext) {\r\n      return this.frameContext\r\n    }\r\n    if (this['context'] && this['context']['frameContext']) {\r\n      return this['context']['frameContext'];\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åComponentFactoryResolver\r\n   */\r\n  private getComponentFactoryResolver() {\r\n    const frameContext = this.getFrameContext();\r\n    let componentFactoryResolver: any;\r\n    if (frameContext) {\r\n      componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);\r\n    }\r\n    return componentFactoryResolver;\r\n  }\r\n\r\n  /**\r\n   * è·åconfigè½¬æ¢æå¯¹è±¡ç±»åçéç½®\r\n   * @param config éç½®é¡¹\r\n   */\r\n  private getObjectTypeConfig(config: any) {\r\n    let objectTypeConfig: any\r\n    if (typeof config === 'string') {\r\n      if (config.length) {\r\n        try {\r\n          objectTypeConfig = JSON.parse(config);\r\n        } catch {\r\n          throw new Error(config + 'ä¸æ¯åæ³çjsonå­ç¬¦ä¸²');\r\n        }\r\n      } else {\r\n        objectTypeConfig = {};\r\n      }\r\n    } else if (typeof config === 'object') {\r\n      objectTypeConfig = Object.assign({}, config);\r\n    } else {\r\n      throw new Error('å¡«åå¯¹è±¡æ ¼å¼æjsonå­ç¬¦ä¸²');\r\n    }\r\n    return objectTypeConfig;\r\n  }\r\n\r\n  /**\r\n   * åå»ºæ¨¡ææ¡åç»ä»¶å®ä¾ï¼å¹¶è¿åæ¨¡ææ¡å®ä¾ï¼åäºå¼å®¹èè¡¨åå¤ç\r\n   * @param config å¼¹çªéç½®\r\n   * @param compnent å¼¹çªåç»ä»¶\r\n   * @param uiStateObject ç»å®å¼¹çªåç»ä»¶uiState\r\n   */\r\n  private createModalComponentRef(config: any, component: any, uiStateObject: any) {\r\n    let componentRef: any;\r\n    let modalRef: any;\r\n    const frameContext = this.getFrameContext();\r\n    const componentFactoryResolver = this.getComponentFactoryResolver();\r\n    if (frameContext && componentFactoryResolver) {\r\n      const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);\r\n      const modalContentInjector = ReflectiveInjector.resolveAndCreate([...this._providers], frameContext.injector);\r\n      componentRef = contentCmptFactory.create(modalContentInjector);\r\n      if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\r\n        if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {\r\n          Object.keys(uiStateObject).forEach(item => {\r\n            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);\r\n          });\r\n        }\r\n        // éå isDialogåæ°\r\n        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n      }\r\n      modalRef = this.modalService.show(componentRef, config);\r\n    } else {\r\n      modalRef = this.modalService.show(component, config);\r\n    }\r\n    return modalRef;\r\n  }\r\n  /**\r\n   * \r\n   * @param config æ¨¡ææ¡æ¬èº«éç½®\r\n   * @param modalId æ¨¡ææ¡åç»ä»¶çid\r\n   * @param uiStateConfig æ¨¡ææ¡åç»ä»¶uiStateä¸çå­æ®µåå¼\r\n   */\r\n  public openModal(config: any = {}, modalId: string, uiStateConfig: any = {}, callback?: (modalRef: any) => any) {\r\n\r\n    const configObj = this.getObjectTypeConfig(config);\r\n    const uiStateObject = this.getObjectTypeConfig(uiStateConfig);\r\n    let innerCompopnent = this.farrisFormService.getControls(modalId);\r\n    let modalRef: any;\r\n    let modalConfig: any = {\r\n      title: this.languageService.defaultDialogTitle,\r\n      width: 760,\r\n      height: 450,\r\n      showButtons: false\r\n    };\r\n    modalConfig = Object.assign(modalConfig, configObj);\r\n    const onClosingHandler = modalConfig.beforeClose;\r\n    // tslint:disable: no-string-literal\r\n    const cancelChanges = modalConfig['cancelChanges'] || false;\r\n    modalConfig.beforeClose = (ref) => {\r\n      // if (ref && ref.modalRef && ref.modalRef.content) {\r\n      //   ref.modalRef.content.isDialogRootComponent = false;\r\n      // }\r\n      if (!!onClosingHandler && typeof onClosingHandler === 'function') {\r\n        return onClosingHandler(ref).pipe(\r\n          switchMap(result => {\r\n            if (result) {\r\n              if (cancelChanges) {\r\n                return this.cancelChanges(ref);\r\n              }\r\n            }\r\n            return of(result);\r\n          })\r\n        );\r\n      }\r\n      if (cancelChanges) {\r\n        return this.cancelChanges(ref);\r\n      } else {\r\n        return of(true);\r\n      }\r\n    };\r\n    const remote = modalConfig.remote || false;\r\n    if (remote) {\r\n      this.createRemoteForm(modalConfig, uiStateObject).subscribe(\r\n        (modalRef: any) => {\r\n          this.modalRef = modalRef;\r\n          if (modalRef && !!modalRef.content) {\r\n            modalRef.content.isDialogRootComponent = true;\r\n            modalRef.content.dialogRef = modalRef;\r\n          }\r\n          callback(modalRef);\r\n        }\r\n      );\r\n    } else {\r\n      if (!innerCompopnent) {\r\n        console.error(`è·åæ§ä»¶å¤±è´¥ï¼modalId=${modalId}`);\r\n        return;\r\n      }\r\n      if (typeof innerCompopnent === 'string') {\r\n        modalConfig.dialogType = 'iframe';\r\n        modalRef = this.modalService.show(innerCompopnent, modalConfig);\r\n      } else if (typeof innerCompopnent === 'function') {\r\n        modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);\r\n      } else if (typeof innerCompopnent === 'object') {\r\n        // å¦ææ¯å¯¹è±¡ ä¸ä½¿ç¨ç¬ç«jså è½½\r\n        // {\"useIsolateJs\":true,\"modalInstance\":f()}\r\n        if (innerCompopnent.useIsolateJs) {\r\n          const parameter = {\r\n            injector: this.injector,\r\n            uiState: uiStateObject,\r\n            modalService: this.modalService,\r\n            dialogServiceInstance: this,\r\n            eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,\r\n            componentCallback: this.componentModify,\r\n            modalInstanceCallback: this.modalInstanceCallback\r\n          };\r\n          // ä¼å¨åé¨è¿è¡\r\n          return innerCompopnent[\"modalInstance\"](modalConfig, parameter);\r\n\r\n        } else {\r\n          modalRef = this.modalService.show(innerCompopnent, modalConfig);\r\n        }\r\n      }\r\n\r\n      this.modalRef = modalRef;\r\n      if (modalRef && !!modalRef.content) {\r\n        modalRef.content.isDialogRootComponent = true;\r\n        modalRef.content.dialogRef = modalRef;\r\n      }\r\n      return modalRef;\r\n    }\r\n  }\r\n\r\n  private componentModify(cmpRef: any, parameter: {\r\n    uistate: any\r\n  }) {\r\n    if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {\r\n      if (parameter.uistate && typeof parameter.uistate === \"string\") {\r\n        parameter.uistate = JSON.parse(parameter.uistate);\r\n      }\r\n      if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {\r\n        Object.keys(parameter.uistate).forEach(item => {\r\n          cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);\r\n        });\r\n      }\r\n      // éå isDialogåæ°\r\n      cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n    }\r\n  }\r\n\r\n  private modalInstanceCallback(cmpRef: any, options: any, parameter: any) {\r\n    if (parameter && parameter.modalService) {\r\n      const modalRef = parameter.modalService.show(cmpRef, options);\r\n      if (modalRef && !!modalRef.content) {\r\n        modalRef.content.isDialogRootComponent = true;\r\n        modalRef.content.dialogRef = modalRef;\r\n      }\r\n      return modalRef;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æå¼ç±»å¸®å©è¡¨å\r\n   * @param frameId \r\n   * @param params \r\n   * @param configs \r\n   * @description å¼¹åºè¡¨ååå¼¹åºè¿ç«¯è¡¨ååºå«ä¸ºå¼¹åºè¡¨åéè¦éç½®å­æ®µæ å°\r\n   */\r\n  public openHelpModal(frameId: string, params: string, configs?: any) {\r\n    const events = this['context']['eventParam'] || {};\r\n    // å¡çåºæ¯ä¼ éè¿æ¥çäºä»¶æ¯èªå®ä¹å¯¹è±¡ï¼åå«eventåoptionsãåè¡¨åºæ¯ä¼ éè¿æ¥çäºä»¶åæ°æ¯æ®éäºä»¶åæ°ï¼å¨åæ°ä¸­æºå¸¦äºeditor.options\r\n    const event = events.event || events;\r\n    const options = events.options || events.editor && events.editor.options || {};\r\n    const context = events && events.context;\r\n    const subject = new Subject<any>();\r\n    // modalIdå¨ä¸¤ç§åºæ¯ä¸é½éè¦ï¼ç¨æ¥åºåå®ä¾\r\n    const { modalId = null } = options;\r\n    if (!configs) {\r\n      configs = '{}';\r\n    }\r\n    if (typeof configs === 'string' && configs.length > 0) {\r\n      configs = JSON.parse(configs);\r\n    }\r\n    const { remote = false, currentRow = false } = configs || {};\r\n    if (remote) {\r\n      const mapFields = configs.mapFields || {};\r\n      options.remote = remote + '?v=' + new Date().valueOf();\r\n      this.openModal(options, modalId, params, (dialogRef: any) => {\r\n        // æ°å¢eventåæ°ï¼ä¸ºäºä»¥åè°ç¨eventä¸­çformControlä»¥ééåè¡¨ä¸­çæºè½è¾å¥æ¡å¼¹åºè¡¨åï¼\r\n        this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };\r\n      });\r\n    } else {\r\n      const dialogRef = this.openModal(options, modalId, params);\r\n      const mapFields = options.mapFields || {};\r\n      this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };\r\n    }\r\n    return subject;\r\n  }\r\n\r\n  /**\r\n   * æå¼å¸¦åè°çå¼¹çª\r\n   * @param frameId frameId\r\n   * @param params åæ°\r\n   * @param configs éç½®\r\n   * @returns \r\n   */\r\n  public openCallbackableModal(frameId: string, params?: string, configs?: any) {\r\n    if (!configs) {\r\n      configs = '{}';\r\n    }\r\n    if (typeof configs === 'string') {\r\n      configs = JSON.parse(configs);\r\n    }\r\n    const events = this['context'] && this['context']['eventParam'] || {};\r\n    const options = events.options;\r\n    options.showButtons = true;\r\n    options.buttons = [\r\n      {\r\n        text: this.languageService.confirm, cls: 'btn btn-primary', handle: (event: any) => {\r\n          const { modalId = null } = options || {};\r\n          if (modalId) {\r\n            const modal = this.modals[modalId];\r\n            const { subject = null, dialogRef = null, frameId = null, handle = null, currentRow = false } = modal || {};\r\n            const formCmp = dialogRef.content; // å¼¹çªè¡¨åå®ä¾\r\n            if (!formCmp) {\r\n              throw new Error('ä¸æ¯æçè¡¨åç±»å');\r\n            }\r\n            let selectedItems = [];\r\n            if (currentRow === true) {\r\n              const frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\r\n              if (!frameComtext) {\r\n                throw new Error(`æ æçframeIdï¼${frameId}ï¼è¯·ç¡®è®¤å½ä»¤ä¸­frameIdæ­£ç¡®ã`);\r\n              }\r\n              const bindingList = frameComtext.bindingData.getList() as BindingList;\r\n              const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();\r\n              selectedItems = [item];\r\n            } else {\r\n              const rows: Map<string, any> = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\r\n              selectedItems = Array.from(rows.values());\r\n            }\r\n            if (typeof handle === 'function') {\r\n              handle(selectedItems);\r\n            }\r\n            if (subject) {\r\n              subject.next();\r\n            }\r\n            dialogRef.close(options);\r\n          }\r\n        }\r\n      },\r\n      { text: this.languageService.cancel, cls: 'btn', handle: (event: any) => this.cancel(options) }\r\n    ];\r\n\r\n    const subject = new Subject<any>();\r\n    const { modalId = null } = options;\r\n    const { remote = null, currentRow = false } = configs;\r\n    const handle = options.handle;\r\n    if (remote) {\r\n      options.remote = remote + '?v=' + new Date().valueOf();\r\n      this.openModal(options, modalId, params, (dialogRef: any) => {\r\n        this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };\r\n      });\r\n    } else {\r\n      const dialogRef = this.openModal(options, modalId, params);\r\n      this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };\r\n    }\r\n    return subject;\r\n  }\r\n\r\n  /**\r\n   * ç¡®è®¤æé®äºä»¶\r\n   * @param args \r\n   */\r\n  public confirm() {\r\n    const events = this['context'] && this['context']['eventParam'] || {};\r\n    const { modalId = null } = events || {};\r\n    if (modalId) {\r\n      const modal = this.modals[modalId];\r\n      const { subject = null, dialogRef = null, mapFields = {}, frameId = null, currentRow = false, event = null, context = null } = modal || {};\r\n      const formCmp = dialogRef.content; // å¼¹çªè¡¨åå®ä¾\r\n      if (!formCmp) {\r\n        throw new Error('ä¸æ¯æçè¡¨åç±»å');\r\n      }\r\n      // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;\r\n\r\n      let selectedItems = [];\r\n      if (currentRow === true) {\r\n        const frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\r\n        if (!frameComtext) {\r\n          throw new Error(`æ æçframeIdï¼${frameId}ï¼è¯·ç¡®è®¤å½ä»¤ä¸­frameIdæ­£ç¡®ã`);\r\n        }\r\n        const bindingList = frameComtext.bindingData.getList() as BindingList;\r\n        const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();\r\n        if (item && Object.keys(item).length > 0) {\r\n          selectedItems = [item];\r\n        }\r\n      } else {\r\n        const rows: Map<string, any> = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\r\n        selectedItems = Array.from(rows.values());\r\n      }\r\n\r\n      // æ å°å­æ®µæ°æ®\r\n      // è·åè§¦åå¼¹æ¡çç¼è¾å¨çå­æ®µåç§°\r\n      let editorField = undefined;\r\n      if (event && event.editor && event.editor.column) {\r\n        editorField = event.editor.column.field;\r\n      }\r\n      if (selectedItems && selectedItems.length && mapFields) {\r\n        Object.keys(mapFields).forEach(k => {\r\n          const targetField: string = mapFields[k];\r\n          const sourceKeyArray = k.split('.').filter(p => p) || [];\r\n          const targetValue = selectedItems.map(r => {\r\n            return sourceKeyArray.reduce((target, key) => {\r\n              if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {\r\n                return target[key];\r\n              } else {\r\n                return '';\r\n              }\r\n            }, r);\r\n          }).join(',');\r\n          if (targetField) {\r\n            const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n            const targetFields = targetField.split(',').filter(p => p);\r\n            targetFields.forEach(target => {\r\n              if (context) {\r\n                this.setValueByPath(context, target, targetValue);\r\n              } else {\r\n                const targetPath = target.split('.');\r\n                this.frameContext.bindingData.setValue(bindingPaths.concat(targetPath), targetValue, true, true);\r\n              }\r\n\r\n            });\r\n          }\r\n        })\r\n      }\r\n      if (subject) {\r\n        subject.next();\r\n      }\r\n      dialogRef.close();\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶æé®äºä»¶\r\n   * @param args \r\n   */\r\n  public cancel(event?: any) {\r\n    const events = event || this['context'] && this['context']['eventParam'] || {};\r\n    const { modalId = null } = events || {};\r\n    if (modalId) {\r\n      const modal = this.modals[modalId];\r\n      const { subject = null, dialogRef = null } = modal || {};\r\n      if (subject) {\r\n        subject.next();\r\n      }\r\n      if (dialogRef) {\r\n        dialogRef.close();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶æå¡å¨åæ´é\r\n   */\r\n  private cancelChanges(ref: any): Observable<boolean> {\r\n    if (ref && ref.modalRef && ref.modalRef.content) {\r\n      const component: FrameComponent = ref.modalRef.content as FrameComponent;\r\n      if (component && component.context) {\r\n        const repository = component.context.repository || null;\r\n        if (repository) {\r\n          return repository.cancelChanges().pipe(switchMap(() => of(true)));\r\n        }\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * å³é­è¯¥å¼¹çª\r\n   */\r\n  closeModal() {\r\n    if (this.modalRef) {\r\n      this.modalRef.close();\r\n    }\r\n  }\r\n  /**\r\n   * åå»ºè¿ç¨è¡¨åå®ä¾\r\n   * @param options dialogéç½®\r\n   * @param uiState uistate\r\n   */\r\n  private createRemoteForm(options: any, uiState: any): Subject<any> {\r\n    const remote = options.remote || false;\r\n    const subject = new Subject<any>();\r\n    if (remote) {\r\n      let moduleName = options.moduleName || null;\r\n      System.import(remote).then((module: any) => {\r\n        if (!moduleName) {\r\n          moduleName = Object.keys(module).pop();\r\n        }\r\n        const moduleFactory = module[moduleName] as NgModuleFactory<any>;\r\n        const moduleRef = moduleFactory.create(this.injector);\r\n        const entryComponent = moduleRef['_bootstrapComponents'][0];\r\n        if (entryComponent) {\r\n          const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);\r\n          const componentRef: ComponentRef<any> = compFactory.create(this.injector);\r\n\r\n          if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\r\n            if (typeof uiState === 'object' && Object.keys(uiState).length) {\r\n              Object.keys(uiState).forEach(item => {\r\n                componentRef.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);\r\n              });\r\n            }\r\n            // éå isDialogåæ°\r\n            componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n          }\r\n          const modalRef = this.modalService.show(componentRef, options);\r\n          subject.next(modalRef);\r\n        } else {\r\n          throw new Error(`æ æ³æ¾å°å¥å£è¡¨åï¼`);\r\n        }\r\n      });\r\n    }\r\n    return subject;\r\n  }\r\n  private setValueByPath(target: object, path: string, value: any) {\r\n    if (target) {\r\n      const paths = path.split('.');\r\n      if (paths.length <= 1) {\r\n        target[path] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { DialogService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FarrisSidebarService } from '@farris/ui-sidebar';\r\nimport { Entity, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n\r\n/**\r\n * ä¾§è¾¹æ æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass SidebarService {\r\n\r\n  private get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private sidebarUIService: FarrisSidebarService,\r\n    private messageService: FormMessageService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  openSidebar() {\r\n    this.sidebarUIService.sendIsOpen(true);\r\n  }\r\n\r\n  closeSidebar() {\r\n    this.sidebarUIService.sendIsOpen(false);\r\n  }\r\n\r\n  /**\r\n   * å³é­åååæ¶åæ´\r\n   */\r\n  confirmBeforeClosingSidebar(): Observable<boolean> {\r\n\r\n    // æ£æ¥æ¯å¦æåæ´ï¼æ²¡æåæ´ç´æ¥å³é­\r\n    const ifChangesExist = this.repository.entityManager.checkAllEntityChanges();\r\n    if (!ifChangesExist) {\r\n      return of(true);\r\n    }\r\n\r\n    // ç¡®è®¤æ¯å¦å³é­\r\n    const confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);\r\n    const result$ = confirm$.pipe(\r\n      switchMap((confirmResult: boolean) => {\r\n        if (confirmResult === false) {\r\n          return of(false);\r\n        } else {\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * ç»§ç»­å³é­ä¾§è¾¹æ \r\n   */\r\n  public continueClosingSidebar(): Observable<boolean> {\r\n    return of(true);\r\n  }\r\n\r\n  /**\r\n   * é»æ­¢ä¾§è¾¹æ å³é­\r\n   */\r\n  public stopClosingSidebar(): Observable<boolean> {\r\n    return of(false);\r\n  }\r\n}\r\n\r\nexport { SidebarService };\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * è¿æ»¤æ¡ä»¶æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass FilterService {\r\n\r\n  /**\r\n   * ç§»é¤åå«ç¹æ®å¼çè¿æ»¤æ¡ä»¶\r\n   * @todoï¼åå®filtersä¸ºå­ç¬¦ä¸²ï¼å¾è®¾è®¡æ¶æ¯ææ°ç»åæ°åä¸èµ·è°æ´\r\n   */\r\n  public stripFiltersWithSpecialValue(filters: string, specialValues: string): string {\r\n    if (!filters || !specialValues) {\r\n      return filters;\r\n    }\r\n\r\n    const filterArray: any[] = JSON.parse(filters);\r\n    const strippedFilterArray = filterArray.filter((filter: any) => {\r\n      const filterValue = this.getFilterValue(filter);\r\n      return specialValues.indexOf(filterValue) === -1;\r\n    });\r\n\r\n    return JSON.stringify(strippedFilterArray);\r\n  }\r\n\r\n  /**\r\n   * è·åè¿æ»¤æ¡ä»¶çå¼\r\n   * @todoï¼æ²¡æFilteræ¥å£å®ä¹ï¼ç®åäº§åé¨å¤§å°åä¸ä¸è´ã\r\n   */\r\n  private getFilterValue(filter: any) {\r\n    return filter.Value || filter.value;\r\n  }\r\n}\r\n\r\nexport { FilterService };\r\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\r\nexport const FARRIS_FORM_COMPONENTS = new InjectionToken<{[key: string]: any}>('è¡¨åå¼¹åºçªå£æéèç»ä»¶åè¡¨');\r\n\r\n/**\r\n * è¡¨åæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class ComponentManagerService {\r\n\r\n    private controls: { [key: string]: any} = {};\r\n\r\n    appendControl(key: string, cmpIns: any) {\r\n        this.controls[key] = cmpIns;\r\n    }\r\n\r\n    getControl(key: string) {\r\n        if (this.controls[key]) {\r\n            return this.controls[key];\r\n        } else {\r\n            console.warn(`æªæ¾å°Keyä¸º${key}çç»ä»¶ï¼`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n","import { Observable, of,Subject } from \"rxjs\";\r\n\r\nexport class AuthorityService {\r\n    queryOperationAuthority(operationIds: Array<string>): Observable<Map<string, boolean>>{\r\n        var queryResult = new Map<string, boolean>();\r\n        var i=0;\r\n        for(var j=0; j<operationIds.length; j++) {\r\n            queryResult.set(operationIds[j], i%2==0? true:false);\r\n            i++;            \r\n        }\r\n\r\n        var dummyResult = new Subject<Map<string, boolean>>();\r\n        setTimeout(() => {\r\n            dummyResult.next(queryResult);\r\n        }, 0);\r\n\r\n        return dummyResult;\r\n    }\r\n}\r\n","import { AuthorityService } from './authority.service';\r\nimport {Observable, empty} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * æé\r\n */\r\nexport class Authority {\r\n    \r\n    constructor() {\r\n        this.operationLabelMap = new Map<string, string>();\r\n        this.authOfLabel = new Map<string, boolean>();\r\n    }\r\n\r\n    /**\r\n     * ä»labelå°æä½æéIDçæ å°ï¼labelå¯ä»¥æ¯button idç­\r\n     */\r\n    private operationLabelMap: Map<string, string>;\r\n\r\n    /**\r\n     * è®°å½labelå¯¹äºçæä½æéï¼æ¯å¦éè¿\r\n     */\r\n    private authOfLabel: Map<string, boolean>;\r\n\r\n    /**\r\n     * è®¾ç½®labelå°operation idçæ å°\r\n     * @param labelMap \r\n     */\r\n    protected setLabelMap(labelMap: Object) {\r\n        for(var i in labelMap) {\r\n            this.operationLabelMap.set(i, labelMap[i]);\r\n        }\r\n        this.operationLabelMap.forEach((opId, label) => {\r\n            this[label] = false;\r\n        });        \r\n    }\r\n    \r\n    /**\r\n     * åå§åæéçå¼\r\n     */\r\n    initialize(authorityService: AuthorityService): Observable<void> {\r\n        if(this.operationLabelMap && this.operationLabelMap.size>0) {\r\n            return authorityService.queryOperationAuthority(Array.from(this.operationLabelMap.values())).pipe(\r\n                map((operationAuth) => {\r\n                    this.operationLabelMap.forEach((opId, label) => {\r\n                        this.authOfLabel.set(label, operationAuth.has(opId) ? operationAuth.get(opId) : false);\r\n                    });\r\n                })\r\n            );\r\n        }else{\r\n            return empty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è¿åæä½æéï¼å³ç¨æ·æ¯å¦æ¥æLabelæå¯¹åºçæé\r\n     * @param label æ ç­¾ï¼å¯ä»¥æ¯button idç­\r\n     */\r\n    hasOperation(label:string) {        \r\n        return this.authOfLabel.has(label) && this.authOfLabel.get(label);\r\n    }\r\n\r\n    // è¿åå­æ®µæé\r\n    // hasField(field:string)\r\n}","/*\r\n * @Author: aalizzwell\r\n * @Date: 2019-05-30 10:35:09\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-15 19:22:13\r\n */\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { LanguageService } from './languag.service';\r\nimport { FormErrorService } from './error/form-error.service';\r\nimport { IExceptionHandler, AppContext } from '@farris/devkit';\r\n\r\n/**\r\n * é»è®¤å¼å¸¸å¤çå¨\r\n * @scope æ²¡ææä¾å¯¹åºProvider\r\n */\r\n@Injectable()\r\nclass ExceptionHandler implements IExceptionHandler {\r\n  private appContext: AppContext = null;\r\n  constructor(\r\n    private formErrorService: FormErrorService,\r\n    @Optional() private languageService: LanguageService,\r\n    private applicationContext: AppContext,\r\n  ) {\r\n    if (this.languageService == null) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n  public setContext(applicationContext: AppContext) {\r\n    this.appContext = applicationContext;\r\n  }\r\n  public handle(error: any) {\r\n    if (!!this.formErrorService) {\r\n      this.formErrorService.exception(this.languageService.loadFailed, error);\r\n    }\r\n  }\r\n}\r\n\r\nexport { ExceptionHandler };\r\n","import { Provider } from '@angular/core';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { HideEventService } from '../form-loading/hide-event.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { CheckService } from '../check.service';\r\nimport { DataCheckService } from '../data-check.service';\r\n\r\nimport { EventService } from '../event.service';\r\nimport { MenuStateService } from '../menu-state.service';\r\nimport { RouterService } from '../router.service';\r\nimport { UIStateService } from '../ui-state.service';\r\nimport { StateMachineService } from '../state-machine.service';\r\nimport { ValidationService } from '../validation.service';\r\nimport { BindingDataService } from '../binding-data.service';\r\nimport { CommandService } from '../command-service';\r\n\r\nimport { QuerystringService } from '../querystring';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\r\nimport { GridMiddlewareService } from '../grid.middleware.service';\r\nimport { ParamService } from '../param.service';\r\n\r\nimport { BeActionService } from '../be-action.service';\r\nimport { ApproveService } from '../approve.service';\r\nimport { PrintService } from '../print.service';\r\nimport { AttachmentDataService, AttachmentService } from '../attachment/index';\r\nimport { ApplicationParamService } from '../application-param.service';\r\nimport {\r\n  EntityTraversingService, EntityManipulationService, EntityAggregationService,\r\n  EntityListService, EntityService\r\n} from '../entity-services/index';\r\nimport { LanguageService } from '../languag.service';\r\nimport { DialogService } from '../dialog.service';\r\nimport { SidebarService } from '../sidebar-service';\r\nimport { FarrisFormService } from '../farris-form.service';\r\nimport { FilterService } from '../filter-service';\r\nimport { ChangeItemService } from '../change-item.service';\r\n\r\n// data-services\r\nimport { ListDataService } from '../data-services/list-data.service';\r\nimport { TreeDataService } from '../data-services/tree-data.service';\r\nimport { CardDataService } from '../data-services/card-data.service';\r\nimport { SubListDataService } from '../data-services/sub-list-data.service';\r\nimport { KeybindingService } from '../keybinding-service';\r\nimport { FocusInvalidService } from '../focus-invalid.service';\r\nimport { SubTreeDataService } from '../data-services/sub-tree-data-service';\r\n\r\n/**\r\n * éççèProviders\r\n */\r\nconst FARRIS_COMMAND_SERVICE_PROVIDERS: Provider[] = [\r\n\r\n  // è¡¨åæ¨¡åæ³¨å¥ï¼18ä¸ªï¼\r\n  FormLoadingService,\r\n  FormMessageService,\r\n  FormNotifyService,\r\n  FormErrorService,\r\n  CheckService,\r\n  DataCheckService,\r\n  EventService,\r\n  FilterService,\r\n  KeybindingService,\r\n  LanguageService,\r\n  ParamService,\r\n  MenuStateService,\r\n  QuerystringService,\r\n  RuntimeFrameworkService,\r\n  NavigationEventService,\r\n  NavigationService,\r\n  RouterService,\r\n  ApplicationParamService,\r\n\r\n  // FrameComponentï¼20ä¸ªï¼\r\n  ValidationService,\r\n  FocusInvalidService,\r\n  ChangeItemService,\r\n  UIStateService,\r\n  StateMachineService,\r\n  BindingDataService,\r\n  CommandService,\r\n\r\n  // entity-services\r\n  EntityTraversingService,\r\n  EntityManipulationService,\r\n  EntityAggregationService,\r\n  EntityListService,\r\n  EntityService,\r\n\r\n  ListDataService,\r\n  TreeDataService,\r\n  SubTreeDataService,\r\n  CardDataService,\r\n  SubListDataService,\r\n\r\n  BeActionService,\r\n  ApproveService,\r\n  PrintService,\r\n  AttachmentDataService,\r\n  AttachmentService,\r\n  NavigationMiddlewareService,\r\n  GridMiddlewareService,\r\n  SidebarService,\r\n  FarrisFormService,\r\n  DialogService,\r\n];\r\n\r\nexport { FARRIS_COMMAND_SERVICE_PROVIDERS };\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { NumberFormat, UserSettings } from '@farris/devkit';\r\nimport { FrmI18nSettingService } from '@gsp-sys/rtf-common';\r\n\r\n@Injectable()\r\nexport class UserSettingsService implements UserSettings {\r\n  constructor(private injector: Injector, @Optional() private frmI18nSettingService: FrmI18nSettingService) { }\r\n\r\n  /**\r\n   * ç¨æ·æ¶åºå­ç¬¦ä¸²\r\n   */\r\n  public get timeZone(): string {\r\n    return this.timezone && this.timezone.id || null;\r\n  }\r\n  /**\r\n   * æ¶åºåç§»\r\n   */\r\n  public get timeZoneOffset(): number {\r\n    const offset = this.timezone && this.timezone.baseOffset;\r\n    if (offset !== null && offset !== undefined) {\r\n      return offset;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * é»è®¤è¯­è¨\r\n   */\r\n  public get defaultLanguage(): string {\r\n    return this.i18nSetting && this.i18nSetting.defaultLanguage || null;\r\n  }\r\n  /**\r\n   * æ¥ææ ¼å¼åå­ç¬¦ä¸²\r\n   * like: yyyy-MM-dd\r\n   */\r\n  public get dateFormat(): string {\r\n    return this.i18nSetting && this.i18nSetting.userDateFormat || null;\r\n  }\r\n  /**\r\n   * æ¶é´æ ¼å¼\r\n   * like: HH:MM:ss\r\n   */\r\n  public get timeFormat(): string {\r\n    return this.i18nSetting && this.i18nSetting.userTimeFormat || null;\r\n  }\r\n  public get dateTimeFormat(): string {\r\n    const dateFormat = this.i18nSetting && this.i18nSetting.userDateFormat || 'yyyy-MM-dd';\r\n    const timeFormat = this.i18nSetting && this.i18nSetting.userTimeFormat || 'HH:mm:ss';\r\n    return `${dateFormat} ${timeFormat}`;\r\n  }\r\n  /**\r\n   * å°åæ ¼å¼\r\n   */\r\n  public get addressFormat(): any {\r\n    return null;\r\n  }\r\n  /**\r\n   * æ°å­æ ¼å¼\r\n   */\r\n  public get numberFormat(): NumberFormat {\r\n    if (this.i18nSetting && this.i18nSetting.userNumberFormat) {\r\n      const userNumberFormat = this.i18nSetting.userNumberFormat;\r\n      const numberFormat: NumberFormat = {\r\n        negativeSign: userNumberFormat.negativeSign || '-',\r\n        numberDecimalDigits: userNumberFormat.numberDecimalDigits || 2,\r\n        numberDecimalSeparator: userNumberFormat.numberDecimalSeparator || '.',\r\n        numberGroupSeparator: userNumberFormat.numberGroupSeparator || ','\r\n      };\r\n      return numberFormat;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * åºåä»£ç \r\n   */\r\n  public get regionCode(): string {\r\n    return this.i18nSetting && this.i18nSetting.userRegionCode || null;\r\n  }\r\n  /**\r\n   * ç¨æ·éç½®\r\n   */\r\n  private get userSettings(): any {\r\n    const userSettings = this.frmI18nSettingService && this.frmI18nSettingService.getSetting();\r\n    return userSettings;\r\n  }\r\n  private get timezone() {\r\n    return this.i18nSetting && this.i18nSetting.timezone;\r\n  }\r\n  private get i18nSetting() {\r\n    return this.userSettings && this.userSettings.i18nSetting;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { WorkFlow } from \"./types\";\r\n\r\n@Injectable()\r\nexport class WorkFlowMessageService {\r\n  constructor() { }\r\n  /**\r\n   * çå¬å·¥ä½æµæ¶æ¯\r\n   * @param callback åè°\r\n   */\r\n  public listen(callback: (e: WorkFlow.IMessage) => void) {\r\n    window.addEventListener('message', function (event) {\r\n      var message = event.data as WorkFlow.IMessage;\r\n      if (message) {\r\n        message.sender = event.source;\r\n      }\r\n      if (typeof callback === 'function') {\r\n        callback(message);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * ç»å·¥ä½æµè¡¨ååéæ¶æ¯\r\n   * @param message \r\n   */\r\n  public send(message: WorkFlow.IMessage): void {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    let win: Window = window;\r\n    if (message.target) {\r\n      win = message.target as Window || window;\r\n      delete message.target;\r\n    }\r\n    if (win) {\r\n      win.postMessage(message, '*');\r\n    }\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { WorkFlow } from \"./types\";\r\nimport { WorkFlowMessageService } from \"./work-flow-message.service\";\r\n\r\n/**\r\n * å·¥ä½æµæ¶æ¯\r\n * @warning ç¦æ­¢ä½¿ç¨è¡¨åä¸ä¸æï¼ææä¸ä¸æå¿é¡»ä»å¤é¨ä¼ å¥\r\n */\r\n@Injectable()\r\nexport class WorkFlowMessage {\r\n  private listeners: Map<string, any>;\r\n  constructor(private injector: Injector, private workFlowMessageService: WorkFlowMessageService) {\r\n    this.listeners = new Map<string, any>();\r\n  }\r\n  public setup() {\r\n    if (!this.workFlowMessageService) {\r\n      return;\r\n    }\r\n    this.workFlowMessageService.listen((message: WorkFlow.IMessage) => {\r\n      if (!this.listeners || this.listeners.size < 1) {\r\n        return;\r\n      }\r\n      this.listeners.forEach((callback: any, key: string) => {\r\n        if (typeof callback === 'function') {\r\n          callback(message);\r\n        }\r\n      })\r\n    });\r\n  }\r\n  public addEventListener(callback: (event: MessageEvent) => void): string {\r\n    const id = `${new Date().valueOf().toString(16)}-${Math.ceil(Math.random() * 100)}`;\r\n    this.listeners.set(id, callback);\r\n    return id;\r\n  }\r\n  public removeEventListener(eventId: string): void {\r\n    if (!this.listeners || this.listeners.size < 1) {\r\n      return;\r\n    }\r\n    this.listeners.delete(eventId);\r\n  }\r\n}\r\n","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, AppContextManager, FrameContext, onFrameComponentInit } from \"@farris/devkit\";\r\nimport { from, Observable, of } from \"rxjs\";\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\nimport { concatMap, throwIfEmpty } from \"rxjs/operators\";\r\nimport { ValidationService } from \"../validation.service\";\r\nimport { WorkFlow } from \"./types\";\r\nimport { WorkFlowMessage } from \"./work-flow-message\";\r\nimport { WorkFlowMessageService } from \"./work-flow-message.service\";\r\n\r\n@Injectable()\r\nexport class WorkFlowMessageHandler implements onFrameComponentInit {\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private workFlowMessageService: WorkFlowMessageService, private workFlowMessage: WorkFlowMessage) {\r\n\r\n  }\r\n  public onComponentInit(frameContext: FrameContext) {\r\n    this.workFlowMessage.addEventListener(this.handle.bind(this));\r\n  }\r\n  public handle(message: WorkFlow.IMessage): void {\r\n    const source = message.sender as Window;\r\n    const data = message.data as WorkFlow.IMessageBody;\r\n    const commandName = data.command || null;\r\n    let resultTask: Observable<any> = null;\r\n    if (!commandName) {\r\n      return;\r\n    }\r\n    if (commandName == 'wf-required-verification') {\r\n      // å·¥ä½æµçå¿å¡«æ ¡éª\r\n      // å¦æ­¤è·åçæ¯å½åç»ä»¶çæ ¡éªæå¡ï¼åºè¯¥ænamespaceæ¥åºåï¼ä¸åçnamespaceéè¦åå«æ§è¡æ ¡éª\r\n      const formFrameContexts = this.getFormFrameContexts();\r\n      resultTask = from(formFrameContexts).pipe(\r\n        concatMap((frameContext: FrameContext) => {\r\n          var validation = frameContext.injector.get<ValidationService>(ValidationService, null);\r\n          if (validation) {\r\n            return validation.validateAll();\r\n          }\r\n          return of(true);\r\n        })\r\n      );\r\n    } else {\r\n      var command = this.frameContext.viewModel[commandName];\r\n      if (command) {\r\n        resultTask = command(data.arguments);\r\n      }\r\n    }\r\n    if (resultTask) {\r\n      const message: WorkFlow.IMessage = this.buildMessage(true, source, this.isChanged);\r\n      resultTask.pipe(throwIfEmpty()).subscribe((result) => {\r\n        // åæ¥æºæ¹åä¼ æ¶æ¯\r\n        this.workFlowMessageService.send(message);\r\n      }, () => {\r\n        message.data.result = false;\r\n        this.workFlowMessageService.send(message);\r\n      });\r\n    }\r\n  }\r\n  private buildMessage(result: boolean, target: any, dataChanged: boolean, type: string = 'message') {\r\n    const message: WorkFlow.IMessage = {\r\n      data: {\r\n        result,\r\n        dataChanged\r\n      },\r\n      type: type,\r\n      target: target,\r\n    };\r\n    return message;\r\n  }\r\n  private getFormFrameContexts(): FrameContext[] {\r\n    const appContextManager = this.injector.get<AppContextManager>(AppContextManager, null);\r\n    const formFrameContexts = [];\r\n    if (appContextManager) {\r\n      const appContexts: AppContext[] = appContextManager.getAppContexts();\r\n      if (appContexts && appContexts.length > 0) {\r\n        appContexts.forEach((appContext: AppContext) => {\r\n          const frameContexts: FrameContext[] = appContext.frameContextManager.getFrameContexts();\r\n          frameContexts.reduce((contexts: FrameContext[], frameContext: FrameContext) => {\r\n            const namespace = frameContext.namespace;\r\n            const index = contexts.findIndex((frame: FrameContext) => frame.namespace === namespace);\r\n            if (index === -1) {\r\n              const root = frameContext.getVirtualRootFrameContext();\r\n              contexts.push(root);\r\n            }\r\n            return contexts;\r\n          }, formFrameContexts);\r\n        });\r\n      }\r\n    }\r\n    return formFrameContexts;\r\n  }\r\n  /**\r\n   * æ¯å¦ææªä¿å­çåæ´\r\n   */\r\n  private get isChanged(): boolean {\r\n    const befRepository = this.frameContext.repository as BefRepository<any>;\r\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n  }\r\n}","import { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { FormWizardService } from '../form-wizard.service';\r\n\r\nimport { CheckService } from '../check.service';\r\nimport { DataCheckService } from '../data-check.service';\r\nimport { EventService } from '../event.service';\r\nimport { ComponentManagerService } from '../component-manager.service';\r\nimport { FilterService } from '../filter-service';\r\nimport { KeybindingService } from '../keybinding-service';\r\nimport { LanguageService } from '../languag.service';\r\n\r\nimport { MenuStateService } from '../menu-state.service';\r\nimport { QuerystringService } from '../querystring';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { ParamService } from '../param.service';\r\nimport { RouterService } from '../router.service';\r\nimport { ApplicationParamService } from '../application-param.service';\r\nimport { FilterConditionService } from '../filter-condition.service';\r\nimport { UserSettingsService } from '../user-settings.service';\r\nimport { UserSettingsToken } from '@farris/devkit';\r\nimport { WorkFlowMessage, WorkFlowMessageService } from '../work-flow/index';\r\n/**\r\n * æ¨¡åçº§æ³¨å¥(å±20ä¸ª)\r\n */\r\nconst FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS = [\r\n  FormLoadingService,\r\n  FormMessageService,\r\n  FormNotifyService,\r\n  FormErrorService,\r\n  FormWizardService,\r\n  CheckService,\r\n  DataCheckService,\r\n  EventService,\r\n  ComponentManagerService,\r\n  FilterService,\r\n  KeybindingService,\r\n  LanguageService,\r\n  ParamService,\r\n  MenuStateService,\r\n  QuerystringService,\r\n  RuntimeFrameworkService,\r\n  NavigationEventService,\r\n  NavigationService,\r\n  RouterService,\r\n  ApplicationParamService,\r\n  FilterConditionService,\r\n  { provide: UserSettingsToken, useClass: UserSettingsService },\r\n  WorkFlowMessageService,\r\n  WorkFlowMessage\r\n];\r\n\r\nexport { FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS }\r\n","/**\r\n * æ¯è¾ç¬¦\r\n */\r\nexport enum CompareType{\r\n    Equal = 0,\r\n    NotEqual = 1,\r\n    Greater = 2,\r\n    GreaterOrEqual = 3,\r\n    Less = 4,\r\n    LessOrEqual = 5,\r\n    Like = 6,\r\n    LikeStartWith = 7,\r\n    LikeEndWith = 8,\r\n    NotLike = 9,\r\n    NotLikeStartWith = 10,\r\n    NotLikeEndWith = 11,\r\n    Is = 12,\r\n    IsNot = 13,\r\n    In = 14,\r\n    NotIn = 15\r\n}","export enum ValueType{\r\n\r\n    /**\r\n     *å¼ç±»å\r\n     */\r\n    Value = 0,\r\n\r\n    /**\r\n     * è¡¨è¾¾å¼\r\n     */\r\n    Express = 1\r\n}","export enum RelationType{\r\n\r\n    Empty = 0,\r\n\r\n    /**\r\n     * ä¸\r\n     */\r\n    // And=0,\r\n    And = 1,\r\n\r\n    /**\r\n     * æ\r\n     */\r\n    // Or=1\r\n    Or = 2\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, TextValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class TextHandler implements IQueryConditionHandler {\r\n  convert(qc: QueryCondition) {\r\n    const tv = (qc.value as TextValue);\r\n    return [{\r\n      'FilterField': qc.fieldCode,\r\n      'Compare': CompareType.Like,\r\n      'Value': tv.value, // jsonè½¬ä¹ä¸encodeUriComponentä¸åï¼ä¸åºå¨æ­¤è½¬ä¹ï¼ç±jsonåé¨è½¬ä¹å³å¯\r\n      'Relation': RelationType.And,\r\n      'Expresstype': ValueType.Value\r\n    }];\r\n  }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, DateRangeValue} from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class DateRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const drv = (qc.value as DateRangeValue);\r\n        drv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n            'Value' : drv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        drv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n            'Value' : drv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, DropDownListValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class DropDownHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const ddv = (qc.value as DropDownListValue);\r\n        const arr = [];\r\n        ddv.value.forEach(dv => {\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : dv.value,\r\n                'Relation' : RelationType.Or,\r\n                'Expresstype':ValueType.Value\r\n            });\r\n        });\r\n        arr[0]['Lbracket'] = '(';\r\n        arr[arr.length -1]['Rbracket'] = ')';\r\n        arr[arr.length -1]['Relation'] = RelationType.And;\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, NumberRangeValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class NumberRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const nrv = (qc.value as NumberRangeValue);\r\n        (nrv.startValue != null) && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n            'Value' : nrv.startValue,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        (nrv.endValue != null) && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n            'Value' : nrv.endValue,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SmartHelpValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SmartHelpHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const shv = (qc.value as SmartHelpValue);\r\n        if(shv.value.length == 0) return [];\r\n\r\n        const arr = [];\r\n        if(shv.isInputText || shv.valueField == null){\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Like,\r\n                'Value' : shv.textValue,\r\n                'Relation' : RelationType.And,\r\n                'Expresstype':ValueType.Value\r\n            });\r\n            return arr;\r\n        }else{\r\n            shv.getOriginalValue().split(',').forEach(id => {\r\n                id && arr.push({\r\n                    'FilterField' : qc.fieldCode,\r\n                    'Compare' : CompareType.Equal,\r\n                    'Value' : id,\r\n                    'Relation' : RelationType.Or,\r\n                    'Expresstype':ValueType.Value\r\n                });\r\n            });\r\n            if(arr.length > 0){\r\n                arr[0]['Lbracket'] = '(';\r\n                arr[arr.length -1]['Rbracket'] = ')';\r\n                arr[arr.length -1]['Relation'] = RelationType.And;\r\n                return arr;\r\n            }else{\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleYearValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleYearHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const yv = (qc.value as SingleYearValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : yv.yearValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, CheckBoxValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class CheckBoxHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const tv = (qc.value as CheckBoxValue);\r\n        if(tv.value.length == 1)\r\n            return [{\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : tv.value[0],\r\n                'Relation' : RelationType.And,\r\n                'Expresstype':ValueType.Value\r\n            }];\r\n        tv.value.forEach(tvv => {\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : tvv,\r\n                'Relation' : RelationType.Or,\r\n                'Expresstype':ValueType.Value\r\n            });\r\n        });\r\n        arr[0]['Lbracket'] = '(';\r\n        arr[arr.length -1]['Rbracket'] = ')';\r\n        arr[arr.length -1]['Relation'] = RelationType.And;\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleMonthValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleMonthHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const mv = (qc.value as SingleMonthValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : mv.monthValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, MonthRangeValue} from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class MonthRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const mrv = (qc.value as MonthRangeValue);\r\n        mrv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n            'Value' : mrv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        mrv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n            'Value' : mrv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleDateTimeValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleDateTimeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const dtv = (qc.value as SingleDateTimeValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : dtv.datetimeValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleNumberValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleNumberHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const dtv = (qc.value as SingleNumberValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : dtv.numValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleDateValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleDateHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const dtv = (qc.value as SingleDateValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : dtv.dateValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, ComboLookUpValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class ComboLookUpHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const cluv = (qc.value as ComboLookUpValue);\r\n        if(cluv.value.length == 0 || !cluv.valueField){\r\n            return [];\r\n        }else{\r\n            const arr = [];\r\n            cluv.getOriginalValue().split(',').forEach(id => {\r\n                id && arr.push({\r\n                    'FilterField' : qc.fieldCode,\r\n                    'Compare' : CompareType.Equal,\r\n                    'Value' : id,\r\n                    'Relation' : RelationType.Or,\r\n                    'Expresstype':ValueType.Value\r\n                });\r\n            });\r\n            if(arr.length > 0){\r\n                arr[0]['Lbracket'] = '(';\r\n                arr[arr.length -1]['Rbracket'] = ')';\r\n                arr[arr.length -1]['Relation'] = RelationType.And;\r\n                return arr;\r\n            }else{\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, RadioValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class RadioHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const rv = (qc.value as RadioValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : rv.value,\r\n            'Relation' : RelationType.And,\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, InputGroupValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class InputGroupHandler implements IQueryConditionHandler {\r\n  convert(qc: QueryCondition) {\r\n    const igv = (qc.value as InputGroupValue);\r\n    const arr = [];\r\n\r\n    if (igv.isInputText || igv.textField == null) {\r\n      arr.push({\r\n        'FilterField': qc.fieldCode,\r\n        'Compare': CompareType.Like,\r\n        'Value': igv.textValue,//encodeURIComponent(igv.textValue),\r\n        'Relation': RelationType.And,\r\n        'Expresstype': ValueType.Value\r\n      });\r\n      return arr;\r\n    }\r\n    else {\r\n      igv.getOriginalValue().split(',').forEach(itemValue => {\r\n        itemValue && arr.push({\r\n          'FilterField': qc.fieldCode,\r\n          'Compare': CompareType.Equal,\r\n          'Value': itemValue,\r\n          'Relation': RelationType.Or,\r\n          'Expresstype': ValueType.Value\r\n        });\r\n      });\r\n      if (arr.length > 0) {\r\n        arr[0]['Lbracket'] = '(';\r\n        arr[arr.length - 1]['Rbracket'] = ')';\r\n        arr[arr.length - 1]['Relation'] = RelationType.And;\r\n        return arr;\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { ControlType } from \"@farris/component-querycondition\";\r\nimport { IQueryConditionHandler } from \"./handlers/iquerycondition.handler\";\r\nimport { TextHandler } from \"./handlers/text.handler\";\r\nimport { DateRangeHandler } from \"./handlers/daterage.handler\";\r\nimport { DropDownHandler } from \"./handlers/dropdown.handler\";\r\nimport { NumberRangeHandler } from \"./handlers/numberrage.handler\";\r\nimport { SmartHelpHandler } from \"./handlers/smarthelp.handler\";\r\nimport { SingleYearHandler } from './handlers/single-year.handler';\r\nimport { CheckBoxHandler } from './handlers/checkbox.handler';\r\nimport { SingleMonthHandler } from './handlers/single-month.handler';\r\nimport { MonthRangeHandler } from './handlers/monthrange.handler';\r\nimport { SingleDateTimeHandler } from './handlers/single-date-time.handler';\r\nimport { SingleNumberHandler } from './handlers/single-number.handler';\r\nimport { SingleDateHandler } from './handlers/single-date.handler';\r\nimport { ComboLookUpHandler } from './handlers/combolookup.handler';\r\nimport { RadioHandler } from './handlers/radio.handler';\r\nimport { InputGroupHandler } from './handlers/inputgroup.handler';\r\n\r\nexport class QueryConditionHandlerFactory {\r\n\r\n    private static _instance: QueryConditionHandlerFactory = null;\r\n    private queryConditionHandlerMapping: Map<ControlType, IQueryConditionHandler> = new Map<ControlType, IQueryConditionHandler>();\r\n    private constructor(){\r\n        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DateTimeRange, new DateRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DropDownList, new DropDownHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SmartHelp, new SmartHelpHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleYear, new SingleYearHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.BoolCheck, new CheckBoxHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleMonth, new SingleMonthHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleDateTime, new SingleDateTimeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleNumber, new SingleNumberHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleDate, new SingleDateHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.ComboLookUp, new ComboLookUpHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());\r\n    }\r\n    public static getInstance(){\r\n        if(!QueryConditionHandlerFactory._instance){\r\n            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();\r\n        }\r\n        return QueryConditionHandlerFactory._instance;\r\n    }\r\n\r\n    getHandler(controlType: ControlType): IQueryConditionHandler{\r\n        return this.queryConditionHandlerMapping.get(controlType);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { QueryCondition } from '@farris/component-querycondition';\r\nimport { IQueryConditionHandler } from './handlers/iquerycondition.handler';\r\nimport { QueryConditionHandlerFactory } from './querycondition.handler.factory';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { IQuerySolutionHandler,QuerySolutionComponent } from '@gsp-cmp/querysolution';\r\nimport { FrameworkSessionService } from '@farris/bef';\r\n\r\n@Injectable()\r\nexport class QuerySolutionService implements IQuerySolutionHandler {\r\n\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private frameworkSessionService: FrameworkSessionService\r\n  ) {\r\n\r\n  }\r\n\r\n  getUserSessionId(): string {\r\n    return this.frameworkSessionService.getUserSessionId();\r\n  }\r\n\r\n  public setFilterConditions(params: Array<QueryCondition>): void {\r\n    let queryConditionHandler: IQueryConditionHandler;\r\n    const filterConditionList = [];\r\n    params.forEach(qc => {\r\n      if (!qc.value.isEmpty()) {\r\n        queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());\r\n        queryConditionHandler && filterConditionList.push(...queryConditionHandler.convert(qc));\r\n      }\r\n    });\r\n    //è®¾ç½®å°NgCommand params.filterå±æ§ä¸ï¼{UISTATE~/root-component/filterConditionList}\r\n    this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);\r\n    // const originalConditions = this.getOriginalQueryConditions(filterConditionList);\r\n    this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);\r\n  }\r\n\r\n  public setCurrentQueryConditions(conditions: QueryCondition[]): void {\r\n    this.frameContext.uiState['currentQueryConditions'] = conditions;\r\n  }\r\n  /**\r\n   * è¿åè¿æ»¤æ¡ä»¶ä¸­çencode\r\n   * @param conditions æ¥è¯¢æ¹æ¡æé å®çè¿æ»¤æ¡ä»¶\r\n   */\r\n  // private getOriginalQueryConditions(conditions: Array<any>): Array<any> {\r\n  //   conditions = JSON.parse(JSON.stringify(conditions));\r\n  //   if (conditions && Array.isArray(conditions) && conditions.length > 0) {\r\n  //     conditions = conditions.map((item) => {\r\n  //       if (item.hasOwnProperty('Value')) {\r\n  //         item.Value = decodeURIComponent(item.Value);\r\n  //       } else if (item.hasOwnProperty('value')) {\r\n  //         const value = item.value;\r\n  //         delete item.value;\r\n  //         item.Value = decodeURIComponent(value);\r\n  //       }\r\n  //       return item;\r\n  //     });\r\n  //   }\r\n  //   return conditions;\r\n  // }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AppContext, FrameContext } from '@farris/devkit';\r\nimport { of } from 'rxjs';\r\nimport { concatMap, tap, delay } from 'rxjs/operators';\r\n\r\n/**\r\n * ç»æè¡¨åç¼è¾ç¶ææå¡\r\n */\r\n@Injectable()\r\nclass EndEditService {\r\n  constructor(private frameContext: FrameContext) {\r\n  }\r\n  /**\r\n   * ç»æç¼è¾\r\n   */\r\n  public endEdit() {\r\n    const appContext: AppContext = this.frameContext && this.frameContext.getFormAppContext();\r\n    return of(null).pipe(\r\n      tap(() => {\r\n        if (appContext) {\r\n          appContext.messagePipe.next({ type: 'endEdit' });\r\n        }\r\n      }),\r\n      // todo: ä¸åºè¯¥ä½¿ç¨delayï¼åºè¯¥ä¸²æµ\r\n      delay(5)\r\n    );\r\n  }\r\n}\r\nexport { EndEditService };\r\n","import { Injectable } from '@angular/core';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { of, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RemoteSummaryService {\r\n  constructor(private viewModel: ViewModel) { }\r\n  /**\r\n   * æå¡å¨ç«¯åè®¡\r\n   * @param methodName æå¡å¨ç«¯åè®¡èªå®ä¹å¨ä½åç§°\r\n   * @param filters è¿æ»¤æ¡ä»¶\r\n   */\r\n  public summary(methodName: string, filters: any) {\r\n    const repository = this.viewModel.frameContext.repository as BefRepository<any> || null;\r\n    if (repository) {\r\n      const proxy = repository.proxy;\r\n      if (proxy && typeof proxy[methodName] === 'function') {\r\n        return proxy[methodName](filters) as Observable<any>;\r\n      }\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { BindingList, ViewModel, BindingObject, Repository, Entity, FrameContext, BindingData, AppContext, BindingProperty, DataTypeInfo, createEntities, EntityList } from '@farris/devkit';\r\nimport { from, EMPTY, concat, of, Subject, Observable } from 'rxjs';\r\nimport { concatMap, catchError, tap, switchMap, last, map, delay } from 'rxjs/operators';\r\nimport { BefRepository, ResponseInfo } from '@farris/bef';\r\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { ComponentManagerService } from './component-manager.service';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\n\r\n// tslint:disable: max-line-length\r\n/**\r\n * æ¹éç¼è¾æå¡\r\n */\r\n@Injectable()\r\nexport class BatchEditService {\r\n  private formLoadingService: FormLoadingService;\r\n  private onHelpClose: Subject<any>;\r\n  constructor(\r\n    private injector: Injector,\r\n    private componentManagerService: ComponentManagerService,\r\n    private viewModel: ViewModel,\r\n    private repository: Repository<any>,\r\n    private batchEditDialogService: BatchEditDialogService,\r\n    private dateService: DateTimeHelperService,\r\n    private languageService: LanguageService,\r\n    private formNotifyService: FormNotifyService\r\n  ) {\r\n    this.formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    if (!this.formNotifyService) {\r\n      this.formNotifyService = this.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    }\r\n    this.onHelpClose = new Subject<any>();\r\n    this.onHelpClose.subscribe(result => {\r\n      const { frameId = '', mapFields = '', data = [] } = result || {};\r\n      this.onHelpCloseHandler(frameId, mapFields, data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * æå¼æ¹éç¼è¾å¯¹è¯æ¡\r\n   * @param frameId frameId\r\n   */\r\n  public openBatchEditDialog(frameId: string) {\r\n    if (!frameId) {\r\n      throw new Error('frameId is required.');\r\n    }\r\n    if (this.batchEditDialogService) {\r\n      let columns = [];\r\n      if (this.viewModel) {\r\n        const gridFrameContext: FrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);\r\n        const gridViewModel = gridFrameContext.viewModel;\r\n        if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {\r\n          // tslint:disable-next-line: no-string-literal\r\n          const gridColumnsAttrName = gridViewModel['dataGridColumnsName'];\r\n          columns = gridViewModel[gridColumnsAttrName];\r\n        } else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {\r\n          columns = gridViewModel['dataGridColumns'];\r\n        }\r\n        const ids: string[] = gridViewModel.uiState['ids'] || [];\r\n        if (!ids || ids.length < 1) {\r\n          this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        const dialogRef: any = this.batchEditDialogService.batchEdit(columns, {\r\n          rows: ids.length,\r\n          onConfirm: (inputs: Array<any>) => {\r\n            if (Array.isArray(ids) && ids.length > 0) {\r\n              // console.log('openBatchEditDialog', inputs);\r\n              const appContext = this.viewModel.frameContext.appContext;\r\n              appContext.changeDetectionController.detach();\r\n              inputs.forEach(input => {\r\n                this.updateBindingData(input, ids);\r\n              });\r\n              appContext.changeDetectionController.reattach();\r\n            }\r\n            dialogRef.close();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æå¼éèå¸®å©\r\n   * @param helpId å¸®å©id\r\n   */\r\n  public openHiddenHelp(helpId: string) {\r\n    if (!helpId) {\r\n      throw new Error('Argument error,helpId can`t be empty');\r\n    }\r\n    const componentManagerService = this.componentManagerService.getControl(helpId);\r\n    if (componentManagerService) {\r\n      componentManagerService.showDialog();\r\n    } else {\r\n      throw new Error(`the component which id is ${helpId} can't be found!`);\r\n    }\r\n  }\r\n  /**\r\n   * æ¸ç©ºå¸®å©å¾éï¼åªè½æè½½å°å¸®å©åäºä»¶ï¼\r\n   */\r\n  public clearHelpSelections() {\r\n    const self: any = this;\r\n    const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;\r\n    if (helpElement) {\r\n      helpElement.displayValue = '';\r\n    }\r\n  }\r\n  /**\r\n   * å¾éå½åè¡\r\n   * @param frameId frameId\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param primaryKeyValue å¸®å©ä¸»é®å­æ®µ\r\n   */\r\n  public checkCurrentRow(frameId: string, mapFields: string, primaryKeyValue: string) {\r\n    const self: any = this;\r\n    const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;\r\n    if (!primaryKeyValue) {\r\n      primaryKeyValue = 'id';\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    if (helpElement) {\r\n      frameId = frameId || this.viewModel.frameContext.frameId;\r\n      if (frameId) {\r\n        const frameContext = this.getFrameContextById(frameId);\r\n        if (frameContext) {\r\n          const bindingPath = frameContext.viewModel.bindingPath;\r\n          if (bindingPath) {\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            const bindingList = frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n            const currentRow = bindingList.currentItem;\r\n            const path = mappings[primaryKeyValue];\r\n            if (path) {\r\n              const value = this.getValueByPath(currentRow, path);\r\n              helpElement.displayValue = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä¸»è¡¨æ°æ®\r\n   * @param frameId ä¸»è¡¨æå¨frameçid\r\n   * @param mapFields å¸®å©å­æ®µä¸ä¸»è¡¨å­æ®µæ å°\r\n   * @description ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä¸»è¡¨æ°æ®\r\n   */\r\n  public batchAppend(frameId: string, mapFields: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    if (result && Array.isArray(result) && result.length > 0) {\r\n      const mappings = JSON.parse(mapFields);\r\n      // ä¸æ¯bindingPathåæframeIdå¤ç\r\n      let bindingPath = '/';\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      if (appContext) {\r\n        const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n        if (frameContext) {\r\n          bindingPath = frameContext.viewModel.bindingPath || '/';\r\n        } else {\r\n          throw new Error('frameId is invalid!');\r\n        }\r\n      }\r\n      const defaultValues = [];\r\n      result.forEach((item) => {\r\n        const defaultValue = {};\r\n        Object.keys(mappings).forEach((prop: string) => {\r\n          const value = this.getValueByPath(item, prop);\r\n          const fields = mappings[prop];\r\n          const groups: any[] = fields.split(',').filter(p => p);\r\n          groups.forEach(group => {\r\n            const paths = group.split('.').filter(p => p);\r\n            this.setValueByPath(defaultValue, paths.join('.'), value);\r\n          });\r\n        });\r\n        defaultValues.push(defaultValue);\r\n      });\r\n      this.formLoadingService.show();\r\n      return this.repository.batchAppend(defaultValues).pipe(\r\n        tap(() => this.formLoadingService.hide()),\r\n        map(() => true)\r\n      );\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä»è¡¨/ä»ä»è¡¨\r\n   * @param frameId ä»è¡¨/ä»ä»è¡¨æå¨frameçid\r\n   * @param mapFields å¸®å©å­æ®µä¸ä»è¡¨/ä»ä»è¡¨å­æ®µæ å°\r\n   * @description ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä»è¡¨/ä»ä»è¡¨\r\n   */\r\n  public batchAppendByPathBasedOnHelpSelections(frameId: string, mapFields: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    if (result && Array.isArray(result) && result.length > 0) {\r\n      const mappings = JSON.parse(mapFields);\r\n      // ä¸æ¯bindingPathåæframeIdå¤ç\r\n      let bindingPath = '/';\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      if (appContext) {\r\n        const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n        if (frameContext) {\r\n          bindingPath = frameContext.viewModel.bindingPath || '/';\r\n        } else {\r\n          throw new Error('frameId is invalid!');\r\n        }\r\n      }\r\n      const defaultValues = [];\r\n      result.forEach((item) => {\r\n        const defaultValue = {};\r\n        Object.keys(mappings).forEach((prop: string) => {\r\n          const value = this.getValueByPath(item, prop);\r\n          const fields = mappings[prop];\r\n          const groups: any[] = fields.split(',').filter(p => p);\r\n          groups.forEach(group => {\r\n            const paths = group.split('.').filter(p => p);\r\n            this.setValueByPath(defaultValue, paths.join('.'), value);\r\n          });\r\n        });\r\n        defaultValues.push(defaultValue);\r\n      });\r\n      this.formLoadingService.show();\r\n      const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n      return this.repository.batchAppendByPath(path, defaultValues).pipe(\r\n        tap(() => this.formLoadingService.hide()),\r\n        map(() => true)\r\n      );\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * è¡åå¸®å©å¤éæ¹éæ°å¢ææ¿æ¢å­è¡¨æ°æ®\r\n   * @param frameId frameId, optional,ä¸ºç©ºæ¶ä½¿ç¨å½ä»¤æ§è¡æ¶æå¨çä¸ä¸æ\r\n   * @param mapFields å­æ®µæ å°\r\n   * @returns \r\n   */\r\n  public batchAppendBasedOnRowHelpSelections(frameId: string, mapFields: string) {\r\n    const self: any = this;\r\n    let result: any[] = self.context && self.context.eventParam || [];\r\n    if (!mapFields) {\r\n      console.error('[batchAppendBasedOnRowHelpSelections]mapFields can`t be empty.');\r\n      return of(true);\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    if (!mappings || !mappings.hasOwnProperty('id')) {\r\n      console.error('[batchAppendBasedOnRowHelpSelections]å¿é¡»æ å°idå­æ®µã');\r\n      return of(true);\r\n    }\r\n    frameId = frameId || this.viewModel.frameContext.frameId;\r\n    if (!frameId) {\r\n      console.error('[batchAppendBasedOnRowHelpSelections]æ æçframeId.');\r\n      return of(true);\r\n    }\r\n    const frameContext = this.getFrameContextById(frameId);\r\n    if (!frameContext) {\r\n      console.error('frameId is invalid!');\r\n      return of(true);\r\n    }\r\n    setTimeout(() => {\r\n      this.endEdit(frameContext).subscribe(() => {\r\n        if (result && Array.isArray(result) && result.length > 0) {\r\n          const bindingPath = frameContext.viewModel.bindingPath || '/';\r\n          const bindingPaths = bindingPath.split('/').filter(p => p);\r\n          const defaultValues = [];\r\n          // è·åå½åè¡\r\n          const bindingList: BindingList = frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n          const currentRow = bindingList.currentItem;\r\n          const currentRowId = bindingList.currentId;\r\n          const currentEntity = this.getEntityByPath(frameContext, bindingPaths, currentRowId);\r\n          const headItem = result[0];\r\n          // å¦æä»å¾éä¸æ¡ï¼ååºæ¿æ¢å½åè¡çæ å°\r\n          if (result.length === 1) {\r\n            this.mappingRow(headItem, mappings, currentEntity, bindingPath);\r\n            return of(true);\r\n          } else {\r\n            const idMapField = mappings['id'];\r\n            const sourceItemId = this.getValueByPath(currentEntity, idMapField);\r\n            // å¦æå½åè¡æ²¡ææ å°æå¾éç»æä¸­æ¾ä¸å°å½åè¡çæ å°\r\n            if (!sourceItemId || result.findIndex(item => item[bindingList.primaryKey] === sourceItemId) === -1) {\r\n              // éæ°æ å°å½åè¡\r\n              this.mappingRow(headItem, mappings, currentEntity, bindingPath);\r\n              result = result.slice(1);\r\n            } else if (sourceItemId) {\r\n              const index = result.findIndex(item => item[bindingList.primaryKey] === sourceItemId);\r\n              // éæ°æ å°å½åè¡\r\n              this.mappingRow(result[index], mappings, currentEntity, bindingPath);\r\n              result.splice(index, 1);\r\n            }\r\n            // å½åè¡å¤çå®æ\r\n            // å¤çæªæ å°çè¡\r\n            const emptyRows = bindingList.toArray().filter(bindingObject => {\r\n              const id = this.getValueByPath(bindingObject, mappings[bindingList.primaryKey]);\r\n              return !id;\r\n            });\r\n            if (emptyRows && emptyRows.length > 0) {\r\n              let rows = result;\r\n              if (result.length > emptyRows.length) {\r\n                rows = result.slice(0, emptyRows.length);\r\n                result = result.slice(emptyRows.length);\r\n              } else {\r\n                result = [];\r\n              }\r\n              rows.forEach((item, index) => {\r\n                const targetItem = emptyRows[index];\r\n                const entity = this.getEntityByPath(frameContext, bindingPaths, targetItem.primaryKeyValue);\r\n                this.mappingRow(item, mappings, entity, bindingPath);\r\n              });\r\n            }\r\n            // å¤çå©ä½å¾é\r\n            result.forEach((item) => {\r\n              const defaultValue = {};\r\n              Object.keys(mappings).forEach((prop: string) => {\r\n                const value = this.getValueByPath(item, prop);\r\n                const fields = mappings[prop];\r\n                const groups: any[] = fields.split(',').filter(p => p);\r\n                groups.forEach(group => {\r\n                  const paths = group.split('.').filter(p => p);\r\n                  this.setValueByPath(defaultValue, paths.join('.'), value);\r\n                });\r\n              });\r\n              defaultValues.push(defaultValue);\r\n            });\r\n            if (defaultValues.length > 0) {\r\n              this.formLoadingService.show();\r\n              const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n              this.repository.batchAppendByPath(path, defaultValues).pipe(\r\n                tap(() => this.formLoadingService.hide())\r\n              ).subscribe();\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, 100);\r\n    return of(true);\r\n  }\r\n  /**\r\n   * å¤å¶ä¸»è¡¨æ°æ®\r\n   * @param id è¦å¤å¶çæ°æ®id\r\n   * @param fields è¦å¤å¶çå­æ®µ\r\n   * @description ä»æ¯æå¤å¶ä¸»è¡¨æ°æ®\r\n   * @deprecated è¯¥æ¹æ³å·²è¢«åºå¼ï¼è¯·ä½¿ç¨cloneæ¹æ³æ¿ä»£ã\r\n   */\r\n  public copy(id: string): Observable<any> {\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const baseUri = befRepository.restService.baseUri;\r\n    const url = `${baseUri}/service/copymainobjvoaction`;\r\n    const requestInfo = befRepository.restService.buildRequestInfo();\r\n    const body = {\r\n      requestInfo,\r\n      dataID: id\r\n    };\r\n    const options = {\r\n      body\r\n    };\r\n    this.formLoadingService.show();\r\n    return befRepository.proxy.request(url, 'PUT', null, options).pipe(\r\n      tap(() => {\r\n        this.formLoadingService.hide();\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const returnValue = responseInfo.returnValue;\r\n        const entity = this.repository.buildEntity(returnValue);\r\n        this.repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      }),\r\n    );\r\n  }\r\n  /**\r\n   * å¤å¶æ°æ®ï¼æ¯æä¸»è¡¨ãä»è¡¨ãä»ä»è¡¨ï¼\r\n   * @param id è¦å¤å¶çè¡\r\n   * @param path è¯·æ±è·¯å¾\r\n   * @returns \r\n   */\r\n  public clone(id: string, path: string) {\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!path) {\r\n      this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!path.startsWith('/')) {\r\n      path = '/' + path;\r\n    }\r\n    path = path.toLowerCase();\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const baseUri = befRepository.restService.baseUri;\r\n    const url = `${baseUri}${path}`;\r\n    const requestInfo = befRepository.restService.buildRequestInfo();\r\n    const ids = this.buildIds(bindingPath);\r\n    ids.push(id);\r\n    const body = {\r\n      requestInfo,\r\n      dataID: ids.join(',')\r\n    };\r\n    const options = {\r\n      body\r\n    };\r\n    this.formLoadingService.show();\r\n    return befRepository.proxy.request(url, 'PUT', null, options).pipe(\r\n      tap(() => {\r\n        this.formLoadingService.hide();\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const returnValue = responseInfo.returnValue;\r\n        let entity = null;\r\n        if (bindingPath.split('/').filter(p => p).length === 0) {\r\n          entity = this.repository.buildEntity(returnValue);\r\n          this.repository.entityCollection.addEntity(entity, true);\r\n        } else {\r\n          const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n          entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);\r\n        }\r\n        return entity;\r\n      }),\r\n    );\r\n  }\r\n\r\n  //#region æ§çå®ç°\r\n\r\n  /**\r\n   * å¤å¶è¡\r\n   * @param frameId frameId\r\n   * @param ignoreFields å¤å¶æ¶å¿½ç¥å­æ®µ\r\n   * @param repeat éå¤å¤å¶æ¬¡æ°ï¼é»è®¤ä¸º1\r\n   */\r\n  public copyRow(frameId: string, ignoreFields: string, repeat: number = 1) {\r\n    if (typeof repeat !== 'number') {\r\n      repeat = parseInt(repeat, 10);\r\n    }\r\n    if (repeat < 1) {\r\n      throw new Error('ArgumentError: repeat must >= 1');\r\n    }\r\n    // è·åå½åè¡\r\n    const frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    const primaryValue = frameContext.bindingData.list.currentId;\r\n    const bindingPath = frameContext.viewModel.bindingPath || '/';\r\n    let bindingData = null;\r\n    let currentItem: BindingObject = null;\r\n    if (bindingPath === '/') {\r\n      // ä¸»è¡¨ç´æ¥åå½åè¡\r\n      currentItem = frameContext.bindingData.list.currentItem;\r\n    } else {\r\n      // åä»è¡¨/ä»ä»è¡¨å½åè¡\r\n      const paths = bindingPath.split('/').filter(p => p);\r\n      currentItem = (frameContext.bindingData.getValue(paths) as BindingList).currentItem;\r\n    }\r\n    bindingData = currentItem.toJSON();\r\n    if (!currentItem.primaryKeyValue) {\r\n      if (this.formNotifyService) {\r\n        this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\r\n      }\r\n      return EMPTY;\r\n    }\r\n    const ignoreFieldsArray = ignoreFields.split(',').filter(item => item);\r\n\r\n    const sources = new Array(repeat);\r\n    return from(sources).pipe(\r\n      concatMap(() => {\r\n        let action$ = null;\r\n        if (bindingPath !== '/') {\r\n          const fullPath = this.buildPath(bindingPath, primaryValue);\r\n          action$ = this.repository.appendByPath(fullPath);\r\n        } else {\r\n          action$ = this.repository.append();\r\n        }\r\n        return action$.pipe(\r\n          tap((entity: Entity) => {\r\n            // ä¿®æ­£å®ä½ä¸»é®\r\n            bindingData[entity.primaryKey] = entity.primaryValue;\r\n            // å¿½ç¥æå®å­æ®µ\r\n            ignoreFieldsArray.forEach((field: string) => {\r\n              const extractedFields = field.split('.').filter(item => item);\r\n              if (extractedFields.length === 1) {\r\n                delete bindingData[field];\r\n              }\r\n              const parent = extractedFields.slice(0, -1).reduce((prev, current, index) => {\r\n                return prev[current];\r\n              }, bindingData);\r\n              delete parent[extractedFields[extractedFields.length - 1]];\r\n            });\r\n            bindingData = Object.assign({}, entity.toJSON(), bindingData);\r\n            entity.load(bindingData, { loadChild: false });\r\n          }),\r\n          catchError(() => {\r\n            return EMPTY;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * å¢éå¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\r\n   * @param frameId frameId\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param associatedField å³èå­æ®µ\r\n   */\r\n  public afterIncrementalSelectHelpClose(frameId: string, mapFields: string, associatedField: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    // tslint:disable-next-line: max-line-length\r\n    // const mapping = '{\"id\":\"userRef.userRef\", \"name\":\"name\", \"sex\":\"sex\",\"age\":\"userRef.userRef_Age\",\"address\":\"userRef.userRef_Address\",\"birthday\":\"userRef.userRef_Birthday\",\"height\":\"userRef.userRef_Height\",\"isMarried\":\"userRef.userRef_IsMarried\"}';\r\n    if (!associatedField) {\r\n      throw new Error('associated field can`t be empty.');\r\n    }\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    const foreignKey = associatedField;\r\n    // å°éæ©äººåä¿å­å°uistateä¸­\r\n    const rootFrameContext = this.viewModel.frameContext.root;\r\n    // ä¸æ¯bindingPathåæframeIdå¤ç\r\n    let bindingPath = '/';\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      if (frameContext) {\r\n        bindingPath = frameContext.viewModel.bindingPath || '/';\r\n      } else {\r\n        throw new Error('frameId is invalid!');\r\n      }\r\n    }\r\n    // tslint:disable-next-line: no-string-literal\r\n    rootFrameContext.uiState['selections'] = result;\r\n    if (result && Array.isArray(result)) {\r\n      // æ ¹æ®bindingPathè·åbindingdataä¸­ç°ææ°æ®\r\n      const bindingPaths = bindingPath.split('/').filter(item => item);\r\n      const currentData: BindingList = this.viewModel.bindingData.getValue(bindingPaths);\r\n      const currentDataArray = currentData.toArray();\r\n      // æ¾å°resultä¸­æï¼ä½bindingDataä¸­æ²¡æçï¼ä¸ºå¾æ°å¢é¡¹\r\n      const appends = [];\r\n      result.reduce((prev: Array<any>, item) => {\r\n        const itemId = item && item[currentData.primaryKey] || null;\r\n        const isExist = currentDataArray.find((bindingObject: BindingObject) => bindingObject[foreignKey][foreignKey] === itemId);\r\n        if (!isExist) {\r\n          prev.push(item);\r\n        }\r\n        return prev;\r\n      }, appends);\r\n\r\n      // æ¾å°bindingDataä¸­æï¼resultä¸­æ²¡æçï¼ä¸ºå¾å é¤é¡¹\r\n      const removes = [];\r\n      currentDataArray.reduce((results: any, item: BindingObject) => {\r\n        const index = result.findIndex(selectItem => selectItem[currentData.primaryKey] === item[foreignKey][foreignKey]);\r\n        if (index === -1) {\r\n          results.push(item.primaryKeyValue);\r\n        }\r\n        return results;\r\n      }, removes);\r\n\r\n      // console.log('addItems', appends, 'removeItems', removes);\r\n      // è°ç¨åç«¯æ¥å£æ°å¢æ°æ®\r\n      const addAction$ = from(appends).pipe(\r\n        concatMap(item => {\r\n          const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n          return this.repository.appendByPath(path).pipe(\r\n            tap((entity: Entity) => {\r\n              Object.keys(mappings).forEach(prop => {\r\n                const value = this.getValueByPath(item, prop);\r\n                const fields = mappings[prop];\r\n                const groups: any[] = fields.split(',').filter(p => p);\r\n                groups.forEach(group => {\r\n                  const paths = group.split('.').filter(p => p);\r\n                  this.setValueByPath(entity, paths.join('.'), value);\r\n                });\r\n              });\r\n            }),\r\n            catchError(() => {\r\n              return EMPTY;\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      const removeAction$ = from(removes).pipe(\r\n        concatMap(item => {\r\n          const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n          return this.repository.removeByPath(path, item).pipe(\r\n            tap(() => {\r\n              const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n              befRepository.entityManager.removeEntityByPath(path, item);\r\n            }),\r\n            catchError(() => {\r\n              return EMPTY;\r\n            })\r\n          );\r\n        })\r\n      );\r\n      if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {\r\n        return of(true);\r\n      }\r\n      return concat(addAction$, removeAction$).pipe(\r\n        catchError(() => EMPTY)\r\n      );\r\n    }\r\n    return of(true);\r\n  }\r\n  // todo:æ¨¡æç¨æ·æä½ï¼å¾åç«¯æ¥å£æ¯æä¸»è¡¨æ¹éæ°å¢åéå\r\n  /**\r\n   * å¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\r\n   */\r\n  public beforeMultiSelectHelpOpen() {\r\n    return this.clearHelpSelections();\r\n  }\r\n  /**\r\n   * å¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\r\n   * @param frameId ç»å®è·¯å¾\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param commandFrameId åè°å½ä»¤æå¨frameId\r\n   * @param commandName åè°å½ä»¤\r\n   * @deprecated æ¨¡æç¨æ·æä½ï¼å¾æ¹éèµå¼æ¯æä¸»è¡¨ååºå¼\r\n   */\r\n  public afterMultiSelectHelpClose(frameId: string, mapFields: string, commandFrameId?: string, commandName?: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    if (result && Array.isArray(result)) {\r\n      // è°ç¨åç«¯æ¥å£æ°å¢æ°æ®\r\n      if (!result || result.length < 1) {\r\n        return of(true);\r\n      }\r\n      this.onHelpClose.next({ frameId, mapFields, data: result, commandFrameId, commandName });\r\n      return of(true);\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n    * å¸®å©å³é­åå¤çå¨\r\n    * @param frameId frameid\r\n    * @param mapFields mapFields\r\n    * @param result å¸®å©æ°æ®ç»æ\r\n    */\r\n  private onHelpCloseHandler(frameId: string, mapFields: string, result: any[]) {\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    // ä¸æ¯bindingPathåæframeIdå¤ç\r\n    let bindingPath = '/';\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      if (frameContext) {\r\n        bindingPath = frameContext.viewModel.bindingPath || '/';\r\n      } else {\r\n        throw new Error('frameId is invalid!');\r\n      }\r\n    }\r\n    // å°éæ©äººåä¿å­å°uistateä¸­\r\n    const rootFrameContext = this.viewModel.frameContext.root;\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    // tslint:disable-next-line: no-string-literal\r\n    rootFrameContext.uiState['selections'] = result;\r\n    if (result && Array.isArray(result)) {\r\n      const addAction$ = from(result).pipe(\r\n        concatMap(item => {\r\n          const requestInfo = befRepository.restService.buildRequestInfo();\r\n          if (bindingPaths.length > 0) {\r\n            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n            return befRepository.restService.createByPath(path, requestInfo).pipe(\r\n              tap((responseInfo: ResponseInfo) => {\r\n                const data = responseInfo.returnValue;\r\n                const newEntity = befRepository.entityManager.appendEntityByPath(path, data, data);\r\n                Object.keys(mappings).forEach(prop => {\r\n                  const value = this.getValueByPath(item, prop);\r\n                  const fields = mappings[prop];\r\n                  const groups: any[] = fields.split(',').filter(p => p);\r\n                  groups.forEach(group => {\r\n                    const paths = group.split('.').filter(p => p);\r\n                    this.setValueByPath(newEntity, paths.join('.'), value);\r\n                  });\r\n                });\r\n                return newEntity;\r\n              })\r\n            );\r\n          } else {\r\n            return befRepository.restService.create(null, requestInfo).pipe(\r\n              tap((responseInfo: ResponseInfo) => {\r\n                const data = responseInfo.returnValue;\r\n                const newEntity = this.repository.buildEntity(data);\r\n                Object.keys(mappings).forEach(prop => {\r\n                  const value = this.getValueByPath(item, prop);\r\n                  const fields = mappings[prop];\r\n                  const groups: any[] = fields.split(',').filter(p => p);\r\n                  groups.forEach(group => {\r\n                    const paths = group.split('.').filter(p => p);\r\n                    this.setValueByPath(newEntity, paths.join('.'), value);\r\n                  });\r\n                });\r\n                this.repository.entityCollection.addEntity(newEntity);\r\n                return newEntity;\r\n              })\r\n            );\r\n          }\r\n        })\r\n      );\r\n      // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);\r\n      if (this.formLoadingService) {\r\n        this.suspendFrameContextEvent(frameId);\r\n        this.formLoadingService.show();\r\n        this.formLoadingService.setSuspend(true);\r\n      }\r\n      return addAction$.pipe(\r\n        last(),\r\n      ).pipe(\r\n        switchMap(() => {\r\n          const primaryValue = this.viewModel.bindingData.list.currentId;\r\n          if (primaryValue) {\r\n            return befRepository.updateChangesById(primaryValue);\r\n          } else {\r\n            return of(null);\r\n          }\r\n        })\r\n      ).subscribe(() => {\r\n        if (this.formLoadingService) {\r\n          this.resumeFrameContextEvent(frameId);\r\n          this.formLoadingService.setSuspend(false);\r\n          this.formLoadingService.hide();\r\n        }\r\n      }, () => {\r\n        if (this.formLoadingService) {\r\n          this.resumeFrameContextEvent(frameId);\r\n          this.formLoadingService.setSuspend(false);\r\n          this.formLoadingService.hide();\r\n        }\r\n      });\r\n    }\r\n    return of(null);\r\n  }\r\n  private suspendFrameContextEvent(frameId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      frameContext.suspend = true;\r\n    }\r\n  }\r\n  private resumeFrameContextEvent(frameId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      frameContext.suspend = false;\r\n      frameContext.appContext.messagePipe.next('bindData');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n  private setValueByPath(target: object, path: string, value: any) {\r\n    if (target) {\r\n      const paths = path.split('.');\r\n      if (paths.length <= 1) {\r\n        target[path] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n  private getValueByPath(target: object, path: string) {\r\n    const paths = path.split('.');\r\n    if (paths.length < 1) {\r\n      return;\r\n    }\r\n    if (paths.length === 1) {\r\n      return target[path];\r\n    }\r\n    let result = null;\r\n    paths.forEach((prop, index) => {\r\n      if (index === 0) {\r\n        result = target && target[prop] || null;\r\n      } else {\r\n        result = result && result[prop] || null;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * æé å­è¡¨è·¯å¾\r\n   * @param bindingPath ç»å®è·¯å¾\r\n   * @param id id\r\n   */\r\n  private buildPath(bindingPath: string, id: any) {\r\n    let path = '/' + id;\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = this.viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n  /**\r\n   * è·åç»å®è·¯å¾çå½åè¡æ°ç»\r\n   * @param bindingPath bindingPath\r\n   * @returns \r\n   */\r\n  private buildIds(bindingPath: string): string[] {\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    const primaryValue = this.viewModel.bindingData.list.currentId;\r\n    const result = [];\r\n    const paths = [];\r\n    if (bindingPaths.length > 0) {\r\n      result.push(primaryValue);\r\n      // ä»è¡¨æä»ä»è¡¨è¦å¤å¶çè¡ä¸ä¸å®æ¯å½åè¡ï¼ç¨æ·å¯ä»¥æå®\r\n      bindingPaths.pop();\r\n      bindingPaths.forEach((path: string) => {\r\n        paths.push(path);\r\n        const bindingList = this.viewModel.bindingData.getValue(paths) as BindingList;\r\n        if (bindingList) {\r\n          result.push(bindingList.currentId);\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private updateBindingData(input: any, ids: Array<any>) {\r\n    const { controlType = null, value = null, options = {}, dataType = null } = input || {};\r\n    if (controlType) {\r\n      // å¯¹å¸®å©åç¹æ®å¤ç\r\n      if (controlType === 'lookup') {\r\n        const mapFields = options.mapFields;\r\n        this.updateLookupField(ids, value, mapFields);\r\n      } else {\r\n        this.updateSimpleField(ids, value, input);\r\n      }\r\n    }\r\n  }\r\n  private updateSimpleField(ids: Array<any>, value: any, column: any) {\r\n    if (!column) {\r\n      return;\r\n    }\r\n    const currentColumnType = column.dataType;\r\n    // å­å¨è¡ç¼è¾å¨\r\n    let result = value;\r\n    if (currentColumnType === 'date') {\r\n      let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');\r\n      if (!dateStr) {\r\n        dateStr = '0001-01-01T00:00:00';\r\n      }\r\n      result = dateStr;\r\n    } else if (currentColumnType === 'number') {\r\n      result = Number(value) || 0;\r\n    }\r\n    const field = column.field;\r\n    ids.forEach(id => {\r\n      this.updateBindingList(id, field, result);\r\n    });\r\n  }\r\n  private updateLookupField(ids: Array<any>, helpData: any, mapFields: any) {\r\n    if (!mapFields) {\r\n      return;\r\n    }\r\n    let helpFields = Object.keys(mapFields);\r\n    const idIndex = helpFields.findIndex(item => item === 'id');\r\n    if (helpFields.includes('id') && idIndex !== 0) {\r\n      helpFields.splice(idIndex, 1);\r\n      helpFields = ['id', ...helpFields];\r\n    }\r\n    helpFields.forEach((helpField: any) => {\r\n      let helpValue: any = '';\r\n      if (helpData) {\r\n        if (helpData instanceof Array) {\r\n          helpValue = helpData.map((item: any) => {\r\n            return this.getValue(helpField, item);\r\n          }).join(',');\r\n        } else {\r\n          helpValue = this.getValue(helpField, helpData);\r\n        }\r\n      }\r\n      ids.forEach(id => {\r\n        this.updateBindingList(id, mapFields[helpField], helpValue);\r\n      });\r\n    });\r\n  }\r\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\r\n    const viewModel = this.viewModel || null;\r\n    if (!viewModel || !propertyName) {\r\n      return;\r\n    }\r\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\r\n    const propertyNames = propertyName.split('.').filter(item => item);\r\n    const bindingObject = this.bindingList.findById(primaryValue);\r\n\r\n    if (propertyNames.length < 2) {\r\n      bindingObject.setValue(propertyName, value, true, true);\r\n    } else {\r\n      let targetBindingObject = null;\r\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\r\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\r\n      fpaths.forEach(prop => {\r\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\r\n      });\r\n      // todo:éè¦æ·»å å¼ååäºä»¶\r\n      targetBindingObject.setValue(targetPropertyName, value, true, true);\r\n    }\r\n  }\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.viewModel.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n  private getValue(f: string, data: any) {\r\n    let val = '';\r\n    if (f.indexOf('.') === -1) {\r\n      val = data[f];\r\n    } else {\r\n      val = f.split('.').reduce((a, b) => {\r\n        return a[b];\r\n      }, data);\r\n    }\r\n\r\n    return val;\r\n  }\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.viewModel.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.viewModel.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * æ ¹æ®æ å°å°æ°æ®èµå¼ç»bindingData\r\n   * @param data \r\n   * @param mapFields \r\n   * @param bindingData \r\n   */\r\n  private mappingRow(data: any, mapFields: any, entity: Entity, bindingPath: string) {\r\n    Object.keys(mapFields).forEach((prop: string) => {\r\n      const value = this.getValueByPath(data, prop);\r\n      const fields = mapFields[prop];\r\n      const groups: any[] = fields.split(',').filter(p => p);\r\n      groups.forEach(group => {\r\n        const paths = group.split('.').filter(p => p);\r\n        this.setValueByPath(entity, paths.join('.'), value);\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * éè¿frameIdè·åå¯¹åºçç»ä»¶ä¸ä¸æ\r\n   * @param frameId frameId\r\n   * @returns \r\n   */\r\n  private getFrameContextById(frameId: string): FrameContext | null {\r\n    if (!frameId) {\r\n      return null;\r\n    }\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    let frameContext: FrameContext = null;\r\n    if (appContext) {\r\n      frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n    }\r\n    return frameContext;\r\n  }\r\n  private getEntityByPath(frameContext: FrameContext, bindingPaths: any[], currentId: string) {\r\n    bindingPaths = [...bindingPaths];\r\n    const id = frameContext.bindingData.list.currentId;\r\n    const entity: Entity = frameContext.repository.entityCollection.getEntityById(id) as Entity;\r\n    let item: Entity = entity;\r\n    const paths = [];\r\n    const tailPath = bindingPaths.pop();\r\n    const parent = bindingPaths.reduce((object: Entity, path: string) => {\r\n      paths.push(path);\r\n      if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {\r\n        const value = object[path];\r\n        if (value && value instanceof EntityList) {\r\n          const bindingList = frameContext.bindingData.getValue(paths) as BindingList;\r\n          const currentItemId = bindingList.currentId;\r\n          return value.get(currentItemId);\r\n        } else {\r\n          return value;\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    }, item);\r\n    if (parent instanceof Entity) {\r\n      const list = parent[tailPath] as EntityList<any>;\r\n      if (list) {\r\n        return list.get(currentId);\r\n      } else {\r\n        throw new Error(`æ æçbindingPath.`);\r\n      }\r\n    } else {\r\n      throw new Error(`æ æçbindingPath.`);\r\n    }\r\n  }\r\n  private endEdit(frameContext: FrameContext) {\r\n    const appContext: AppContext = frameContext && frameContext.getFormAppContext();\r\n    return of(null).pipe(\r\n      tap(() => {\r\n        if (appContext) {\r\n          appContext.messagePipe.next({ type: 'endEdit' });\r\n        }\r\n      }),\r\n      // todo: ä¸åºè¯¥ä½¿ç¨delayï¼åºè¯¥ä¸²æµ\r\n      delay(5)\r\n    );\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { FrameContext, Entity } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Observable, of, EMPTY } from 'rxjs';\r\n// tslint:disable: max-line-length\r\n@Injectable()\r\nexport class DiscussionGroupService {\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n  /**\r\n   * å½ä»¤åæ°\r\n   */\r\n  private get params() {\r\n    return this['context'] && this['context']['eventParam'] || {};\r\n  }\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private loadingService: FormLoadingService, private runtimeFrameworkService: RuntimeFrameworkService) {\r\n  }\r\n\r\n  public addComment(id?: string, summary?: string, configId?: string, text?: string, visibility?: string, parentId?: string): Observable<any> {\r\n    id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n    const params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);\r\n    const restService = this.repository.restService;\r\n    const url = '/api/runtime/comment/v1.0/bill-comment/comment';\r\n    const requestInfo = restService.buildRequestInfo();\r\n    const options = {\r\n      body: {\r\n        requestInfo,\r\n        ...params\r\n      }\r\n    };\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'POST', null, options).pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢è¯è®º\r\n   * @param id id\r\n   */\r\n  public queryComments(id: string, configId: string, pageIndex?: number | null, pageSize?: number | null): Observable<any> {\r\n    id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const restService = this.repository.restService;\r\n\r\n    const url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢ææé¨é¨ä¿¡æ¯\r\n   */\r\n  public queryAllOrgs() {\r\n    const restService = this.repository.restService;\r\n    const url = '/api/runtime/sys/v1.0/sysOrgs?param={\"layer\":\"1\"}';\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢å¸¸ç¨@ç¨æ· \r\n   * @param pageIndex \r\n   * @param pageSize \r\n   */\r\n  public queryFrequentAtUsers(pageIndex?: number | null, pageSize?: number | null) {\r\n    const restService = this.repository.restService;\r\n    const url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * è·åatç¨æ·åè¡¨\r\n   * @param user ç¨æ·ç¼å·æèç¨æ·åç§°ï¼è¿æ»¤ä½¿ç¨ï¼\r\n   * @param pageIndex pageIndex\r\n   * @param pageSize pageSize\r\n   */\r\n  public queryAtUsers(user?: string, pageIndex?: number | null, pageSize?: number | null) {\r\n    const restService = this.repository.restService;\r\n    const url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æé è·åè¯è®ºåè¡¨çurl\r\n   * @param id id\r\n   */\r\n  private buildQueryCommentsUrl(id: string, pageIndex: number | null, pageSize: number | null, configId: string) {\r\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\r\n      pageIndex = this.params.pageIndex || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined' || pageSize === null) {\r\n      pageSize = this.params.pageSize || 10;\r\n    }\r\n    const serverUri = this.repository.serverUri;\r\n    // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';\r\n    return `/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=${configId}&billId=${id}&pageSize=${pageSize}&pageIndex=${pageIndex}`;\r\n  }\r\n  /**\r\n   * æé è·å@ç¨æ·url\r\n   */\r\n  private buildQueryAtUsersUrl(user?: string, pageIndex?: number | null, pageSize?: number | null) {\r\n    const params: string[] = [];\r\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\r\n      pageIndex = this.params.pageIndex || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined' || pageSize === null) {\r\n      pageSize = this.params.pageSize || 1000;\r\n    }\r\n    if (user) {\r\n      params.push(`param=${user}`);\r\n    }\r\n    params.push(`pageSize=${pageSize}`);\r\n    params.push(`pageIndex=${pageIndex}`);\r\n    return `/api/runtime/comment/v1.0/bill-comment/atUser?${params.join('&')}`;\r\n  }\r\n  private buildQueryFrequentAtUsersUrl(pageIndex?: number | null, pageSize?: number | null) {\r\n    const params: string[] = [];\r\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\r\n      pageIndex = this.params.pageIndex || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined' || pageSize === null) {\r\n      pageSize = this.params.pageSize || 6;\r\n    }\r\n    params.push(`pageSize=${pageSize}`);\r\n    params.push(`pageIndex=${pageIndex}`);\r\n    return `/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?${params.join('&')}`;\r\n  }\r\n  private buildAddCommentParam(id: string, text: string, parentId: string, summary: string, visibility: string, configId: string) {\r\n    if (typeof text === 'undefined') {\r\n      text = this.params.text;\r\n    }\r\n    if (typeof parentId === 'undefined') {\r\n      parentId = this.params.parentId;\r\n    }\r\n    if (typeof visibility === 'undefined') {\r\n      visibility = this.params.visibility;\r\n    }\r\n    return {\r\n      'bill': {\r\n        'billId': id,\r\n        'configId': configId,\r\n        'summary': summary\r\n      },\r\n      'comment': {\r\n        'billId': id,\r\n        'configId': configId,\r\n        'parentId': parentId || null,\r\n        'text': text,\r\n        'visibility': visibility\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { ListFilterHandler, QueryCondition } from '@farris/ui-list-filter';\r\n\r\n@Injectable()\r\nexport class ListFilterConditionsService implements ListFilterHandler {\r\n\r\n    constructor(private frameContext: FrameContext) { }\r\n\r\n    public setCurrentFilterConditions(conditions: QueryCondition[]): void {\r\n        this.frameContext.uiState['currentFilterConditions'] = conditions;\r\n    }\r\n\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { FORM_PATH_TOKEN, FormManifest, IFormManifestService } from \"@farris/devkit\";\r\nimport { share } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class FormManifestService implements IFormManifestService {\r\n  private static mainfests = new Map<string, Observable<FormManifest>>();\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(FORM_PATH_TOKEN) private modulePath,\r\n    private httpClient: HttpClient\r\n  ) { }\r\n  public load(): Observable<FormManifest> {\r\n    if (this.modulePath.endsWith('\\/')) {\r\n      this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);\r\n    }\r\n    const formManifestPath = `${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`;\r\n    const request$ = FormManifestService.mainfests.get(this.modulePath);\r\n    if (request$) {\r\n      return request$;\r\n    } else {\r\n      const req$ = this.httpClient.get<FormManifest>(formManifestPath, { responseType: 'json' }).pipe(share());\r\n      FormManifestService.mainfests.set(this.modulePath, req$);\r\n      return req$;\r\n    }\r\n  }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { share, switchMap } from \"rxjs/operators\";\r\nimport { FORM_PATH_TOKEN, FrameContext, FormExpressionsManifest, FormManifest, IFormExpressionManifestService, FORM_MANIFEST_SERVICE_TOKEN, IFormManifestService } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class FormExpressionManifestService implements IFormExpressionManifestService {\r\n  private static mainfests = new Map<string, Observable<any>>();\r\n  constructor(\r\n    private injector: Injector,\r\n    private frameContext: FrameContext,\r\n    private httpClient: HttpClient,\r\n    @Inject(FORM_PATH_TOKEN) private modulePath,\r\n    @Inject(FORM_MANIFEST_SERVICE_TOKEN) private formManifestService: IFormManifestService) { }\r\n\r\n  public load(): Observable<any> {\r\n    if (this.modulePath.endsWith('\\/')) {\r\n      this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);\r\n    }\r\n\r\n    return this.formManifestService.load().pipe(\r\n      switchMap((formManifest: FormManifest) => {\r\n        const expressions = formManifest.expressions;\r\n        const expressionManifest = expressions.find((expressionManifest: FormExpressionsManifest) => expressionManifest.ns === this.frameContext.namespace);\r\n        if (expressionManifest) {\r\n          const expressionPath = `${this.modulePath}/expressions/${expressionManifest.path}?version=${new Date().valueOf().toString()}`;\r\n          const key = `${this.modulePath}/expressions/${expressionManifest.path}`;\r\n          const request$ = FormExpressionManifestService.mainfests.get(key);\r\n          if (request$) {\r\n            return request$;\r\n          } else {\r\n            const req$ = this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());\r\n            FormExpressionManifestService.mainfests.set(key, req$);\r\n            return req$;\r\n          }\r\n        } else {\r\n          return of({});\r\n        }\r\n      })\r\n    );\r\n  }\r\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport moment from 'moment';\r\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class LocalizationService {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings) { }\r\n\r\n  /**\r\n   * ç¨æ·éç½®æ ¼å¼\r\n   */\r\n  public get formats(): { date: { dateFormat: string, timeFormat: string, dateTimeFormat: string }, number: { negativeSign: string, numberDecimalDigits: number, numberDecimalSeparator: string, numberGroupSeparator: string }, [prop: string]: any } {\r\n    const { dateFormat = null, timeFormat = null } = this.userSettings || {};\r\n    let dateTimeFormat = null;\r\n    if (dateFormat && timeFormat) {\r\n      dateTimeFormat = `${dateFormat} ${timeFormat}`;\r\n    }\r\n    const date = {\r\n      dateFormat,\r\n      timeFormat,\r\n      dateTimeFormat\r\n    };\r\n    const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat || {};\r\n    const number = {\r\n      negativeSign,\r\n      numberDecimalDigits,\r\n      numberDecimalSeparator,\r\n      numberGroupSeparator\r\n    };\r\n    return { date, number };\r\n  }\r\n  /**\r\n   * æ ¹æ®æ°æ®ç±»åæ¬å°åæ°æ®\r\n   * @param value value\r\n   * @param dataType æ°æ®ç±»å\r\n   * @returns string\r\n   */\r\n  public localize(value: any, dataType: string): string {\r\n    if (dataType && value) {\r\n      dataType = dataType.toLowerCase();\r\n      if (dataType === 'date') {\r\n        return this.transformDate(value);\r\n      } else if (dataType === 'datetime') {\r\n        return this.transformDateTime(value);\r\n      } else if (dataType === 'number') {\r\n        return this.transformNumber(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n  /**\r\n   * æ ¹æ®å½éåç±»åè·åæ ¼å¼åå­ç¬¦ä¸²\r\n   * @param localizationType å½éåç±»å\r\n   * @returns \r\n   */\r\n  public getFormat(localizationType: string): string {\r\n    if (localizationType) {\r\n      localizationType = localizationType.toLowerCase();\r\n    }\r\n    if (localizationType === 'date') {\r\n      return this.formats.date.dateFormat;\r\n    } else if (localizationType === 'datetime') {\r\n      return this.formats.date.dateTimeFormat;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥æ\r\n   * @param value value\r\n   */\r\n  private transformDate(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    if (!dateFormat || !value) {\r\n      return value;\r\n    }\r\n    const date = moment(value);\r\n    const isValid = date.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    dateFormat = this.parseDateFormat(dateFormat);\r\n    return date.format(dateFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ¶é´\r\n   * @param value value\r\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\r\n   */\r\n  private transformDateTime(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';\r\n    if (!dateFormat || !timeFormat) {\r\n      return value;\r\n    }\r\n    const dateTime = moment(value);\r\n    const isValid = dateTime.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    if (dateFormat) {\r\n      dateFormat = this.parseDateFormat(dateFormat);\r\n    }\r\n    if (timeFormat) {\r\n      timeFormat = this.parseTimeFormat(timeFormat);\r\n    }\r\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\r\n    return dateTime.format(dateTimeFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ°å­\r\n   * @param value value\r\n   */\r\n  private transformNumber(value): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return '';\r\n    }\r\n    const bigNumber = new BigNumber(value);\r\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\r\n    if (!BigNumber.isBigNumber(bigNumber)) {\r\n      return value;\r\n    }\r\n    const isNegative = bigNumber.isNegative();\r\n    const format = this.buildNumberFormat();\r\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};\r\n    if (isNegative) {\r\n      if (negativeSign !== null) {\r\n        format.prefix = negativeSign;\r\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\r\n      }\r\n    }\r\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseDateFormat(format: string) {\r\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseTimeFormat(format: string) {\r\n    return format.replace(/M/g, 'm');\r\n  }\r\n  /**\r\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\r\n   */\r\n  private buildNumberFormat() {\r\n    if (this.numberFormat) {\r\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\r\n      const format: any = {\r\n        groupSize: 3,\r\n      };\r\n      if (numberDecimalSeparator !== null) {\r\n        format.decimalSeparator = numberDecimalSeparator;\r\n      }\r\n      if (numberGroupSeparator !== null) {\r\n        format.groupSeparator = numberGroupSeparator;\r\n      }\r\n      return format;\r\n    }\r\n  }\r\n  private get numberFormat(): NumberFormat {\r\n    return this.userSettings && this.userSettings.numberFormat || null;\r\n  }\r\n}","import { CommandContext } from \"@farris/devkit\";\r\n\r\nexport abstract class Service {\r\n  public context: CommandContext;\r\n  /**\r\n   * å½ä»¤åæ°\r\n   */\r\n  public get eventParam(){\r\n    return this.context && this.context.eventParam || null;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Service } from \"./service\";\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { QueryCondition } from '@farris/component-querycondition';\r\nimport { CommandContext } from \"@farris/devkit\";\r\n@Injectable()\r\nexport class DataGridService extends Service {\r\n  /**\r\n   * æ¸ç©ºgridå¾éè¡\r\n   */\r\n  public clearChecks() {\r\n    const params = this.eventParam;\r\n    if (params && Array.isArray(params)) {\r\n      const param = params[0];\r\n      if (param instanceof QueryCondition) {\r\n        const gridComponents = this.getFormGridComponents(this.context);\r\n        if (gridComponents && gridComponents.length > 0) {\r\n          gridComponents.forEach((gridComponent: DatagridComponent) => {\r\n            let clearSelections = true;\r\n            if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {\r\n              clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];\r\n            }\r\n            if (clearSelections) {\r\n              gridComponent.clearCheckeds(true);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶å¾éå é¤çè¡\r\n   * @param ids ids\r\n   * @returns \r\n   */\r\n  public uncheckDeletedRows(ids: any) {\r\n    if (typeof ids === 'string') {\r\n      ids = [ids];\r\n    }\r\n    if (!ids || ids.length < 1) {\r\n      return;\r\n    }\r\n    const gridComponents = this.getFormGridComponents(this.context);\r\n    if (gridComponents && gridComponents.length > 0) {\r\n      gridComponents.forEach((gridComponent: DatagridComponent) => {\r\n        gridComponent.unCheckRows(ids, true);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶å¾éè¡\r\n   * @param ids ids\r\n   * @returns \r\n   */\r\n  public uncheckRows(ids: any) {\r\n    if (typeof ids === 'string') {\r\n      ids = [ids];\r\n    }\r\n    if (!ids || ids.length < 1) {\r\n      return;\r\n    }\r\n    const gridComponents = this.getFormGridComponents(this.context);\r\n    if (gridComponents && gridComponents.length > 0) {\r\n      gridComponents.forEach((gridComponent: DatagridComponent) => {\r\n        gridComponent.unCheckRows(ids, true);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * è·åå½åè¡¨ååçææè¡¨æ ¼å®ä¾\r\n   * @param commandContext å½ä»¤ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  private getFormGridComponents(commandContext: CommandContext) {\r\n    let grids = [];\r\n    const appContext = commandContext && commandContext.frameContext && commandContext.frameContext.appContext || null;\r\n    if (appContext) {\r\n      const componentRefs: Map<string, Map<string, any>> = appContext.componentRefs;\r\n      const collect = Array.from(componentRefs.values());// [Map<string,any>,Map<string,any>]\r\n      collect.forEach((item: Map<string, any>) => {\r\n        const components = Array.from(item.values());\r\n        const gridComponents = components.filter((component: any) => component instanceof DatagridComponent);\r\n        grids = grids.concat(gridComponents);\r\n      });\r\n    }\r\n    return grids;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { EMPTY } from \"rxjs\";\r\nimport { AttentionService, AttentionElement } from '@farris/ui-tooltip';\r\n\r\n\r\n@Injectable()\r\nexport class FormAttentionService {\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private attentionService: AttentionService) { }\r\n  /**\r\n   * éªçæé®\r\n   * @param ids idå­ç¬¦ä¸²ææ°ç»\r\n   * @param duration æ¶é´é´é\r\n   * @returns \r\n   */\r\n  public blink(ids: string | string[], duration?: any) {\r\n    if (typeof ids === 'string') {\r\n      ids = ids.split(',').filter(p => p);\r\n    }\r\n    if (!Array.isArray(ids) || ids.length < 1) {\r\n      return EMPTY;\r\n    }\r\n    if (typeof duration === 'string') {\r\n      duration = duration.trim();\r\n    }\r\n    if (!duration) {\r\n      duration = 600;\r\n    }\r\n    duration = parseInt(duration);\r\n    if (isNaN(duration) || duration <= 0) {\r\n      duration = 600;\r\n    }\r\n    const elements: AttentionElement[] = ids.map((item: string) => {\r\n      return {\r\n        idOrEl: item,\r\n        // type:'',\r\n        // class:''\r\n      };\r\n    });\r\n    this.attentionService.catchAttention(elements, duration);\r\n  }\r\n}","export namespace Prop {\r\n  /**\r\n   * ç¹å¾é\r\n   */\r\n  export interface IPropSet {\r\n    id: string;\r\n    /**\r\n     * ç¹å¾éç¼å·\r\n     */\r\n    code: string;\r\n    /**\r\n     * å¨æå­æ®µï¼è¿åå¼ä¸­ä¸å­å¨ï¼ç¨äºå±ç¤ºå½åè¯­è¨çææ¬\r\n     */\r\n    name?: string;\r\n    /**\r\n     * ç¹å¾éåç§°-è±æ\r\n     */\r\n    name_en: string;\r\n    /**\r\n     * ç¹å¾éåç§°-ç®ä½\r\n     */\r\n    name_chs: string;\r\n    /**\r\n     * ç¹å¾éåç§°-ç¹ä½\r\n     */\r\n    name_cht: string;\r\n  }\r\n  /**\r\n   * ç¹å¾é¡¹\r\n   */\r\n  export interface IProp {\r\n    /**\r\n     * ç¹å¾é¡¹id\r\n     */\r\n    id: string;\r\n    /**\r\n     * ç¹å¾é¡¹ç¼å·\r\n     */\r\n    code: string;\r\n    /**\r\n     * ç¼å·å­æ®µï¼æä¸ä½¿ç¨ï¼\r\n     */\r\n    codefield: string;\r\n    /**\r\n     * å¨æå­æ®µ\r\n     */\r\n    name?: string;\r\n    /**\r\n     * ç¹å¾é¡¹åç§°-è±æ\r\n     */\r\n    name_en: string;\r\n    /**\r\n     * ç¹å¾é¡¹ç¼å·-ç®ä½\r\n     */\r\n    name_chs: string;\r\n    /**\r\n     * ç¹å¾é¡¹ç¼å·-ç¹ä½\r\n     */\r\n    name_cht: string;\r\n    /**\r\n     * ç¹å¾å¼\r\n     */\r\n    value: any;\r\n    /**\r\n     * å¼å­æ®µ\r\n     */\r\n    valuefield: string;\r\n    /**\r\n     * ç¹å¾é¡¹å¯¹åºçè¾å¥æ§ä»¶ç±»å\r\n     */\r\n    inputtype: string;\r\n    /**\r\n     * æ°å­ç²¾åº¦\r\n     */\r\n    digitalaccuracy: number;\r\n    /**\r\n     * ç¹å¾éid\r\n     */\r\n    setid: string;\r\n    helpid: string;\r\n    /**\r\n     * æä¸¾æ°æ®æº\r\n     * @attention æ¥å£è¿åç»æä¸ºå­ç¬¦ä¸²\r\n     */\r\n    enuminfo: string;\r\n    /**\r\n     * æä¸¾æ°æ®æº\r\n     */\r\n    data: IEnumInfo[];\r\n    /**\r\n     * æ åä»£ç éæ¯å¦ä¸ºæ \r\n     */\r\n    setistree: string;\r\n    /**\r\n     * æ åä»£ç éid\r\n     */\r\n    codesetid: string;\r\n    /**\r\n     * ææ¬å­æ®µ\r\n     */\r\n    textfield: string;\r\n    /**\r\n     * è¿æ»¤æ¡ä»¶\r\n     */\r\n    filtercondition: any;\r\n    /**\r\n     * å¿å¡«\r\n     */\r\n    isrequired: string | boolean;\r\n    /**\r\n     * åªè¯»\r\n     */\r\n    isreadonly: string | boolean;\r\n    /**\r\n     * æåº\r\n     */\r\n    sortorder: number;\r\n\r\n    timestamp_createdon: string;\r\n    timestamp_lastchangedon: string;\r\n\r\n    timestamp_createdby: string;\r\n    timestamp_lastchangedby: string;\r\n\r\n  }\r\n  /**\r\n   * æä¸¾æ°æ®æºæ ¼å¼\r\n   */\r\n  export interface IEnumInfo {\r\n    id: string;\r\n    text: string;\r\n  }\r\n  export interface IReturnValue {\r\n    propset: IPropSet[],\r\n    props: IProp[]\r\n  }\r\n  export enum InputType {\r\n    enum = 'Enum',\r\n    string = 'String',\r\n    help = 'Help',\r\n    number = 'Number',\r\n    date = 'Date'\r\n  }\r\n}\r\n","import { Injectable, Injector } from \"@angular/core\";\r\nimport { BefRepository, ResponseInfo } from \"@farris/bef\";\r\nimport { Repository } from '@farris/devkit';\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Prop } from \"./types\";\r\n\r\n@Injectable()\r\nexport class FeatureRepository {\r\n  constructor(\r\n    private injector: Injector,\r\n    private repository: Repository<any>,\r\n  ) { }\r\n  /**\r\n   * æ ¹æ®ç©æidè·åç©æç¹å¾é¡¹åç¹å¾å¼ï¼å¬å±é»è®¤å¼ï¼\r\n   * @param materialId ç©æid\r\n   */\r\n  public getFeaturesByMaterialId(materialId: string): Observable<ResponseInfo> {\r\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops';\r\n    const body = {\r\n      materialID: materialId\r\n    };\r\n    const options = {\r\n      body\r\n    };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    return befRepository.proxy.request(url, 'put', null, options);\r\n  }\r\n  /**\r\n   * æ ¹æ®ç©æidåç©æç¹å¾ä¿å­åçhashè·åè¯¥ç©æå·²ç»å­å¨çç¹å¾é¡¹å¼\r\n   * @param materialId ç©æId\r\n   * @param configID å¯¹åºè¯¥ç©æçç¹å¾é¡¹hash\r\n   * @returns \r\n   */\r\n  public getConfigedValueByFeatureId(materialId: string, configID: string, configType: string = 'Materials'): Observable<ResponseInfo> {\r\n    const url = '/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo';\r\n    const body = { objType: configType, objID: materialId, configID };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request(url, 'put', null, options);\r\n  }\r\n  /**\r\n   * ä¿å­ç©æç¹å¾é¡¹\r\n   * @param materialId ç©æid\r\n   * @param charactValue ç¹å¾å¼\r\n   * @param configType éç½®ç±»å\r\n   * @returns \r\n   */\r\n  public applyFeatures(materialId: string, charactValue: any, configType: string = 'Materials') {\r\n    const body = { objType: configType, objID: materialId, charactValue };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid', 'put', null, options);\r\n  }\r\n  /**\r\n   * è·åå¸®å©ä¿¡æ¯\r\n   * @param helpid å¸®å©id\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param params åæ°\r\n   * @returns \r\n   */\r\n  public getHelpInfo(helpid: string, filter: string, params: any): Observable<any> {\r\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\r\n    const httpParams: any = {};\r\n    if (params) {\r\n      if (params.pageIndex) {\r\n        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\r\n      }\r\n      if (params.pageSize) {\r\n        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\r\n      }\r\n      if (params.condition) {\r\n        httpParams['condition'] = JSON.stringify(params.condition);\r\n      }\r\n      if (params.searchValue) {\r\n        httpParams['search'] = params.searchValue;\r\n      }\r\n    }\r\n    const body = {\r\n      helpID: helpid,\r\n      queryParam: JSON.stringify(httpParams),\r\n      filterStr: filter\r\n    };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request(url, 'put', null, options);\r\n  }\r\n}","import { Inject, Injectable, Injector, LOCALE_ID, Optional } from \"@angular/core\";\r\nimport { BefRepository, ResponseInfo } from \"@farris/bef\";\r\nimport { FrameContext, RestfulService, Repository } from '@farris/devkit';\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { FeatureRepository } from \"./feature-repository\";\r\nimport { Prop } from \"./types\";\r\n\r\n@Injectable()\r\nexport class FeatureDataService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private repository: FeatureRepository,\r\n    @Optional() @Inject(LOCALE_ID) private localeId?: string\r\n  ) {\r\n    this.localeId = this.localeId || 'zh-CHS';\r\n  }\r\n  /**\r\n   * æ ¹æ®ç©æidè·åç©æç¹å¾é¡¹åç¹å¾å¼ï¼å¬å±é»è®¤å¼ï¼\r\n   * @param materialId ç©æid\r\n   */\r\n  public getFeaturesByMaterialId(materialId: string): Observable<Prop.IReturnValue> {\r\n    return this.repository.getFeaturesByMaterialId(materialId).pipe(\r\n      map((response: ResponseInfo) => {\r\n        if (!response || !response.returnValue) {\r\n          return null;\r\n        }\r\n        const returnValue = JSON.parse(response.returnValue);\r\n        const result: Prop.IReturnValue = { propset: [], props: [] };\r\n        const propsets = returnValue.propset || null;\r\n        const props = returnValue.props || null;\r\n        if (propsets && Array.isArray(propsets)) {\r\n          propsets.map((propset: Prop.IPropSet) => {\r\n            propset.name = this.translateName(propset);\r\n            return propset;\r\n          });\r\n          result.propset = propsets;\r\n        }\r\n        if (props && Array.isArray(props) && props.length > 0) {\r\n          props.map((prop: Prop.IProp) => {\r\n            // å¤çå¤è¯­\r\n            prop.name = this.translateName(prop);\r\n            // å¤çæä¸¾\r\n            if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {\r\n              prop.data = JSON.parse(prop.enuminfo);\r\n            }\r\n            // å¤çå¿å¡«ååªè¯»\r\n            prop.isreadonly = prop.isreadonly === '1' ? true : false;\r\n            prop.isrequired = prop.isrequired === '1' ? true : false;\r\n            return prop;\r\n          });\r\n          result.props = props;\r\n        }\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ ¹æ®ç©æidåç©æç¹å¾ä¿å­åçhashè·åè¯¥ç©æå·²ç»å­å¨çç¹å¾é¡¹å¼\r\n   * @param materialId ç©æId\r\n   * @param configID å¯¹åºè¯¥ç©æçç¹å¾é¡¹hash\r\n   * @returns \r\n   */\r\n  public getConfigedValueByFeatureId(materialId: string, configID: string, configType: string = 'Materials'): Observable<any> {\r\n    return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map((result: any) => {\r\n      return JSON.parse(result);\r\n    }));\r\n  }\r\n  /**\r\n   * ä¿å­ç©æç¹å¾é¡¹\r\n   * @param materialId ç©æid\r\n   * @param charactValue ç¹å¾å¼\r\n   * @param configType éç½®ç±»å\r\n   * @returns \r\n   */\r\n  public applyFeatures(materialId: string, charactValue: any, configType: string = 'Materials') {\r\n    return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map((config: any) => {\r\n      return JSON.parse(config);\r\n    }));\r\n  }\r\n  /**\r\n   * è·åå¸®å©ä¿¡æ¯\r\n   * @param helpid å¸®å©id\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param params åæ°\r\n   * @returns \r\n   */\r\n  public getHelpInfo(helpid: string, filter: string, params: any): Observable<any> {\r\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\r\n    const httpParams: any = {};\r\n    if (params) {\r\n      if (params.pageIndex) {\r\n        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\r\n      }\r\n      if (params.pageSize) {\r\n        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\r\n      }\r\n      if (params.condition) {\r\n        httpParams['condition'] = JSON.stringify(params.condition);\r\n      }\r\n      if (params.searchValue) {\r\n        httpParams['search'] = params.searchValue;\r\n      }\r\n    }\r\n    const body = {\r\n      helpID: helpid,\r\n      queryParam: JSON.stringify(httpParams),\r\n      filterStr: filter\r\n    };\r\n    const befRepository: BefRepository<any> = null;//this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request(url, 'put', null, options).pipe(\r\n      map((result: any) => JSON.parse(result))\r\n    );\r\n  }\r\n  /**\r\n   * å½éåç¹å¾é¡¹æç¹å¾éåç§°\r\n   * @param object ç¹å¾éæç¹å¾é¡¹å¯¹è±¡\r\n   * @returns \r\n   */\r\n  private translateName(object: Prop.IPropSet | Prop.IProp): string {\r\n    if (!object) {\r\n      return null;\r\n    }\r\n    let name = null;\r\n    switch (this.localeId) {\r\n      case 'en': {\r\n        name = object['name_en'];\r\n      } break;\r\n      case 'zh-CHS': {\r\n        name = object['name_chs'];\r\n      } break;\r\n      case 'zh-CHT': {\r\n        name = object['name_cht'];\r\n      } break;\r\n      default: name = object['name_chs'];\r\n    }\r\n    return name;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { FeatureEditorService } from '@farris/ui-feature-editor';\r\nimport { FormNotifyService } from \"../form-notify.service\";\r\nimport { map, switchMap, tap } from \"rxjs/operators\";\r\nimport { FormLoadingService } from \"../form-loading/form-loading.service\";\r\nimport { FeatureDataService } from './feature-data.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class FeatureEditService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private featureEditorService: FeatureEditorService,\r\n    private featureDataService: FeatureDataService,\r\n    private loadingService: FormLoadingService,\r\n    private notifyService: FormNotifyService,\r\n    private languageService: LanguageService,\r\n  ) { }\r\n\r\n  public edit(materialId: string, materialFeatureId?: string, options?: any) {\r\n    if (!materialId) {\r\n      throw new Error('[FeatureEditService]ç©æidä¸è½ä¸ºç©ºï¼');\r\n    }\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n    if (typeof options === 'string' && options.startsWith('{') && options.endsWith('}')) {\r\n      options = JSON.parse(options);\r\n    }\r\n    options.getHelpInfo = this.featureDataService.getHelpInfo;\r\n    this.loadingService.show();\r\n    return this.featureDataService.getFeaturesByMaterialId(materialId).pipe(\r\n      tap((result: any) => {\r\n        this.loadingService.hide();\r\n        const returnValue = result || null;\r\n        if (returnValue) {\r\n          const featureInfo = JSON.parse(returnValue);\r\n          const props = featureInfo.props || null;\r\n          if (!props || props.length < 1) {\r\n            this.notifyService.warning(this.languageService.propsIsEmpty);\r\n            return;\r\n          }\r\n          this.featureEditorService.show(props, options);\r\n        } else {\r\n          this.notifyService.error(this.languageService.propsIsEmpty);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  private buildFeatures(materialId: string, materialFeatureId?: string) {\r\n    const features$ = this.featureDataService.getFeaturesByMaterialId(materialId);\r\n    return features$.pipe(\r\n      switchMap(featureSet => {\r\n        if (materialFeatureId) {\r\n          const configedFeatures$ = this.featureDataService.getConfigedValueByFeatureId(materialFeatureId, materialFeatureId);\r\n          return configedFeatures$.pipe(\r\n            map(defaultConfigs => {\r\n              const featureTemplate = featureSet.props;\r\n              const features = this.mergeFeatures(featureTemplate, defaultConfigs);\r\n              return features;\r\n            })\r\n          );\r\n        } else {\r\n          return of(featureSet.props);\r\n        }\r\n      })\r\n    );\r\n\r\n  }\r\n  private mergeFeatures(featureTemplate: any, defaultConfigs: any) {\r\n    return null;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { AppContext, FrameContext, Repository, ENTITY_TEMPLATE, ResolveService, ExpressionUtil, ExpressionExecutor } from \"@farris/devkit\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ExpressionService {\r\n  constructor(private injector: Injector, private resolveService: ResolveService, private frameContext: FrameContext, private expressionExecutor: ExpressionExecutor) { }\r\n  /**\r\n   * æ§è¡è¡¨è¾¾å¼è®¡ç®\r\n   * @param expression è¡¨è¾¾å¼\r\n   * @param customContext èªå®ä¹ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public execute(expression: string, customContext?: { [prop: string]: any }): any {\r\n    const deps = this.resolveService.resolve(expression);\r\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\r\n    const entityContext = this.buildEntityContext(deps, groupDependencies);\r\n    const stateContext = this.buildStateContext();\r\n    const context = {\r\n      [this.entityOriginalNodeCode]: entityContext,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.frameContext.bindingData,\r\n      repository: this.frameContext.repository,\r\n      ...customContext\r\n    }\r\n    return this.expressionExecutor.eval(expression, context);\r\n  }\r\n  /**\r\n   * æ§è¡è¡¨è¾¾å¼ï¼è¿åå¯è§å¯å¯¹è±¡ï¼\r\n   * @param expression è¡¨è¾¾å¼\r\n   * @param customContext èªå®ä¹ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public executeAsync(expression: string, customContext?: { [prop: string]: any }): Observable<any> {\r\n    const result = this.execute(expression, customContext);\r\n    return of(result);\r\n  }\r\n  /**\r\n   * æé å®ä½ä¸ä¸æ\r\n   * @param deps \r\n   * @param groupDependencies \r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: { [prop: string]: any }) {\r\n    let isGroupdMainEntity = false;\r\n    deps.forEach((dep: string) => {\r\n      const isEntityDependency = this.isEntityDependency(dep);\r\n      const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\r\n      // å¦æä¾èµçæ¯stateï¼æ éå¤çï¼ç°å¨éè¦ç¡®å®çæ¯è¿åå¤å°å®ä½çé®é¢ï¼åstateæ²¡æå³ç³»\r\n      // è¡¨è¾¾å¼ä¾èµäºå®ä½\r\n      if (isEntityDependency) {\r\n        // æ¯èåä¾èµ\r\n        if (isGroupDependency) {\r\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\r\n          if (dependencyLength === 1) {\r\n            // èåäºä¸»è¡¨å­æ®µï¼ææä¸»è¡¨æ°æ®é½éè¦åä¸è¿ç®ï¼æ­¤æ¶å·²ç»ç¡®å®è®¡ç®çå®ä½ä¸ä¸æäºã\r\n            isGroupdMainEntity = true;\r\n          } else {\r\n            // èåäºå­è¡¨å­æ®µï¼åªéè¦ä¼ éå½åå®ä½\r\n          }\r\n        } else {\r\n          // å½åä¾èµä¸æ¯èåï¼åªéè¦ä¼ éå½åå®ä½\r\n        }\r\n      }\r\n    });\r\n    const data = this.getEntity();\r\n    if (isGroupdMainEntity) {\r\n      const collection = this.frameContext.repository.entityCollection.toJSON();\r\n      data['__type__'] = 'List';\r\n      data['__items__'] = collection;\r\n    }\r\n    return data;\r\n  }\r\n  /**\r\n   * æ¯å¦ä¸ºå®ä½ä¾èµ\r\n   * @param dep \r\n   * @returns \r\n   */\r\n  private isEntityDependency(dep: string) {\r\n    return dep.startsWith(ENTITY_TEMPLATE);\r\n  }\r\n  /**\r\n   * è·åå®ä½\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getEntity() {\r\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\r\n    const bindingData = this.frameContext.bindingData;\r\n    const childrenEntityPaths = [];\r\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n    const entity = this.frameContext.bindingData.list.currentItem.toJSON();\r\n    entity['__type__'] = 'Entity';\r\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n      return entity;\r\n    }\r\n    // æ¾å°ææå­è¡¨\r\n    childrenEntityPaths.forEach((paths: string[]) => {\r\n      const row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\r\n      if (row) {\r\n        const propertyName = paths.pop();\r\n        let parent = paths.reduce((object: any, path: string) => {\r\n          return object && object[path] || null;\r\n        }, entity);\r\n        const node = { __items__: [...parent[propertyName]], ...row, __type__: 'List' };\r\n        parent[propertyName] = node;\r\n      }\r\n    });\r\n    return entity;\r\n  }\r\n  /**\r\n   * è·åä¸»å®ä½åå§å­æ®µå\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    const repository = this.injector.get(Repository);\r\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n  /**\r\n   * æé åéä¸ä¸æ\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext() {\r\n    const ns = this.frameContext.namespace;\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const result = {};\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const anonymousFrameContext = frameContexts[0];\r\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { ApplicationRef, ChangeDetectorRef, Injectable, Injector } from \"@angular/core\";\r\n\r\n/**\r\n * angular èå¼æ£æ¥æå¡\r\n */\r\n@Injectable()\r\nexport class DirtyCheckingService {\r\n  constructor(public injector: Injector, private cd: ChangeDetectorRef, private appRef: ApplicationRef) {\r\n  }\r\n  /**\r\n   * Checks this view and its children. \r\n   * @param global æ¯å¦å¨å±æ£æ¥\r\n   */\r\n  public detectChanges(global?: boolean | string) {\r\n    global = (global === true || global === 'true') ? true : false;\r\n    if (global && this.appRef) {\r\n      this.appRef.tick();\r\n    } else if (this.cd) {\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n  /**\r\n   * å¨æå®æ¶é´ï¼msï¼åè§¦åAngularèå¼æ£æ¥\r\n   * @param duration è¶æ¶æ¶é´(ms)\r\n   * @param global æ¯å¦å¨å±æ£æ¥\r\n   */\r\n  public detectChangesAfter(duration: number, global?: boolean | string) {\r\n    global = (global === true || global === 'true') ? true : false;\r\n    if (isNaN(duration)) {\r\n      return;\r\n    }\r\n    if (global && this.appRef) {\r\n      window.setTimeout(() => {\r\n        this.appRef.tick();\r\n      }, duration);\r\n    } else if (this.cd) {\r\n      window.setTimeout(() => {\r\n        this.cd.detectChanges();\r\n      }, duration);\r\n    }\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { EMPTY, of } from \"rxjs\";\r\nimport { switchMap, tap } from \"rxjs/operators\";\r\nimport { BefRepository } from \"@farris/bef\";\r\nimport { FrameContext, DataPathCreator, Repository, DataPath, EntityList, BindingList, Entity } from \"@farris/devkit\";\r\nimport { LanguageService } from \"./languag.service\";\r\nimport { FormMessageService } from \"./form-message.service\";\r\n\r\n@Injectable()\r\nexport class PopUpService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private frameContext: FrameContext,\r\n    private repository: Repository<any>,\r\n    private languageService: LanguageService,\r\n    private messageService: FormMessageService\r\n  ) { }\r\n  public confirm() { }\r\n  /**\r\n   * åæ¶åæ´\r\n   * @param frameId \r\n   * @param id \r\n   * @returns \r\n   */\r\n  public cancel(frameId: string, id?: string) {\r\n    const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    if (!frameContext) {\r\n      throw new Error(`[PopUpService]Invalid frameId ${frameId}`);\r\n    }\r\n    const primaryValue = this.frameContext.bindingData.list.currentId;\r\n    const bindingPath = frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    if (!id) {\r\n      const bindingList = this.frameContext.bindingData.getList() as BindingList;\r\n      id = bindingList.currentId;\r\n    }\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const longPaths = (DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData) as DataPath).toArray().map((path: string) => path.split(':')[1]);\r\n    const entityListPaths = Array.from(longPaths);\r\n    //èå¼å½åè¡¨å½åè¡\r\n    entityListPaths.pop();\r\n    const dialogRef = this.frameContext.frameComponent['dialogRef'];\r\n    if (entityListPaths.length < 1) {\r\n      // ä¸»è¡¨\r\n      const entity = this.repository.entityCollection.getEntityById(id) as Entity;\r\n      const originalData = entity['originalData'];\r\n      entity.load(originalData, { loadChild: false });\r\n    } else {\r\n      const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths) as EntityList<any>;\r\n      if (entityList) {\r\n        const originalData: any[] = entityList['originalData'];\r\n        const item = originalData.find(item => item.id === id);\r\n        if (item) {\r\n          // å·²ææ°æ®ï¼è¿ååæ´\r\n          const entity: Entity = befRepository.entityManager.getEntityByPath(longPaths) as Entity;\r\n          if (entity.changes && entity.changes.length > 0) {\r\n            return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(\r\n              tap((result: boolean) => {\r\n                if (result) {\r\n                  entity.load(item, { loadChild: false });\r\n                  entity.changes.splice(0, entity.changes.length);\r\n                }\r\n              })\r\n            );\r\n          } else {\r\n            // æ²¡æä¿®æ¹ï¼ç´æ¥å³é­\r\n            if (dialogRef) {\r\n              dialogRef.close();\r\n            }\r\n          }\r\n        } else {\r\n          // æ°å¢çæ°æ®ï¼å é¤\r\n          const paths = this.buildPath(bindingPath, primaryValue);\r\n          return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(\r\n            switchMap(result => {\r\n              if (result) {\r\n                return befRepository.removeEntityByPath(paths, id).pipe(\r\n                  tap(() => {\r\n                    befRepository.entityManager.removeEntityByPath(paths, id);\r\n\r\n                    if (entityList.count() === 0 && dialogRef) {\r\n                      dialogRef.close();\r\n                    }\r\n                  })\r\n                );\r\n              } else {\r\n                return EMPTY;\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return of([]);\r\n  }\r\n  /**\r\n   * åæ­¥å½åè¡\r\n   */\r\n  public updateCurrentRow(id?: string) {\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    // const frameId = this.frameContext.frameId;\r\n    const root = this.frameContext.appContext.frameContextManager.getRootFrameContext();\r\n    const primaryKeyValue = root.bindingData.list.currentId;\r\n    this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);\r\n    if (bindingPaths.length > 0) {\r\n      const paths = [];\r\n      bindingPaths.forEach((path: string, index: number, array) => {\r\n        paths.push(path);\r\n        const bindingList = root.bindingData.getValue(paths) as BindingList;\r\n        if (bindingList) {\r\n          const currentId = bindingList.currentId;\r\n          const modalBindingList = this.frameContext.bindingData.getValue(paths) as BindingList;\r\n          if (index === bindingPath.length - 1 && id) {\r\n            modalBindingList.setCurrentId(id);\r\n          } else if (modalBindingList) {\r\n            modalBindingList.setCurrentId(currentId);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  public closeCheck() {\r\n    const frameContext = this.frameContext;\r\n    const bindingPath = frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const longPaths = (DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData) as DataPath).toArray().map((path: string) => path.split(':')[1]);\r\n    const entityListPaths = Array.from(longPaths);\r\n    entityListPaths.pop();\r\n    const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths) as EntityList<any>;\r\n    const dialogRef = this.frameContext.frameComponent['dialogRef'];\r\n    if (entityList.count() === 0 && dialogRef) {\r\n      dialogRef.close();\r\n    }\r\n  }\r\n  /**\r\n   * æé å­è¡¨è·¯å¾\r\n   * @param bindingPath ç»å®è·¯å¾\r\n   * @param id id\r\n   */\r\n  private buildPath(bindingPath: string, id: any) {\r\n    let path = '/' + id;\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = this.frameContext.viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, DataPropInfo, DataTypeInfo, Entity, FrameContext, NgFormControl, Repository } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class FormService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private appContext: AppContext,\r\n    private repository: Repository<Entity>\r\n  ) {\r\n  }\r\n  /**\r\n   * æ ¹æ®å­æ®µè·¯å¾è·åè¯¥å­æ®µå¨å¡çæè¡¨æ ¼ä¸­çç´¢å¼\r\n   * @param source ngFormControlsæany[][]\r\n   * @param propertyPath å­æ®µé¤bindingPathä¹å¤çå®æ´è·¯å¾\r\n   * @returns \r\n   */\r\n  public getIndex(source: { [propertyName: string]: NgFormControl } | any[], propertyPath: string) {\r\n    if (Array.isArray(source)) {\r\n      const combine: any[] = source.reduce((result: any[], group: any[]) => {\r\n        return result.concat(group);\r\n      }, []);\r\n      return combine.findIndex((item: any) => item.field === propertyPath);\r\n    } else if (Object.prototype.toString.call(source) === '[object Object]') {\r\n      return Object.keys(source).findIndex(key => source[key].binding === propertyPath);\r\n    }\r\n  }\r\n  \r\n}","import { Injectable } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class ViewModelService {\r\n  constructor() { }\r\n  public getGridColumns(frameContext: FrameContext): any[] {\r\n    const dataGridColumnsName = frameContext && frameContext.viewModel && frameContext.viewModel['dataGridColumnsName'] || null;\r\n    return dataGridColumnsName && frameContext.viewModel[dataGridColumnsName] || [];\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { DataPropGroup, FrameContext } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class PaginationService {\r\n  constructor(private injector: Injector, private frameContext: FrameContext) { }\r\n  /**\r\n   * åå¼åé¡µä¿¡æ¯\r\n   */\r\n  public resetChildrenPagination() {\r\n    const paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};\r\n    const childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(DataPropGroup.List) || [];\r\n    if (paginationInfo && Object.keys(paginationInfo).length > 0) {\r\n      const keys = Object.keys(paginationInfo);\r\n      keys.forEach((key: string) => {\r\n        const value = paginationInfo[key];\r\n        if (Object.prototype.toString.apply(value) !== '[object Object]') {\r\n          return;\r\n        }\r\n        const rowPagination = childrenEntityCodes.find((nodeCode: string) => {\r\n          // å»æs\r\n          nodeCode = nodeCode.slice(0, -1);\r\n          return key.startsWith(`${nodeCode}_`);\r\n        });\r\n        if (rowPagination) {\r\n          delete paginationInfo[key];\r\n        } else {\r\n          paginationInfo[key].pageIndex = 1;\r\n          delete paginationInfo[key].total;\r\n          delete paginationInfo[key].pageCount;\r\n        }\r\n      });\r\n      this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\r\n    }\r\n  }\r\n}","import { Provider } from '@angular/core';\r\n\r\nimport { UIStateService } from '../ui-state.service';\r\nimport { StateMachineService } from '../state-machine.service';\r\nimport { ValidationService } from '../validation.service';\r\nimport { BindingDataService } from '../binding-data.service';\r\nimport { CommandService } from '../command-service';\r\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\r\nimport { GridMiddlewareService } from '../grid.middleware.service';\r\nimport { BeActionService } from '../be-action.service';\r\nimport { ApproveService } from '../approve.service';\r\nimport { PrintService } from '../print.service';\r\nimport { AttachmentDataService, AttachmentService, FileService } from '../attachment/index';\r\nimport {\r\n  EntityTraversingService, EntityManipulationService, EntityAggregationService,\r\n  EntityListService, EntityService\r\n} from '../entity-services/index';\r\nimport { SidebarService } from '../sidebar-service';\r\nimport { ChangeItemService } from '../change-item.service';\r\n\r\nimport {\r\n  ListDataService, CardDataService, SubListDataService, TreeDataService,\r\n  RemoveDataService, SaveDataService, EditDataService, SubTreeDataService\r\n} from '../data-services/index';\r\n\r\nimport { FarrisFormService } from '../farris-form.service';\r\nimport { DialogService } from '../dialog.service';\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { RouterService } from '../router.service';\r\nimport { AuthorityService } from '../authority/authority.service';\r\n\r\nimport { QuerySolutionService } from '../query-solution/query-solution.service';\r\nimport { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';\r\nimport { FilterConditionDataService } from '../data-services/filter-condition-data.service';\r\nimport { FocusInvalidService } from '../focus-invalid.service';\r\nimport { EndEditService } from '../end-edit.service';\r\nimport { RemoteSummaryService } from '../remote-summary.service';\r\nimport { BatchEditService } from '../batch-edit.service';\r\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\r\nimport { FeatureEditorService } from '@farris/ui-feature-editor';\r\nimport { DiscussionGroupService } from '../discussion-group.service';\r\nimport { ListFilterConditionsService } from '../list-filter/list-filter.service';\r\nimport { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';\r\nimport { FORM_MANIFEST_SERVICE_TOKEN, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, FRAME_COMPONENT_INIT_HANDLER_TOKEN } from '@farris/devkit';\r\nimport { FormManifestService, FormExpressionManifestService } from '../manifest/index';\r\nimport { LocalizationService } from '../localization.service';\r\nimport { DataGridService } from '../data-grid.service';\r\nimport { FormAttentionService } from '../form-attention.service';\r\nimport { FeatureDataService, FeatureEditService } from '../feature-edit/index';\r\nimport { ExpressionService } from '../expression_service';\r\nimport { DirtyCheckingService } from '../dirty-checking.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { PopUpService } from '../pop_up.service';\r\nimport { WorkFlowMessageHandler } from '../work-flow/index';\r\nimport { FormService } from '../form.service';\r\nimport { FormControlService } from '../form-control.service';\r\nimport { BindingPathService } from '../binding-path.service';\r\nimport { FrameContextService } from '../frame-context.service';\r\nimport { ViewModelService } from '../view-model.service';\r\nimport { PaginationService } from '../pagination.service';\r\n/**\r\n * ç»ä»¶çº§æ³¨å¥æ³¨å¥(å±23ä¸ª)\r\n */\r\nconst FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS: Provider[] = [\r\n  ValidationService,\r\n  FocusInvalidService,\r\n  ChangeItemService,\r\n  UIStateService,\r\n  StateMachineService,\r\n  BindingDataService,\r\n  CommandService,\r\n\r\n  // entity-services\r\n  EntityTraversingService,\r\n  EntityManipulationService,\r\n  EntityAggregationService,\r\n  EntityListService,\r\n  EntityService,\r\n\r\n  // data-services\r\n  ListDataService,\r\n  TreeDataService,\r\n  SubTreeDataService,\r\n  CardDataService,\r\n  SubListDataService,\r\n  RemoveDataService,\r\n  SaveDataService,\r\n  EditDataService,\r\n  FilterConditionDataService,\r\n  RemoteSummaryService,\r\n\r\n  BeActionService,\r\n  ApproveService,\r\n  PrintService,\r\n  AttachmentDataService,\r\n  AttachmentService,\r\n  FileService,\r\n  NavigationMiddlewareService,\r\n  GridMiddlewareService,\r\n  SidebarService,\r\n  FarrisFormService,\r\n  DialogService,\r\n  NavigationEventService,\r\n  NavigationService,\r\n  RouterService,\r\n  AuthorityService,\r\n  {\r\n    provide: QUERYSOLUTION_HANDLER_TOKEN,\r\n    useClass: QuerySolutionService\r\n  },\r\n  {\r\n    provide: LISTFILTER_HANDLER_TOKEN,\r\n    useClass: ListFilterConditionsService\r\n  },\r\n  EndEditService,\r\n  BatchEditDialogService,\r\n  BatchEditService,\r\n  DiscussionGroupService,\r\n  LocalizationService,\r\n  DataGridService,\r\n  FormAttentionService,\r\n  FeatureEditorService,\r\n  FeatureDataService,\r\n  FeatureEditService,\r\n  ExpressionService,\r\n  PopUpService,\r\n  DirtyCheckingService,\r\n  FormService,\r\n  FormControlService,\r\n  BindingPathService,\r\n  FrameContextService,\r\n  ViewModelService,\r\n  PaginationService,\r\n  // è¡¨è¾¾å¼\r\n  { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },\r\n  { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService },\r\n  { provide: MESSAGE_SERVICE_TOKEN, useClass: FormMessageService },\r\n  { provide: NOTIFY_SERVICE_TOKEN, useClass: FormNotifyService },\r\n  { provide: FRAME_COMPONENT_INIT_HANDLER_TOKEN, useClass: WorkFlowMessageHandler, multi: true }\r\n];\r\n\r\nexport { FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS };\r\n","import { Provider } from '@angular/core';\r\n\r\nimport { RouterService } from '../router.service';\r\nimport { UIStateService } from '../ui-state.service';\r\nimport { StateMachineService } from '../state-machine.service';\r\nimport { ValidationService } from '../validation.service';\r\nimport { BindingDataService } from '../binding-data.service';\r\nimport { CommandService } from '../command-service';\r\n\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\r\nimport { GridMiddlewareService } from '../grid.middleware.service';\r\n\r\nimport { BeActionService } from '../be-action.service';\r\nimport { ApproveService } from '../approve.service';\r\nimport { PrintService } from '../print.service';\r\nimport { AttachmentDataService, AttachmentService, FileService } from '../attachment/index';\r\nimport {\r\n    EntityTraversingService, EntityManipulationService, EntityAggregationService,\r\n    EntityListService, EntityService\r\n} from '../entity-services/index';\r\nimport { DialogService } from '../dialog.service';\r\nimport { SidebarService } from '../sidebar-service';\r\nimport { FarrisFormService } from '../farris-form.service';\r\nimport { ChangeItemService } from '../change-item.service';\r\n\r\n// data-services\r\nimport { ListDataService } from '../data-services/list-data.service';\r\nimport { TreeDataService } from '../data-services/tree-data.service';\r\nimport { CardDataService } from '../data-services/card-data.service';\r\nimport { SubListDataService } from '../data-services/sub-list-data.service';\r\nimport { FocusInvalidService } from '../focus-invalid.service';\r\nimport { SubTreeDataService } from '../data-services/sub-tree-data-service';\r\nimport { RemoveDataService } from '../data-services/remove-data.service';\r\nimport { SaveDataService } from '../data-services/save-data.service';\r\nimport { EditDataService } from '../data-services/edit-data.service';\r\nimport { FilterConditionDataService } from '../data-services/filter-condition-data.service';\r\nimport { RemoteSummaryService } from '../remote-summary.service';\r\nimport { AuthorityService } from '../authority/authority.service';\r\nimport { EndEditService } from '../end-edit.service';\r\nimport { BatchEditService } from '../batch-edit.service';\r\nimport { DiscussionGroupService } from '../discussion-group.service';\r\nimport { LocalizationService } from '../localization.service';\r\nimport { DataGridService } from '../data-grid.service';\r\nimport { FormAttentionService } from '../form-attention.service';\r\nimport { FormManifestService } from '../manifest/form_manifest_service';\r\nimport { FormExpressionManifestService } from '../manifest/form_expression_manifest_service';\r\nimport { ListFilterConditionsService } from '../list-filter/list-filter.service';\r\nimport { QuerySolutionService } from '../query-solution/query-solution.service';\r\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\r\nimport { FORM_MANIFEST_SERVICE_TOKEN, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN } from '@farris/devkit';\r\nimport { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';\r\nimport { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';\r\n\r\n/**\r\n * ç»ä»¶çº§æ³¨å¥æ³¨å¥(å±23ä¸ª)\r\n */\r\nconst DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS: Provider[] = [\r\n    { provide: 'ValidationService', useClass: ValidationService },\r\n    { provide: 'FocusInvalidService', useClass: FocusInvalidService },\r\n    { provide: 'ChangeItemService', useClass: ChangeItemService },\r\n    { provide: 'UIStateService', useClass: UIStateService },\r\n    { provide: 'StateMachineService', useClass: StateMachineService },\r\n    { provide: 'BindingDataService', useClass: BindingDataService },\r\n    { provide: 'CommandService', useClass: CommandService },\r\n\r\n    // entity-services\r\n    { provide: 'EntityTraversingService', useClass: EntityTraversingService },\r\n    { provide: 'EntityManipulationService', useClass: EntityManipulationService },\r\n    { provide: 'EntityAggregationService', useClass: EntityAggregationService },\r\n    { provide: 'EntityListService', useClass: EntityListService },\r\n    { provide: 'EntityService', useClass: EntityService },\r\n\r\n    // data-services\r\n    { provide: 'ListDataService', useClass: ListDataService },\r\n    { provide: 'TreeDataService', useClass: TreeDataService },\r\n    { provide: 'SubTreeDataService', useClass: SubTreeDataService },\r\n    { provide: 'CardDataService', useClass: CardDataService },\r\n    { provide: 'SubListDataService', useClass: SubListDataService },\r\n    { provide: 'RemoveDataService', useClass: RemoveDataService },\r\n    { provide: 'SaveDataService', useClass: SaveDataService },\r\n    { provide: 'EditDataService', useClass: EditDataService },\r\n    { provide: 'FilterConditionDataService', useClass: FilterConditionDataService },\r\n    { provide: 'RemoteSummaryService', useClass: RemoteSummaryService },\r\n\r\n    { provide: 'BeActionService', useClass: BeActionService },\r\n    { provide: 'ApproveService', useClass: ApproveService },\r\n    { provide: 'PrintService', useClass: PrintService },\r\n    { provide: 'AttachmentDataService', useClass: AttachmentDataService },\r\n    { provide: 'AttachmentService', useClass: AttachmentService },\r\n    { provide: 'FileService', useClass: FileService },\r\n    { provide: 'NavigationMiddlewareService', useClass: NavigationMiddlewareService },\r\n    { provide: 'GridMiddlewareService', useClass: GridMiddlewareService },\r\n    { provide: 'SidebarService', useClass: SidebarService },\r\n    { provide: 'FarrisFormService', useClass: FarrisFormService },\r\n    { provide: 'DialogService', useClass: DialogService },\r\n    { provide: 'NavigationEventService', useClass: NavigationEventService },\r\n    { provide: 'NavigationService', useClass: NavigationService },\r\n    { provide: 'RouterService', useClass: RouterService },\r\n    { provide: 'AuthorityService', useClass: AuthorityService },\r\n    {\r\n        provide: QUERYSOLUTION_HANDLER_TOKEN,\r\n        useClass: QuerySolutionService\r\n    },\r\n    {\r\n        provide: LISTFILTER_HANDLER_TOKEN,\r\n        useClass: ListFilterConditionsService\r\n    },\r\n    { provide: 'EndEditService', useClass: EndEditService },\r\n    { provide: 'BatchEditDialogService', useClass: BatchEditDialogService },\r\n    { provide: 'BatchEditService', useClass: BatchEditService },\r\n    { provide: 'DiscussionGroupService', useClass: DiscussionGroupService },\r\n    { provide: 'LocalizationService', useClass: LocalizationService },\r\n    { provide: 'DataGridService', useClass: DataGridService },\r\n    { provide: 'FormAttentionService', useClass: FormAttentionService },\r\n    // è¡¨è¾¾å¼\r\n    { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },\r\n    { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService }\r\n];\r\n\r\n\r\nexport { DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS };\r\n","import { NgModule } from '@angular/core';\r\nimport { FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS } from './providers/index';\r\nimport { WfTaskHandlerModule } from '@gsp-wf/wf-task-handler';\r\nimport { WorkFlowMessage } from './work-flow/index';\r\n\r\n@NgModule({\r\n  providers: FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS,\r\n  imports: [\r\n    WfTaskHandlerModule\r\n  ],\r\n  exports: [\r\n    WfTaskHandlerModule\r\n  ]\r\n})\r\nclass CommandServicesModule {\r\n  constructor(private workFlowMessage: WorkFlowMessage) {\r\n    if (this.workFlowMessage) {\r\n      this.workFlowMessage.setup();\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandServicesModule };\r\n","import { RuntimeFrameworkService } from '../rtf-service';\r\nimport { UID } from '@farris/devkit';\r\n\r\nexport class MessagePipe {\r\n    constructor(public token: string, private rtfService: RuntimeFrameworkService) { }\r\n    /**\r\n     * åç®¡éåéæ¶æ¯\r\n     * @param message æ¶æ¯\r\n     */\r\n    public sendMessage(message: any) {\r\n        this.rtfService.subjectNotify(this.token, message);\r\n        return this;\r\n    }\r\n    /**\r\n     * çå¬ç®¡éæ¶æ¯\r\n     * @param handler æ¶æ¯å¤çå¨\r\n     */\r\n    public listen(handler: (data: any) => void): () => void {\r\n        const observerToken = UID.create();\r\n        this.rtfService.subjectResponse(this.token, handler, observerToken);\r\n        const unListen = () => {\r\n            this.rtfService.responseUnSubscribe(this.token, observerToken);\r\n        };\r\n        return unListen;\r\n    }\r\n    /**\r\n     * éæ¯ç®¡é\r\n     */\r\n    public destory() {\r\n        this.rtfService.subjectRemove(this.token);\r\n    }\r\n}\r\n","import { MessagePipe } from './message-pipe';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { Subject } from 'rxjs';\r\nimport { QuerystringService } from '../querystring';\r\n\r\nexport class MessagePipeService {\r\n  private static rtfService: RuntimeFrameworkService = new RuntimeFrameworkService();\r\n  private static querystringService: QuerystringService = new QuerystringService();\r\n  /**\r\n   * éè¿tokenè·åæ¶æ¯ç®¡é\r\n   * @param token æ¶æ¯ç®¡éæ è¯\r\n   */\r\n  public static get(token: string): MessagePipe {\r\n    const pipe = new MessagePipe(token, this.rtfService);\r\n    return pipe;\r\n  }\r\n  /**\r\n   * åå»ºæ¶æ¯ç®¡é\r\n   * @param pipeName ç®¡éåç§°\r\n   * @param useFormContext æ¯å¦ä½¿ç¨è¡¨åä¸ä¸æåå»ºç®¡éæ è¯\r\n   * @param pipeType ç®¡éç±»å(å¯é)ï¼é»è®¤Subject<any>\r\n   */\r\n  public static create(pipeName: string, useFormContext: boolean, pipeType?: Subject<any>): MessagePipe {\r\n    let options = null;\r\n    if (useFormContext) {\r\n      const params = this.querystringService.parse(window.location.hash);\r\n      const { funcId, appId, appEntrance } = params;\r\n      options = { funcId, appId, appEntrance };\r\n    }\r\n    const token = this.rtfService.subjectRegister(pipeName, options, pipeType);\r\n    if (!token) {\r\n      console.warn('message pipe create failed.');\r\n      return null;\r\n    }\r\n    const pipe = new MessagePipe(token, this.rtfService);\r\n    return pipe;\r\n  }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { AppContext, BackEndMessage, BindingList, DataPropInfo, EventBus, FrameComponent, FrameContext, NgFormControl, Translate, TranslateToken } from '@farris/devkit';\r\n/**\r\n * åç«¯æ¶æ¯å¤çæå¡\r\n * @description\r\n * ### æå¡æ³¨å¥ä½ç½®\r\n *  1ãæ´ä¸ªè¡¨åçroot-component \r\n *  2ãå¼¹åºçªå£çroot-component \r\n */\r\n@Injectable()\r\nexport class BackEndMessageHandler implements BackEndMessage.IBackEndMessageHandler {\r\n  constructor(private injector: Injector, private frameContext: FrameContext, @Inject(TranslateToken) private translate: Translate) { }\r\n  /**\r\n   * å¤çåç«¯è¿åçæ¶æ¯æéè¯¯\r\n   * @param message æ¶æ¯æéè¯¯\r\n   */\r\n  public handle(message: BackEndMessage.IMessage, context: any) {\r\n    const isException = context && context.isException || false;\r\n    const hasThrowError = context && context.hasThrowError || false;\r\n    const eventBus = context && context.eventBus || null;\r\n    const error = context && context.error || null;\r\n    const formAppContext = context && context.formAppContext || null;\r\n    const result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);\r\n    if (result && result.form && result.form.length > 0) {\r\n      result.form.forEach((item: { frameContext: FrameContext, message: any }) => {\r\n        item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');\r\n      });\r\n    } else {\r\n      this.resetFormMessage(message.context.appContext, message.context.ns);\r\n    }\r\n    const targetFrameContext: FrameContext = this.findTargetFrameContext(this.frameContext);\r\n    if (result && result.all && result.all.length > 0) {\r\n      targetFrameContext.viewModel.verifycationChanged.next(result.all);\r\n    } else {\r\n      if (result !== null) {\r\n        targetFrameContext.viewModel.verifycationChanged.next([]);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ¶éæ±æ»ä¿¡æ¯åformä¿¡æ¯\r\n   * @param backEndMessage \r\n   */\r\n  private collect(backEndMessage: BackEndMessage.IMessage, isException: boolean = false, hasThrowError: boolean = false, eventBus: EventBus = null, error: any = null, formAppContext: AppContext = null): { form: { frameContext: FrameContext, message: any }[], all: any[] } {\r\n    const bizMessages = backEndMessage && backEndMessage.bizMessages || null;\r\n    const appContext = backEndMessage && backEndMessage.context.appContext;\r\n    const ns = backEndMessage.context.ns;\r\n    if (!bizMessages || bizMessages.length < 1) {\r\n      return null;\r\n    }\r\n    const result = {\r\n      form: [],\r\n      all: []\r\n    };\r\n    let hasFormlessError = false;\r\n    for (let bizMessage of bizMessages) {\r\n      const message = bizMessage.message;\r\n      const location = bizMessage.location || null;\r\n      const columns = location && location.columns || null;\r\n      const nodeCode = location && location.nodeCode || null;\r\n      const rows = location && location.rows;\r\n      const bindingPath = this.getBindingPath(appContext, ns, nodeCode);\r\n      const bindingPaths = bindingPath && bindingPath.split('/').filter(p => p);\r\n\r\n      // ç®åä»å¤çælocationï¼ä¸æidãååãè¡¨åçã\r\n      if (!location || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {\r\n        console.warn(`æ¶æ¯locationä¿¡æ¯ä¸å®æ´ï¼ä¸å¤çè¯¥æ¶æ¯ï¼${JSON.stringify(bizMessage)}`);\r\n        continue;\r\n      }\r\n      // éåæ°æ®è¡\r\n      for (let row of rows) {\r\n        for (let column of columns) {\r\n          // è·åå°ææç»å®è¯¥åæ°æ®çframeContext\r\n          let frameContexts = this.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);\r\n          if (!frameContexts || frameContexts.length < 1) {\r\n            // æ²¡æä»»ä½ä¸ä¸ªç»ä»¶ç»å®è¯¥åçæ°æ®\r\n            console.warn(`å'${column}'æ²¡æç»å®å°ä»»ä½ç»ä»¶ã`);\r\n            hasFormlessError = true;\r\n            continue;\r\n          }\r\n          // æé¤æåªè¯»datagrid\r\n          frameContexts = frameContexts.filter((frameContext: FrameContext) => {\r\n            const isDataGridComponent = this.isDataGridComponent(frameContext.frameComponent);\r\n            if (isDataGridComponent) {\r\n              const isReadonlyDataGrid = this.isReadonlyDataGrid(frameContext.frameComponent);\r\n              if (isReadonlyDataGrid) {\r\n                return false;\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n            return true;\r\n          });\r\n          // éåçè¡æ¯å¦ä¸ºå½åè¡\r\n          const isCurrentRow = this.isCurrentRow(appContext, ns, bindingPath, row);\r\n          // å¦ææ¯å½åè¡çè¯éè¦å°éè¯¯ä¿¡æ¯æ¾å°formä¸­\r\n          if (isCurrentRow) {\r\n            // å¿½ç¥grid\r\n            // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));\r\n            if (frameContexts && frameContexts.length > 0) {\r\n              frameContexts.forEach((frameContext: FrameContext) => {\r\n                // åªå¤çäºä¸ä¸ªç»ä»¶ä¸­ååªç»å®å°ä¸ä¸ªåç«¯æ§ä»¶çåºæ¯\r\n                const formControls = this.getFormControlByColumnName(frameContext, column);\r\n                if (formControls && formControls.length > 0) {\r\n                  formControls.forEach(([domPropertyName, formControl]) => {\r\n                    //const domPropertyName = formControl && formControl. || null;\r\n                    this.mergeMessage(result.form, frameContext, domPropertyName, message);\r\n                  });\r\n                }\r\n\r\n                //if (formControl && domPropertyName) {\r\n\r\n                //}\r\n              });\r\n            } else {\r\n              console.warn(`å'${column}'æ²¡æç»å®å°ä»»ä½ç»ä»¶ã`);\r\n            }\r\n          }\r\n          // å°éè¯¯ä¿¡æ¯æ¾å°æ±æ»ä¸­\r\n          frameContexts.forEach((frameContext: FrameContext) => {\r\n            const viewModelName = frameContext.viewModel.form.formGroupName;\r\n            const formControls = this.getFormControlByColumnName(frameContext, column);\r\n            if (formControls && formControls.length > 0) {\r\n              const [domPropertyName, formControl] = formControls.find(([propertyName, formControl]) => propertyName && propertyName.length > 0);\r\n              // const domPropertyName = domProperty && domProperty.propertyName;\r\n              const bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths) as BindingList;\r\n              let index = bindingList.getIndexById(row);\r\n              const primary = `${row}_${column}_${message}`;\r\n              // TODO:è½ç¶è½çº æ­£æ±æ»æ¶æ¯æ¾ç¤ºéå¤çé®é¢ï¼ä½å¯è½å¯¼è´ç¹å»éè¯¯æ æ³å®ä½å°å¯¹åºæ§ä»¶çé®é¢ï¼å¾åç»­ä¼å\r\n              if (index >= 0 && result.all.findIndex(p => p.id === primary) === -1) {\r\n                // æ°æ®æºä¸­æå¤äº1è¡æ¶æ¾ç¤ºç´¢å¼\r\n                const position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;\r\n                const title = this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);\r\n                const item = {\r\n                  id: primary,\r\n                  index,\r\n                  targetField: formControl.id,\r\n                  title,\r\n                  msg: message,\r\n                  namespace: ns,\r\n                  bindingPath,\r\n                  type: 'error'\r\n                };\r\n                result.all.push(item);\r\n              }\r\n            }\r\n\r\n          });\r\n        }\r\n      }\r\n    }\r\n    if (hasFormlessError && isException && !hasThrowError && eventBus) {\r\n      eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n    }\r\n    return result;\r\n  }\r\n  private mergeMessage(formItems: { frameContext: FrameContext, message: { [domPropertyName: string]: { errors: { [messageType: string]: { name: string } } } } }[], frameContext: FrameContext, domPropertyName: string, message: string) {\r\n    const targetItem = formItems.find(item => item.frameContext.frameId === frameContext.frameId);\r\n    if (targetItem) {\r\n      const isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);\r\n      const messageType = `backend-message-${Object.keys(targetItem.message).length + 1}`;\r\n      if (isPropertyExist) {\r\n        targetItem.message[domPropertyName]['errors'][messageType] = { name: message };\r\n      } else {\r\n        targetItem.message[domPropertyName] = { errors: { [messageType]: { name: message } } };\r\n      }\r\n    } else {\r\n      formItems.push({\r\n        frameContext: frameContext,\r\n        message: {\r\n          [domPropertyName]: {\r\n            errors: {\r\n              'backend-message-1': { name: message }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  private buildItemTitle(viewModelName: string, propertyName: string, index: any) {\r\n    const template = {\r\n      'zh-CHS': {\r\n        viewModelName: `$viewModel`,\r\n        index: `ç¬¬ $index è¡`,\r\n        propertyName: `- $propertyName`\r\n      },\r\n      'en': {\r\n        viewModelName: `$viewModel`,\r\n        index: `row $index`,\r\n        propertyName: `- $propertyName`\r\n      },\r\n      'zh-CHT': {\r\n        viewModelName: `$viewModel`,\r\n        index: `ç¬¬ $index è¡`,\r\n        propertyName: `- $propertyName`\r\n      }\r\n    };\r\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\r\n    const message = [];\r\n    if (viewModelName) {\r\n      message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));\r\n    }\r\n    if (index > 0) {\r\n      message.push(template[currentLanguage]['index'].replace('$index', index));\r\n    }\r\n    if (propertyName) {\r\n      message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));\r\n    }\r\n    return message.join(' ');\r\n  }\r\n  /**\r\n   * æ ¹æ®è¡¨åænodeCodeè·åç»å®è·¯å¾\r\n   * @param appContext appContext\r\n   * @param ns ns\r\n   * @param nodeCode è¡¨å\r\n   */\r\n  private getBindingPath(appContext: AppContext, ns: string, nodeCode: string) {\r\n    const frameContext = this.getFrameContext(appContext, ns);\r\n    return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);\r\n  }\r\n  /**\r\n   * éè¿ç»å®è·¯å¾åååæ¾å°ææç¬¦åæ¡ä»¶çè§å¾æ¨¡å(åæ¬gridåform)\r\n   * @param appContext appContext\r\n   * @param ns namespace\r\n   * @param bindingPath ç»å®è·¯å¾\r\n   * @param columnName åå\r\n   */\r\n  private getFrameContextsByBindingPathAndColumnName(appContext: AppContext, ns: string, bindingPath: string, columnName: string): FrameContext[] {\r\n    let frameContexts = appContext.frameContextManager.getFrameContexts();\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      // æ¾å°formä¸­ææ§ä»¶çframeContext\r\n      frameContexts = frameContexts.filter((frameContext: FrameContext) => {\r\n        // åºæ¬æ¡ä»¶æ¯å¦æ»¡è¶³\r\n        let isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;\r\n        if (!isValidFrameContext) {\r\n          return false;\r\n        }\r\n        // åéè¿ååè¿æ»¤\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        const dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);\r\n        if (dataTypeInfo) {\r\n          const dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());\r\n          // ä»å½åå®ä½å±æ§ä¸­æ¾å°æ°æ®å­æ®µä¸ºååçå±æ§\r\n          const entityPropertyInfo = dataPropInfos.find((propInfo: DataPropInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));\r\n          if (entityPropertyInfo) {\r\n            const entityPropertyName = entityPropertyInfo.name;\r\n            const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === entityPropertyName);\r\n            if (ngFormControl) {\r\n              return true;\r\n            } else {\r\n              const item = Object.keys(frameContext.viewModel.form.ngFormControls).find(key => key === entityPropertyName);\r\n              return item ? true : false;\r\n            }\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n      return frameContexts;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * æ¯å¦ä¸ºdatagridç»ä»¶\r\n   * @param frameComponent component\r\n   */\r\n  private isDataGridComponent(frameComponent: FrameComponent) {\r\n    const columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;\r\n    return columnNames ? true : false;\r\n  }\r\n  /**\r\n   * gridç»ä»¶æ¯å¦æ¯åªè¯»ç\r\n   * @param frameComponent frameComponent\r\n   * @returns \r\n   */\r\n  private isReadonlyDataGrid(frameComponent: FrameComponent) {\r\n    const frameContext = frameComponent.context;\r\n    const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\r\n    if (dataGridColumnsName) {\r\n      const datagridColumns: any[] = frameContext.viewModel[dataGridColumnsName];\r\n      return datagridColumns.every((group: Array<any>) => {\r\n        return group.every(item => !item.editor);\r\n      });\r\n    } else {\r\n      throw new Error(`ä¼ å¥çç»ä»¶ä¸æ¯ä¸ä¸ªè¡¨æ ¼ï¼`);\r\n    }\r\n  }\r\n  /**\r\n   * idæ¯å¦ä¸ºå½åè¡\r\n   * @param appContext appContext\r\n   * @param ns namespace\r\n   * @param bindingPath bindingPath\r\n   * @param id id\r\n   */\r\n  private isCurrentRow(appContext: AppContext, ns: string, bindingPath: string, id: string) {\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    const frameContext = this.getFrameContext(appContext, ns);\r\n    const bindingData = frameContext.bindingData;\r\n    const bindingList = bindingData.getValue(bindingPaths) as BindingList;\r\n    return bindingList.currentItem.primaryKeyValue === id;\r\n  }\r\n  /**\r\n   * è·åå½ånsä¸çrootFrameContext\r\n   * @param appContext appcontext\r\n   * @param ns namespace\r\n   */\r\n  private getFrameContext(appContext: AppContext, ns: string) {\r\n    const frameContexts = appContext.frameContextManager.getFrameContexts();\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const randomFrameContext = frameContexts.find(frameContext => frameContext.namespace === ns);\r\n      if (randomFrameContext) {\r\n        const virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();\r\n        return virtualRootFrameContext;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * éè¿ç»å®è·¯å¾åååè·åç»å®å°è¯¥åçformControl\r\n   */\r\n  private getFormControlByColumnName(frameContext: FrameContext, columnName: string): Array<[string, NgFormControl]> {\r\n    const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n    // éè¿bindingPathæ¾å°å¯¹åºçå®ä½ä¿¡æ¯\r\n    const typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);\r\n\r\n    const propsInfo = Array.from(typeInfo.propInfoMap.values());\r\n    const propInfo = propsInfo.find((propInfo: DataPropInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));\r\n    if (propInfo) {\r\n      const mappingName = propInfo.name;\r\n      const formControls: Array<[string, NgFormControl]> = Object.entries(frameContext.viewModel.form.ngFormControls).filter((item) => item[1].binding === mappingName || item[0] === mappingName);\r\n      // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);\r\n      if (formControls) {\r\n        return formControls;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private resetFormMessage(appContext: AppContext, ns: string) {\r\n    const frameContexts = appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.namespace === ns);\r\n    frameContexts.forEach(frameContext => frameContext.viewModel.form.clearBackendError());\r\n  }\r\n  /**\r\n   * éå½æ¾å°å±ç¤ºæ¶æ¯çç»ä»¶ä¸ä¸æ\r\n   * @param frameContext frameContext\r\n   */\r\n  private findTargetFrameContext(frameContext: FrameContext): FrameContext {\r\n    const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n    const virtualRootComponent = virtualRootFrameContext.frameComponent;\r\n    const isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;\r\n    if (isDialogComponent) {\r\n      // å¦ææ¶æ¯å¤çæå¡æ¯å¼¹çªåçï¼åæ¶æ¯æç¤ºå±ç¤ºå¨å¼¹çªå\r\n      return virtualRootFrameContext;\r\n    } else {\r\n      // å½åæ¶æ¯æå¡ä¸å¨å¼¹çªåï¼éå½åä¸æ¥æ¾ï¼æ¾å°ç¬¬ä¸ä¸ªå¼¹çªï¼å¦ææ¾ä¸å°åæ¾å°æä¸çroot-component\r\n      const parentFrameContext = virtualRootFrameContext.parent;\r\n      if (parentFrameContext) {\r\n        return this.findTargetFrameContext(parentFrameContext);\r\n      } else {\r\n        return virtualRootFrameContext;\r\n      }\r\n    }\r\n  }\r\n}"]}