/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class SelectionManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
    }
    /**
     * @return {?}
     */
    destroy() {
    }
    /**
     * @return {?}
     */
    getBindingData() {
        /** @type {?} */
        let jsonData = this.ins.bindingData;
        if (this.ins.ngControl &&
            this.ins.ngControl.formDirective &&
            this.ins.ngControl.formDirective.form &&
            this.ins.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ins.ngControl.formDirective.form.bindingData;
            jsonData = bindingData;
            if (bindingData.getObject) {
                jsonData = bindingData.getObject().toJSON();
            }
        }
        return jsonData;
    }
    /**
     * @return {?}
     */
    initDisplayValue() {
        /** @type {?} */
        const jsonData = this.getBindingData();
        if (jsonData && this.ins.mapFields) {
            /** @type {?} */
            const idField = this.ins.idField;
            /** @type {?} */
            let targetField = this.ins.mapFields[idField];
            if (targetField) {
                if (targetField.indexOf(',') > -1) {
                    targetField = targetField.split(',')[0];
                }
                /** @type {?} */
                const val = this.ins.utils.getValue(targetField, jsonData);
                if (val) {
                    this.ins.displayValue = val;
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    _clearSelections() {
        const { cmpRefInstance: t } = this.getDataCmpInstance();
        if (t) {
            if (this.ins.isTree()) {
                // 树表
                t.clearAll(false);
                if (!t.cdRef.destroyed) {
                    t.cdRef.detectChanges();
                }
            }
            else {
                // 列表
                t.dtBody.selectedRowIndex = -1;
                t.dtBody.selections = undefined;
                if (!t.cd.destroyed) {
                    t.cd.detectChanges();
                }
            }
        }
    }
    /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     * @param {?=} selectedIds
     * @return {?}
     */
    selectCurrentValue(selectedIds = []) {
        if (!this.ins.enableToSelect) {
            return;
        }
        const { cmpRefInstance: t, items } = this.getDataCmpInstance();
        if (!t || !items || !items.length) {
            return;
        }
        this._clearSelections();
        if (!selectedIds || !selectedIds.length) {
            /** @type {?} */
            const selectedRows = this.ins.lookupSelectionSer.getSelections();
            if (selectedRows.length) {
                selectedIds = selectedRows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.ins.idField]));
            }
        }
        // const _ids = this.getSelectedIds();
        // selectedIds = selectedIds.concat(_ids);
        // selectedIds = Array.from(new Set(selectedIds));
        if (selectedIds && selectedIds.length) {
            if (this.ins.isTree()) {
                // 树表
                this.selected4Treetable(t, selectedIds);
                if (!t.cdRef.destroyed) {
                    t.cdRef.detectChanges();
                }
            }
            else {
                // 列表
                this.selected4Datatable(t, items, selectedIds);
                if (!t.cd.destroyed) {
                    t.cd.detectChanges();
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getDataCmpInstance() {
        /** @type {?} */
        let ref = null;
        /** @type {?} */
        let items = null;
        if (this.ins.activeTab === 'datalist') {
            if (this.ins.isTree()) {
                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');
                items = ((/** @type {?} */ (ref))).serializedValue;
            }
            else {
                items = this.ins.items;
                ref = this.ins.lookupCmpMgr.getComponentInstance();
            }
        }
        else if (this.ins.activeTab === 'favorite') {
            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');
            items = this.ins.favoriteItems;
        }
        return { cmpRefInstance: ref, items };
    }
    /**
     * @private
     * @param {?} t
     * @param {?} items
     * @param {?} values
     * @return {?}
     */
    selected4Datatable(t, items, values) {
        if (this.ins.singleSelect) {
            items.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            (item, index) => {
                if (item[this.ins.idField] === values[0]) {
                    if (!t.dtBody.isSelected(item)) {
                        t.dtBody.selectedRowIndex = -1;
                        t.dtBody.selectedRow('', index, item);
                    }
                }
            }));
        }
        else {
            // const values = this.getSelectedIds();
            values.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                /** @type {?} */
                const r = items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.ins.idField] == id));
                if (r) {
                    t.checkRow(id);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} t
     * @param {?} valueArr
     * @return {?}
     */
    selected4Treetable(t, valueArr) {
        if (this.ins.singleSelect) {
            t.selectNode(valueArr[0], false, false);
        }
        else {
            // const valueArr = this.getSelectedIds();
            t.checkedNodes(valueArr, false, false);
            t.selectNodes(valueArr);
        }
    }
    /**
     * @return {?}
     */
    getSelectedIds() {
        /** @type {?} */
        let values = [];
        /** @type {?} */
        const s = this.ins.multipleChoiceSeparator;
        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {
            values = this.ins.displayValue.split(s);
        }
        else {
            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {
                values = [this.ins.displayValue];
            }
        }
        // 启用显示多选列表
        if (this.ins.showSelected) {
            /** @type {?} */
            const rows = this.ins.lookupSelectionSer.getSelections();
            if (rows && rows.length) {
                values = rows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.ins.idField]));
            }
            else {
                values = [];
            }
        }
        return values;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectionManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,