/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
* @Author: 疯狂秀才(lucas huang)
* @Date: 2018-11-23 11:23:12
* @LastEditors: 疯狂秀才(Lucas Huang)
* @LastEditTime: 2020-10-20 20:18:26
* @Company: Inspur
* @Version: v0.3.x
*/
import { Component, Input, ViewChild, EventEmitter, Injector, ComponentFactoryResolver, Output, ChangeDetectorRef, ViewEncapsulation, ViewContainerRef, forwardRef, ElementRef, NgZone, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { of, Subject } from 'rxjs';
import { LocaleService } from '@farris/ui-locale';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { DataTableComponent } from '@farris/ui-datatable';
import { TreeTableComponent } from '@farris/ui-treetable';
import { LayoutPanelComponent } from '@farris/ui-layout';
import { CommonUtils, FarrisComponentInstanceService } from '@farris/ui-common';
import { ShortcutsService } from '@farris/ui-shortcuts';
import { InputGroupComponent } from '@farris/ui-input-group';
import { NotifyService } from '@farris/ui-notify';
import { FAVORITE_FIELD_NAME, INPUT_GROUP_ICON, LookupGridDisplayType } from './lookup-displaytype';
import { LookupComponent } from './lookup.component';
import { lookupGridDefaults, displayInfoDefault } from './lookup-grid-options';
import { ServerSideToken } from './http/ILookupHttpService';
import { LookupDefaultMapping } from './lookup-defaut-mapping';
import { LookupUtils } from './utils';
import { PersonalConfigService } from './lookup-presonalConfig.service';
import { UtilService, TreeNodeHelper, FavoriteHelper, SelectionManager, DataTableEventManager, TreeTableEventManager, MultiSelectionManager, LookupHttpManager, LookupComponentManager, LookupDialogManager, onTextChanged, LookupSelectionService } from './services';
import { map } from 'rxjs/operators';
import { EventManager } from '@angular/platform-browser';
/** @type {?} */
export const LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => LookupGridComponent)),
    multi: true
};
export class LookupGridComponent extends LookupComponent {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} el
     * @param {?} utils
     * @param {?} defaultMapping
     * @param {?} changeDetector
     * @param {?} shortcuts
     * @param {?} lookupUtils
     * @param {?} zone
     * @param {?} render2
     */
    constructor(injector, cfr, el, utils, defaultMapping, changeDetector, shortcuts, lookupUtils, zone, render2) {
        super(injector, el, changeDetector);
        this.injector = injector;
        this.cfr = cfr;
        this.el = el;
        this.utils = utils;
        this.defaultMapping = defaultMapping;
        this.changeDetector = changeDetector;
        this.shortcuts = shortcuts;
        this.lookupUtils = lookupUtils;
        this.zone = zone;
        this.render2 = render2;
        this.groupIcon = INPUT_GROUP_ICON;
        this._displayType = '';
        /**
         * 使用表单设计器中的显示类型。否则使用元数据设置的显示类型。 默认：false
         */
        this.customDisplayType = false;
        this.viewType = 'text';
        /**
         * 启用清空按钮
         */
        this.enableClear = true;
        /**
         * 服务器端排序
         */
        this.remoteSort = true;
        /**
         * 树表显示全选复选框。 默认不显示
         */
        this.showCheckAll = false;
        /**
         * 是否启用多选
         */
        this.singleSelect = true;
        /**
         * 多选分隔符
         */
        this.multipleChoiceSeparator = ',';
        /**
         * BE REST RUI
         * - 此处设置后 uri 失效
         */
        this.beUri = '';
        /**
         * 显示过滤工具条
         */
        this.showFilterBar = true;
        /**
         * 是否启用分页
         */
        this.pagination = true;
        /**
         * 当前页索引，从 0开始
         */
        this.pageIndex = 1;
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 可用分页记录数列表
         */
        this.pageList = [10, 20, 30, 50, 100];
        /**
         * 总记录数
         */
        this.total = 0;
        /** 可拖动列 */
        // @Input() resizableColumns = true;
        /**
         * 显示列信息
         */
        this.columns = [];
        /**
         * 帮助查询是否为远端查询
         */
        this.remoteSearch = true;
        /**
         * 文本变化后，进行服务器端查询
         */
        this.searchOnServer = true;
        /**
         * 不进行服务器查询，有啥算啥
         */
        this.nosearch = false;
        // 收藏列表
        this.favoriteItems = [];
        /**
         * 是否启用级联选择控制选项
         */
        this.enableCascade = false;
        /**
         * 级联控制默认值： enable, up, down, disable
         */
        this.cascadeStatus = 'enable';
        this.placeholder = '';
        /**
         * 显示已选记录列表。 默认为 false 不显示
         */
        this.showSelected = false;
        /**
         * 应用收藏夹
         */
        this.useFavorite = false;
        /**
         * 收藏数据来自于： locale: 本地存储， remote: 服务器端存储
         */
        this.favoriteDataFrom = 'remote';
        /**
         * 使用提示,快捷选择
         */
        this.useTip = false;
        /**
         * 记录窗口大小
         */
        this.isRecordSize = false;
        // 是否启用选中value值对应的行数据
        this.enableToSelect = true;
        this.enableFindText = false;
        /**
         * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
         */
        this.expandLevel = -1;
        /**
         * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
         */
        this.loadTreeDataType = 'default';
        /**
         * 窗口打开后立即加载数据，默认为 true
         */
        this.loadDataWhenOpen = true;
        /**
         * 导航列表，树列表在帮助打开后选中的数据;
         * 设置后，`selectFirstInNav` 失效！
         */
        this.navSelectedIds = '';
        /**
         * 导航帮助，选中第1条数据，默认为 false;
         * 注意：当`navSelectedIds`不为空时，此属性失效。
         */
        this.selectFirstInNav = false;
        /**
         * 启用构造完整树过滤
         */
        this.enableFullTree = true;
        /**
         * 显示文本自定义函数
         */
        this.displayFormatter = undefined;
        /**
         * 显示文本字段集合，以 英文 逗号隔开
         */
        this.displayFields = '';
        this.displayTextSeparator = '_';
        /**
         * 帮助元数据ID，不为空时调用指定的URI
         * /api/runtime/bcc/v1.0/help/data/{helpId}
         */
        this.helpId = '';
        /**
         * 文本对齐方式； left | center | right; 默认 left
         */
        this.textAlign = 'left';
        /**
         * 鼠标滑过输入框时显示输入框内的文本信息
         */
        this.enableTitle = true;
        this.useExtendInfo = false;
        this.extInfoFields = '';
        this.extendInfo = '';
        /**
         * IDE 设计器自定义格式化 2103
         */
        this.customFormatter = null;
        this.customNavFormatter = null;
        /**
         * 自定义确定事件
         */
        this.okHandler = null;
        /**
         * 自定义取消事件
         */
        this.cancelHandler = null;
        this.tagboxHeight = 'auto';
        /**
         * 启用获取所有子级数据的功能
         */
        this.enableGetAllChildNodes = true;
        this.shortcutKey = {
            /**
             * 打开帮助窗口
             */
            open: 'ArrowRight',
            /**
             * 确认选择数据
             */
            confirm: 'Enter',
            /**
             * 搜索框焦点
             */
            searchFocus: 'F3',
            /**
             * 选中上一条
             */
            moveUp: 'ArrowUp',
            /**
             * 选中下一条
             */
            moveDown: 'ArrowDown',
            /**
             * 展开节点
             */
            expand: 'ArrowRight',
            /**
             * 折叠节点
             */
            collapse: 'ArrowLeft',
            /**
             * 下一页
             */
            nextPager: 'PageDown',
            /**
             * 上一页
             */
            prevPager: 'PageUp'
        };
        this.selectedData = new EventEmitter();
        this.clear = new EventEmitter();
        this.search = new EventEmitter();
        // 帮助文本框中值变化事件
        this.valueChanged = new EventEmitter();
        this.loadSuccess = new EventEmitter();
        this.pagerChanged = new EventEmitter();
        this.expandTreeNode = new EventEmitter();
        this.textChanged = new EventEmitter();
        this.checkedChange = new EventEmitter();
        this.tagRemoved = new EventEmitter();
        /**
         * 内容中留白边距
         */
        this.containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };
        this.containerStyle = {
            marginLeft: this.containerMargin.left + 'px',
            marginRight: this.containerMargin.right + 'px',
            marginTop: this.containerMargin.top + 'px',
            marginBottom: this.containerMargin.bottom + 'px'
        };
        this._gridOptions = lookupGridDefaults;
        // 导航帮助左则宽度
        this.leftPanelWidth = 320;
        // 导航帮助窗口最小宽度
        this.navLookupDialogMinWidth = 960;
        this.navigationFilter = null;
        this.subscriptions = [];
        this.isTextChange = false;
        this.isTabChanged = false;
        this.displayInfo = Object.assign({}, displayInfoDefault);
        this.tabChangeSubscription = null;
        // 暂存行点击数据  用于收藏
        this.personalConf = {};
        this.favoriteColumns = [];
        /**
         * 临时查询参数
         */
        this._searchState = null;
        this.allData = [];
        this.allColumnsTitle = '所有列';
        this.mustWriteSomething = '请输入关键字后查询。';
        this.mustChoosAdatarow = '请选择一条记录！';
        this.addFavoriteSuccess = '收藏成功。';
        this.delFavoriteSuccess = '移除收藏成功。';
        this.searching = false;
        /**
         * 临时存储查询结果集
         */
        this._searchResult = null;
        this.lookupinitializationSubject = new Subject();
        /**
         * 多选时，选中的数据
         */
        this.currentSelectedItems = of([]);
        /**
         * 已选数据列信息
         */
        this.selectedColumns = [];
        this.activeTab = 'datalist';
        this.favHelper = null;
        this.ttEventMgr = null;
        this.multiSelMgr = null;
        this.httpMgr = null;
        this.lookupCmpMgr = null;
        this.dialogMgr = null;
        this.selectionMgr = null;
        this.dtEventMgr = null;
        this.lookupSelectionSer = null;
        this.controlId = '';
        this.savingFaoriteData = false;
        this.isReady = false;
        this.showTagboxClearButton = false;
        this.hasError = false;
        this.isGetAllChidlNodes = false;
        /**
         * 选中记录ID，自定义帮助取数时使用
         */
        this.selectedIds = [];
        this.farrisInstances = null;
        this.createInstance();
        this.currentSelectedItems = this.lookupSelectionSer.selected$;
        this.eventManager = this.injector.get(EventManager);
        this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);
    }
    /**
     * @return {?}
     */
    get displayType() {
        return this._displayType;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set displayType(val) {
        if (val) {
            /** @type {?} */
            const types = Object.values(LookupGridDisplayType);
            /** @type {?} */
            const i = types.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n === val.toUpperCase()));
            if (i > -1) {
                /** @type {?} */
                const keys = Object.keys(LookupGridDisplayType);
                this._displayType = LookupGridDisplayType[keys[i]];
            }
        }
        else {
            this._displayType = val;
        }
    }
    /**
     * @return {?}
     */
    get gridOptions() {
        if (this.useFavorite && this.columns && this.columns.length > 0 && !this.columns.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.field === FAVORITE_FIELD_NAME))) {
            this.columns.push({
                field: FAVORITE_FIELD_NAME, title: '', width: 40, align: 'center',
                formatter: this.favHelper.favoriteColumnFormatter
            });
        }
        this._gridOptions = Object.assign(this._gridOptions, {
            singleSelect: this.singleSelect,
            idField: this.idField,
            uri: this.uri,
            showFilterBar: this.showFilterBar,
            pagination: this.pagination,
            pageIndex: this.pageIndex,
            pageSize: this.pageSize,
            pageList: this.pageList,
            total: this.total,
            items: this.items,
            columns: this.columns,
            resizableColumns: true,
            fixedHeader: true,
            hover: true,
            treeInfo: this.treeInfo
        });
        return this._gridOptions;
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    set gridOptions(opts) {
        this._gridOptions = Object.assign({}, this._gridOptions, opts);
        this.selectedColumns = this.multiSelMgr.initSelectedColumns();
    }
    /**
     * @return {?}
     */
    get selections() {
        /** @type {?} */
        const selectItems = this.lookupSelectionSer.getSelections();
        if (this.singleSelect) {
            return selectItems[0];
        }
        else {
            return selectItems;
        }
    }
    /**
     * @return {?}
     */
    get usePersionalConf() {
        return this.useFavorite || this.useTip || this.isRecordSize;
    }
    /**
     * @return {?}
     */
    get displayTextList() {
        if (this.displayText) {
            return this.displayText.split(this.multipleChoiceSeparator);
        }
        return [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.checkGridOptions();
        this.displayInfo.title = this.title;
        /** 传递上下文 */
        if (this.http) {
            this.http.context = this.context;
        }
        this.allColumnsTitle = this.localService.getValue('lookup.allColumns');
        this.mustWriteSomething = this.localService.getValue('lookup.mustWriteSomething');
        this.mustChoosAdatarow = this.localService.getValue('lookup.mustChoosAdatarow');
        this.addFavoriteSuccess = this.localService.getValue('lookup.favoriteInfo.addFav') || this.addFavoriteSuccess;
        this.delFavoriteSuccess = this.localService.getValue('lookup.favoriteInfo.cancelFav') || this.delFavoriteSuccess;
        this.dialogMgr.onDialogCreated();
        // 初始化个性化配置
        if (this.usePersionalConf) {
            this.favHelper.initPersonalInfo();
        }
        if (this.useExtendInfo) {
            /** @type {?} */
            const jsonData = this.selectionMgr.getBindingData();
            this.updateExtendInfo(jsonData, false);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subscriptions.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (n) {
                n.unsubscribe();
                n = null;
            }
        }));
        if (this.selectionMgr) {
            this.selectionMgr.destroy();
        }
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        onTextChanged.bind(this)();
        if (this.viewType === 'text') {
            // this.shortcuts.add({
            //     key: 'F2',
            //     target: this.inputGroup.textbox.nativeElement,
            //     command: () => {
            //         this.showDialog();
            //     }
            // });
            this.render2.listen(this.inputGroup.textbox.nativeElement, 'keydown.F2', this.showDialog.bind(this));
        }
        else {
            this.registerMouseEventForTagView();
            if (this.tagboxHeight) {
                /** @type {?} */
                const el = this.tagbox.nativeElement.querySelector('.multi-more');
                /** @type {?} */
                let tbh = this.tagboxHeight;
                if (tbh !== 'auto') {
                    tbh += 'px';
                    if (this.maxTagboxHeight) {
                        this.render2.setStyle(el, 'maxHeight', `${this.maxTagboxHeight}px`);
                    }
                }
                this.render2.setStyle(el, 'height', tbh);
            }
        }
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
    }
    /**
     * @private
     * @return {?}
     */
    createInstance() {
        this.http = this.injector.get(ServerSideToken, null);
        this.messagerService = this.injector.get(MessagerService);
        this.loadingService = this.injector.get(LoadingService);
        this.notifyService = this.injector.get(NotifyService, null);
        this.personalConfigService = this.injector.get(PersonalConfigService, null);
        this.lookupSelectionSer = new LookupSelectionService(this);
        this.utilService = new UtilService(this);
        this.localService = this.injector.get(LocaleService);
        this.treeNodeHelper = new TreeNodeHelper(this);
        this.favHelper = new FavoriteHelper(this);
        this.ttEventMgr = new TreeTableEventManager(this);
        this.multiSelMgr = new MultiSelectionManager(this);
        this.httpMgr = new LookupHttpManager(this);
        this.lookupCmpMgr = new LookupComponentManager(this);
        this.dialogMgr = new LookupDialogManager(this);
        this.selectionMgr = new SelectionManager(this);
        this.dtEventMgr = new DataTableEventManager(this);
    }
    /**
     * @return {?}
     */
    showDialog() {
        if (this.disabled || this.readonly) {
            return false;
        }
        this.selectionMgr.initDisplayValue();
        this.dictPickingSubscription = this.dictPicking({
            instance: this
        }).subscribe((/**
         * @param {?} pr
         * @return {?}
         */
        (pr) => {
            this.dialogMgr.canOpenDialog(pr);
        }));
        return false;
    }
    /**
     * 判断是否为双列表帮助
     * @return {?}
     */
    isDoublleList() {
        return (this.displayType === LookupGridDisplayType.NavList || this.displayType === LookupGridDisplayType.NavTreeList);
    }
    /**
     * 判断是否显示为树帮助
     * @return {?}
     */
    isTree() {
        return this.displayType.toUpperCase() === LookupGridDisplayType.TreeList;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onResized(e) {
        this.resizeCmp(e.size);
        this.resized.emit(e.size);
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    onResizing(pos) {
        this.resizing.emit(pos.size);
        this.resizeCmp(pos.size);
        if (this.isDoublleList() && this.leftComponentRef) {
            this.leftComponentRef.instance.resize({
                width: this.leftPanel.width,
                height: this.dialogMgr.getHeight()
            });
        }
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    onMaxDialog(pos) {
        this.resizeCmp(pos.size);
        if (this.leftPanel) {
            this.leftComponentRef.instance.resize({
                width: this.leftPanel.width,
                height: this.dialogMgr.getHeight()
            });
        }
        this.dialogMaxed.emit(pos.size);
    }
    /**
     * @param {?=} size
     * @return {?}
     */
    resizeCmp(size) {
        if (!this.componentRef || !this.componentRef.instance) {
            return;
        }
        if (!size) {
            size = this.dialog.size;
        }
        /** @type {?} */
        const _size = {
            width: size.width - this.containerMargin.left - this.containerMargin.right,
            height: this.dialogMgr.getHeight()
        };
        if (this.useFavorite && this.favoritesComponentRef) {
            this.favoritesComponentRef.instance.resize(_size);
        }
        if (this.isRecordSize) {
            this.personalConf.size = this.dialog.size;
            this.personalConfigService.updatePersonalConfig({ size: this.dialog.size });
        }
        if (this.isDoublleList()) {
            _size.width = size.width - this.leftPanel.width - 27;
        }
        this.componentRef.instance.resize(_size);
    }
    /**
     * @private
     * @return {?}
     */
    checkGridOptions() {
        if (!this.gridOptions.idField) {
            console.warn('未设置主键字段 idField');
        }
        if (!this.beforeSelectData) {
            this.beforeSelectData = (/**
             * @return {?}
             */
            () => {
                return of(true);
            });
        }
    }
    /**
     * @return {?}
     */
    getComponentType() {
        if (!this.displayType) {
            this.displayType = 'LIST';
        }
        switch (this.displayType) {
            case LookupGridDisplayType.List:
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
                return DataTableComponent;
            case LookupGridDisplayType.TreeList:
                return TreeTableComponent;
        }
    }
    /**
     * @param {?=} msg
     * @return {?}
     */
    showLoading(msg = '') {
        if (this.dialog && this.dialog.modalContent && !this.loading) {
            /** @type {?} */
            const opts = {
                container: this.dialog.modalContent,
                delay: 200,
            };
            if (msg) {
                opts['message'] = msg;
            }
            this.loading = this.loadingService.show(opts);
        }
        else {
            this.loading = this.loadingService.show();
        }
    }
    /**
     * @return {?}
     */
    closeLoading() {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
        this.loadingService.clearAll();
    }
    /**
     * @param {?} resdata
     * @return {?}
     */
    getSearchColumns(resdata) {
        /** @type {?} */
        const cols = resdata.columns || this.columns;
        if (resdata.searchFields) {
            return resdata.searchFields.map((/**
             * @param {?} sf
             * @return {?}
             */
            sf => {
                /** @type {?} */
                const c = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.field.toLowerCase() === sf.value.toLowerCase()));
                if (c) {
                    sf.label = c.title;
                }
                return sf;
            }));
        }
        else if (cols) {
            return cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.searchField)).map((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                return {
                    label: col.title,
                    value: col.field
                };
            }));
        }
        return [];
    }
    /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    initOptions(resData) {
        /** @type {?} */
        let obser = of(true);
        this.gridOptions.searchFields = this.getSearchColumns(resData);
        if (resData) {
            if (resData.columns && resData.columns.length) {
                this.columns = resData.columns;
            }
            this.setLookupTitleText(resData);
            if (this.isDoublleList() && this.dialogWidth < this.navLookupDialogMinWidth && !this.isRecordSize) {
                this.dialogWidth = this.navLookupDialogMinWidth;
                this.dialog.reSize({ width: this.dialogWidth });
            }
            if (!this.customDisplayType) {
                this.displayType = resData.displayType || this.displayType || 'LIST';
                this.changeDetector.detectChanges();
                this.lookupCmpMgr.createComponentWithServerData(resData);
            }
            if (this.isDoublleList() && resData.navigation && !this.leftComponentRef) {
                this.navigationOptions = resData.navigation;
                this.navigationOptions.hover = true;
                this.navigationOptions.searchFields = this.getSearchColumns(this.navigationOptions);
                // update columns formatter
                if (this.customNavFormatter) {
                    this.navigationOptions.columns.forEach((/**
                     * @param {?} col
                     * @return {?}
                     */
                    col => {
                        if (this.customNavFormatter[col.field]) {
                            col.formatter = this.customNavFormatter[col.field];
                        }
                    }));
                    this.navigationOptions['rowStyler'] = this.customNavFormatter.rowStyler;
                    this.navigationOptions['cellStyler'] = this.customNavFormatter.cellStyler;
                }
                // 20210926 树导航帮助中 左侧树支持分层加载
                if (this.displayType === LookupGridDisplayType.NavTreeList) {
                    /** @type {?} */
                    let _nav_treeinfo_loadtype = this.navigationOptions.treeInfo.loadDataType;
                    if (this.loadTreeDataType !== 'default') {
                        _nav_treeinfo_loadtype = this.loadTreeDataType === 'loadall' ? 'all' : 'async';
                    }
                    this.navigationOptions.treeInfo.loadDataType = _nav_treeinfo_loadtype;
                }
                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);
            }
        }
        else {
            this.lookupCmpMgr.createContent(this.gridOptions);
            this.lookupCmpMgr.createFavoriteComponent();
        }
        if (this.isTextChange) {
            this.componentRef.instance.searchData.value = this.displayText;
        }
        // update columns formatter
        if (this.customFormatter) {
            this.columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                if (this.customFormatter[col.field]) {
                    col.formatter = this.customFormatter[col.field];
                }
            }));
            if (this.customFormatter.rowStyler) {
                this.componentRef.instance.rowStyler = this.customFormatter.rowStyler;
            }
            if (this.customFormatter.cellStyler) {
                this.componentRef.instance.cellStyler = this.customFormatter.cellStyler;
            }
        }
        this.changeDetector.detectChanges();
        return obser;
    }
    /**
     * 设置帮助窗口标题
     * @private
     * @param {?} resData
     * @return {?}
     */
    setLookupTitleText(resData) {
        if (resData.displayInfo) {
            this.displayInfo = resData.displayInfo;
        }
        // 如果自定义标题，将以此标题为准。否则加载服务器端返回的数据
        if (this.title && this.title !== '此处显示帮助标题') {
            this.displayInfo.title = this.title;
        }
        if (this.displayInfo && resData.title) {
            if (!this.displayInfo.title) {
                this.displayInfo.title = resData.title;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    showGetAllChildrenCheckbox() {
        if (this.isTree() && this.treeInfo) {
            this.enableGetAllChildNodes = this.treeInfo.loadDataType !== 'all' && this.treeInfo.layerType === 'pathcode';
        }
        else {
            this.enableGetAllChildNodes = false;
        }
    }
    /**
     * @return {?}
     */
    initData() {
        /** @type {?} */
        const observer = {
            next: (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                // 服务器端发生错误，返回NULL 时，直接关闭窗口
                if (data === null) {
                    this.isShow = false;
                    if (this.dialog) {
                        this.dialog.close();
                    }
                    return;
                }
                this.initOptions(data).subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.selectedColumns = this.multiSelMgr.initSelectedColumns();
                    this.favoriteColumns = this.favHelper.getFavoriteColumns();
                    if (this.usePersionalConf) {
                        if (!this.personalConfigService.getPersonalData()) {
                            this.personalConfigService.savePersonalConfig(this.personalConf);
                        }
                    }
                    if (!this.isTabChanged) {
                        this.lookupSelectionSer.loadSelections(data.selectedItems || []);
                    }
                    if (this.isDoublleList()) {
                        // 导航帮助时，设置左侧选中数据时，不加载主数据列表。
                        if (this.navSelectedIds || this.selectFirstInNav) {
                            this.loadDataWhenOpen = false;
                        }
                    }
                    this.loadData(data);
                    if (this.isTree()) {
                        if (this.activeTab === 'datalist') {
                            /** @type {?} */
                            const tt = (/** @type {?} */ (this.componentRef.instance));
                            if (tt.loadDataType === 'all' && tt.searchData.value) {
                                if (this.items && this.items.length) {
                                    tt.toggleExpand(this.items[0], true);
                                }
                            }
                        }
                        this.showGetAllChildrenCheckbox();
                    }
                    this.isTextChange = false;
                    this._searchResult = null; // 清空临时查询 结果
                    this.closeLoading();
                    // this.isReady$.next(true);
                    this.isReady = true;
                    this.changeDetector.detectChanges();
                    this.lookupinitializationSubject.next();
                }));
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                // this.isReady$.next(true);
                this.closeLoading();
                this._searchResult = null; // 清空临时查询 结果
                this.isTextChange = false;
                this.hasError = true;
                this.changeDetector.detectChanges();
                if (typeof err === 'string') {
                    this.messagerService.error(err);
                }
                else {
                    if (err) {
                        if (err.Message) {
                            this.messagerService.error(err.Message);
                        }
                        else {
                            if (err.error) {
                                this.messagerService.error(err.error.Message);
                            }
                            else {
                                this.messagerService.error('应用服务器错误,请联系系统管理员！');
                            }
                        }
                    }
                    console.log(err);
                }
            })
        };
        /** @type {?} */
        let p = {
            pageInfo: {
                pageSize: this.pageSize || 20,
                pageIndex: 1
            }
        };
        /** @type {?} */
        const t = 'all';
        if (this.isTextChange) {
            p = {
                search: {
                    field: '*',
                    value: this.displayText
                }
            };
        }
        if (!this.isTabChanged && this.enableToSelect) {
            /** @type {?} */
            const vals = this.selectionMgr.getSelectedIds();
            if (vals && vals.length) {
                p['selectedInfo'] = {
                    selected: true,
                    selectedIds: vals
                };
            }
            else {
                if (this['selectedIds']) {
                    p['selectedInfo'] = {
                        selected: true,
                        selectedIds: this['selectedIds']
                    };
                }
            }
        }
        this.showLoading();
        this.hasError = false;
        this.httpMgr.lookupRequest(p, t).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        (restData) => {
            if (restData) {
                restData.selectedItems = restData['selectedData'] || [];
            }
            else {
                if (restData && typeof restData === 'object') {
                    restData.selectedItems = [];
                }
            }
            return restData;
        }))).subscribe(observer);
    }
    /**
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    loadData(resData, rebindEvent = true) {
        if (this.activeTab === 'datalist') {
            if (this.useFavorite && !this.isTree()) {
                this.favHelper.updateFavoritesStatus(resData.items);
            }
            switch (this.displayType) {
                case LookupGridDisplayType.NavList:
                case LookupGridDisplayType.NavTreeList:
                case LookupGridDisplayType.List:
                    this.loadDataTableData(resData);
                    if (rebindEvent) {
                        this.dtEventMgr.bindDataTableEvent();
                    }
                    break;
                case LookupGridDisplayType.TreeList:
                    this.loadTreeTableData(resData, rebindEvent);
                    break;
            }
        }
        else if (this.activeTab === 'favorite') {
            this.loadFavData(resData);
        }
        // 选中数据
        this.selectionMgr.selectCurrentValue();
    }
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    loadFavData(result) {
        // 加载收藏数据
        if (this.useFavorite) {
            if (this.isTree) {
                this.setTreeInfo(result);
            }
            if (this.isTree()) {
                /** @type {?} */
                const treeNodes = this.favHelper.initFavoriteTreeData(result.items);
                /** @type {?} */
                const treeData = this.treeNodeHelper.flatTreeNodes(treeNodes).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n.data['_addtional_'] = n['addtional'];
                    return n.data;
                }));
                this.lookupSelectionSer.initFavoriteItems(treeData);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.favoritesComponentRef.instance.scrollToY(1);
                }));
            }
            else {
                this.lookupSelectionSer.initFavoriteItems(result.items);
            }
            this.favHelper.loadFavoritesData(result);
        }
    }
    /**
     * @param {?=} resData
     * @return {?}
     */
    loadDataTableData(resData) {
        if (resData) {
            if (this.gridOptions) {
                this.items = resData.items;
                this.total = resData.total || resData.items.length;
                if (resData.pageInfo) {
                    if (resData.pageInfo.pageList && (!this.pageList || !this.pageList.length)) {
                        this.pageList = resData.pageInfo.pageList;
                    }
                    this.pagination = resData.pageInfo.enablePager;
                    this.pageIndex = resData.pageInfo.pageIndex;
                    this.pageSize = resData.pageInfo.pageSize;
                }
                else {
                    this.pagination = false;
                }
            }
            else {
                this.gridOptions = (/** @type {?} */ (resData));
            }
        }
        this.updateDataTable(this.gridOptions);
    }
    /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    updateDataTable(opts) {
        if (opts) {
            /** @type {?} */
            const dt = (/** @type {?} */ (this.componentRef.instance));
            if (!dt.columns || dt.columns.length === 0) {
                dt.columns = this.gridOptions.columns;
            }
            dt.allColumnsTitle = this.allColumnsTitle;
            dt.searchFields = opts.searchFields;
            dt.pagination = opts.pagination;
            dt.pageList = this.pageList;
            dt.remoteSort = this.remoteSort;
            if (this.loadDataWhenOpen) {
                dt.loadData({
                    pageSize: opts.pageSize,
                    pageIndex: this.gridOptions.pageIndex,
                    total: this.gridOptions.total,
                    data: this.gridOptions.items
                });
                dt.cd.markForCheck();
            }
            this.loadSuccess.emit();
        }
    }
    /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    setTreeInfo(resData) {
        if (!resData) {
            return;
        }
        /** @type {?} */
        let _treeInfo = null;
        if (resData.treeInfo) {
            /** @type {?} */
            const onlySelectLeaf = resData.treeInfo.onlySelectLeaf;
            /** @type {?} */
            let _osl = 'no';
            if (onlySelectLeaf !== undefined) {
                _osl = onlySelectLeaf ? 'yes' : 'no';
            }
            _treeInfo = Object.assign({}, resData.treeInfo, { onlySelectLeaf: _osl });
        }
        if (this.gridOptions.treeInfo) {
            /** @type {?} */
            const treeInfo = this.gridOptions.treeInfo;
            if (treeInfo) {
                if (treeInfo.onlySelectLeaf === undefined || treeInfo.onlySelectLeaf === null) {
                    treeInfo.onlySelectLeaf = 'no';
                }
                if (typeof treeInfo.onlySelectLeaf === 'boolean') {
                    treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? 'yes' : 'no';
                }
                // 20210902
                if (this.loadTreeDataType === 'default') {
                    treeInfo.loadDataType = _treeInfo.loadDataType;
                }
                else {
                    treeInfo.loadDataType = this.loadTreeDataType === 'loadall' ? 'all' : 'async';
                }
                if (treeInfo.onlySelectLeaf !== 'default') {
                    _treeInfo = Object.assign(_treeInfo, treeInfo);
                }
            }
        }
        this.treeInfo = _treeInfo;
    }
    /**
     * @private
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    loadTreeTableData(resData, rebindEvent = true) {
        /** @type {?} */
        const items = resData ? resData.items : this.gridOptions.items;
        this.items = items;
        if (resData) {
            this.setTreeInfo(resData);
            /** @type {?} */
            const treeInfo = this.gridOptions.treeInfo;
            if (!treeInfo['treeDataIsInit']) {
                if (treeInfo.layerType.toLowerCase() === 'pathcode') {
                    this.items = this.lookupUtils.makeTree(this.items, treeInfo);
                }
                else {
                    this.items = this.lookupUtils.makeTreeWithParentID(this.items, '', `${treeInfo.dataField}.${treeInfo.parentField}`, this.idField);
                }
            }
        }
        if (this.componentRef.instance instanceof TreeTableComponent) {
            /** @type {?} */
            const tt = (/** @type {?} */ (this.componentRef.instance));
            if (this.treeInfo) {
                tt.loadDataType = this.treeInfo.loadDataType;
            }
            /** @type {?} */
            const isLoadAllTreeData = (/**
             * @return {?}
             */
            () => {
                if (this.loadTreeDataType === 'default') {
                    return tt.loadDataType === 'all';
                }
                else {
                    return this.loadTreeDataType === 'loadall';
                }
            });
            if (rebindEvent) {
                this.ttEventMgr.bindTreetableEvent();
            }
            /** @type {?} */
            const isLoadAll = isLoadAllTreeData();
            /** 完整树节点检查 By Lucas 20200302 */
            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);
            tt.keepSelect = true;
            if (this.useFavorite) {
                this.favHelper.updateFavoritesStatus(this.items);
            }
            if (this.loadDataWhenOpen) {
                tt.loadData(this.items);
            }
            tt.resize();
        }
    }
    /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     * @param {?} nodes
     * @param {?=} isAllTreeData
     * @return {?}
     */
    checkNodeCanBeSelect(nodes, isAllTreeData = false) {
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                if (node.hasOwnProperty('addtional')) {
                    node.selectable = !node['addtional'];
                }
                if (node.children && node.children.length) {
                    this.checkNodeCanBeSelect(node.children, isAllTreeData);
                }
                else {
                    if (isAllTreeData) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    onChanges(val) {
        if (!val) {
            this.onClear();
        }
        else {
            this.displayText = val;
            this.isTextChange = true;
            if (this.nosearch) {
                this.setModelValue(val);
            }
            this.onModelTouched(val);
            this.valueChanged.emit(val);
            this.textChanged.emit(val);
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    onClear(emit = true) {
        this.isTextChange = false;
        this.displayText = '';
        this.displayValue = '';
        this.originalText = '';
        this.extendInfo = '';
        this.setModelValue('');
        if (this.mappingFn) {
            this.mappingFn(null, this.mapFields);
        }
        else {
            if (this.mapFields) {
                /** @type {?} */
                const bindingData = this.selectionMgr.getBindingData();
                if (bindingData) {
                    this.defaultMapping.lookupFieldMap(null, this.mapFields, bindingData);
                }
            }
        }
        this.multiSelMgr.clear();
        if (emit) {
            this.clear.emit();
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    clearValue(emit = true) {
        this.onClear(emit);
    }
    /**
     * @param {?=} rowData
     * @return {?}
     */
    selectItem(rowData) {
        /** @type {?} */
        let selectedRow = null;
        if (rowData) {
            selectedRow = rowData;
        }
        else {
            selectedRow = this.selections;
            if (!selectedRow) {
                selectedRow = null;
            }
            else {
                if (Array.isArray(selectedRow) && !selectedRow.length) {
                    selectedRow = null;
                }
            }
        }
        // 如果定义自定义处理确定事件，则由自定义事件处理后面的逻辑
        if (this.okHandler) {
            this.okHandler({ data: selectedRow, instance: this });
        }
        else {
            if (this.beforeSelectData) {
                /** @type {?} */
                const bsdResult = this.beforeSelectData({ instance: this, data: selectedRow });
                if (bsdResult && bsdResult.subscribe) {
                    bsdResult.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        this._beforeSelectDataCallBack(e, selectedRow);
                    }));
                }
                else {
                    console.error('帮助数据选中前事件未返回值或返回类型非Observable, 请检查');
                }
            }
            else {
                this._beforeSelectDataCallBack(true, selectedRow);
            }
        }
    }
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    getParentPathCode(rows) {
        /** @type {?} */
        const maxBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : (/**
         * @param {?} val
         * @return {?}
         */
        val => val[fn]))));
        const { dataField, pathField, layerField } = this.treeInfo;
        /** @type {?} */
        const maxLayer = maxBy(rows, (/**
         * @param {?} x
         * @return {?}
         */
        x => x[dataField][layerField]));
        for (let i = 1; i <= maxLayer; i++) {
            /** @type {?} */
            const _rows = rows.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[dataField][layerField] === i));
            if (_rows && _rows.length && _rows.length < rows.length) {
                _rows.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    /** @type {?} */
                    const patchCode = r[dataField][pathField];
                    /** @type {?} */
                    const _rows2 = rows.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n[dataField][pathField] !== patchCode && n[dataField][pathField].indexOf(patchCode) === 0));
                    if (_rows2 && _rows2.length) {
                        rows = rows.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n[dataField][pathField] !== patchCode));
                    }
                }));
            }
        }
        return rows;
    }
    /**
     * @private
     * @param {?} e
     * @param {?} selectedRow
     * @return {?}
     */
    _beforeSelectDataCallBack(e, selectedRow) {
        /** @type {?} */
        let canSelect = e;
        /** @type {?} */
        let message = '';
        if (typeof e === 'boolean') {
            canSelect = e;
        }
        else {
            if (typeof e === 'object') {
                canSelect = e.canSelect;
                message = e.message;
            }
            else {
                canSelect = false;
            }
        }
        if (!selectedRow) {
            message = this.mustChoosAdatarow;
            canSelect = false;
        }
        if (canSelect) {
            /** @type {?} */
            let selectedRows$ = of(selectedRow);
            // 多选 树帮助 异步加载 分级码 开启同步选择 或包含下级
            if (!this.singleSelect && this.enableCascade && this.isTree() &&
                this.treeInfo.loadDataType !== 'all' && this.treeInfo.layerType === 'pathcode' &&
                this.isGetAllChidlNodes) {
                // const parentsIds = selectedRow.map(n => n[this.treeInfo.dataField][this.treeInfo.pathField]);
                /** @type {?} */
                let parentsIds = this.getParentPathCode(selectedRow);
                if (parentsIds && parentsIds.length) {
                    parentsIds = parentsIds.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n[this.treeInfo.dataField][this.treeInfo.pathField]));
                    this.showLoading();
                    selectedRows$ = this.httpMgr.getData({ parentsIds }, 'allChildren').pipe(map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => {
                        /** @type {?} */
                        const items = r.items ? r.items.map((/**
                         * @param {?} d
                         * @return {?}
                         */
                        d => d.data)) : [];
                        /** @type {?} */
                        const allitems = [...selectedRow, ...items];
                        /** @type {?} */
                        let ids = allitems.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n[this.idField]));
                        ids = Array.from(new Set(ids));
                        return ids.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => allitems.find((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => a[this.idField] === n))));
                    })));
                }
            }
            selectedRows$.subscribe((/**
             * @param {?} rows
             * @return {?}
             */
            (rows) => {
                this.closeLoading();
                this.updateControlValue(rows);
                if (!this.useTip || !rows) {
                    return;
                }
                if (this.useTip) {
                    this.personalConfigService.updateQueckSelected(rows, this.localService.localeId);
                }
            }));
        }
        else {
            if (message) {
                if (this.notifyService) {
                    this.notifyService.warning(message);
                }
                else {
                    this.messagerService.warning(message, '', true, (/**
                     * @return {?}
                     */
                    () => {
                        this.dialog.el.nativeElement.click();
                    }));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    updateControlValue(selectedRow) {
        if (selectedRow) {
            this.setDisplayText(selectedRow);
            if (this.mappingFn) {
                this.mappingFn(selectedRow, this.mapFields, this.bindingData);
            }
            else {
                if (this.mapFields && this.bindingData) {
                    this.defaultMapping.lookupFieldMap(selectedRow, this.mapFields, this.bindingData);
                }
            }
            this.setModelValue(this.displayText);
            if (this['inDatagrid'] && selectedRow) {
                /** @type {?} */
                const selectItems = Array.isArray(selectedRow) ? selectedRow : [selectedRow];
                this.updateBindData(selectItems);
            }
            this.selectedData.emit(selectedRow);
            this.runDictPickedEvent(selectedRow);
            this.isTextChange = false;
        }
        else {
            if (document.activeElement) {
                ((/** @type {?} */ (document.activeElement))).blur();
            }
            this.messagerService.warning(this.mustChoosAdatarow);
        }
    }
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    updateBindData(selectedRow) {
        if (!this.mapFields) {
            return;
        }
        /** @type {?} */
        const helpFields = Object.keys(this.mapFields);
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData) {
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                (helpField) => {
                    this.mapFields[helpField].split(',').forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    (formField) => {
                        /** @type {?} */
                        const val = selectedRow.map((/**
                         * @param {?} r
                         * @return {?}
                         */
                        r => {
                            return this.utils.getValue(helpField, r);
                        })).join(this.multipleChoiceSeparator);
                        this.utils.setValue(bindingData, formField, val);
                    }));
                }));
            }
            // if (bindingData.setValue) {
            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;
            //     let pathArr: string[] = [];
            //     if (bindingPath) {
            //         pathArr = bindingPath.split('/').filter(n => n !== '');
            //     }
            //     helpFields.forEach((helpField: any) => {
            //         this.mapFields[helpField].split(',').forEach((formField: any) => {
            //             const fieldPaths = pathArr.concat(formField.split('.'));
            //             const val = selectedRow.map(r => {
            //                 return this.utils.getValue(formField, r);
            //             }).join(this.multipleChoiceSeparator);
            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);
            //         });
            //     });
            // }
        }
        else {
            // if (this.bindingData) {
            //     helpFields.forEach((helpField: any) => {
            //         this.mapFields[helpField].split(',').forEach((formField: any) => {
            //             const val = selectedRow.map(r => {
            //                 return this.utils.getValue(formField, r);
            //             }).join(this.multipleChoiceSeparator);
            //             this.utils.setValue(this.bindingData, formField, val);
            //         });
            //     });
            // }
        }
    }
    /**
     * @private
     * @param {?=} isHelpData
     * @return {?}
     */
    getExtendInfoFields(isHelpData = true) {
        if (!this.extInfoFields) {
            console.warn(`未设置扩展字段。`);
            return [];
        }
        /** @type {?} */
        const tipFieldArr = this.extInfoFields.split(',');
        if (isHelpData) {
            /** @type {?} */
            let extendInfoFields = [];
            extendInfoFields = tipFieldArr.map((/**
             * @param {?} tf
             * @return {?}
             */
            tf => {
                /** @type {?} */
                const mapKey = Object.keys(this.mapFields).find((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => {
                    return this.mapFields[k] === tf;
                }));
                if (mapKey) {
                    return mapKey;
                }
                else {
                    console.warn(`在帮助映射字段中未找到${tf}`);
                    return '';
                }
            }));
            return extendInfoFields;
        }
        return tipFieldArr;
    }
    /**
     * @return {?}
     */
    onUpdateExtendInfo() {
        /** @type {?} */
        const jsonData = this.selectionMgr.getBindingData();
        this.updateExtendInfo(jsonData, false);
    }
    // 选中帮助数据后，更新扩展信息
    /**
     * @private
     * @param {?} data
     * @param {?=} isHelpData
     * @return {?}
     */
    updateExtendInfo(data, isHelpData = true) {
        if (data) {
            if (this.extInfoFormatter) {
                if (Array.isArray(data)) {
                    /** @type {?} */
                    const tipString = data.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return this.getExtendInfoText(n);
                    }));
                    this.extendInfo = tipString.join('，');
                }
                else {
                    this.extendInfo = this.getExtendInfoText(data);
                }
            }
            else {
                /** @type {?} */
                const extendInfoFields = this.getExtendInfoFields(isHelpData);
                if (extendInfoFields && extendInfoFields.length) {
                    if (Array.isArray(data)) {
                        /** @type {?} */
                        const tipString = data.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            return this.getExtendInfoText(n, extendInfoFields);
                        }));
                        this.extendInfo = tipString.join('，');
                    }
                    else {
                        this.extendInfo = this.getExtendInfoText(data, extendInfoFields);
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} itemData
     * @param {?=} fields
     * @return {?}
     */
    getExtendInfoText(itemData, fields = null) {
        if (typeof this.extInfoFormatter === 'function') {
            return this.extInfoFormatter({ bindingData: itemData, instance: this });
        }
        else {
            /** @type {?} */
            const tipString = [];
            /** @type {?} */
            const tipValues = fields.map((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                /** @type {?} */
                const tfv = this.utils.getValue(t, itemData);
                tipString.push(tfv);
                return { [t]: tfv };
            }));
            return tipString.join(' ');
        }
    }
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    getDisplayText(rows) {
        /** @type {?} */
        const df = this.displayFields ? this.displayFields.split(',') : [this.textField];
        /** @type {?} */
        const txtArr = rows.map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            /** @type {?} */
            const t = [];
            df.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                t.push(this.utils.getValue(n, r));
            }));
            return t.join(this.displayTextSeparator);
        }));
        if (this.gridOptions.singleSelect) {
            return txtArr.join('');
        }
        else {
            if (this.displayFields) {
                return txtArr.map((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => '[' + t + ']')).join(',');
            }
            else {
                return txtArr.join(',');
            }
        }
    }
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    setDisplayText(selectedRow) {
        this.originalText = this.displayText;
        if (this.gridOptions.singleSelect) {
            if (this.displayFormatter) {
                this.displayText = this.utils.getValue(this.textField, selectedRow);
                if (!this.isTree()) {
                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], { lookup: this, datatable: (/** @type {?} */ (this.componentRef.instance)) });
                }
                else {
                    /** @type {?} */
                    const tt = (/** @type {?} */ (this.componentRef.instance));
                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], { lookup: this, tree: tt });
                }
            }
            else {
                this.displayText = this.getDisplayText([selectedRow]);
            }
            this.displayValue = selectedRow[this.valueField];
        }
        else {
            if (selectedRow.length) {
                if (this.displayFormatter) {
                    this.displayText = selectedRow.map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        return this.utils.getValue(this.textField, r);
                    })).join(this.multipleChoiceSeparator);
                    if (!this.isTree()) {
                        this.displayText = this.displayFormatter(this.displayText, selectedRow, { lookup: this, datatable: (/** @type {?} */ (this.componentRef.instance)) });
                    }
                    else {
                        /** @type {?} */
                        const tt = (/** @type {?} */ (this.componentRef.instance));
                        this.displayText = this.displayFormatter(this.displayText, selectedRow, { lookup: this, tree: tt });
                    }
                }
                else {
                    this.displayText = this.getDisplayText(selectedRow);
                }
                this.displayValue = selectedRow.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    return this.utils.getValue(this.valueField, r);
                })).join(this.multipleChoiceSeparator);
            }
        }
        this.originalText = this.displayText;
    }
    /**
     * @param {?} rowData
     * @return {?}
     */
    runDictPickedEvent(rowData) {
        if (this.dictPicked) {
            if (this.okButton) {
                this.okButton.nativeElement.disabled = true;
            }
            this.dictPickedSubscription = this.dictPicked(rowData).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                if (this.okButton) {
                    this.okButton.nativeElement.disabled = false;
                }
                if (typeof v === 'boolean') {
                    if (v) {
                        this.closeDialog(rowData);
                    }
                }
                else if (typeof v === 'object' && v.closeDialog !== undefined && !v.closeDialog) {
                    if (v.message) {
                        this.messagerService.warning(v.message);
                    }
                    else {
                        this.closeDialog(rowData);
                    }
                }
                else {
                    this.closeDialog(rowData);
                }
            }));
        }
        else {
            this.closeDialog(rowData);
        }
    }
    /**
     * @private
     * @return {?}
     */
    focusToInput() {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.inputGroup && this.inputGroup.textbox) {
                    this.inputGroup.textbox.nativeElement.focus();
                }
            }));
        }));
    }
    /**
     * @param {?=} rowData
     * @return {?}
     */
    closeDialog(rowData = null) {
        this.isShow = false;
        if (this.dialog) {
            this.dialog.close();
        }
        if (rowData) {
            this.multiSelMgr.save(rowData);
        }
        this.focusToInput();
    }
    /**
     * @return {?}
     */
    cancelSelect() {
        this.closeDialog();
        this.isTextChange = false;
        if (!this.nosearch) {
            this.displayText = this.originalText;
            this.setModelValue(this.displayText);
        }
        if (this.cancelHandler) {
            this.cancelHandler(this);
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    setModelValue(v) {
        if (this.onModelChange) {
            this.onModelChange(v);
            this.valueChanged.emit(v);
        }
    }
    // 数据列表，收藏， 已选数据 tab 页切换
    /**
     * @param {?} e
     * @return {?}
     */
    onTabChange(e) {
        this.activeTab = e.tabIndex;
        this.personalConf.tabIndex = this.activeTab;
        /** @type {?} */
        const _firstChange = this.isTabChanged;
        this.isTabChanged = true;
        this.personalConfigService.updatePersonalConfig({ tabIndex: e.tabIndex });
        if (this.activeTab === 'datalist') {
            if (this.isDoublleList() && !this.leftComponentRef) {
                if (this.navigationOptions) {
                    this.lookupCmpMgr.createLeftComponent(this.navigationOptions);
                }
                else {
                    this.initData();
                    return;
                }
            }
            if (!this.items || !this.items.length) {
                this.initData();
            }
            else {
                if (!_firstChange) {
                    if (this.isTree()) {
                        this.loadTreeTableData();
                    }
                    else {
                        this.loadDataTableData();
                        this.dtEventMgr.bindDataTableEvent();
                    }
                }
                // this.selectionMgr.selectCurrentValue();
            }
            this.showGetAllChildrenCheckbox();
        }
        else {
            if (this.activeTab === 'favorite') {
                if (this.isTree()) {
                    this.initData();
                }
                else {
                    if (!this.favoriteItems || !this.favoriteItems.length ||
                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length) {
                        this.initData();
                    }
                    else if (!_firstChange) {
                        this.favHelper._loadFavoriteData(this.favoriteItems);
                        // this.selectionMgr.selectCurrentValue();
                    }
                    //  else {
                    //     this.selectionMgr.selectCurrentValue();
                    // }
                }
            }
        }
        this.changeDetector.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.resizeCmp();
            if (this.isTree()) {
                /** @type {?} */
                const y = this.componentRef.instance.state.scrollY;
                this.componentRef.instance.scrollToY(y, 0);
                if (this.enableCascade) {
                    this.ttEventMgr.cascadeValueChanged(this.cascadeStatus);
                }
                this.selectionMgr.selectCurrentValue();
            }
        }));
    }
    //#region  Tag View ----------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    registerMouseEventForTagView() {
        if (this.enableClear) {
            this.tagbox.nativeElement.addEventListener('mouseenter', this.onTagboxMouseEnter.bind(this));
            this.tagbox.nativeElement.addEventListener('mouseleave', this.onTagboxMouseLeave.bind(this));
        }
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onTagboxMouseEnter(event) {
        if (this.displayText && this.enableClear) {
            if (!this.readonly && !this.disabled) {
                this.showTagboxClearButton = true;
            }
        }
        if (this.showTagboxClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onTagboxMouseLeave(event) {
        this.toggleClearIcon(event);
    }
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onRemoveSelectItem($event, txt) {
        // console.log($event, txt);
        $event.stopPropagation();
        /** @type {?} */
        const textArray = Array.from(this.displayTextList);
        /** @type {?} */
        const removedIndex = this.displayTextList.indexOf(txt);
        textArray.splice(removedIndex, 1);
        this.displayText = textArray.join(this.multipleChoiceSeparator);
        this.setModelValue(this.displayText);
        if (this.displayValue) {
            /** @type {?} */
            const vals = this.displayValue.split(this.multipleChoiceSeparator);
            vals.splice(removedIndex, 1);
            this.displayValue = vals.join(this.multipleChoiceSeparator);
        }
        if (this.mapFields) {
            this.updateOtherFieldDataWhenTagremoved(removedIndex);
        }
        this.tagRemoved.emit({ removedIndex, instance: this });
    }
    /**
     * @private
     * @param {?} removedIndex
     * @return {?}
     */
    updateOtherFieldDataWhenTagremoved(removedIndex) {
        /** @type {?} */
        const helpFields = Object.keys(this.mapFields);
        /** @type {?} */
        const textFieldIndex = helpFields.indexOf(this.textField);
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData.setValue) {
                /** @type {?} */
                const bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                let pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n !== ''));
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                (helpField) => {
                    this.mapFields[helpField].split(',').forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    (formField) => {
                        /** @type {?} */
                        const fieldPaths = pathArr.concat(formField.split('.'));
                        /** @type {?} */
                        const val = bindingData.getValue(fieldPaths);
                        /** @type {?} */
                        const valArr = val.split(this.multipleChoiceSeparator);
                        valArr.splice(removedIndex, 1);
                        /** @type {?} */
                        const newVal = valArr.join(this.multipleChoiceSeparator);
                        bindingData.setValue(pathArr.concat(fieldPaths), newVal, true, true);
                    }));
                }));
            }
        }
        else {
            if (this.bindingData) {
                if (textFieldIndex > -1) {
                    helpFields.splice(textFieldIndex, 1);
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                (helpField) => {
                    this.mapFields[helpField].split(',').forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    (formField) => {
                        /** @type {?} */
                        const val = this.utils.getValue(formField, this.bindingData);
                        /** @type {?} */
                        const valArr = val.split(this.multipleChoiceSeparator);
                        valArr.splice(removedIndex, 1);
                        /** @type {?} */
                        const newVal = valArr.join(this.multipleChoiceSeparator);
                        this.utils.setValue(this.bindingData, formField, newVal);
                    }));
                }));
            }
        }
    }
    //#endregion
    /**
     * @param {?} $event
     * @return {?}
     */
    onAllChildNodesClick($event) {
        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;
    }
}
LookupGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-lookup-grid',
                template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-06-16 13:44:59\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-18 08:47:32\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n <input-group #inputgroup\r\n    *ngIf=\"viewType === 'text'\"\r\n    [groupText]=\"groupIcon\"\r\n    [lookup-tip]= \"useTip\"\r\n    [(ngModel)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [customCls]=\"'lookupbox'\"\r\n    [placeholder]=\"'lookup.placeholder' | locale: '\u8BF7\u9009\u62E9': placeholder\"\r\n    [enableClear]=\"enableClear\"\r\n    [useExtendInfo]=\"useExtendInfo\"\r\n    [extendInfo]=\"extendInfo\"\r\n    [maxLength]=\"maxLength\"\r\n    (updateExtendInfo)=\"onUpdateExtendInfo()\"\r\n    [textAlign]=\"textAlign\"\r\n    [value]=\"displayText\"\r\n    (valueChange)=\"onChanges($event)\"\r\n    (clickHandle)=\"showDialog()\"\r\n    (clear)=\"onClear()\"\r\n></input-group>\r\n\r\n\r\n<div  #tagbox  class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\" *ngIf=\"viewType === 'tag'\" [attr.title]=\"displayText\">\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"height: auto; min-height: 24px;\">\r\n        <div class=\"multi--content\">\r\n            <span class=\"multi--item\" *ngFor=\"let txt of displayTextList; let index\" title=\"\" style=\"cursor: default;padding: 0 5px;\r\n            background: #ebf7fe;\r\n            border: 1px solid #cfedff;\r\n            position: relative;\r\n            padding-right: 20px;\r\n            margin-right: 3px;margin-top: 1px;\">\r\n                {{txt}}\r\n                <i class=\"f-icon f-icon-close\" *ngIf=\"!readonly && !disabled\" style=\"cursor: pointer;position:absolute; right: 2px\" (click)=\"onRemoveSelectItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n        <!-- <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n            <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n        </div> -->\r\n    </div>\r\n    <div class=\"input-group-append\"  title=\"\" >\r\n        <span class=\"input-group-text input-group-clear\" style=\"display: none;\" (click)=\"onClear()\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <span class=\"input-group-text\" (click)=\"showDialog()\">\r\n            <span class=\"f-icon f-icon-lookup\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<farris-dialog\r\n    #dialog\r\n    *ngIf=\"isShow\"\r\n    [draggable]=\"draggable\"\r\n    [resizable]=\"resizable\"\r\n    [title]=\"displayInfo.title\"\r\n    [beforeOpen]=\"beforeOpen\"\r\n    [beforeClose]=\"beforeClose\"\r\n    [(width)]=\"dialogWidth\"\r\n    [(height)]=\"dialogHeight\"\r\n    [showButtons]=\"showButtons\"\r\n    [showMaxButton]=\"showMaxButton\"\r\n    [showCloseButton]=\"true\"\r\n    [buttons]=\"buttonsRef || defaultButtonRef\"\r\n    [buttonAlign]=\"buttonAlign\"\r\n    [enableScroll]=\"false\"\r\n    [dialogHeaderHeight]=\"50\"\r\n    (maxed)=\"onMaxDialog($event)\"\r\n    (resized)=\"onResized($event)\"\r\n    (resizing)=\"onResizing($event)\"\r\n>\r\n    <div [ngStyle]=\"containerStyle\" [style.height.px]=\"dialogHeight - 46 - 56\">\r\n        <lookup-tabs (tabChange)=\"onTabChange($event)\" [enableFav]=\"useFavorite\" [activeTab]=\"activeTab\"\r\n            [enableSelected]=\"showSelected && !singleSelect\" [selectedTotal]=\"(currentSelectedItems | async)?.length\">\r\n            <div datalist style=\"position: relative;\" [style.height.px]=\"useFavorite ? dialogHeight - 46 - 56 - 40 : dialogHeight - 46 - 56\">\r\n                <layout [direction]=\"'h'\" [fill]=\"true\" *ngIf=\"isDoublleList()\">\r\n                    <layout-panel #leftPanel [width]=\"leftPanelWidth\" region=\"west\" [minWidth]=\"10\" [showBorder]=\"false\" >\r\n                        <ng-container #leftContainer></ng-container>\r\n                    </layout-panel>\r\n                    <layout-panel region=\"center\" [showBorder]=\"false\">\r\n                        <ng-container #centerContainer></ng-container>\r\n                    </layout-panel>\r\n                </layout>\r\n                \r\n                <ng-container *ngIf=\"!isDoublleList()\" #contentContainer></ng-container>\r\n            </div>\r\n            <div favorites [style.height.px]=\"dialogHeight - 46 - 56 - 40\" style=\"position: relative; \"  *ngIf=\"useFavorite\" >\r\n                <ng-container #favoritesContainer></ng-container>\r\n            </div>\r\n            <div selected [style.height.px]=\"dialogHeight - 46 - 5 -40\" style=\"position: relative;\"  *ngIf=\"showSelected\" >\r\n                <farris-datatable #multiSelectDT\r\n                    [height]=\"gridOptions?.height\"\r\n                    [pagination]=\"false\" [fill]=\"true\"\r\n                    [columns]=\"selectedColumns\"\r\n                    [data]=\"currentSelectedItems | async\"\r\n                    [remoteSort]=\"false\"\r\n                    (cellClick)=\"multiSelMgr?.onSelectedTableCellClick($event)\"\r\n                >\r\n                </farris-datatable>\r\n            </div>\r\n        </lookup-tabs>\r\n\r\n    </div>\r\n</farris-dialog>\r\n\r\n<ng-template #defaultButtonRef>\r\n    \r\n    <div class=\"flex-fill\" style=\"text-align: left;\" *ngIf=\"isReady && enableCascade && displayType==='TREELIST' && singleSelect === false\">\r\n        <select class=\"form-control\" style=\"width: auto; display: inline-block\" (ngModelChange)=\"ttEventMgr?.cascadeValueChanged($event)\" [ngModel]=\"cascadeStatus\" name=\"cascadeStatus\">\r\n            <option value=\"enable\">{{ 'lookup.cascade.enable' | locale: '\u540C\u6B65\u9009\u62E9' }}</option>\r\n            <option value=\"up\">{{ 'lookup.cascade.up' | locale: '\u5305\u542B\u4E0A\u7EA7' }}</option>\r\n            <option value=\"down\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</option>\r\n            <option value=\"disable\" >{{ 'lookup.cascade.disable' | locale: '\u4EC5\u9009\u62E9\u81EA\u8EAB' }}</option>\r\n        </select>\r\n\r\n        <button class=\"btn btn-link\" style=\"display: inline-block;margin-left: 10px;padding-left: 0;\"\r\n            *ngIf=\"enableGetAllChildNodes\" (click)=\"onAllChildNodesClick($event)\">\r\n            <span class=\"f-icon f-icon-checkbox\"[class.f-icon-checkbox-checked]=\"isGetAllChidlNodes\"\r\n                style=\"margin-right: 5px; font-size: 14px;color: #0089FF;\"></span>{{'lookup.getAllChilds'|locale: '\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E'}}</button>\r\n\r\n    </div>\r\n\r\n    <button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"cancelSelect()\" [disabled]=\"!(isReady || hasError)\" >\r\n        {{ 'lookup.cancelText' | locale: '\u53D6\u6D88' }}\r\n    </button>\r\n    <button #okbtn type=\"button\" [disabled]=\"!isReady\"  class=\"btn btn-primary btn-lg\" (click)=\"selectItem()\" >\r\n        {{ 'lookup.okText' | locale: '\u786E\u5B9A' }}\r\n    </button>\r\n   \r\n    \r\n</ng-template>\r\n",
                providers: [LOOKUPGRID_VALUE_ACCESSOR, ShortcutsService, LookupDefaultMapping, LookupUtils, PersonalConfigService],
                encapsulation: ViewEncapsulation.None,
                exportAs: 'lookup',
                styles: [".input-group{flex-wrap:nowrap}.ng-dirty.ng-invalid>input-group>.lookupbox{border-color:#ff0303}.lookup-clear{cursor:pointer;background:#fff!important}.lookup-clear:hover{background:#e9ecef!important}.f-lookup-favorite{cursor:pointer;color:#ff9800}.f-lookup-unfavorite{cursor:pointer;color:#dd2438}.lookup-tip{position:absolute;min-width:200px;max-height:400px;padding:.25rem 0;z-index:7777;background:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.lookup-tip .lookup-tip-header{font-weight:700;padding:.25rem .475rem;border-radius:0}.lookup-tip ul{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;padding-left:0;margin-bottom:0}.lookup-tip ul li{position:relative;display:block;width:100%;margin-bottom:-1px;padding:.25rem .875rem;color:rgba(0,0,0,.85);background-color:#fff;cursor:pointer}.lookup-tip ul li:hover{background-color:#e6f7ff}"]
            }] }
];
/** @nocollapse */
LookupGridComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ElementRef },
    { type: CommonUtils },
    { type: LookupDefaultMapping },
    { type: ChangeDetectorRef },
    { type: ShortcutsService },
    { type: LookupUtils },
    { type: NgZone },
    { type: Renderer2 }
];
LookupGridComponent.propDecorators = {
    customDisplayType: [{ type: Input }],
    viewType: [{ type: Input }],
    displayType: [{ type: Input }],
    enableClear: [{ type: Input }],
    remoteSort: [{ type: Input }],
    condition: [{ type: Input }],
    showCheckAll: [{ type: Input }],
    singleSelect: [{ type: Input }],
    multipleChoiceSeparator: [{ type: Input }],
    idField: [{ type: Input }],
    uri: [{ type: Input }],
    beUri: [{ type: Input }],
    showFilterBar: [{ type: Input }],
    pagination: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageList: [{ type: Input }],
    total: [{ type: Input }],
    columns: [{ type: Input }],
    remoteSearch: [{ type: Input }],
    searchOnServer: [{ type: Input }],
    nosearch: [{ type: Input }],
    maxLength: [{ type: Input }],
    mappingFn: [{ type: Input }],
    items: [{ type: Input }],
    favoriteItems: [{ type: Input }],
    customData: [{ type: Input }],
    bindingData: [{ type: Input }],
    treeInfo: [{ type: Input }],
    enableCascade: [{ type: Input }],
    cascadeStatus: [{ type: Input }],
    placeholder: [{ type: Input }],
    showSelected: [{ type: Input }],
    useFavorite: [{ type: Input }],
    favoriteDataFrom: [{ type: Input }],
    useTip: [{ type: Input }],
    isRecordSize: [{ type: Input }],
    userId: [{ type: Input }],
    enableToSelect: [{ type: Input }],
    enableFindText: [{ type: Input }],
    expandLevel: [{ type: Input }],
    loadTreeDataType: [{ type: Input }],
    loadDataWhenOpen: [{ type: Input }],
    navSelectedIds: [{ type: Input }],
    selectFirstInNav: [{ type: Input }],
    enableFullTree: [{ type: Input }],
    displayFormatter: [{ type: Input }],
    displayFields: [{ type: Input }],
    displayTextSeparator: [{ type: Input }],
    helpId: [{ type: Input }],
    textAlign: [{ type: Input }],
    enableTitle: [{ type: Input }],
    useExtendInfo: [{ type: Input }],
    extInfoFields: [{ type: Input }],
    extInfoFormatter: [{ type: Input }],
    extendInfo: [{ type: Input }],
    customFormatter: [{ type: Input }],
    customNavFormatter: [{ type: Input }],
    okHandler: [{ type: Input }],
    cancelHandler: [{ type: Input }],
    tagboxHeight: [{ type: Input }],
    maxTagboxHeight: [{ type: Input }],
    enableGetAllChildNodes: [{ type: Input }],
    shortcutKey: [{ type: Input }],
    beforeSelectData: [{ type: Input }],
    selectedData: [{ type: Output }],
    clear: [{ type: Output }],
    search: [{ type: Output }],
    valueChanged: [{ type: Output }],
    loadSuccess: [{ type: Output }],
    pagerChanged: [{ type: Output }],
    expandTreeNode: [{ type: Output }],
    textChanged: [{ type: Output }],
    checkedChange: [{ type: Output }],
    tagRemoved: [{ type: Output }],
    gridOptions: [{ type: Input }],
    contentContainer: [{ type: ViewChild, args: ['contentContainer', { read: ViewContainerRef },] }],
    favoritesContainer: [{ type: ViewChild, args: ['favoritesContainer', { read: ViewContainerRef },] }],
    leftContainer: [{ type: ViewChild, args: ['leftContainer', { read: ViewContainerRef },] }],
    centerContainer: [{ type: ViewChild, args: ['centerContainer', { read: ViewContainerRef },] }],
    multiSelectDT: [{ type: ViewChild, args: ['multiSelectDT',] }],
    inputGroup: [{ type: ViewChild, args: ['inputgroup',] }],
    leftPanel: [{ type: ViewChild, args: ['leftPanel',] }],
    tagbox: [{ type: ViewChild, args: ['tagbox',] }],
    okButton: [{ type: ViewChild, args: ['okbtn',] }]
};
if (false) {
    /** @type {?} */
    LookupGridComponent.prototype.groupIcon;
    /** @type {?} */
    LookupGridComponent.prototype._displayType;
    /**
     * 使用表单设计器中的显示类型。否则使用元数据设置的显示类型。 默认：false
     * @type {?}
     */
    LookupGridComponent.prototype.customDisplayType;
    /** @type {?} */
    LookupGridComponent.prototype.viewType;
    /**
     * 启用清空按钮
     * @type {?}
     */
    LookupGridComponent.prototype.enableClear;
    /**
     * 服务器端排序
     * @type {?}
     */
    LookupGridComponent.prototype.remoteSort;
    /** @type {?} */
    LookupGridComponent.prototype.condition;
    /**
     * 树表显示全选复选框。 默认不显示
     * @type {?}
     */
    LookupGridComponent.prototype.showCheckAll;
    /**
     * 是否启用多选
     * @type {?}
     */
    LookupGridComponent.prototype.singleSelect;
    /**
     * 多选分隔符
     * @type {?}
     */
    LookupGridComponent.prototype.multipleChoiceSeparator;
    /**
     * 主键字段
     * @type {?}
     */
    LookupGridComponent.prototype.idField;
    /**
     * 可以为元数据ID、webapiURL
     * @type {?}
     */
    LookupGridComponent.prototype.uri;
    /**
     * BE REST RUI
     * - 此处设置后 uri 失效
     * @type {?}
     */
    LookupGridComponent.prototype.beUri;
    /**
     * 显示过滤工具条
     * @type {?}
     */
    LookupGridComponent.prototype.showFilterBar;
    /**
     * 是否启用分页
     * @type {?}
     */
    LookupGridComponent.prototype.pagination;
    /**
     * 当前页索引，从 0开始
     * @type {?}
     */
    LookupGridComponent.prototype.pageIndex;
    /**
     * 每页记录数
     * @type {?}
     */
    LookupGridComponent.prototype.pageSize;
    /**
     * 可用分页记录数列表
     * @type {?}
     */
    LookupGridComponent.prototype.pageList;
    /**
     * 总记录数
     * @type {?}
     */
    LookupGridComponent.prototype.total;
    /**
     * 显示列信息
     * @type {?}
     */
    LookupGridComponent.prototype.columns;
    /**
     * 帮助查询是否为远端查询
     * @type {?}
     */
    LookupGridComponent.prototype.remoteSearch;
    /**
     * 文本变化后，进行服务器端查询
     * @type {?}
     */
    LookupGridComponent.prototype.searchOnServer;
    /**
     * 不进行服务器查询，有啥算啥
     * @type {?}
     */
    LookupGridComponent.prototype.nosearch;
    /**
     * 允许输入的字符最大长度。
     * 任意输入时，此属性有效
     * @type {?}
     */
    LookupGridComponent.prototype.maxLength;
    /** @type {?} */
    LookupGridComponent.prototype.mappingFn;
    /**
     * 数据列表
     * @type {?}
     */
    LookupGridComponent.prototype.items;
    /** @type {?} */
    LookupGridComponent.prototype.favoriteItems;
    /**
     * 自定义数据
     * @type {?}
     */
    LookupGridComponent.prototype.customData;
    /**
     * 绑定值所在的对象
     * @type {?}
     */
    LookupGridComponent.prototype.bindingData;
    /** @type {?} */
    LookupGridComponent.prototype.treeInfo;
    /**
     * 是否启用级联选择控制选项
     * @type {?}
     */
    LookupGridComponent.prototype.enableCascade;
    /**
     * 级联控制默认值： enable, up, down, disable
     * @type {?}
     */
    LookupGridComponent.prototype.cascadeStatus;
    /** @type {?} */
    LookupGridComponent.prototype.placeholder;
    /**
     * 显示已选记录列表。 默认为 false 不显示
     * @type {?}
     */
    LookupGridComponent.prototype.showSelected;
    /**
     * 应用收藏夹
     * @type {?}
     */
    LookupGridComponent.prototype.useFavorite;
    /**
     * 收藏数据来自于： locale: 本地存储， remote: 服务器端存储
     * @type {?}
     */
    LookupGridComponent.prototype.favoriteDataFrom;
    /**
     * 使用提示,快捷选择
     * @type {?}
     */
    LookupGridComponent.prototype.useTip;
    /**
     * 记录窗口大小
     * @type {?}
     */
    LookupGridComponent.prototype.isRecordSize;
    /**
     * 快速选择
     * @type {?}
     */
    LookupGridComponent.prototype.userId;
    /** @type {?} */
    LookupGridComponent.prototype.enableToSelect;
    /** @type {?} */
    LookupGridComponent.prototype.enableFindText;
    /**
     * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
     * @type {?}
     */
    LookupGridComponent.prototype.expandLevel;
    /**
     * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
     * @type {?}
     */
    LookupGridComponent.prototype.loadTreeDataType;
    /**
     * 窗口打开后立即加载数据，默认为 true
     * @type {?}
     */
    LookupGridComponent.prototype.loadDataWhenOpen;
    /**
     * 导航列表，树列表在帮助打开后选中的数据;
     * 设置后，`selectFirstInNav` 失效！
     * @type {?}
     */
    LookupGridComponent.prototype.navSelectedIds;
    /**
     * 导航帮助，选中第1条数据，默认为 false;
     * 注意：当`navSelectedIds`不为空时，此属性失效。
     * @type {?}
     */
    LookupGridComponent.prototype.selectFirstInNav;
    /**
     * 启用构造完整树过滤
     * @type {?}
     */
    LookupGridComponent.prototype.enableFullTree;
    /**
     * 显示文本自定义函数
     * @type {?}
     */
    LookupGridComponent.prototype.displayFormatter;
    /**
     * 显示文本字段集合，以 英文 逗号隔开
     * @type {?}
     */
    LookupGridComponent.prototype.displayFields;
    /** @type {?} */
    LookupGridComponent.prototype.displayTextSeparator;
    /**
     * 帮助元数据ID，不为空时调用指定的URI
     * /api/runtime/bcc/v1.0/help/data/{helpId}
     * @type {?}
     */
    LookupGridComponent.prototype.helpId;
    /**
     * 文本对齐方式； left | center | right; 默认 left
     * @type {?}
     */
    LookupGridComponent.prototype.textAlign;
    /**
     * 鼠标滑过输入框时显示输入框内的文本信息
     * @type {?}
     */
    LookupGridComponent.prototype.enableTitle;
    /** @type {?} */
    LookupGridComponent.prototype.useExtendInfo;
    /** @type {?} */
    LookupGridComponent.prototype.extInfoFields;
    /** @type {?} */
    LookupGridComponent.prototype.extInfoFormatter;
    /** @type {?} */
    LookupGridComponent.prototype.extendInfo;
    /**
     * IDE 设计器自定义格式化 2103
     * @type {?}
     */
    LookupGridComponent.prototype.customFormatter;
    /** @type {?} */
    LookupGridComponent.prototype.customNavFormatter;
    /**
     * 自定义确定事件
     * @type {?}
     */
    LookupGridComponent.prototype.okHandler;
    /**
     * 自定义取消事件
     * @type {?}
     */
    LookupGridComponent.prototype.cancelHandler;
    /** @type {?} */
    LookupGridComponent.prototype.tagboxHeight;
    /** @type {?} */
    LookupGridComponent.prototype.maxTagboxHeight;
    /**
     * 启用获取所有子级数据的功能
     * @type {?}
     */
    LookupGridComponent.prototype.enableGetAllChildNodes;
    /** @type {?} */
    LookupGridComponent.prototype.shortcutKey;
    /**
     * 数据选择后，值映射前触发
     * 返回 Observable
     *      canSelect: <boolean>  是否允许选择
     *      message: <string> 不允许选择时的提示信息
     * @type {?}
     */
    LookupGridComponent.prototype.beforeSelectData;
    /** @type {?} */
    LookupGridComponent.prototype.selectedData;
    /** @type {?} */
    LookupGridComponent.prototype.clear;
    /** @type {?} */
    LookupGridComponent.prototype.search;
    /** @type {?} */
    LookupGridComponent.prototype.valueChanged;
    /** @type {?} */
    LookupGridComponent.prototype.loadSuccess;
    /** @type {?} */
    LookupGridComponent.prototype.pagerChanged;
    /** @type {?} */
    LookupGridComponent.prototype.expandTreeNode;
    /** @type {?} */
    LookupGridComponent.prototype.textChanged;
    /** @type {?} */
    LookupGridComponent.prototype.checkedChange;
    /** @type {?} */
    LookupGridComponent.prototype.tagRemoved;
    /**
     * 内容中留白边距
     * @type {?}
     */
    LookupGridComponent.prototype.containerMargin;
    /** @type {?} */
    LookupGridComponent.prototype.containerStyle;
    /** @type {?} */
    LookupGridComponent.prototype._gridOptions;
    /** @type {?} */
    LookupGridComponent.prototype.contentContainer;
    /** @type {?} */
    LookupGridComponent.prototype.favoritesContainer;
    /** @type {?} */
    LookupGridComponent.prototype.leftContainer;
    /** @type {?} */
    LookupGridComponent.prototype.centerContainer;
    /** @type {?} */
    LookupGridComponent.prototype.multiSelectDT;
    /** @type {?} */
    LookupGridComponent.prototype.inputGroup;
    /** @type {?} */
    LookupGridComponent.prototype.leftPanel;
    /** @type {?} */
    LookupGridComponent.prototype.tagbox;
    /** @type {?} */
    LookupGridComponent.prototype.okButton;
    /** @type {?} */
    LookupGridComponent.prototype.componentRef;
    /** @type {?} */
    LookupGridComponent.prototype.leftComponentRef;
    /** @type {?} */
    LookupGridComponent.prototype.favoritesComponentRef;
    /** @type {?} */
    LookupGridComponent.prototype.http;
    /** @type {?} */
    LookupGridComponent.prototype.messagerService;
    /** @type {?} */
    LookupGridComponent.prototype.loadingService;
    /** @type {?} */
    LookupGridComponent.prototype.loading;
    /** @type {?} */
    LookupGridComponent.prototype.navigationOptions;
    /** @type {?} */
    LookupGridComponent.prototype.leftPanelWidth;
    /** @type {?} */
    LookupGridComponent.prototype.navLookupDialogMinWidth;
    /** @type {?} */
    LookupGridComponent.prototype.navigationFilter;
    /** @type {?} */
    LookupGridComponent.prototype.subscriptions;
    /** @type {?} */
    LookupGridComponent.prototype.dialogOpenedSubscription;
    /** @type {?} */
    LookupGridComponent.prototype.dialogClosedSubscription;
    /** @type {?} */
    LookupGridComponent.prototype.isTextChange;
    /** @type {?} */
    LookupGridComponent.prototype.isTabChanged;
    /** @type {?} */
    LookupGridComponent.prototype.displayInfo;
    /** @type {?} */
    LookupGridComponent.prototype.tabChangeSubscription;
    /** @type {?} */
    LookupGridComponent.prototype.personalConf;
    /** @type {?} */
    LookupGridComponent.prototype.favoriteColumns;
    /**
     * 临时查询参数
     * @type {?}
     */
    LookupGridComponent.prototype._searchState;
    /** @type {?} */
    LookupGridComponent.prototype.allData;
    /** @type {?} */
    LookupGridComponent.prototype.personalConfigService;
    /** @type {?} */
    LookupGridComponent.prototype.utilService;
    /** @type {?} */
    LookupGridComponent.prototype.treeNodeHelper;
    /** @type {?} */
    LookupGridComponent.prototype.localService;
    /** @type {?} */
    LookupGridComponent.prototype.notifyService;
    /** @type {?} */
    LookupGridComponent.prototype.allColumnsTitle;
    /** @type {?} */
    LookupGridComponent.prototype.mustWriteSomething;
    /** @type {?} */
    LookupGridComponent.prototype.mustChoosAdatarow;
    /** @type {?} */
    LookupGridComponent.prototype.addFavoriteSuccess;
    /** @type {?} */
    LookupGridComponent.prototype.delFavoriteSuccess;
    /** @type {?} */
    LookupGridComponent.prototype.searching;
    /**
     * 临时存储查询结果集
     * @type {?}
     */
    LookupGridComponent.prototype._searchResult;
    /** @type {?} */
    LookupGridComponent.prototype.lookupinitializationSubject;
    /**
     * 多选时，选中的数据
     * @type {?}
     */
    LookupGridComponent.prototype.currentSelectedItems;
    /**
     * 已选数据列信息
     * @type {?}
     */
    LookupGridComponent.prototype.selectedColumns;
    /** @type {?} */
    LookupGridComponent.prototype.activeTab;
    /** @type {?} */
    LookupGridComponent.prototype.favHelper;
    /** @type {?} */
    LookupGridComponent.prototype.ttEventMgr;
    /** @type {?} */
    LookupGridComponent.prototype.multiSelMgr;
    /** @type {?} */
    LookupGridComponent.prototype.httpMgr;
    /** @type {?} */
    LookupGridComponent.prototype.lookupCmpMgr;
    /** @type {?} */
    LookupGridComponent.prototype.dialogMgr;
    /** @type {?} */
    LookupGridComponent.prototype.selectionMgr;
    /** @type {?} */
    LookupGridComponent.prototype.dtEventMgr;
    /** @type {?} */
    LookupGridComponent.prototype.lookupSelectionSer;
    /** @type {?} */
    LookupGridComponent.prototype.controlId;
    /** @type {?} */
    LookupGridComponent.prototype.savingFaoriteData;
    /** @type {?} */
    LookupGridComponent.prototype.isReady;
    /** @type {?} */
    LookupGridComponent.prototype.showTagboxClearButton;
    /** @type {?} */
    LookupGridComponent.prototype.hasError;
    /** @type {?} */
    LookupGridComponent.prototype.isGetAllChidlNodes;
    /** @type {?} */
    LookupGridComponent.prototype.eventManager;
    /**
     * 选中记录ID，自定义帮助取数时使用
     * @type {?}
     */
    LookupGridComponent.prototype.selectedIds;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.farrisInstances;
    /** @type {?} */
    LookupGridComponent.prototype.injector;
    /** @type {?} */
    LookupGridComponent.prototype.cfr;
    /** @type {?} */
    LookupGridComponent.prototype.el;
    /** @type {?} */
    LookupGridComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.defaultMapping;
    /** @type {?} */
    LookupGridComponent.prototype.changeDetector;
    /** @type {?} */
    LookupGridComponent.prototype.shortcuts;
    /** @type {?} */
    LookupGridComponent.prototype.lookupUtils;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.render2;
}
//# sourceMappingURL=data:application/json;base64,