import { Injectable } from "@angular/core";
import { Expression } from "../expression/index";
import { EventHandler } from "./event_handler";
export class BindingDataLoadEventHandler extends EventHandler {
    filter(event) {
        // 过滤第一次空load
        if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {
            return null;
        }
        // 数据加载完成后需要计算当前绑定路径下的只读、必填、校验表达式
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            const expressions = this.expressionObjects.filter((expressionObject) => {
                if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {
                    return false;
                }
                const result = this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                return (result.distance === 0 && result.isSameTable) || (result.eventFromParent && event.path.length === 2); // 当前表或从从表
            });
            return expressions;
        }
        else {
            return null;
        }
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
BindingDataLoadEventHandler.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2xvYWRfZXZlbnRfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V2ZW50LWhhbmRsZXIvYmluZGluZ19kYXRhX2xvYWRfZXZlbnRfaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHL0MsTUFBTSxPQUFPLDJCQUE0QixTQUFRLFlBQVk7SUFDcEQsTUFBTSxDQUFDLEtBQTJCO1FBQ3ZDLGFBQWE7UUFDYixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3JILE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxpQ0FBaUM7UUFDakMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUE2QyxFQUFFLEVBQUU7Z0JBQ2xHLElBQUksZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLElBQUksZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDclMsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7WUFDekgsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLFdBQVcsQ0FBQztTQUNwQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7SUFDRDs7O09BR0c7SUFDSSxRQUFRLENBQUMsS0FBMkI7UUFDekMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQTZDLEVBQUUsRUFBRTtnQkFDcEUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN2RSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDMUUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2xGLE9BQU87aUJBQ1I7Z0JBQ0QsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFBQSxDQUFDO2dCQUM3RixJQUFJLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3pFO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLG9CQUFvQixDQUFDLEtBQWUsRUFBRSxLQUEyQjtRQUN0RSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7WUF0REYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24vaW5kZXhcIjtcclxuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfaGFuZGxlclwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmluZGluZ0RhdGFMb2FkRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcclxuICBwdWJsaWMgZmlsdGVyKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xyXG4gICAgLy8g6L+H5ruk56ys5LiA5qyh56m6bG9hZFxyXG4gICAgaWYgKCghZXZlbnQucGF0aCB8fCBldmVudC5wYXRoLmxlbmd0aCA9PT0gMCkgJiYgZXZlbnQudmFsdWUgJiYgQXJyYXkuaXNBcnJheShldmVudC52YWx1ZSkgJiYgZXZlbnQudmFsdWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLy8g5pWw5o2u5Yqg6L295a6M5oiQ5ZCO6ZyA6KaB6K6h566X5b2T5YmN57uR5a6a6Lev5b6E5LiL55qE5Y+q6K+744CB5b+F5aGr44CB5qCh6aqM6KGo6L6+5byPXHJcbiAgICBpZiAodGhpcy5leHByZXNzaW9uT2JqZWN0cyAmJiB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmZpbHRlcigoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgaWYgKGV4cHJlc3Npb25PYmplY3QubnMgIT09IGV2ZW50Lm5zIHx8IChleHByZXNzaW9uT2JqZWN0LnR5cGUgIT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVhZG9ubHkgJiYgZXhwcmVzc2lvbk9iamVjdC50eXBlICE9PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZpc2libGUgJiYgZXhwcmVzc2lvbk9iamVjdC50eXBlICE9PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlcXVpcmVkICYmIGV4cHJlc3Npb25PYmplY3QudHlwZSAhPT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WYWxpZGF0ZSkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hbmFseXNpcyhldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHQuZGlzdGFuY2UgPT09IDAgJiYgcmVzdWx0LmlzU2FtZVRhYmxlKSB8fCAocmVzdWx0LmV2ZW50RnJvbVBhcmVudCAmJiBldmVudC5wYXRoLmxlbmd0aCA9PT0gMik7IC8vIOW9k+WJjeihqOaIluS7juS7juihqFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGV4cHJlc3Npb25zO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWPkeW4g+S6i+S7tlxyXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkaXNwYXRjaChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5maWx0ZXIoZXZlbnQpO1xyXG4gICAgaWYgKGV4cHJlc3Npb25zICYmIGV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGV4dCA9IHRoaXMuYnVpbGRFbnRpdHlDb250ZXh0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoZXhwcmVzc2lvbk9iamVjdCwgZXZlbnQsIGVudGl0eUNvbnRleHQpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGVyZm9ybShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gdGhpcy5jb252ZXJ0Qm9vbGVhblR5cGVFeHByZXNzaW9uUmVzdWx0KGV4cHJlc3Npb25PYmplY3QsIHJlc3VsdCk7O1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XHJcbiAgICAgICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHQuc2V0KGV4cHJlc3Npb25PYmplY3QuaWQsIGV4cHJlc3Npb25PYmplY3QucmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a2Q6KGo5LqL5Lu26KGMXHJcbiAgICogQHBhcmFtIHBhdGhzIFxyXG4gICAqIEBwYXJhbSBldmVudCBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q3VycmVudFJvd0J5RXZlbnQocGF0aHM6IHN0cmluZ1tdLCBldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpOiBudWxsIHwgeyBbcHJvcDogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFJvd0J5UGF0aHMocGF0aHMpO1xyXG4gIH1cclxufSJdfQ==