/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * @template T
 */
export class BaseDataFacadeService {
    /**
     * @param {?} _initState
     */
    constructor(_initState) {
        this._initState = _initState;
        this._state = this._initState;
        this.store = new BehaviorSubject(this._state);
        this.state$ = this.store.asObservable();
        this.data$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state.data)));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    initData(data) {
        return data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            /** @type {?} */
            const _id = d[this._state.idField];
            /** @type {?} */
            const disable = (/**
             * @return {?}
             */
            () => {
                return this.disableExpress ? this.disableExpress(d) : false;
            });
            return {
                id: _id,
                data: d,
                disabled: disable(),
            };
        }));
    }
    /**
     * @protected
     * @param {?} state
     * @return {?}
     */
    updateState(state) {
        /** @type {?} */
        const newState = Object.assign({}, this._state, state);
        this.store.next(this._state = newState);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    initState(state) {
        this.updateState(state);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    isSelect(id) {
        if (this._state.selections && this._state.selections.length) {
            return this._state.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            item => !!item ? item[this._state.idField] == id : false)) !== undefined;
        }
        return false;
    }
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} separator
     * @return {?}
     */
    loadData(data, selectValues = '', separator = ',') {
        if (data) {
            if (selectValues) {
                /** @type {?} */
                const selectedItems = selectValues.split(separator).map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => d[this._state.valueField] + '' == val));
                }));
                this._state.selections = selectedItems.filter((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => !!e));
            }
            else {
                this._state.selections = [];
            }
            /** @type {?} */
            const _data = this.initData(data);
            this.updateState(Object.assign({}, this._state, { data: _data }));
        }
        else {
            this.updateState({ data: [], selections: [] });
        }
    }
    /**
     * @return {?}
     */
    getSelections() {
        return this._state.selections;
    }
    /**
     * @param {?} selectValues
     * @param {?=} separator
     * @return {?}
     */
    setSelections(selectValues, separator = ',') {
        if (selectValues) {
            /** @type {?} */
            let selectedItems = [];
            if (this._state.multiSelect) {
                selectedItems = selectValues.split(separator).map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return this._state.data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => d.data[this._state.valueField] + '' == val));
                })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return n ? n.data : '';
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
            }
            else {
                selectedItems = [this._state.data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => d.data[this._state.valueField] + '' == selectValues))];
            }
            this.updateState({ selections: selectedItems });
        }
    }
    /**
     * @return {?}
     */
    selectAll() {
        this.updateState({ selections: this._state.data.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.data)) });
    }
    /**
     * @return {?}
     */
    unSelectAll() {
        this.clearSelections();
    }
    /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    selectItem(data, index) {
        /** @type {?} */
        const idfield = this._state.idField;
        /** @type {?} */
        let selections = this.getSelections();
        /** @type {?} */
        const id = data[idfield];
        if (!this._state.multiSelect) {
            if (!this.isSelect(id)) {
                selections = [data];
            }
        }
        else {
            if (!this.isSelect(id)) {
                selections.push(data);
            }
        }
        /** @type {?} */
        const items = this.cloneArray(selections);
        this.updateState({ selections: items });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    unSelectItem(data) {
        /** @type {?} */
        const idfield = this._state.idField;
        /** @type {?} */
        let selections = this.getSelections();
        /** @type {?} */
        const id = data[idfield];
        if (!this._state.multiSelect) {
            selections = [];
        }
        else {
            selections = selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[idfield] != id));
        }
        /** @type {?} */
        const items = this.cloneArray(selections);
        this.updateState({ selections: items });
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.updateState({ selections: [] });
    }
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    cloneArray(arr) {
        if (arr && arr.length) {
            return arr.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }
        return arr;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseDataFacadeService.prototype._state;
    /** @type {?} */
    BaseDataFacadeService.prototype.disableExpress;
    /** @type {?} */
    BaseDataFacadeService.prototype.store;
    /** @type {?} */
    BaseDataFacadeService.prototype.state$;
    /** @type {?} */
    BaseDataFacadeService.prototype.data$;
    /**
     * @type {?}
     * @private
     */
    BaseDataFacadeService.prototype._initState;
}
//# sourceMappingURL=data:application/json;base64,