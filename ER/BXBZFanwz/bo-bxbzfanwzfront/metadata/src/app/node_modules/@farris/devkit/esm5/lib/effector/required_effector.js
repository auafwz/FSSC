import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, NAMESPACE } from "../frame/index";
import { TranslateToken } from '../i18n';
import { Repository } from '../repository/index';
/**
 * 必填副作用器
 * @description 当结算结果为true时设置必填校验，否则删除必填校验
 */
var RequiredEffector = /** @class */ (function () {
    function RequiredEffector(injector, repository, namespace, frameContext) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.ns = namespace;
    }
    RequiredEffector.prototype.effect = function (path, value, options) {
        var _a;
        // 校验不通过时返回false
        var domInfo = this.getDomInfoByEntityPath(path);
        if (!domInfo) {
            return;
        }
        var frameContext = domInfo.frameContext;
        var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        var rootViewModel = rootFrameContext.viewModel;
        var domPropertyName = domInfo.domPropertyName;
        var pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(function (p) { return p; }));
        var expressionId = options.expressionId;
        if (expressionId) {
            // 增加校验规则
            frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "require" /* Require */);
        }
        if (value === true) {
            if (options.message) {
                // 更新form错误信息
                // 不是grid，则认为是卡片
                if (!domInfo.isGridComponent) {
                    var message = options.message.replace(/\$property/g, domInfo.propertyName);
                    var formErrors = this.buildFormErrors(domPropertyName, message);
                    var isValidValue = this.isValidValue(path, pathValue);
                    if (!isValidValue) {
                        frameContext.form.updateFormErrors(formErrors);
                    }
                }
                else {
                    this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);
                }
            }
        }
        else {
            // 返回非true值时认为非必填
            if (domInfo.isGridComponent) {
                this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);
            }
            else {
                var currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
                if (currentErrors) {
                    if (currentErrors.hasOwnProperty('require')) {
                        // require合法，移除require校验提示
                        delete currentErrors.require;
                    }
                    frameContext.form.updateFormErrors((_a = {}, _a[domPropertyName] = { errors: currentErrors }, _a));
                }
                else {
                    var formErrors = this.buildFormErrors(domPropertyName, null);
                    frameContext.form.updateFormErrors(formErrors);
                }
            }
        }
    };
    RequiredEffector.prototype.updateColumnValidators = function (frameContext, field, datagridColumns, isRequired) {
        var frameId = frameContext.frameId;
        var componentRefs = frameContext.appContext.componentManager.get([frameId]);
        if (componentRefs && componentRefs.size > 0) {
            var datagrid = Array.from(componentRefs.values())[0];
            if (datagrid && typeof datagrid.updateColumn === 'function') {
                var columns = datagridColumns.find(function (array) {
                    return array.find(function (item) { return item.field === field; });
                });
                var column = columns && columns.find(function (item) { return item.field === field; }) || null;
                if (column) {
                    var validators = column.validators || [];
                    var index = validators.findIndex(function (item) { return item.type === 'required'; });
                    if (isRequired) {
                        if (index === -1) {
                            validators.push({ "type": "required", "message": "该字段不能为空！" });
                        }
                    }
                    else {
                        if (index !== -1) {
                            validators.splice(index, 1);
                        }
                    }
                    datagrid.updateColumn(field, { validators: tslib_1.__spread(validators) });
                    datagrid.columnsChanged();
                }
            }
        }
    };
    RequiredEffector.prototype.getDomInfoByEntityPath = function (entityPath) {
        var e_1, _a, e_2, _b;
        var result = null;
        if (!entityPath) {
            return result;
        }
        entityPath = entityPath.split('/').filter(function (p) { return p; }).join('.');
        var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
        if (frameContexts && frameContexts.length > 0) {
            try {
                for (var frameContexts_1 = tslib_1.__values(frameContexts), frameContexts_1_1 = frameContexts_1.next(); !frameContexts_1_1.done; frameContexts_1_1 = frameContexts_1.next()) {
                    var frameContext = frameContexts_1_1.value;
                    if (result) {
                        break;
                    }
                    if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                        var keys = Object.keys(frameContext.form.ngFormControls);
                        try {
                            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                                var propertyName = keys_1_1.value;
                                var ngFormControl = frameContext.form.ngFormControls[propertyName];
                                var bindingPath = frameContext.viewModel.bindingPath || '/';
                                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                                var bindings = ngFormControl.binding.split('.');
                                bindings = bindingPaths.concat(bindings);
                                if (entityPath === bindings.join('.')) {
                                    // 判断对应的组件是什么类型
                                    var dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                                    var dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                                    if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                        var isEditableGrid = dgColumnInfo.find(function (array) {
                                            var readonlyGroup = array.every(function (column) { return !(column.hasOwnProperty('editor') && column.editor); });
                                            if (!readonlyGroup) {
                                                return true;
                                            }
                                            else {
                                                return false;
                                            }
                                        });
                                        if (!isEditableGrid) {
                                            continue;
                                        }
                                    }
                                    var isGridComponent = false;
                                    if (dgColumnNames) {
                                        isGridComponent = true;
                                    }
                                    result = {
                                        domPropertyName: propertyName,
                                        propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                        frameContext: frameContext,
                                        id: ngFormControl.id,
                                        isGridComponent: isGridComponent,
                                        binding: ngFormControl.binding,
                                        datagridColumns: dgColumnInfo
                                    };
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (keys_1_1 && !keys_1_1.done && (_b = keys_1.return)) _b.call(keys_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (frameContexts_1_1 && !frameContexts_1_1.done && (_a = frameContexts_1.return)) _a.call(frameContexts_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return result;
    };
    RequiredEffector.prototype.getDataPropInfo = function (path) {
        if (!path) {
            return null;
        }
        var paths = path.split('/').filter(function (p) { return p; });
        return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);
    };
    RequiredEffector.prototype.isValidValue = function (path, value) {
        var dataTypeInfo = this.getDataPropInfo(path);
        if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {
            // 多语字段
            var translate = this.injector.get(TranslateToken, null);
            var currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';
            if (Object.keys(value).length < 1) {
                return false;
            }
            return !!value[currentLanguage];
        }
        else if (value === null || value === '' || value === undefined) {
            return false;
        }
        return true;
    };
    RequiredEffector.prototype.buildFormErrors = function (domPropertyName, message) {
        var _a, _b;
        if (message) {
            return _a = {},
                _a[domPropertyName] = {
                    errors: {
                        'require': {
                            name: message
                        }
                    }
                },
                _a;
        }
        else {
            return _b = {},
                _b[domPropertyName] = {
                    errors: {}
                },
                _b;
        }
    };
    RequiredEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RequiredEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: FrameContext }
    ]; };
    return RequiredEffector;
}());
export { RequiredEffector };
//# sourceMappingURL=data:application/json;base64,