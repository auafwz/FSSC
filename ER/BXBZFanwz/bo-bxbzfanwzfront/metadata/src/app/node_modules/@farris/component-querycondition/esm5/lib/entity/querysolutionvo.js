/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { QueryConditionConvert } from "./querycondition";
/**
 * 查询方案实体类
 */
var /**
 * 查询方案实体类
 */
QuerySolutionVo = /** @class */ (function () {
    function QuerySolutionVo() {
        /**
         * 是否默认查询方案
         * 初始时，为false
         */
        this.isDefault = false;
        this.isChanged = false;
    }
    return QuerySolutionVo;
}());
/**
 * 查询方案实体类
 */
export { QuerySolutionVo };
if (false) {
    /**
     * 唯一性标识
     * @type {?}
     */
    QuerySolutionVo.prototype.id;
    /**
     * 所属ID，例如所属表单ID
     * @type {?}
     */
    QuerySolutionVo.prototype.belongId;
    /**
     * 查询方案编号
     * @type {?}
     */
    QuerySolutionVo.prototype.code;
    /**
     * 查询方案名称
     * @type {?}
     */
    QuerySolutionVo.prototype.name;
    /**
     * 查询条件
     * @type {?}
     */
    QuerySolutionVo.prototype.queryConditions;
    /**
     * 是否系统预置查询方案
     * @type {?}
     */
    QuerySolutionVo.prototype.isSystem;
    /**
     * 是否默认查询方案
     * 初始时，为false
     * @type {?}
     */
    QuerySolutionVo.prototype.isDefault;
    /** @type {?} */
    QuerySolutionVo.prototype.isChanged;
    /**
     * 类型： pre是上次查询
     * @type {?}
     */
    QuerySolutionVo.prototype.type;
}
/**
 * 查询方案实体类序列化与反序列化器
 */
var /**
 * 查询方案实体类序列化与反序列化器
 */
QuerySolutionVoConvertor = /** @class */ (function () {
    function QuerySolutionVoConvertor() {
    }
    /**
     * 序列化
     * @param obj 查询方案实体
     */
    /**
     * 序列化
     * @param {?} obj 查询方案实体
     * @return {?}
     */
    QuerySolutionVoConvertor.prototype.convertJObject = /**
     * 序列化
     * @param {?} obj 查询方案实体
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var querySolutionVo = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        jobj["id"] = querySolutionVo.id;
        jobj["belongId"] = querySolutionVo.belongId;
        jobj["code"] = querySolutionVo.code;
        jobj["name"] = querySolutionVo.name;
        jobj["isSystem"] = querySolutionVo.isSystem;
        jobj["isDefault"] = querySolutionVo.isDefault;
        jobj["type"] = querySolutionVo.type;
        if (querySolutionVo.queryConditions && querySolutionVo.queryConditions.length > 0) {
            /** @type {?} */
            var jArray_1 = [];
            /** @type {?} */
            var convertor_1 = new QueryConditionConvert();
            querySolutionVo.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                jArray_1.push(convertor_1.convertJObject(element));
            }));
            //向服务端发送数据时，发送query condition list的json string
            jobj["queryConditionString"] = JSON.stringify(jArray_1);
        }
        return jobj;
    };
    /**
     * 反序列化(初始化)
     * @param jobj 查询方案序列化后的Object
     */
    /**
     * 反序列化(初始化)
     * @param {?} jobj 查询方案序列化后的Object
     * @return {?}
     */
    QuerySolutionVoConvertor.prototype.initFromJobject = /**
     * 反序列化(初始化)
     * @param {?} jobj 查询方案序列化后的Object
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var querySolutionVo = new QuerySolutionVo();
        querySolutionVo.id = jobj["id"];
        querySolutionVo.code = jobj["code"];
        querySolutionVo.name = jobj["name"];
        querySolutionVo.belongId = jobj["belongId"];
        querySolutionVo.isSystem = jobj["isSystem"];
        querySolutionVo.isDefault = jobj["isDefault"];
        querySolutionVo.type = jobj.hasOwnProperty('type') ? jobj["type"] : '';
        querySolutionVo.queryConditions = new Array();
        //服务器端返回的query condition list实际是 json string
        /** @type {?} */
        var queryConditionString = jobj["queryConditionString"];
        if (queryConditionString) {
            /** @type {?} */
            var conditionJarry = JSON.parse(queryConditionString);
            /** @type {?} */
            var convertor_2 = new QueryConditionConvert();
            conditionJarry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                querySolutionVo.queryConditions.push(convertor_2.initFromJobject(element));
            }));
        }
        return querySolutionVo;
    };
    /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     */
    /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    QuerySolutionVoConvertor.prototype.formatFromJobject = /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var queryConditions = new Array();
        /** @type {?} */
        var conditionJarry;
        if (typeof jobj == 'string') {
            conditionJarry = JSON.parse(jobj);
        }
        else {
            conditionJarry = jobj;
        }
        /** @type {?} */
        var convertor = new QueryConditionConvert();
        conditionJarry.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            queryConditions.push(convertor.initFromJobject(element));
        }));
        return queryConditions;
    };
    /**
     * 存入缓存中
     * 从大写转换到小写条件
     */
    /**
     * 存入缓存中
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    QuerySolutionVoConvertor.prototype.formatConvertJObject = /**
     * 存入缓存中
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var queryConditions = [];
        /** @type {?} */
        var convertor = new QueryConditionConvert();
        jobj.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            queryConditions.push(convertor.convertJObject(element));
        }));
        return queryConditions;
    };
    return QuerySolutionVoConvertor;
}());
/**
 * 查询方案实体类序列化与反序列化器
 */
export { QuerySolutionVoConvertor };
//# sourceMappingURL=data:application/json;base64,