/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-30 16:08:56
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { DatagridComponent } from './../../datagrid.component';
import { Component, Input, ViewChild, ElementRef, Injector, Inject, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DatagridFacadeService } from './../../services/datagrid-facade.service';
import { filter, map } from 'rxjs/operators';
export class DatagridCheckboxComponent {
    /**
     * @param {?} injector
     * @param {?} dg
     */
    constructor(injector, dg) {
        this.injector = injector;
        this.dg = dg;
        this.indeterminate = false;
        this.checked$ = null;
        this.subscriptions = [];
        this.dfs = this.injector.get(DatagridFacadeService);
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.indeterminate) {
            this.chk.nativeElement.indeterminate = true;
        }
        this.listenSubjects();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.checked && !changes.checked.isFirstChange()) {
            this.changeCheckedStatus(changes.checked.currentValue);
        }
    }
    /**
     * @private
     * @return {?}
     */
    listenSubjects() {
        /** @type {?} */
        const rid = this.dfs.primaryId(this.rowData);
        this.subscriptions.push(this.dg.checkAll.subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let flag = true;
            if (this.dg.disableRow) {
                flag = !this.dg.disableRow(this.rowData, this.rowIndex);
                if (!flag) {
                    flag = this.dg.dfs.isRowChecked(rid);
                }
            }
            this.changeCheckedStatus(flag);
        })));
        this.subscriptions.push(this.dg.unCheckAll.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e && e.length) {
                if (e.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.dg.idField] === this.rowData[this.dg.idField]))) {
                    this.changeCheckedStatus(false);
                }
            }
            else {
                this.changeCheckedStatus(false);
            }
        })));
        /** @type {?} */
        const _setcheckrows = this.dg.dgs.setCheckedRows.pipe(filter((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            return r.ids.includes(rid) || r.ids.includes('' + rid);
        })), map((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            /** @type {?} */
            const flag = r.ids.includes(rid) || r.ids.includes('' + rid);
            if (flag) {
                return flag && r.checked;
            }
            return false;
        }))).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            this.checked = r;
            this.changeCheckedStatus(r);
        }));
        this.subscriptions.push(_setcheckrows);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.unsubscribe()));
            this.subscriptions = [];
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        if (!this.disabled) {
            /** @type {?} */
            const beforEventParam = {
                rowIndex: this.rowIndex,
                rowData: this.rowData,
                gridInstance: this.dg
            };
            this.dg.endCellEdit();
            /** @type {?} */
            const _checked = this.chk.nativeElement.checked;
            if (!_checked) {
                this.dg.beforeCheck(beforEventParam).subscribe((/**
                 * @param {?} canCheck
                 * @return {?}
                 */
                (canCheck) => {
                    if (canCheck) {
                        this.dfs.checkRow(this.rowIndex, this.rowData);
                        this.checked = true;
                        this.changeCheckedStatus(true);
                    }
                }));
            }
            else {
                this.dg.beforeUncheck(beforEventParam).subscribe((/**
                 * @param {?} canUncheck
                 * @return {?}
                 */
                (canUncheck) => {
                    if (canUncheck) {
                        this.dfs.unCheckRow(this.rowIndex, this.rowData);
                        this.checked = false;
                        this.changeCheckedStatus(false);
                        if (this.dg.showSelectedList) {
                            this.dg.cd.detectChanges();
                        }
                    }
                }));
            }
            // this.checked = !this.checked;
            // this.cd.detectChanges();
        }
        event.stopPropagation();
    }
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    changeCheckedStatus(status) {
        this.chk.nativeElement.checked = status;
    }
}
DatagridCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-checkbox',
                template: ` <div class="custom-control custom-checkbox f-checkradio-single">
        <input type="checkbox" #chk class="custom-control-input" [disabled]="disabled" [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div>`,
                styles: [`
        :host {
            vertical-align: middle;
        }
        :host .custom-checkbox {
            opacity: 1;
            float: none;
            top: 2px;
        }
        `]
            }] }
];
/** @nocollapse */
DatagridCheckboxComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] }
];
DatagridCheckboxComponent.propDecorators = {
    rowData: [{ type: Input }],
    rowIndex: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    indeterminate: [{ type: Input }],
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    DatagridCheckboxComponent.prototype.rowData;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.rowIndex;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.chk;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.cd;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.checked$;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.injector;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,