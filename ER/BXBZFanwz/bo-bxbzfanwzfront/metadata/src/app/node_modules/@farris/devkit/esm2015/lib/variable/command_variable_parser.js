/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { Injectable } from '@angular/core';
import { CommandContext } from '../command/index';
/**
 * 命令变量解析
 * {COMMAND~/params/key}
 * {COMMAND~/results/taskName}
 */
class CommandVariableParser {
    /**
     * 构造函数
     */
    constructor() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    parse(expression, context) {
        const paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(path => {
            const searchValue = `{COMMAND~${path}}`;
            const replaceValue = this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    }
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        const UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
        uiStateVariables.forEach(sessionVariable => {
            const pathMatches = sessionVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取UIState
     */
    getValue(path, context) {
        if (context instanceof CommandContext === false) {
            throw new Error('当前上下文不支持COMMAND变量，请检查！');
        }
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const [type, name] = parts;
        if (type === 'params') {
            return context.command.params[name];
        }
        else if (type === 'results') {
            return context.results[name];
        }
    }
}
CommandVariableParser.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandVariableParser.ctorParameters = () => [];
export { CommandVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS9jb21tYW5kX3ZhcmlhYmxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdsRDs7OztHQUlHO0FBQ0gsTUFDTSxxQkFBcUI7SUFFekI7O09BRUc7SUFDSDtJQUNBLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLFVBQWtCLEVBQUUsT0FBWTtRQUMzQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTVDLGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFVBQVUsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ2hFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekM7UUFFRCxlQUFlO1FBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsRUFBRTtZQUNwQixNQUFNLFdBQVcsR0FBRyxZQUFZLElBQUksR0FBRyxDQUFDO1lBQ3hDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xELFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQVEsVUFBVSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSyxZQUFZLENBQUMsVUFBa0I7UUFDckMsTUFBTSxLQUFLLEdBQWMsRUFBRSxDQUFDO1FBRTVCLG9CQUFvQjtRQUNwQixNQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQ2pELE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlELElBQUksZ0JBQWdCLEtBQUssSUFBSSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsTUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztRQUM5QyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUUsZUFBZSxDQUFDLEVBQUU7WUFDMUMsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzVELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSyxRQUFRLENBQUMsSUFBWSxFQUFFLE9BQVk7UUFDekMsSUFBSSxPQUFPLFlBQVksY0FBYyxLQUFLLEtBQUssRUFBRTtZQUMvQyxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7UUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ3BELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JDO2FBQU0sSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQzdCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7OztZQTNFRixVQUFVOzs7O0FBOEVYLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIHNlc3Npb27lj5jph4/op6PmnpBcclxuICogQGF1dGhvciBXaXR0IDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tYW5kQ29udGV4dCB9IGZyb20gJy4uL2NvbW1hbmQvaW5kZXgnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuXHJcbi8qKlxyXG4gKiDlkb3ku6Tlj5jph4/op6PmnpBcclxuICoge0NPTU1BTkR+L3BhcmFtcy9rZXl9XHJcbiAqIHtDT01NQU5Efi9yZXN1bHRzL3Rhc2tOYW1lfVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDb21tYW5kVmFyaWFibGVQYXJzZXIgaW1wbGVtZW50cyBWYXJpYWJsZVBhcnNlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOino+aekOWPmOmHj1xyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOWPmOmHj++8muagvOW8j+W9ouWmgu+8mi9mcmFtZUlkL2NvbXBvbmVudElkL3N0YXRlTmFtZVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IOS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJzZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCBwYXRocyA9IHRoaXMuZXh0cmFjdFBhdGhzKGV4cHJlc3Npb24pO1xyXG5cclxuICAgIC8vIDHjgIHljZXkuKrnmoTooajovr7lvI/vvJrnm7TmjqXmsYLlgLxcclxuICAgIGlmIChwYXRocy5sZW5ndGggPT09IDEgJiYgZXhwcmVzc2lvbiA9PT0gYHtDT01NQU5EfiR7cGF0aHNbMF19fWApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUocGF0aHNbMF0sIGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDLjgIHlhbbku5bmg4XlhrXvvJrlrZfnrKbkuLLmm7/mjaJcclxuICAgIHBhdGhzLmZvckVhY2goIHBhdGggPT4ge1xyXG4gICAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IGB7Q09NTUFORH4ke3BhdGh9fWA7XHJcbiAgICAgIGNvbnN0IHJlcGxhY2VWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUocGF0aCwgY29udGV4dCk7XHJcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gIGV4cHJlc3Npb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmj5Dlj5ZTZXNzaW9u5Y+Y6YeP5ZCNXHJcbiAgICog5Y+Y6YeP5qC85byP77yae31cclxuICAgKi9cclxuICBwcml2YXRlIGV4dHJhY3RQYXRocyhleHByZXNzaW9uOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gID0gW107XHJcblxyXG4gICAgLy8g5p+l5om+5omA5pyJ55qEdWlTdGF0ZeWPmOmHj+Wtl+espuS4slxyXG4gICAgY29uc3QgVUlfU1RBVEVfUEFUVEVSTl9HID0gL1xce0NPTU1BTkR+KFxcUys/KVxcfS9nO1xyXG4gICAgY29uc3QgdWlTdGF0ZVZhcmlhYmxlcyA9IGV4cHJlc3Npb24ubWF0Y2goVUlfU1RBVEVfUEFUVEVSTl9HKTtcclxuICAgIGlmICh1aVN0YXRlVmFyaWFibGVzID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmj5Dlj5blkI7ovrnnmoTot6/lvoRcclxuICAgIGNvbnN0IFVJX1NUQVRFX1BBVFRFUk4gPSAvXFx7Q09NTUFORH4oXFxTKz8pXFx9LztcclxuICAgIHVpU3RhdGVWYXJpYWJsZXMuZm9yRWFjaCggc2Vzc2lvblZhcmlhYmxlID0+ICB7XHJcbiAgICAgIGNvbnN0IHBhdGhNYXRjaGVzID0gc2Vzc2lvblZhcmlhYmxlLm1hdGNoKFVJX1NUQVRFX1BBVFRFUk4pO1xyXG4gICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBwYXRocy5wdXNoKHBhdGhNYXRjaGVzWzFdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhdGhzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WVUlTdGF0ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0VmFsdWUocGF0aDogc3RyaW5nLCBjb250ZXh0OiBhbnkpIHtcclxuICAgIGlmIChjb250ZXh0IGluc3RhbmNlb2YgQ29tbWFuZENvbnRleHQgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign5b2T5YmN5LiK5LiL5paH5LiN5pSv5oyBQ09NTUFOROWPmOmHj++8jOivt+ajgOafpe+8gScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwYXJ0OiBzdHJpbmcpID0+IHtcclxuICAgICAgcmV0dXJuIHBhcnQgIT09ICcnO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgW3R5cGUsIG5hbWVdID0gcGFydHM7XHJcbiAgICBpZiAodHlwZSA9PT0gJ3BhcmFtcycpIHtcclxuICAgICAgcmV0dXJuIGNvbnRleHQuY29tbWFuZC5wYXJhbXNbbmFtZV07XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZXN1bHRzJykge1xyXG4gICAgICByZXR1cm4gY29udGV4dC5yZXN1bHRzW25hbWVdO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZFZhcmlhYmxlUGFyc2VyIH07XHJcbiJdfQ==