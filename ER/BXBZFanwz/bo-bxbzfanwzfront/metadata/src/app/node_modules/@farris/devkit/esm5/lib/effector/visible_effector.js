import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, NAMESPACE } from '../frame/index';
import { Repository } from '../repository/index';
import { ExpressionUtil } from '../utils/expression_util';
var VisibleEffector = /** @class */ (function () {
    function VisibleEffector(injector, namespace, frameContext, repository) {
        this.injector = injector;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.repository = repository;
        this.ns = namespace;
    }
    VisibleEffector.prototype.effect = function (path, value, options) {
        // 由匿名函数接管，ignore
        var paths = path.split('/').filter(function (p) { return p; });
        var bindingPaths = this.getTablePaths(paths);
        var bindingPath = bindingPaths.join('/');
        // 主表显隐无需处理
        if (bindingPaths && bindingPaths.length > 0) {
            var isGridComponent = this.isGridComponent(bindingPath);
            if (isGridComponent) {
                var datagridComponent = this.getDatagridComponent(bindingPath);
                if (datagridComponent) {
                    // 更新列信息
                    // datagridComponent.columnsChanged();
                    var fieldPaths = this.getPropertyPaths(paths);
                    if (fieldPaths) {
                        var field = fieldPaths.join('.');
                        if (value) {
                            datagridComponent.showColumn(field);
                        }
                        else {
                            datagridComponent.hideColumn(field);
                        }
                    }
                }
            }
        }
        else {
            var datagridComponent = this.getDatagridComponent(bindingPath);
            if (datagridComponent) {
                datagridComponent.columnsChanged();
            }
        }
    };
    VisibleEffector.prototype.getTablePaths = function (paths) {
        var entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return entityPaths;
    };
    VisibleEffector.prototype.getDatagridComponent = function (bindingPath) {
        var _this = this;
        var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];
        var matchedFrameContexts = frameContexts.filter(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString() === bindingPath.split('/').filter(function (p) { return p; }).toString(); });
        var result = null;
        if (matchedFrameContexts) {
            matchedFrameContexts.every(function (frameContext) {
                var frameId = frameContext.frameId;
                var componentsMap = _this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                if (!componentsMap) {
                    return true;
                }
                var datagridComponent = Array.from(componentsMap.values()).find(function (component) { return component && component['__component_type__'] === 'DatagridComponent'; });
                if (datagridComponent) {
                    result = datagridComponent;
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        return result;
    };
    VisibleEffector.prototype.getPropertyPaths = function (paths) {
        var tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return paths.slice(tablePaths.length);
    };
    VisibleEffector.prototype.isGridComponent = function (bindingPath) {
        var frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];
        var frameContext = frameContexts.find(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString() === bindingPath.split('/').filter(function (p) { return p; }).toString(); });
        if (frameContext) {
            return !!frameContext.viewModel['dataGridColumnsName'];
        }
        else {
            return false;
        }
    };
    VisibleEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VisibleEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: FrameContext },
        { type: Repository }
    ]; };
    return VisibleEffector;
}());
export { VisibleEffector };
//# sourceMappingURL=data:application/json;base64,