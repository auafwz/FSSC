import { switchMap, map } from 'rxjs/operators';
import { of } from 'rxjs';
import { Component, ViewEncapsulation, ChangeDetectorRef, Injector, Input, Output, ViewChild, EventEmitter, HostBinding, HostListener, InjectionToken, Injectable, ComponentFactoryResolver, ApplicationRef, Directive, NgZone, Renderer2, ElementRef, NgModule } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { __spread, __assign } from 'tslib';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { cloneDeep } from 'lodash-es';
import { IdService, FarrisCommonModule } from '@farris/ui-common';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { GRID_SETTINGS_SERVICE } from '@farris/ui-datagrid';
import { constants, smoothDnD, dropHandlers } from '@farris/smooth-dnd';
import { ComboListModule } from '@farris/ui-combo-list';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridSettingsComponent = /** @class */ (function () {
    function DatagridSettingsComponent(cd, inject) {
        this.cd = cd;
        this.inject = inject;
        this.activeTabIndex = 1;
        /**
         * 排序列数据
         */
        this.sortTreeData = [];
        this.sortNames = [];
        this.sortInfo = {};
        /**
         * 显示列数据
         */
        this.viewTreeData = [];
        this.viewColumns = [];
        this.columnFormat = [];
        this.groupFields = [];
        this.canSetColumnSort = true;
        this.canSetColumnVisible = true;
        this.enableReset = false;
        this.cancelHandle = new EventEmitter();
        this.submitHandle = new EventEmitter();
        this.reset = new EventEmitter();
        this.concise = new EventEmitter();
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.messager = this.inject.get(MessagerService, null);
        this.localeSer = this.inject.get(LocaleService);
        this.searchItems = [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
        this.alignItems = [
            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
        ];
        this.summaryItems = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.summaryItems2 = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
    }
    /**
     * @return {?}
     */
    DatagridSettingsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
        this.viewColumns = this.getViewColumns();
        this.sortInfo = this.gridInstance['__sortInfo'] || {};
        this.columnFormat = __spread(this.columns[0]);
        this.groupFields = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridSettingsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && !changes.columns.isFirstChange()) ;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.close = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.modalRef) {
            this.modalRef.close();
        }
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    DatagridSettingsComponent.prototype.changeTabs = /**
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        this.activeTabIndex = idx;
    };
    /**
     * @param {?} sortInfo
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSortInfoChange = /**
     * @param {?} sortInfo
     * @return {?}
     */
    function (sortInfo) {
        this.sortInfo = sortInfo;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.getViewColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 多表头
        /** @type {?} */
        var visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                visibleCls = visibleCls.concat(_this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return (n.visible || n.visible === undefined); }));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsComponent.prototype._getViewColumns = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
    };
    /**
     * @param {?} colFormatData
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onColumnFormatChange = /**
     * @param {?} colFormatData
     * @return {?}
     */
    function (colFormatData) {
        this.columnFormat = colFormatData;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSubmitClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.submitHandle.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onCancelClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.cancelHandle.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.onSettingReset = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        // this.reset.emit($event);
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.reset2Default();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSettingsComponent.prototype.reset2Default = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            var newColumns_1 = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = _this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = __assign({}, c.footer || {});
                        col.groupFooter = __assign({}, c.groupFooter || {});
                        newColumns_1.push(col);
                    }
                }
            }));
            this.columns = [newColumns_1];
        }
        this.viewColumns = this.getViewColumns();
        if (options.sort) {
            /** @type {?} */
            var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        }
        else {
            this.sortNames = [];
            this.sortInfo = {};
        }
        this.columnFormat = __spread(this.columns[0]);
        this.groupFields = options.groupField ? options.groupField.split(',') : [];
    };
    /** 显示简洁模式窗口 */
    /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    DatagridSettingsComponent.prototype.showConcise = /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.concise.emit();
    };
    DatagridSettingsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-settings',
                    template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\">\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs(1)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.visible' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"canSetColumnSort\"\r\n                        [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs(2)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.sortting' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 3\" *ngIf=\"gridInstance?.groupRows\"\r\n                        (click)=\"changeTabs(3)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px; display: block;\">\r\n                            {{'datagrid.settings.groupping' | locale}}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\"\r\n                (formatChange)=\"onColumnFormatChange($event)\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [(groupFields)]=\"groupFields\" [fields]=\"viewColumns\" [columns]=\"columns\"\r\n                [(formatColumns)]=\"columnFormat\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n\n        .f-datagrid-settings .header {\n            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px\n        }\n\n        .f-datagrid-settings .header .title {\n            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;\n        }\n        .f-datagrid-settings .header .tabs {\n            height: 32px;\n            top: 12px; font-size: 14px;\n            position: relative;\n            line-height: 32px;\n        }\n        .f-datagrid-settings .header .tabs .tabs-labels {\n            background: #EFF5FF;border-radius: 17px;color:#6080AD\n        }\n\n        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {\n            line-height: 28px;\n            margin: 2px;\n            height: 28px;\n            background: rgb(246 250 255);\n            border-radius: 15px;\n            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)\n        }\n        .f-datagrid-settings .header .close {\n            line-height: 56px;padding: 0;width: 20px\n        }\n        .f-datagrid-settings .tabs-container {\n            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;\n        }\n        .f-datagrid-settings .buttons\n        {\n            height: 66px;text-align: right;padding: 14px 24px 20px 24px;\n        }\n\n        .f-datagrid-settings .buttons button {\n            width: 66px;height: 32px;\n        }\n        .f-datagrid-settings .buttons .cancel {\n            margin-left: 12px;margin-right: 8px;\n        }\n        .f-datagrid-settings .buttons .ok {\n            width: 100px;\n        }\n\n        .f-datagrid-settings .dg-column-format-setting>div{\n            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA\n        }\n\n        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{\n            margin-right: 5px; font-size: 14px;color: #0089FF;\n        }\n\n        .f-datagrid-settings  .column-group-setting .title{\n            height: 36px; line-height: 36px; color: #59a1ff\n        }\n\n        .f-datagrid-settings  .column-group-setting .all-fields {\n            background-color:#fff;padding-top: 0px!important;\n        }\n\n        .f-datagrid-settings  .column-group-setting .group-sum-fields {\n            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff\n        }\n\n\n        .smooth-dnd-ghost.format-setting-column {\n            border: 1px solid #2a87ff;\n            z-index: 999999999 !important;\n            background-color: #e7f1ff;;\n            padding: 4px 8px;\n            color: rgb(0 0 0);\n        }\n\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\n            float: right;\n        }\n\n        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {\n            background-color: #dee1ea;\n        }\n        .dg-column-format-setting .format-setting-column {\n            background: #fafbfd;\n            padding: 4px 8px;\n            margin-bottom: 5px;\n            border: 1px solid #f2f4f8;\n            border-radius: 5px;\n        }\n        .dg-column-format-setting .format-setting-column.active {\n            color: rgb(0 0 0);\n            border: 1px solid #2a87ff;\n            background: #e7f1ff;\n            border-top: 1px solid #2a87ff!important;\n            border-bottom: 1px solid #2a87ff!important;\n        }\n\n        .dg-column-format-setting .format-setting-column .field-drag-handle{\n            float: right;\n            cursor: grab;\n        }\n\n        .dg-column-format-setting .format-setting-column .field-drag-handle:active{\n            cursor: grabbing;\n        }\n\n        "]
                }] }
    ];
    /** @nocollapse */
    DatagridSettingsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    DatagridSettingsComponent.propDecorators = {
        enableReset: [{ type: Input }],
        columns: [{ type: Input }],
        cancelHandle: [{ type: Output }],
        submitHandle: [{ type: Output }],
        reset: [{ type: Output }],
        concise: [{ type: Output }],
        header: [{ type: ViewChild, args: ['header',] }]
    };
    return DatagridSettingsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SimpleColumnsComponent = /** @class */ (function () {
    function SimpleColumnsComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.seartTypes = [];
        /**
         * 所有列
         */
        this.columns = [];
        /**
         * 显示的列
         */
        this.fields = [];
        /**
         * 点击侧边样式以外的区域隐藏面板。默认为 true
         */
        this.clickToHidden = true;
        this.top = 0;
        this.cls = 'f-datagrid-settings-simple-host';
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.submit = new EventEmitter();
        this.closed = new EventEmitter();
        this.advanced = new EventEmitter();
        this.allCols = [];
        this.columnType = 'all';
        this.isEn = false;
        this.settings = {};
        this.localeSer = this.injector.get(LocaleService, null);
        this.messager = this.injector.get(MessagerService, null);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // console.log($event);
        $event.stopPropagation();
        /** @type {?} */
        var clsname = $event.target['className'] || '';
        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {
            // 隐藏侧边栏；
            if (this.clickToHidden) {
                this.close();
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onEscKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.close();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onEnterKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.onSubmitClick();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onControlGKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.ctrlKey && !document.querySelector('modal-container')) {
            $event.preventDefault();
            $event.stopPropagation();
            if ($event.key.toLowerCase() === 'g') {
                this.showAdvanced($event);
            }
            else if ($event.key.toLowerCase() === 'r') {
                this.onSettingReset();
            }
            else if ($event.key.toLowerCase() === 's') {
                this.searchInput.nativeElement.focus();
            }
        }
    };
    /**
     * @return {?}
     */
    SimpleColumnsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.allCols = this.columns[0];
        this.fields = this.getViewColumns();
        this.container.nativeElement.focus();
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.getViewColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 多表头
        /** @type {?} */
        var visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                visibleCls = visibleCls.concat(_this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return (n.visible || n.visible === undefined); }));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    SimpleColumnsComponent.prototype._getViewColumns = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
    };
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?} ct
     * @param {?=} searchWords
     * @return {?}
     */
    SimpleColumnsComponent.prototype.filterColumns = 
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?} ct
     * @param {?=} searchWords
     * @return {?}
     */
    function (ct, searchWords) {
        var _this = this;
        if (searchWords === void 0) { searchWords = ''; }
        /** @type {?} */
        var cols = [];
        switch (ct) {
            case 'visible':
                cols = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return _this.fields.indexOf(n.field) > -1; }));
                break;
            case 'hidden':
                cols = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return _this.fields.indexOf(n.field) === -1; }));
                break;
            case 'all':
            default:
                cols = this.columns[0];
                break;
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.title.toLowerCase().indexOf(searchWords) > -1; }));
        }
        this.allCols = cols;
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onFieldsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        this.fieldsChange.emit(this.fields);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onDblClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        // console.log('显示与隐藏切换事件', col);
        this.onCheckboxClick($event, col);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onCheckboxClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        var _this = this;
        // console.log('显示与隐藏切换事件', col);
        $event.stopPropagation();
        /** @type {?} */
        var index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            f.visible = _this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.onFieldsChanged();
    };
    /**
     * @param {?} $event
     * @param {?} ct
     * @return {?}
     */
    SimpleColumnsComponent.prototype.searchColumn = /**
     * @param {?} $event
     * @param {?} ct
     * @return {?}
     */
    function ($event, ct) {
        /** @type {?} */
        var txt = $event.target.value;
        this.filterColumns(ct, txt);
    };
    /**
     * @param {?} fieldInfo
     * @param {?} ct
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onFieldDrop = /**
     * @param {?} fieldInfo
     * @param {?} ct
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    function (fieldInfo, ct, txt, ulElRef) {
        var _a;
        // console.log('drop', fieldInfo);
        var removedIndex = fieldInfo.removedIndex, addedIndex = fieldInfo.addedIndex;
        /** @type {?} */
        var moveItem = this.allCols[removedIndex];
        /** @type {?} */
        var targetItem = this.allCols[addedIndex];
        /** @type {?} */
        var moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === moveItem.field; }));
        /** @type {?} */
        var targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === targetItem.field; }));
        /** @type {?} */
        var removedItem = this.columns[0].splice(moveItemIndex, 1);
        (_a = this.columns[0]).splice.apply(_a, __spread([targetItemIndex, 0], removedItem));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
    };
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     */
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.getCheckAllState = /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    function () {
        if (this.fields.length === 0) {
            return 0;
        }
        else {
            if (this.fields.length === this.columns[0].length) {
                return 1;
            }
            return 2;
        }
    };
    /**
     * @param {?} $event
     * @param {?} ct
     * @param {?} txt
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onCheckAllClick = /**
     * @param {?} $event
     * @param {?} ct
     * @param {?} txt
     * @return {?}
     */
    function ($event, ct, txt) {
        /** @type {?} */
        var state = this.getCheckAllState();
        if (state === 0 || state === 2) {
            // 执行全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible = true; }));
            this.fields = this.columns[0].map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
        }
        else {
            // 取消全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible = false; }));
            this.fields = [];
        }
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.close = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.closed.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.showAdvanced = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.close($event);
        this.advanced.emit();
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onSettingReset = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.reset2Default();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.reset2Default = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            var newColumns_1 = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = _this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = __assign({}, c.footer || {});
                        col.groupFooter = __assign({}, c.groupFooter || {});
                        newColumns_1.push(col);
                    }
                }
            }));
            this.columns = [newColumns_1];
        }
        this.allCols = this.columns[0];
        this.fields = this.getViewColumns();
        this.settings.viewColumns = this.fields;
        this.settings.columnFormat = __spread(this.columns[0]);
        if (options.sort) {
            /** @type {?} */
            var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            /** @type {?} */
            var sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
        }
        else {
            this.settings.sortInfo = {};
        }
        this.settings.groupFields = options.groupField ? options.groupField.split(',') : [];
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onSubmitClick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.settings.viewColumns = this.fields;
        this.settings.columnFormat = __spread(this.columns[0]);
        if (!this.settings.sortInfo) {
            this.settings.sortInfo = {
                sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
            };
        }
        if (this.settings.groupFields === undefined) {
            this.settings.groupFields = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
        }
        this.submit.emit({ content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement });
    };
    SimpleColumnsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-settings-simple',
                    template: "<div class=\"d-flex flex-column f-datagrid-settings-simple\" tabindex=\"0\" #colcontainer\r\n    [style.top.px]=\"top\" [style.height]=\"'calc(100vh - ' +  top + 'px)'\">\r\n\r\n    <div class=\"header d-flex\">\r\n        <div class=\"f-utils-fill title\"> {{ 'datagrid.settings.simple.title' | locale }} </div>\r\n        <div class=\"closed\" (click)=\"close($event)\">\r\n            <span class=\"f-icon f-icon-close\" style=\"font-size: 20px;\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-utils-fill content d-flex flex-column\">\r\n        <div>\r\n            <h5 class=\"count\" [innerHTML]=\"'datagrid.settings.simple.count' | locale | replaceX: fields.length\">\r\n            </h5>\r\n\r\n            <div class=\"tip\">\r\n                {{ 'datagrid.settings.simple.tip' | locale }}\r\n            </div>\r\n\r\n            <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\"\r\n                (input)=\"searchColumn($event, ct.selectedValues)\" style=\"height: 30px;margin-bottom: 16px;\">\r\n            <div style=\"padding: 5px 0px;background-color: #fff;\">\r\n                <button class=\"btn btn-link \" \r\n                    style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event, ct.selectedValues, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkall\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length === columns[0].length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <farris-combo-list #ct \r\n                [data]=\"seartTypes\" \r\n                [editable]=\"false\"\r\n                [ngModel]=\"'all'\" [idField]=\"'value'\"\r\n                [textField]=\"'title'\"\r\n                [enableClear]=\"false\"\r\n                (valueChange)=\"filterColumns(ct.selectedValues, inputWord.value)\"\r\n                style=\"float: right;\" [style.width.px]=\"isEn ? 120: 80\"\r\n                class=\"format-setting-searchitem\"></farris-combo-list>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"f-utils-fill\">\r\n            <ul class=\"list-group list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, ct.selectedValues, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"footer\">\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-link advanced\" (click)=\"showAdvanced($event)\">{{ 'datagrid.settings.advancedMode' | locale: '\u9AD8\u7EA7\u6A21\u5F0F' }}</button>\r\n            <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n            <button class=\"btn btn-secondary cancel\"\r\n                (click)=\"close($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n            <button class=\"btn btn-primary ok\" #okbtn\r\n                (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .f-datagrid-settings-simple {\n            position: absolute;\n            top: 100px;\n            right: 0px;\n            z-index: 10000;\n            height: calc(100vh - 100px);\n            width: 468px;\n            background: #FFFFFF;\n            border: 1px solid #E6E9F0;\n            border-radius: 10px 0 0 10px;\n        }\n\n        .f-datagrid-settings-simple:focus {\n            outline: none;\n        }\n\n        .f-datagrid-settings-simple .header {\n            height: 50px;\n            line-height: 50px;\n            border-bottom: 1px solid #EAEDF3;\n            font-size: 18px;\n            color: #2D2F33;\n        }\n        .f-datagrid-settings-simple .header .title {\n            padding-left: 21px;\n            font-weight:bold;\n        }\n        .f-datagrid-settings-simple .header .closed\n        {\n            width: 50px;\n            text-align: center;\n            cursor: pointer;\n        }\n\n        .f-datagrid-settings-simple .content .count{font-size: 14px; color: #2D2F33;}\n        .f-datagrid-settings-simple .content .tip {\n            background: #F7FAFF; border-radius: 6px;line-height: 42px; padding-left: 10px; margin-bottom: 10px;\n        }\n\n        .f-datagrid-settings-simple .content .checkall{\n            margin-left: 5px;\n            font-size: 14px;\n            color: #0089FF;\n            margin-right: 5px;\n        }\n\n        .f-datagrid-settings-simple .content {\n            margin: 20px 24px;\n        }\n\n        .f-datagrid-settings-simple .footer {\n            height: 32px;\n            margin: 20px;\n        }\n\n\n        .smooth-dnd-ghost.format-setting-column {\n            z-index: 999999999 !important;\n            padding: 4px 8px;\n            background-color: #e7f1ff;\n            border: 1px solid #2a87ff;\n        }\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\n            float: right;\n        }\n        .f-datagrid-settings-simple  .smooth-dnd-drop-preview-constant-class {\n            background-color: #dee1ea;\n        }\n        .f-datagrid-settings-simple .format-setting-column {\n            background: #fafbfd;\n            padding: 4px 8px;\n            margin-bottom: 5px;\n            border: 1px solid #f2f4f8;\n            border-radius: 5px;\n            color: #000;\n        }\n        .f-datagrid-settings-simple .format-setting-column.active {\n            border: 1px solid #2a87ff;\n            background: #e7f1ff;\n            border-top: 1px solid #2a87ff!important;\n            border-bottom: 1px solid #2a87ff!important;\n        }\n\n        .format-setting-column .checkbox{\n            font-size: 14px;\n            color: #0089FF;\n            margin-right: 5px;\n            cursor:pointer;\n        }\n\n        .f-datagrid-settings-simple .format-setting-column .field-drag-handle{\n            float: right;\n            cursor: grab;\n        }\n\n        .f-datagrid-settings-simple .format-setting-column .field-drag-handle:active{\n            cursor: grabbing;\n        }\n\n        .f-datagrid-settings-simple .list-group-flush:last-child .list-group-item:last-child {\n            border-bottom: 1px solid #f2f4f8;\n        }\n\n        .f-datagrid-settings-simple .list-group-flush:first-child .list-group-item:first-child {\n            border-top: 1px solid #f2f4f8;\n        }\n\n        .f-datagrid-settings-simple .buttons\n        {\n            text-align: right;\n        }\n\n        .f-datagrid-settings-simple .buttons button {\n            width: 66px;height: 32px;\n        }\n        .f-datagrid-settings-simple .buttons .cancel {\n            margin-left: 12px;margin-right: 8px;\n        }\n        .f-datagrid-settings-simple .buttons .ok {\n            width: 100px;\n        }\n\n        .f-datagrid-settings-simple .buttons .advanced{ width: 66px;height: 32px; float: left; }\n\n        .f-datagrid-settings-simple-host {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            z-index: 1000;\n        }\n\n        .f-datagrid-settings-simple .visible-cols-count {\n            font-size: 18px;\n            font-weight: 500;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    SimpleColumnsComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    SimpleColumnsComponent.propDecorators = {
        seartTypes: [{ type: Input }],
        columns: [{ type: Input }],
        fields: [{ type: Input }],
        clickToHidden: [{ type: Input }],
        top: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class',] }],
        container: [{ type: ViewChild, args: ['colcontainer',] }],
        btnOk: [{ type: ViewChild, args: ['okbtn',] }],
        searchInput: [{ type: ViewChild, args: ['inputWord',] }],
        formatChange: [{ type: Output }],
        fieldsChange: [{ type: Output }],
        submit: [{ type: Output }],
        closed: [{ type: Output }],
        advanced: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onEscKeydown: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
        onEnterKeydown: [{ type: HostListener, args: ['window:keydown.enter', ['$event'],] }],
        onControlGKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return SimpleColumnsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
var DatagridSettingsService = /** @class */ (function () {
    function DatagridSettingsService(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this.gridInstance = null;
        this.gridRefs = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    DatagridSettingsService.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id && this.gridRefs && this.gridRefs[id]) {
            delete this.gridRefs[id];
        }
        else {
            this.gridRefs = null;
        }
    };
    /**
     * @param {?} dg
     * @return {?}
     */
    DatagridSettingsService.prototype.registerGridInstance = /**
     * @param {?} dg
     * @return {?}
     */
    function (dg) {
        if (!dg) {
            console.log('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        var id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    };
    /**
     * @param {?} dgID
     * @return {?}
     */
    DatagridSettingsService.prototype.getGridInstance = /**
     * @param {?} dgID
     * @return {?}
     */
    function (dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    };
    /**
     * @return {?}
     */
    DatagridSettingsService.prototype.getSearchTypes = /**
     * @return {?}
     */
    function () {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    };
    /**
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.showSimple = /**
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        var _this = this;
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            var simpleRef_1 = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef_1.hostView);
            simpleRef_1.instance.columns = columns;
            simpleRef_1.instance.seartTypes = searchTypes;
            simpleRef_1.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef_1.instance.top = 76;
            }
            document.body.appendChild(simpleRef_1.location.nativeElement);
            simpleRef_1.instance.closed.subscribe((/**
             * @return {?}
             */
            function () {
                simpleRef_1.location.nativeElement.remove();
                simpleRef_1.destroy();
                simpleRef_1 = null;
            }));
            simpleRef_1.instance.advanced.subscribe((/**
             * @return {?}
             */
            function () {
                _this.showAdvanced(gridInstance);
            }));
            simpleRef_1.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.target.disabled = true;
                if (_this.saving) {
                    return;
                }
                if (!_this.saving) {
                    _this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef_1.hostView.detectChanges();
            return simpleRef_1;
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.show = /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.showAdvanced = /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        var _this = this;
        /** @type {?} */
        var _editColSortInfo = true;
        /** @type {?} */
        var editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        var showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        var getActiveTabIndex = (/**
         * @return {?}
         */
        function () {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        var activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        var viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        var modalRef = null;
        /** @type {?} */
        var okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        var cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        var resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        var defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns: columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance: gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex: activeTabIndex
            },
            showButtons: false
        };
        /** @type {?} */
        var modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.target.disabled = true;
            if (_this.saving) {
                return;
            }
            if (!_this.saving) {
                _this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
        }));
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
            _this.showSimple(gridInstance);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.canSetColumnSort = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.hasEnableSortColumns = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        function (c, r) {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    DatagridSettingsService.prototype.isHeaderGroup = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    };
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.getChilds = /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, rowIndex, colStartIndex, colCount, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var childCols = [];
        /** @type {?} */
        var _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        function (c, i) {
            /** @type {?} */
            var n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: _this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    };
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumns2TreeData = /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            c.map((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                _.colspan = _.colspan || 1;
                return _;
            }));
            return c;
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            function (c, i) {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: _this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    DatagridSettingsService.prototype.checkViewTreeNodes = /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        var _this = this;
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                _this.checkViewTreeNodes(tn.children);
            }
        }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumnsToSimple = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        // 移除设置列
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        function (_cols) {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }));
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.resetGridView = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        var dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            var options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_1 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns_1.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns_1;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    };
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    DatagridSettingsService.prototype.updateGridView = /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    function (modalRef, gridInstance, btn) {
        var _this = this;
        if (btn === void 0) { btn = null; }
        /** @type {?} */
        var settings = modalRef.content;
        if (settings) {
            /** @type {?} */
            var key = this.createConfigKey(gridInstance.id);
            var sortInfo_1 = settings.sortInfo, viewColumns_1 = settings.viewColumns, columnFormat_1 = settings.columnFormat, groupFields = settings.groupFields;
            this.saving = true;
            /** @type {?} */
            var groupField = '';
            if (gridInstance.groupRows && groupFields && groupFields.length) {
                groupField = groupFields.join(',');
            }
            gridInstance.groupField = groupField;
            this.setUserConfig(key, { sortInfo: sortInfo_1, viewColumns: viewColumns_1, groupField: groupField, columnFormat: columnFormat_1 }).subscribe((/**
             * @return {?}
             */
            function () {
                if (btn) {
                    btn.disabled = false;
                }
                _this.saving = false;
                modalRef.close();
                if (sortInfo_1 && Object.keys(sortInfo_1).length) {
                    var sortName = sortInfo_1.sortName, sortOrder = sortInfo_1.sortOrder;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                if (viewColumns_1 && viewColumns_1.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    function (cols) {
                        _this.updateColumnFormat(cols, columnFormat_1, gridInstance);
                        return _this.newVisibleOrderColumns(cols, viewColumns_1, columnFormat_1);
                    }));
                }
                gridInstance.columnsChanged(true);
            }));
        }
        else {
            modalRef.close();
        }
    };
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @return {?}
     */
    DatagridSettingsService.prototype.newVisibleOrderColumns = /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @return {?}
     */
    function (cols, viewColumns, columnFormat) {
        var _this = this;
        /** @type {?} */
        var hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (_this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_') {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        var newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === field; }));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c && c.field && c.field !== '_datagrid-setting-control_'; }));
    };
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    DatagridSettingsService.prototype.isNewAddColumn = /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    function (field, columns) {
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field === field; }));
    };
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.updateColumnFormat = /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                /** @type {?} */
                var formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.field === col.field; }));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    };
    // 创建唯一key, 由uri + gridId 组成，并混淆
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.createConfigKey = 
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            console.log('DatagridSettingService: Can not find the grid instance.');
        }
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.saveUserConfig = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            var sortName = gridInstance.sortName, sortOrder = gridInstance.sortOrder, columns = gridInstance.columns;
            if (sortName) {
                /** @type {?} */
                var sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            var viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible || n.visible === undefined; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(columns)[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return this.setUserConfig(key, config);
    };
    /**
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype.setUserConfig = /**
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        var currentConfig = localStorage.getItem(key);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype.getUserConfig = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            var config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                var con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    };
    /**
     * @param {?} gridID
     * @return {?}
     */
    DatagridSettingsService.prototype.getSettings = /**
     * @param {?} gridID
     * @return {?}
     */
    function (gridID) {
        /** @type {?} */
        var key = this.createConfigKey(gridID);
        return this.getUserConfig(key);
    };
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype._saveUserConfig = /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        try {
            /** @type {?} */
            var userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            console.error(e);
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    DatagridSettingsService.prototype.resetUserConfig = /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    function (gridInstance, modalRef) {
        var _this = this;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                /** @type {?} */
                var key = _this.createConfigKey(gridInstance.id);
                return _this.setUserConfig(key, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype._getUserConfig = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                var _a;
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    var c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[_this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[_this.localeSer.localeId];
                        }
                        else {
                            localStorage.setItem(key, JSON.stringify((_a = {}, _a[_this.localeSer.localeId] = c, _a)));
                            if (Object.keys(c).indexOf('viewColumns') > -1) {
                                return c;
                            }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            console.error(e);
        }
    };
    DatagridSettingsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridSettingsService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: IdService },
        { type: LocaleService }
    ]; };
    return DatagridSettingsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridSortSettingComponent = /** @class */ (function () {
    function DatagridSortSettingComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this.selectedIds = [];
        this.treeData = [];
        this.sortInfoChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.setFieldSortOrder = /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    function ($event, data, order) {
        $event.stopPropagation();
        data.sortable = true;
        data.order = order;
        if (!order) {
            this.ms.moveToLeft(data);
        }
        this.cd.detectChanges();
        this.onSelectionsChange(null);
        return false;
    };
    /**
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.getSortInfo = /**
     * @return {?}
     */
    function () {
        if (this.ms.selections) {
            /** @type {?} */
            var names_1 = [];
            /** @type {?} */
            var orders_1 = [];
            this.ms.selections.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                col.order = col.order || 'asc';
                names_1.push(col.field);
                orders_1.push(col.order);
            }));
            return { sortName: names_1, sortOrder: orders_1 };
        }
        return '';
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.onSelectionsChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var si = this.getSortInfo();
        this.sortInfoChange.emit(si);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSortSettingComponent.prototype.onBeforeMove = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var items = (/** @type {?} */ ($event.items));
        if ($event.target.indexOf('rightAll') > -1) {
            for (var id in items) {
                if ($event.items[id]) {
                    $event.items[id].order = 'asc';
                }
            }
        }
        else {
            if ($event.target === 'right') {
                for (var id in items) {
                    if ($event.items[id]) {
                        $event.items[id].order = 'asc';
                    }
                }
            }
        }
    };
    DatagridSortSettingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sort-setting',
                    template: "<div style=\"padding: 10px;height: 100%;\">\r\n<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" [rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (dataChange)=\"onSelectionsChange($event)\" (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\" >\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n            <!-- <span class=\"f-icon f-icon-sort-asc-sm sort-label\" title=\"\u5347\u5E8F\" *ngIf=\"data.sortable && data.order === 'asc'\"></span>\r\n            <span class=\"f-icon f-icon-sort-desc-sm  sort-label\" title=\"\u964D\u5E8F\" *ngIf=\"data.sortable && data.order === 'desc'\"></span> -->\r\n            <div class=\"d-flex\">\r\n                <div style=\"width: 120px;white-space: nowrap;min-width: 60px\">\r\n                    {{ data[textField] }} \r\n                </div>\r\n                <div class=\"farris-input-wrap  farris-checkradio-hor flex-fill\" style=\"justify-content: right;flex-wrap:nowrap\">\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" (click)=\"setFieldSortOrder($event, data, 'asc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\" data.order && data.order !== 'asc'\" [class.f-icon-check-circle]=\"!data.order || data.order === 'asc'\"></span>\r\n                        {{'datagrid.settings.asc'|locale}}\r\n                    </button>\r\n                    \r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" (click)=\"setFieldSortOrder($event, data, 'desc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\"data.order !== 'desc'\" [class.f-icon-check-circle]=\"data.order === 'desc'\"></span>\r\n                        {{'datagrid.settings.desc'|locale}}\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext sort-btns\" style=\"margin-right: 0;\" (click)=\"setFieldSortOrder($event, data, '')\" title=\"{{'datagrid.settings.cancelSort'|locale}}\">\r\n                        <span class=\"f-icon  f-icon-unsort\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    DatagridSortSettingComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    DatagridSortSettingComponent.propDecorators = {
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        selectedIds: [{ type: Input }],
        treeData: [{ type: Input }],
        ms: [{ type: ViewChild, args: ['ms',] }],
        sortInfoChange: [{ type: Output }]
    };
    return DatagridSortSettingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridViewColumnsComponent = /** @class */ (function () {
    function DatagridViewColumnsComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this._selectedIds = [];
        this.treeData = [];
        this.selectedIdsChange = new EventEmitter();
    }
    Object.defineProperty(DatagridViewColumnsComponent.prototype, "selectedIds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedIds;
        },
        set: /**
         * @param {?} vals
         * @return {?}
         */
        function (vals) {
            this._selectedIds = vals;
            this.selectedIdsChange.emit(vals);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.onBeforeMove = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
    };
    /**
     * @param {?} $event
     * @param {?} column
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.hiddenColumn = /**
     * @param {?} $event
     * @param {?} column
     * @return {?}
     */
    function ($event, column) {
        $event.stopPropagation();
        this.ms.moveToLeft(column);
    };
    DatagridViewColumnsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'view-columns',
                    template: "<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" \r\n[rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\">\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n\r\n            {{ data[textField] }} \r\n\r\n\r\n            <span class=\"sort-btns\" >\r\n                <a href=\"javascript: void(0)\" class=\" p-1\" (click)=\"hiddenColumn($event, data)\">\r\n                    <span class=\"f-icon f-icon-close\"></span>\r\n                </a>\r\n            </span>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>"
                }] }
    ];
    /** @nocollapse */
    DatagridViewColumnsComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    DatagridViewColumnsComponent.propDecorators = {
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        selectedIds: [{ type: Input }],
        treeData: [{ type: Input }],
        ms: [{ type: ViewChild, args: ['ms',] }],
        selectedIdsChange: [{ type: Output }]
    };
    return DatagridViewColumnsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnFormatSettingComponent = /** @class */ (function () {
    function ColumnFormatSettingComponent(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.columns = [];
        this.fields = [];
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.allCols = [];
        /**
         * format Data
         */
        this.formatData = [];
        this.columnType = 'all';
        this.activeField = null;
        this.showGridFooter = false;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.isEn = false;
        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&
            !this.gridSettingComponentRef.gridInstance.footerTemplate;
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.setFormatData();
            this.allCols = this.columns[0];
            this.activeField = this.columns[0][0];
            this.checkColumnOptions();
        }
    };
    /**
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isEn = this.localeSer.localeId === 'en';
        this.initData();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (!_this.colForm.pristine) {
                    _this.formatChange.emit(_this.formatData);
                }
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.setFormatData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.formatData = this.fields.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return _this.columns[0].find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.field === n; }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.initData = /**
     * @private
     * @return {?}
     */
    function () {
        this.alignItems = this.gridSettingComponentRef.alignItems;
        this.searchItems = this.gridSettingComponentRef.searchItems;
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.setFormatData();
        this.allCols = this.columns[0];
        this.activeField = this.columns[0][0];
        this.checkColumnOptions();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.checkColumnOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.activeField) {
            if (this.activeField.allowGrouping === undefined) {
                this.activeField.allowGrouping = true;
            }
            if (this.activeField.groupFooter === undefined) {
                this.activeField.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.groupFooter.options = this.activeField.groupFooter.options || { calculationType: -1 };
                if (this.activeField.groupFooter.options.calculationType === undefined) {
                    this.activeField.groupFooter.options.calculationType = -1;
                }
            }
            if (this.activeField.footer === undefined) {
                this.activeField.footer = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.footer.options = this.activeField.footer.options || { calculationType: -1 };
                if (this.activeField.footer.options.calculationType === undefined) {
                    this.activeField.footer.options.calculationType = -1;
                }
            }
        }
    };
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?} ct
     * @param {?=} searchWords
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.filterColumns = 
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?} ct
     * @param {?=} searchWords
     * @return {?}
     */
    function (ct, searchWords) {
        var _this = this;
        if (searchWords === void 0) { searchWords = ''; }
        /** @type {?} */
        var cols = [];
        switch (ct) {
            case 'visible':
                cols = this.formatData;
                break;
            case 'hidden':
                cols = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return _this.fields.indexOf(n.field) === -1; }));
                break;
            case 'all':
            default:
                cols = this.columns[0];
                break;
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.title.toLowerCase().indexOf(searchWords) > -1; }));
        }
        this.allCols = cols;
    };
    /**
     * @param {?} col
     * @param {?} $event
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.onFieldClick = /**
     * @param {?} col
     * @param {?} $event
     * @return {?}
     */
    function (col, $event) {
        this.activeField = col;
        this.checkColumnOptions();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.onFieldsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        this.setFormatData();
        this.fieldsChange.emit(this.fields);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.onDblClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        // console.log('显示与隐藏切换事件', col);
        this.onCheckboxClick($event, col);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.onCheckboxClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        var _this = this;
        // console.log('显示与隐藏切换事件', col);
        $event.stopPropagation();
        /** @type {?} */
        var index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            f.visible = _this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.onFieldsChanged();
    };
    /**
     * @param {?} $event
     * @param {?} ct
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.searchColumn = /**
     * @param {?} $event
     * @param {?} ct
     * @return {?}
     */
    function ($event, ct) {
        /** @type {?} */
        var txt = $event.target.value;
        this.filterColumns(ct, txt);
    };
    /**
     * @param {?} fieldInfo
     * @param {?} ct
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.onFieldDrop = /**
     * @param {?} fieldInfo
     * @param {?} ct
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    function (fieldInfo, ct, txt, ulElRef) {
        var _a;
        // console.log('drop', fieldInfo);
        var removedIndex = fieldInfo.removedIndex, addedIndex = fieldInfo.addedIndex;
        /** @type {?} */
        var moveItem = this.allCols[removedIndex];
        /** @type {?} */
        var targetItem = this.allCols[addedIndex];
        /** @type {?} */
        var moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === moveItem.field; }));
        /** @type {?} */
        var targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === targetItem.field; }));
        /** @type {?} */
        var removedItem = this.columns[0].splice(moveItemIndex, 1);
        (_a = this.columns[0]).splice.apply(_a, __spread([targetItemIndex, 0], removedItem));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
        // if (ulElRef) {
        //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {
        //         el.style.cursor = 'grab';
        //     });
        // }
    };
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     */
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.getCheckAllState = /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    function () {
        if (this.fields.length === 0) {
            return 0;
        }
        else {
            if (this.fields.length === this.columns[0].length) {
                return 1;
            }
            return 2;
        }
    };
    /**
     * @param {?} $event
     * @param {?} ct
     * @param {?} txt
     * @return {?}
     */
    ColumnFormatSettingComponent.prototype.onCheckAllClick = /**
     * @param {?} $event
     * @param {?} ct
     * @param {?} txt
     * @return {?}
     */
    function ($event, ct, txt) {
        /** @type {?} */
        var state = this.getCheckAllState();
        if (state === 0 || state === 2) {
            // 执行全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible = true; }));
            this.fields = this.columns[0].map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
        }
        else {
            // 取消全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible = false; }));
            this.fields = [];
        }
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
    };
    ColumnFormatSettingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'column-format-setting',
                    template: "<div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n    <div region=\"west\" class=\"west d-flex flex-column \">\r\n        <div style=\"margin: 0 6px;\">\r\n            <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\" (input)=\"searchColumn($event, ct.selectedValues)\" style=\"height: 30px;\">\r\n            <div style=\"padding: 5px 0px;background-color: #fff;\">\r\n                <button class=\"btn btn-link\" \r\n                    style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event, ct.selectedValues, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkbox\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length === columns[0].length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <farris-combo-list #ct \r\n                [data]=\"searchItems\" \r\n                [editable]=\"false\"\r\n                [ngModel]=\"'all'\" [idField]=\"'value'\"\r\n                [textField]=\"'title'\"\r\n                [enableClear]=\"false\"\r\n                (valueChange)=\"filterColumns(ct.selectedValues, inputWord.value)\"\r\n                style=\"float: right;\" [style.width.px]=\"isEn ? 120: 80\"\r\n                class=\"format-setting-searchitem\"></farris-combo-list>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"flex-fill\">\r\n            <ul class=\"list-group  list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, ct.selectedValues, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onFieldClick(col, $event)\" [class.active]=\"activeField && activeField.field === col.field\"\r\n                    (dblclick)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n      \r\n    </div>\r\n    <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px;border-right: 0;\">\r\n\r\n        <h6 style=\"margin: 15px 0px;font-weight: bold;\">{{ 'datagrid.settings.properties' | locale }}</h6>\r\n\r\n        <form #colformatform=\"ngForm\" style=\"margin-top: 5px;\">\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid.settings.headeralign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"halign\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.halign\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.dataalign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"align\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.align\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytype' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap \">\r\n                       \r\n                        <farris-combo-list name=\"footer.options.calculationType\" \r\n                        [data]=\" activeField.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.footer.options.calculationType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter && (!activeField.footer.options.calculationType || activeField.footer.options.calculationType == -1)\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytext' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input type=\"input\" name=\"footer.options.text\" class=\"form-control\" [(ngModel)]=\"activeField.footer.options.text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n   \r\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ColumnFormatSettingComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: DatagridSettingsComponent },
        { type: ChangeDetectorRef }
    ]; };
    ColumnFormatSettingComponent.propDecorators = {
        columns: [{ type: Input }],
        fields: [{ type: Input }],
        colForm: [{ type: ViewChild, args: ['colformatform',] }],
        formatChange: [{ type: Output }],
        fieldsChange: [{ type: Output }]
    };
    return ColumnFormatSettingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnGroupSettingComponent = /** @class */ (function () {
    function ColumnGroupSettingComponent(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.fields = [];
        this.formatColumns = [];
        this.groupFields = [];
        this.groupFieldsChange = new EventEmitter();
        this.formatColumnsChange = new EventEmitter();
        this.groupColumns = [];
        this.allowGroupColumns = [];
        this.activeCalculationCol = null;
        this.showSelectColumnsPanel = false;
        this.summaryItems = [];
        this.summaryItems2 = [];
    }
    /**
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.setGroupColumns();
        this.registerEventHandle();
        this.initCalculationColumns();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (!_this.colForm.pristine) {
                    _this.formatColumnsChange.emit(_this.formatColumns);
                }
            }));
        }
        this.formatColumns.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            _this.checkColumnOptions(n);
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {
            this.formatColumns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.checkColumnOptions(n);
            }));
            this.setGroupColumns();
            this.initCalculationColumns();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.initCalculationColumns = /**
     * @private
     * @return {?}
     */
    function () {
        this.activeCalculationCol = this.formatColumns[0];
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.registerEventHandle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.groupingSettingEl.nativeElement.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.target !== _this.selectcolumnspanel.nativeElement) {
                _this.showSelectColumnsPanel = false;
            }
        }), false);
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.setGroupColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.groupFields && this.groupFields.length) {
            this.groupColumns = this.groupFields.map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                return _this.columns[0].find((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.field === f; }));
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }
        else {
            this.groupColumns = [];
        }
        this.onGroupFieldsChange();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.getAllowGroupingColumns = /**
     * @private
     * @return {?}
     */
    function () {
        return this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.allowGrouping || n.allowGrouping === undefined; }));
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.onGroupFieldsChange = /**
     * @private
     * @return {?}
     */
    function () {
        this.groupFieldsChange.emit(this.groupFields);
    };
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.checkColumnOptions = /**
     * @private
     * @param {?} col
     * @return {?}
     */
    function (col) {
        if (col) {
            if (col.groupFooter === undefined) {
                col.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                col.groupFooter.options = col.groupFooter.options || { calculationType: -1 };
                if (col.groupFooter.options.calculationType === undefined) {
                    col.groupFooter.options.calculationType = -1;
                }
            }
            // if (this.activeField.footer === undefined) {
            //     this.activeField.footer =  { options: {calculationType: -1} };
            // } else {
            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};
            //     if (this.activeField.footer.options.calculationType === undefined) {
            //         this.activeField.footer.options.calculationType = -1;
            //     }
            // }
        }
    };
    /**
     * 显示或隐藏字段选取面板
     */
    /**
     * 显示或隐藏字段选取面板
     * @param {?} $event
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.toggleGroupingColumnPanel = /**
     * 显示或隐藏字段选取面板
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;
        this.allowGroupColumns = this.getAllowGroupingColumns();
    };
    /** 添加分组字段 */
    /**
     * 添加分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.addGroupColumn = /**
     * 添加分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        $event.stopPropagation();
        if (this.groupFields.indexOf(col.field) === -1) {
            this.groupColumns = __spread(this.groupColumns, [col]);
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            this.onGroupFieldsChange();
            this.showSelectColumnsPanel = false;
        }
    };
    /** 移除分组字段 */
    /**
     * 移除分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.onRemoveGroupingField = /**
     * 移除分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        $event.stopPropagation();
        this.groupFields = this.groupFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n !== col.field; }));
        this.setGroupColumns();
    };
    /** 拖动分组字段进行排序 */
    /**
     * 拖动分组字段进行排序
     * @param {?} $event
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.onGroupingFieldDropped = /**
     * 拖动分组字段进行排序
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _a;
        console.log('grouping field droped.', $event);
        var removedIndex = $event.removedIndex, addedIndex = $event.addedIndex;
        /** @type {?} */
        var removedItem = this.groupFields.splice(removedIndex, 1);
        (_a = this.groupFields).splice.apply(_a, __spread([addedIndex, 0], removedItem));
        this.setGroupColumns();
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    ColumnGroupSettingComponent.prototype.onFieldClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        this.activeCalculationCol = col;
    };
    ColumnGroupSettingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'column-group-setting',
                    template: "<div #groupingSetting class=\"d-flex flex-column flex-fill column-group-setting\">\r\n\r\n    <div region=\"north\" class=\"north d-flex flex-column group-fields\" style=\"height: 78px; \">\r\n        <div class=\"title\">\r\n            {{'datagrid.settings.grouppingField' | locale }}\r\n            <span class=\"text-warning\"> ({{'datagrid.settings.moreGrouppingFieldWarningMessage' | locale }})</span>\r\n        </div>\r\n        <div #groupfieldcontainer class=\"flex-fill p-2 all-fields\">\r\n            <ul class=\"list-group\" style=\"display: inline-block;\"  column-group-drag (drop)=\"onGroupingFieldDropped($event)\">\r\n                <li class=\"list-group-item list-group-item-action btn btn-light smooth-dnd-draggable-wrapper group-field\"\r\n                *ngFor=\"let item of groupColumns\">\r\n                    {{ item.title }}\r\n                    <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" title=\"{{'datagrid.settings.removeGrouppingFieldTip' | locale }}\" (click)=\"onRemoveGroupingField($event, item)\"></span>\r\n                </li>\r\n\r\n                <li class=\"list-group-item list-group-item-action btn btn-light btn-add-groupfield\" title=\"{{'datagrid.settings.addGrouppingFieldTip' | locale }}\"\r\n                    *ngIf=\"!groupFields || groupFields.length < 3\" (click)=\"toggleGroupingColumnPanel($event)\">\r\n                   <span class=\"f-icon f-icon-add\" style=\"font-size: 24px;\"></span>\r\n                </li>\r\n            </ul>\r\n            <div #selectcolumnspanel class=\"group-field-panel\" [style.display]=\"showSelectColumnsPanel? '': 'none'\"\r\n            [style.width.px]=\"groupfieldcontainer.offsetWidth - 16\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item list-group-item-action btn btn-light\" *ngFor=\"let item of allowGroupColumns\"\r\n                    (click)=\"addGroupColumn($event, item)\" [style.display]=\"groupFields.indexOf(item.field) > -1 ? 'none': ''\">\r\n                        {{ item.title }}\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div region=\"center\" class=\"center  d-flex flex-column flex-fill\" style=\"overflow:hidden;\">\r\n        <div class=\"group-sum-fields\">\r\n            {{'datagrid.settings.grouppingSummary' | locale}}\r\n        </div>\r\n        <div class=\"flex-fill p-2\" style=\" background-color: #fff; overflow: auto;\">\r\n            <div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n                <div region=\"west\" class=\"west d-flex flex-column\" style=\"width: 360px; min-width:260px;overflow: hidden;\">\r\n                    <div style=\"overflow: auto;padding-right: 5px;\" class=\"flex-fill\">\r\n                        <ul class=\"list-group  list-group-flush\">\r\n                            <li class=\"list-group-item list-group-item-action format-setting-column\"\r\n                            *ngFor=\"let item of formatColumns\"\r\n                            [class.active]=\"activeCalculationCol && activeCalculationCol.field === item.field\"\r\n                            (click)=\"onFieldClick($event, item)\"\r\n                             >\r\n                                {{ item.title }}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                 \r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px\">\r\n                    <form #groupSumform=\"ngForm\">\r\n                        <div class=\"farris-group-wrap\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryType' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                   \r\n                                    <farris-combo-list name=\"groupFooter.options.calculationType\" \r\n                                    [data]=\" activeCalculationCol.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                                    [editable]=\"false\"\r\n                                    [(ngModel)]=\"activeCalculationCol.groupFooter.options.calculationType\"\r\n                                    [idField]=\"'value'\"\r\n                                    [textField]=\"'title'\"\r\n                                    [enableClear]=\"false\"></farris-combo-list>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"farris-group-wrap\" *ngIf=\"activeCalculationCol.groupFooter.options.calculationType == -1\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryText' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                    <input type=\"input\" name=\"groupFooter.options.text\" class=\"form-control\" [(ngModel)]=\"activeCalculationCol.groupFooter.options.text\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                    styles: ["\n        .column-group-setting{ height: 100%; background-color: #ffffff; padding: 0 10px 10px 10px}\n        .smooth-dnd-ghost.group-field {\n            z-index: 999999999 !important;\n        }\n        .active {\n            background-color: rgb(231 241 255);\n            color: rgb(0 0 0);\n        }\n        .column-group-setting .group-field {\n            float: left;max-width: 200px;margin-right: 10px;\n            width: auto; padding: 5px;padding-right: 30px;\n            border-radius: 20px;padding-left: 10px; cursor:move\n        }\n        .group-field .f-icon { position: absolute;right: 2px;top: 7px; }\n        .btn-add-groupfield{float: left;width: 32px;padding: 0px;padding-top: 3px; border-radius: 20px;}\n        .group-field-panel{\n            height: 260px; border-radius: 5px; z-index: 3;position: absolute;\n            background: rgb(255 255 255); box-shadow: 1px 1px 4px rgb(156 155 155 / 75%);\n            overflow: hidden;\n            overflow-y: auto;\n        }\n        .group-field-panel ul {\n            display: inline-block;margin: 20px;margin-top: 5px;\n        }\n        .group-field-panel li {\n            float: left; cursor: pointer;max-width: 200px;margin-right: 10px;width: auto;\n            padding: 10px; min-width: 80px; margin-top: 15px; text-align: center;\n        }\n        .format-setting-column {\n            background: rgba(247,248,251,0.6);\n            padding: 7px 10px;\n            margin-bottom: 5px;\n            border: 1px solid rgba(233,236,243,0.45);\n            border-radius: 5px;\n        }\n        .format-setting-column.active {\n            border: 1px solid rgb(42 135 255);\n            background: rgb(239 247 255);\n            border-top: 1px solid rgb(42 135 255)!important;\n            border-bottom: 1px solid rgb(42 135 255)!important;\n        }\n\n        "]
                }] }
    ];
    /** @nocollapse */
    ColumnGroupSettingComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: DatagridSettingsComponent },
        { type: ChangeDetectorRef }
    ]; };
    ColumnGroupSettingComponent.propDecorators = {
        columns: [{ type: Input }],
        fields: [{ type: Input }],
        formatColumns: [{ type: Input }],
        groupFields: [{ type: Input }],
        groupFieldsChange: [{ type: Output }],
        formatColumnsChange: [{ type: Output }],
        groupingSettingEl: [{ type: ViewChild, args: ['groupingSetting',] }],
        selectcolumnspanel: [{ type: ViewChild, args: ['selectcolumnspanel',] }],
        colForm: [{ type: ViewChild, args: ['groupSumform',] }]
    };
    return ColumnGroupSettingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var wrapperClass = constants.wrapperClass, animationClass = constants.animationClass;
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
var ColumnVisibleDragDirective = /** @class */ (function () {
    function ColumnVisibleDragDirective(ngzone, injector, render, el) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            behaviour: 'move',
            dragHandleSelector: '.field-drag-handle',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        this.disposeDnd();
        this.container = smoothDnD(this.el.nativeElement, this.options);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDropReady = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
        // console.log('DROP READY', dropResult);
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
        console.log('DRAG START', info);
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
        // console.log('DRAG END', info);
    };
    /**
     * @private
     * @return {?}
     */
    ColumnVisibleDragDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
        // console.log('DRAG ENTER');
    };
    ColumnVisibleDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[column-visible-drag]',
                },] }
    ];
    /** @nocollapse */
    ColumnVisibleDragDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColumnVisibleDragDirective.propDecorators = {
        drop: [{ type: Output }],
        options: [{ type: Input }]
    };
    return ColumnVisibleDragDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
var ColumnGroupDragDirective = /** @class */ (function () {
    function ColumnGroupDragDirective(ngzone, injector, render, el) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        this.disposeDnd();
        this.container = smoothDnD(this.el.nativeElement, this.options);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDropReady = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
        // console.log('DROP READY', dropResult);
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
        // console.log('DRAG START', info);
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
        // console.log('DRAG END', info);
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
        // console.log('DRAG ENTER');
    };
    ColumnGroupDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[column-group-drag]',
                },] }
    ];
    /** @nocollapse */
    ColumnGroupDragDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColumnGroupDragDirective.propDecorators = {
        drop: [{ type: Output }],
        options: [{ type: Input }]
    };
    return ColumnGroupDragDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridSettingsModule = /** @class */ (function () {
    function DatagridSettingsModule() {
    }
    /**
     * @param {?=} apiUri
     * @return {?}
     */
    DatagridSettingsModule.forRoot = /**
     * @param {?=} apiUri
     * @return {?}
     */
    function (apiUri) {
        return {
            ngModule: DatagridSettingsModule,
            providers: [
                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
            ]
        };
    };
    DatagridSettingsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DatagridSettingsComponent,
                        DatagridSortSettingComponent,
                        DatagridViewColumnsComponent,
                        ColumnFormatSettingComponent,
                        ColumnGroupSettingComponent,
                        ColumnVisibleDragDirective,
                        ColumnGroupDragDirective,
                        SimpleColumnsComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MultiSelectModule,
                        ComboListModule,
                        FarrisCommonModule.forRoot(),
                        MessagerModule.forRoot(),
                        LocaleModule.forRoot(),
                        ModalModule.forRoot(),
                    ],
                    entryComponents: [
                        DatagridSettingsComponent,
                        SimpleColumnsComponent
                    ],
                    exports: [
                        DatagridSettingsComponent,
                        SimpleColumnsComponent
                    ]
                },] }
    ];
    return DatagridSettingsModule;
}());

export { ColumnFormatSettingComponent, ColumnGroupDragDirective, ColumnGroupSettingComponent, ColumnVisibleDragDirective, DatagridSettingsComponent, DatagridSettingsModule, DatagridSettingsService, DatagridSortSettingComponent, DatagridViewColumnsComponent, GRID_SETTINGS_WEBAPI, SimpleColumnsComponent };
//# sourceMappingURL=farris-ui-datagrid-settings.js.map
