import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, NAMESPACE } from '../frame/index';
import { Repository } from '../repository/index';
import { ExpressionUtil } from '../utils/expression_util';
export class VisibleEffector {
    constructor(injector, namespace, frameContext, repository) {
        this.injector = injector;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.repository = repository;
        this.ns = namespace;
    }
    effect(path, value, options) {
        // 由匿名函数接管，ignore
        const paths = path.split('/').filter(p => p);
        const bindingPaths = this.getTablePaths(paths);
        const bindingPath = bindingPaths.join('/');
        // 主表显隐无需处理
        if (bindingPaths && bindingPaths.length > 0) {
            const isGridComponent = this.isGridComponent(bindingPath);
            if (isGridComponent) {
                const datagridComponent = this.getDatagridComponent(bindingPath);
                if (datagridComponent) {
                    // 更新列信息
                    // datagridComponent.columnsChanged();
                    const fieldPaths = this.getPropertyPaths(paths);
                    if (fieldPaths) {
                        const field = fieldPaths.join('.');
                        if (value) {
                            datagridComponent.showColumn(field);
                        }
                        else {
                            datagridComponent.hideColumn(field);
                        }
                    }
                }
            }
        }
        else {
            const datagridComponent = this.getDatagridComponent(bindingPath);
            if (datagridComponent) {
                datagridComponent.columnsChanged();
            }
        }
    }
    getTablePaths(paths) {
        const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return entityPaths;
    }
    getDatagridComponent(bindingPath) {
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];
        const matchedFrameContexts = frameContexts.filter((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());
        let result = null;
        if (matchedFrameContexts) {
            matchedFrameContexts.every((frameContext) => {
                const frameId = frameContext.frameId;
                const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                if (!componentsMap) {
                    return true;
                }
                const datagridComponent = Array.from(componentsMap.values()).find((component) => component && component['__component_type__'] === 'DatagridComponent');
                if (datagridComponent) {
                    result = datagridComponent;
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        return result;
    }
    getPropertyPaths(paths) {
        const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return paths.slice(tablePaths.length);
    }
    isGridComponent(bindingPath) {
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];
        const frameContext = frameContexts.find((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());
        if (frameContext) {
            return !!frameContext.viewModel['dataGridColumnsName'];
        }
        else {
            return false;
        }
    }
}
VisibleEffector.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VisibleEffector.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
    { type: FrameContext },
    { type: Repository }
];
//# sourceMappingURL=data:application/json;base64,