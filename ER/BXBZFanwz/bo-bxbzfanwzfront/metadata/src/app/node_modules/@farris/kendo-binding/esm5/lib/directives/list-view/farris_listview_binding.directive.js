import * as tslib_1 from "tslib";
import { Directive, HostListener, Output, EventEmitter, Input } from '@angular/core';
import { BindingData, ViewModel } from '@farris/devkit';
import { ListViewComponent } from '@farris/ui-list-view';
var FarrisListViewBindingDirective = /** @class */ (function () {
    function FarrisListViewBindingDirective(bindingData, viewModel, listview) {
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.listview = listview;
        this.supportPaged = true;
        /**
         * 选中行切换事件
         */
        this.selectedRowChange = new EventEmitter();
    }
    Object.defineProperty(FarrisListViewBindingDirective.prototype, "primaryKey", {
        /**
         * 主键
         */
        get: function () {
            return this.bindingList.primaryKey;
        },
        enumerable: true,
        configurable: true
    });
    FarrisListViewBindingDirective.prototype.ngOnInit = function () {
        // 绑定数据
        this.bindData();
        this.registerBindingDataChangeEvent();
    };
    FarrisListViewBindingDirective.prototype.ngOnChanges = function () {
        this.bindData();
    };
    FarrisListViewBindingDirective.prototype.ngOnDestroy = function () {
        this.unRegisterBindingDataChangeEvent();
    };
    /**
     * 获取分页信息
     */
    FarrisListViewBindingDirective.prototype.getPagingInfo = function () {
        var bindingPath = this.viewModel.bindingPath;
        var bindingData = this.viewModel.bindingData;
        var pagingInfo = bindingData.pagingInfo;
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) {
                return item.substring(0, item.length - 1);
            });
            bindingPaths.forEach(function (path) {
                pagingInfo = pagingInfo && pagingInfo[path];
            });
            return pagingInfo;
        }
    };
    /**
     * 设置listview属性
     */
    FarrisListViewBindingDirective.prototype.setListViewPageProps = function () {
        var data = this.bindingList.toJSON();
        var skip = 0;
        var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
        var _d = (this.getPagingInfo() || {}).total, total = _d === void 0 ? 0 : _d;
        if (pageIndex > 0) {
            skip = (pageIndex - 1) * pageSize;
        }
        if (pageSize === 0 && total === 0) {
            total = data.length;
        }
        this.listview.supportPaging = this.supportPaged;
        this.listview.pageIndex = pageIndex;
        this.listview.pageSize = pageSize;
        this.listview.total = total;
        var currentPage = pageIndex;
        var itemsPerPage = pageSize;
        var totalItems = total;
        if (pageSize === 0) {
            // this.listview.supportPaging = false;
            this.listview.pageIndex = pageIndex;
            this.listview.total = total;
            currentPage = 1;
            totalItems = total;
        }
        if (this.listview.paginationOptions) {
            this.listview.paginationOptions.itemsPerPage = itemsPerPage;
            this.listview.paginationOptions.currentPage = currentPage;
            this.listview.paginationOptions.pageList = this.listview.pageList;
            this.listview.paginationOptions.totalItems = totalItems;
        }
        var listViewChangeDetectRef = this.listview['cdr'];
        if (listViewChangeDetectRef) {
            listViewChangeDetectRef.detectChanges();
        }
        var paginationDirective = this.listview.pager && this.listview.pager['paginationDirective'];
        if (paginationDirective && paginationDirective.service) {
            try {
                paginationDirective.service.instances[this.listview.pager.id] = tslib_1.__assign({}, this.listview.paginationOptions);
                paginationDirective.service.setTotalItems(totalItems);
                paginationDirective.changeDetectorRef.detectChanges();
            }
            catch (_e) { }
        }
    };
    Object.defineProperty(FarrisListViewBindingDirective.prototype, "bindingList", {
        /*
         * 获取绑定数据
         */
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    /* 绑定数据 */
    FarrisListViewBindingDirective.prototype.bindData = function () {
        this.setListViewPageProps();
        var data = this.bindingList.toArray();
        this.listview.setData(data);
    };
    /*
         * 发射选中行切换事件
         * @description 统一单选模式和多选模式下的行切换事件
         */
    FarrisListViewBindingDirective.prototype.fireSelectedRowChange = function (selectedRowContext) {
        this.selectedRowChange.emit(selectedRowContext);
    };
    /**
     * 设置BindingList的当前行
     * @param id 当前行内码
     */
    FarrisListViewBindingDirective.prototype.setSelectionIdToBindingData = function (id) {
        this.bindingList.setCurrentId(id, true);
    };
    /**
     * 数据源发生变更
     * @param change 变更
     */
    FarrisListViewBindingDirective.prototype.onBindingDataChange = function (change) {
        this.bindData();
        this.updateSelectedRow(change);
    };
    /**
     * 设置当前行
     * @param change 变更
     */
    FarrisListViewBindingDirective.prototype.updateSelectedRow = function (change) {
        if (!this.bindingList || !this.bindingList.currentId) {
            return;
        }
        if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        var _a = (this.listview.clickItem || {}).id, id = _a === void 0 ? null : _a;
        var currentId = this.bindingList.currentId;
        // grid当前行与bingingList当前行一致，无须切换
        if (id === currentId) {
            return;
        }
        this.selectRow(this.bindingList.currentId);
    };
    FarrisListViewBindingDirective.prototype.selectRow = function (id) {
        if (this.listview && typeof this.listview.selectRow === 'function') {
            this.listview.selectRow(id);
        }
    };
    /**
     * 注册bindingdata变化事件
     */
    FarrisListViewBindingDirective.prototype.registerBindingDataChangeEvent = function () {
        var _this = this;
        this.bindingDataChangeEvent = this.bindingData.changes.subscribe(function (change) {
            _this.onBindingDataChange(change);
        });
    };
    /**
     * 取消bindingdata变化订阅
     */
    FarrisListViewBindingDirective.prototype.unRegisterBindingDataChangeEvent = function () {
        this.bindingDataChangeEvent.unsubscribe();
    };
    FarrisListViewBindingDirective.prototype.setChecks = function (ids) {
        this.viewModel.uiState.setPropertyValue('ids', ids);
    };
    /* 切换行事件 */
    FarrisListViewBindingDirective.prototype.changeRow = function (event) {
        var index = event.index, data = event.data, checkChangeEvent = event.checkChangeEvent;
        if (checkChangeEvent === false || !event.hasOwnProperty('checkChangeEvent')) {
            if (data && Array.isArray(data) && data.length > 0) {
                var id = data[0] && data[0][this.primaryKey] || null;
                if (id) {
                    this.setSelectionIdToBindingData(id);
                }
            }
            this.listview.activeIndex = index;
            this.fireSelectedRowChange(event);
        }
    };
    /**
     * 切换页码触发事件
     * @param event 切换页码参数
     */
    FarrisListViewBindingDirective.prototype.pageChangedHandler = function (event) {
        var pageIndex = event.pageInfo.pageIndex;
        var pageSize = event.pageInfo.pageSize;
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        var skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    /**
     * 设置每页数据条数触发事件
     * @param event 切换页码参数
     */
    FarrisListViewBindingDirective.prototype.pageSizeChangedHandler = function (event) {
        var _a = event.pageInfo, pageIndex = _a.pageIndex, pageSize = _a.pageSize;
        var skip = (pageIndex - 1) * (+pageSize);
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    FarrisListViewBindingDirective.prototype.checkValuesChange = function (event) {
        var ids = event;
        this.setChecks(ids);
    };
    FarrisListViewBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisListviewBinding]'
                },] }
    ];
    /** @nocollapse */
    FarrisListViewBindingDirective.ctorParameters = function () { return [
        { type: BindingData },
        { type: ViewModel },
        { type: ListViewComponent }
    ]; };
    FarrisListViewBindingDirective.propDecorators = {
        supportPaged: [{ type: Input }],
        selectedRowChange: [{ type: Output }],
        changeRow: [{ type: HostListener, args: ['listClick', ['$event'],] }],
        pageChangedHandler: [{ type: HostListener, args: ['pageChanged', ['$event'],] }],
        pageSizeChangedHandler: [{ type: HostListener, args: ['pageSizeChanged', ['$event'],] }],
        checkValuesChange: [{ type: HostListener, args: ['checkValuesChange', ['$event'],] }]
    };
    return FarrisListViewBindingDirective;
}());
export { FarrisListViewBindingDirective };
//# sourceMappingURL=data:application/json;base64,