{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/extend-file-upload/lib/service/f-file-upload-api.service.ts","ng://@farris/extend-file-upload/lib/model/f-file-upload.model.ts","ng://@farris/extend-file-upload/lib/utils/f-file.utils.ts","ng://@farris/extend-file-upload/lib/service/f-file-uploader.service.ts","ng://@farris/extend-file-upload/lib/service/f-file-upload-default.service.ts","ng://@farris/extend-file-upload/lib/directive/f-file-drop.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-select.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-preview.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-upload.directive.ts","ng://@farris/extend-file-upload/lib/pipe/index.ts","ng://@farris/extend-file-upload/lib/components/view-image/f-file-view-image.component.ts","ng://@farris/extend-file-upload/lib/components/upload/f-file-upload.component.ts","ng://@farris/extend-file-upload/lib/components/preview/f-file-preview.component.ts","ng://@farris/extend-file-upload/lib/components/preview-checkbox/preview-checkbox.component.ts","ng://@farris/extend-file-upload/lib/components/multi-download-info/multi-download-info.component.ts","ng://@farris/extend-file-upload/lib/components/upload-and-preview/upload-and-preview.component.ts","ng://@farris/extend-file-upload/lib/components/upload-progress/upload-progress.component.ts","ng://@farris/extend-file-upload/lib/f-file-upload.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","FFileUploadAPIServiceToken","InjectionToken","FFileUploadAPIService","exConfig","_this","this","apiArray","config","upload","remove","commonAPI","type","url","timeout","headers","data","key","forEach","item","assign","combinUrl","prototype","typeUrl","getAPI","getAssignAPI","object","infoMap","removeAll","uploadAll","multipartUpload","Injectable","args","providedIn","Optional","Inject","UploadStatus","Queue","Uploading","Done","Cancelled","Remove","Error","isObject","isArray","deepCloneObject","src","target","v","humanizeBytes","bytes","Math","floor","log","parseFloat","pow","toFixed","generateId","random","toString","substring","makeUploadFile","file","index","fileIndex","id","name","size","form","FormData","progress","status","percentage","speed","speedHuman","startTime","endTime","eta","etaHuman","lastModifiedDate","Date","lastModified","sub","undefined","nativeFile","allMineTypes",".pdf",".gif",".png",".txt",".htm",".html",".jpe",".jpeg",".jpg",".js",".json",".pps",".ppt",".doc",".xml",".zip",".xlsx",".wps",".3gpp",".ac3",".asf",".au",".css",".csv",".dot",".dtd",".dwg",".dxf",".jp2",".mp2",".mp3",".mp4",".mpeg",".mpg",".mpp",".ogg",".pot",".rtf",".svf",".tif",".tiff",".wdb",".xhtml",".xlc",".xlm",".xls",".xlt",".xlw","findMineTypeBySuffix","suffix","changeUploadFileToFileExtend","files","result","preExtend","extend","extendStatus","extendHeaders","resultProp","tempProp","replace","FFileUtils","FFileUploaderService","uploadServerSer","allowedContentTypes","maxUploads","maxFileSize","concurrency","Number","POSITIVE_INFINITY","uploadedCount","extendServerConfig","queue","serviceEvents","EventEmitter","uploadScheduler","Subject","subs","pipe","mergeMap","serverMethod","subscribe","uploadOutput","filter","queueItem","findIndex","emit","setOptions","options","prop","handleFiles","incomingFiles","allowedIncomingFiles","reduce","acc","checkFile","futureQueueLength","judgeResult","rejectedReason","allowed","rejectedFile","message","map","uploadFile","queuelength","isContentTypeAllowed","isFileSizeAllowed","join","initInputEvents","input","event","uploadFileIndex","id_1","splice","ids_1","split","tId","queueFiles","removeIndex","removeQueueFiles","setExtendServerConfig","extendSer","Observable","observer","ids","fileItem","finalize","closed","complete","output","err","reset","setContentTypes","contentTypes","find","allContentTypesAllowed","lastIndexOf","namesuffix","substr","toLowerCase","fileSize","UploadServerService","decorators","FFileUploadDefaultService","__","constructor","create","tslib_1.__extends","method","xhr","XMLHttpRequest","time","getTime","progressStartTime","addEventListener","lengthComputable","round","loaded","total","diff","ceil","secondsToHuman","onreadystatechange","readyState","DONE","speedAverage","responseStatus","response","JSON","parse","responseHeaders","parseResponseHeaders","getAllResponseHeaders","open","withCredentials","keys","setRequestHeader","bodyToSend","includeWebKitFormBoundary","append","fieldName","send","abort","extendService","sec","toISOString","httpHeaders","x","FFileDropDirective","elementRef","tDisabled","dropListener","dragOverListener","dragLeaveListener","dragEnterListener","onDropEnter","stopPropagation","preventDefault","defineProperty","unbindDragAndDropEvent","bindDragAndDropEvent","ngOnInit","_sub","el","nativeElement","uploadInput","disabled","ngOnDestroy","unsubscribe","onDrop","bind","onDragOver","onDragLeave","removeEventListener","dataTransfer","Directive","selector","ElementRef","Input","Output","FFileSelectDirective","changeListener","onChange","unbindEvent","bindEvent","FFilePreviewListTypeTemplateDirective","template","TemplateRef","FFilePreviewToolbarTemplateDirective","FFileUploadDirective","templateRef","FFileSizePipe","transform","tvalue","parseInt","Pipe","FFileDatePipe","dateSer","returnFormat","formatTo","DateTimeHelperService","FFileViewImageComponent","maxHeight","maxWidth","cls","selfHeight","tFile","fileContent","createImageByCanvas","changeImageSize","originWidth","originHeight","targetWidth","targetHeight","width","height","reader","FileReader","tImage","Image","canvas","context","getContext","onload","imgSize","clearRect","drawImage","ev","onerror","readAsDataURL","Component","HostBinding","ViewChild","FFileUploadComponent","uploadAPISer","fileUploaderSer","notifyService","ngZone","enableImagePreview","uploadImmediately","uploadedThenHide","tVisible","needReset","enableDrop","dropText","enableSelect","selectText","multiple","widthThreshold","fUploadDoneEvent","fUploadRemovedEvent","selfUploadOpts","showAppendPanel","showLoading","settings","visible","uploadSelectInput","uploadDragInput","fFileUploadDir","uploadOpts","computeWidthThreshold","ngAfterViewInit","triggerFileSelect","fileUpload","click","selectUploadOutput","uploadOutputHandler","dropUploadOutput","startUpload","updateFilesState","hideAfterLoaded","allFileUploaded","fileOutput","showNotify","notifyType","msg","eventType","startFiles","extendDatas","inputUploadEventEmit","startUploadAll","setTimeout","cancelUpload","removelAllUpload","removeFile","formateBytes","isImage","indexOf","judgeContentTypeLimit","judegeFileSizeLimit","appendNewFiles","closeAppendPanel","fileDropUpload","runOutsideAngular","self","tNeedComputedCls","assistEl","fFileUploadAssist","getBoundingClientRect","actionFun","parentElement","classList","providers","animations","trigger","state","style","opacity","transition","animate","NotifyService","NgZone","ContentChild","FFilePreviewComponent","cd","readonly","_defaultItemCls","enableMulti","itemCls","headerCls","canRename","defaultRename","enableCardAreaResponse","showRenameInput","_fileInfos","filePreviewEvent","fileDownloadEvent","multiSelectedEvent","fileRemoveEvent","multiSelected","selectAllBtnChecked","listTypeTemplate","val","formatDatas","ngOnChanges","changes","formatValue","filePreviewHandler","fileInfo","stopImmediatePropagation","fileDownloadHandler","fileInfos","fileMultiDownloadHandler","rename","multiRenameRef","multiSelectChange","hasInArray","findInArray","fileRemoveHandler","getFileTypeClassName","fileName","clsName","lastDotIndex","fileSuffix","toLocaleLowerCase","hasFileName","selectOrCancelAllHandler","checked","detectChanges","toggleRenameInput","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","read","PreviewCheckboxComponent","cls1","cls2","cls3","checkedChange","clickHandler","MultiDownloadInfoComponent","_downloadInfos","_downloadName","downloadName","getName","getDownloadName","UploadAndPreviewComponent","modalSer","contentFill","_renameFromDialog","_previewColumnsFields","_presetPreviewColumns","field","title","checkbox","_previewColumns","previewDateFormat","previewReadonly","previewVisible","previewEnableMulti","previewShowType","previewEnableRename","previewDefaultRename","fPreviewMultiSelectedEvent","previewSelectAllBtnChecked","previewMultiSelected","uploadDisabled","tUploadVisible","uploadNeedReset","uploadEnableSelect","uploadSelectText","uploadEnableMulti","sortPreviewData","y","oDate1","oDate2","uploadFiles","uploadReset","getFieldsFromColumns","formatPreviewDatas","enableRename","uploadVisible","previewColumns","sort","newFormatValue","getColumnTemplate","columnInfo","previewMultiSelectChange","getUploadProgress","uploadInfo","tPercentage","getUploadFileSizeProgress","multiFileRemoveHandler","self_1","dlgRef_1","show","showMaxButton","initialState","downloadInfos","showButtons","buttons","text","handle","close","contentRef","showPreviewStateColumn","BsModalService","UploadProgressComponent","showInfo","percent","cachedStatus","inferredStatus","successPercent","isNotNil","FFileUploadModule","forRoot","uploadSer","ngModule","provide","useValue","useClass","NgModule","declarations","exports","imports","CommonModule","NotifyModule","MessagerModule","FAreaResponseModule","DateHelperModule","ModalModule","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';\r\nimport { UploadInput, UploadConfig } from '../model/index';\r\n\r\n\r\nexport interface FFileUploadServerConfig extends UploadConfig {\r\n    upload?: UploadInput | null;\r\n    remove?: UploadInput | null;\r\n}\r\n\r\nexport const FFileUploadAPIServiceToken = new InjectionToken<FFileUploadServerConfig>('MFFileUploadServerConfig');\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FFileUploadAPIService {\r\n    private config: FFileUploadServerConfig;\r\n    private commonAPI: UploadInput;\r\n    private apiArray = ['upload','remove'];\r\n    constructor(@Optional() @Inject(FFileUploadAPIServiceToken) exConfig: FFileUploadServerConfig) {\r\n\r\n        this.config = { upload: null,  remove: null };\r\n        this.commonAPI = { type: 'config', url: '', timeout: 0, headers: null, data: {} };\r\n        if (exConfig) {\r\n            for (const key in this.commonAPI) {\r\n                if (exConfig.hasOwnProperty(key)) {\r\n                    this.commonAPI[key] = exConfig[key];\r\n                }\r\n            }\r\n        }\r\n        this.apiArray.forEach(item => {\r\n            this.config[item] = Object.assign({}, this.commonAPI);\r\n            if (exConfig && exConfig.hasOwnProperty(item)) {\r\n                if (exConfig[item].hasOwnProperty('url')) {\r\n                    this.config[item] = Object.assign({}, this.config[item], exConfig[item], { url: this.combinUrl(exConfig[item].url) });\r\n                }\r\n            }\r\n        });\r\n\r\n        // if (exConfig) {\r\n        //     Object.assign(this.config, exConfig);\r\n        // }\r\n    }\r\n    private combinUrl(typeUrl) {\r\n        let result = typeUrl;\r\n        result = this.commonAPI.url + typeUrl;\r\n        return result;\r\n    }\r\n    /**\r\n     * 获取API定义\r\n     */\r\n    getAPI() {\r\n        return this.config;\r\n    }\r\n    /**\r\n     * \r\n     * @param type \r\n     * @param object \r\n     */\r\n    getAssignAPI(type, object) {\r\n        // removeAll,uploadAll 用于内部传递使用，应当传递的是remove和upload对应的参数\r\n        // 通过设置对应关系\r\n        const infoMap = { 'removeAll': 'remove', 'uploadAll': 'upload','multipartUpload':'upload' };\r\n        if(infoMap.hasOwnProperty(type)){\r\n            type=infoMap[type];\r\n        }\r\n        if (this.config[type] && object) {\r\n            return Object.assign({}, this.config[type], object);\r\n        }\r\n        if (this.config[type]) {\r\n            return this.config[type];\r\n        }\r\n        if (object) {\r\n            return object;\r\n        }\r\n        return null;\r\n\r\n    }\r\n}\r\n","import { Subscription, Observable } from 'rxjs';\r\n\r\nexport interface UploaderOptions {\r\n    concurrency?: number;\r\n    allowedContentTypes?: string[];\r\n    maxUploads?: number;\r\n    maxFileSize?: number;//MB为单位\r\n    uploadedCount?: number;\r\n}\r\n\r\nexport interface BlobFile extends Blob {\r\n    name: string;\r\n}\r\n\r\nexport enum UploadStatus {\r\n    Queue,\r\n    Uploading,\r\n    Done,\r\n    Cancelled,\r\n    Remove,// 正在删除\r\n    Error\r\n}\r\n\r\nexport interface UploadProgress {\r\n    status: UploadStatus;\r\n    data?: {\r\n        percentage: number;\r\n        speed?: number;\r\n        speedHuman?: string;\r\n        startTime?: number | null;\r\n        endTime?: number | null;\r\n        eta?: number | null;\r\n        etaHuman?: string | null;\r\n    };\r\n}\r\nexport interface FUploadFileExtend {\r\n    id: string;\r\n    name: string;\r\n    disabled?: boolean;\r\n    checked?: boolean;\r\n    size?: number | undefined;//文件大小\r\n    createTime?: string | undefined;//创建日期\r\n    type?: string;\r\n    extend?: any | null;//记录返回数据\r\n    extendStatus?: number;\r\n    extendHeaders?: { [key: string]: string } | null;\r\n}\r\n\r\nexport interface UploadFile {\r\n    id: string;\r\n    fileIndex: number;\r\n    lastModifiedDate: Date;\r\n    name: string;\r\n    size: number;\r\n    type: string;\r\n    form: FormData;\r\n    progress: UploadProgress;//\r\n    response?: any;//记录返回数据\r\n    responseStatus?: number;\r\n    sub?: Subscription | any;\r\n    nativeFile?: File;\r\n    responseHeaders?: { [key: string]: string };\r\n}\r\n\r\n\r\nexport interface UploadOutput {\r\n    type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\r\n    | 'dragOut' | 'drop' | 'removed' | 'allRemoved' | 'rejected' | 'allDone' | 'allStart' | 'allCancelled' | 'error';\r\n    file?: UploadFile;\r\n    nativeFile?: File;\r\n    message?: String;\r\n    files?: UploadFile[];\r\n}\r\nexport interface UploadConfig {\r\n    url?: string;\r\n    method?: string;// POST，GET \r\n    id?: string;\r\n    fieldName?: string;\r\n    fileIndex?: number;\r\n    file?: UploadFile;\r\n    data?: {\r\n        [key: string]: any,\r\n        extProperty?: DocMetaProperty | null //\r\n    };\r\n    headers?: { [key: string]: string } | null;\r\n    includeWebKitFormBoundary?: boolean; // If false, only the file is send trough xhr.send (WebKitFormBoundary is omit)\r\n    withCredentials?: boolean;\r\n    timeout?: number;// 暂不支持\r\n}\r\n\r\nexport interface UploadInput extends UploadConfig {\r\n    type: 'upload' | 'uploadAll' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll' | 'config' | 'hide' | 'multipartUpload';\r\n}\r\n\r\n\r\nexport abstract class UploadServerService {\r\n    constructor() {\r\n\r\n    }\r\n    abstract upload(files: UploadFile[], event: UploadInput, extendService: any): Observable<any>;\r\n    abstract remove(files: UploadFile[], event: UploadInput, extendService: any): Observable<any>;\r\n    abstract multipartUpload(file: UploadFile, event: UploadInput, extendService: any): Observable<any>;\r\n}\r\n\r\nexport interface DocMetaProperty {\r\n    extProperties1?: string;\r\n    extProperties2?: string;\r\n    extProperties3?: string;\r\n    extProperties4?: string;\r\n    extProperties5?: string;\r\n}","import { UploadFile, UploadStatus, FUploadFileExtend } from '../model';\r\nconst isObject = value => typeof value === 'object' && value !== null;\r\nconst isArray = value => Array.isArray(value);\r\n// 暂时用不到\r\nconst deepCloneObject = (src) => {\r\n    if (!isObject(src)) return src;\r\n    const target = isArray(src) ? [] : {};\r\n    for (const key in src) {\r\n        if (!src.hasOwnProperty(key)) continue;\r\n        const v = src[key];\r\n        target[key] = v && isObject(v) ? deepCloneObject(v) : v;\r\n    }\r\n    return target;\r\n}\r\n\r\nconst humanizeBytes = (bytes: number): string => {\r\n    if (bytes === 0) {\r\n        return '0 Byte';\r\n    }\r\n\r\n    const k = 1024;\r\n    const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n    const i: number = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\nconst generateId = (): string => {\r\n    return Math.random().toString(36).substring(7);\r\n}\r\nconst makeUploadFile = (file: File, index: number): UploadFile => {\r\n    return {\r\n        fileIndex: index,\r\n        id: generateId(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        form: new FormData(),\r\n        progress: {\r\n            status: UploadStatus.Queue,\r\n            data: {\r\n                percentage: 0,\r\n                speed: 0,\r\n                speedHuman: `${humanizeBytes(0)}/s`,\r\n                startTime: null,\r\n                endTime: null,\r\n                eta: null,\r\n                etaHuman: null\r\n            }\r\n        },\r\n        lastModifiedDate: new Date(file.lastModified),\r\n        sub: undefined,\r\n        nativeFile: file\r\n    };\r\n}\r\n\r\nconst allMineTypes = {\r\n    '.pdf': 'application/pdf',\r\n    '.gif': 'image/gif',\r\n    '.png': 'image/png',\r\n    '.txt': 'text/plain',\r\n    '.htm': 'text/html',\r\n    '.html': 'text/html',\r\n    '.jpe': 'image/jpeg',\r\n    '.jpeg': 'image/jpeg',\r\n    '.jpg': 'image/jpeg',\r\n    '.js': 'text/javascript,application/javascript',\r\n    '.json': 'application/json',\r\n    '.pps': 'application/vnd.ms-powerpoint',\r\n    '.ppt': 'application/vnd.ms-powerpoint',\r\n    '.doc': 'application/msword',\r\n    '.xml': 'text/xml,application/xml',\r\n    '.zip': 'aplication/zip',\r\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    '.wps': 'application/vnd.ms-works',\r\n    '.3gpp': 'audio/3gpp, video/3gpp',\r\n    '.ac3': 'audio/ac3',\r\n    '.asf': 'allpication/vnd.ms-asf',\r\n    '.au': 'audio/basic',\r\n    '.css': 'text/css',\r\n    '.csv': 'text/csv',\r\n    '.dot': 'application/msword',\r\n    '.dtd': 'application/xml-dtd',\r\n    '.dwg': 'image/vnd.dwg',\r\n    '.dxf': 'image/vnd.dxf',\r\n    '.jp2': 'image/jp2',\r\n    '.mp2': 'audio/mpeg, video/mpeg',\r\n    '.mp3': ' audio/mpeg',\r\n    '.mp4': 'audio/mp4, video/mp4',\r\n    '.mpeg': 'video/mpeg',\r\n    '.mpg': 'video/mpeg',\r\n    '.mpp': 'application/vnd.ms-project',\r\n    '.ogg': 'application/ogg, audio/ogg',\r\n    '.pot': 'application/vnd.ms-powerpoint',\r\n    '.rtf': 'application/rtf,text/rtf',\r\n    '.svf': 'image/vnd.svf',\r\n    '.tif': 'image/tiff',\r\n    '.tiff': 'image/tiff',\r\n    '.wdb': 'application/vnd.ms-works',\r\n    '.xhtml': 'application/xhtml+xml',\r\n    '.xlc': 'application/vnd.ms-excel',\r\n    '.xlm': 'application/vnd.ms-excel',\r\n    '.xls': 'application/vnd.ms-excel',\r\n    '.xlt': 'application/vnd.ms-excel',\r\n    '.xlw': 'application/vnd.ms-excel'\r\n};\r\nconst findMineTypeBySuffix = (suffix: string): string => {\r\n    if (allMineTypes.hasOwnProperty(suffix)) {\r\n        return allMineTypes[suffix];\r\n    }\r\n    return '';\r\n}\r\n\r\nconst changeUploadFileToFileExtend = (files: UploadFile[]): FUploadFileExtend[] => {\r\n    // 如果是数组\r\n    let result=[];\r\n    files.forEach(file=>{\r\n        let preExtend = { id: '', name: '', size: 0, type: '', extend: null, extendStatus: 0, extendHeaders: null } as FUploadFileExtend;\r\n        for (let resultProp in preExtend) {\r\n            let tempProp = resultProp.replace('extend', 'response');\r\n            if (file.hasOwnProperty(tempProp)) {\r\n                preExtend[resultProp] = file[tempProp];\r\n            }\r\n        }\r\n        result.push(preExtend);\r\n    });\r\n    \r\n    return result;\r\n}\r\n\r\nexport const FFileUtils = {\r\n    isObject,\r\n    isArray,\r\n    deepCloneObject,\r\n    humanizeBytes,\r\n    makeUploadFile,\r\n    findMineTypeBySuffix,\r\n    changeUploadFileToFileExtend\r\n}","import { EventEmitter, Optional } from '@angular/core';\r\nimport { Observable, Subject, Subscription, of } from 'rxjs';\r\nimport { mergeMap, finalize } from 'rxjs/operators';\r\nimport { FFileUtils } from '../utils/index';\r\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile, UploadServerService, UploaderOptions } from '../model/index';\r\n\r\nexport class FFileUploaderService {\r\n  queue: UploadFile[];\r\n  serviceEvents: EventEmitter<UploadOutput>;\r\n  uploadScheduler: Subject<{ file: UploadFile, event: UploadInput, files?: UploadFile[] }>;\r\n  subs: { id: string, sub: Subscription, ids?: string[] }[];\r\n  allowedContentTypes: string[] = ['*'];\r\n  //默认不限制,0代表不限制 Number.POSITIVE_INFINITY\r\n  maxUploads: number = 0;\r\n  // 单位M，默认是12M,0代表不限制\r\n  maxFileSize: number = 12;\r\n  concurrency: number = Number.POSITIVE_INFINITY;\r\n  uploadedCount:number=0;\r\n  private extendServerConfig = null;\r\n  constructor(\r\n    @Optional() private uploadServerSer: UploadServerService\r\n  ) {\r\n\r\n    this.queue = [];\r\n    this.serviceEvents = new EventEmitter<UploadOutput>();\r\n    this.uploadScheduler = new Subject();\r\n    this.subs = [];\r\n\r\n    this.uploadScheduler\r\n      .pipe(\r\n        mergeMap(upload => {\r\n          return this.serverMethod(upload);\r\n        }, this.concurrency)\r\n      )\r\n      .subscribe(uploadOutput => {\r\n        // if (uploadOutput.type == 'removed' || uploadOutput.type == 'done') {\r\n        //   // 删除或者done移除\r\n        //   const subIndex = this.subs.findIndex(sub => sub.id === uploadOutput.file.id);\r\n        //   if (subIndex > -1 && this.subs[subIndex].sub) {\r\n        //     this.subs[subIndex].sub.unsubscribe();\r\n        //   }\r\n        //   this.subs.splice(subIndex, 1);\r\n        // }\r\n        if (uploadOutput.type == 'removed') {\r\n          // 事件中返回的都是\r\n          this.queue = this.queue.filter(item => item.progress.status !== UploadStatus.Remove);\r\n          if (!uploadOutput.hasOwnProperty('message')) {\r\n            uploadOutput['message'] = \"被删除\";\r\n          }\r\n        }\r\n        if (uploadOutput.type == 'error') {\r\n          // 上传失败的附件移除\r\n          this.queue = this.queue.filter(queueItem => {\r\n            return uploadOutput.files.findIndex(item => queueItem.id == item.id) < 0;\r\n          });\r\n        }\r\n        this.serviceEvents.emit(uploadOutput);\r\n      });\r\n  }\r\n  setOptions(options: UploaderOptions) {\r\n    // 重置文件大小、类型、个数限制\r\n    if (options) {\r\n      for (let prop in options) {\r\n        this[prop] = options[prop];\r\n      }\r\n    }\r\n  }\r\n  handleFiles(incomingFiles: FileList): void {\r\n\r\n    const allowedIncomingFiles: File[] = [].reduce.call(incomingFiles, (acc: File[], checkFile: File, i: number) => {\r\n      const futureQueueLength = acc.length + this.queue.length + 1;\r\n      let judgeResult = this.rejectedReason(checkFile.name, checkFile.type, futureQueueLength, checkFile.size);\r\n      if (judgeResult.allowed) {\r\n        acc = acc.concat(checkFile);\r\n      } else {\r\n        // 不符合当前文件类型或者内容超出限制，抛出事件\r\n        const rejectedFile: UploadFile = FFileUtils.makeUploadFile(checkFile, i);\r\n        this.serviceEvents.emit({ type: 'rejected', file: rejectedFile, message: judgeResult.message });\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    // 构造文件结构，并单个抛出事件\r\n    [].map.call(allowedIncomingFiles, (file: File, i: number) => {\r\n      const uploadFile: UploadFile = FFileUtils.makeUploadFile(file, i);\r\n      this.queue.push(uploadFile);\r\n      this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\r\n    });\r\n\r\n    // 所有的文件都已经添加，抛出事件\r\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\r\n  }\r\n  private rejectedReason(name, type, queuelength, size) {\r\n    let allowed = false;\r\n    let message = '';\r\n    // 已存在同名文件\r\n    let findDuplicateIndex = this.queue.findIndex(file => file.name == name);\r\n    if (findDuplicateIndex > -1) {\r\n      message = '上传失败：已存在同名文件';\r\n    } else if (!this.isContentTypeAllowed(name)) {\r\n      message = '上传失败：只允许上传' + this.allowedContentTypes.join(',') + '类型的文档';\r\n    } else if (this.maxUploads > 0 && (this.maxUploads<=this.uploadedCount|| (queuelength +this.uploadedCount) > this.maxUploads)) {\r\n      message = '上传失败：文件总个数超出' + this.maxUploads + '限制';\r\n    } else if (!this.isFileSizeAllowed(size)) {\r\n      message = '上传失败：单个文件大小超出' + this.maxFileSize + 'MB的限制';\r\n    } else if (size == 0) {\r\n      message = '上传失败：不允许文件为空'\r\n    } else {\r\n      allowed = true;\r\n    }\r\n    return {\r\n      allowed, message\r\n    }\r\n  }\r\n  /**\r\n   * 从前端传来事件，进行服务器端方法类型判断\r\n   * @param input \r\n   */\r\n  initInputEvents(input: EventEmitter<UploadInput>): Subscription {\r\n    //debugger\r\n    return input.subscribe((event: UploadInput) => {\r\n      //debugger\r\n      switch (event.type) {\r\n        case 'upload':\r\n        case 'multipartUpload':\r\n          const uploadFileIndex = this.queue.findIndex(file => file === event.file);\r\n          if (uploadFileIndex !== -1 && event.file) {\r\n            this.uploadScheduler.next({ files: [this.queue[uploadFileIndex]], event: event, file: null });\r\n          }\r\n          break;\r\n        case 'uploadAll':\r\n          const files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\r\n          if (files.length > 0) {\r\n            event.type = 'upload';\r\n            this.uploadScheduler.next({ files: files, event: event, file: null })\r\n          }\r\n          break;\r\n        case 'cancel':\r\n          const id = event.id || null;\r\n          if (!id) {\r\n            return;\r\n          }\r\n          const fileIndex = this.queue.findIndex(file => file.id === id);\r\n          if (fileIndex !== -1) {\r\n            this.serviceEvents.emit({ type: 'cancelled', files: [this.queue[fileIndex]], message: '已取消附件上传' });\r\n            this.queue.splice(fileIndex, 1);\r\n          }\r\n          break;\r\n          // case 'cancel':\r\n          // debugger\r\n          // const id = event.id || null;\r\n          // if (!id) {\r\n          //   return;\r\n          // }\r\n          // const subs = this.subs.filter(sub => sub.id === id);\r\n          // subs.forEach(sub => {\r\n          //   if (sub.sub) {\r\n          //     sub.sub.unsubscribe();\r\n          //     const fileIndex = this.queue.findIndex(file => file.id === id);\r\n          //     if (fileIndex !== -1) {\r\n          //       this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\r\n          //       this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\r\n          //     }\r\n          //   }\r\n          // });\r\n          break;\r\n        // case 'cancelAll':\r\n        //   this.subs.forEach(sub => {\r\n        //     if (sub.sub) {\r\n        //       sub.sub.unsubscribe();\r\n        //     }\r\n\r\n        //     const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\r\n        //     if (file) {\r\n        //       file.progress.status = UploadStatus.Cancelled;\r\n        //       this.serviceEvents.emit({ type: 'cancelled', file: file });\r\n        //     }\r\n        //   });\r\n        //   break;\r\n        case 'hide':\r\n          if (!event.id) {\r\n            return;\r\n          }\r\n          let ids = event.id.split(',');\r\n          this.queue = this.queue.filter(file => {\r\n            let tIndex = ids.findIndex(tId => tId == file.id);\r\n            return tIndex > -1 ? false : true;\r\n          });\r\n          break;\r\n        case 'cancelAll':\r\n          // 取消，直接从队列中移除，不用修改状态\r\n          const queueFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Queue);\r\n          if (queueFiles.length) {\r\n            this.serviceEvents.emit({ type: 'cancelled', files: queueFiles, message: '已取消附件上传' });\r\n            this.queue = this.queue.filter(uploadFile => uploadFile.progress.status != UploadStatus.Queue);\r\n          }\r\n          break;\r\n        case 'remove':\r\n          if (!event.id) {\r\n            return;\r\n          }\r\n          const removeIndex = this.queue.findIndex(file => file.id === event.id);\r\n          if (removeIndex !== -1) {\r\n            // 得有个开始删除和已经删除\r\n            this.queue[removeIndex].progress.status = UploadStatus.Remove\r\n            this.uploadScheduler.next({ files: [this.queue[removeIndex]], event: event, file: null });\r\n          }\r\n          break;\r\n        case 'removeAll':\r\n          const removeQueueFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Queue);\r\n          if (removeQueueFiles.length) {\r\n            this.serviceEvents.emit({ type: 'cancelled', files: removeQueueFiles, message: '删除附件成功' });\r\n            this.queue = this.queue.filter(uploadFile => uploadFile.progress.status != UploadStatus.Queue);\r\n          }\r\n          // 正在上传的附件是如何处理\r\n          // const doneFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Done);\r\n          if (this.queue.length) {\r\n            event.type = 'remove';\r\n            this.queue.map(item => item.progress.status = UploadStatus.Remove);\r\n            this.uploadScheduler.next({ files: this.queue, event: event, file: null });\r\n          }\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  setExtendServerConfig(extendSer) {\r\n    this.extendServerConfig = extendSer;\r\n  }\r\n\r\n  serverMethod(upload: { file: UploadFile, event: UploadInput, files?: UploadFile[] }): Observable<UploadOutput> {\r\n    return new Observable(observer => {\r\n      let sub;\r\n      let ids = upload.files.map(fileItem => fileItem.id);\r\n      switch (upload.event.type) {\r\n        case 'upload':\r\n          sub = this.upload(upload.files, upload.event);\r\n          break;\r\n        case 'multipartUpload':\r\n          sub=this.multipartUpload(upload.files[0], upload.event);\r\n          break;\r\n        // case 'uploadAll':\r\n        //   ids = upload.files.map(fileItem => fileItem.id);\r\n        //   sub = this.uploadAll(upload.files, upload.event);\r\n        //   break;\r\n        case 'remove':\r\n          sub = this.remove(upload.files, upload.event);\r\n          break;\r\n        // case 'removeAll':\r\n        //   ids = upload.files.map(fileItem => fileItem.id);\r\n        //   sub = this.removeAll(upload.files, upload.event);\r\n        //   break;\r\n        default:\r\n          sub = null;\r\n      }\r\n      if (!sub) {\r\n        return;\r\n      }\r\n      sub.pipe(finalize(() => {\r\n        // debugger;\r\n        if (!observer.closed) {\r\n          observer.complete();\r\n        }\r\n      }))\r\n        .subscribe(output => {\r\n          // debugger;\r\n          observer.next(output);\r\n        }, err => {\r\n          observer.next(err);\r\n        }, () => {\r\n          observer.complete();\r\n        });\r\n      this.subs.push({ ids: ids, sub: sub, id: '' });\r\n      // switch (upload.event.type) {\r\n      //   case 'uploadAll':\r\n      //     this.subs.push({ ids: ids, sub: sub, id: '' });\r\n      //     break;\r\n      //   case 'removeAll':\r\n      //     this.subs.push({ ids: ids, sub: sub, id: '' });\r\n      //     break;\r\n      //   default:\r\n\r\n      // }\r\n\r\n    });\r\n  }\r\n  /**\r\n   * 单个文件上传\r\n   * @param file \r\n   * @param event \r\n   */\r\n  // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\r\n  //   const uploadFile = <BlobFile>file.nativeFile;\r\n  //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n  //   // 已经被取消的不能被上传\r\n  //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n  //     return new Observable(observer => {\r\n  //       observer.complete();\r\n  //     });\r\n  //   }\r\n  //   // 抛出开始上传的事件\r\n  //   this.serviceEvents.emit({ type: 'start', files: [file] });\r\n  //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);\r\n  // }\r\n  multipartUpload(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\r\n    // 抛出开始上传的事件\r\n    this.serviceEvents.emit({ type: 'start', files: [file] });\r\n    return this.uploadServerSer.multipartUpload(file, event, this.extendServerConfig);\r\n  }\r\n  upload(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n    // 抛出开始上传的事件\r\n    this.serviceEvents.emit({ type: 'start', files: files });\r\n    return this.uploadServerSer.upload(files, event, this.extendServerConfig);\r\n  }\r\n\r\n  remove(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n    return this.uploadServerSer.remove(files, event, this.extendServerConfig);\r\n  }\r\n  // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n  //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);\r\n  // }\r\n  // 重置\r\n  reset() {\r\n    this.queue = [];\r\n    //this.uploadScheduler = new Subject();\r\n    // this.subs.forEach(sub => {\r\n    //   if (sub.sub) {\r\n    //     sub.sub.unsubscribe();\r\n    //   }\r\n    // });\r\n    this.subs = [];\r\n  }\r\n\r\n  // 暂时\r\n  setContentTypes(contentTypes: string[]): void {\r\n    if (typeof contentTypes !== 'undefined' && contentTypes instanceof Array) {\r\n      if (contentTypes.find((type: string) => type === '*') !== undefined) {\r\n        this.allowedContentTypes = ['*'];\r\n      } else {\r\n        this.allowedContentTypes = contentTypes;\r\n      }\r\n      return;\r\n    }\r\n    this.allowedContentTypes = ['*'];\r\n  }\r\n\r\n  allContentTypesAllowed(): boolean {\r\n    return this.allowedContentTypes.find((type: string) => type === '*') !== undefined;\r\n  }\r\n  /**\r\n   * \r\n   * @param name \r\n   */\r\n  isContentTypeAllowed(name: string): boolean {\r\n    if (this.allContentTypesAllowed()) {\r\n      return true;\r\n    }\r\n    // 附件没有后缀\r\n    if (name.lastIndexOf('.') < 0) {\r\n      return false;\r\n    }\r\n    let namesuffix = name.substr(name.lastIndexOf('.'));\r\n    // 简化计算\r\n    return this.allowedContentTypes.findIndex(item =>  item.toLowerCase() == namesuffix.toLowerCase()) > -1;\r\n  }\r\n\r\n  isFileSizeAllowed(fileSize: number): boolean {\r\n    if (!this.maxFileSize) {\r\n      return true;\r\n    }\r\n    // fileSize是b单位 maxFileSize是MB单位\r\n    return fileSize <= this.maxFileSize * 8 * 1024 * 1024;\r\n  }\r\n}\r\n","\r\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile, UploadServerService } from '../model/index';\r\nimport { Observable } from 'rxjs';\r\nimport { FFileUtils } from '../utils/index';\r\nexport class FFileUploadDefaultService extends UploadServerService {\r\n    /**\r\n     * 2019年3月2日，先假定一个一个传入\r\n     * @param file \r\n     * @param event \r\n     */\r\n    upload(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n        let file = files[0];\r\n        return new Observable(observer => {\r\n            const url = event.url || '';\r\n            const method = event.method || 'POST';\r\n            const data = event.data || {};\r\n            const headers = event.headers || {};\r\n\r\n            const xhr = new XMLHttpRequest();\r\n            const time: number = new Date().getTime();\r\n            let progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\r\n            let speed = 0;\r\n            let eta: number | null = null;\r\n\r\n            xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\r\n                if (e.lengthComputable) {\r\n                    const percentage = Math.round((e.loaded * 100) / e.total);\r\n                    const diff = new Date().getTime() - time;\r\n                    speed = Math.round(e.loaded / diff * 1000);\r\n                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\r\n                    eta = Math.ceil((e.total - e.loaded) / speed);\r\n\r\n                    file.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data: {\r\n                            percentage: percentage,\r\n                            speed: speed,\r\n                            speedHuman: `${FFileUtils.humanizeBytes(speed)}/s`,\r\n                            startTime: progressStartTime,\r\n                            endTime: null,\r\n                            eta: eta,\r\n                            etaHuman: this.secondsToHuman(eta)\r\n                        }\r\n                    };\r\n\r\n                    observer.next({ type: 'uploading', file: file });\r\n                }\r\n            }, false);\r\n\r\n            xhr.upload.addEventListener('error', (e: Event) => {\r\n                observer.error(e);\r\n                observer.complete();\r\n            });\r\n\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState === XMLHttpRequest.DONE) {\r\n                    const speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\r\n                    file.progress = {\r\n                        status: UploadStatus.Done,\r\n                        data: {\r\n                            percentage: 100,\r\n                            speed: speedAverage,\r\n                            speedHuman: `${FFileUtils.humanizeBytes(speedAverage)}/s`,\r\n                            startTime: progressStartTime,\r\n                            endTime: new Date().getTime(),\r\n                            eta: eta,\r\n                            etaHuman: this.secondsToHuman(eta || 0)\r\n                        }\r\n                    };\r\n\r\n                    file.responseStatus = xhr.status;\r\n\r\n                    try {\r\n                        file.response = JSON.parse(xhr.response);\r\n                    } catch (e) {\r\n                        file.response = xhr.response;\r\n                    }\r\n\r\n                    file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\r\n\r\n                    observer.next({ type: 'done', files: [file] });\r\n\r\n                    observer.complete();\r\n                }\r\n            };\r\n\r\n            xhr.open(method, url, true);\r\n            xhr.withCredentials = event.withCredentials ? true : false;\r\n\r\n            try {\r\n                const uploadFile = <BlobFile>file.nativeFile;\r\n                // const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n                // if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n                //     observer.complete();\r\n                // }\r\n\r\n                Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\r\n\r\n                let bodyToSend: FormData | BlobFile;\r\n\r\n                if (event.includeWebKitFormBoundary !== false) {\r\n                    Object.keys(data).forEach(key => file.form.append(key, data[key]));\r\n                    file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\r\n                    bodyToSend = file.form;\r\n                } else {\r\n                    bodyToSend = uploadFile;\r\n                }\r\n\r\n                //this.serviceEvents.emit({ type: 'start', file: file });\r\n                xhr.send(bodyToSend);\r\n            } catch (e) {\r\n                observer.complete();\r\n            }\r\n\r\n            return () => {\r\n                xhr.abort();\r\n            };\r\n        });\r\n    }\r\n    // 删除附件\r\n    remove(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n        return new Observable(observer => {\r\n            observer.next({ type: 'removed', files: files });\r\n            observer.complete();\r\n        });\r\n    }\r\n    multipartUpload(file: UploadFile, event: UploadInput, extendService: any): Observable<any>{\r\n        return new Observable(observer => {\r\n            observer.complete();\r\n        });\r\n    };\r\n\r\n    private secondsToHuman(sec: number): string {\r\n        return new Date(sec * 1000).toISOString().substr(11, 8);\r\n    }\r\n    private parseResponseHeaders(httpHeaders: string) {\r\n        if (!httpHeaders) {\r\n            return;\r\n        }\r\n\r\n        return httpHeaders.split('\\n')\r\n            .map((x: string) => x.split(/: */, 2))\r\n            .filter((x: string[]) => x[0])\r\n            .reduce((acc: Object, x: string[]) => {\r\n                acc[x[0]] = x[1];\r\n                return acc;\r\n            }, {});\r\n    }\r\n}","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploadInput, UploaderOptions } from '../model/index';\r\nimport { FFileUploaderService } from '../service/index';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[FFileDrop]'\r\n})\r\nexport class FFileDropDirective implements OnInit, OnDestroy {\r\n    private tDisabled = false;\r\n    // 是否禁用\r\n    @Input()\r\n    set disabled(value: boolean) {\r\n        if (this.tDisabled !== value) {\r\n            this.tDisabled = value;\r\n            if (value) {\r\n                this.unbindDragAndDropEvent();\r\n            } else {\r\n                this.bindDragAndDropEvent();\r\n            }\r\n        }\r\n    };\r\n    get disabled(): boolean {\r\n        return this.tDisabled;\r\n    }\r\n    // 配置\r\n    @Input()\r\n    set options(value: UploaderOptions) {\r\n        this.upload.setOptions(value);\r\n    };\r\n    // 已上传\r\n    @Input()\r\n    set uploadedCount(value){\r\n        this.upload.setOptions({'uploadedCount':value});\r\n    }\r\n    // 传递\r\n    @Input() uploadInput: EventEmitter<UploadInput>;\r\n    @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n    //upload: FFileUploaderService;\r\n    el: HTMLInputElement;\r\n\r\n    _sub: Subscription[];\r\n\r\n    // eventListener\r\n    dropListener: any = null;\r\n    dragOverListener: any = null;\r\n    dragLeaveListener: any = null;\r\n    dragEnterListener: any = null;\r\n\r\n    constructor(public elementRef: ElementRef, private upload: FFileUploaderService) {\r\n        this.uploadOutput = new EventEmitter<UploadOutput>();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._sub = [];\r\n        this.el = this.elementRef.nativeElement;\r\n\r\n        this._sub.push(\r\n            this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n                this.uploadOutput.emit(event);\r\n            })\r\n        );\r\n\r\n        if (this.uploadInput instanceof EventEmitter) {\r\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n        }\r\n        // 绑定事件\r\n        if (!this.disabled) {\r\n            this.bindDragAndDropEvent();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDragAndDropEvent();\r\n        this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n    private bindDragAndDropEvent() {\r\n        // this.ngzone.runOutsideAngular(() => {\r\n        this.dropListener = this.onDrop.bind(this);\r\n        this.el.addEventListener('drop', this.dropListener);\r\n        this.dragOverListener = this.onDragOver.bind(this);\r\n        this.el.addEventListener('dragover', this.dragOverListener);\r\n        this.dragLeaveListener = this.onDragLeave.bind(this);\r\n        this.el.addEventListener('dragleave', this.dragLeaveListener);\r\n        this.dragEnterListener = this.onDropEnter.bind(this);\r\n        this.el.addEventListener('dragenter', this.dragEnterListener);\r\n        //  });\r\n    }\r\n    private unbindDragAndDropEvent() {\r\n        this.dropListener && this.el.removeEventListener('drop', this.dropListener);\r\n        this.dragOverListener && this.el.removeEventListener('dragover', this.dragOverListener);\r\n        this.dragLeaveListener && this.el.removeEventListener('dragleave', this.dragLeaveListener);\r\n        this.dragEnterListener && this.el.removeEventListener('dragenter', this.dragEnterListener);\r\n    }\r\n\r\n    onDropEnter = (e: Event) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    // @HostListener('drop', ['$event'])\r\n    public onDrop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'drop' };\r\n        // console.log('dorp Events');\r\n        this.uploadOutput.emit(event);\r\n        this.upload.handleFiles(e.dataTransfer.files);\r\n    }\r\n\r\n    // @HostListener('dragover', ['$event'])\r\n    public onDragOver(e: Event) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'dragOver' };\r\n        this.uploadOutput.emit(event);\r\n    }\r\n\r\n    // @HostListener('dragleave', ['$event'])\r\n    public onDragLeave(e: Event) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'dragOut' };\r\n        this.uploadOutput.emit(event);\r\n    }\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n       /*if (this.el) {\r\n            this._sub.forEach(sub => sub.unsubscribe());\r\n            this._sub = [];\r\n            this.upload.reset();\r\n        }*/\r\n        this.upload.reset();\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploaderOptions } from '../model/f-file-upload.model';\r\nimport { FFileUploaderService } from '../service/f-file-uploader.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[FFileSelect]'\r\n})\r\nexport class FFileSelectDirective implements OnInit, OnDestroy {\r\n  private tDisabled = false;\r\n  @Input()\r\n  set disabled(value: boolean) {\r\n    if (this.tDisabled !== value) {\r\n      this.tDisabled = value;\r\n      if (value) {\r\n        this.unbindEvent();\r\n      } else {\r\n        this.bindEvent();\r\n      }\r\n    }\r\n  }\r\n  get disabled(): boolean {\r\n    return this.tDisabled;\r\n  }\r\n  @Input()\r\n  set options(value: UploaderOptions) {\r\n    if (value) {\r\n      this.upload.setOptions(value);\r\n    }\r\n  };\r\n   // 已上传\r\n   @Input()\r\n   set uploadedCount(value){\r\n       this.upload.setOptions({'uploadedCount':value});\r\n   }\r\n  @Input() uploadInput: EventEmitter<any>;\r\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n  //upload: FFileUploaderService;\r\n  el: HTMLInputElement;\r\n  private _sub: Subscription[];\r\n  private changeListener: any = null;\r\n\r\n  constructor(public elementRef: ElementRef, private upload: FFileUploaderService) {\r\n    this.uploadOutput = new EventEmitter<UploadOutput>();\r\n    this.el = this.elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._sub = [];\r\n    // 对外抛出事件\r\n    this._sub.push(\r\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n        this.uploadOutput.emit(event);\r\n      })\r\n    );\r\n    // 对内的事件\r\n    if (this.uploadInput instanceof EventEmitter) {\r\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n    }\r\n    if (!this.disabled) {\r\n      this.bindEvent();\r\n    }\r\n  }\r\n  private bindEvent() {\r\n    this.changeListener = this.onChange.bind(this);\r\n    this.el.addEventListener('change', this.changeListener);\r\n  }\r\n  private unbindEvent() {\r\n    this.changeListener = null;\r\n    this.el.removeEventListener('change', this.changeListener);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.el) {\r\n      this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n  }\r\n\r\n  onChange = () => {\r\n    if (this.el.files) {\r\n      this.upload.handleFiles(this.el.files);\r\n      this.el.value=null;\r\n    }\r\n  }\r\n  /**\r\n   * 重置\r\n   */\r\n  reset(){\r\n    // if (this.el) {\r\n    //   //this._sub.forEach(sub => sub.unsubscribe());\r\n    //   //this._sub=[];\r\n    //   this.upload.reset();\r\n    // }    \r\n    this.upload.reset();\r\n  }\r\n}\r\n","import {  Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[filePreviewListTypeTemplate]'\r\n})\r\nexport class FFilePreviewListTypeTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) { }\r\n}\r\n\r\n@Directive({\r\n    selector: '[filePreviewToolbarTemplate]'\r\n})\r\nexport class FFilePreviewToolbarTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) { }\r\n}\r\n","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[fFielUpload],[fFileUpload]',\r\n})\r\nexport class FFileUploadDirective {\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { FFileUtils } from '../utils/f-file.utils';\r\nimport {DateTimeHelperService} from '@farris/ui-common/date';\r\n@Pipe({\r\n    name: 'fFileSize'\r\n})\r\nexport class FFileSizePipe implements PipeTransform {\r\n\r\n    transform(value: any, args?: any): any {\r\n        // 如果是字符串\r\n        let tvalue=value;\r\n        if(!value){\r\n            return \"0 Byte\";\r\n        }\r\n        if(typeof value =='string'){\r\n            tvalue=parseInt(value);\r\n        }\r\n        return FFileUtils.humanizeBytes(tvalue);\r\n    }\r\n}\r\n\r\n@Pipe({\r\n    name: 'fFileDate'\r\n})\r\nexport class FFileDatePipe implements PipeTransform {\r\n    constructor(private dateSer:DateTimeHelperService){\r\n\r\n    }\r\n    transform(value: any, returnFormat: string='yyyy-MM-dd'): any {        \r\n        return this.dateSer.formatTo(value,returnFormat);\r\n    }\r\n}","import { Component, OnInit, HostBinding, Input, ViewChild, ElementRef, Host } from '@angular/core';\r\n@Component({\r\n  selector: 'f-file-view-image',\r\n  templateUrl: './f-file-view-image.component.html',\r\n  styleUrls: ['./f-file-view-image.component.css']\r\n})\r\nexport class FFileViewImageComponent implements OnInit {\r\n  @Input() maxHeight = 200;\r\n  @Input() maxWidth = 300;\r\n  @HostBinding('class.f-file-view-image') cls = true;\r\n  @HostBinding('style.height') selfHeight='50px';\r\n  @ViewChild('canvas') canvas: ElementRef;\r\n  private tFile: File;\r\n  @Input()\r\n  set file(fileContent: File) {\r\n    this.tFile = fileContent;\r\n    this.createImageByCanvas();\r\n  }\r\n  get file(): File {\r\n    return this.tFile;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  private changeImageSize(originWidth,originHeight) {\r\n\r\n    // 图片原始尺寸\r\n\r\n    // 目标尺寸\r\n    var targetWidth = originWidth, targetHeight = originHeight;\r\n    // 图片尺寸超过400x400的限制\r\n    if (originWidth > this.maxWidth || originHeight > this.maxHeight) {\r\n      if (originWidth / originHeight > this.maxWidth / this.maxHeight) {\r\n        // 更宽，按照宽度限定尺寸\r\n        targetWidth = this.maxWidth;\r\n        targetHeight = Math.round(this.maxWidth * (originHeight / originWidth));\r\n      } else {\r\n        targetHeight = this.maxHeight;\r\n        targetWidth = Math.round(this.maxHeight * (originWidth / originHeight));\r\n      }\r\n    }\r\n    this.selfHeight=targetHeight+\"px\";\r\n    return {\r\n      width: targetWidth,\r\n      height: targetHeight\r\n    }\r\n  }\r\n  // 压缩图片需要的一些元素和对象\r\n\r\n  private createImageByCanvas() {\r\n    let reader = new FileReader();\r\n    let tImage = new Image();\r\n    let canvas = this.canvas.nativeElement;\r\n    let context = canvas.getContext('2d');\r\n    // base64地址图片加载完毕后\r\n    tImage.onload = () => {\r\n      let imgSize = this.changeImageSize(tImage.width,tImage.height);\r\n      // canvas对图片进行缩放\r\n      canvas.width = imgSize.width;\r\n      canvas.height = imgSize.height;\r\n      // 清除画布\r\n      context.clearRect(0, 0,this.maxWidth,this.maxHeight);\r\n      // 图片压缩\r\n      context.drawImage(tImage, 0, 0, imgSize.width, imgSize.height);\r\n    };\r\n\r\n    // 文件base64化，以便获知图片原始尺寸\r\n    reader.onload =(ev)=>{\r\n      tImage.src = reader.result as string;\r\n    };\r\n    reader.onerror = function (e) {\r\n    }\r\n    reader.readAsDataURL(this.file);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import { Component, OnInit, Input, HostBinding, ViewChild, EventEmitter, Output, ContentChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { FFileSelectDirective, FFileDropDirective, FFileUploadDirective } from '../../directive/index';\r\nimport { UploadOutput, UploadInput, UploadFile, UploaderOptions, FUploadFileExtend, DocMetaProperty } from '../../model/index';\r\nimport { FFileUtils } from '../../utils/index';\r\nimport { FFileUploadAPIService, FFileUploaderService } from '../../service/index';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { trigger, style, state, animate, transition } from '@angular/animations';\r\nimport { NgZone } from '@angular/core';\r\n@Component({\r\n  selector: 'f-file-upload',\r\n  templateUrl: './f-file-upload.component.html',\r\n  styleUrls: ['./f-file-upload.component.css'],\r\n  providers: [FFileUploaderService],\r\n  animations: [\r\n    trigger('hideUploaded', [\r\n      state('show', style(\r\n        { opacity: 1, height: '*' }\r\n      )),\r\n      state('hide', style(\r\n        { opacity: 0, height: 0 }\r\n      )),\r\n      // transition('* => void', [\r\n      //   style({ opacity: 1}),\r\n      //   animate(200, style({ opacity: 0}))\r\n      // ])\r\n      transition('* => hide', animate('0.5s'))\r\n    ])\r\n  ]\r\n})\r\nexport class FFileUploadComponent implements OnInit, AfterViewInit {\r\n  @HostBinding('class.ffileupload') cls = true;\r\n  // 不可见\r\n  @HostBinding('class.ffileupload-unvisible') get visibleState() {\r\n    return !this.visible;\r\n  }\r\n  // 自定义样式\r\n  @HostBinding('class.ffileupload-selfdefine') get selfDirectiveDefine() {\r\n    if (this.fFileUploadDir) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  @HostBinding('class.ffileupload-uploading') get uploading() {\r\n    return this.files.length > 0;\r\n  }\r\n\r\n  // 不能在Construct里追加el\r\n  @ViewChild(\"uploadAssist\") fFileUploadAssist: ElementRef;\r\n  // 自定义指令\r\n  @ContentChild(FFileUploadDirective) fFileUploadDir: any;\r\n  // \r\n  @ViewChild(FFileSelectDirective) fileUpload: FFileSelectDirective;\r\n  @ViewChild(FFileDropDirective) fileDropUpload: FFileDropDirective;\r\n  // 启用图片预览\r\n  @Input() enableImagePreview = true;\r\n  // 启用立即上传\r\n  @Input() uploadImmediately = false;\r\n  // 上传完成后隐藏\r\n  @Input() uploadedThenHide = true;\r\n  // 禁用状态\r\n  @Input() disabled = false;\r\n  private tVisible = true;\r\n  // 是否可见\r\n  @Input()\r\n  set visible(value) {\r\n    this.tVisible = value;\r\n    if (!value) {\r\n      this.reset();\r\n    }\r\n  }\r\n  get visible() {\r\n    return this.tVisible;\r\n  }\r\n  // 需要重置,通过不断的赋值来改变\r\n  @Input() needReset: Observable<any> = new Subject();;\r\n  // 启用拖拽\r\n  @Input() enableDrop = false;\r\n  @Input() dropText = \"可将文件拖拽此处\"\r\n  // 启用选择文件按钮\r\n  @Input() enableSelect = true;\r\n  @Input() selectText = \"点击上传\";\r\n  // 启用多选\r\n  @Input() multiple = true;\r\n  // 已经上传文件\r\n  @Input() uploadedCount = 0;\r\n  // 公共的扩展数据\r\n  @Input() extendDatas: {\r\n    [key: string]: any,\r\n    extProperty?: DocMetaProperty | null //\r\n  };\r\n  // 宽度阈值，当宽度超过760时候，没有附件上传时，宽度是固定值，有附件上传时，有最大宽度值\r\n  @Input() widthThreshold = 760;\r\n  // 上传和删除对外抛出的事件\r\n  @Output() fUploadDoneEvent = new EventEmitter<FUploadFileExtend[]>();\r\n  @Output() fUploadRemovedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n\r\n  // 允许上传的文件类型\r\n  allowedContentTypes = '*';\r\n  // 默认不限制附件上传个数\r\n  maxUploads = 0;\r\n  // 单位KB，默认是12M\r\n  maxFileSize = '12MB';\r\n\r\n  private selfUploadOpts: UploaderOptions = {};\r\n  // 上传配置项\r\n  @Input()\r\n  set options(uploadOpts: UploaderOptions) {\r\n    if (uploadOpts) {\r\n      if (uploadOpts.hasOwnProperty('allowedContentTypes')) {\r\n        this.allowedContentTypes = uploadOpts.allowedContentTypes.join(',');\r\n        this.allowedContentTypes = this.allowedContentTypes == '' ? '*' : this.allowedContentTypes;\r\n      }\r\n      if (uploadOpts.hasOwnProperty('maxUploads')) {\r\n        this.maxUploads = uploadOpts.maxUploads;\r\n      }\r\n      if (uploadOpts.hasOwnProperty('maxFileSize')) {\r\n        this.maxFileSize = FFileUtils.humanizeBytes(1024 * 1024 * uploadOpts.maxFileSize);\r\n      }\r\n      this.selfUploadOpts = Object.assign(this.selfUploadOpts, uploadOpts);\r\n    }\r\n  };\r\n  get options() {\r\n    return this.selfUploadOpts;\r\n  }\r\n  /**\r\n  * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置\r\n  */\r\n  @Input()\r\n  set extendServerConfig(config: any) {\r\n    if (config) {\r\n      this.fileUploaderSer.setExtendServerConfig(config);\r\n    }\r\n  }\r\n  // 记录文件个数\r\n  files: UploadOutput[];\r\n  // 标记通过选择按钮处理的事件\r\n  uploadSelectInput: EventEmitter<UploadInput>;\r\n  // 标记通过拖拽处理的事件\r\n  uploadDragInput: EventEmitter<UploadInput>;\r\n  // 控制是否显示追加附件的面板\r\n  showAppendPanel = false;\r\n  // 显示loading\r\n  showLoading = false;\r\n\r\n  settings = {\r\n    disabled: this.disabled,\r\n    visible: this.visible\r\n  };\r\n\r\n  constructor(private uploadAPISer: FFileUploadAPIService, private fileUploaderSer: FFileUploaderService, private notifyService: NotifyService, private ngZone: NgZone) {\r\n    this.files = [];\r\n    this.uploadSelectInput = new EventEmitter<UploadInput>();\r\n    this.uploadDragInput = new EventEmitter<UploadInput>();\r\n    // 重置\r\n    this.needReset.subscribe(data => {\r\n      this.reset();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    // 模板的情况下只能是立即上传\r\n    if (this.fFileUploadDir) {\r\n      this.uploadImmediately = true;\r\n    }\r\n    this.computeWidthThreshold();\r\n\r\n  }\r\n  /**\r\n  * 视图初始化后\r\n  */\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n  /**\r\n   * 触发绑定\r\n   */\r\n  triggerFileSelect(ev) {\r\n    ev && ev.stopPropagation();\r\n    // 禁用时\r\n    if (this.disabled) {\r\n      return false;\r\n    }\r\n    this.fileUpload.elementRef.nativeElement.click();\r\n  }\r\n  /**\r\n   * 选择附件按钮，处理抛出事件\r\n   * @param output \r\n   */\r\n  selectUploadOutput(output: UploadOutput): void {\r\n    this.uploadOutputHandler(output);\r\n  }\r\n  /**\r\n   * 拖拽区域处理抛出事件\r\n   * @param output \r\n   */\r\n  dropUploadOutput(output: UploadOutput): void {\r\n    if (this.enableSelect) {\r\n      return;\r\n    }\r\n    // 暂不处理拖拽的事件\r\n    if (output.type !== 'dragOver' && output.type !== 'dragOut' && output.type !== 'drop') {\r\n      this.uploadOutputHandler(output);\r\n    }\r\n  }\r\n  /**\r\n   * allAddedToQueue 选中文件追加到队列\r\n   * @param output \r\n   */\r\n  private uploadOutputHandler(output: UploadOutput): void {\r\n\r\n    // 显示追加面板\r\n    if (this.showAppendPanel) {\r\n      this.showAppendPanel = false;\r\n    }\r\n\r\n    if (output.type === 'addedToQueue' && typeof output.file !== 'undefined') {\r\n      this.files.push({ type: output.type, file: output.file });\r\n      // 如果启用立即上传\r\n      if (this.uploadImmediately) {\r\n        this.showLoading = true;\r\n        this.startUpload(output.file);\r\n      }\r\n    } else if (output.type === 'start') {\r\n      // 开始上传\r\n      this.updateFilesState(output, '');\r\n    } else if (output.type == 'done') {\r\n      // 上传完成\r\n      this.updateFilesState(output, 'done');\r\n      this.fUploadDoneEvent.emit(FFileUtils.changeUploadFileToFileExtend(output.files));\r\n      this.hideAfterLoaded(output);\r\n      // 隐藏正在加载\r\n      if (this.uploadImmediately && this.showLoading && this.allFileUploaded()) {\r\n        this.showLoading = false;\r\n      }\r\n    }\r\n    else if (output.type === 'cancelled' || output.type === 'removed' || output.type == 'error') {\r\n      // 删除或者移除文件\r\n      this.files = this.files.filter((fileOutput: UploadOutput) => {\r\n        return output.files.findIndex(item => fileOutput.file.id == item.id) < 0;\r\n      });\r\n      // 隐藏正在加载\r\n      if (this.uploadImmediately && this.showLoading && this.allFileUploaded()) {\r\n        this.showLoading = false;\r\n      }\r\n      this.showNotify(output);\r\n    } else if (output.type === 'rejected' && typeof output.file !== 'undefined') {\r\n      // 上传被拒绝\r\n      this.showNotify(output);\r\n      // 隐藏正在加载\r\n      if (this.uploadImmediately && this.showLoading && this.allFileUploaded()) {\r\n        this.showLoading = false;\r\n      }\r\n    }\r\n  }\r\n  \r\n  private showNotify(output) {\r\n    let notifyType = 'warning';\r\n    if (output.type == 'cancelled' || output.type == 'removed') {\r\n      notifyType = 'success';\r\n    }\r\n    let message = output.hasOwnProperty('message') ? output['message'] : '';\r\n    this.notifyService[notifyType](<NotifyOptions>{\r\n      msg: message, timeout: 3000\r\n    });\r\n  }\r\n  // 判断是否所有文件都已上传\r\n  private allFileUploaded() {\r\n    let findNotDoneIndex = this.files.findIndex(item => {\r\n      let doneTypes = ['done', 'cancelled', 'removed'];\r\n      let findTypeIndex = doneTypes.findIndex(type => {\r\n        return type == item.type;\r\n      });\r\n      return findTypeIndex == -1;\r\n    });\r\n    return findNotDoneIndex == -1 ? true : false;\r\n  }\r\n  /**\r\n   * 更新附件的状态\r\n   * @param output \r\n   * @param eventType \r\n   */\r\n  private updateFilesState(output: UploadOutput, eventType) {\r\n    let startFiles = [];\r\n    if (output.hasOwnProperty('files') && output.files.length > 0) {\r\n      // 此处更新界面可能有性能问题\r\n      startFiles = output.files;\r\n    } else if (typeof output.file !== 'undefined') {\r\n      startFiles = [output.file]\r\n    }\r\n    eventType = eventType ? eventType : output.type;\r\n    startFiles.map(item => {\r\n      const index = this.files.findIndex(fileOutput => typeof item !== 'undefined' && fileOutput.file.id === item.id);\r\n      // 变更状态\r\n      if (index > -1) {\r\n        this.files[index] = { type: eventType, file: item };\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  /**单个文件上传 */\r\n  startUpload(file: UploadFile): void {\r\n    /**\r\n    * Todo:后续可以从上传区块上取内容进行扩展\r\n    */\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI('upload', { file: file, type: 'upload', data: this.extendDatas });\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  /**\r\n   * 上传所有\r\n   */\r\n  startUploadAll(): void {\r\n    /**\r\n     *  Todo：后续，如果每个数据不一样，此处的数据得重新归集\r\n     */\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI('uploadAll', { type: 'uploadAll', files: [], data: this.extendDatas });\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  /**\r\n   * 已上传隐藏属性\r\n   */\r\n  hideAfterLoaded(output: UploadOutput): void {\r\n    //上传完成后删除\r\n    if (this.uploadedThenHide) {\r\n      // this.ngZone.runOutsideAngular(() => {\r\n      setTimeout(() => {\r\n        // 删除或者移除文件\r\n        let ids = output.files.map(fileItem => fileItem.id);\r\n        this.files = this.files.filter((fileOutput: UploadOutput) => {\r\n          let tIndex = ids.findIndex(tId => tId == fileOutput.file.id);\r\n          return tIndex > -1 ? false : true;\r\n        });\r\n\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI('hide', { type: 'hide', id: ids.join(',') });\r\n        this.inputUploadEventEmit(event);\r\n      }, 1000);\r\n      // });\r\n    }\r\n  }\r\n  /**\r\n   * 取消上传\r\n   */\r\n  cancelUpload(id: string): void {\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI('cancel', { id: id, type: 'cancel' });\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  /**\r\n   * 删除已上传文件\r\n   */\r\n  removelAllUpload(): void {\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI('removeAll', { type: 'removeAll', files: [] });\r\n    this.inputUploadEventEmit(event);\r\n\r\n  }\r\n  /**\r\n   * 删除已上传文件\r\n  */\r\n  removeFile(id: string): void {\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI('remove', { id: id, type: 'remove' });\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  /** */\r\n  /**\r\n   * \r\n   * @param bytes \r\n   */\r\n  formateBytes(bytes) {\r\n    return FFileUtils.humanizeBytes(bytes);\r\n  }\r\n  /**\r\n   * 判断是图片\r\n   * @param type \r\n   */\r\n  isImage(type) {\r\n    return type.indexOf('image') > -1;\r\n  }\r\n  // inProgress(progress) {\r\n  //   console.log('进入inProgress');\r\n  //   if (progress.data.percentage == 100) {\r\n  //     return 'done'\r\n  //   }\r\n  //   if (progress.data.percentage == 0) {\r\n  //     return 'uploadi';\r\n  //   }\r\n  //   return 'progress';\r\n  // }\r\n\r\n  /**\r\n   * 是否判断有类型限制\r\n   */\r\n  judgeContentTypeLimit() {\r\n    let tTypes = this.allowedContentTypes.split(',');\r\n    let hasAllIndex = tTypes.findIndex(item => {\r\n      return item == '*';\r\n    });\r\n    return hasAllIndex == -1;\r\n  }\r\n  /**\r\n   * 判断是否有文件大小的限制\r\n   */\r\n  judegeFileSizeLimit() {\r\n    return this.maxFileSize != '0 Byte'\r\n  }\r\n  /**\r\n   * 追加\r\n   */\r\n  appendNewFiles(ev) {\r\n    //启用拖拽\r\n    if (this.enableDrop) {\r\n      this.showAppendPanel = true;\r\n    } else {\r\n      ev && ev.stopPropagation();\r\n      this.triggerFileSelect(ev);\r\n    }\r\n  }\r\n  /**\r\n   * 关闭追加面板\r\n   */\r\n  closeAppendPanel() {\r\n    this.showAppendPanel = false;\r\n  }\r\n  /**\r\n   * 统一触发 附件选择和拖拽附件的事件\r\n   * @param ev \r\n   */\r\n  private inputUploadEventEmit(ev: UploadInput) {\r\n    // 如果文件上传启用\r\n    if (this.enableSelect) {\r\n      this.uploadSelectInput.emit(ev);\r\n    } else {\r\n      this.uploadDragInput.emit(ev);\r\n    }\r\n  }\r\n  // 重置方法\r\n  reset() {\r\n    this.files = [];\r\n    // 如果文件上传启用\r\n    if (this.enableSelect) {\r\n      this.fileUpload && this.fileUpload.reset();\r\n    } else {\r\n      this.fileDropUpload && this.fileDropUpload.reset();\r\n    }\r\n    this.computeWidthThreshold();\r\n  }\r\n  /**\r\n   * 计算阈值\r\n   */\r\n  private computeWidthThreshold() {\r\n    //\r\n    this.ngZone.runOutsideAngular(() => {\r\n      let self = this;\r\n      setTimeout(() => {\r\n        let tNeedComputedCls = false;\r\n        if (self.fFileUploadDir || !self.visible) {\r\n          tNeedComputedCls = false;\r\n        }\r\n        // 计算元素\r\n        let assistEl = self.fFileUploadAssist ? self.fFileUploadAssist.nativeElement : null;\r\n        // 超过阈值\r\n        if (assistEl && assistEl.getBoundingClientRect().width > self.widthThreshold) {\r\n          tNeedComputedCls = true;\r\n        } else {\r\n          tNeedComputedCls = false;\r\n        }\r\n        if (assistEl) {\r\n          let actionFun = tNeedComputedCls ? 'add' : 'remove';\r\n          assistEl.parentElement.classList[actionFun]('ffileupload-default');\r\n        }\r\n      }, 0);\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit, Input, HostBinding, Output, EventEmitter, ContentChild, TemplateRef, ViewEncapsulation, SimpleChanges, OnChanges, ChangeDetectorRef, ViewChildren, ElementRef, ViewChild } from '@angular/core';\r\nimport { FUploadFileExtend } from '../../model/index';\r\nimport { FFilePreviewListTypeTemplateDirective, FFilePreviewToolbarTemplateDirective } from '../../directive/index';\r\n\r\n@Component({\r\n    selector: 'f-file-preview',\r\n    templateUrl: './f-file-preview.component.html',\r\n    styleUrls: ['./f-file-preview.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FFilePreviewComponent implements OnInit, OnChanges {\r\n    @HostBinding('class.ffilepreview--wrapper') cls = true;\r\n    @HostBinding('class.ffilepreview-unvisible') get visibleState() {\r\n        return !this.visible;\r\n    }\r\n    // 只读的状态，控制附件是否可删除\r\n    @Input() readonly = true;\r\n    private _defaultItemCls = '';\r\n    @Input()\r\n    set defaultItemCls(value: string) {\r\n        this._defaultItemCls = value;\r\n    }\r\n    get defaultItemCls(): string {\r\n        //如果有自定义的值\r\n        if (this._defaultItemCls) {\r\n            return this._defaultItemCls + ' ';\r\n        }\r\n        // 如果有自定义模板\r\n        if (this.listTypeTemplate) {\r\n            return 'ffilepreview--item ';\r\n        }\r\n        return this.type == 'list' ? 'ffilepreview--item ' : 'ffilepreview--item col-sm-12 col-md-6 col-xl-3 col-el-2 ';\r\n    }\r\n    @Input() visible = true;\r\n    // 是否启用批量操作\r\n    @Input() enableMulti = false;\r\n    // list类型 card类型\r\n    @Input() type = \"list\";\r\n    // 列项上的class\r\n    @Input() itemCls = \"\";\r\n    // Header的class\r\n    @Input() headerCls = '';\r\n    // 启用重命名\r\n    @Input() canRename = false;\r\n    // 默认重命名\r\n    @Input() defaultRename = '';\r\n    // \r\n    @Input() enableCardAreaResponse = true;\r\n    // 标记是否显示重命名输入框\r\n    showRenameInput = false;\r\n    @ViewChild('multiRenameInput') multiRenameRef: ElementRef;\r\n    //@Input() fileInfos:FUploadFileExtend[]=[];\r\n    private _fileInfos: FUploadFileExtend[] = [];\r\n    @Input()\r\n    set fileInfos(val: FUploadFileExtend[]) {\r\n        this._fileInfos = this.formatDatas(val);;\r\n    }\r\n    get fileInfos(): FUploadFileExtend[] {\r\n        return this._fileInfos;\r\n    };\r\n    // 附件预览信息，抛出对象给第三方处理\r\n    @Output() filePreviewEvent = new EventEmitter<FUploadFileExtend>();\r\n    // 附件下载事件，抛出对象给第三方处理\r\n    @Output() fileDownloadEvent = new EventEmitter<{ fileInfos: FUploadFileExtend[], name: string }>();\r\n    @Output() multiSelectedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    // 附件删除事件，抛出对象给第三方处理\r\n    @Output() fileRemoveEvent = new EventEmitter<FUploadFileExtend>();\r\n    @ContentChild(FFilePreviewListTypeTemplateDirective, { read: TemplateRef }) listTypeTemplate: TemplateRef<any>;\r\n    @ContentChild(FFilePreviewToolbarTemplateDirective, { read: TemplateRef }) toolbarTemplate: TemplateRef<any>;\r\n    multiSelected: FUploadFileExtend[] = [];\r\n    // 全选状态\r\n    selectAllBtnChecked = false;\r\n    settings = {\r\n        readonly: this.readonly,\r\n        visible: this.visible,\r\n        enableMulti: this.enableMulti\r\n    };\r\n\r\n    constructor(private cd: ChangeDetectorRef) { }\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes['enableMultiDownload']) {\r\n        //     this.formatDatas(this.fileInfos);\r\n        // }\r\n    }\r\n    /**\r\n     * 格式化数据\r\n     * @param val \r\n     */\r\n    formatDatas(val) {\r\n        if (this.enableMulti) {\r\n            let formatValue= val.map((item: FUploadFileExtend) => {\r\n                // if (!item.hasOwnProperty('checked')) {\r\n                //     //\r\n                //     let findItem = this._fileInfos.find(olditem => {\r\n                //         return item.id == olditem.id;\r\n                //     });\r\n                //     if (findItem && findItem.hasOwnProperty('checked')) {\r\n                //         item['checked'] = findItem['checked'];\r\n                //     } else {\r\n                //         item['checked'] = this.selectAllBtnChecked;\r\n                //     }\r\n                // }\r\n                item['checked'] = this.selectAllBtnChecked;\r\n                return item;\r\n            });\r\n            // 归集已选数据\r\n            if(this.selectAllBtnChecked){\r\n                this.multiSelected=[...formatValue];\r\n            }else{\r\n                this.multiSelected=[];\r\n            }\r\n            // 返回格式化数据\r\n            return formatValue;\r\n        } else {\r\n            return val;\r\n        }\r\n    }\r\n    /**\r\n     * 预览\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.filePreviewEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 下载\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileDownloadEvent.emit({ fileInfos: [fileInfo], name: '' });\r\n    }\r\n    fileMultiDownloadHandler(ev: Event) {\r\n        ev.stopImmediatePropagation();\r\n        let rename = '';\r\n        if (this.showRenameInput) {\r\n            rename = this.multiRenameRef.nativeElement.value;\r\n        }\r\n        if (rename == '') {\r\n            rename = this.defaultRename;\r\n        }\r\n        this.fileDownloadEvent.emit({ fileInfos: this.multiSelected, name: rename });\r\n    }\r\n    /**\r\n     * checkbox多选\r\n     * @param ev \r\n     */\r\n    multiSelectChange(ev) {\r\n        let hasInArray = this.multiSelected.findIndex(item => item['id'] == ev['id']);\r\n        let findInArray = this.fileInfos.findIndex(item => item['id'] == ev['id']);\r\n        if (findInArray > -1) {\r\n            this.fileInfos[findInArray]['checked'] = ev['checked'];\r\n        }\r\n\r\n        if (ev['checked']) {\r\n            //选入\r\n            if (hasInArray == -1) {\r\n                if (findInArray > -1) {\r\n                    this.multiSelected.push(this.fileInfos[findInArray]);\r\n                }\r\n            }\r\n        } else {\r\n            //移出\r\n            if (hasInArray > -1) {\r\n                this.multiSelected.splice(hasInArray, 1);\r\n            }\r\n        }\r\n        // 判断是否全选\r\n        if (this.fileInfos.length > 0) {\r\n            if (this.multiSelected.length == this.fileInfos.length) {\r\n                //都全选\r\n                this.selectAllBtnChecked = true;\r\n            } else {\r\n                // 未全选\r\n                this.selectAllBtnChecked = false;\r\n            }\r\n        }\r\n        // 抛出多选\r\n        this.multiSelectedEvent.emit(this.multiSelected);\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileRemoveEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 获取文档类型对应的class\r\n     * @param fileName \r\n     */\r\n    getFileTypeClassName(fileName) {\r\n        let clsName = 'ffilepreview--filetype';\r\n        // 如果名称为空\r\n        if (!fileName) {\r\n            return clsName + '-any';\r\n        }\r\n        let lastDotIndex = fileName.lastIndexOf(\".\");\r\n        let fileSuffix = '';\r\n        if (lastDotIndex > -1) {\r\n            fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n        }\r\n        switch (fileSuffix) {\r\n            case 'pdf':\r\n                clsName += '-pdf';\r\n                break;\r\n            case 'jpeg':\r\n            case 'jpg':\r\n            case 'gif':\r\n            case 'svg':\r\n            case 'png':\r\n            case 'bmp':\r\n                clsName += '-img';\r\n                break;\r\n            case 'ppt':\r\n            case 'pptx':\r\n                clsName += '-ppt';\r\n                break;\r\n            case 'doc':\r\n            case 'docx':\r\n                clsName += '-doc';\r\n                break;\r\n            case 'xls':\r\n            case 'xlsx':\r\n                clsName += '-xls';\r\n                break;\r\n            case 'txt':\r\n                clsName += '-txt';\r\n                break;\r\n            case 'zip':\r\n                clsName += '-zip';\r\n                break;\r\n            default:\r\n                clsName += '-any';\r\n        }\r\n        return clsName;\r\n    }\r\n    \r\n    /**\r\n     * 是不是有附件名称\r\n     * @param name \r\n     */\r\n    hasFileName(name): boolean {\r\n        if (!name) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 选择或取消所有\r\n     * @param ev \r\n     */\r\n    selectOrCancelAllHandler(ev) {\r\n        if (ev['checked']) {\r\n            // 全选\r\n            this.fileInfos.forEach(item => {\r\n                item.checked = true;\r\n            });\r\n            this.multiSelected = [...this.fileInfos];\r\n            this.selectAllBtnChecked = true;\r\n\r\n        } else {\r\n            // 取消\r\n            this.multiSelected = [];\r\n            this.fileInfos.forEach(item => {\r\n                item.checked = false;\r\n            });\r\n            this.selectAllBtnChecked = false;\r\n        }\r\n        this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * 显示隐藏输入名称\r\n     */\r\n    toggleRenameInput(ev) {\r\n        ev.stopPropagation();\r\n        this.showRenameInput = !this.showRenameInput;\r\n        if (!this.multiRenameRef.nativeElement.value) {\r\n            this.multiRenameRef.nativeElement.value = this.defaultRename;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'f-file-preview-checkbox',\r\n  templateUrl: './preview-checkbox.component.html',\r\n  styleUrls: []\r\n})\r\nexport class PreviewCheckboxComponent implements OnInit {\r\n  @HostBinding('class.align-middle') cls1=true;\r\n  @HostBinding('class.d-inline-flex') cls2=true;\r\n  @HostBinding('class.preview-checkbox') cls3=true;\r\n  \r\n  @Input() checked: boolean=false;\r\n  @Input() id: string;\r\n  @Input() disabled: boolean=false;\r\n\r\n  @Output() checkedChange = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  clickHandler(event) {\r\n    event.stopPropagation();\r\n    if (!this.disabled) {\r\n      this.checked=!this.checked;\r\n      this.checkedChange.emit({checked: this.checked,id:this.id});\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, ViewChild, AfterViewInit, HostBinding, SimpleChange } from '@angular/core';\r\nimport { FUploadFileExtend } from '../../model';\r\n\r\n@Component({\r\n  selector: 'ffile-multi-download-info',\r\n  templateUrl: './multi-download-info.component.html',\r\n  styleUrls: ['./multi-download-info.component.css']\r\n})\r\nexport class MultiDownloadInfoComponent implements OnInit,AfterViewInit {\r\n  @HostBinding('class.ffile-multi-download-info') cls=true;\r\n  @ViewChild('multiRenameInput') multiRenameRef: ElementRef;\r\n  // 记载下载数据\r\n  private _downloadInfos: FUploadFileExtend[] = [];\r\n  @Input()\r\n  set downloadInfos(value) {\r\n    if (value && value.length > 0) {\r\n      this._downloadInfos = value;\r\n      if (!this._downloadName) {\r\n        this.downloadName = this.getName(this._downloadInfos[0]['name']);\r\n      }\r\n    }\r\n  }\r\n  get downloadInfos() {\r\n    return this._downloadInfos;\r\n  }\r\n  // 默认名称\r\n  private _downloadName = '';\r\n  @Input()\r\n  set downloadName(value: string) {\r\n    this._downloadName=value;    \r\n  }\r\n  get downloadName() {\r\n    if(!this._downloadName&&this._downloadInfos.length>0){\r\n      this._downloadName = this.getName(this._downloadInfos[0]['name']);\r\n    }    \r\n    return this._downloadName;\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n   \r\n  }\r\n  ngAfterViewInit(){\r\n    //this.multiRenameRef.nativeElement.value = this.downloadName;\r\n  }\r\n  /**\r\n   * 获取下载名称\r\n   */\r\n  getDownloadName() {\r\n    return  this.multiRenameRef.nativeElement.value;\r\n  }\r\n  private getName(name: string) {\r\n    if (name.lastIndexOf('.') > 0) {\r\n      return name.substring(0, name.lastIndexOf('.'));\r\n    }\r\n    return '';\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostBinding,\r\n  ViewChild,\r\n  TemplateRef,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { NotifyService, NotifyOptions } from \"@farris/ui-notify\";\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport {\r\n  FFileUploadAPIService,\r\n  FFileUploaderService\r\n} from \"../../service/index\";\r\nimport {\r\n  FFileSelectDirective\r\n} from \"../../directive/index\";\r\nimport {MultiDownloadInfoComponent}from '../multi-download-info/multi-download-info.component';\r\nimport {\r\n  UploadOutput,\r\n  UploadInput,\r\n  UploadFile,\r\n  UploaderOptions,\r\n  FUploadFileExtend,\r\n  DocMetaProperty,\r\n  UploadStatus\r\n} from \"../../model/index\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { FFileUtils } from \"../../utils/index\";\r\nimport { trigger, style, state, animate, transition } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: \"f-file-upload-and-preview\",\r\n  templateUrl: \"./upload-and-preview.component.html\",\r\n  styleUrls: [\"./upload-and-preview.component.css\"],\r\n  providers: [FFileUploaderService],\r\n  animations: [\r\n    trigger('hideUploaded', [\r\n      state('show', style(\r\n        { opacity: 1, height: '*' }\r\n      )),\r\n      state('hide', style(\r\n        { opacity: 0, height: 0 }\r\n      )),\r\n      // transition('* => void', [\r\n      //   style({ opacity: 1}),\r\n      //   animate(200, style({ opacity: 0}))\r\n      // ])\r\n      transition('* => hide', animate('0.5s'))\r\n    ])\r\n  ]\r\n})\r\nexport class UploadAndPreviewComponent implements OnInit, AfterViewInit,OnChanges {\r\n  @HostBinding(\"class.ffileUploadAndPreview\") cls = true;\r\n  @HostBinding(\"class.ffileUploadAndPreview-content-fill\") get fillState(){\r\n    return this.contentFill;\r\n  }\r\n  // 预览模板\r\n  @ViewChild(\"previewFileNameTmpl\") previewFileNameTmpl:TemplateRef<void>;\r\n  // 文件大小模板\r\n  @ViewChild(\"fileSizeTmpl\") fileSizeTmpl:TemplateRef<void>;\r\n  // 文件状态模板\r\n  @ViewChild(\"uapStateTmpl\") uapStateTmpl:TemplateRef<void>;\r\n  // 预览操作模板\r\n  @ViewChild(\"previewActionTmpl\") previewActionTmpl:TemplateRef<void>;\r\n   // 预览操作模板\r\n   @ViewChild(\"previewDateTmpl\") previewDateTmpl:TemplateRef<void>;  \r\n  // 上传操作模板\r\n  @ViewChild(\"uploadFileNameTmpl\") uploadFileNameTmpl:TemplateRef<void>;\r\n  /**\r\n   * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置\r\n   */\r\n  @Input()\r\n  set extendServerConfig(config: any) {\r\n    if (config) {\r\n      this.fileUploaderSer.setExtendServerConfig(config);\r\n    }\r\n  }\r\n  // 内容区域填充\r\n  @Input() contentFill=false;\r\n\r\n  private _renameFromDialog='';\r\n  // 记录列字段\r\n  private _previewColumnsFields = [];\r\n  // 预置列信息\r\n  private _presetPreviewColumns = [\r\n    { field: \"name\", width: 200, title: \"文件名\",checkbox:true },\r\n    { field: \"size\", width: 100, title: \"大小\" },\r\n    { field: \"createTime\", width: 100, title: \"日期\" },\r\n    { field: \"state\", width: 100, title: \"状态\" },\r\n    { field: \"action\", width: 100, title: \"操作\" }\r\n  ];\r\n  // 内部记录列信息\r\n  private _previewColumns = [];\r\n  @Input()\r\n  set previewColumns(value) {\r\n    if (value && value.length > 0) {\r\n      this._previewColumns = [...value];\r\n    } else {\r\n      this._presetPreviewColumns = [...this._presetPreviewColumns];\r\n    }\r\n    this.getFieldsFromColumns();\r\n  }\r\n  get previewColumns() {\r\n    return this._previewColumns;\r\n  }\r\n  // 格式化预览数据\r\n  private _fileInfos: FUploadFileExtend[] = [];\r\n  @Input()\r\n  set fileInfos(val: FUploadFileExtend[]) {\r\n    this._fileInfos = this.formatPreviewDatas(val);\r\n    this._renameFromDialog='';\r\n  }\r\n  get fileInfos(): FUploadFileExtend[] {\r\n    return this._fileInfos;\r\n  }\r\n  /**\r\n   * 附件预览配置---------------------------------------开始\r\n   */\r\n  @Input() previewDateFormat=\"yyyy-MM-dd\";\r\n  // 只读的状态，控制附件是否可删除\r\n  // 默认处于查看状态\r\n  @Input() previewReadonly = true;  \r\n  @Input() previewVisible = true;\r\n  // 是否启用批量操作\r\n  @Input() previewEnableMulti = true;\r\n  // 预览显示类别\r\n  @Input() previewShowType = \"list\";\r\n  // 启用重命名\r\n  @Input() previewEnableRename = true;\r\n  // 默认重命名\r\n  @Input() previewDefaultRename = \"\";\r\n  // 附件预览，预览事件\r\n  @Output() filePreviewEvent = new EventEmitter<FUploadFileExtend>();\r\n  // 附件预览，下载事件，抛出对象给第三方处理\r\n  @Output() fileDownloadEvent = new EventEmitter<{\r\n    fileInfos: FUploadFileExtend[];\r\n    name: string;\r\n  }>();\r\n  // 附件预览，多选事件\r\n  @Output() fPreviewMultiSelectedEvent = new EventEmitter<\r\n    FUploadFileExtend[]\r\n  >();\r\n  // 附件预览，删除事件，抛出对象给第三方处理\r\n  @Output() fileRemoveEvent = new EventEmitter<FUploadFileExtend[]>();\r\n  // 全选状态\r\n  previewSelectAllBtnChecked = false;\r\n  // 记录选中数据\r\n  previewMultiSelected: FUploadFileExtend[] = [];\r\n  // 构造预览的配置数据\r\n get previewSettings(){\r\n   return {\r\n    readonly: this.previewReadonly,\r\n    visible: this.previewVisible,\r\n    enableMulti: this.previewEnableMulti,\r\n    enableRename: this.previewEnableRename\r\n  }\r\n }\r\n  /**\r\n   * 附件预览配置---------------------------------------结束\r\n   */\r\n\r\n  /**\r\n   * 附件上传配置---------------------------------------开始\r\n   */\r\n  // 附件上传选择指令\r\n  @ViewChild(FFileSelectDirective) fileUpload: FFileSelectDirective;\r\n  // 附件上传部分禁用状态\r\n  @Input() uploadDisabled = false;\r\n  private tUploadVisible = true;\r\n  // 附件上传部分是否可见\r\n  @Input()\r\n  set uploadVisible(value) {\r\n    this.tUploadVisible = value;\r\n    if (!value) {\r\n      this.uploadReset();\r\n    }\r\n  }\r\n  get uploadVisible() {\r\n    return this.tUploadVisible;\r\n  }\r\n  // 需要重置,通过不断的赋值来改变\r\n  @Input() uploadNeedReset: Observable<any> = new Subject();\r\n  // 启用选择文件按钮\r\n  @Input() uploadEnableSelect = true;\r\n  // 选择文件按钮上传问题\r\n  @Input() uploadSelectText = \"上传附件\";\r\n  // 启用多选\r\n  @Input() uploadEnableMulti = true;\r\n  // 已经上传文件\r\n  @Input() uploadedCount = 0;\r\n  // 公共的扩展数据\r\n  @Input() extendDatas: {\r\n    [key: string]: any;\r\n    extProperty?: DocMetaProperty | null; //\r\n  };\r\n  @Input()\r\n  set uploadOptions(uploadOpts: UploaderOptions) {\r\n    if (uploadOpts) {\r\n      if (uploadOpts.hasOwnProperty(\"allowedContentTypes\")) {\r\n        this.allowedContentTypes = uploadOpts.allowedContentTypes.join(\",\");\r\n        this.allowedContentTypes =\r\n          this.allowedContentTypes == \"\" ? \"*\" : this.allowedContentTypes;\r\n      }\r\n      if (uploadOpts.hasOwnProperty(\"maxUploads\")) {\r\n        this.maxUploads = uploadOpts.maxUploads;\r\n      }\r\n      if (uploadOpts.hasOwnProperty(\"maxFileSize\")) {\r\n        this.maxFileSize = FFileUtils.humanizeBytes(\r\n          1024 * 1024 * uploadOpts.maxFileSize\r\n        );\r\n      }\r\n      this.selfUploadOpts = Object.assign(this.selfUploadOpts, uploadOpts);\r\n    }\r\n  }\r\n  get uploadOptions() {\r\n    return this.selfUploadOpts;\r\n  }\r\n  // 附件上传中，上传完成抛出的事件\r\n  @Output() fUploadDoneEvent = new EventEmitter<FUploadFileExtend[]>();\r\n  // 附件上传中，删除附件事件\r\n  @Output() fUploadRemovedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n  get  uploadSettings(){\r\n    return {\r\n      disabled: this.uploadDisabled,\r\n      visible: this.uploadVisible,\r\n      enableMulti: this.uploadEnableMulti,\r\n      extendDatas: this.extendDatas\r\n    }\r\n  };\r\n  // 允许上传的文件类型\r\n  allowedContentTypes = \"*\";\r\n  // 默认不限制附件上传个数\r\n  maxUploads = 0;\r\n  // 单位KB，默认是12M\r\n  maxFileSize = \"12MB\";\r\n  // 记录文件个数\r\n  uploadFiles: UploadOutput[];\r\n  // 标记通过选择按钮处理的事件\r\n  uploadSelectInput: EventEmitter<UploadInput>;\r\n  private selfUploadOpts: UploaderOptions = {};\r\n  /**\r\n   * 附件上传配置---------------------------------------结束\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @param el\r\n   * @param uploadAPISer\r\n   * @param fileUploaderSer\r\n   * @param notifyService\r\n   * @param ngZone\r\n   */\r\n  constructor(\r\n    private el: ElementRef,\r\n    private uploadAPISer: FFileUploadAPIService,\r\n    private fileUploaderSer: FFileUploaderService,\r\n    private notifyService: NotifyService,\r\n    private ngZone: NgZone,\r\n    private modalSer:BsModalService,\r\n    private cd: ChangeDetectorRef\r\n  ) {\r\n    this.uploadFiles = [];\r\n    this.uploadSelectInput = new EventEmitter<UploadInput>();\r\n    // 重置----------可能有问题\r\n    this.uploadNeedReset.subscribe(data => {\r\n      this.uploadReset();\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this._previewColumns.length == 0) {\r\n      this.previewColumns = [...this._presetPreviewColumns];\r\n    }\r\n  }\r\n  ngAfterViewInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges):void{\r\n    const {previewReadonly,previewVisible,previewEnableMulti,previewDefaultRename}=changes;\r\n    if(previewReadonly||previewVisible||previewEnableMulti){\r\n      // 重置附件预览\r\n      this.previewMultiSelected=[];\r\n      this.fileInfos.forEach(item => {\r\n        item.checked = false;\r\n      });\r\n      this.previewSelectAllBtnChecked=false;\r\n      this._renameFromDialog='';\r\n    }\r\n    if(previewDefaultRename){\r\n      // 重置预览重命名记录\r\n      this._renameFromDialog='';\r\n    }\r\n\r\n  }\r\n  /**\r\n   * 选择或取消所有\r\n   * @param ev\r\n   */\r\n  selectOrCancelAllHandler(ev) {\r\n    if (ev['checked']) {\r\n      // 全选\r\n      this.fileInfos.forEach(item => {\r\n          item.checked = true;\r\n      });\r\n      this.previewMultiSelected = [...this.fileInfos];\r\n      this.previewSelectAllBtnChecked = true;\r\n\r\n    } else {\r\n        // 取消\r\n        this.previewMultiSelected = [];\r\n        this.fileInfos.forEach(item => {\r\n            item.checked = false;\r\n        });\r\n        this.previewSelectAllBtnChecked = false;\r\n    }\r\n  }\r\n  /**\r\n   * 格式化文件大小\r\n   * @param bytes\r\n   */\r\n  formateBytes(bytes) {\r\n    return FFileUtils.humanizeBytes(bytes);\r\n  }\r\n  /**\r\n   * 获取文档类型对应的class\r\n   * @param fileName\r\n   */\r\n  getFileTypeClassName(fileName) {\r\n    let clsName = \"ffilepreview--filetype\";\r\n    // 如果名称为空\r\n    if (!fileName) {\r\n      return clsName + \"-any\";\r\n    }\r\n    let lastDotIndex = fileName.lastIndexOf(\".\");\r\n    let fileSuffix = \"\";\r\n    if (lastDotIndex > -1) {\r\n      fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n    }\r\n    switch (fileSuffix) {\r\n      case \"pdf\":\r\n        clsName += \"-pdf\";\r\n        break;\r\n      case \"jpeg\":\r\n      case \"jpg\":\r\n      case \"gif\":\r\n      case \"svg\":\r\n      case \"png\":\r\n      case \"bmp\":\r\n        clsName += \"-img\";\r\n        break;\r\n      case \"ppt\":\r\n      case \"pptx\":\r\n        clsName += \"-ppt\";\r\n        break;\r\n      case \"doc\":\r\n      case \"docx\":\r\n        clsName += \"-doc\";\r\n        break;\r\n      case \"xls\":\r\n      case \"xlsx\":\r\n        clsName += \"-xls\";\r\n        break;\r\n      case \"txt\":\r\n        clsName += \"-txt\";\r\n        break;\r\n      case \"zip\":\r\n        clsName += \"-zip\";\r\n        break;\r\n      default:\r\n        clsName += \"-any\";\r\n    }\r\n    return clsName;\r\n  }\r\n  /**\r\n   * 格式化预览数据\r\n   * @param val\r\n   */\r\n  private formatPreviewDatas(val) {\r\n    let formatValue = val.map((item: FUploadFileExtend) => {\r\n      if (!item.hasOwnProperty(\"size\")) {\r\n        item[\"size\"] = undefined;\r\n      }\r\n      if (!item.hasOwnProperty(\"createTime\")) {\r\n        item[\"createTime\"] = undefined;\r\n      }\r\n      return item;\r\n    });\r\n    formatValue.sort(this.sortPreviewData('createTime'));\r\n    if (this.previewEnableMulti) {\r\n      let newFormatValue = formatValue.map((item: FUploadFileExtend) => {\r\n        item[\"checked\"] = this.previewSelectAllBtnChecked;\r\n        return item;\r\n      });\r\n      // 归集已选数据\r\n      if (this.previewSelectAllBtnChecked) {\r\n        this.previewMultiSelected = [...newFormatValue];\r\n      } else {\r\n        this.previewMultiSelected = [];\r\n      }\r\n      // 返回格式化数据\r\n      return newFormatValue;\r\n    } else {\r\n      return formatValue;\r\n    }\r\n  }\r\n  private sortPreviewData=function(key){\r\n    return function(x,y){\r\n        if(!x[key]){\r\n          return 1;\r\n        }\r\n        if(!y[key]){\r\n          return -1;\r\n        }\r\n        var oDate1 = new Date(x[key]);\r\n        var oDate2 = new Date(y[key]);\r\n        return oDate1.getTime() > oDate2.getTime()? -1:1;\r\n    }\r\n}\r\n\r\n\r\n\r\n  /**\r\n   * 格式化处理数据\r\n   */\r\n  private getFieldsFromColumns() {\r\n    this._previewColumnsFields = this._previewColumns.map(\r\n      item => item[\"field\"]\r\n    );\r\n  }\r\n  /**\r\n   * 根据列获取对应的列模板\r\n   * @param columnInfo\r\n   */\r\n  getColumnTemplate(columnInfo, type = \"preview\") {\r\n    let result;\r\n    if (columnInfo.hasOwnProperty(\"template\") && columnInfo[\"template\"]) {\r\n      return columnInfo[\"template\"];\r\n    }\r\n    if (type == \"preview\") {\r\n      switch (columnInfo[\"field\"]) {\r\n        case \"state\":\r\n          result = this[\"uapStateTmpl\"];\r\n          break;\r\n        case \"name\":\r\n          result = this[\"previewFileNameTmpl\"];\r\n          break;\r\n        case \"action\":\r\n          result = this[\"previewActionTmpl\"];\r\n          break;\r\n        case \"size\":\r\n          result= this[\"fileSizeTmpl\"];\r\n          break;\r\n        case \"createTime\":\r\n            result= this[\"previewDateTmpl\"];\r\n            break;\r\n        default:\r\n          result = \"\";\r\n      }\r\n    }else{\r\n      switch (columnInfo[\"field\"]) {\r\n        case \"state\":\r\n          result = this[\"uapStateTmpl\"];\r\n          break;\r\n        case \"name\":\r\n          result = this[\"uploadFileNameTmpl\"];\r\n          break;\r\n        case \"size\":\r\n          result= this[\"fileSizeTmpl\"];\r\n          break;\r\n        default:\r\n          result = \"\";\r\n      }\r\n    }    \r\n    return result;\r\n  }\r\n  /**\r\n   * 多选变更\r\n   */\r\n  previewMultiSelectChange(ev) {\r\n    let hasInArray = this.previewMultiSelected.findIndex(item => item['id'] == ev['id']);\r\n    let findInArray = this.fileInfos.findIndex(item => item['id'] == ev['id']);\r\n    if (findInArray > -1) {\r\n        this.fileInfos[findInArray]['checked'] = ev['checked'];\r\n    }\r\n\r\n    if (ev['checked']) {\r\n        //选入\r\n        if (hasInArray == -1) {\r\n            if (findInArray > -1) {\r\n                this.previewMultiSelected.push(this.fileInfos[findInArray]);\r\n            }\r\n        }\r\n    } else {\r\n        //移出\r\n        if (hasInArray > -1) {\r\n            this.previewMultiSelected.splice(hasInArray, 1);\r\n        }\r\n    }\r\n    // 判断是否全选\r\n    if (this.fileInfos.length > 0) {\r\n        if (this.previewMultiSelected.length == this.fileInfos.length) {\r\n            //都全选\r\n            this.previewSelectAllBtnChecked = true;\r\n        } else {\r\n            // 未全选\r\n            this.previewSelectAllBtnChecked = false;\r\n        }\r\n    }\r\n    // 抛出多选\r\n    this.fPreviewMultiSelectedEvent.emit(this.previewMultiSelected);\r\n  }\r\n  /**处理附件上传---------------------------------------------------------开始-- */\r\n  /**\r\n   * 统一触发 附件选择和拖拽附件的事件\r\n   * @param ev\r\n   */\r\n  private inputUploadEventEmit(ev: UploadInput) {\r\n    // 如果文件上传启用\r\n    if (this.uploadEnableSelect) {\r\n      this.uploadSelectInput.emit(ev);\r\n    }\r\n    // this.uploadDragInput.emit(ev);\r\n  }\r\n  /**单个文件上传 */\r\n  startUpload(file: UploadFile): void {\r\n    /**\r\n     * Todo:后续可以从上传区块上取内容进行扩展\r\n     */\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI(\"multipartUpload\", {\r\n      file: file,\r\n      type: \"multipartUpload\",\r\n      data: this.extendDatas\r\n    });\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  // 重置方法\r\n  uploadReset() {\r\n    this.uploadFiles = [];\r\n    // 如果文件上传启用\r\n    if (this.uploadEnableSelect) {\r\n      this.fileUpload && this.fileUpload.reset();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 触发绑定\r\n   */\r\n  triggerFileSelect(ev) {\r\n    ev && ev.stopPropagation();\r\n    // 禁用时\r\n    if (this.uploadDisabled) {\r\n      return false;\r\n    }\r\n    this.fileUpload.elementRef.nativeElement.click();\r\n  }\r\n  /**\r\n   * 选择附件按钮，处理抛出事件\r\n   * @param output\r\n   */\r\n  selectUploadOutput(output: UploadOutput): void {\r\n    this.uploadOutputHandler(output);\r\n  }\r\n  /**\r\n   * allAddedToQueue 选中文件追加到队列\r\n   * @param output\r\n   */\r\n  private uploadOutputHandler(output: UploadOutput): void {\r\n    if (output.type === \"addedToQueue\" && typeof output.file !== \"undefined\") {\r\n      this.uploadFiles.push({ type: output.type, file: output.file });\r\n      // 开始上传\r\n      this.startUpload(output.file);\r\n    } else if (output.type === \"start\") {\r\n      // 开始上传\r\n      this.updateFilesState(output, \"\");\r\n    } else if (output.type == \"done\") {\r\n      // 上传完成\r\n      this.updateFilesState(output, \"done\");\r\n      this.fUploadDoneEvent.emit( FFileUtils.changeUploadFileToFileExtend(output.files));\r\n      // 上传完成后不在当前页面上显示\r\n      this.hideAfterLoaded(output);\r\n    } else if (\r\n      output.type === \"cancelled\" ||\r\n      output.type === \"removed\" ||\r\n      output.type == \"error\"\r\n    ) {\r\n      // 删除或者移除文件\r\n      this.uploadFiles = this.uploadFiles.filter((fileOutput: UploadOutput) => {\r\n        return (\r\n          output.files.findIndex(item => fileOutput.file.id == item.id) < 0\r\n        );\r\n      });\r\n      // 给出提示\r\n      this.showNotify(output);\r\n    } else if (\r\n      output.type === \"rejected\" &&\r\n      typeof output.file !== \"undefined\"\r\n    ) {\r\n      // 上传被拒绝\r\n      this.showNotify(output);\r\n    }\r\n\r\n  }\r\n  /**\r\n   * 临时删除附件\r\n   * @param output \r\n   */\r\n  private hideAfterLoaded(output: UploadOutput): void {\r\n      // 删除或者移除文件\r\n      let ids = output.files.map(fileItem => fileItem.id);\r\n      this.uploadFiles = this.uploadFiles.filter((fileOutput: UploadOutput) => {\r\n        let tIndex = ids.findIndex(tId => tId == fileOutput.file.id);\r\n        return tIndex > -1 ? false : true;\r\n      });\r\n      const event: UploadInput = this.uploadAPISer.getAssignAPI('hide', { type: 'hide', id: ids.join(',') });\r\n      this.inputUploadEventEmit(event);\r\n    \r\n  }\r\n  /**\r\n   * 处理上传\r\n   * @param output \r\n   */\r\n  private showNotify(output) {\r\n    let notifyType = 'warning';\r\n    if (output.type == 'cancelled' || output.type == 'removed') {\r\n      notifyType = 'success';\r\n    }\r\n    let message = output.hasOwnProperty('message') ? output['message'] : '';\r\n    this.notifyService[notifyType](<NotifyOptions>{\r\n      msg: message, timeout: 3000\r\n    });\r\n  }\r\n    /**\r\n   * 更新附件的状态\r\n   * @param output \r\n   * @param eventType \r\n   */\r\n  private updateFilesState(output: UploadOutput, eventType) {\r\n    let startFiles = [];\r\n    if (output.hasOwnProperty('files') && output.files.length > 0) {\r\n      // 此处更新界面可能有性能问题\r\n      startFiles = output.files;\r\n    } else if (typeof output.file !== 'undefined') {\r\n      startFiles = [output.file]\r\n    }\r\n    eventType = eventType ? eventType : output.type;\r\n    startFiles.map(item => {\r\n      const index = this.uploadFiles.findIndex(fileOutput => typeof item !== 'undefined' && fileOutput.file.id === item.id);\r\n      // 变更状态\r\n      if (index > -1) {\r\n        this.uploadFiles[index] = { type: eventType, file: item };\r\n      }\r\n    });\r\n\r\n  }\r\n    /**\r\n   * 是否判断有类型限制\r\n   */\r\n  judgeContentTypeLimit() {\r\n    let tTypes = this.allowedContentTypes.split(',');\r\n    let hasAllIndex = tTypes.findIndex(item => {\r\n      return item == '*';\r\n    });\r\n    return hasAllIndex == -1;\r\n  }\r\n  /**\r\n   * 判断是否有文件大小的限制\r\n   */\r\n  judegeFileSizeLimit() {\r\n    return this.maxFileSize != '0 Byte';\r\n  }\r\n  /**\r\n   * 获取上传进度\r\n   */\r\n  getUploadProgress(uploadInfo:UploadOutput){\r\n    if(uploadInfo['type']=='done'){\r\n      return 100;\r\n    }\r\n    if(uploadInfo['file']['progress']&&uploadInfo['file']['progress']){\r\n      if(uploadInfo['file']['progress']['status']==UploadStatus.Uploading){\r\n        let tPercentage=uploadInfo['file']['progress']['data']['percentage'];\r\n        return tPercentage>5?tPercentage:5;\r\n      }\r\n      return 5;\r\n    }\r\n    return 5;\r\n  }\r\n  /**\r\n   * 处理显示\r\n   * @param ev \r\n   * @param fileInfo \r\n   */  \r\n  getUploadFileSizeProgress(uploadInfo:UploadOutput){\r\n    if(!uploadInfo){\r\n      return '';\r\n    }\r\n    if(uploadInfo['type']=='done'){\r\n      return FFileUtils.humanizeBytes(uploadInfo.file.size);     \r\n    }\r\n    let tPercentage=5;\r\n    if(uploadInfo['file']['progress']&&uploadInfo['file']['progress']){\r\n      if(uploadInfo['file']['progress']['status']==UploadStatus.Uploading){\r\n        tPercentage=uploadInfo['file']['progress']['data']['percentage'];\r\n        tPercentage =tPercentage>5?tPercentage:5; \r\n      }\r\n    }\r\n    return FFileUtils.humanizeBytes(uploadInfo.file.size*tPercentage/100)+'/'+FFileUtils.humanizeBytes(uploadInfo.file.size);\r\n  }\r\n\r\n  /**处理附件上传---------------------------------------------------------结束-- */\r\n\r\n  /**\r\n   * 预览\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n    ev.stopImmediatePropagation();\r\n    this.filePreviewEvent.emit(fileInfo);\r\n  }\r\n  /**\r\n   * 下载\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n    ev.stopImmediatePropagation();\r\n    this.fileDownloadEvent.emit({ fileInfos: [fileInfo], name: \"\" });\r\n  }\r\n  /**\r\n   * 删除数据\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n    ev.stopImmediatePropagation();\r\n    this.fileRemoveEvent.emit([fileInfo]);\r\n  }\r\n  /**\r\n   * 批量删除\r\n   * @param ev \r\n   */\r\n  multiFileRemoveHandler(ev: Event){\r\n    ev.stopImmediatePropagation();\r\n    this.fileRemoveEvent.emit(this.previewMultiSelected);\r\n  }\r\n  fileMultiDownloadHandler(ev: Event) {\r\n    ev.stopImmediatePropagation();\r\n    let rename ='';\r\n    if(this.previewMultiSelected.length==1){\r\n      this.fileDownloadEvent.emit({ fileInfos: this.previewMultiSelected, name: rename });\r\n      return;\r\n    }\r\n    // 启用了重命名\r\n    if(this.previewEnableRename){\r\n      let self=this;\r\n      const dlgRef=this.modalSer.show(MultiDownloadInfoComponent,{\r\n        width: 440,\r\n        height: 200,\r\n        showMaxButton:false,\r\n        title: '附件下载',\r\n        initialState: {\r\n          downloadInfos: self.previewMultiSelected,\r\n          downloadName:self._renameFromDialog&&!self.previewDefaultRename?self._renameFromDialog:self.previewDefaultRename\r\n        },\r\n        showButtons: true,\r\n        buttons: [\r\n            {\r\n                text: '取消',\r\n                cls: 'btn btn-secondary',\r\n                handle: () => {\r\n                    dlgRef.close();\r\n                }\r\n            },            \r\n            {\r\n              text: '确定',\r\n              cls: 'btn btn-primary',\r\n              handle: () => {\r\n                  const contentRef = dlgRef.content as MultiDownloadInfoComponent;\r\n                   rename = contentRef.getDownloadName();\r\n                  self.fileDownloadEvent.emit({ fileInfos: self.previewMultiSelected, name: rename });\r\n                  dlgRef.close();\r\n              }\r\n          }\r\n        ]\r\n      })   \r\n    }else{\r\n      //未启用重命名\r\n      rename=this.getName(this.previewMultiSelected[0]['name']);\r\n      this.fileDownloadEvent.emit({ fileInfos: this.previewMultiSelected, name: rename });\r\n    }     \r\n    \r\n  }\r\n  private getName(name: string) {\r\n    if (name.lastIndexOf('.') > 0) {\r\n      return name.substring(0, name.lastIndexOf('.'));\r\n    }\r\n    return '';\r\n  }\r\n  showPreviewStateColumn(columnInfo){\r\n    if(columnInfo['field']=='state'&&(this.uploadDisabled||!this.uploadVisible)){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\r\n//进度条状态 默认normal\r\nexport type UploadProgressStatusType = 'success' | 'error' | 'active' | 'normal';\r\n\r\n// const statusColorMap = new Map([\r\n//   ['normal', '#388fff'],\r\n//   ['exception', '#f24645'],\r\n//   ['success', '#51bd78']\r\n// ]);\r\n@Component({\r\n  selector: 'upload-progress',\r\n  templateUrl: './upload-progress.component.html',\r\n  styleUrls: ['./upload-progress.component.css']\r\n})\r\nexport class UploadProgressComponent implements OnInit, OnChanges {\r\n  //是否显示进度条信息\r\n  @Input() showInfo: boolean = true;\r\n  //进度条状态 默认'normal'\r\n  @Input() status: UploadProgressStatusType;\r\n  //已完成的分段百分比\r\n  @Input() successPercent: number;\r\n  @Input() percent = 0;\r\n  @Input() maxWidth =0;\r\n  //存储的状态\r\n  private cachedStatus: UploadProgressStatusType = 'normal';\r\n  //计算的状态\r\n  private inferredStatus: UploadProgressStatusType = 'normal';\r\n\r\n  //获得进度条状态\r\n  get progressStatus(): UploadProgressStatusType {\r\n    return this.status || this.inferredStatus;\r\n  }\r\n  constructor() { }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const { status, percent, successPercent } = changes;\r\n    //状态变化\r\n    if (status) {\r\n      this.cachedStatus = this.status || this.cachedStatus;\r\n    }\r\n    //进度 已完成的分段百分比 变化\r\n    if (percent || successPercent) {\r\n      const fillAll = parseInt(this.percent.toString(), 10) >= 100;\r\n      if (fillAll) {\r\n        if ((this.isNotNil(this.successPercent) && this.successPercent! >= 100) || this.successPercent === undefined) {\r\n          this.inferredStatus = 'success';\r\n          // this.status = this.inferredStatus;\r\n        }\r\n      } else {\r\n        this.inferredStatus = this.cachedStatus;\r\n      }\r\n      this.status = this.inferredStatus;\r\n    }\r\n  }\r\n  ngOnInit() {\r\n  }\r\n\r\n  isNotNil<T>(value: T): value is NonNullable<T> {\r\n    return typeof value !== 'undefined' && value !== null;\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FFileDropDirective, FFileSelectDirective, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective } from './directive/index';\r\nimport { FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, PreviewCheckboxComponent } from './components/index';\r\nimport { UploadServerService } from './model/index';\r\nimport { FFileSizePipe, FFileDatePipe } from './pipe/index';\r\nimport { FFileUploadServerConfig, FFileUploadAPIServiceToken, FFileUploadDefaultService, FFileUploaderService } from './service/index';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { DateHelperModule } from '@farris/ui-common/date';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { FAreaResponseModule } from '@farris/ui-area-response';\r\nimport { UploadAndPreviewComponent } from './components/upload-and-preview/upload-and-preview.component';\r\nimport { UploadProgressComponent } from './components/upload-progress/upload-progress.component';\r\nimport { MultiDownloadInfoComponent } from './components/multi-download-info/multi-download-info.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, PreviewCheckboxComponent, FFilePreviewToolbarTemplateDirective, FFileSizePipe, UploadAndPreviewComponent, UploadProgressComponent, FFileDatePipe,MultiDownloadInfoComponent],\r\n  exports: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective, FFileSizePipe, UploadAndPreviewComponent, UploadProgressComponent, FFileDatePipe],\r\n  imports: [\r\n    CommonModule, NotifyModule, MessagerModule, FAreaResponseModule, DateHelperModule.forRoot(), ModalModule.forRoot()\r\n  ],\r\n  providers: [\r\n    FFileUploaderService,\r\n    {\r\n      provide: UploadServerService,\r\n      useClass: FFileUploadDefaultService\r\n    }\r\n  ],\r\n  entryComponents:[\r\n    MultiDownloadInfoComponent\r\n  ]\r\n})\r\nexport class FFileUploadModule {\r\n  static forRoot(config?: FFileUploadServerConfig, uploadSer?: any): ModuleWithProviders {\r\n    return {\r\n      ngModule: FFileUploadModule,\r\n      providers: [\r\n        { provide: FFileUploadAPIServiceToken, useValue: config },\r\n        FFileUploaderService,\r\n        {\r\n          provide: UploadServerService,\r\n          useClass: uploadSer || FFileUploadDefaultService\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}