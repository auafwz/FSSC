/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-20 07:39:45
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Injectable, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { map, distinctUntilChanged, filter, switchMap } from 'rxjs/operators';
import { CalculationType } from '../types';
import { initDataGridState, ROW_INDEX_FIELD, IS_GROUP_ROW_FIELD, GROUP_ROW_FIELD, IS_GROUP_FOOTER_ROW_FIELD, GROUP_VISIBLE_FIELD, GROUP_LEVEL_FIELD } from './state';
import { cloneDeep, groupBy, isPlainObject, flatten } from 'lodash-es';
import { Utils } from '../utils/utils';
import { DatagridColumnsHelper } from './datagrid-columns.helper';
import { BigNumber } from 'bignumber.js';
export class DatagridFacadeService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.localId = 'zh-CHS';
        // public virtualizedService: VirtualizedLoaderService;
        this.store = new BehaviorSubject(null);
        this.virtualRowSubject = new BehaviorSubject(null);
        this.gridSizeSubject = new Subject();
        this.errorSubject = new Subject();
        this.selectRowSubject = new Subject();
        this.unSelectRowSubject = new Subject();
        this.columnResizeSubject = new Subject();
        this.clearSelectionSubject = new Subject();
        this.checkRowSubject = new Subject();
        this.unCheckRowSubject = new Subject();
        this.clearCheckedsSubject = new Subject();
        this.clearAllSubject = new Subject();
        this.checkAllSubject = new Subject();
        this.unCheckAllSubject = new Subject();
        this.selectAllSubject = new Subject();
        this.selectCellSubject = new Subject();
        this.error$ = this.errorSubject.asObservable();
        this.selectRow$ = this.selectRowSubject.asObservable();
        this.unSelectRow$ = this.unSelectRowSubject.asObservable();
        this.columnResize$ = this.columnResizeSubject.asObservable();
        this.clearSelections$ = this.clearSelectionSubject.asObservable();
        this.checkRow$ = this.checkRowSubject.asObservable();
        this.unCheckRow$ = this.unCheckRowSubject.asObservable();
        this.clearCheckeds$ = this.clearCheckedsSubject.asObservable();
        this.clearAll$ = this.clearAllSubject.asObservable();
        this.checkAll$ = this.checkAllSubject.asObservable();
        this.unCheckAll$ = this.unCheckAllSubject.asObservable();
        this.selectAll$ = this.selectAllSubject.asObservable();
        this.currentCell$ = this.selectCellSubject.asObservable();
        this.editCell$ = new EventEmitter();
        this.clientSort$ = new EventEmitter();
        this.rowAppend$ = new EventEmitter();
        this.rowUpdate$ = new EventEmitter();
        this.rowDelete$ = new EventEmitter();
        this.state$ = this.store.asObservable().pipe(filter((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state)));
        this.columnGroup$ = this.gridSizeSubject.asObservable().pipe(filter((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state)), map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state.columnsGroup)), switchMap((/**
         * @param {?} colgroup
         * @return {?}
         */
        (colgroup) => {
            return of(colgroup);
        })), distinctUntilChanged());
        this.gridSize$ = this.gridSizeSubject.asObservable().pipe(filter((/**
         * @param {?} state
         * @return {?}
         */
        (state) => state)), map((/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            const { headerHeight, pagerHeight, width, columnsGroup, height, rowHeight } = Object.assign({}, state);
            return { headerHeight, pagerHeight, width, columnsGroup, height, rowHeight };
        })), distinctUntilChanged());
        this.data$ = this.virtualRowSubject.pipe(filter((/**
         * @param {?} vs
         * @return {?}
         */
        vs => vs)), switchMap((/**
         * @param {?} vs
         * @return {?}
         */
        (vs) => {
            return of({
                index: vs.startIndex || 0,
                rows: vs.virtualRows || [],
                top: vs.topHideHeight,
                bottom: vs.bottomHideHeight,
                scrolling: vs.isScrollChange
            });
        })), distinctUntilChanged());
        this.difference = (/**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        (first, second) => first.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !second.includes(item))));
        this.differenceBy = (/**
         * @param {?} a
         * @param {?} b
         * @param {?} fn
         * @return {?}
         */
        (a, b, fn) => {
            /** @type {?} */
            const s = new Set(b.map(fn));
            return a.map(fn).filter((/**
             * @param {?} el
             * @return {?}
             */
            el => !s.has(el)));
        });
        this._state = cloneDeep(initDataGridState);
    }
    /**
     * @param {?} scrolltop
     * @param {?=} isScrollChange
     * @return {?}
     */
    updateVirthualRows(scrolltop, isScrollChange = false) {
        // console.time('计算虚拟加载');
        /** @type {?} */
        const virtual = this.getVirthualRows(scrolltop);
        virtual.isScrollChange = isScrollChange;
        // console.timeEnd('计算虚拟加载');
        this.updateState({ virtual }, false);
        this.virtualRowSubject.next(virtual);
    }
    /**
     * @param {?} scrolltop
     * @return {?}
     */
    getVirthualRows(scrolltop) {
        if (scrolltop === undefined) {
            scrolltop = 0;
        }
        /** @type {?} */
        const data = this._state.data || [];
        /** @type {?} */
        const virtual = { rowIndex: 0, virtualRows: data, topHideHeight: 0, bottomHideHeight: 0 };
        if (data.length === 0 || (this._state.autoHeight && !this._state.groupRows)) {
            virtual.virtualRows = data;
            return virtual;
        }
        if (this._state.flatColumns && this._state.flatColumns.length) {
            // data = this._state.data;
            // if (!this._state.groupRows) {
            //     if (this._state.virtual && this._state.virtualized) {
            //         this.virtualizedService.state = this._state;
            //         const rows = this.virtualizedService.getRows(scrolltop);
            //         virtual = { ...this._state.virtual, ...rows };
            //     } else {
            //         virtual.virtualRows = data;
            //     }
            // } else {
            //     // 行分组数据处理
            //     const groupRows = this.groupRows2(cloneDeep(data));
            //     virtual.virtualRows = groupRows;
            // }
            if (this._state.groupRows) {
                // 行分组数据处理
                /** @type {?} */
                const groupRows = this.groupRows2(cloneDeep(data));
                virtual.virtualRows = groupRows;
            }
        }
        if (this._state.mergeCell && this._state.enableClientSortForMergeCell) {
            virtual.virtualRows = this.sort(virtual.virtualRows);
        }
        return virtual;
    }
    // getDeltaTopHeight(scrolTop, firstIndex) {
    //     const {rowsLength: viewRowsCount, top, bottom} = this.virtualizedService.getRowsCount(scrolTop, this._state.pageSize, firstIndex);
    //     const gridContainerRowsCount = this.virtualizedService.displayRowsCount();
    //     let deltaTopHeight = 0;
    //     if (viewRowsCount < gridContainerRowsCount) {
    //         deltaTopHeight = (gridContainerRowsCount - viewRowsCount) * this._state.rowHeight - this._state.headerHeight;
    //     }
    //     return deltaTopHeight;
    // }
    /**
     * @param {?=} original
     * @return {?}
     */
    getData(original = false) {
        if (original) {
            return this._state.originalData || [];
        }
        return this._state.data || [];
    }
    /**
     * @return {?}
     */
    getState() {
        return this._state;
    }
    /**
     * @return {?}
     */
    getVirtualState() {
        return this._state.virtual;
    }
    /**
     * @return {?}
     */
    getPageInfo() {
        const { pageIndex, pageSize } = Object.assign({}, this._state);
        return { pageIndex, pageSize };
    }
    /**
     * @param {?} state
     * @return {?}
     */
    initState(state) {
        this.updateState(state, false);
        this._state.originalData = cloneDeep(this._state.data);
        this.initColumns();
        this.gridSizeSubject.next(this._state);
        this.updateVirthualRows(0);
    }
    /**
     * 加载数据
     * @param {?} data
     * @param {?=} updateOriginalData 是否更新原始数据, 默认为 true
     * @param {?=} sortable
     * @return {?}
     */
    loadData(data, updateOriginalData = true, sortable = false) {
        data = data || [];
        this.updateState({ data }, false);
        if (updateOriginalData) {
            this._state.originalData = cloneDeep(this._state.data);
        }
        if (sortable && this._state.sortName) {
            /** @type {?} */
            const sortedData = this.sort(this._state.data);
            this.updateState({ data: sortedData }, false);
        }
        else {
            // this.updateState({ data: this._state.originalData }, false);
        }
        this.updateVirthualRows(this._state.virtual.scrollTop || 0);
    }
    /**
     * 复原指定行的数据
     * @param {?} rowId
     * @return {?}
     */
    resetRow(rowId) {
        /** @type {?} */
        const origData = this._state.originalData;
        if (origData) {
            /** @type {?} */
            const origRowData = origData.find((/**
             * @param {?} r
             * @return {?}
             */
            r => this.primaryId(r) === rowId));
            this.getCurrentRow().data = cloneDeep(origRowData);
            this.updateRow(rowId, origRowData);
        }
    }
    // loadDataForVirtual(data: any) {
    //     this.updateState({ data }, false);
    //     // this.virtualizedService.state = this._state;
    //     const virtual = { ...this._state.virtual, ...this.virtualizedService.reload() };
    //     // console.log(virtual);
    //     this.virtualRowSubject.next(virtual);
    //     this.updateState({virtual});
    // }
    /**
     * @param {?} url
     * @return {?}
     */
    fetchData(url) {
        return this.http.get(url).pipe(map((/**
         * @param {?} r
         * @return {?}
         */
        r => (/** @type {?} */ (r)))));
    }
    /**
     * @param {?} total
     * @return {?}
     */
    setTotal(total) {
        this.updateState({ total }, false);
    }
    /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    updateProperty(property, value) {
        this.updateState({ [property]: value }, false);
    }
    /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} total
     * @return {?}
     */
    setPagination(pageIndex, pageSize, total) {
        this.updateState({ pageIndex, pageSize, total }, false);
    }
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    setScrollTop(scrollTop) {
        /** @type {?} */
        const virtual = Object.assign({}, this._state.virtual, { scrollTop });
        this.updateState({ virtual }, false);
    }
    /**
     * @return {?}
     */
    isMultiSelect() {
        return this._state.multiSelect;
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    _isRowSelected(id) {
        if (!id || !this._state.currentRow) {
            return false;
        }
        else {
            return this._state.currentRow.id.toString() === id.toString();
        }
    }
    /**
     * @param {?} id
     * @param {?=} selections
     * @return {?}
     */
    isRowSelected(id, selections = null) {
        /** @type {?} */
        const flag = this._isRowSelected(id);
        if (!this.isMultiSelect() || this._state.onlySelectSelf) {
            return flag;
        }
        else {
            if (!selections) {
                selections = this._state.selections;
            }
            if (this._canCancelSelectWhenMulti()) {
                return flag;
            }
            if (!selections || selections.length === 0) {
                return false;
            }
            else {
                return selections.findIndex((/**
                 * @param {?} sr
                 * @return {?}
                 */
                sr => sr.id == id)) > -1;
            }
        }
    }
    /**
     * @param {?} id
     * @param {?=} checkeds
     * @return {?}
     */
    isRowChecked(id, checkeds = null) {
        if (!checkeds) {
            checkeds = this.getCheckeds();
        }
        if (!id || !checkeds.length) {
            return false;
        }
        return checkeds.findIndex((/**
         * @param {?} sr
         * @return {?}
         */
        sr => sr.id.toString() === id.toString())) > -1;
    }
    /**
     * @return {?}
     */
    isCheckAll() {
        /** @type {?} */
        const allRows = this.getAllRowsForLive().map((/**
         * @param {?} r
         * @return {?}
         */
        r => this.primaryId(r)));
        /** @type {?} */
        const checkIds = this._state.checkedRows.map((/**
         * @param {?} r
         * @return {?}
         */
        r => r.id));
        if (this.difference(allRows, checkIds).length) {
            return false; // this._state.checkedRows.length === allRows.length;
        }
        else {
            return true;
        }
    }
    /**
     * @return {?}
     */
    getCurrentPageCheckeds() {
        /** @type {?} */
        const allRows = this.getAllRowsForLive().map((/**
         * @param {?} r
         * @return {?}
         */
        r => this.primaryId(r)));
        return this._state.checkedRows.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => allRows.indexOf(n.id) > -1));
    }
    /**
     * @return {?}
     */
    getCurrentRow() {
        return this._state.currentRow || undefined;
    }
    /**
     * @return {?}
     */
    getSelections() {
        // 如果数据源变了，需要重新计算
        /** @type {?} */
        const data = this._state.data;
        if (this._state.selections && this._state.selections.length) {
            if (!data || !data.length) {
                this._state.selections = [];
            }
            else {
                /** @type {?} */
                const temp = data.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => this.primaryId(n)));
                this._state.selections = this._state.selections.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return temp.includes(n.id);
                }));
            }
        }
        return this._state.selections || [];
    }
    /**
     * @private
     * @return {?}
     */
    getCheckedRowsFromSource() {
        return (this._state.checkedRows || []).map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const d = this.findRow(n.id);
            if (d && d.data) {
                n.data = d.data;
            }
            return n;
        }));
    }
    /**
     * @param {?=} fromDataSource
     * @return {?}
     */
    getCheckeds(fromDataSource = false) {
        if (fromDataSource) {
            this._state.checkedRows = this.getCheckedRowsFromSource();
        }
        return this._state.checkedRows || [];
    }
    /**
     * @param {?} rowid
     * @param {?} rowData
     * @return {?}
     */
    updateCheckedData(rowid, rowData) {
        /** @type {?} */
        const checkeds = this.getCheckeds();
        if (checkeds.length) {
            /** @type {?} */
            const item = checkeds.find((/**
             * @param {?} n
             * @return {?}
             */
            n => this.primaryId(n) == rowid));
            if (item) {
                Object.keys(rowData).forEach((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => {
                    Utils.setValue(k, rowData[k], item.data);
                }));
            }
        }
    }
    /**
     * @param {?} ids
     * @param {?=} checked
     * @return {?}
     */
    setCheckedRows(ids, checked = true) {
        if (ids && ids.length) {
            /** @type {?} */
            let checkeds = this._state.checkedRows || [];
            ids.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                /** @type {?} */
                const row = this.findRow(id);
                if (checked && row) {
                    if (!this.isRowChecked(id, checkeds)) {
                        /** @type {?} */
                        const srow = { id: this.primaryId(row.data), data: row.data, index: row.index };
                        checkeds.push(srow);
                    }
                }
                else {
                    if (!this._state.enableMorePageSelect || !checked) {
                        checkeds = checkeds.filter((/**
                         * @param {?} sr
                         * @return {?}
                         */
                        sr => sr.id !== id));
                    }
                }
            }));
            this._state.checkedRows = checkeds;
        }
        else {
            this._clearCheckeds();
        }
    }
    /**
     * @param {?} id
     * @param {?=} checked
     * @return {?}
     */
    checkRecord(id, checked = true) {
        if (id) {
            /** @type {?} */
            const row = this.findRow(id);
            if (row) {
                const { index: rowIndex, data: rowData } = Object.assign({}, row);
                if (checked) {
                    this.checkRow(rowIndex, rowData);
                }
                else {
                    this.unCheckRow(rowIndex, rowData);
                }
            }
            else {
                this.errorSubject.next(`未找到ID为${id}的数据。`);
            }
        }
        else {
            this.errorSubject.next(`参数id 不能为空。`);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    checkRow(rowIndex, rowData) {
        if (!this._state.multiSelect) {
            this._clearCheckeds();
        }
        /** @type {?} */
        const id = this.primaryId(rowData);
        /** @type {?} */
        const checkeds = this._state.checkedRows || [];
        if (id && !this.isRowChecked(id, checkeds)) {
            /** @type {?} */
            const srow = { id, data: rowData, index: rowIndex };
            checkeds.push(srow);
            this._state.checkedRows = checkeds;
            if (this._state.selectOnCheck) {
                this.selectRow(rowIndex, rowData);
            }
            this.checkRowSubject.next(srow);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    unCheckRow(rowIndex, rowData) {
        /** @type {?} */
        const id = this.primaryId(rowData);
        /** @type {?} */
        let checkeds = this._state.checkedRows || [];
        if (this.isRowChecked(id, checkeds)) {
            /** @type {?} */
            const srow = { id, data: rowData, index: rowIndex };
            checkeds = checkeds.filter((/**
             * @param {?} sr
             * @return {?}
             */
            sr => '' + sr.id !== '' + id));
            this._state.checkedRows = checkeds;
            if (this._state.selectOnCheck) {
                this.unSelectRow(rowIndex, rowData);
            }
            this.unCheckRowSubject.next(srow);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setCurrentPageData(data) {
        this._state.currentPageData = data;
    }
    /**
     * @return {?}
     */
    getCurrentPageData() {
        return this._state.currentPageData || [];
    }
    /**
     * 获取所有可以操作的行
     * @private
     * @return {?}
     */
    getAllRowsForLive() {
        /** @type {?} */
        let allData = this._state.data || [];
        if (this._state.pagination && !this._state.pagerOnServer) {
            // 获取当前页数据
            allData = this.getCurrentPageData();
        }
        // 排除掉禁用的行
        if (this._state.disableRow) {
            allData = allData.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => !this._state.disableRow(n, i)));
        }
        return allData;
    }
    /**
     * @return {?}
     */
    checkAll() {
        this._state.checkedRows = this._state.checkedRows || [];
        /** @type {?} */
        const allData = this.getAllRowsForLive();
        /** @type {?} */
        const allCheckeds = allData.map((/**
         * @param {?} r
         * @param {?} i
         * @return {?}
         */
        (r, i) => {
            return {
                id: this.primaryId(r),
                index: i,
                data: r
            };
        }));
        if (!this._state.checkedRows.length) {
            this._state.checkedRows = allCheckeds;
        }
        else {
            /** @type {?} */
            const _checkeds = [];
            allCheckeds.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!this._state.checkedRows.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id == element.id))) {
                    _checkeds.push(element);
                }
            }));
            this._state.checkedRows = this._state.checkedRows.concat(_checkeds);
        }
        if (this._state.selectOnCheck && !this._state.onlySelectSelf) {
            this._state.selections = [];
            this._state.selections = allData.map((/**
             * @param {?} r
             * @param {?} i
             * @return {?}
             */
            (r, i) => {
                return {
                    id: this.primaryId(r),
                    index: i,
                    data: r
                };
            }));
        }
        this.checkAllSubject.next(this._state.checkedRows);
    }
    /**
     * @return {?}
     */
    selectAll() {
        this._state.selections = [];
        /** @type {?} */
        const allData = this.getAllRowsForLive();
        this._state.selections = allData.map((/**
         * @param {?} r
         * @param {?} i
         * @return {?}
         */
        (r, i) => {
            return {
                id: this.primaryId(r),
                index: i,
                data: r
            };
        }));
        if (this._state.checkOnSelect) {
            this._state.checkedRows = [];
            this._state.checkedRows = allData.map((/**
             * @param {?} r
             * @param {?} i
             * @return {?}
             */
            (r, i) => {
                return {
                    id: this.primaryId(r),
                    index: i,
                    data: r
                };
            }));
        }
        this.selectAllSubject.next(this._state.selections);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findRow(id) {
        if (this._state.data && this._state.data.length) {
            /** @type {?} */
            let index = -1;
            /** @type {?} */
            const data = this._state.data.find((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                /** @type {?} */
                const r = this.primaryId(n) == id;
                if (r) {
                    index = i;
                }
                return r;
            }));
            if (index === -1) {
                return null;
            }
            return { index, data };
        }
        return null;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findRowIndex(id) {
        if (this._state.data && this._state.data.length) {
            return this._state.data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => this.primaryId(n) === id));
        }
        return -1;
    }
    /**
     * 设置选中行，不触发grid 选中事件，取消选中事件
     * @param {?} id
     * @param {?=} select
     * @return {?}
     */
    setSelectRow(id, select = true) {
        /** @type {?} */
        const row = this.findRow(id);
        const { index: rowIndex, data: rowData } = Object.assign({}, row);
        /** @type {?} */
        const srow = { id, data: rowData, index: rowIndex };
        if (this.isMultiSelect()) {
            if (select) {
                this.selectRowForMulti(srow, false);
            }
            else {
                this.unSelectRowForMulti(srow, false);
            }
        }
        /** @type {?} */
        const _sr = select ? srow : null;
        this.updateState({ currentRow: _sr }, false);
    }
    /**
     * @param {?} id
     * @param {?=} select
     * @return {?}
     */
    selectRecord(id, select = true) {
        if (id) {
            /** @type {?} */
            const row = this.findRow(id);
            if (row) {
                const { index: rowIndex, data: rowData } = Object.assign({}, row);
                if (select) {
                    this.selectRow(rowIndex, rowData);
                }
                else {
                    this.unSelectRow(rowIndex, rowData);
                }
            }
            else {
                this.errorSubject.next(`未找到ID为${id}的数据。`);
            }
        }
        else {
            this.errorSubject.next(`参数id 不能为空。`);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    selectRow(rowIndex, rowData) {
        /** @type {?} */
        const isMultiSelect = this.isMultiSelect();
        /** @type {?} */
        const id = this.primaryId(rowData);
        /** @type {?} */
        const srow = { id, data: rowData, index: rowIndex };
        if (!this.isRowSelected(id) || !this._state.currentRow) {
            if (!isMultiSelect) {
                this.updateState({ currentRow: srow }, false);
                this.selectRowSubject.next(this._state.currentRow);
                if (this._state.showCheckbox && this._state.checkOnSelect) {
                    this._state.checkedRows = [srow];
                    this.checkRowSubject.next(srow);
                }
            }
            else {
                this.selectRowForMulti(srow);
            }
        }
    }
    /**
     * @private
     * @param {?} srow
     * @param {?=} emit
     * @return {?}
     */
    selectRowForMulti(srow, emit = true) {
        if (this._state.onlySelectSelf) {
            this._clearSelections();
            this.updateState({ currentRow: srow, selections: [srow] }, false);
        }
        else {
            this._state.selections = this._state.selections || [];
            this._state.selections = this._state.selections.filter((/**
             * @param {?} sr
             * @return {?}
             */
            sr => sr.id !== srow.id));
            this._state.selections.push(srow);
        }
        if (emit) {
            this.selectRowSubject.next(srow);
        }
        if (this._state.checkOnSelect) {
            this.checkRow(srow.index, srow.data);
        }
    }
    /**
     * @private
     * @param {?} srow
     * @param {?=} emit
     * @return {?}
     */
    unSelectRowForMulti(srow, emit = true) {
        this._state.selections = this._state.selections.filter((/**
         * @param {?} sr
         * @return {?}
         */
        sr => sr.id !== srow.id));
        if (this._canCancelSelectWhenMulti() || (this._state.currentRow && this._state.currentRow.id === srow.id)) {
            this.updateState({ currentRow: null });
        }
        if (this._state.checkOnSelect) {
            this.unCheckRow(srow.index, srow.data);
        }
        if (emit) {
            this.unSelectRowSubject.next(srow);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    unSelectRow(rowIndex, rowData) {
        /** @type {?} */
        const id = this.primaryId(rowData);
        /** @type {?} */
        const isMultiSelect = this.isMultiSelect();
        /** @type {?} */
        const srow = { id, index: rowIndex, data: rowData };
        if (!isMultiSelect) {
            if (this._state.currentRow) {
                this.updateState({ currentRow: null });
                this.unSelectRowSubject.next(srow);
                if (this._state.showCheckbox) {
                    this.unCheckRow(srow.index, srow.data);
                }
            }
        }
        else {
            this.unSelectRowForMulti(srow);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _canCancelSelectWhenMulti() {
        return !this._state.keepSelect && this._state.onlySelectSelf;
    }
    /**
     * @private
     * @param {?=} excludeIds
     * @return {?}
     */
    _clearSelections(excludeIds) {
        this._state.currentRow = null;
        if (!excludeIds || !excludeIds.length) {
            this._state.selections = [];
        }
        else {
            this._state.selections = this._state.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return excludeIds.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i == n.id)) > -1;
            }));
        }
    }
    /**
     * @private
     * @param {?=} rows
     * @return {?}
     */
    _clearCheckeds(rows = []) {
        if (!rows.length) {
            this._state.checkedRows = [];
        }
        else {
            this._state.checkedRows = this._state.checkedRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => rows.findIndex((/**
             * @param {?} r
             * @return {?}
             */
            r => this.primaryId(r) === n.id)) == -1));
        }
    }
    /**
     * @param {?=} excludeIds
     * @return {?}
     */
    clearSelections(excludeIds) {
        /** @type {?} */
        const rows = this._state.selections;
        excludeIds = excludeIds || [];
        this._clearSelections(excludeIds);
        /** @type {?} */
        const unCheckRows = rows.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => excludeIds.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i == n.id)) == -1));
        if (this._state.checkOnSelect || (!this._state.multiSelect && this._state.showCheckbox)) {
            // this._state.checkedRows = [];
            // this.clearCheckedsSubject.next(rows);
            this._state.checkedRows = this._state.checkedRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return !rows.find((/**
                 * @param {?} t1
                 * @return {?}
                 */
                t1 => t1.id == n.id && excludeIds.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                i => i == n.id)) == -1));
            }));
            this.clearCheckedsSubject.next(unCheckRows);
        }
        this.clearSelectionSubject.next(unCheckRows);
    }
    /**
     * @param {?=} clearAll
     * @return {?}
     */
    clearCheckeds(clearAll = true) {
        /** @type {?} */
        const rows = this.getAllRowsForLive();
        /** @type {?} */
        const _rows = clearAll ? [] : rows;
        this._clearCheckeds(_rows);
        if (this._state.selectOnCheck) {
            this._clearSelections();
        }
        this.clearCheckedsSubject.next(rows);
    }
    /**
     * @return {?}
     */
    clearAll() {
        this._clearCheckeds();
        this._clearSelections();
        this.clearAllSubject.next();
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    setMultiSelect(flag) {
        this._state.multiSelect = flag;
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    setCheckOnSelect(flag) {
        this._state.checkOnSelect = flag;
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    setSelectOnCheck(flag) {
        this._state.selectOnCheck = flag;
    }
    /**
     * @param {?} dr
     * @param {?} field
     * @param {?=} cellElement
     * @param {?=} cellRef
     * @return {?}
     */
    setCurrentCell(dr, field, cellElement, cellRef) {
        const { rowIndex, rowData } = Object.assign({}, dr);
        /** @type {?} */
        let currentCell = Object.assign({}, this._state.currentCell, { rowIndex, rowData, field, rowId: this.primaryId(rowData), cellElement });
        if (field !== this._state.ControlPanelFeild) {
            if (cellRef) {
                currentCell.cellRef = cellRef;
            }
            if (field) {
                currentCell.column = this.getColumn(field);
            }
            /** @type {?} */
            const isLastRow = rowIndex === this.getData().length - 1;
            currentCell['lastRow'] = isLastRow;
        }
        else {
            currentCell = null;
        }
        this.updateState({ currentCell }, false);
        this.selectRow(rowIndex, rowData);
        if (this._state.currentRow) {
            this._state.currentRow.dr = dr;
        }
        this.selectCellSubject.next(currentCell);
    }
    /**
     * @return {?}
     */
    cancelSelectCell() {
        if (this._state.currentCell) {
            this.updateState({ currentCell: null }, false);
            this.selectCellSubject.next(null);
        }
    }
    /**
     * @param {?} rowData
     * @return {?}
     */
    primaryId(rowData) {
        return rowData[this._state.idField];
    }
    /**
     * @return {?}
     */
    getCurrentCell() {
        return this._state.currentCell;
    }
    /**
     * @return {?}
     */
    editCell() {
        if (this._state.currentCell) {
            if (!this._state.currentCell.isEditing) {
                /** @type {?} */
                const cei = Object.assign({}, this._state.currentCell, { isEditing: true });
                this.updateState({ currentCell: cei }, false);
                this.selectCellSubject.next(cei);
                // this.editCell$.next(cei);
            }
        }
    }
    /**
     * @return {?}
     */
    endEditCell() {
        if (this._state.currentCell && this._state.currentCell.isEditing) {
            /** @type {?} */
            const cei = Object.assign({}, this._state.currentCell, { isEditing: false });
            this.updateState({ currentCell: cei }, false);
            this.selectCellSubject.next(cei);
            // this.editCell$.next(cei);
        }
    }
    /**
     * @param {?} rowData
     * @return {?}
     */
    appendRow(rowData) {
        if (rowData && this.primaryId(rowData)) {
            /** @type {?} */
            const pid = this.primaryId(rowData);
            if (this.findRowIndex(pid) === -1) {
                this._state.data.push(rowData);
                /** @type {?} */
                const newData = [...this._state.data];
                this.updateState({ data: newData }, false);
                this._state.originalData = cloneDeep(this._state.data);
                this.refresh();
                this.rowAppend$.emit(rowData);
            }
            else {
                throw new Error(`主键ID 已存在！ID: ${pid}`);
            }
        }
        else {
            throw new Error(`主键标识字段不能为空。`);
        }
    }
    /**
     * @param {?} rowid
     * @param {?} rowData
     * @return {?}
     */
    updateRow(rowid, rowData) {
        /** @type {?} */
        const row = this.findRow(rowid);
        if (row && row.data) {
            if (rowData) {
                /** @type {?} */
                const keys = Object.keys(rowData);
                keys.forEach((/**
                 * @param {?} field
                 * @return {?}
                 */
                field => {
                    Utils.setValue(field, rowData[field], row.data);
                }));
                // 更新已勾选的数据
                this.updateCheckedData(rowid, rowData);
                this.rowUpdate$.emit(row);
            }
        }
        else {
            console.log('Can not found rowid: ' + rowid);
        }
        // Object.assign(this.findRow(id), row);
    }
    /**
     * @param {?} rowid
     * @return {?}
     */
    deleteRow(rowid) {
        /** @type {?} */
        const row = this.findRow(rowid);
        if (row) {
            /** @type {?} */
            const newData = this.removeRow(this._state.data, rowid);
            this.updateState({ data: newData }, false);
            this._state.originalData = cloneDeep(this._state.data);
            this.refresh();
            this.rowDelete$.emit(rowid);
            return row;
        }
        else {
            console.log('Can not found row by ID:' + rowid);
        }
    }
    /**
     * 从数组中删除指定的ID
     * @param {?} data 数组
     * @param {?} rowId 要删除的ID
     * @return {?}
     */
    removeRow(data, rowId) {
        /** @type {?} */
        const newData = data.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const id = this.primaryId(n);
            return rowId !== id;
        }));
        return newData;
    }
    /**
     * @param {?} cellInfo
     * @return {?}
     */
    isCellSelected(cellInfo) {
        /** @type {?} */
        const cc = this.getCurrentCell();
        if (!cc) {
            return false;
        }
        else {
            if (this._state.currentRow.index === cc.rowIndex) {
                return cc.field === cellInfo.field;
            }
            return false;
        }
    }
    /**
     * @protected
     * @param {?} state
     * @param {?=} emit
     * @return {?}
     */
    updateState(state, emit = true) {
        /** @type {?} */
        const newState = Object.assign({}, this._state, state);
        this._state = newState;
        if (emit) {
            this.store.next(this._state);
        }
    }
    /**
     * @param {?=} newSize
     * @return {?}
     */
    resize(newSize) {
        if (newSize) {
            this.updateState(newSize, false);
        }
        this.resetColumnsSize();
        if (!this._state.groupRows) {
            this.updateVirthualRows(this._state.virtual.scrollTop);
        }
    }
    /**
     * @param {?} fit
     * @return {?}
     */
    fitColumns(fit) {
        this.updateState({ fitColumns: fit }, false);
        // const r = this.useUserSetColumnSize();
        // this.setFitColumnsWidth(this._state.columnsGroup, true, r);
        // this.gridSizeSubject.next(this._state);
        this.resetColumnsSize();
    }
    /**
     * @private
     * @return {?}
     */
    useUserSetColumnSize() {
        if (this._state.autoFitColumns) {
            /** @type {?} */
            const gridWidth = this._state.width;
            /** @type {?} */
            const userSetColumnWidth = this._state.columnsGroup.originalTotalWidth;
            return userSetColumnWidth > gridWidth;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    resetColumnsSize() {
        if (this._state.fitColumns) {
            // 20200421
            /** @type {?} */
            const r = this.useUserSetColumnSize();
            this.setFitColumnsWidth(this._state.columnsGroup, r, r);
        }
        this.gridSizeSubject.next(this._state);
    }
    /**
     * 更新列设置
     * @param {?} columns 新的列集合
     * @param {?=} restitute 是否还原初始宽度 默认为 false
     * @param {?=} emit
     * @return {?}
     */
    updateColumns(columns, restitute = false, emit = false) {
        this._state.columns = columns;
        this.initColumns(emit, restitute);
        this.resizeColumns(restitute);
    }
    /**
     * @param {?=} emit
     * @param {?=} restColumnWidth
     * @return {?}
     */
    initColumns(emit = false, restColumnWidth = false) {
        /** @type {?} */
        const columns = this._state.flatColumns;
        /** @type {?} */
        let colgroup = {
            leftFixed: [],
            rightFixed: [],
            normalColumns: []
        };
        if (columns && columns.length) {
            /** @type {?} */
            const leftFixedCols = this.getFixedCols('left');
            /** @type {?} */
            const rightFixedCols = this.getFixedCols('right');
            /** @type {?} */
            const normalCols = this.getFixedCols();
            columns.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (!c.originalWidth) {
                    c.originalWidth = c.width;
                }
            }));
            colgroup = {
                leftFixed: leftFixedCols,
                rightFixed: rightFixedCols,
                normalColumns: normalCols
            };
            this.initColumnsWidth(colgroup, restColumnWidth);
            if (this._state.fitColumns) {
                this.setFitColumnsWidth(colgroup, true);
            }
            this.updateState({ columnsGroup: colgroup }, emit);
        }
        else {
            colgroup.leftFixedWidth = 0;
            colgroup.rightFixedWidth = 0;
            colgroup.normalWidth = 0;
            colgroup.totalWidth = 0;
            this.updateState({ columnsGroup: colgroup }, emit);
        }
    }
    /**
     * @param {?} field
     * @param {?=} fixed
     * @return {?}
     */
    getColumnIndex(field, fixed = '') {
        /** @type {?} */
        const colgroup = this._state.columnsGroup;
        if (!fixed) {
            return colgroup.normalColumns.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === field));
        }
        else {
            if (fixed === 'left') {
                return colgroup.leftFixed.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.field === field));
            }
            else if (fixed === 'right') {
                return colgroup.rightFixed.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.field === field));
            }
        }
    }
    /**
     * @return {?}
     */
    columnResizeEnd() {
        // const colgroup = this._state.columnsGroup;
        // this.initColumnsWidth(colgroup, false);
        // this.updateState({ columnsGroup:  {...colgroup} }, false);
        // this.gridSizeSubject.next(this._state);
        this.resizeColumns();
    }
    /**
     * @param {?=} restitute
     * @return {?}
     */
    resizeColumns(restitute = false) {
        /** @type {?} */
        const colgroup = this._state.columnsGroup;
        this.initColumnsWidth(colgroup, restitute);
        if (this._state.fitColumns) {
            /** @type {?} */
            const r = this.useUserSetColumnSize();
            if (r) {
                this.setFitColumnsWidth(colgroup, restitute, r);
            }
            else {
                this.setFitColumnsWidth(colgroup, restitute);
            }
        }
        this.updateState({ columnsGroup: Object.assign({}, colgroup) }, false);
        this.gridSizeSubject.next(this._state);
    }
    /**
     * @return {?}
     */
    getAllFlatColumns() {
        return flatten(this._state.columns);
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getColumn(fieldName) {
        return this.getAllFlatColumns().find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === fieldName));
    }
    /**
     * @param {?} colgroup
     * @param {?=} restitute
     * @param {?=} useUserSetColumnSize
     * @return {?}
     */
    setFitColumnsWidth(colgroup, restitute = false, useUserSetColumnSize = false) {
        if (!colgroup) {
            return;
        }
        colgroup.normalWidth = this._state.width - colgroup.leftFixedWidth - colgroup.rightFixedWidth;
        if (!colgroup.normalWidth || colgroup.normalWidth < 0) {
            return;
        }
        if (useUserSetColumnSize) {
            colgroup.totalWidth = colgroup.originalTotalWidth;
            if (restitute) {
                colgroup.normalColumns.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => {
                    col.width = col.originalWidth;
                }));
            }
            // 更新 normalColumns width
            colgroup.normalWidth = colgroup.normalColumns.reduce((/**
             * @param {?} totalWidth
             * @param {?} col
             * @return {?}
             */
            (totalWidth, col) => {
                if (!restitute && col.width) {
                    return totalWidth += col.width;
                }
                else {
                    return totalWidth += col.originalWidth;
                }
            }), 0);
            colgroup.totalWidth = colgroup.leftFixedWidth + colgroup.rightFixedWidth + colgroup.normalWidth;
        }
        else {
            /** @type {?} */
            const minWidth = colgroup.normalColumns.reduce((/**
             * @param {?} totalWidth
             * @param {?} col
             * @return {?}
             */
            (totalWidth, col) => {
                if (!restitute) {
                    return totalWidth += col.width;
                }
                else {
                    return totalWidth += col.originalWidth;
                }
            }), 0);
            colgroup.normalWidth = colgroup.normalWidth - 2;
            colgroup.normalColumns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                if (!restitute) {
                    // col.width = Math.floor( col.width / minWidth * colgroup.normalWidth );
                    col.width = Number((col.width / minWidth * colgroup.normalWidth).toFixed(2));
                }
                else {
                    // col.width = Math.floor( col.originalWidth / minWidth * colgroup.normalWidth );
                    col.width = Number((col.originalWidth / minWidth * colgroup.normalWidth).toFixed(2));
                }
            }));
            colgroup.totalWidth = colgroup.leftFixedWidth + colgroup.rightFixedWidth + colgroup.normalWidth;
        }
    }
    /**
     * @private
     * @param {?=} direction
     * @return {?}
     */
    getFixedCols(direction = '') {
        /** @type {?} */
        let cols = [];
        if (!direction) {
            cols = this._state.flatColumns.filter((/**
             * @param {?} col
             * @return {?}
             */
            col => !col.fixed));
        }
        else {
            cols = this._state.flatColumns.filter((/**
             * @param {?} col
             * @return {?}
             */
            col => col.fixed === direction));
        }
        // 多表头，重新计算列的顺序
        if (this._state.columns.length > 1 && cols.length) {
            /** @type {?} */
            const fields = DatagridColumnsHelper.getFields(this._state.columns);
            /** @type {?} */
            const newcols = [];
            fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                /** @type {?} */
                const c = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => (col.field || '') === f));
                if (c) {
                    newcols.push(c);
                }
            }));
            return newcols;
        }
        return cols;
    }
    // restitute: 还原初始宽度，默认 false
    /**
     * @private
     * @param {?} colgroup
     * @param {?=} restitute
     * @return {?}
     */
    initColumnsWidth(colgroup, restitute = false) {
        /** @type {?} */
        let offset = 0;
        offset = this._state.showLineNumber ? offset + this._state.lineNumberWidth : offset;
        offset = this._state.showCheckbox ? offset + this._state.checkboxColumnWidth : offset;
        /** @type {?} */
        const getColsWidth = (/**
         * @param {?} cols
         * @param {?} val
         * @param {?} reset
         * @return {?}
         */
        (cols, val, reset) => {
            return cols.reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            (r, c) => {
                c.left = r;
                if (!reset) {
                    return r + c.width;
                }
                else {
                    return r + c.originalWidth;
                }
            }), val);
        });
        colgroup.leftFixedWidth = offset;
        if (colgroup.leftFixed && colgroup.leftFixed.length) {
            colgroup.leftFixedWidth = getColsWidth(colgroup.leftFixed, offset, restitute);
        }
        colgroup.rightFixedWidth = 0;
        if (colgroup.rightFixed && colgroup.rightFixed.length) {
            colgroup.rightFixedWidth = getColsWidth(colgroup.rightFixed, 0, restitute);
        }
        colgroup.normalWidth = 0;
        if (this._state.columns && this._state.columns.length) {
            colgroup.normalWidth = getColsWidth(colgroup.normalColumns, 0, restitute);
            colgroup.originalTotalWidth = getColsWidth(colgroup.normalColumns, 0, true);
        }
        colgroup.totalWidth = colgroup.leftFixedWidth + colgroup.rightFixedWidth + colgroup.normalWidth;
    }
    /**
     * @param {?=} isShow
     * @return {?}
     */
    showCheckbox(isShow = true) {
        /** @type {?} */
        const colgroup = this._state.columnsGroup;
        this.updateState({ showCheckbox: isShow }, false);
        if (isShow) {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth + this._state.checkboxColumnWidth;
        }
        else {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth - this._state.checkboxColumnWidth;
        }
        this.columnResizeSubject.next(colgroup);
    }
    /**
     * @return {?}
     */
    hideCheckbox() {
        this.showCheckbox(false);
    }
    /**
     * @param {?=} isShow
     * @return {?}
     */
    showLineNumber(isShow = true) {
        /** @type {?} */
        const colgroup = this._state.columnsGroup;
        this.updateState({ showLineNumber: isShow }, false);
        if (isShow) {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth + this._state.lineNumberWidth;
        }
        else {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth - this._state.lineNumberWidth;
        }
        this.columnResizeSubject.next(colgroup);
    }
    /**
     * @return {?}
     */
    hideLineNumber() {
        this.showLineNumber(false);
    }
    /**
     * @param {?} sortName
     * @param {?} sortOrder
     * @return {?}
     */
    setSortInfo(sortName, sortOrder) {
        sortName = sortName || '';
        sortOrder = sortOrder || '';
        /** @type {?} */
        const fields = sortName.split(',');
        /** @type {?} */
        const orders = sortOrder.split(',');
        // if (!this._state.multiSort) {
        /** @type {?} */
        const colgroup = this._state.columnsGroup;
        /** @type {?} */
        const updateFieldOrder = (/**
         * @param {?} cols
         * @return {?}
         */
        (cols) => {
            if (!cols || !cols.length) {
                return;
            }
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                col.order = undefined;
                /** @type {?} */
                const i = fields.findIndex((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f === col.field));
                if (i > -1) {
                    col.order = orders[i];
                }
            }));
        });
        updateFieldOrder(colgroup.normalColumns);
        updateFieldOrder(colgroup.leftFixed);
        updateFieldOrder(colgroup.rightFixed);
        // }
        this.updateState({ sortName, sortOrder }, false);
    }
    /**
     * @param {?} arr
     * @param {?} props
     * @param {?} orders
     * @return {?}
     */
    orderBy(arr, props, orders) {
        /** @type {?} */
        const colObj = props.reduce((/**
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        (c, n) => {
            c[n] = this.getColumn(n);
            return c;
        }), {});
        return [...arr].sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => props.reduce((/**
         * @param {?} acc
         * @param {?} prop
         * @param {?} i
         * @return {?}
         */
        (acc, prop, i) => {
            if (acc === 0) {
                /** @type {?} */
                let valA = Utils.getValue(prop, a);
                /** @type {?} */
                let valB = Utils.getValue(prop, b);
                if (colObj[prop] && colObj[prop]['isMultilingualField']) {
                    valA = Utils.getMultilingualValue(valA, this.localId);
                    valB = Utils.getMultilingualValue(valB, this.localId);
                }
                if (valA === undefined || valA === null) {
                    valA = '';
                }
                if (valB === undefined || valB === null) {
                    valB = '';
                }
                const [p1, p2] = orders && orders[i] === 'desc' ? [valB, valA] : [valA, valB];
                if (typeof p1 === 'string') {
                    acc = p1.localeCompare(p2);
                }
                else {
                    acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;
                }
            }
            return acc;
        }), 0)));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    sort(data) {
        /** @type {?} */
        const orders = this._state.sortOrder.split(',');
        /** @type {?} */
        const fields = this._state.sortName.split(',');
        if (this._state.mergeCell && this._state.mergeFields && this._state.mergeFields.length) {
            /** @type {?} */
            const newOrders = [];
            /** @type {?} */
            const newFields = [...this._state.mergeFields];
            fields.forEach((/**
             * @param {?} f
             * @param {?} i
             * @return {?}
             */
            (f, i) => {
                /** @type {?} */
                let k = newFields.indexOf(f);
                if (k == -1) {
                    newFields.push(f);
                    k = newFields.length - 1;
                }
                newOrders[k] = orders[i];
            }));
            return this.orderBy(data, newFields, newOrders);
        }
        return this.orderBy(data, fields, orders);
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    clientSort(data) {
        if (this._state.sortName) {
            if (data) {
                this.updateState({ data }, false);
            }
            /** @type {?} */
            const sortedData = this.sort(this._state.data);
            this.loadData(sortedData, false);
        }
        else {
            this.clearSort();
        }
        this.clientSort$.emit({ sortName: this._state.sortName, sortOrder: this._state.sortOrder });
    }
    /**
     * @return {?}
     */
    clearSort() {
        this.loadData(this._state.originalData, false);
    }
    /**
     * @param {?} filterData
     * @return {?}
     */
    loadFilterData(filterData) {
        this.loadData(filterData, false);
    }
    //#region 变更集
    /**
     * @private
     * @param {?} rowid
     * @return {?}
     */
    hasRowChanges(rowid) {
        /** @type {?} */
        const _changes = this._state.changes;
        if (!_changes) {
            return false;
        }
        return _changes[rowid];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    appendChanges(changes) {
        if (!changes) {
            return;
        }
        /** @type {?} */
        const id = changes[this._state.idField];
        if (!id) {
            return;
        }
        /** @type {?} */
        const _id = '' + id;
        if (!this.hasRowChanges(_id)) {
            this._state.changes = this._state.changes || {};
            this._state.changes[_id] = changes;
        }
        else {
            this._state.changes[_id] = Object.assign(this._state.changes[_id], changes);
        }
    }
    /**
     * @return {?}
     */
    acceptChanges() {
        /** @type {?} */
        const changes = this._state.changes;
        if (changes) {
            /** @type {?} */
            const keys = Object.keys(changes);
            keys.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                this.updateRow(id, changes[id]);
            }));
            this._state.originalData = cloneDeep(this._state.data);
        }
    }
    /**
     * @param {?=} rowid
     * @return {?}
     */
    rejectChanges(rowid = null) {
        /** @type {?} */
        const changes = this._state.changes;
        if (changes) {
            if (!rowid) {
                this._state.data = cloneDeep(this._state.originalData);
                this._state.changes = null;
            }
            else {
                /** @type {?} */
                const rowChanges = this._state.changes['' + rowid];
                if (rowChanges) {
                    /** @type {?} */
                    const orgiRow = this._state.originalData.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => this.primaryId(r) === rowid));
                    this._state.data.forEach((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        if (this.primaryId(r) === rowid) {
                            r = cloneDeep(orgiRow);
                        }
                    }));
                }
            }
            this.refresh();
        }
    }
    /**
     * @return {?}
     */
    getChanges() {
        return this._state.changes;
    }
    /**
     * @return {?}
     */
    refresh() {
        /** @type {?} */
        const data = cloneDeep(this._state.data);
        this.loadData(data);
    }
    //#endregion
    /**
     * 构造合计行
     * @param {?} data 数据集合
     * @return {?}
     */
    getFooterData(data) {
        if (this._state.showFooter) {
            // const columns = this._state.flatColumns;
            /** @type {?} */
            const columns = flatten(this._state.columns).filter((/**
             * @param {?} col
             * @return {?}
             */
            (col) => !col.colspan));
            /** @type {?} */
            const footerRow = {};
            columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                if (col.footer && col.footer.options) {
                    /** @type {?} */
                    const options = col.footer.options;
                    /** @type {?} */
                    const text = options.text;
                    /** @type {?} */
                    const typ = (/** @type {?} */ (options.calculationType));
                    if (typ !== undefined && typ != -1) {
                        /** @type {?} */
                        const val = this.calculation(data, typ, col);
                        footerRow[col.field] = val;
                    }
                    else {
                        footerRow[col.field] = text || '';
                    }
                }
                else {
                    footerRow[col.field] = '';
                }
            }));
            return [footerRow];
        }
        return [];
    }
    /**
     * @private
     * @param {?} items
     * @param {?} fields
     * @return {?}
     */
    arrToGroup(items, fields) {
        if (fields.length) {
            /** @type {?} */
            const first = fields.shift();
            /** @type {?} */
            const g1 = groupBy(items, (/**
             * @param {?} n
             * @return {?}
             */
            (n) => Utils.getValue(first, n)));
            this.toGroup(g1, fields);
            return g1;
        }
    }
    /**
     * @private
     * @param {?} g1
     * @param {?} fieldArr
     * @return {?}
     */
    toGroup(g1, fieldArr) {
        if (fieldArr.length) {
            Object.keys(g1).forEach((/**
             * @param {?} k
             * @return {?}
             */
            (k) => {
                /** @type {?} */
                const items = g1[k];
                /** @type {?} */
                const _nextFields = fieldArr.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n));
                /** @type {?} */
                const _f = _nextFields.shift();
                g1[k] = groupBy(items, (/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => Utils.getValue(_f, n)));
                if (_nextFields.length) {
                    this.toGroup(g1[k], _nextFields);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} groupRows
     * @param {?} initLevel
     * @param {?} parent
     * @return {?}
     */
    groupRows2Flat(groupRows, initLevel, parent) {
        /** @type {?} */
        let results = [];
        if (initLevel === undefined) {
            initLevel = 0;
        }
        /** @type {?} */
        const idfield = this._state.idField;
        /** @type {?} */
        const columns = this._state.flatColumns;
        /** @type {?} */
        const data = this._state.data;
        /** @type {?} */
        const groupFieldArr = this._state.groupField.split(',');
        /** @type {?} */
        const pid = parent ? parent[idfield] : null;
        /** @type {?} */
        const colspan = this._state.columnsGroup.normalColumns.length;
        Object.keys(groupRows).forEach((/**
         * @param {?} k
         * @param {?} m
         * @return {?}
         */
        (k, m) => {
            /** @type {?} */
            const groupItem = { [idfield]: Utils.uuid(),
                [IS_GROUP_ROW_FIELD]: true, [GROUP_LEVEL_FIELD]: initLevel, data: {}, value: k,
                [GROUP_VISIBLE_FIELD]: true, expanded: true, field: groupFieldArr[initLevel],
                colspan, total: 0, rows: [], [GROUP_ROW_FIELD]: pid };
            // TFS: 356955
            if (parent) {
                groupItem.rows = parent.rows.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => !n[IS_GROUP_ROW_FIELD] &&
                    !n[IS_GROUP_FOOTER_ROW_FIELD] && Utils.getValue(groupFieldArr[initLevel], n) === k));
            }
            else {
                groupItem.rows = data.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => '' + Utils.getValue(groupFieldArr[initLevel], n) === k));
            }
            if (parent) {
                parent.rows.push(groupItem);
            }
            groupItem.total = groupItem.rows.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n[IS_GROUP_ROW_FIELD] && !n[IS_GROUP_FOOTER_ROW_FIELD])).length;
            results.push(groupItem);
            /** @type {?} */
            const items = groupRows[k];
            if (isPlainObject(items)) {
                /** @type {?} */
                const level = initLevel + 1;
                results = results.concat(this.groupRows2Flat(items, level, groupItem));
            }
            else {
                groupItem.total = items.length;
                items.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n[GROUP_ROW_FIELD] = groupItem[idfield];
                    n[GROUP_VISIBLE_FIELD] = true;
                    n[GROUP_LEVEL_FIELD] = groupItem[GROUP_LEVEL_FIELD] + 1;
                    return n;
                }));
                groupItem.rows = items;
                results = results.concat(items);
            }
            if (this._state.groupFooter) {
                /** @type {?} */
                const footerItem = {
                    [IS_GROUP_FOOTER_ROW_FIELD]: true,
                    [GROUP_ROW_FIELD]: groupItem[idfield],
                    [GROUP_VISIBLE_FIELD]: true,
                    [GROUP_LEVEL_FIELD]: initLevel,
                    data: {}
                };
                groupItem.rows.push(footerItem);
                results.push(footerItem);
            }
        }));
        return results;
    }
    /**
     * 更新分组合计行数据
     * @private
     * @param {?} groupFooterRow
     * @param {?} columns
     * @param {?} groupRows
     * @return {?}
     */
    updateGroupFooterData(groupFooterRow, columns, groupRows) {
        columns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            if (col.groupFooter && col.groupFooter.options) {
                /** @type {?} */
                const options = col.groupFooter.options;
                /** @type {?} */
                const text = options.text;
                /** @type {?} */
                const typ = (/** @type {?} */ (options.calculationType));
                if (typ !== undefined && typ != -1) {
                    /** @type {?} */
                    const val = this.calculation(groupRows, typ, col);
                    groupFooterRow.data[col.field] = val;
                }
                else {
                    groupFooterRow.data[col.field] = text || '';
                }
            }
            else {
                groupFooterRow.data[col.field] = '';
            }
        }));
    }
    /**
     * 多字段分组
     * groupField 以逗号分隔，从左到右依次进行分组
     * @private
     * @param {?} data
     * @return {?}
     */
    groupRows2(data) {
        if (data && data.length) {
            /** @type {?} */
            const columns = this._state.flatColumns;
            /** @type {?} */
            const groupField = this._state.groupField || '';
            if (!groupField) {
                return data;
            }
            /** @type {?} */
            const groupData = this.arrToGroup(data, groupField.split(','));
            /** @type {?} */
            const result = this.groupRows2Flat(groupData, 0, null);
            /** @type {?} */
            let k = 0;
            /** @type {?} */
            const prow = (/**
             * @param {?} pid
             * @return {?}
             */
            (pid) => result.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this._state.idField] === pid)));
            result.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                if (!n[IS_GROUP_ROW_FIELD] && !n[IS_GROUP_FOOTER_ROW_FIELD]) {
                    n[ROW_INDEX_FIELD] = k;
                    k++;
                }
                // 更新合计行数据
                if (n[IS_GROUP_FOOTER_ROW_FIELD]) {
                    /** @type {?} */
                    const rows = prow(n[GROUP_ROW_FIELD]).rows.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => !r[IS_GROUP_ROW_FIELD] && !r[IS_GROUP_FOOTER_ROW_FIELD]));
                    this.updateGroupFooterData(n, columns, rows);
                }
                return n;
            }));
            return result;
        }
        return [];
    }
    /**
     * @param {?} groupFooter
     * @return {?}
     */
    showGroupFooter(groupFooter) {
        this.updateState({ groupFooter }, false);
        this.updateVirthualRows(0);
    }
    /**
     * @param {?} groupRowId
     * @return {?}
     */
    updateGroupFooter(groupRowId) {
        /** @type {?} */
        const groupRow = this._state.virtual.virtualRows.find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            return n['id'] === groupRowId;
        }));
        if (groupRow) {
            /** @type {?} */
            const groupRows = groupRow.rows;
            /** @type {?} */
            const groupFooterRows = groupRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n['__group_footer__']));
            /** @type {?} */
            const columns = this._state.flatColumns;
            /** @type {?} */
            const rows = groupRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => !n['__group_footer__']));
            groupFooterRows.forEach((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                this.updateGroupFooterData(n, columns, rows);
            }));
        }
    }
    /**
     * @private
     * @param {?} data
     * @param {?} typ
     * @param {?} col
     * @return {?}
     */
    calculation(data, typ, col) {
        /** @type {?} */
        let val = '';
        // TFS: 357000
        // http://10.24.1.11:8080/tfs/GSP/GSPCloud/web/_queries?id=357000&triage=true&fullScreen=false&_a=edit
        if (!data || !data.length) {
            return '';
        }
        /** @type {?} */
        const field = col.field;
        /** @type {?} */
        const arr = data.map((/**
         * @param {?} o
         * @return {?}
         */
        (o) => Utils.getValue(field, o) || 0));
        switch (typ) {
            case CalculationType.sum:
                // val = sumBy(data, (o) => Utils.getValue(field, o));
                val = BigNumber.sum.apply(null, arr).toFixed();
                break;
            case CalculationType.max:
                // const maxObj = maxBy(data, (o) => Utils.getValue(field, o));
                // val = Utils.getValue(field, maxObj);
                val = BigNumber.max.apply(null, arr).toFixed();
                break;
            case CalculationType.min:
                // const minObj = minBy(data, (o) => Utils.getValue(field, o));
                // val = Utils.getValue(field, minObj);
                val = BigNumber.min.apply(null, arr).toFixed();
                break;
            case CalculationType.average:
                // val = meanBy(data, (o) => Utils.getValue(field, o));
                val = BigNumber.sum.apply(null, arr).div(arr.length).toFixed();
                break;
            case CalculationType.count:
                val = data.length;
                break;
        }
        return val;
    }
    //#region 组件初始属性
    /**
     * @param {?} opts
     * @return {?}
     */
    setinitialOptions(opts) {
        this._state.initialOptions = {};
        // 分组
        this._state.initialOptions['groupField'] = opts.groupField;
        // 排序
        this._state.initialOptions['sort'] = {
            sortName: opts.sortName,
            sortOrder: opts.sortOrder
        };
        // 列显示隐藏、对齐方式
        if (opts.columns && opts.columns[0]) {
            this._state.initialOptions['columnFields'] = ((/** @type {?} */ (opts.columns[0]))).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    width: n.width || 100,
                    field: n.field,
                    halign: n.halign,
                    align: n.align,
                    visible: n.visible,
                    footer: cloneDeep(n.footer || {}),
                    groupFooter: cloneDeep(n.groupFooter || {})
                };
            }));
        }
    }
}
DatagridFacadeService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridFacadeService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    DatagridFacadeService.prototype.localId;
    /**
     * @type {?}
     * @protected
     */
    DatagridFacadeService.prototype._state;
    /** @type {?} */
    DatagridFacadeService.prototype.store;
    /** @type {?} */
    DatagridFacadeService.prototype.virtualRowSubject;
    /** @type {?} */
    DatagridFacadeService.prototype.gridSizeSubject;
    /** @type {?} */
    DatagridFacadeService.prototype.errorSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.selectRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.unSelectRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.columnResizeSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.clearSelectionSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.checkRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.unCheckRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.clearCheckedsSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.clearAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.checkAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.unCheckAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.selectAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.selectCellSubject;
    /** @type {?} */
    DatagridFacadeService.prototype.error$;
    /** @type {?} */
    DatagridFacadeService.prototype.selectRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.unSelectRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.columnResize$;
    /** @type {?} */
    DatagridFacadeService.prototype.clearSelections$;
    /** @type {?} */
    DatagridFacadeService.prototype.checkRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.unCheckRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.clearCheckeds$;
    /** @type {?} */
    DatagridFacadeService.prototype.clearAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.checkAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.unCheckAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.selectAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.currentCell$;
    /** @type {?} */
    DatagridFacadeService.prototype.editCell$;
    /** @type {?} */
    DatagridFacadeService.prototype.clientSort$;
    /** @type {?} */
    DatagridFacadeService.prototype.rowAppend$;
    /** @type {?} */
    DatagridFacadeService.prototype.rowUpdate$;
    /** @type {?} */
    DatagridFacadeService.prototype.rowDelete$;
    /** @type {?} */
    DatagridFacadeService.prototype.state$;
    /** @type {?} */
    DatagridFacadeService.prototype.columnGroup$;
    /** @type {?} */
    DatagridFacadeService.prototype.gridSize$;
    /** @type {?} */
    DatagridFacadeService.prototype.data$;
    /** @type {?} */
    DatagridFacadeService.prototype.difference;
    /** @type {?} */
    DatagridFacadeService.prototype.differenceBy;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,