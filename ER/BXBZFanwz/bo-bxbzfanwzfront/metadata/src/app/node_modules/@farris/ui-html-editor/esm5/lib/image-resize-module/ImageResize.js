/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import DefaultOptions from './DefaultOptions';
import { DisplaySize } from './modules/DisplaySize';
import { Toolbar } from './modules/Toolbar';
import { Resize } from './modules/Resize';
import Quill from 'quill';
/** @type {?} */
var knownModules = { DisplaySize: DisplaySize, Toolbar: Toolbar, Resize: Resize };
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
var /**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
ImageResize = /** @class */ (function () {
    function ImageResize(quill, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.initializeModules = (/**
         * @return {?}
         */
        function () {
            _this.removeModules();
            _this.modules = _this.moduleClasses.map((/**
             * @param {?} ModuleClass
             * @return {?}
             */
            function (ModuleClass) { return new (knownModules[ModuleClass] || ModuleClass)(_this); }));
            _this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            function (module) {
                module.onCreate();
            }));
            _this.onUpdate();
        });
        this.onUpdate = (/**
         * @return {?}
         */
        function () {
            _this.repositionElements();
            _this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            function (module) {
                module.onUpdate();
            }));
        });
        this.removeModules = (/**
         * @return {?}
         */
        function () {
            _this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            function (module) {
                module.onDestroy();
            }));
            _this.modules = [];
        });
        this.handleClick = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (evt.target &&
                evt.target.tagName &&
                evt.target.tagName.toUpperCase() === 'IMG') {
                if (_this.img === evt.target) {
                    // we are already focused on this image
                    return;
                }
                if (_this.img) {
                    // we were just focused on another image
                    _this.hide();
                }
                // clicked on an image inside the editor
                _this.show(evt.target);
            }
            else if (_this.img) {
                // clicked on a non image
                _this.hide();
            }
        });
        this.show = (/**
         * @param {?} img
         * @return {?}
         */
        function (img) {
            // keep track of this img element
            _this.img = img;
            _this.showOverlay();
            _this.initializeModules();
        });
        this.showOverlay = (/**
         * @return {?}
         */
        function () {
            if (_this.overlay) {
                _this.hideOverlay();
            }
            _this.quill.setSelection(null);
            // prevent spurious text selection
            _this.setUserSelect('none');
            // listen for the image being deleted or moved
            document.addEventListener('keyup', _this.checkImage, true);
            _this.quill.root.addEventListener('input', _this.checkImage, true);
            // Create and add the overlay
            _this.overlay = document.createElement('div');
            Object.assign(_this.overlay.style, _this.options.overlayStyles);
            _this.quill.root.parentNode.appendChild(_this.overlay);
            _this.repositionElements();
        });
        this.hideOverlay = (/**
         * @return {?}
         */
        function () {
            if (!_this.overlay) {
                return;
            }
            // Remove the overlay
            _this.quill.root.parentNode.removeChild(_this.overlay);
            _this.overlay = undefined;
            // stop listening for image deletion or movement
            document.removeEventListener('keyup', _this.checkImage);
            _this.quill.root.removeEventListener('input', _this.checkImage);
            // reset user-select
            _this.setUserSelect('');
        });
        this.repositionElements = (/**
         * @return {?}
         */
        function () {
            if (!_this.overlay || !_this.img) {
                return;
            }
            // position the overlay over the image
            /** @type {?} */
            var parent = _this.quill.root.parentNode;
            /** @type {?} */
            var imgRect = _this.img.getBoundingClientRect();
            /** @type {?} */
            var containerRect = parent.getBoundingClientRect();
            Object.assign(_this.overlay.style, {
                left: imgRect.left -
                    containerRect.left +
                    parent.scrollLeft -
                    2 + "px",
                top: imgRect.top - containerRect.top + parent.scrollTop - 2 + "px",
                width: imgRect.width + 2 + "px",
                height: imgRect.height + 2 + "px"
            });
        });
        this.hide = (/**
         * @return {?}
         */
        function () {
            _this.hideOverlay();
            _this.removeModules();
            _this.img = undefined;
        });
        this.setUserSelect = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            [
                'userSelect',
                'mozUserSelect',
                'webkitUserSelect',
                'msUserSelect'
            ].forEach((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                // set on contenteditable element and <html>
                _this.quill.root.style[prop] = value;
                document.documentElement.style[prop] = value;
            }));
        });
        this.checkImage = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (_this.img) {
                if (evt.keyCode == 46 || evt.keyCode == 8) {
                    Quill.find(_this.img).deleteAt(0);
                }
                _this.hide();
            }
        });
        // save the quill reference and options
        this.quill = quill;
        // Apply the options to our defaults, and stash them for later
        // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately
        /** @type {?} */
        var moduleClasses = false;
        // tslint:disable-next-line:object-literal-key-quotes
        if (options['modules']) {
            moduleClasses = options['modules'].slice();
        }
        // Apply options to default options
        //this.options = defaultsDeep({}, options, DefaultOptions);
        this.options = Object.assign({}, options, DefaultOptions);
        // (see above about moduleClasses)
        if (moduleClasses !== false) {
            this.options.modules = moduleClasses;
        }
        // disable native image resizing on firefox
        document.execCommand('enableObjectResizing', false, 'false');
        // respond to clicks inside the editor
        this.quill.root.addEventListener('click', this.handleClick, false);
        this.quill.root.parentNode.style.position =
            this.quill.root.parentNode.style.position || 'relative';
        // setup modules
        this.moduleClasses = this.options.modules;
        //console.log('this.options.modules', this.options.modules)
        this.modules = [];
    }
    return ImageResize;
}());
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
export { ImageResize };
if (false) {
    /** @type {?} */
    ImageResize.prototype.quill;
    /** @type {?} */
    ImageResize.prototype.options;
    /** @type {?} */
    ImageResize.prototype.moduleClasses;
    /** @type {?} */
    ImageResize.prototype.modules;
    /** @type {?} */
    ImageResize.prototype.img;
    /** @type {?} */
    ImageResize.prototype.overlay;
    /** @type {?} */
    ImageResize.prototype.initializeModules;
    /** @type {?} */
    ImageResize.prototype.onUpdate;
    /** @type {?} */
    ImageResize.prototype.removeModules;
    /** @type {?} */
    ImageResize.prototype.handleClick;
    /** @type {?} */
    ImageResize.prototype.show;
    /** @type {?} */
    ImageResize.prototype.showOverlay;
    /** @type {?} */
    ImageResize.prototype.hideOverlay;
    /** @type {?} */
    ImageResize.prototype.repositionElements;
    /** @type {?} */
    ImageResize.prototype.hide;
    /** @type {?} */
    ImageResize.prototype.setUserSelect;
    /** @type {?} */
    ImageResize.prototype.checkImage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VSZXNpemUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWh0bWwtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2ltYWdlLXJlc2l6ZS1tb2R1bGUvSW1hZ2VSZXNpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sY0FBYyxNQUFNLGtCQUFrQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQzs7SUFDcEIsWUFBWSxHQUFHLEVBQUUsV0FBVyxhQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUU7Ozs7OztBQU9yRDs7Ozs7O0lBT0kscUJBQVksS0FBSyxFQUFFLE9BQVk7UUFBWix3QkFBQSxFQUFBLFlBQVk7UUFBL0IsaUJBa0NDO1FBRUQsc0JBQWlCOzs7UUFBRztZQUNoQixLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFFckIsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsYUFBYSxDQUFDLEdBQUc7Ozs7WUFDakMsVUFBQSxXQUFXLElBQUksT0FBQSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLEtBQUksQ0FBQyxFQUFwRCxDQUFvRCxFQUN0RSxDQUFDO1lBRUYsS0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxNQUFNO2dCQUN2QixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFDLENBQUM7WUFFSCxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxFQUFDO1FBRUYsYUFBUTs7O1FBQUc7WUFDUCxLQUFJLENBQUMsa0JBQWtCLEVBQUUs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UUFFekQsa0NBQWtDO1FBQ2xDLElBQUksYUFBYSxLQUFLLEtBQUssRUFBRTtZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUM7U0FDeEM7UUFFRCwyQ0FBMkM7UUFDM0MsUUFBUSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFN0Qsc0NBQXNDO1FBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUTtZQUNyQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUM7UUFFNUQsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDMUMsMkRBQTJEO1FBRTNELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFxSkwsa0JBQUM7QUFBRCxDQUFDLEFBOUxELElBOExDOzs7Ozs7Ozs7SUE3TEcsNEJBQVc7O0lBQ1gsOEJBQWE7O0lBQ2Isb0NBQW1COztJQUNuQiw4QkFBYTs7SUFDYiwwQkFBUzs7SUFDVCw4QkFBYTs7SUFxQ2Isd0NBWUU7O0lBRUYsK0JBS0U7O0lBRUYsb0NBTUU7O0lBRUYsa0NBb0JFOztJQUNGLDJCQU9FOztJQUVGLGtDQXFCRTs7SUFFRixrQ0FlRTs7SUFFRix5Q0FtQkU7O0lBRUYsMkJBSUU7O0lBRUYsb0NBV0U7O0lBRUYsaUNBT0UiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IERlZmF1bHRPcHRpb25zIGZyb20gJy4vRGVmYXVsdE9wdGlvbnMnO1xyXG5pbXBvcnQgeyBEaXNwbGF5U2l6ZSB9IGZyb20gJy4vbW9kdWxlcy9EaXNwbGF5U2l6ZSc7XHJcbmltcG9ydCB7IFRvb2xiYXIgfSBmcm9tICcuL21vZHVsZXMvVG9vbGJhcic7XHJcbmltcG9ydCB7IFJlc2l6ZSB9IGZyb20gJy4vbW9kdWxlcy9SZXNpemUnO1xyXG5pbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnO1xyXG5jb25zdCBrbm93bk1vZHVsZXMgPSB7IERpc3BsYXlTaXplLCBUb29sYmFyLCBSZXNpemUgfTtcclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gbW9kdWxlIGZvciBxdWlsbGpzIHRvIGFsbG93IHVzZXIgdG8gcmVzaXplIDxpbWc+IGVsZW1lbnRzXHJcbiAqIChXb3JrcyBvbiBDaHJvbWUsIEVkZ2UsIFNhZmFyaSBhbmQgcmVwbGFjZXMgRmlyZWZveCdzIG5hdGl2ZSByZXNpemUgYmVoYXZpb3IpXHJcbiAqIEBzZWUgaHR0cHM6Ly9xdWlsbGpzLmNvbS9ibG9nL2J1aWxkaW5nLWEtY3VzdG9tLW1vZHVsZS9cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnZVJlc2l6ZSB7XHJcbiAgICBxdWlsbDogYW55O1xyXG4gICAgb3B0aW9uczogYW55O1xyXG4gICAgbW9kdWxlQ2xhc3NlczogYW55O1xyXG4gICAgbW9kdWxlczogYW55O1xyXG4gICAgaW1nOiBhbnk7XHJcbiAgICBvdmVybGF5OiBhbnk7XHJcbiAgICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgLy8gc2F2ZSB0aGUgcXVpbGwgcmVmZXJlbmNlIGFuZCBvcHRpb25zXHJcbiAgICAgICAgdGhpcy5xdWlsbCA9IHF1aWxsO1xyXG4gICAgICAgIC8vIEFwcGx5IHRoZSBvcHRpb25zIHRvIG91ciBkZWZhdWx0cywgYW5kIHN0YXNoIHRoZW0gZm9yIGxhdGVyXHJcbiAgICAgICAgLy8gZGVmYXVsdHNEZWVwIGRvZXNuJ3QgZG8gYXJyYXlzIGFzIHlvdSdkIGV4cGVjdCwgc28gd2UnbGwgbmVlZCB0byBhcHBseSB0aGUgY2xhc3NlcyBhcnJheSBmcm9tIG9wdGlvbnMgc2VwYXJhdGVseVxyXG4gICAgICAgIGxldCBtb2R1bGVDbGFzc2VzID0gZmFsc2U7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9iamVjdC1saXRlcmFsLWtleS1xdW90ZXNcclxuICAgICAgICBpZiAob3B0aW9uc1snbW9kdWxlcyddKSB7XHJcbiAgICAgICAgICAgIG1vZHVsZUNsYXNzZXMgPSBvcHRpb25zWydtb2R1bGVzJ10uc2xpY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFwcGx5IG9wdGlvbnMgdG8gZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgICAgLy90aGlzLm9wdGlvbnMgPSBkZWZhdWx0c0RlZXAoe30sIG9wdGlvbnMsIERlZmF1bHRPcHRpb25zKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPU9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIERlZmF1bHRPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gKHNlZSBhYm92ZSBhYm91dCBtb2R1bGVDbGFzc2VzKVxyXG4gICAgICAgIGlmIChtb2R1bGVDbGFzc2VzICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubW9kdWxlcyA9IG1vZHVsZUNsYXNzZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkaXNhYmxlIG5hdGl2ZSBpbWFnZSByZXNpemluZyBvbiBmaXJlZm94XHJcbiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2VuYWJsZU9iamVjdFJlc2l6aW5nJywgZmFsc2UsICdmYWxzZScpO1xyXG5cclxuICAgICAgICAvLyByZXNwb25kIHRvIGNsaWNrcyBpbnNpZGUgdGhlIGVkaXRvclxyXG4gICAgICAgIHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2ssIGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy5xdWlsbC5yb290LnBhcmVudE5vZGUuc3R5bGUucG9zaXRpb24gPVxyXG4gICAgICAgICAgICB0aGlzLnF1aWxsLnJvb3QucGFyZW50Tm9kZS5zdHlsZS5wb3NpdGlvbiB8fCAncmVsYXRpdmUnO1xyXG5cclxuICAgICAgICAvLyBzZXR1cCBtb2R1bGVzXHJcbiAgICAgICAgdGhpcy5tb2R1bGVDbGFzc2VzID0gdGhpcy5vcHRpb25zLm1vZHVsZXM7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygndGhpcy5vcHRpb25zLm1vZHVsZXMnLCB0aGlzLm9wdGlvbnMubW9kdWxlcylcclxuXHJcbiAgICAgICAgdGhpcy5tb2R1bGVzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZU1vZHVsZXMgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVNb2R1bGVzKCk7XHJcblxyXG4gICAgICAgIHRoaXMubW9kdWxlcyA9IHRoaXMubW9kdWxlQ2xhc3Nlcy5tYXAoXHJcbiAgICAgICAgICAgIE1vZHVsZUNsYXNzID0+IG5ldyAoa25vd25Nb2R1bGVzW01vZHVsZUNsYXNzXSB8fCBNb2R1bGVDbGFzcykodGhpcylcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLm1vZHVsZXMuZm9yRWFjaChtb2R1bGUgPT4ge1xyXG4gICAgICAgICAgICBtb2R1bGUub25DcmVhdGUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vblVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBvblVwZGF0ZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnJlcG9zaXRpb25FbGVtZW50cygpO1xyXG4gICAgICAgIHRoaXMubW9kdWxlcy5mb3JFYWNoKG1vZHVsZSA9PiB7XHJcbiAgICAgICAgICAgIG1vZHVsZS5vblVwZGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICByZW1vdmVNb2R1bGVzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubW9kdWxlcy5mb3JFYWNoKG1vZHVsZSA9PiB7XHJcbiAgICAgICAgICAgIG1vZHVsZS5vbkRlc3Ryb3koKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tb2R1bGVzID0gW107XHJcbiAgICB9O1xyXG5cclxuICAgIGhhbmRsZUNsaWNrID0gZXZ0ID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGV2dC50YXJnZXQgJiZcclxuICAgICAgICAgICAgZXZ0LnRhcmdldC50YWdOYW1lICYmXHJcbiAgICAgICAgICAgIGV2dC50YXJnZXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnSU1HJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbWcgPT09IGV2dC50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBhbHJlYWR5IGZvY3VzZWQgb24gdGhpcyBpbWFnZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmltZykge1xyXG4gICAgICAgICAgICAgICAgLy8gd2Ugd2VyZSBqdXN0IGZvY3VzZWQgb24gYW5vdGhlciBpbWFnZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2xpY2tlZCBvbiBhbiBpbWFnZSBpbnNpZGUgdGhlIGVkaXRvclxyXG4gICAgICAgICAgICB0aGlzLnNob3coZXZ0LnRhcmdldCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmltZykge1xyXG4gICAgICAgICAgICAvLyBjbGlja2VkIG9uIGEgbm9uIGltYWdlXHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzaG93ID0gaW1nID0+IHtcclxuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoaXMgaW1nIGVsZW1lbnRcclxuICAgICAgICB0aGlzLmltZyA9IGltZztcclxuXHJcbiAgICAgICAgdGhpcy5zaG93T3ZlcmxheSgpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRpYWxpemVNb2R1bGVzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNob3dPdmVybGF5ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm92ZXJsYXkpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlT3ZlcmxheSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24obnVsbCk7XHJcblxyXG4gICAgICAgIC8vIHByZXZlbnQgc3B1cmlvdXMgdGV4dCBzZWxlY3Rpb25cclxuICAgICAgICB0aGlzLnNldFVzZXJTZWxlY3QoJ25vbmUnKTtcclxuXHJcbiAgICAgICAgLy8gbGlzdGVuIGZvciB0aGUgaW1hZ2UgYmVpbmcgZGVsZXRlZCBvciBtb3ZlZFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5jaGVja0ltYWdlLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmNoZWNrSW1hZ2UsIHRydWUpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYW5kIGFkZCB0aGUgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMub3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vdmVybGF5LnN0eWxlLCB0aGlzLm9wdGlvbnMub3ZlcmxheVN0eWxlcyk7XHJcblxyXG4gICAgICAgIHRoaXMucXVpbGwucm9vdC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7XHJcblxyXG4gICAgICAgIHRoaXMucmVwb3NpdGlvbkVsZW1lbnRzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGhpZGVPdmVybGF5ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5vdmVybGF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMucXVpbGwucm9vdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMub3ZlcmxheSk7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAvLyBzdG9wIGxpc3RlbmluZyBmb3IgaW1hZ2UgZGVsZXRpb24gb3IgbW92ZW1lbnRcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuY2hlY2tJbWFnZSk7XHJcbiAgICAgICAgdGhpcy5xdWlsbC5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5jaGVja0ltYWdlKTtcclxuXHJcbiAgICAgICAgLy8gcmVzZXQgdXNlci1zZWxlY3RcclxuICAgICAgICB0aGlzLnNldFVzZXJTZWxlY3QoJycpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXBvc2l0aW9uRWxlbWVudHMgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm92ZXJsYXkgfHwgIXRoaXMuaW1nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBvc2l0aW9uIHRoZSBvdmVybGF5IG92ZXIgdGhlIGltYWdlXHJcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5xdWlsbC5yb290LnBhcmVudE5vZGU7XHJcbiAgICAgICAgY29uc3QgaW1nUmVjdCA9IHRoaXMuaW1nLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lclJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vdmVybGF5LnN0eWxlLCB7XHJcbiAgICAgICAgICAgIGxlZnQ6IGAke2ltZ1JlY3QubGVmdCAtXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJSZWN0LmxlZnQgK1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LnNjcm9sbExlZnQgLVxyXG4gICAgICAgICAgICAgICAgMn1weGAsXHJcbiAgICAgICAgICAgIHRvcDogYCR7aW1nUmVjdC50b3AgLSBjb250YWluZXJSZWN0LnRvcCArIHBhcmVudC5zY3JvbGxUb3AgLSAyfXB4YCxcclxuICAgICAgICAgICAgd2lkdGg6IGAke2ltZ1JlY3Qud2lkdGggKyAyfXB4YCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBgJHtpbWdSZWN0LmhlaWdodCArIDJ9cHhgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGhpZGUgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5oaWRlT3ZlcmxheSgpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTW9kdWxlcygpO1xyXG4gICAgICAgIHRoaXMuaW1nID0gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuXHJcbiAgICBzZXRVc2VyU2VsZWN0ID0gdmFsdWUgPT4ge1xyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgJ3VzZXJTZWxlY3QnLFxyXG4gICAgICAgICAgICAnbW96VXNlclNlbGVjdCcsXHJcbiAgICAgICAgICAgICd3ZWJraXRVc2VyU2VsZWN0JyxcclxuICAgICAgICAgICAgJ21zVXNlclNlbGVjdCdcclxuICAgICAgICBdLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgICAgIC8vIHNldCBvbiBjb250ZW50ZWRpdGFibGUgZWxlbWVudCBhbmQgPGh0bWw+XHJcbiAgICAgICAgICAgIHRoaXMucXVpbGwucm9vdC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY2hlY2tJbWFnZSA9IGV2dCA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1nKSB7XHJcbiAgICAgICAgICAgIGlmIChldnQua2V5Q29kZSA9PSA0NiB8fCBldnQua2V5Q29kZSA9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICBRdWlsbC5maW5kKHRoaXMuaW1nKS5kZWxldGVBdCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vY29uc29sZS5sb2coSW1hZ2VSZXNpemUpXHJcbi8vIGlmIChRdWlsbCkge1xyXG4vLyAgICAgUXVpbGwucmVnaXN0ZXIoJ21vZHVsZXMvaW1hZ2VSZXNpemUnLCBJbWFnZVJlc2l6ZSlcclxuLy8gfVxyXG4iXX0=