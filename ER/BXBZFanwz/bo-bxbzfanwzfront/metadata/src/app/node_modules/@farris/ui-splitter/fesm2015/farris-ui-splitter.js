import { Injectable, Component, HostBinding, Input, ContentChildren, NgModule, defineInjectable } from '@angular/core';
import { AngularDraggableModule } from '@farris/ui-draggable';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SplitterService {
    constructor() { }
}
SplitterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SplitterService.ctorParameters = () => [];
/** @nocollapse */ SplitterService.ngInjectableDef = defineInjectable({ factory: function SplitterService_Factory() { return new SplitterService(); }, token: SplitterService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SplitterPaneComponent {
    constructor() {
        this.cls = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SplitterPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-splitter-pane',
                template: `
    <ng-content></ng-content>
  `
            }] }
];
/** @nocollapse */
SplitterPaneComponent.ctorParameters = () => [];
SplitterPaneComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-component-splitter-pane',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SplitterComponent {
    constructor() {
        this.cls = true;
        this.orientation = "horizontal";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // console.log(this.splitterPane)
        // const length = this.splitterPane.length;
        // const cls = 'f-col-w' + Math.floor(12 / length);
        // if (this.orientation === 'horizontal') {
        //   this.splitterPane.forEach((item, index) => {
        //     if (index < length - 1) {
        //       item.cls += 'd-flex flex-column farris-lsection ' + cls;
        //     }
        //     if (index === length - 1) {
        //       item.cls += 'farris-rsection farris-overflow-y-auto f-utils-fill';
        //     }
        //   })
        // }
    }
}
SplitterComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-splitter',
                template: `
    <ng-content></ng-content>
  `
            }] }
];
/** @nocollapse */
SplitterComponent.ctorParameters = () => [];
SplitterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-component-splitter',] }],
    orientation: [{ type: Input }],
    splitterPane: [{ type: ContentChildren, args: [SplitterPaneComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SplitterModule {
}
SplitterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SplitterComponent,
                    SplitterPaneComponent
                ],
                imports: [
                    AngularDraggableModule
                ],
                exports: [
                    SplitterComponent,
                    SplitterPaneComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SplitterService, SplitterComponent, SplitterPaneComponent, SplitterModule };

//# sourceMappingURL=farris-ui-splitter.js.map