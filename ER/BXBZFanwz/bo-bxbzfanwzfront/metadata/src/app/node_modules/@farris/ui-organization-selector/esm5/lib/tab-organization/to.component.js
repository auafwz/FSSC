/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-organization/to.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Injector, ViewChild, TemplateRef, HostBinding, NgZone } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import * as _ from 'lodash-es';
import { of } from 'rxjs';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ChangeType } from '../../utils/index.type';
import { CommonUtil } from '../../utils/common.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { StateMgrTool } from '../../utils/state.mgr.tool';
import { switchMap } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
var OrganizationComponent = /** @class */ (function () {
    function OrganizationComponent(apiService, cdr, favoritesTool, injector, ngZone, stateMgr, msgService) {
        var _this = this;
        this.apiService = apiService;
        this.cdr = cdr;
        this.favoritesTool = favoritesTool;
        this.injector = injector;
        this.ngZone = ngZone;
        this.stateMgr = stateMgr;
        this.msgService = msgService;
        this.baseCls = true;
        this.primaryField = 'orgId';
        this.pathLength = 4;
        this.selectionsChange = new EventEmitter();
        this.originalTreeData = [];
        this.locationOrgText = '';
        this.treeListData = [];
        this.treeTableCols = [];
        this.selections = [];
        this.favoritesList = [];
        this.initLoad = true;
        this.checkedOrgs = [];
        this.beforeClickNode = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.enableHierarchicalLoading) {
                return of(true);
            }
            if (!_this.multiSelect) {
                if (e.rowNode.isSelected) {
                    _this.setSelections([]);
                }
                else {
                    _this.setSelections(new Array(e.rowNode.node.data), ChangeType.ValueChanged, 'other');
                }
                return of(false);
            }
            /** @type {?} */
            var param = {
                absOrgType: _this.absOrgType,
                notGetStopOrg: _this.notGetStopOrg,
                getCurUser: false,
                parentID: e.rowNode.id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return _this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data['data'].length > _this.selectedLimit && !e.rowNode.isChecked) {
                    _this.msgService.show('warning', "\u4EB2\uFF0C\u4E00\u6B21\u6027\u9009\u62E9\u4E86\u8D85\u8FC7" + _this.selectedLimit + "\u6761\u6570\u636E~", true);
                    return of(false);
                }
                if (!e.rowNode.isChecked) {
                    // todo 待验证，加入selection，
                    data.data.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.selections) === -1) {
                            _this.setSelections(item, ChangeType.Append, 'other');
                        }
                    }));
                }
                else {
                    _this.selections.forEach((/**
                     * @param {?} selection
                     * @param {?} index
                     * @return {?}
                     */
                    function (selection, index) {
                        data.data.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            if (selection[_this.primaryField] === item[_this.primaryField]) {
                                _this.setSelections(item, ChangeType.Remove, 'other');
                            }
                        }));
                    }));
                }
                _this.cdr.detectChanges();
                return of(false);
            })));
        });
        this.beforeCheckAll = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.enableHierarchicalLoading) {
                return of(true);
            }
            /** @type {?} */
            var param = {
                absOrgType: _this.absOrgType,
                notGetStopOrg: _this.notGetStopOrg,
                getCurUser: false,
                parentID: e.instance.data[0].id,
                withAllSub: true,
                getOrgAllPath: true
            };
            return _this.apiService.getOrganization(param).pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data['data'].length > _this.selectedLimit) {
                    _this.msgService.show('warning', "\u4EB2\uFF0C\u4E00\u6B21\u6027\u9009\u62E9\u4E86\u8D85\u8FC7" + _this.selectedLimit + "\u6761\u6570\u636E~", true);
                    return of(false);
                }
                _this.setSelections(data['data'], ChangeType.ValueChanged, 'other');
                return of(true);
            })));
        });
        this.cdr = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.favoritesSub.unsubscribe();
        this.selectionsSub.unsubscribe();
    };
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeTableCols = [
            { field: 'name', title: '组织名称', template: this.orgNameCell },
            { field: 'code', title: '组织编号' }
        ];
        if (this.enableFavorites) {
            this.treeTableCols.push({
                field: '',
                title: '收藏',
                template: this.favoritesCell
            });
            this.treeTableCols[0].width = 300;
            this.treeTableCols[1].width = 300;
        }
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.favoritesList = data;
            _this.setFavorites(_this.treeListData);
            _this.farrisTree.detectChanges();
        }));
        this.selectionsSub = this.stateMgr.selectionsSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.changeType === ChangeType.ValueChanged) {
                _this.selections = _.cloneDeep(data.value);
                if (_this.selections.length === 0) {
                    _this.farrisTree.clearCheckeds();
                    _this.farrisTree.clearSelections();
                    _this.farrisTree.detectChanges();
                }
                if (data.from === 'other') {
                    _this.tickSelections();
                }
            }
            else if (data.changeType === ChangeType.Remove) {
                _this.selections = _this.selections.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item[_this.primaryField] !== data.value[_this.primaryField]; }));
                if (_this.multiSelect) {
                    _this.inTreeList(_this.treeListData, data.value);
                    if (!!data.value.inTreeList) {
                        _this.farrisTree.unCheckedNode(data.value[_this.primaryField]);
                    }
                }
                else {
                    _this.farrisTree.unSelectNode(data.value[_this.primaryField]);
                }
            }
            else if (data.changeType === ChangeType.Append) {
                CommonUtil.findIndex(data.value[_this.primaryField], _this.primaryField, _this.selections) === -1 ? _this.selections.push(data.value) : null;
                if (_this.multiSelect) {
                    _this.inTreeList(_this.treeListData, data.value);
                    if (!!data.value.inTreeList) {
                        _this.farrisTree.checkedNode(data.value[_this.primaryField]);
                    }
                }
                else {
                    _this.farrisTree.selectNode(data.value[_this.primaryField]);
                }
            }
            if (_this.initLoad) {
                if (_this.enableHierarchicalLoading) {
                    _this.hlAssembleData();
                }
                else {
                    _this.assembleData();
                }
                _this.initLoad = false;
            }
        }));
    };
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    OrganizationComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /*
        const orgIdsChange = changes.orgIds;
        if (orgIdsChange && orgIdsChange.currentValue) {
            this.checkedOrgs = orgIdsChange.currentValue;
        }
        */
    };
    // 设置当前组织树各个节点的收藏状态
    // 设置当前组织树各个节点的收藏状态
    /**
     * @private
     * @param {?} treeListData
     * @return {?}
     */
    OrganizationComponent.prototype.setFavorites = 
    // 设置当前组织树各个节点的收藏状态
    /**
     * @private
     * @param {?} treeListData
     * @return {?}
     */
    function (treeListData) {
        for (var i = 0; i < treeListData.length; i++) {
            if (CommonUtil.findIndex(treeListData[i].id, this.primaryField, this.favoritesList) === -1) {
                treeListData[i].data.inFavorites = false;
            }
            else {
                treeListData[i].data.inFavorites = true;
            }
            if (treeListData[i].children.length) {
                this.setFavorites(treeListData[i].children);
            }
        }
    };
    /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    OrganizationComponent.prototype.setSelections = /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    function (selections, changeType, from) {
        if (changeType === void 0) { changeType = ChangeType.ValueChanged; }
        if (from === void 0) { from = 'tree'; }
        this.stateMgr.emitSelections(selections, changeType, from);
    };
    // 组织树全选事件
    // 组织树全选事件
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.checkAll = 
    // 组织树全选事件
    /**
     * @return {?}
     */
    function () {
        if (!this.enableHierarchicalLoading) {
            /** @type {?} */
            var checkeds_1 = [];
            this.farrisTree.checkeds.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                checkeds_1.push(item.data);
            }));
            this.setSelections(checkeds_1);
        }
    };
    // 组织树取消全选事件
    // 组织树取消全选事件
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.unCheckAll = 
    // 组织树取消全选事件
    /**
     * @return {?}
     */
    function () {
        this.setSelections([]);
    };
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    /**
     * @param {?} e
     * @return {?}
     */
    OrganizationComponent.prototype.changeSelections = 
    // 选中（取消选中、勾选、取消勾选）树节点时触发
    // todo 分层加载的时候咋处理数据，beforeUnCheckAll还未支持。
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.enableHierarchicalLoading && !!e.originalEvent) {
            this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OrganizationComponent.prototype.toggleChecked = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var checkeds = [];
        e && e.instance && e.instance.checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            checkeds.push(item.data);
        }));
        this.setSelections(checkeds);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    OrganizationComponent.prototype.toggleSelected = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var selected = [];
        e && e.instance && e.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            selected.push(item.data);
        }));
        this.setSelections(selected);
    };
    // 根据传入的组织id确定已选择组织
    // 根据传入的组织id确定已选择组织
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    OrganizationComponent.prototype.assembleDataByOrgIds = 
    // 根据传入的组织id确定已选择组织
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        if (!ids || ids.length === 0) {
            return;
        }
        if (ids && ids.length > 0 && !this.multiSelect) {
            console.warn('单选模式下，只允许选中一条数据~');
            return;
        }
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            idList: ids,
            getCurUser: false,
            getOrgAllPath: true,
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.data && res.data.length > 0) {
                _this.checkedOrgs = res.data;
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.selections) === -1) {
                        _this.setSelections(item, ChangeType.Append, 'other');
                    }
                }));
                _this.tickSelections();
                _this.cdr.detectChanges();
            }
        }));
    };
    // 分层加载组织树
    // 分层加载组织树
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.hlAssembleData = 
    // 分层加载组织树
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        /** @type {?} */
        var layerList = [];
        /** @type {?} */
        var layer = this.layer;
        while (layer > 0) {
            layerList.push(layer);
            layer -= 1;
        }
        param.layerList = layerList;
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.data) {
                return;
            }
            if (_this.orgIds.length == 0) {
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    item.selectable = true;
                }));
            }
            if (_this.enableFavorites) {
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }));
            }
            _this.originalTreeData = res.data;
            if (res && res.curAbsUser && res.curAbsUser.orgAllPathInfo) {
                /** @type {?} */
                var curUserOrgPath = res.curAbsUser.orgAllPathInfo;
                curUserOrgPath.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, res.data) === -1) {
                        res.data.push(item);
                    }
                }));
            }
            _this.treeListData = _this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            _this.farrisTree.loadData(_this.treeListData);
            /*
            if(this.checkedOrgs && this.checkedOrgs.length) {
                this.assembleDataByOrgIds(this.checkedOrgs);
                return;
            }
            */
            _this.tickSelections();
            _this.cdr.detectChanges();
        }));
    };
    // 全加载组织树
    // 全加载组织树
    /**
     * @return {?}
     */
    OrganizationComponent.prototype.assembleData = 
    // 全加载组织树
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res || !res.data) {
                return;
            }
            if (_this.enableFavorites) {
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.favoritesList) === -1) {
                        item.inFavorites = false;
                    }
                    else {
                        item.inFavorites = true;
                    }
                }));
            }
            _this.originalTreeData = res.data;
            _this.treeListData = _this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            _this.farrisTree.loadData(_this.treeListData);
            /*
            if(this.checkedOrgs && this.checkedOrgs.length) {
                this.assembleDataByOrgIds(this.checkedOrgs);
                return;
            }
            */
            _this.tickSelections();
            _this.cdr.detectChanges();
        }));
    };
    // 确定已选组织是否在当前组织树内
    // 确定已选组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    OrganizationComponent.prototype.inTreeList = 
    // 确定已选组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    function (treeListData, item) {
        for (var i = 0; i < treeListData.length; i++) {
            if (treeListData[i].id === item[this.primaryField]) {
                item.inTreeList = true;
                break;
            }
            if (treeListData[i].children.length) {
                this.inTreeList(treeListData[i].children, item);
            }
        }
    };
    // 在当前组织树内勾选所有已选择的组织
    // 在当前组织树内勾选所有已选择的组织
    /**
     * @private
     * @return {?}
     */
    OrganizationComponent.prototype.tickSelections = 
    // 在当前组织树内勾选所有已选择的组织
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ids = [];
        this.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.inTreeList(_this.treeListData, item);
            if (!!item.inTreeList) {
                ids.push(item[_this.primaryField]);
            }
        }));
        /*
        if(this.checkedOrgs && this.checkedOrgs.length) {
            this.checkedOrgs.forEach(orgId => {
                if(CommonUtil.findIndex(orgId, this.primaryField, this.selections) === -1) {
                    ids.push(orgId);
                }
            });
        }
        */
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (!ids.length) {
                    return;
                }
                if (_this.multiSelect) {
                    _this.farrisTree.checkedNodes(ids, true, true);
                }
                else {
                    if (ids.length > 1) {
                        _this.msgService.show('warning', "\u4EB2\uFF0C\u5355\u9009\u6A21\u5F0F\u4E0B\uFF0C\u9009\u4E2D\u4E86" + ids.length + "\u6761\u6570\u636E~", true);
                        return;
                    }
                    _this.farrisTree.clearSelections();
                    _this.farrisTree.detectChanges();
                    _this.farrisTree.selectNode(ids.join());
                }
            }));
        }));
    };
    /**
    * 组织数据转换
    * @param plainSource 接口原始数据
    * @param layer 层级
    * @returns 返回树形接口的数据
    */
    /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    OrganizationComponent.prototype.dataToTree = /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    function (plainSource, layer, expandedPath) {
        if (expandedPath === void 0) { expandedPath = ''; }
        /** @type {?} */
        var treeSource = this.dealData(plainSource, expandedPath);
        /** @type {?} */
        var parents = treeSource.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.data.layer === layer;
        }));
        this.treeData(parents, treeSource, 1);
        return parents;
    };
    /**
     * 预处理组织数据
     */
    /**
     * 预处理组织数据
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    OrganizationComponent.prototype.dealData = /**
     * 预处理组织数据
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    function (data, expandedPath) {
        var _this = this;
        if (expandedPath === void 0) { expandedPath = ''; }
        /** @type {?} */
        var pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            var maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (var a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        /** @type {?} */
        var newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var newsDataObj = {
                    data: {
                        orgId: item[_this.primaryField],
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        layer: Number(item.layer),
                        orgAllPath: item.orgAllPath,
                        inFavorites: item.inFavorites
                    },
                    expanded: true,
                    children: []
                };
                // let expanded = [];
                // if (this.enableHierarchicalLoading) {
                //     this.nodeExpanded(newsDataObj, this.treeListData, expanded);
                // }
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1) {
                    newsDataObj.expanded = true;
                }
                else {
                    newsDataObj.expanded = false;
                    if (_this.enableHierarchicalLoading && item.isDetail === '0') {
                        newsDataObj.leaf = false;
                    }
                }
                // todo 分层加载需要
                //if (this.enableHierarchicalLoading && item.isDetail === '0' && Number(item.layer) >= this.layer) {
                //newsDataObj.leaf = false;
                // newsDataObj.expanded = false;
                //}
                newDatas.push(newsDataObj);
            }));
        }
        return newDatas;
    };
    /**
     * 数据转换
     * @param parents 父级节点信息
     * @param treeSource 原始数据信息
     * @param layer 层级
     */
    /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    OrganizationComponent.prototype.treeData = /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    function (parents, treeSource, layer) {
        var _this = this;
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        function (parent) {
            /** @type {?} */
            var parentPath = parent['data']['path'];
            /** @type {?} */
            var parentLayer = parent['data']['layer'];
            treeSource.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item && item['data'] && item['data']['path']) {
                    /** @type {?} */
                    var itemPath = item['data']['path'];
                    /** @type {?} */
                    var itemLayer = item['data']['layer'];
                    /** @type {?} */
                    var targetPath = void 0;
                    if (itemPath && itemPath.length > parentPath.length) {
                        targetPath = itemPath.substr(0, Number(layer) * 4);
                    }
                    if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                        parent['children'].push(item);
                    }
                    if (parentPath === targetPath) {
                        _this.treeData([item], treeSource, Number(layer) + 1);
                    }
                }
            }));
        }));
    };
    // 收藏或取消收藏当前节点对应的组织
    // 收藏或取消收藏当前节点对应的组织
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    OrganizationComponent.prototype.toggleFavorites = 
    // 收藏或取消收藏当前节点对应的组织
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    function (e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    };
    // 监听组织树展开事件
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    OrganizationComponent.prototype.listenTreeExpand = 
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        // todo 分层加载
        if (this.enableHierarchicalLoading && obj.children.length === 0) {
            this.getOrganizationByParentNode(obj);
        }
    };
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    OrganizationComponent.prototype.getOrganizationByParentNode = 
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    function (parentNode) {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            parentID: parentNode.id,
            notGetStopOrg: this.notGetStopOrg,
            getCurUser: false,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.data) {
                /** @type {?} */
                var newDatas_1 = [];
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.originalTreeData) === -1) {
                        item.selectable = true;
                        _this.originalTreeData.push(item);
                    }
                    if (_this.enableFavorites) {
                        item.inFavorites = true;
                        if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.favoritesList) === -1) {
                            item.inFavorites = false;
                        }
                    }
                    newDatas_1.push(item);
                }));
                /** @type {?} */
                var nodes = _this.dealData(newDatas_1);
                _this.farrisTree.appendChildren(nodes, parentNode);
                _this.farrisTree.detectChanges();
                _this.tickSelections();
            }
        }));
    };
    // 返回已经该节点是否展开过
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    OrganizationComponent.prototype.nodeExpanded = 
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    function (item, arr, expanded) {
        for (var i = 0; i < arr.length; i++) {
            if (item.data.id === arr[i].data.id) {
                expanded[0] = arr[i].expanded;
            }
            else if (arr[i].children.length) {
                this.nodeExpanded(item, arr[i].children, expanded);
            }
        }
    };
    // 展开节点
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    OrganizationComponent.prototype.expandTreeNode = 
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    function (treeData, path, layer) {
        var _this = this;
        treeData.forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (path.includes(node.data.path)) {
                _this.farrisTree.expandNode(node.data.id);
            }
            if (node.data.layer < layer && node.children.length) {
                _this.expandTreeNode(node.children, path, layer);
            }
        }));
    };
    OrganizationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-org',
                    template: "<farris-treetable #farristree style=\"cursor:pointer\" [width]=\"'100%'\" [data]=\"treeListData\" [idField]=\"primaryField\"\r\n    [columns]=\"treeTableCols\" [singleSelect]=\"!multiSelect\" [showBorder]=\"false\" [showCheckbox]=\"multiSelect\"\r\n    [showIcon]=\"false\" [showHeader]=\"true\" [fixedHeader]=\"true\" [disabled]=\"false\" [fit]=\"true\" [checkOnSelect]=\"true\"\r\n    [striped]=\"true\" [cascadeCheck]=\"cascadeCheck\" [cascadeDown]=\"cascadeDown\" [cascadeUp]=\"cascadeUp\"\r\n    [keepSelect]=\"keepSelect\" [showCheckAll]=\"showCheckAll\" [onlySelectSelf]=\"true\"\r\n    [beforeClickNode]=\"beforeClickNode\" [beforeCheckAll]=\"beforeCheckAll\"\r\n    (nodeChecked)=\"changeSelections($event)\" (nodeUnChecked)=\"changeSelections($event)\"\r\n    (nodeSelected)=\"changeSelections($event)\" (nodeUnSelect)=\"changeSelections($event)\"\r\n    (checkAll)=\"checkAll()\" (unCheckAll)=\"unCheckAll()\"\r\n    (expand)=\"listenTreeExpand($event)\" class=\"fos-treetable\">\r\n</farris-treetable>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F -->\r\n<ng-template #orgNameCell let-ctx>\r\n    <span style=\"font-size: 13px;\" title=\"{{ctx.node.data.name}}\">{{ctx.node.data.name}}</span>\r\n</ng-template>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F-\u6536\u85CF\u5217 -->\r\n<ng-template #favoritesCell let-ctx>\r\n    <span class=\"f-icon f-icon-star\" [class.default-light-color]=\"ctx.node.data.inFavorites\"\r\n        [class.default-dark-color]=\"!ctx.node.data.inFavorites\" (click)=\"toggleFavorites($event, ctx.node.data)\"></span>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    OrganizationComponent.ctorParameters = function () { return [
        { type: ApiService },
        { type: ChangeDetectorRef },
        { type: FavoritesTool },
        { type: Injector },
        { type: NgZone },
        { type: StateMgrTool },
        { type: MessagerService }
    ]; };
    OrganizationComponent.propDecorators = {
        enableFavorites: [{ type: Input }],
        baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
        farrisTree: [{ type: ViewChild, args: ['farristree',] }],
        orgNameCell: [{ type: ViewChild, args: ['orgNameCell',] }],
        favoritesCell: [{ type: ViewChild, args: ['favoritesCell',] }],
        primaryField: [{ type: Input }],
        enableHierarchicalLoading: [{ type: Input }],
        notGetStopOrg: [{ type: Input }],
        layer: [{ type: Input }],
        multiSelect: [{ type: Input }],
        absOrgType: [{ type: Input }],
        cascadeCheck: [{ type: Input }],
        cascadeUp: [{ type: Input }],
        cascadeDown: [{ type: Input }],
        showCheckAll: [{ type: Input }],
        keepSelect: [{ type: Input }],
        pathLength: [{ type: Input }],
        orgIds: [{ type: Input }],
        selectedLimit: [{ type: Input }],
        selectionsChange: [{ type: Output }]
    };
    return OrganizationComponent;
}());
export { OrganizationComponent };
if (false) {
    /** @type {?} */
    OrganizationComponent.prototype.enableFavorites;
    /** @type {?} */
    OrganizationComponent.prototype.baseCls;
    /** @type {?} */
    OrganizationComponent.prototype.farrisTree;
    /** @type {?} */
    OrganizationComponent.prototype.orgNameCell;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesCell;
    /** @type {?} */
    OrganizationComponent.prototype.primaryField;
    /** @type {?} */
    OrganizationComponent.prototype.enableHierarchicalLoading;
    /** @type {?} */
    OrganizationComponent.prototype.notGetStopOrg;
    /** @type {?} */
    OrganizationComponent.prototype.layer;
    /** @type {?} */
    OrganizationComponent.prototype.multiSelect;
    /** @type {?} */
    OrganizationComponent.prototype.absOrgType;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeCheck;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeUp;
    /** @type {?} */
    OrganizationComponent.prototype.cascadeDown;
    /** @type {?} */
    OrganizationComponent.prototype.showCheckAll;
    /** @type {?} */
    OrganizationComponent.prototype.keepSelect;
    /** @type {?} */
    OrganizationComponent.prototype.pathLength;
    /** @type {?} */
    OrganizationComponent.prototype.orgIds;
    /** @type {?} */
    OrganizationComponent.prototype.selectedLimit;
    /** @type {?} */
    OrganizationComponent.prototype.selectionsChange;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.selectionsSub;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesSub;
    /** @type {?} */
    OrganizationComponent.prototype.originalTreeData;
    /** @type {?} */
    OrganizationComponent.prototype.locationOrgText;
    /** @type {?} */
    OrganizationComponent.prototype.treeListData;
    /** @type {?} */
    OrganizationComponent.prototype.treeTableCols;
    /** @type {?} */
    OrganizationComponent.prototype.selections;
    /** @type {?} */
    OrganizationComponent.prototype.favoritesList;
    /** @type {?} */
    OrganizationComponent.prototype.initLoad;
    /** @type {?} */
    OrganizationComponent.prototype.checkedOrgs;
    /** @type {?} */
    OrganizationComponent.prototype.beforeClickNode;
    /** @type {?} */
    OrganizationComponent.prototype.beforeCheckAll;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.stateMgr;
    /**
     * @type {?}
     * @private
     */
    OrganizationComponent.prototype.msgService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1vcmdhbml6YXRpb24tc2VsZWN0b3IvIiwic291cmNlcyI6WyJsaWIvdGFiLW9yZ2FuaXphdGlvbi90by5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFtRCxpQkFBaUIsRUFBWSxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUM5SyxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxLQUFLLENBQUMsTUFBTSxXQUFXLENBQUM7QUFFL0IsT0FBTyxFQUFZLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBbUIsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUFZLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFELE9BQU8sRUFBRSxTQUFTLEVBQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQ7SUFxSEksK0JBQ1ksVUFBc0IsRUFDdEIsR0FBc0IsRUFDdEIsYUFBNEIsRUFDNUIsUUFBa0IsRUFDbEIsTUFBYyxFQUNkLFFBQXNCLEVBQ3RCLFVBQTJCO1FBUHZDLGlCQVVDO1FBVFcsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUN0QixrQkFBYSxH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Ozs7SUFDMUIsdUNBQXNCOzs7OztJQUN0Qix5Q0FBOEI7Ozs7O0lBQzlCLDJDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIENoYW5nZURldGVjdG9yUmVmLCBPcHRpb25hbCwgSW5qZWN0b3IsIFZpZXdDaGlsZCwgVGVtcGxhdGVSZWYsIEhvc3RCaW5kaW5nLCBOZ1pvbmUsIE9uRGVzdHJveVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IG5vRGF0YUltZyB9IGZyb20gJy4uLy4uL2Fzc2V0cy9yZXNvdXJjZSc7XHJcbmltcG9ydCB7IGZvcmtKb2luLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGYXZvcml0ZXNUb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvZmF2b3JpdGVzLnRvb2wnO1xyXG5pbXBvcnQgeyBDaGFuZ2VUeXBlLCBPcmdSZXF1ZXN0UGFyYW0gfSBmcm9tICcuLi8uLi91dGlscy9pbmRleC50eXBlJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbW1vbi50b29sJztcclxuaW1wb3J0IHsgVHJlZU5vZGUsIFRyZWVUYWJsZUNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktdHJlZXRhYmxlJztcclxuaW1wb3J0IHsgU3RhdGVNZ3JUb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3RhdGUubWdyLnRvb2wnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2xpYi1vcmcnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RvLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL3RvLmNvbXBvbmVudC5jc3MnXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgpIGVuYWJsZUZhdm9yaXRlczogYm9vbGVhbjtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi11dGlscy1maWxsLWZsZXgtY29sdW1uJykgYmFzZUNscyA9IHRydWU7XHJcbiAgICBAVmlld0NoaWxkKCdmYXJyaXN0cmVlJykgZmFycmlzVHJlZTogVHJlZVRhYmxlQ29tcG9uZW50O1xyXG4gICAgQFZpZXdDaGlsZCgnb3JnTmFtZUNlbGwnKSBvcmdOYW1lQ2VsbDogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIEBWaWV3Q2hpbGQoJ2Zhdm9yaXRlc0NlbGwnKSBmYXZvcml0ZXNDZWxsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgQElucHV0KCkgcHJpbWFyeUZpZWxkID0gJ29yZ0lkJztcclxuICAgIEBJbnB1dCgpIGVuYWJsZUhpZXJhcmNoaWNhbExvYWRpbmc6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBub3RHZXRTdG9wT3JnOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgbGF5ZXI6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIG11bHRpU2VsZWN0OiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgYWJzT3JnVHlwZTogYW55O1xyXG4gICAgQElucHV0KCkgY2FzY2FkZUNoZWNrOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgY2FzY2FkZVVwOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgY2FzY2FkZURvd246IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBzaG93Q2hlY2tBbGw6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBrZWVwU2VsZWN0OiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgcGF0aExlbmd0aCA9IDQ7XHJcbiAgICAvLyDlt7LpgInkuK3nu4Tnu4fnmoRpZCwg5qC55o2u57uE57uHaWTojrflj5bnu4Tnu4flrozmlbTkv6Hmga/vvIznhLblkI7ov73liqDliLBzZWxlY3Rpb25zLS0tdG9kb1xyXG4gICAgQElucHV0KCkgb3JnSWRzOiBzdHJpbmdbXTtcclxuICAgIEBJbnB1dCgpIHNlbGVjdGVkTGltaXQ6IG51bWJlcjtcclxuICAgIEBPdXRwdXQoKSBzZWxlY3Rpb25zQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25zU3ViOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIGZhdm9yaXRlc1N1YjogU3Vic2NyaXB0aW9uO1xyXG4gICAgb3JpZ2luYWxUcmVlRGF0YSA9IFtdO1xyXG4gICAgbG9jYXRpb25PcmdUZXh0ID0gJyc7XHJcbiAgICB0cmVlTGlzdERhdGE6IFRyZWVOb2RlW10gPSBbXTtcclxuICAgIHRyZWVUYWJsZUNvbHMgPSBbXTtcclxuICAgIHNlbGVjdGlvbnMgPSBbXTtcclxuICAgIGZhdm9yaXRlc0xpc3QgPSBbXTtcclxuICAgIGluaXRMb2FkID0gdHJ1ZTtcclxuICAgIGNoZWNrZWRPcmdzID0gW107XHJcblxyXG4gICAgYmVmb3JlQ2xpY2tOb2RlID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlSGllcmFyY2hpY2FsTG9hZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICBpZiAoZS5yb3dOb2RlLmlzU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9ucyhbXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMobmV3IEFycmF5KGUucm93Tm9kZS5ub2RlLmRhdGEpLCBDaGFuZ2VUeXBlLlZhbHVlQ2hhbmdlZCwgJ290aGVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtOiBPcmdSZXF1ZXN0UGFyYW0gPSB7XHJcbiAgICAgICAgICAgIGFic09yZ1R5cGU6IHRoaXMuYWJzT3JnVHlwZSxcclxuICAgICAgICAgICAgbm90R2V0U3RvcE9yZzogdGhpcy5ub3RHZXRTdG9wT3JnLFxyXG4gICAgICAgICAgICBnZXRDdXJVc2VyOiBmYWxzZSxcclxuICAgICAgICAgICAgcGFyZW50SUQ6IGUucm93Tm9kZS5pZCxcclxuICAgICAgICAgICAgd2l0aEFsbFN1YjogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0T3JnQWxsUGF0aDogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRPcmdhbml6YXRpb24ocGFyYW0pLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcChcclxuICAgICAgICAgICAgICAgIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVsnZGF0YSddLmxlbmd0aCA+IHRoaXMuc2VsZWN0ZWRMaW1pdCAmJiAhZS5yb3dOb2RlLmlzQ2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1zZ1NlcnZpY2Uuc2hvdygnd2FybmluZycsIGDkurLvvIzkuIDmrKHmgKfpgInmi6nkuobotoXov4cke3RoaXMuc2VsZWN0ZWRMaW1pdH3mnaHmlbDmja5+YCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlLnJvd05vZGUuaXNDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvZG8g5b6F6aqM6K+B77yM5Yqg5YWlc2VsZWN0aW9u77yMXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvbW1vblV0aWwuZmluZEluZGV4KGl0ZW1bdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMoaXRlbSwgQ2hhbmdlVHlwZS5BcHBlbmQsICdvdGhlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucy5mb3JFYWNoKChzZWxlY3Rpb24sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uW3RoaXMucHJpbWFyeUZpZWxkXSA9PT0gaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKGl0ZW0sIENoYW5nZVR5cGUuUmVtb3ZlLCAnb3RoZXInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgYmVmb3JlQ2hlY2tBbGwgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5lbmFibGVIaWVyYXJjaGljYWxMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyYW06IE9yZ1JlcXVlc3RQYXJhbSA9IHtcclxuICAgICAgICAgICAgYWJzT3JnVHlwZTogdGhpcy5hYnNPcmdUeXBlLFxyXG4gICAgICAgICAgICBub3RHZXRTdG9wT3JnOiB0aGlzLm5vdEdldFN0b3BPcmcsXHJcbiAgICAgICAgICAgIGdldEN1clVzZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBwYXJlbnRJRDogZS5pbnN0YW5jZS5kYXRhWzBdLmlkLFxyXG4gICAgICAgICAgICB3aXRoQWxsU3ViOiB0cnVlLFxyXG4gICAgICAgICAgICBnZXRPcmdBbGxQYXRoOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbihwYXJhbSkucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKFxyXG4gICAgICAgICAgICAgICAgKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhWydkYXRhJ10ubGVuZ3RoID4gdGhpcy5zZWxlY3RlZExpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXNnU2VydmljZS5zaG93KCd3YXJuaW5nJywgYOS6su+8jOS4gOasoeaAp+mAieaLqeS6hui2hei/hyR7dGhpcy5zZWxlY3RlZExpbWl0feadoeaVsOaNrn5gLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMoZGF0YVsnZGF0YSddLCBDaGFuZ2VUeXBlLlZhbHVlQ2hhbmdlZCwgJ290aGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIHByaXZhdGUgZmF2b3JpdGVzVG9vbDogRmF2b3JpdGVzVG9vbCxcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxyXG4gICAgICAgIHByaXZhdGUgc3RhdGVNZ3I6IFN0YXRlTWdyVG9vbCxcclxuICAgICAgICBwcml2YXRlIG1zZ1NlcnZpY2U6IE1lc3NhZ2VyU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5jZHIgPSB0aGlzLmluamVjdG9yLmdldChDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnNTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRyZWVUYWJsZUNvbHMgPSBbXHJcbiAgICAgICAgICAgIHsgZmllbGQ6ICduYW1lJywgdGl0bGU6ICfnu4Tnu4flkI3np7AnLCB0ZW1wbGF0ZTogdGhpcy5vcmdOYW1lQ2VsbCB9LFxyXG4gICAgICAgICAgICB7IGZpZWxkOiAnY29kZScsIHRpdGxlOiAn57uE57uH57yW5Y+3JyB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVGYXZvcml0ZXMpIHtcclxuICAgICAgICAgICAgdGhpcy50cmVlVGFibGVDb2xzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZmllbGQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfmlLbol48nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMuZmF2b3JpdGVzQ2VsbFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy50cmVlVGFibGVDb2xzWzBdLndpZHRoID0gMzAwO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWVUYWJsZUNvbHNbMV0ud2lkdGggPSAzMDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzU3ViID0gdGhpcy5mYXZvcml0ZXNUb29sLmZhdm9yaXRlc1N1YmplY3Quc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZhdm9yaXRlc0xpc3QgPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLnNldEZhdm9yaXRlcyh0aGlzLnRyZWVMaXN0RGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zU3ViID0gdGhpcy5zdGF0ZU1nci5zZWxlY3Rpb25zU3ViamVjdC5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmNoYW5nZVR5cGUgPT09IENoYW5nZVR5cGUuVmFsdWVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBfLmNsb25lRGVlcChkYXRhLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYXJyaXNUcmVlLmNsZWFyQ2hlY2tlZHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhcnJpc1RyZWUuY2xlYXJTZWxlY3Rpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYXJyaXNUcmVlLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmZyb20gPT09ICdvdGhlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpY2tTZWxlY3Rpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jaGFuZ2VUeXBlID09PSBDaGFuZ2VUeXBlLlJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gdGhpcy5zZWxlY3Rpb25zLmZpbHRlcihpdGVtID0+IGl0ZW1bdGhpcy5wcmltYXJ5RmllbGRdICE9PSBkYXRhLnZhbHVlW3RoaXMucHJpbWFyeUZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5UcmVlTGlzdCh0aGlzLnRyZWVMaXN0RGF0YSwgZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhZGF0YS52YWx1ZS5pblRyZWVMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS51bkNoZWNrZWROb2RlKGRhdGEudmFsdWVbdGhpcy5wcmltYXJ5RmllbGRdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS51blNlbGVjdE5vZGUoZGF0YS52YWx1ZVt0aGlzLnByaW1hcnlGaWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2hhbmdlVHlwZSA9PT0gQ2hhbmdlVHlwZS5BcHBlbmQpIHtcclxuICAgICAgICAgICAgICAgIENvbW1vblV0aWwuZmluZEluZGV4KGRhdGEudmFsdWVbdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKSA9PT0gLTEgPyB0aGlzLnNlbGVjdGlvbnMucHVzaChkYXRhLnZhbHVlKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5UcmVlTGlzdCh0aGlzLnRyZWVMaXN0RGF0YSwgZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEhZGF0YS52YWx1ZS5pblRyZWVMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS5jaGVja2VkTm9kZShkYXRhLnZhbHVlW3RoaXMucHJpbWFyeUZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhcnJpc1RyZWUuc2VsZWN0Tm9kZShkYXRhLnZhbHVlW3RoaXMucHJpbWFyeUZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdExvYWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuZW5hYmxlSGllcmFyY2hpY2FsTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGxBc3NlbWJsZURhdGEoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NlbWJsZURhdGEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdExvYWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgY29uc3Qgb3JnSWRzQ2hhbmdlID0gY2hhbmdlcy5vcmdJZHM7XHJcbiAgICAgICAgaWYgKG9yZ0lkc0NoYW5nZSAmJiBvcmdJZHNDaGFuZ2UuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZE9yZ3MgPSBvcmdJZHNDaGFuZ2UuY3VycmVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOiuvue9ruW9k+WJjee7hOe7h+agkeWQhOS4quiKgueCueeahOaUtuiXj+eKtuaAgVxyXG4gICAgcHJpdmF0ZSBzZXRGYXZvcml0ZXModHJlZUxpc3REYXRhOiBUcmVlTm9kZVtdKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVlTGlzdERhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKENvbW1vblV0aWwuZmluZEluZGV4KHRyZWVMaXN0RGF0YVtpXS5pZCwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMuZmF2b3JpdGVzTGlzdCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0cmVlTGlzdERhdGFbaV0uZGF0YS5pbkZhdm9yaXRlcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJlZUxpc3REYXRhW2ldLmRhdGEuaW5GYXZvcml0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0cmVlTGlzdERhdGFbaV0uY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZhdm9yaXRlcyh0cmVlTGlzdERhdGFbaV0uY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0U2VsZWN0aW9ucyhzZWxlY3Rpb25zOiBhbnksIGNoYW5nZVR5cGUgPSBDaGFuZ2VUeXBlLlZhbHVlQ2hhbmdlZCwgZnJvbTogc3RyaW5nID0gJ3RyZWUnKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZU1nci5lbWl0U2VsZWN0aW9ucyhzZWxlY3Rpb25zLCBjaGFuZ2VUeXBlLCBmcm9tKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnu4Tnu4fmoJHlhajpgInkuovku7ZcclxuICAgIGNoZWNrQWxsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5lbmFibGVIaWVyYXJjaGljYWxMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS5jaGVja2Vkcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZHMucHVzaChpdGVtLmRhdGEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMoY2hlY2tlZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDnu4Tnu4fmoJHlj5bmtojlhajpgInkuovku7ZcclxuICAgIHVuQ2hlY2tBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKFtdKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpgInkuK3vvIjlj5bmtojpgInkuK3jgIHli77pgInjgIHlj5bmtojli77pgInvvInmoJHoioLngrnml7bop6blj5FcclxuICAgIC8vIHRvZG8g5YiG5bGC5Yqg6L2955qE5pe25YCZ5ZKL5aSE55CG5pWw5o2u77yMYmVmb3JlVW5DaGVja0FsbOi/mOacquaUr+aMgeOAglxyXG4gICAgY2hhbmdlU2VsZWN0aW9ucyhlOiBhbnkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlSGllcmFyY2hpY2FsTG9hZGluZyAmJiAhIWUub3JpZ2luYWxFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLm11bHRpU2VsZWN0ID8gdGhpcy50b2dnbGVDaGVja2VkKGUpIDogdGhpcy50b2dnbGVTZWxlY3RlZChlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQ2hlY2tlZChlOiBhbnkpIHtcclxuICAgICAgICBsZXQgY2hlY2tlZHMgPSBbXTtcclxuICAgICAgICBlICYmIGUuaW5zdGFuY2UgJiYgZS5pbnN0YW5jZS5jaGVja2Vkcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBjaGVja2Vkcy5wdXNoKGl0ZW0uZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKGNoZWNrZWRzKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVTZWxlY3RlZChlOiBhbnkpIHtcclxuICAgICAgICBsZXQgc2VsZWN0ZWQgPSBbXTtcclxuICAgICAgICBlICYmIGUuaW5zdGFuY2UgJiYgZS5pbnN0YW5jZS5zZWxlY3Rpb25zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goaXRlbS5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMoc2VsZWN0ZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOagueaNruS8oOWFpeeahOe7hOe7h2lk56Gu5a6a5bey6YCJ5oup57uE57uHXHJcbiAgICBwcml2YXRlIGFzc2VtYmxlRGF0YUJ5T3JnSWRzKGlkczogc3RyaW5nW10pe1xyXG4gICAgICAgIGlmKCFpZHMgfHwgaWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGlkcyAmJiBpZHMubGVuZ3RoID4gMCAmJiAhdGhpcy5tdWx0aVNlbGVjdCl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign5Y2V6YCJ5qih5byP5LiL77yM5Y+q5YWB6K646YCJ5Lit5LiA5p2h5pWw5o2uficpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmFtOiBPcmdSZXF1ZXN0UGFyYW0gPSB7XHJcbiAgICAgICAgICAgIGFic09yZ1R5cGU6IHRoaXMuYWJzT3JnVHlwZSxcclxuICAgICAgICAgICAgaWRMaXN0OiBpZHMsXHJcbiAgICAgICAgICAgIGdldEN1clVzZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXRPcmdBbGxQYXRoOiB0cnVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLmdldE9yZ2FuaXphdGlvbihwYXJhbSkuc3Vic2NyaWJlKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzICYmIHJlcy5kYXRhICYmIHJlcy5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZE9yZ3MgPSByZXMuZGF0YTtcclxuICAgICAgICAgICAgICAgIHJlcy5kYXRhLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKENvbW1vblV0aWwuZmluZEluZGV4KGl0ZW1bdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKGl0ZW0sIENoYW5nZVR5cGUuQXBwZW5kLCAnb3RoZXInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlja1NlbGVjdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWIhuWxguWKoOi9vee7hOe7h+agkVxyXG4gICAgaGxBc3NlbWJsZURhdGEoKSB7XHJcbiAgICAgICAgY29uc3QgcGFyYW06IE9yZ1JlcXVlc3RQYXJhbSA9IHtcclxuICAgICAgICAgICAgYWJzT3JnVHlwZTogdGhpcy5hYnNPcmdUeXBlLFxyXG4gICAgICAgICAgICBub3RHZXRTdG9wT3JnOiB0aGlzLm5vdEdldFN0b3BPcmcsXHJcbiAgICAgICAgICAgIGdldE9yZ0FsbFBhdGg6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGxheWVyTGlzdCA9IFtdO1xyXG4gICAgICAgIGxldCBsYXllciA9IHRoaXMubGF5ZXI7XHJcbiAgICAgICAgd2hpbGUgKGxheWVyID4gMCkge1xyXG4gICAgICAgICAgICBsYXllckxpc3QucHVzaChsYXllcik7XHJcbiAgICAgICAgICAgIGxheWVyIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmFtLmxheWVyTGlzdCA9IGxheWVyTGlzdDtcclxuICAgICAgICB0aGlzLmFwaVNlcnZpY2UuZ2V0T3JnYW5pemF0aW9uKHBhcmFtKS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzIHx8ICFyZXMuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHRoaXMub3JnSWRzLmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgICAgIHJlcy5kYXRhLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZWxlY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUZhdm9yaXRlcykge1xyXG4gICAgICAgICAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29tbW9uVXRpbC5maW5kSW5kZXgoaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0sIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLmZhdm9yaXRlc0xpc3QpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmluRmF2b3JpdGVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pbkZhdm9yaXRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFRyZWVEYXRhID0gcmVzLmRhdGE7XHJcbiAgICAgICAgICAgIGlmIChyZXMgJiYgcmVzLmN1ckFic1VzZXIgJiYgcmVzLmN1ckFic1VzZXIub3JnQWxsUGF0aEluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1clVzZXJPcmdQYXRoID0gcmVzLmN1ckFic1VzZXIub3JnQWxsUGF0aEluZm87XHJcbiAgICAgICAgICAgICAgICBjdXJVc2VyT3JnUGF0aC5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDb21tb25VdGlsLmZpbmRJbmRleChpdGVtW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHJlcy5kYXRhKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmRhdGEucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRyZWVMaXN0RGF0YSA9IHRoaXMuZGF0YVRvVHJlZShyZXMuZGF0YSwgMSwgcmVzLmN1ckFic1VzZXIuZGVmYXVsdE9yZ1BhdGgpO1xyXG4gICAgICAgICAgICB0aGlzLmZhcnJpc1RyZWUubG9hZERhdGEodGhpcy50cmVlTGlzdERhdGEpO1xyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICBpZih0aGlzLmNoZWNrZWRPcmdzICYmIHRoaXMuY2hlY2tlZE9yZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VtYmxlRGF0YUJ5T3JnSWRzKHRoaXMuY2hlY2tlZE9yZ3MpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMudGlja1NlbGVjdGlvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWFqOWKoOi9vee7hOe7h+agkVxyXG4gICAgYXNzZW1ibGVEYXRhKCkge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtOiBPcmdSZXF1ZXN0UGFyYW0gPSB7XHJcbiAgICAgICAgICAgIGFic09yZ1R5cGU6IHRoaXMuYWJzT3JnVHlwZSxcclxuICAgICAgICAgICAgbm90R2V0U3RvcE9yZzogdGhpcy5ub3RHZXRTdG9wT3JnLFxyXG4gICAgICAgICAgICBnZXRPcmdBbGxQYXRoOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmFwaVNlcnZpY2UuZ2V0T3JnYW5pemF0aW9uKHBhcmFtKS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghcmVzIHx8ICFyZXMuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUZhdm9yaXRlcykge1xyXG4gICAgICAgICAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29tbW9uVXRpbC5maW5kSW5kZXgoaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0sIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLmZhdm9yaXRlc0xpc3QpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmluRmF2b3JpdGVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pbkZhdm9yaXRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFRyZWVEYXRhID0gcmVzLmRhdGE7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZUxpc3REYXRhID0gdGhpcy5kYXRhVG9UcmVlKHJlcy5kYXRhLCAxLCByZXMuY3VyQWJzVXNlci5kZWZhdWx0T3JnUGF0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS5sb2FkRGF0YSh0aGlzLnRyZWVMaXN0RGF0YSk7XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgIGlmKHRoaXMuY2hlY2tlZE9yZ3MgJiYgdGhpcy5jaGVja2VkT3Jncy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzZW1ibGVEYXRhQnlPcmdJZHModGhpcy5jaGVja2VkT3Jncyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy50aWNrU2VsZWN0aW9ucygpO1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g56Gu5a6a5bey6YCJ57uE57uH5piv5ZCm5Zyo5b2T5YmN57uE57uH5qCR5YaFXHJcbiAgICBwcml2YXRlIGluVHJlZUxpc3QodHJlZUxpc3REYXRhOiBUcmVlTm9kZVtdLCBpdGVtOiBhbnkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyZWVMaXN0RGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodHJlZUxpc3REYXRhW2ldLmlkID09PSBpdGVtW3RoaXMucHJpbWFyeUZpZWxkXSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5pblRyZWVMaXN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0cmVlTGlzdERhdGFbaV0uY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVHJlZUxpc3QodHJlZUxpc3REYXRhW2ldLmNoaWxkcmVuLCBpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDlnKjlvZPliY3nu4Tnu4fmoJHlhoXli77pgInmiYDmnInlt7LpgInmi6nnmoTnu4Tnu4dcclxuICAgIHByaXZhdGUgdGlja1NlbGVjdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgaWRzID0gW107XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5UcmVlTGlzdCh0aGlzLnRyZWVMaXN0RGF0YSwgaXRlbSk7XHJcbiAgICAgICAgICAgIGlmICghIWl0ZW0uaW5UcmVlTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWRzLnB1c2goaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgaWYodGhpcy5jaGVja2VkT3JncyAmJiB0aGlzLmNoZWNrZWRPcmdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRPcmdzLmZvckVhY2gob3JnSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoQ29tbW9uVXRpbC5maW5kSW5kZXgob3JnSWQsIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLnNlbGVjdGlvbnMpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKG9yZ0lkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYXJyaXNUcmVlLmNoZWNrZWROb2RlcyhpZHMsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLnNob3coJ3dhcm5pbmcnLCBg5Lqy77yM5Y2V6YCJ5qih5byP5LiL77yM6YCJ5Lit5LqGJHtpZHMubGVuZ3RofeadoeaVsOaNrn5gLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhcnJpc1RyZWUuY2xlYXJTZWxlY3Rpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYXJyaXNUcmVlLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhcnJpc1RyZWUuc2VsZWN0Tm9kZShpZHMuam9pbigpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiDnu4Tnu4fmlbDmja7ovazmjaJcclxuICAgICogQHBhcmFtIHBsYWluU291cmNlIOaOpeWPo+WOn+Wni+aVsOaNrlxyXG4gICAgKiBAcGFyYW0gbGF5ZXIg5bGC57qnXHJcbiAgICAqIEByZXR1cm5zIOi/lOWbnuagkeW9ouaOpeWPo+eahOaVsOaNrlxyXG4gICAgKi9cclxuICAgIHByaXZhdGUgZGF0YVRvVHJlZShwbGFpblNvdXJjZTogYW55LCBsYXllcjogbnVtYmVyLCBleHBhbmRlZFBhdGg6IHN0cmluZyA9ICcnKSB7XHJcbiAgICAgICAgY29uc3QgdHJlZVNvdXJjZSA9IHRoaXMuZGVhbERhdGEocGxhaW5Tb3VyY2UsIGV4cGFuZGVkUGF0aCk7XHJcbiAgICAgICAgY29uc3QgcGFyZW50cyA9IHRyZWVTb3VyY2UuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS5kYXRhLmxheWVyID09PSBsYXllcjtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRyZWVEYXRhKHBhcmVudHMsIHRyZWVTb3VyY2UsIDEpO1xyXG4gICAgICAgIHJldHVybiBwYXJlbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6aKE5aSE55CG57uE57uH5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGVhbERhdGEoZGF0YTogYW55W10sIGV4cGFuZGVkUGF0aDogc3RyaW5nID0gJycpIHtcclxuICAgICAgICBjb25zdCBwYXRoTGlzdCA9IFtdO1xyXG4gICAgICAgIGlmKGV4cGFuZGVkUGF0aCAhPSAnJykge1xyXG4gICAgICAgICAgICBsZXQgbWF4TGVuZ3RoID0gZXhwYW5kZWRQYXRoLmxlbmd0aCAvIHRoaXMucGF0aExlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlSGllcmFyY2hpY2FsTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoIC09IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCBtYXhMZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICAgICAgcGF0aExpc3QucHVzaCh7IHBhdGg6IGV4cGFuZGVkUGF0aC5zdWJzdHJpbmcoMCwgNCAqIChhICsgMSkpIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5ld0RhdGFzID0gW107XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld3NEYXRhT2JqOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmdJZDogaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogaXRlbS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBpdGVtLmNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBOdW1iZXIoaXRlbS5sYXllciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZ0FsbFBhdGg6IGl0ZW0ub3JnQWxsUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5GYXZvcml0ZXM6IGl0ZW0uaW5GYXZvcml0ZXNcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIGxldCBleHBhbmRlZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgKHRoaXMuZW5hYmxlSGllcmFyY2hpY2FsTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRoaXMubm9kZUV4cGFuZGVkKG5ld3NEYXRhT2JqLCB0aGlzLnRyZWVMaXN0RGF0YSwgZXhwYW5kZWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgaWYgKENvbW1vblV0aWwuZmluZEluZGV4KGl0ZW0ucGF0aCwgJ3BhdGgnLCBwYXRoTGlzdCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3c0RhdGFPYmouZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdzRGF0YU9iai5leHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUhpZXJhcmNoaWNhbExvYWRpbmcgJiYgaXRlbS5pc0RldGFpbCA9PT0gJzAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld3NEYXRhT2JqLmxlYWYgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0b2RvIOWIhuWxguWKoOi9vemcgOimgVxyXG4gICAgICAgICAgICAgICAgLy9pZiAodGhpcy5lbmFibGVIaWVyYXJjaGljYWxMb2FkaW5nICYmIGl0ZW0uaXNEZXRhaWwgPT09ICcwJyAmJiBOdW1iZXIoaXRlbS5sYXllcikgPj0gdGhpcy5sYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbmV3c0RhdGFPYmoubGVhZiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgLy8gbmV3c0RhdGFPYmouZXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgbmV3RGF0YXMucHVzaChuZXdzRGF0YU9iaik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3RGF0YXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmlbDmja7ovazmjaJcclxuICAgICAqIEBwYXJhbSBwYXJlbnRzIOeItue6p+iKgueCueS/oeaBr1xyXG4gICAgICogQHBhcmFtIHRyZWVTb3VyY2Ug5Y6f5aeL5pWw5o2u5L+h5oGvXHJcbiAgICAgKiBAcGFyYW0gbGF5ZXIg5bGC57qnXHJcbiAgICAgKi9cclxuICAgIHRyZWVEYXRhKHBhcmVudHM6IGFueSwgdHJlZVNvdXJjZTogYW55LCBsYXllcjogbnVtYmVyKSB7XHJcbiAgICAgICAgcGFyZW50cy5mb3JFYWNoKHBhcmVudCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBwYXJlbnRbJ2RhdGEnXVsncGF0aCddO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRMYXllciA9IHBhcmVudFsnZGF0YSddWydsYXllciddO1xyXG4gICAgICAgICAgICB0cmVlU291cmNlLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtWydkYXRhJ10gJiYgaXRlbVsnZGF0YSddWydwYXRoJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGF0aCA9IGl0ZW1bJ2RhdGEnXVsncGF0aCddO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1MYXllciA9IGl0ZW1bJ2RhdGEnXVsnbGF5ZXInXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0UGF0aDogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGF0aCAmJiBpdGVtUGF0aC5sZW5ndGggPiBwYXJlbnRQYXRoLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRQYXRoID0gaXRlbVBhdGguc3Vic3RyKDAsIE51bWJlcihsYXllcikgKiA0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFBhdGggPT09IHRhcmdldFBhdGggJiYgcGFyZW50TGF5ZXIgPT09IGl0ZW1MYXllciAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50WydjaGlsZHJlbiddLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRQYXRoID09PSB0YXJnZXRQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJlZURhdGEoW2l0ZW1dLCB0cmVlU291cmNlLCBOdW1iZXIobGF5ZXIpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOaUtuiXj+aIluWPlua2iOaUtuiXj+W9k+WJjeiKgueCueWvueW6lOeahOe7hOe7h1xyXG4gICAgdG9nZ2xlRmF2b3JpdGVzKGU6IGFueSwgaXRlbTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNUb29sLnRvZ2dsZUZhdm9yaXRlcyhlLCBpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnm5HlkKznu4Tnu4fmoJHlsZXlvIDkuovku7ZcclxuICAgIGxpc3RlblRyZWVFeHBhbmQob2JqOiBhbnkpIHtcclxuICAgICAgICAvLyB0b2RvIOWIhuWxguWKoOi9vVxyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZUhpZXJhcmNoaWNhbExvYWRpbmcgJiYgb2JqLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmdldE9yZ2FuaXphdGlvbkJ5UGFyZW50Tm9kZShvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDliIblsYLliqDovb3ml7bvvIzojrflj5bkuIvnuqfnu4Tnu4fmlbDmja7lubbkuLrlvZPliY3nu4Tnu4fmoJHmt7vliqDlrZDoioLngrlcclxuICAgIGdldE9yZ2FuaXphdGlvbkJ5UGFyZW50Tm9kZShwYXJlbnROb2RlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwYXJhbTogT3JnUmVxdWVzdFBhcmFtID0ge1xyXG4gICAgICAgICAgICBhYnNPcmdUeXBlOiB0aGlzLmFic09yZ1R5cGUsXHJcbiAgICAgICAgICAgIHBhcmVudElEOiBwYXJlbnROb2RlLmlkLFxyXG4gICAgICAgICAgICBub3RHZXRTdG9wT3JnOiB0aGlzLm5vdEdldFN0b3BPcmcsXHJcbiAgICAgICAgICAgIGdldEN1clVzZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXRPcmdBbGxQYXRoOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmFwaVNlcnZpY2UuZ2V0T3JnYW5pemF0aW9uKHBhcmFtKS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXMgJiYgcmVzLmRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RhdGFzID0gW107XHJcbiAgICAgICAgICAgICAgICByZXMuZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDb21tb25VdGlsLmZpbmRJbmRleChpdGVtW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMub3JpZ2luYWxUcmVlRGF0YSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc2VsZWN0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxUcmVlRGF0YS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVGYXZvcml0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pbkZhdm9yaXRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb21tb25VdGlsLmZpbmRJbmRleChpdGVtW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMuZmF2b3JpdGVzTGlzdCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmluRmF2b3JpdGVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0YXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmRlYWxEYXRhKG5ld0RhdGFzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS5hcHBlbmRDaGlsZHJlbihub2RlcywgcGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZhcnJpc1RyZWUuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWNrU2VsZWN0aW9ucygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6L+U5Zue5bey57uP6K+l6IqC54K55piv5ZCm5bGV5byA6L+HXHJcbiAgICBwcml2YXRlIG5vZGVFeHBhbmRlZChpdGVtOiBhbnksIGFycjogVHJlZU5vZGVbXSwgZXhwYW5kZWQ6IGJvb2xlYW5bXSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmRhdGEuaWQgPT09IGFycltpXS5kYXRhLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBleHBhbmRlZFswXSA9IGFycltpXS5leHBhbmRlZDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChhcnJbaV0uY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVFeHBhbmRlZChpdGVtLCBhcnJbaV0uY2hpbGRyZW4sIGV4cGFuZGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDlsZXlvIDoioLngrlcclxuICAgIHByaXZhdGUgZXhwYW5kVHJlZU5vZGUodHJlZURhdGE6IGFueSwgcGF0aDogYW55W10sIGxheWVyOiBudW1iZXIpIHtcclxuICAgICAgICB0cmVlRGF0YS5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGF0aC5pbmNsdWRlcyhub2RlLmRhdGEucGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFycmlzVHJlZS5leHBhbmROb2RlKG5vZGUuZGF0YS5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG5vZGUuZGF0YS5sYXllciA8IGxheWVyICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZFRyZWVOb2RlKG5vZGUuY2hpbGRyZW4sIHBhdGgsIGxheWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=