/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Renderer2, ChangeDetectorRef, HostBinding, Output, EventEmitter, NgZone } from "@angular/core";
import { ResponseToolbarDropDown, ResponseToolbarItem, ResponseToolbarGroup } from "../model/response-toolbar.model";
import { FResizedDirective } from "../resized/f-resized.directive";
import { Subject, Observable } from "rxjs";
import { debounceTime } from "rxjs/operators";
import { LocaleService } from "@farris/ui-locale";
import ResizeObserver from "resize-observer-polyfill";
var ResponseToolbarComponent = /** @class */ (function () {
    function ResponseToolbarComponent(el, render, cd, localeService) {
        this.render = render;
        this.cd = cd;
        this.localeService = localeService;
        this.frtCls = true;
        this.prCls = true;
        // 传递点击事件
        this.rtClickEvent = new EventEmitter();
        // 辅助计算宽度数据
        this.auxiliaryDatas = [];
        // 控制父元素滚动的样式
        //  private _dpState = false;
        //
        this.ro = null;
        // 记录容器宽度
        this.containerWidthRecord = 0;
        // 记录变化
        this.needResponseChanges = 0;
        this.referEl = null;
        this.dpState = [false];
        // 用来内部记录
        this._auxiliary = -1;
        this.resizeGroups = [];
        // 记录格式化后的数据
        this.toolbarDatas = [];
        this.distanceThreshold = 20;
        this.isUpdateTBView = false;
        this._stateDatas = new Subject();
        this._btnVisibleDatas = new Subject();
        this.clickThrottleTime = 350;
        this.clickItems = new Subject();
        this.rtSize = "";
        /*强制方向，默认为空值，可以有top、bottom，朝上、朝下。
             * 使用场景：工具栏内部的下拉，需要朝上或者需要朝下展开，统一控制
             */
        this.popDirection = "";
        // right按钮靠右 left按钮靠左
        this.btnAlign = "right";
        this.ngZone = null;
        this._selfEl = el.nativeElement;
        if (el.nativeElement.parentElement) {
            this.referEl = el.nativeElement.parentElement;
        }
    }
    Object.defineProperty(ResponseToolbarComponent.prototype, "groups", {
        // 内部记录格式化后的初始数据-------------------------暂时不用
        // _toolbarDatas: Array<ResponseToolbarItem | ResponseToolbarDropDown> = [];
        set: 
        // 内部记录格式化后的初始数据-------------------------暂时不用
        // _toolbarDatas: Array<ResponseToolbarItem | ResponseToolbarDropDown> = [];
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            var _this = this;
            if (values) {
                this.resizeGroups = [];
                values.forEach((/**
                 * @param {?} group
                 * @return {?}
                 */
                function (group) {
                    _this.resizeGroups.push(new ResponseToolbarGroup(group.id, group.name));
                    // 还没有计算预置排序
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "datas", {
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            if (values) {
                this.toolbarDatas = this._formatData(values);
                this.needResponseChanges++;
                // 处理分组数据
                this._reOrganizeResizeGroups();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "btnState", {
        // 按钮的禁用状态
        set: 
        // 按钮的禁用状态
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this._stateDatas = values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "btnVisible", {
        // 按钮的查看状态
        set: 
        // 按钮的查看状态
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this._btnVisibleDatas = values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "buttonSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this.rtSize;
        },
        /*尺寸：有sm,lg,空值，默认是空值 */
        set: /*尺寸：有sm,lg,空值，默认是空值 */
        /**
         * @param {?} btnSize
         * @return {?}
         */
        function (btnSize) {
            if (btnSize != this.rtSize) {
                this.rtSize &&
                    this.render.removeClass(this._selfEl, "f-response-toolbar-" + this.rtSize);
                this.rtSize = btnSize;
                this.rtSize &&
                    this.render.addClass(this._selfEl, "f-response-toolbar-" + this.rtSize);
            }
        },
        enumerable: true,
        configurable: true
    });
    // 因为旧模板带有这个方法
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngAfterViewInit = 
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    function () { };
    // 因为旧模板带有这个方法
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngDoCheck = 
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 去掉overflow之后
        this.render.addClass(this.auxiliaryContainerEl.nativeElement, "response-toolbar-hidden-element");
        // 按钮的禁用状态
        this._stateDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.changeState(data);
        }));
        // 按钮的可见状态
        this._btnVisibleDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.changeVisible(data);
        }));
        this.observerElement();
        // 拦截点击事件只传递第一次点击事件的处理操作交给parent来处理
        this.clickSubscription = this.clickItems
            .pipe(debounceTime(this.clickThrottleTime))
            .subscribe((/**
         * @param {?} eventDatas
         * @return {?}
         */
        function (eventDatas) {
            _this.rtClickEvent.emit(eventDatas);
        }));
    };
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.resizedContainerEl.nativeElement);
            this.ro = null;
        }
        if (this.clickSubscription) {
            this.clickSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        if (this.needResponseChanges > 0) {
            this.needResponseChanges--;
            this.responseResize();
        }
        else if (this.auxiliaryDatas.length > 0) {
            this._calculate(true, this.auxiliaryContainerEl.nativeElement.offsetWidth);
        }
    };
    // 因为旧模板带有这个方法
    // 因为旧模板带有这个方法
    /**
     * @param {?} event
     * @return {?}
     */
    ResponseToolbarComponent.prototype.onResize = 
    // 因为旧模板带有这个方法
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     */
    /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype.observerElement = /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.ngZone) {
            /** @type {?} */
            var moduleInjector = this.cd["_view"].root.ngModule.injector;
            this.ngZone = moduleInjector.get(NgZone, null);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                /** @type {?} */
                var tempWidth = entries[0].contentRect.width;
                if (Math.abs(tempWidth - _this.containerWidthRecord) >
                    _this.distanceThreshold) {
                    _this.responseResize();
                    _this.containerWidthRecord = tempWidth;
                }
            }));
            _this.ro.observe(_this.resizedContainerEl.nativeElement);
        }));
    };
    /**
     * 强制转换方向
     * @param selfDefinePL
     * @param defaultPL
     */
    /**
     * 强制转换方向
     * @param {?} selfDefinePL
     * @param {?} defaultPL
     * @return {?}
     */
    ResponseToolbarComponent.prototype.getPlacement = /**
     * 强制转换方向
     * @param {?} selfDefinePL
     * @param {?} defaultPL
     * @return {?}
     */
    function (selfDefinePL, defaultPL) {
        /** @type {?} */
        var oldDirection = selfDefinePL ? selfDefinePL : defaultPL;
        if (!this.popDirection) {
            return oldDirection;
        }
        /** @type {?} */
        var plRelation = { bottom: "top", top: "bottom" };
        oldDirection = oldDirection == "left" ? "left-bottom" : oldDirection;
        oldDirection = oldDirection == "right" ? "right-bottom" : oldDirection;
        /** @type {?} */
        var newDirection = oldDirection.replace(plRelation[this.popDirection], this.popDirection);
        return newDirection;
    };
    /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     */
    /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     * @return {?}
     */
    ResponseToolbarComponent.prototype.responseResize = /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _distance = this._getDistance();
        if (_distance > 0) {
            // 如果分组都已经处理完,再出现滚动条不管
            /** @type {?} */
            var _tempIndex = this._getFirstUnResponsedIndex();
            if (_tempIndex < 0) {
                return;
            }
            // 所有第一层下拉都収折
            this.dpState = [false];
            for (var k = _tempIndex; k < this.resizeGroups.length; k++) {
                /** @type {?} */
                var _tempGroup = this.resizeGroups[k];
                this._auxiliary = k;
                if (_tempGroup.isResponsing()) {
                    this._calculate();
                }
                else {
                    // 如果还未开始处理响应式
                    /** @type {?} */
                    var _tempDP = new ResponseToolbarDropDown({
                        text: _tempGroup.name,
                        id: _tempGroup.id,
                        placement: this.popDirection
                            ? this.popDirection + "-left"
                            : "bottom-left",
                        width: _tempGroup.getWidth()
                    });
                    // 已经处理过宽度
                    if (_tempDP.getWidth()) {
                        this.auxiliaryDatas = [_tempDP];
                        this._calculate(true, _tempDP.getWidth());
                    }
                    else {
                        // 更新辅助数据
                        this.auxiliaryDatas.push(_tempDP);
                        this.cd.detectChanges();
                    }
                }
            }
        }
        else {
            // 寻找最后一个处理响应式的元素
            /** @type {?} */
            var _tempIndex = this._getLastResponseIndex();
            if (_tempIndex < 0) {
                return;
            }
            // 临时存储数据
            /** @type {?} */
            var _tempToolbarDatas = [].concat(this.toolbarDatas);
            // 如果已经开始处理响应式
            for (var k = _tempIndex; k >= 0; k--) {
                /** @type {?} */
                var result = this._restitute(_tempToolbarDatas, k);
                _tempToolbarDatas = [].concat(result["data"]);
                if (!result["continueTo"]) {
                    break;
                }
            }
            // 更新数据
            this.toolbarDatas = [].concat(_tempToolbarDatas);
            // 所有第一层下拉都収折
            this.dpState = [false];
            this.cd.detectChanges();
        }
    };
    // 下拉的展开收起状态
    // 下拉的展开收起状态
    /**
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    ResponseToolbarComponent.prototype.dpSectionState = 
    // 下拉的展开收起状态
    /**
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function (state, id) {
        if (state) {
            // 展开状态下
            /** @type {?} */
            var dropdowns = this.resizedContentEl.nativeElement.querySelectorAll("[fDropdown]");
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf("show") &&
                        dropdowns[k].id != id) {
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                        this.compatibleDispatchEvent(dropdowns[k], "selfClose");
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    ResponseToolbarComponent.prototype.compatibleDispatchEvent = /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    function (eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    };
    // 修改启用禁用状态
    // 修改启用禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    ResponseToolbarComponent.prototype.changeState = 
    // 修改启用禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        /** @type {?} */
        var idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var state = values[id];
            /** @type {?} */
            var item = _this._findItemByID(id, _this.toolbarDatas);
            if (item) {
                item["disabled"] = state;
            }
        }));
        this.cd.detectChanges();
    };
    /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param values
     */
    /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param {?} values
     * @return {?}
     */
    ResponseToolbarComponent.prototype.changeVisible = /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        /** @type {?} */
        var idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var visible = values[id];
            /** @type {?} */
            var item = _this._findItemByID(id, _this.toolbarDatas);
            if (item) {
                item["visible"] = visible;
            }
        }));
        // 遍历循环,更新数据
        this.toolbarDatas.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            // 如果是下拉
            if (item["isDP"]) {
                _this._checkDropdownVisible(values, item);
            }
        }));
        this.needResponseChanges++;
        // 更新
        //this.cd.markForCheck();
        this.cd.detectChanges();
    };
    /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @param outsideVisibleArrays 从组件外传入的可见状态对象
     * @param dropdownItem 下拉元素
     */
    /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @private
     * @param {?} outsideVisibleArrays 从组件外传入的可见状态对象
     * @param {?} dropdownItem 下拉元素
     * @return {?}
     */
    ResponseToolbarComponent.prototype._checkDropdownVisible = /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @private
     * @param {?} outsideVisibleArrays 从组件外传入的可见状态对象
     * @param {?} dropdownItem 下拉元素
     * @return {?}
     */
    function (outsideVisibleArrays, dropdownItem) {
        var _this = this;
        //如果没有被强制设置状态
        if (!outsideVisibleArrays.hasOwnProperty(dropdownItem["id"])) {
            // 下拉元素不可见，判断是否有可见子元素
            if (!dropdownItem["visible"] &&
                this._hasVisibleItem(dropdownItem["children"], true)) {
                dropdownItem["visible"] = true;
            }
            // 下拉元素是可见，判断是否有子元素都不可见
            if (dropdownItem["visible"] &&
                !this._hasVisibleItem(dropdownItem["children"], true)) {
                dropdownItem["visible"] = false;
            }
        }
        dropdownItem.children.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item["isDP"]) {
                _this._checkDropdownVisible(outsideVisibleArrays, item);
            }
        }));
    };
    /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @param datas 待检查数据
     * @param visible 可见状态
     */
    /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @private
     * @param {?} datas 待检查数据
     * @param {?} visible 可见状态
     * @return {?}
     */
    ResponseToolbarComponent.prototype._hasVisibleItem = /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @private
     * @param {?} datas 待检查数据
     * @param {?} visible 可见状态
     * @return {?}
     */
    function (datas, visible) {
        /** @type {?} */
        var findIndex = datas.findIndex((/**
         * @param {?} childItem
         * @return {?}
         */
        function (childItem) {
            if (childItem["visible"] == visible) {
                return true;
            }
            return false;
        }));
        if (findIndex > -1) {
            return true;
        }
        return false;
    };
    /**
     * 捕获点击
     * @param ev
     */
    /**
     * 捕获点击
     * @param {?} ev
     * @return {?}
     */
    ResponseToolbarComponent.prototype.clickItem = /**
     * 捕获点击
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        // 如果是分离的下拉按钮
        if (this.elhasSpecialCls(ev.target, "dropdown-toggle-split")) {
            ev.stopImmediatePropagation();
        }
        // 判断是否点击到需要处理事件的元素上,按钮、下拉按钮
        /** @type {?} */
        var clickEvEl = this.findBtnOrTogglerItemFromClick(ev.target);
        if (clickEvEl) {
            /** @type {?} */
            var tempID = clickEvEl["id"];
            // 修改模板，id调整到下拉整体上
            if (!tempID &&
                this.elhasSpecialCls(clickEvEl["parentNode"], "f-rt-dropdown")) {
                tempID = clickEvEl["parentNode"].id;
            }
            if (tempID) {
                /** @type {?} */
                var tempItem = this._findItemByID(tempID, this.toolbarDatas);
                // 如果元素禁用
                if (tempItem["disabled"]) {
                    // 禁止向上传递
                    ev.stopImmediatePropagation();
                }
                else {
                    this.clickItems.next({
                        id: tempID,
                        text: tempItem["text"],
                        hidden: tempItem["hidden"]
                    });
                }
            }
        }
        else {
            ev.stopImmediatePropagation();
        }
    };
    /**
     * @private
     * @param {?} clickTarget
     * @return {?}
     */
    ResponseToolbarComponent.prototype.findBtnOrTogglerItemFromClick = /**
     * @private
     * @param {?} clickTarget
     * @return {?}
     */
    function (clickTarget) {
        // 父级标签是否是body,是着停止返回集合,反之继续
        if (this.elhasSpecialCls(clickTarget)) {
            return clickTarget;
        }
        else if (clickTarget.parentNode.hasOwnProperty("className") &&
            clickTarget.parentNode.className.indexOf("f-response-content") < 0) {
            /** @type {?} */
            var parentN = clickTarget.parentNode;
            if (this.elhasSpecialCls(parentN)) {
                return parentN;
            }
            else {
                return this.findBtnOrTogglerItemFromClick(parentN);
            }
        }
        // 返回集合,结束
        return null;
    };
    /**
     * @private
     * @param {?} el
     * @param {?=} clsName
     * @return {?}
     */
    ResponseToolbarComponent.prototype.elhasSpecialCls = /**
     * @private
     * @param {?} el
     * @param {?=} clsName
     * @return {?}
     */
    function (el, clsName) {
        if (clsName === void 0) { clsName = ""; }
        if (el) {
            /** @type {?} */
            var classNameList = el.classList;
            /** @type {?} */
            var findCls = false;
            for (var k = 0; k < classNameList.length; k++) {
                if (clsName) {
                    if (classNameList[k] == clsName) {
                        findCls = true;
                        break;
                    }
                }
                else {
                    if (classNameList[k] == "f-rt-btn" ||
                        classNameList[k] == "f-rt-toggle") {
                        findCls = true;
                        break;
                    }
                }
            }
            return findCls;
        }
        return false;
    };
    /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     */
    /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._reOrganizeResizeGroups = /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     * @private
     * @return {?}
     */
    function () {
        // 处理分组数据
        //  if (this.resizeGroups.length === 0) {
        /** @type {?} */
        var moreText = "更多";
        if (this.localeService) {
            moreText = this.localeService.getValue("responseToolbar.more");
        }
        /** @type {?} */
        var defaultResizeGroup = new ResponseToolbarGroup("toolbar-group-1", moreText);
        for (var i = this.toolbarDatas.length - 1; i >= 0; i--) {
            defaultResizeGroup.setPreset(this.toolbarDatas[i]["id"]);
        }
        this.resizeGroups = [].concat(defaultResizeGroup);
        // this.cd.markForCheck();
        this.cd.detectChanges();
    };
    /**
     * 内容与容器的差值
     */
    /**
     * 内容与容器的差值
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getDistance = /**
     * 内容与容器的差值
     * @private
     * @return {?}
     */
    function () {
        return (this.resizedContentEl.nativeElement.offsetWidth -
            this.resizedContainerEl.nativeElement.offsetWidth);
    };
    /**
     * 根据返回结果判断是否继续
     * @param groupIndex
     */
    /**
     * 根据返回结果判断是否继续
     * @private
     * @param {?} originalData
     * @param {?} groupIndex
     * @return {?}
     */
    ResponseToolbarComponent.prototype._restitute = /**
     * 根据返回结果判断是否继续
     * @private
     * @param {?} originalData
     * @param {?} groupIndex
     * @return {?}
     */
    function (originalData, groupIndex) {
        /** @type {?} */
        var tempGroup = this.resizeGroups[groupIndex];
        // 滚动条和内容的距离
        /** @type {?} */
        var tempDistance = this._getDistance();
        // 计算最后一个下拉的宽度
        /** @type {?} */
        var tempGroupData = originalData[this._findIndexByID(originalData, tempGroup.id)];
        // 找到还原的位置
        /** @type {?} */
        var tempPresetIndex = [].concat(tempGroup.responsedIndex);
        // 排除原下拉子元素被计算
        for (var j = tempPresetIndex.length - 1; j >= 0; j--) {
            if (tempDistance >= 0) {
                break;
            }
            // 从下拉中移除
            /** @type {?} */
            var tempChildData = tempGroupData.children[0];
            /** @type {?} */
            var specialDistance = j === 0 ? tempGroupData.getWidth() : 0;
            tempDistance =
                tempDistance +
                    (tempChildData.getWidth() ? tempChildData.getWidth() : 0) -
                    specialDistance;
            if (tempDistance >= 0) {
                break;
            }
            else {
                // 更新下拉
                tempGroupData.removeChild();
                // 插入到原位置
                originalData.splice(tempPresetIndex[j], 0, tempChildData);
                // 更新位置
                tempGroup.removeResponsed(j);
                if (j === 0) {
                    originalData.splice(this._findIndexByID(originalData, tempGroup.id), 1);
                }
            }
        }
        return {
            continueTo: tempDistance > 0 ? true : false,
            data: originalData
        };
    };
    /**
     * 开始计算
     * @param datas
     */
    /**
     * 开始计算
     * @private
     * @param {?=} auxiliary
     * @param {?=} tGroupWidth
     * @return {?}
     */
    ResponseToolbarComponent.prototype._calculate = /**
     * 开始计算
     * @private
     * @param {?=} auxiliary
     * @param {?=} tGroupWidth
     * @return {?}
     */
    function (auxiliary, tGroupWidth) {
        if (auxiliary === void 0) { auxiliary = false; }
        if (tGroupWidth === void 0) { tGroupWidth = 0; }
        if (this._auxiliary < 0) {
            return;
        }
        // 记录需要修改的下拉
        /** @type {?} */
        var tempDP;
        // 滚动条和内容的距离
        /** @type {?} */
        var tempDistance = this._getDistance() + tGroupWidth;
        // 临时存储数据
        /** @type {?} */
        var tempToolbarDatas = [].concat(this.toolbarDatas);
        /** @type {?} */
        var tempGroup = this.resizeGroups[this._auxiliary];
        if (auxiliary) {
            tempDP = this.auxiliaryDatas.pop();
            tempDP.setWidth(tGroupWidth);
            tempGroup.setWidth(tGroupWidth);
        }
        else {
            tempDP =
                tempToolbarDatas[this._findIndexByID(tempToolbarDatas, tempGroup.id)];
        }
        // 当前剩余隐藏
        for (var j = tempGroup.responsedIndex.length; j < tempGroup.presetId.length; j++) {
            if (tempDistance <= 0) {
                break;
            }
            // 计算在当前数据中的位置，根据这个位置可以找宽度
            /** @type {?} */
            var tempOldIndex = (/** @type {?} */ (this._findIndexByID(this.toolbarDatas, tempGroup.presetId[j])));
            /** @type {?} */
            var tempNewIndex = (/** @type {?} */ (this._findIndexByID(tempToolbarDatas, tempGroup.presetId[j])));
            // 计算按钮宽度
            /** @type {?} */
            var tempWidth = (/** @type {?} */ (this.toolbarDatas[tempOldIndex].getWidth()));
            if (tempWidth === 0) {
                // 按钮宽度未曾被计算过
                tempWidth = this._getWidthFromElementsById(tempGroup.presetId[j]);
                tempToolbarDatas[tempNewIndex].setWidth(tempWidth);
            }
            else if (tempWidth === false) {
                // 按钮被隐藏
                tempWidth = 0;
            }
            tempDP.addChild(tempToolbarDatas[tempNewIndex]);
            // 移除
            tempToolbarDatas.splice(tempNewIndex, 1);
            // 保存位置用于还原
            tempGroup.setResponsed(tempNewIndex);
            tempDistance = tempDistance - tempWidth;
        }
        if (auxiliary && tempDP.hasChild()) {
            // 插入
            tempToolbarDatas.push(tempDP);
        }
        this._auxiliary = -1;
        this.toolbarDatas = [].concat(tempToolbarDatas);
        this.cd.detectChanges();
    };
    /**
     * 根据id找到实际显示元素的宽度
     * @param findId
     */
    /**
     * 根据id找到实际显示元素的宽度
     * @private
     * @param {?} findId
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getWidthFromElementsById = /**
     * 根据id找到实际显示元素的宽度
     * @private
     * @param {?} findId
     * @return {?}
     */
    function (findId) {
        /** @type {?} */
        var parentEl = this.resizedContentEl.nativeElement;
        /** @type {?} */
        var childLen = parentEl.children.length;
        /** @type {?} */
        var result = 0;
        for (var k = 0; k < childLen; k++) {
            if (parentEl.children[k].id === findId) {
                result = parentEl.children[k].offsetWidth;
                break;
            }
        }
        return result;
    };
    /**
     * 格式化数据
     */
    /**
     * 格式化数据
     * @private
     * @param {?} datas
     * @param {?=} idPrefix
     * @return {?}
     */
    ResponseToolbarComponent.prototype._formatData = /**
     * 格式化数据
     * @private
     * @param {?} datas
     * @param {?=} idPrefix
     * @return {?}
     */
    function (datas, idPrefix) {
        var _this = this;
        if (idPrefix === void 0) { idPrefix = "response"; }
        /** @type {?} */
        var result = [];
        datas.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (item.isDP) {
                // 如果是下拉
                if (item.hasOwnProperty("children") &&
                    item["children"].length) {
                    /** @type {?} */
                    var children = [].concat(item["children"]);
                    item.children = [];
                    /** @type {?} */
                    var dpItem = new ResponseToolbarDropDown(Object.assign({ id: idPrefix + "_" + index }, item));
                    result.push(dpItem);
                    dpItem.children = _this._formatData(children, idPrefix + "_" + index);
                }
                else {
                    result.push(new ResponseToolbarDropDown(Object.assign({ id: idPrefix + "_" + index }, item)));
                }
            }
            else {
                // 非下拉
                result.push(new ResponseToolbarItem(Object.assign({ id: idPrefix + "_" + index }, item)));
            }
        }));
        return result;
    };
    /**
     * 找到第一个未处理完响应式的元素
     */
    /**
     * 找到第一个未处理完响应式的元素
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getFirstUnResponsedIndex = /**
     * 找到第一个未处理完响应式的元素
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tempUnResponsedIndex = this.resizeGroups.findIndex((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            if (group.isResponsed()) {
                return false;
            }
            return true;
        }));
        return tempUnResponsedIndex;
    };
    /**
     * 寻找最后一个处理响应式的元素
     */
    /**
     * 寻找最后一个处理响应式的元素
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getLastResponseIndex = /**
     * 寻找最后一个处理响应式的元素
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tempResponsingIndex = this.resizeGroups.findIndex((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            if (!group.isResponsing()) {
                return true;
            }
            return false;
        }));
        // 所有组元素都已处理完响应式
        if (tempResponsingIndex === -1) {
            return this.resizeGroups.length - 1;
        }
        // 所有组元素都未开始处理响应式
        return tempResponsingIndex > 1 ? tempResponsingIndex - 1 : -1;
    };
    /**
     * 找到group形成的下拉，在数据中的位置
     */
    /**
     * 找到group形成的下拉，在数据中的位置
     * @private
     * @param {?} datas
     * @param {?} id
     * @return {?}
     */
    ResponseToolbarComponent.prototype._findIndexByID = /**
     * 找到group形成的下拉，在数据中的位置
     * @private
     * @param {?} datas
     * @param {?} id
     * @return {?}
     */
    function (datas, id) {
        /** @type {?} */
        var result = datas.findIndex((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (item["id"] === id) {
                return true;
            }
            return false;
        }));
        return result;
    };
    /**
     * 根据ID寻找Item
     */
    /**
     * 根据ID寻找Item
     * @private
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    ResponseToolbarComponent.prototype._findItemByID = /**
     * 根据ID寻找Item
     * @private
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    function (id, data) {
        var _this = this;
        /** @type {?} */
        var tempResult = null;
        /** @type {?} */
        var tempIndex = data.findIndex((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (item["id"] === id) {
                tempResult = item;
                return true;
            }
            // 如果是下拉，层级下拉
            if (item["isDP"]) {
                /** @type {?} */
                var tempItem = _this._findItemByID(id, item["children"]);
                if (tempItem) {
                    tempResult = tempItem;
                    return true;
                }
            }
            return false;
        }));
        return tempResult;
    };
    ResponseToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: "f-response-toolbar",
                    template: "<!-- <div class=\"border bg-primary\" style=\"height:40px;position: relative;\"> -->\r\n<div #auxiliaryContainer class=\"response-toolbar-hidden-element\">\r\n    <ng-container *ngFor=\"let dataItem of auxiliaryDatas\">\r\n        <div class=\"btn-group\" *ngIf=\"dataItem.visible&&dataItem.isDP\" id=\"{{ dataItem.id }}\">\r\n            <button type=\"button\" class=\"btn dropdown-toggle dropdown-toggle-split  f-rt-toggle\"\r\n                [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"dataItem.class\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n             <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n            </button>\r\n        </div>\r\n        <button type=\"button\" class=\"btn f-rt-btn\" [class.f-btn-ml]=\"btnAlign=='right'\"\r\n            [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"dataItem.class\" id=\"{{ dataItem.id }}\"\r\n            *ngIf=\"dataItem.visible&&!dataItem.isDP\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n            <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n        </button>\r\n    </ng-container>\r\n</div>\r\n<div fResized #resizedContainer (resizedEvent)=\"onResize($event)\" class=\"d-flex flex-nowrap\"\r\n    [ngClass]=\"{'justify-content-end':btnAlign=='right','justify-content-start':btnAlign=='left'}\">\r\n    <div class=\"d-inline-block f-response-content\" style=\"white-space: nowrap;\" #resizedContent\r\n        (click)=\"clickItem($event)\">\r\n        <ng-container *ngFor=\"let dataItem of toolbarDatas\">\r\n            <ng-container *ngIf=\"dataItem.visible && dataItem.isDP\">\r\n                <ng-container *ngTemplateOutlet=\"\r\n                        dropdownTmpl;\r\n                        context: { $implicit: dataItem }\r\n                    \"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dataItem.visible && !dataItem.isDP&&dataItem.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\"\r\n                    [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" id=\"{{ dataItem.id }}\"\r\n                    [ngClass]=\"dataItem.class\" [class.disabled]=\"dataItem.disabled\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\"\r\n                    [farrisTooltip]=\"dataItem.tipsEnable\" [content]=\"dataItem.tipsText\">\r\n                    <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n                </button>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dataItem.visible && !dataItem.isDP&&!dataItem.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\"\r\n                    [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" id=\"{{ dataItem.id }}\"\r\n                    [ngClass]=\"dataItem.class\" [class.disabled]=\"dataItem.disabled\"  [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- </div> -->\r\n\r\n<!--\u7B2C\u4E00\u5C42\u4E0B\u62C9-->\r\n<ng-template #dropdownTmpl let-data>\r\n    <div class=\"btn-group f-rt-dropdown\" id=\"{{ data.id }}\" fDropdown\r\n        [placement]=\"getPlacement(data['placement'],'bottom')\" (dpChangeEvent)=\"dpSectionState($event,data.id)\"\r\n        [rectifyReference]=\"referEl\" [forceState]=\"dpState\" [autoRectify]=\"true\" [class.f-btn-ml]=\"btnAlign=='right'\"\r\n        [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"data['dropdownCls']\">\r\n        <!--\u542F\u7528\u4E0B\u62C9\u5206\u5F00\u6309\u94AE-->\r\n        <ng-container *ngIf=\"data.split\">\r\n            <ng-container *ngIf=\"data.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\" [ngClass]=\"data.class\" [class.disabled]=\"data.disabled\"\r\n                    [farrisTooltip]=\"data.tipsEnable\" [content]=\"data.tipsText\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n                </button>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!data.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\" [ngClass]=\"data.class\" [class.disabled]=\"data.disabled\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n                </button>\r\n            </ng-container>\r\n            <button class=\"btn dropdown-toggle dropdown-toggle-split\" [ngClass]=\"data.class\" fDropdownToggle></button>\r\n        </ng-container>\r\n        <!--\u4E0D\u542F\u7528\u4E0B\u62C9\u5206\u5F00\u6309\u94AE-->\r\n        <ng-container *ngIf=\"!data.split&&data.tipsEnable\">\r\n            <button type=\"button\" fDropdownToggle class=\"btn f-rt-toggle\" [farrisTooltip]=\"data.tipsEnable\"\r\n                [content]=\"data.tipsText\" [ngClass]=\"data.class + ' dropdown-toggle'\" [dpDisabled]=\"data.disabled\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n            </button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!data.split&&!data.tipsEnable\">\r\n            <button type=\"button\" fDropdownToggle class=\"btn f-rt-toggle\" [ngClass]=\"data.class + ' dropdown-toggle'\"\r\n                [dpDisabled]=\"data.disabled\"  [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n            </button>\r\n        </ng-container>\r\n        <ul class=\"dropdown-menu\" fDropdownMenu [ngClass]=\"data.menuCls\" id=\"{{ data.id }}_menu\">\r\n            <ng-container *ngFor=\"let item of data.children\">\r\n                <ng-container *ngIf=\"item.visible && item.isDP\">\r\n                    <ng-container *ngTemplateOutlet=\"\r\n                            dropdownSubTmpl;\r\n                            context: { $implicit: item }\r\n                        \"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.visible&&!item.isDP&&item.tipsEnable\">\r\n                    <li class=\"dropdown-item  f-rt-btn\" id=\"{{ item.id }}\" [class.disabled]=\"item.disabled\"\r\n                        [farrisTooltip]=\"item.tipsEnable\" [content]=\"item.tipsText\">\r\n                        {{ item.text }}\r\n                    </li>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.visible&&!item.isDP&&!item.tipsEnable\">\r\n                    <li class=\"dropdown-item  f-rt-btn\" id=\"{{ item.id }}\" [class.disabled]=\"item.disabled\">\r\n                        {{ item.text }}\r\n                    </li>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ul>\r\n    </div>\r\n</ng-template>\r\n<!--\u7B2C\u4E8C\u5C42\u4E0B\u62C9-->\r\n<ng-template #dropdownSubTmpl let-subData>\r\n    <li class=\"dropdown-submenu f-rt-dropdown\" fDropdown [isSubDP]=\"true\"\r\n        [placement]=\"getPlacement(subData['placement'],'right')\" [autoRectify]=\"true\" [rectifyReference]=\"referEl\"\r\n        [ngClass]=\"subData['dropdownCls']\" id=\"{{ subData.id }}\">\r\n        <ng-container *ngIf=\"subData.split\">\r\n            <ng-container *ngIf=\"subData.tipsEnable\">\r\n                <span class=\"dropdown-item f-rt-btn\" [class.disabled]=\"subData['disabled']\" [ngClass]=\"subData['class']\"\r\n                    [farrisTooltip]=\"subData.tipsEnable\" [content]=\"subData.tipsText\">{{ subData.text }}</span>\r\n                <span class=\"dropdown-toggle dropdown-toggle-split f-rt-toggle\" fDropdownToggle></span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!subData.tipsEnable\">\r\n                <span class=\"dropdown-item f-rt-btn\" [class.disabled]=\"subData['disabled']\"\r\n                    [ngClass]=\"subData['class']\">{{ subData.text }}</span>\r\n                <span class=\"dropdown-toggle dropdown-toggle-split f-rt-toggle\" fDropdownToggle></span>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!subData.split\">\r\n            <ng-container *ngIf=\"subData.tipsEnable\">\r\n                <span class=\"dropdown-item  dropdown-toggle f-rt-toggle\" [dpDisabled]=\"subData['disabled']\"\r\n                    [farrisTooltip]=\"subData.tipsEnable\" [content]=\"subData.tipsText\" [ngClass]=\"subData['class']\"\r\n                    fDropdownToggle>{{ subData.text }}</span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!subData.tipsEnable\">\r\n                <span class=\"dropdown-item  dropdown-toggle f-rt-toggle\" [dpDisabled]=\"subData['disabled']\"\r\n                    [ngClass]=\"subData['class']\" fDropdownToggle>{{ subData.text }}</span>\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n\r\n        <ul class=\"dropdown-menu\" fDropdownMenu [ngClass]=\"subData.menuCls\" id=\"{{ subData.id }}_submenu\">\r\n            <ng-container *ngFor=\"let subItem of subData.children\">\r\n                <ng-container *ngIf=\"subItem.visible && subItem.isDP\">\r\n                    <ng-container *ngTemplateOutlet=\"\r\n                            dropdownSubTmpl;\r\n                            context: { $implicit: subItem }\r\n                        \"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"subItem.visible && !subItem.isDP\">\r\n                    <ng-container *ngIf=\"subItem.tipsEnable\">\r\n                        <li [farrisTooltip]=\"subItem.tipsEnable\" [content]=\"subItem.tipsText\"\r\n                            class=\"dropdown-item f-rt-btn\" id=\"{{ subItem.id }}\" [class.disabled]=\"subItem.disabled\">\r\n                            {{ subItem.text }}\r\n                        </li>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!subItem.tipsEnable\">\r\n                        <li class=\"dropdown-item f-rt-btn\" id=\"{{ subItem.id }}\" [class.disabled]=\"subItem.disabled\">\r\n                            {{ subItem.text }}\r\n                        </li>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ul>\r\n    </li>\r\n</ng-template>",
                    styles: [":host .response-toolbar-hidden-element{position:fixed;z-index:200;visibility:hidden;top:-87px}"]
                }] }
    ];
    /** @nocollapse */
    ResponseToolbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: LocaleService }
    ]; };
    ResponseToolbarComponent.propDecorators = {
        frtCls: [{ type: HostBinding, args: ["class.f-response-toolbar",] }],
        prCls: [{ type: HostBinding, args: ["class.position-relative",] }],
        resizedContainerEl: [{ type: ViewChild, args: ["resizedContainer",] }],
        auxiliaryContainerEl: [{ type: ViewChild, args: ["auxiliaryContainer",] }],
        resizedContentEl: [{ type: ViewChild, args: ["resizedContent",] }],
        resizedContainerDirective: [{ type: ViewChild, args: ["resizedContainer", { read: FResizedDirective },] }],
        rtClickEvent: [{ type: Output }],
        groups: [{ type: Input }],
        datas: [{ type: Input }],
        btnState: [{ type: Input }],
        btnVisible: [{ type: Input }],
        clickThrottleTime: [{ type: Input }],
        buttonSize: [{ type: Input }],
        popDirection: [{ type: Input }],
        btnAlign: [{ type: Input }]
    };
    return ResponseToolbarComponent;
}());
export { ResponseToolbarComponent };
if (false) {
    /** @type {?} */
    ResponseToolbarComponent.prototype.frtCls;
    /** @type {?} */
    ResponseToolbarComponent.prototype.prCls;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizedContainerEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.auxiliaryContainerEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizedContentEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizedContainerDirective;
    /** @type {?} */
    ResponseToolbarComponent.prototype.rtClickEvent;
    /** @type {?} */
    ResponseToolbarComponent.prototype.auxiliaryDatas;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.containerWidthRecord;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.needResponseChanges;
    /** @type {?} */
    ResponseToolbarComponent.prototype.referEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.dpState;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype._auxiliary;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype._selfEl;
    /** @type {?} */
    ResponseToolbarComponent.prototype.resizeGroups;
    /** @type {?} */
    ResponseToolbarComponent.prototype.toolbarDatas;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.distanceThreshold;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.isUpdateTBView;
    /** @type {?} */
    ResponseToolbarComponent.prototype._stateDatas;
    /** @type {?} */
    ResponseToolbarComponent.prototype._btnVisibleDatas;
    /** @type {?} */
    ResponseToolbarComponent.prototype.clickThrottleTime;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.clickItems;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.clickSubscription;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.rtSize;
    /** @type {?} */
    ResponseToolbarComponent.prototype.popDirection;
    /** @type {?} */
    ResponseToolbarComponent.prototype.btnAlign;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ResponseToolbarComponent.prototype.cd;
    /** @type {?} */
    ResponseToolbarComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtdG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXJlc3BvbnNlLXRvb2xiYXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L3Jlc3BvbnNlLXRvb2xiYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULEtBQUssRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFLVCxpQkFBaUIsRUFDakIsV0FBVyxFQUNYLE1BQU0sRUFDTixZQUFZLEVBQ1osTUFBTSxFQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsbUJBQW1CLEVBQ25CLG9CQUFvQixFQUV2QixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFpQyxNQUFNLE1BQU0sQ0FBQztBQUMxRSxPQUFPLEVBQWdCLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLGNBQWMsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RDtJQStHSSxrQ0FDSSxFQUFjLEVBQ04sTUFBaUIsRUFDakIsRUFBcUIsRUFDdEIsYUFBNEI7UUFGM0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUN0QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQTNHRSxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2YsVUFBSyxHQUFHLElBQUksQ0FBQzs7UUFZckQsaUJBQVksR0FBNEMsSUFBSSxZQUFZLEVBRXJFLENBQUM7O1FBRUosbUJBQWMsR0FBbUMsRUFBRSxDQUFDOzs7O1FBSTVDLE9BQUUsR0FBMEIsSUFBSSxDQUFDOztRQUVq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eEIsMkNBQTZCOztJQUM3QixnREFBK0M7O0lBRS9DLGdEQUF3RTs7Ozs7SUFleEUscURBQStCOzs7OztJQUMvQixrREFBK0I7O0lBVy9CLCtDQUFvRDs7SUFNcEQsb0RBQXlEOztJQU16RCxxREFBaUM7Ozs7O0lBQ2pDLDhDQUF3Qzs7Ozs7SUFDeEMscURBQXdDOzs7OztJQUN4QywwQ0FBb0I7O0lBd0JwQixnREFBMkI7O0lBRTNCLDRDQUE0Qjs7Ozs7SUFDNUIsMENBQXNCOzs7OztJQUdsQiwwQ0FBeUI7Ozs7O0lBQ3pCLHNDQUE2Qjs7SUFDN0IsaURBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE9uSW5pdCxcclxuICAgIElucHV0LFxyXG4gICAgVmlld0NoaWxkLFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIFJlbmRlcmVyMixcclxuICAgIEFmdGVyVmlld0luaXQsXHJcbiAgICBEb0NoZWNrLFxyXG4gICAgQWZ0ZXJWaWV3Q2hlY2tlZCxcclxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBIb3N0QmluZGluZyxcclxuICAgIE91dHB1dCxcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIE5nWm9uZSxcclxuICAgIE9uRGVzdHJveVxyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7XHJcbiAgICBSZXNwb25zZVRvb2xiYXJEcm9wRG93bixcclxuICAgIFJlc3BvbnNlVG9vbGJhckl0ZW0sXHJcbiAgICBSZXNwb25zZVRvb2xiYXJHcm91cCxcclxuICAgIFJlc3BvbnNlVG9vbGJhckNsaWNrRXZlbnRcclxufSBmcm9tIFwiLi4vbW9kZWwvcmVzcG9uc2UtdG9vbGJhci5tb2RlbFwiO1xyXG5pbXBvcnQgeyBGUmVzaXplZERpcmVjdGl2ZSB9IGZyb20gXCIuLi9yZXNpemVkL2YtcmVzaXplZC5kaXJlY3RpdmVcIjtcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyB0aHJvdHRsZVRpbWUsIGRlYm91bmNlVGltZSB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSBcIkBmYXJyaXMvdWktbG9jYWxlXCI7XHJcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tIFwicmVzaXplLW9ic2VydmVyLXBvbHlmaWxsXCI7XHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiZi1yZXNwb25zZS10b29sYmFyXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3Jlc3BvbnNlLXRvb2xiYXIuY29tcG9uZW50Lmh0bWxcIixcclxuICAgIHN0eWxlVXJsczogW1wiLi9yZXNwb25zZS10b29sYmFyLmNvbXBvbmVudC5jc3NcIl0sXHJcbiAgICAvLyBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VUb29sYmFyQ29tcG9uZW50XHJcbiAgICBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcclxuICAgIEBIb3N0QmluZGluZyhcImNsYXNzLmYtcmVzcG9uc2UtdG9vbGJhclwiKSBmcnRDbHMgPSB0cnVlO1xyXG4gICAgQEhvc3RCaW5kaW5nKFwiY2xhc3MucG9zaXRpb24tcmVsYXRpdmVcIikgcHJDbHMgPSB0cnVlO1xyXG4gICAgLy8g5ZON5bqU5byP5a655ZmoXHJcbiAgICBAVmlld0NoaWxkKFwicmVzaXplZENvbnRhaW5lclwiKSByZXNpemVkQ29udGFpbmVyRWw7XHJcbiAgICAvLyDovoXliqnorqHnrpflrrnlmahcclxuICAgIEBWaWV3Q2hpbGQoXCJhdXhpbGlhcnlDb250YWluZXJcIikgYXV4aWxpYXJ5Q29udGFpbmVyRWw7XHJcbiAgICAvLyDlk43lupTlvI/lhoXlrrnlrrnlmahcclxuICAgIEBWaWV3Q2hpbGQoXCJyZXNpemVkQ29udGVudFwiKSByZXNpemVkQ29udGVudEVsO1xyXG4gICAgLy9cclxuICAgIEBWaWV3Q2hpbGQoXCJyZXNpemVkQ29udGFpbmVyXCIsIHsgcmVhZDogRlJlc2l6ZWREaXJlY3RpdmUgfSlcclxuICAgIHJlc2l6ZWRDb250YWluZXJEaXJlY3RpdmU6IEZSZXNpemVkRGlyZWN0aXZlO1xyXG4gICAgLy8g5Lyg6YCS54K55Ye75LqL5Lu2XHJcbiAgICBAT3V0cHV0KClcclxuICAgIHJ0Q2xpY2tFdmVudDogRXZlbnRFbWl0dGVyPFJlc3BvbnNlVG9vbGJhckNsaWNrRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxcclxuICAgICAgICBSZXNwb25zZVRvb2xiYXJDbGlja0V2ZW50XHJcbiAgICA+KCk7XHJcbiAgICAvLyDovoXliqnorqHnrpflrr3luqbmlbDmja5cclxuICAgIGF1eGlsaWFyeURhdGFzOiBBcnJheTxSZXNwb25zZVRvb2xiYXJEcm9wRG93bj4gPSBbXTtcclxuICAgIC8vIOaOp+WItueItuWFg+e0oOa7muWKqOeahOagt+W8j1xyXG4gICAgLy8gIHByaXZhdGUgX2RwU3RhdGUgPSBmYWxzZTtcclxuICAgIC8vXHJcbiAgICBwcml2YXRlIHJvOiBSZXNpemVPYnNlcnZlciB8IG51bGwgPSBudWxsO1xyXG4gICAgLy8g6K6w5b2V5a655Zmo5a695bqmXHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcldpZHRoUmVjb3JkID0gMDtcclxuICAgIC8vIOiusOW9leWPmOWMllxyXG4gICAgcHJpdmF0ZSBuZWVkUmVzcG9uc2VDaGFuZ2VzID0gMDtcclxuICAgIHJlZmVyRWwgPSBudWxsO1xyXG4gICAgZHBTdGF0ZSA9IFtmYWxzZV07XHJcbiAgICAvLyDnlKjmnaXlhoXpg6jorrDlvZVcclxuICAgIHByaXZhdGUgX2F1eGlsaWFyeSA9IC0xO1xyXG4gICAgcHJpdmF0ZSBfc2VsZkVsOiBIVE1MRWxlbWVudDtcclxuICAgIHJlc2l6ZUdyb3VwczogQXJyYXk8UmVzcG9uc2VUb29sYmFyR3JvdXA+ID0gW107XHJcbiAgICAvLyDorrDlvZXmoLzlvI/ljJblkI7nmoTmlbDmja5cclxuICAgIHRvb2xiYXJEYXRhczogQXJyYXk8UmVzcG9uc2VUb29sYmFySXRlbSB8IFJlc3BvbnNlVG9vbGJhckRyb3BEb3duPiA9IFtdO1xyXG4gICAgLy8g5YaF6YOo6K6w5b2V5qC85byP5YyW5ZCO55qE5Yid5aeL5pWw5o2uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeaaguaXtuS4jeeUqFxyXG4gICAgLy8gX3Rvb2xiYXJEYXRhczogQXJyYXk8UmVzcG9uc2VUb29sYmFySXRlbSB8IFJlc3BvbnNlVG9vbGJhckRyb3BEb3duPiA9IFtdO1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBncm91cHModmFsdWVzOiBBcnJheTxSZXNwb25zZVRvb2xiYXJHcm91cD4pIHtcclxuICAgICAgICBpZiAodmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplR3JvdXBzID0gW107XHJcbiAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplR3JvdXBzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlc3BvbnNlVG9vbGJhckdyb3VwKGdyb3VwLmlkLCBncm91cC5uYW1lKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIC8vIOi/mOayoeacieiuoeeul+mihOe9ruaOkuW6j1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGRpc3RhbmNlVGhyZXNob2xkID0gMjA7XHJcbiAgICBwcml2YXRlIGlzVXBkYXRlVEJWaWV3ID0gZmFsc2U7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBkYXRhcyh2YWx1ZXM6IEFycmF5PFJlc3BvbnNlVG9vbGJhckl0ZW0gfCBSZXNwb25zZVRvb2xiYXJEcm9wRG93bj4pIHtcclxuICAgICAgICBpZiAodmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhckRhdGFzID0gdGhpcy5fZm9ybWF0RGF0YSh2YWx1ZXMpO1xyXG4gICAgICAgICAgICB0aGlzLm5lZWRSZXNwb25zZUNoYW5nZXMrKztcclxuICAgICAgICAgICAgLy8g5aSE55CG5YiG57uE5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX3JlT3JnYW5pemVSZXNpemVHcm91cHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfc3RhdGVEYXRhczogT2JzZXJ2YWJsZTxBcnJheTxhbnk+PiA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICAvLyDmjInpkq7nmoTnpoHnlKjnirbmgIFcclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgYnRuU3RhdGUodmFsdWVzOiBPYnNlcnZhYmxlPEFycmF5PGFueT4+KSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdGVEYXRhcyA9IHZhbHVlcztcclxuICAgIH1cclxuICAgIF9idG5WaXNpYmxlRGF0YXM6IE9ic2VydmFibGU8QXJyYXk8YW55Pj4gPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgLy8g5oyJ6ZKu55qE5p+l55yL54q25oCBXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGJ0blZpc2libGUodmFsdWVzOiBPYnNlcnZhYmxlPEFycmF5PGFueT4+KSB7XHJcbiAgICAgICAgdGhpcy5fYnRuVmlzaWJsZURhdGFzID0gdmFsdWVzO1xyXG4gICAgfVxyXG4gICAgQElucHV0KCkgY2xpY2tUaHJvdHRsZVRpbWUgPSAzNTA7XHJcbiAgICBwcml2YXRlIGNsaWNrSXRlbXMgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICBwcml2YXRlIGNsaWNrU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIHJ0U2l6ZSA9IFwiXCI7XHJcbiAgICAvKuWwuuWvuO+8muaciXNtLGxnLOepuuWAvO+8jOm7mOiupOaYr+epuuWAvCAqL1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBidXR0b25TaXplKGJ0blNpemU6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChidG5TaXplICE9IHRoaXMucnRTaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMucnRTaXplICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyhcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxmRWwsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJmLXJlc3BvbnNlLXRvb2xiYXItXCIgKyB0aGlzLnJ0U2l6ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5ydFNpemUgPSBidG5TaXplO1xyXG4gICAgICAgICAgICB0aGlzLnJ0U2l6ZSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3MoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZkVsLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZi1yZXNwb25zZS10b29sYmFyLVwiICsgdGhpcy5ydFNpemVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGJ1dHRvblNpemUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ydFNpemU7XHJcbiAgICB9XHJcbiAgICAvKuW8uuWItuaWueWQke+8jOm7mOiupOS4uuepuuWAvO+8jOWPr+S7peaciXRvcOOAgWJvdHRvbe+8jOacneS4iuOAgeacneS4i+OAglxyXG4gICAgICog5L2/55So5Zy65pmv77ya5bel5YW35qCP5YaF6YOo55qE5LiL5ouJ77yM6ZyA6KaB5pyd5LiK5oiW6ICF6ZyA6KaB5pyd5LiL5bGV5byA77yM57uf5LiA5o6n5Yi2XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHBvcERpcmVjdGlvbiA9IFwiXCI7XHJcbiAgICAvLyByaWdodOaMiemSrumdoOWPsyBsZWZ05oyJ6ZKu6Z2g5bemXHJcbiAgICBASW5wdXQoKSBidG5BbGlnbiA9IFwicmlnaHRcIjtcclxuICAgIHByaXZhdGUgbmdab25lID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgcHVibGljIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2VcclxuICAgICkgLy8gcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX3NlbGZFbCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZmVyRWwgPSBlbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5Zug5Li65pen5qih5p2/5bim5pyJ6L+Z5Liq5pa55rOVXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7fVxyXG4gICAgLy8g5Zug5Li65pen5qih5p2/5bim5pyJ6L+Z5Liq5pa55rOVXHJcbiAgICBuZ0RvQ2hlY2soKSB7fVxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgLy8g5Y675o6Jb3ZlcmZsb3fkuYvlkI5cclxuICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyhcclxuICAgICAgICAgICAgdGhpcy5hdXhpbGlhcnlDb250YWluZXJFbC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICBcInJlc3BvbnNlLXRvb2xiYXItaGlkZGVuLWVsZW1lbnRcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8g5oyJ6ZKu55qE56aB55So54q25oCBXHJcbiAgICAgICAgdGhpcy5fc3RhdGVEYXRhcy5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUoZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g5oyJ6ZKu55qE5Y+v6KeB54q25oCBXHJcbiAgICAgICAgdGhpcy5fYnRuVmlzaWJsZURhdGFzLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VWaXNpYmxlKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJFbGVtZW50KCk7XHJcbiAgICAgICAgLy8g5oum5oiq54K55Ye75LqL5Lu25Y+q5Lyg6YCS56ys5LiA5qyh54K55Ye75LqL5Lu255qE5aSE55CG5pON5L2c5Lqk57uZcGFyZW505p2l5aSE55CGXHJcbiAgICAgICAgdGhpcy5jbGlja1N1YnNjcmlwdGlvbiA9IHRoaXMuY2xpY2tJdGVtc1xyXG4gICAgICAgICAgICAucGlwZShkZWJvdW5jZVRpbWUodGhpcy5jbGlja1Rocm90dGxlVGltZSkpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGV2ZW50RGF0YXM6IFJlc3BvbnNlVG9vbGJhckNsaWNrRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucnRDbGlja0V2ZW50LmVtaXQoZXZlbnREYXRhcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucm8pIHtcclxuICAgICAgICAgICAgdGhpcy5yby51bm9ic2VydmUodGhpcy5yZXNpemVkQ29udGFpbmVyRWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMucm8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jbGlja1N1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmNsaWNrU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5uZWVkUmVzcG9uc2VDaGFuZ2VzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkUmVzcG9uc2VDaGFuZ2VzLS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlUmVzaXplKCk7XHJcbiAgICAgICAgfWVsc2UgaWYgKHRoaXMuYXV4aWxpYXJ5RGF0YXMubGVuZ3RoPjApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGN1bGF0ZShcclxuICAgICAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV4aWxpYXJ5Q29udGFpbmVyRWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g5Zug5Li65pen5qih5p2/5bim5pyJ6L+Z5Liq5pa55rOVXHJcbiAgICBvblJlc2l6ZShldmVudCkge31cclxuICAgIC8qKlxyXG4gICAgICog5YW85a655pen5qih5p2/5pen5pa55rOVXHJcbiAgICAgKiDlnKjkuI3lrZjlnKhuZ1pvbmXnmoTmg4XlhrXkuIvvvIzliJvlu7puZ1pvbmUs54S25ZCO57uR5a6a5LqL5Lu2XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb2JzZXJ2ZXJFbGVtZW50KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5uZ1pvbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kdWxlSW5qZWN0b3IgPSB0aGlzLmNkW1wiX3ZpZXdcIl0ucm9vdC5uZ01vZHVsZS5pbmplY3RvcjtcclxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUgPSBtb2R1bGVJbmplY3Rvci5nZXQ8Tmdab25lPihOZ1pvbmUsIG51bGwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJvID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcFdpZHRoID0gZW50cmllc1swXS5jb250ZW50UmVjdC53aWR0aDtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyh0ZW1wV2lkdGggLSB0aGlzLmNvbnRhaW5lcldpZHRoUmVjb3JkKSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzdGFuY2VUaHJlc2hvbGRcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VSZXNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lcldpZHRoUmVjb3JkID0gdGVtcFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5yby5vYnNlcnZlKHRoaXMucmVzaXplZENvbnRhaW5lckVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlvLrliLbovazmjaLmlrnlkJFcclxuICAgICAqIEBwYXJhbSBzZWxmRGVmaW5lUExcclxuICAgICAqIEBwYXJhbSBkZWZhdWx0UExcclxuICAgICAqL1xyXG4gICAgZ2V0UGxhY2VtZW50KHNlbGZEZWZpbmVQTDogc3RyaW5nLCBkZWZhdWx0UEw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG9sZERpcmVjdGlvbiA9IHNlbGZEZWZpbmVQTCA/IHNlbGZEZWZpbmVQTCA6IGRlZmF1bHRQTDtcclxuICAgICAgICBpZiAoIXRoaXMucG9wRGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvbGREaXJlY3Rpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwbFJlbGF0aW9uID0geyBib3R0b206IFwidG9wXCIsIHRvcDogXCJib3R0b21cIiB9O1xyXG4gICAgICAgIG9sZERpcmVjdGlvbiA9IG9sZERpcmVjdGlvbiA9PSBcImxlZnRcIiA/IFwibGVmdC1ib3R0b21cIiA6IG9sZERpcmVjdGlvbjtcclxuICAgICAgICBvbGREaXJlY3Rpb24gPSBvbGREaXJlY3Rpb24gPT0gXCJyaWdodFwiID8gXCJyaWdodC1ib3R0b21cIiA6IG9sZERpcmVjdGlvbjtcclxuICAgICAgICBsZXQgbmV3RGlyZWN0aW9uID0gb2xkRGlyZWN0aW9uLnJlcGxhY2UoXHJcbiAgICAgICAgICAgIHBsUmVsYXRpb25bdGhpcy5wb3BEaXJlY3Rpb25dLFxyXG4gICAgICAgICAgICB0aGlzLnBvcERpcmVjdGlvblxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0RpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiwg+eUqOatpOaWueazleeahOWcuuaZr1xyXG4gICAgICogMeOAgeeVjOmdouaLluaLveiHquWKqOinpuWPkVxyXG4gICAgICogMuOAgeaYvuekuuiwg+eUqFxyXG4gICAgICovXHJcbiAgICByZXNwb25zZVJlc2l6ZSgpIHtcclxuICAgICAgICBjb25zdCBfZGlzdGFuY2UgPSB0aGlzLl9nZXREaXN0YW5jZSgpO1xyXG4gICAgICAgIGlmIChfZGlzdGFuY2UgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIOWmguaenOWIhue7hOmDveW3sue7j+WkhOeQhuWujCzlho3lh7rnjrDmu5rliqjmnaHkuI3nrqFcclxuICAgICAgICAgICAgY29uc3QgX3RlbXBJbmRleCA9IHRoaXMuX2dldEZpcnN0VW5SZXNwb25zZWRJbmRleCgpO1xyXG4gICAgICAgICAgICBpZiAoX3RlbXBJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDmiYDmnInnrKzkuIDlsYLkuIvmi4npg73lj47miphcclxuICAgICAgICAgICAgdGhpcy5kcFN0YXRlID0gW2ZhbHNlXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IF90ZW1wSW5kZXg7IGsgPCB0aGlzLnJlc2l6ZUdyb3Vwcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX3RlbXBHcm91cCA9IHRoaXMucmVzaXplR3JvdXBzW2tdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXV4aWxpYXJ5ID0gaztcclxuICAgICAgICAgICAgICAgIGlmIChfdGVtcEdyb3VwLmlzUmVzcG9uc2luZygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOi/mOacquW8gOWni+WkhOeQhuWTjeW6lOW8j1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF90ZW1wRFAgPSBuZXcgUmVzcG9uc2VUb29sYmFyRHJvcERvd24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBfdGVtcEdyb3VwLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBfdGVtcEdyb3VwLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHRoaXMucG9wRGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucG9wRGlyZWN0aW9uICsgXCItbGVmdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiYm90dG9tLWxlZnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF90ZW1wR3JvdXAuZ2V0V2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOW3sue7j+WkhOeQhui/h+WuveW6plxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGVtcERQLmdldFdpZHRoKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXhpbGlhcnlEYXRhcyA9IFtfdGVtcERQXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlKHRydWUsIF90ZW1wRFAuZ2V0V2lkdGgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5pu05paw6L6F5Yqp5pWw5o2uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV4aWxpYXJ5RGF0YXMucHVzaChfdGVtcERQKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5a+75om+5pyA5ZCO5LiA5Liq5aSE55CG5ZON5bqU5byP55qE5YWD57SgXHJcbiAgICAgICAgICAgIGNvbnN0IF90ZW1wSW5kZXggPSB0aGlzLl9nZXRMYXN0UmVzcG9uc2VJbmRleCgpO1xyXG4gICAgICAgICAgICBpZiAoX3RlbXBJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDkuLTml7blrZjlgqjmlbDmja5cclxuICAgICAgICAgICAgbGV0IF90ZW1wVG9vbGJhckRhdGFzID0gW10uY29uY2F0KHRoaXMudG9vbGJhckRhdGFzKTtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5bey57uP5byA5aeL5aSE55CG5ZON5bqU5byPXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSBfdGVtcEluZGV4OyBrID49IDA7IGstLSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcmVzdGl0dXRlKF90ZW1wVG9vbGJhckRhdGFzLCBrKTtcclxuICAgICAgICAgICAgICAgIF90ZW1wVG9vbGJhckRhdGFzID0gW10uY29uY2F0KHJlc3VsdFtcImRhdGFcIl0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbXCJjb250aW51ZVRvXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5pu05paw5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMudG9vbGJhckRhdGFzID0gW10uY29uY2F0KF90ZW1wVG9vbGJhckRhdGFzKTtcclxuICAgICAgICAgICAgLy8g5omA5pyJ56ys5LiA5bGC5LiL5ouJ6YO95Y+O5oqYXHJcbiAgICAgICAgICAgIHRoaXMuZHBTdGF0ZSA9IFtmYWxzZV07XHJcbiAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOS4i+aLieeahOWxleW8gOaUtui1t+eKtuaAgVxyXG4gICAgZHBTZWN0aW9uU3RhdGUoc3RhdGU6IGJvb2xlYW4sIGlkKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIC8vIOWxleW8gOeKtuaAgeS4i1xyXG4gICAgICAgICAgICBsZXQgZHJvcGRvd25zID0gdGhpcy5yZXNpemVkQ29udGVudEVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcclxuICAgICAgICAgICAgICAgIFwiW2ZEcm9wZG93bl1cIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoZHJvcGRvd25zICYmIGRyb3Bkb3ducy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGRyb3Bkb3ducy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25zW2tdLmNsYXNzTmFtZS5pbmRleE9mKFwic2hvd1wiKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bnNba10uaWQgIT0gaWRcclxuICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvcGRvd25zW2tdLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdzZWxmQ2xvc2UnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGF0aWJsZURpc3BhdGNoRXZlbnQoZHJvcGRvd25zW2tdLCBcInNlbGZDbG9zZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbXBhdGlibGVEaXNwYXRjaEV2ZW50KGV2ZW50RWwsIGV2ZW50TmFtZSkge1xyXG4gICAgICAgIHZhciBldmVudDtcclxuICAgICAgICBpZiAodHlwZW9mIEV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgZXZlbnQgPSBuZXcgRXZlbnQoZXZlbnROYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XHJcbiAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV2ZW50RWwuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICB9XHJcbiAgICAvLyDkv67mlLnlkK/nlKjnpoHnlKjnirbmgIFcclxuICAgIGNoYW5nZVN0YXRlKHZhbHVlcykge1xyXG4gICAgICAgIGNvbnN0IGlkQXJyYXkgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xyXG4gICAgICAgIGlkQXJyYXkuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdmFsdWVzW2lkXTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX2ZpbmRJdGVtQnlJRChpZCwgdGhpcy50b29sYmFyRGF0YXMpO1xyXG4gICAgICAgICAgICBpZihpdGVtKXtcclxuICAgICAgICAgICAgICAgICBpdGVtW1wiZGlzYWJsZWRcIl0gPSBzdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDkv67mlLnmmL7npLrnirbmgIFcclxuICAgICAqIOWmguaenOaYr+S4i+aLieaMiemSrlxyXG4gICAgICogICDliKTmlq3kuIvpnaLnmoTlrZDmmK/lkKbpg73pmpDol49cclxuICAgICAqIEBwYXJhbSB2YWx1ZXNcclxuICAgICAqL1xyXG4gICAgY2hhbmdlVmlzaWJsZSh2YWx1ZXMpIHtcclxuICAgICAgICBjb25zdCBpZEFycmF5ID0gT2JqZWN0LmtleXModmFsdWVzKTtcclxuICAgICAgICBpZEFycmF5LmZvckVhY2goaWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gdmFsdWVzW2lkXTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX2ZpbmRJdGVtQnlJRChpZCwgdGhpcy50b29sYmFyRGF0YXMpO1xyXG4gICAgICAgICAgICBpZihpdGVtKXtcclxuICAgICAgICAgICAgICAgIGl0ZW1bXCJ2aXNpYmxlXCJdID0gdmlzaWJsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOmBjeWOhuW+queOryzmm7TmlrDmlbDmja5cclxuICAgICAgICB0aGlzLnRvb2xiYXJEYXRhcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzmmK/kuIvmi4lcclxuICAgICAgICAgICAgaWYgKGl0ZW1bXCJpc0RQXCJdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0Ryb3Bkb3duVmlzaWJsZSh2YWx1ZXMsIGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5uZWVkUmVzcG9uc2VDaGFuZ2VzKys7XHJcbiAgICAgICAgLy8g5pu05pawXHJcbiAgICAgICAvL3RoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5aaC5p6c5piv5LiL5ouJ5oyJ6ZKuXHJcbiAgICAgKiAgIOWIpOaWreS4i+mdoueahOWtkOaYr+WQpumDvemakOiXj1xyXG4gICAgICogICAgICAgQS4g5aaC5p6c5a2Q6YO96ZqQ6JeP77yM6YKj5LmI5pW05Liq5LiL5ouJ6YO96KKr6ZqQ6JeP77ybXHJcbiAgICAgKiAgICAgICBCLiDlpoLmnpzlrZjlnKjlrZDmsqHmnInpmpDol4/vvIzogIzkuJTkuIvmi4nmsqHmnInooqvpooTnva7pmpDol4/vvIzkuIvmi4nmjInpkq7mmL7npLpcclxuICAgICAqIEBwYXJhbSBvdXRzaWRlVmlzaWJsZUFycmF5cyDku47nu4Tku7blpJbkvKDlhaXnmoTlj6/op4HnirbmgIHlr7nosaFcclxuICAgICAqIEBwYXJhbSBkcm9wZG93bkl0ZW0g5LiL5ouJ5YWD57SgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2NoZWNrRHJvcGRvd25WaXNpYmxlKG91dHNpZGVWaXNpYmxlQXJyYXlzLCBkcm9wZG93bkl0ZW0pOiB2b2lkIHtcclxuICAgICAgICAvL+WmguaenOayoeacieiiq+W8uuWItuiuvue9rueKtuaAgVxyXG4gICAgICAgIGlmICghb3V0c2lkZVZpc2libGVBcnJheXMuaGFzT3duUHJvcGVydHkoZHJvcGRvd25JdGVtW1wiaWRcIl0pKSB7XHJcbiAgICAgICAgICAgIC8vIOS4i+aLieWFg+e0oOS4jeWPr+inge+8jOWIpOaWreaYr+WQpuacieWPr+ingeWtkOWFg+e0oFxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAhZHJvcGRvd25JdGVtW1widmlzaWJsZVwiXSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5faGFzVmlzaWJsZUl0ZW0oZHJvcGRvd25JdGVtW1wiY2hpbGRyZW5cIl0sIHRydWUpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25JdGVtW1widmlzaWJsZVwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5LiL5ouJ5YWD57Sg5piv5Y+v6KeB77yM5Yik5pat5piv5ZCm5pyJ5a2Q5YWD57Sg6YO95LiN5Y+v6KeBXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duSXRlbVtcInZpc2libGVcIl0gJiZcclxuICAgICAgICAgICAgICAgICF0aGlzLl9oYXNWaXNpYmxlSXRlbShkcm9wZG93bkl0ZW1bXCJjaGlsZHJlblwiXSwgdHJ1ZSlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bkl0ZW1bXCJ2aXNpYmxlXCJdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZHJvcGRvd25JdGVtLmNoaWxkcmVuLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtW1wiaXNEUFwiXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEcm9wZG93blZpc2libGUob3V0c2lkZVZpc2libGVBcnJheXMsIGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWcqOW+heajgOafpeaVsOaNruS4reW/g++8jOajgOafpeaYr+WQpuWtmOWcqOivpeWPr+ingeeKtuaAgeeahOaVsOaNruOAglxyXG4gICAgICog5aaC5p6c5pyJ6L+U5ZuedHJ1ZSzlkKbliJnov5Tlm55mYWxzZVxyXG4gICAgICogQHBhcmFtIGRhdGFzIOW+heajgOafpeaVsOaNrlxyXG4gICAgICogQHBhcmFtIHZpc2libGUg5Y+v6KeB54q25oCBXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2hhc1Zpc2libGVJdGVtKGRhdGFzLCB2aXNpYmxlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZmluZEluZGV4ID0gZGF0YXMuZmluZEluZGV4KGNoaWxkSXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZEl0ZW1bXCJ2aXNpYmxlXCJdID09IHZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZmluZEluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaNleiOt+eCueWHu1xyXG4gICAgICogQHBhcmFtIGV2XHJcbiAgICAgKi9cclxuICAgIGNsaWNrSXRlbShldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIC8vIOWmguaenOaYr+WIhuemu+eahOS4i+aLieaMiemSrlxyXG4gICAgICAgIGlmICh0aGlzLmVsaGFzU3BlY2lhbENscyhldi50YXJnZXQsIFwiZHJvcGRvd24tdG9nZ2xlLXNwbGl0XCIpKSB7XHJcbiAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDliKTmlq3mmK/lkKbngrnlh7vliLDpnIDopoHlpITnkIbkuovku7bnmoTlhYPntKDkuIos5oyJ6ZKu44CB5LiL5ouJ5oyJ6ZKuXHJcbiAgICAgICAgdmFyIGNsaWNrRXZFbCA9IHRoaXMuZmluZEJ0bk9yVG9nZ2xlckl0ZW1Gcm9tQ2xpY2soZXYudGFyZ2V0KTtcclxuICAgICAgICBpZiAoY2xpY2tFdkVsKSB7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wSUQgPSBjbGlja0V2RWxbXCJpZFwiXTtcclxuICAgICAgICAgICAgLy8g5L+u5pS55qih5p2/77yMaWTosIPmlbTliLDkuIvmi4nmlbTkvZPkuIpcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgIXRlbXBJRCAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGhhc1NwZWNpYWxDbHMoY2xpY2tFdkVsW1wicGFyZW50Tm9kZVwiXSwgXCJmLXJ0LWRyb3Bkb3duXCIpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdGVtcElEID0gY2xpY2tFdkVsW1wicGFyZW50Tm9kZVwiXS5pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGVtcElEKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wSXRlbSA9IHRoaXMuX2ZpbmRJdGVtQnlJRCh0ZW1wSUQsIHRoaXMudG9vbGJhckRhdGFzKTtcclxuICAgICAgICAgICAgICAgIC8vIOWmguaenOWFg+e0oOemgeeUqFxyXG4gICAgICAgICAgICAgICAgaWYgKHRlbXBJdGVtW1wiZGlzYWJsZWRcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDnpoHmraLlkJHkuIrkvKDpgJJcclxuICAgICAgICAgICAgICAgICAgICBldi5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlja0l0ZW1zLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdGVtcElELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZW1wSXRlbVtcInRleHRcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogdGVtcEl0ZW1bXCJoaWRkZW5cIl1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgZmluZEJ0bk9yVG9nZ2xlckl0ZW1Gcm9tQ2xpY2soY2xpY2tUYXJnZXQpIHtcclxuICAgICAgICAvLyDniLbnuqfmoIfnrb7mmK/lkKbmmK9ib2R5LOaYr+edgOWBnOatoui/lOWbnumbhuWQiCzlj43kuYvnu6fnu61cclxuICAgICAgICBpZiAodGhpcy5lbGhhc1NwZWNpYWxDbHMoY2xpY2tUYXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjbGlja1RhcmdldDtcclxuICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICBjbGlja1RhcmdldC5wYXJlbnROb2RlLmhhc093blByb3BlcnR5KFwiY2xhc3NOYW1lXCIpICYmXHJcbiAgICAgICAgICAgIGNsaWNrVGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NOYW1lLmluZGV4T2YoXCJmLXJlc3BvbnNlLWNvbnRlbnRcIikgPCAwXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnROID0gY2xpY2tUYXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZWxoYXNTcGVjaWFsQ2xzKHBhcmVudE4pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50TjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmRCdG5PclRvZ2dsZXJJdGVtRnJvbUNsaWNrKHBhcmVudE4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOi/lOWbnumbhuWQiCznu5PmnZ9cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZWxoYXNTcGVjaWFsQ2xzKGVsLCBjbHNOYW1lID0gXCJcIikge1xyXG4gICAgICAgIGlmIChlbCkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lTGlzdCA9IGVsLmNsYXNzTGlzdDtcclxuICAgICAgICAgICAgdmFyIGZpbmRDbHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBjbGFzc05hbWVMaXN0Lmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWVMaXN0W2tdID09IGNsc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluZENscyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWVMaXN0W2tdID09IFwiZi1ydC1idG5cIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWVMaXN0W2tdID09IFwiZi1ydC10b2dnbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5kQ2xzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmaW5kQ2xzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOagueaNruS8oOmAkueahOaVsOaNrumHjeaWsOe7hOW7uuWIhue7hFxyXG4gICAgICogVG9EbyDmmoLml7bmsqHmnInmm7TlpI3mnYLnmoTliIbnu4TvvIzlkKbliJnpnIDopoHorrDlvZXliIbnu4RcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcmVPcmdhbml6ZVJlc2l6ZUdyb3VwcygpIHtcclxuICAgICAgICAvLyDlpITnkIbliIbnu4TmlbDmja5cclxuICAgICAgICAvLyAgaWYgKHRoaXMucmVzaXplR3JvdXBzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGxldCBtb3JlVGV4dCA9IFwi5pu05aSaXCI7XHJcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlU2VydmljZSkge1xyXG4gICAgICAgICAgICBtb3JlVGV4dCA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInJlc3BvbnNlVG9vbGJhci5tb3JlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkZWZhdWx0UmVzaXplR3JvdXAgPSBuZXcgUmVzcG9uc2VUb29sYmFyR3JvdXAoXHJcbiAgICAgICAgICAgIFwidG9vbGJhci1ncm91cC0xXCIsXHJcbiAgICAgICAgICAgIG1vcmVUZXh0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50b29sYmFyRGF0YXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgZGVmYXVsdFJlc2l6ZUdyb3VwLnNldFByZXNldCh0aGlzLnRvb2xiYXJEYXRhc1tpXVtcImlkXCJdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNpemVHcm91cHMgPSBbXS5jb25jYXQoZGVmYXVsdFJlc2l6ZUdyb3VwKTtcclxuICAgICAgIC8vIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWGheWuueS4juWuueWZqOeahOW3ruWAvFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9nZXREaXN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZWRDb250ZW50RWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCAtXHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplZENvbnRhaW5lckVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGhcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7ov5Tlm57nu5PmnpzliKTmlq3mmK/lkKbnu6fnu61cclxuICAgICAqIEBwYXJhbSBncm91cEluZGV4XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3Jlc3RpdHV0ZShvcmlnaW5hbERhdGEsIGdyb3VwSW5kZXgpIHtcclxuICAgICAgICBjb25zdCB0ZW1wR3JvdXAgPSB0aGlzLnJlc2l6ZUdyb3Vwc1tncm91cEluZGV4XTtcclxuICAgICAgICAvLyDmu5rliqjmnaHlkozlhoXlrrnnmoTot53nprtcclxuICAgICAgICBsZXQgdGVtcERpc3RhbmNlID0gdGhpcy5fZ2V0RGlzdGFuY2UoKTtcclxuICAgICAgICAvLyDorqHnrpfmnIDlkI7kuIDkuKrkuIvmi4nnmoTlrr3luqZcclxuICAgICAgICBjb25zdCB0ZW1wR3JvdXBEYXRhID1cclxuICAgICAgICAgICAgb3JpZ2luYWxEYXRhW3RoaXMuX2ZpbmRJbmRleEJ5SUQob3JpZ2luYWxEYXRhLCB0ZW1wR3JvdXAuaWQpXTtcclxuICAgICAgICAvLyDmib7liLDov5jljp/nmoTkvY3nva5cclxuICAgICAgICBjb25zdCB0ZW1wUHJlc2V0SW5kZXggPSBbXS5jb25jYXQodGVtcEdyb3VwLnJlc3BvbnNlZEluZGV4KTtcclxuICAgICAgICAvLyDmjpLpmaTljp/kuIvmi4nlrZDlhYPntKDooqvorqHnrpdcclxuICAgICAgICBmb3IgKGxldCBqID0gdGVtcFByZXNldEluZGV4Lmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgIGlmICh0ZW1wRGlzdGFuY2UgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5LuO5LiL5ouJ5Lit56e76ZmkXHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBDaGlsZERhdGEgPSB0ZW1wR3JvdXBEYXRhLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBzcGVjaWFsRGlzdGFuY2UgPSBqID09PSAwID8gdGVtcEdyb3VwRGF0YS5nZXRXaWR0aCgpIDogMDtcclxuXHJcbiAgICAgICAgICAgIHRlbXBEaXN0YW5jZSA9XHJcbiAgICAgICAgICAgICAgICB0ZW1wRGlzdGFuY2UgK1xyXG4gICAgICAgICAgICAgICAgKHRlbXBDaGlsZERhdGEuZ2V0V2lkdGgoKSA/IHRlbXBDaGlsZERhdGEuZ2V0V2lkdGgoKSA6IDApIC1cclxuICAgICAgICAgICAgICAgIHNwZWNpYWxEaXN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0ZW1wRGlzdGFuY2UgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmm7TmlrDkuIvmi4lcclxuICAgICAgICAgICAgICAgIHRlbXBHcm91cERhdGEucmVtb3ZlQ2hpbGQoKTtcclxuICAgICAgICAgICAgICAgIC8vIOaPkuWFpeWIsOWOn+S9jee9rlxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxEYXRhLnNwbGljZSh0ZW1wUHJlc2V0SW5kZXhbal0sIDAsIHRlbXBDaGlsZERhdGEpO1xyXG4gICAgICAgICAgICAgICAgLy8g5pu05paw5L2N572uXHJcbiAgICAgICAgICAgICAgICB0ZW1wR3JvdXAucmVtb3ZlUmVzcG9uc2VkKGopO1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbERhdGEuc3BsaWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5kSW5kZXhCeUlEKG9yaWdpbmFsRGF0YSwgdGVtcEdyb3VwLmlkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgMVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29udGludWVUbzogdGVtcERpc3RhbmNlID4gMCA/IHRydWUgOiBmYWxzZSxcclxuICAgICAgICAgICAgZGF0YTogb3JpZ2luYWxEYXRhXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8gOWni+iuoeeul1xyXG4gICAgICogQHBhcmFtIGRhdGFzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2NhbGN1bGF0ZShhdXhpbGlhcnk6IGJvb2xlYW4gPSBmYWxzZSwgdEdyb3VwV2lkdGg6IG51bWJlciA9IDApIHtcclxuICAgICAgICBpZiAodGhpcy5fYXV4aWxpYXJ5IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOiusOW9lemcgOimgeS/ruaUueeahOS4i+aLiVxyXG4gICAgICAgIGxldCB0ZW1wRFA7XHJcbiAgICAgICAgLy8g5rua5Yqo5p2h5ZKM5YaF5a6555qE6Led56a7XHJcbiAgICAgICAgbGV0IHRlbXBEaXN0YW5jZSA9IHRoaXMuX2dldERpc3RhbmNlKCkgKyB0R3JvdXBXaWR0aDtcclxuICAgICAgICAvLyDkuLTml7blrZjlgqjmlbDmja5cclxuICAgICAgICBjb25zdCB0ZW1wVG9vbGJhckRhdGFzID0gW10uY29uY2F0KHRoaXMudG9vbGJhckRhdGFzKTtcclxuICAgICAgICBjb25zdCB0ZW1wR3JvdXAgPSB0aGlzLnJlc2l6ZUdyb3Vwc1t0aGlzLl9hdXhpbGlhcnldO1xyXG4gICAgICAgIGlmIChhdXhpbGlhcnkpIHtcclxuICAgICAgICAgICAgdGVtcERQID0gdGhpcy5hdXhpbGlhcnlEYXRhcy5wb3AoKTtcclxuICAgICAgICAgICAgdGVtcERQLnNldFdpZHRoKHRHcm91cFdpZHRoKTtcclxuICAgICAgICAgICAgdGVtcEdyb3VwLnNldFdpZHRoKHRHcm91cFdpZHRoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0ZW1wRFAgPVxyXG4gICAgICAgICAgICAgICAgdGVtcFRvb2xiYXJEYXRhc1tcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5kSW5kZXhCeUlEKHRlbXBUb29sYmFyRGF0YXMsIHRlbXBHcm91cC5pZClcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOW9k+WJjeWJqeS9memakOiXj1xyXG4gICAgICAgIGZvciAoXHJcbiAgICAgICAgICAgIGxldCBqID0gdGVtcEdyb3VwLnJlc3BvbnNlZEluZGV4Lmxlbmd0aDtcclxuICAgICAgICAgICAgaiA8IHRlbXBHcm91cC5wcmVzZXRJZC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGorK1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZiAodGVtcERpc3RhbmNlIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDorqHnrpflnKjlvZPliY3mlbDmja7kuK3nmoTkvY3nva7vvIzmoLnmja7ov5nkuKrkvY3nva7lj6/ku6Xmib7lrr3luqZcclxuICAgICAgICAgICAgY29uc3QgdGVtcE9sZEluZGV4ID0gdGhpcy5fZmluZEluZGV4QnlJRChcclxuICAgICAgICAgICAgICAgIHRoaXMudG9vbGJhckRhdGFzLFxyXG4gICAgICAgICAgICAgICAgdGVtcEdyb3VwLnByZXNldElkW2pdXHJcbiAgICAgICAgICAgICkgYXMgYW55O1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wTmV3SW5kZXggPSB0aGlzLl9maW5kSW5kZXhCeUlEKFxyXG4gICAgICAgICAgICAgICAgdGVtcFRvb2xiYXJEYXRhcyxcclxuICAgICAgICAgICAgICAgIHRlbXBHcm91cC5wcmVzZXRJZFtqXVxyXG4gICAgICAgICAgICApIGFzIGFueTtcclxuXHJcbiAgICAgICAgICAgIC8vIOiuoeeul+aMiemSruWuveW6plxyXG4gICAgICAgICAgICBsZXQgdGVtcFdpZHRoID0gdGhpcy50b29sYmFyRGF0YXNbdGVtcE9sZEluZGV4XS5nZXRXaWR0aCgpIGFzIGFueTtcclxuICAgICAgICAgICAgaWYgKHRlbXBXaWR0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8g5oyJ6ZKu5a695bqm5pyq5pu+6KKr6K6h566X6L+HXHJcbiAgICAgICAgICAgICAgICB0ZW1wV2lkdGggPSB0aGlzLl9nZXRXaWR0aEZyb21FbGVtZW50c0J5SWQoXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcEdyb3VwLnByZXNldElkW2pdXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGVtcFRvb2xiYXJEYXRhc1t0ZW1wTmV3SW5kZXhdLnNldFdpZHRoKHRlbXBXaWR0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGVtcFdpZHRoID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgLy8g5oyJ6ZKu6KKr6ZqQ6JePXHJcbiAgICAgICAgICAgICAgICB0ZW1wV2lkdGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ZW1wRFAuYWRkQ2hpbGQodGVtcFRvb2xiYXJEYXRhc1t0ZW1wTmV3SW5kZXhdKTtcclxuICAgICAgICAgICAgLy8g56e76ZmkXHJcbiAgICAgICAgICAgIHRlbXBUb29sYmFyRGF0YXMuc3BsaWNlKHRlbXBOZXdJbmRleCwgMSk7XHJcbiAgICAgICAgICAgIC8vIOS/neWtmOS9jee9rueUqOS6jui/mOWOn1xyXG4gICAgICAgICAgICB0ZW1wR3JvdXAuc2V0UmVzcG9uc2VkKHRlbXBOZXdJbmRleCk7XHJcbiAgICAgICAgICAgIHRlbXBEaXN0YW5jZSA9IHRlbXBEaXN0YW5jZSAtIHRlbXBXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGF1eGlsaWFyeSAmJiB0ZW1wRFAuaGFzQ2hpbGQoKSkge1xyXG4gICAgICAgICAgICAvLyDmj5LlhaVcclxuICAgICAgICAgICAgdGVtcFRvb2xiYXJEYXRhcy5wdXNoKHRlbXBEUCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2F1eGlsaWFyeSA9IC0xO1xyXG4gICAgICAgIHRoaXMudG9vbGJhckRhdGFzID0gW10uY29uY2F0KHRlbXBUb29sYmFyRGF0YXMpO1xyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2uaWTmib7liLDlrp7pmYXmmL7npLrlhYPntKDnmoTlrr3luqZcclxuICAgICAqIEBwYXJhbSBmaW5kSWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfZ2V0V2lkdGhGcm9tRWxlbWVudHNCeUlkKGZpbmRJZCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50RWwgPSB0aGlzLnJlc2l6ZWRDb250ZW50RWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBjb25zdCBjaGlsZExlbiA9IHBhcmVudEVsLmNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNoaWxkTGVuOyBrKyspIHtcclxuICAgICAgICAgICAgaWYgKHBhcmVudEVsLmNoaWxkcmVuW2tdLmlkID09PSBmaW5kSWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcmVudEVsLmNoaWxkcmVuW2tdLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5qC85byP5YyW5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2Zvcm1hdERhdGEoZGF0YXMsIGlkUHJlZml4OiBzdHJpbmcgPSBcInJlc3BvbnNlXCIpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICBkYXRhcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5pc0RQKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzmmK/kuIvmi4lcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmhhc093blByb3BlcnR5KFwiY2hpbGRyZW5cIikgJiZcclxuICAgICAgICAgICAgICAgICAgICBpdGVtW1wiY2hpbGRyZW5cIl0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdLmNvbmNhdChpdGVtW1wiY2hpbGRyZW5cIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkcEl0ZW0gPSBuZXcgUmVzcG9uc2VUb29sYmFyRHJvcERvd24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oeyBpZDogaWRQcmVmaXggKyBcIl9cIiArIGluZGV4IH0sIGl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChkcEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRwSXRlbS5jaGlsZHJlbiA9IHRoaXMuX2Zvcm1hdERhdGEoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZFByZWZpeCArIFwiX1wiICsgaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlc3BvbnNlVG9vbGJhckRyb3BEb3duKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih7IGlkOiBpZFByZWZpeCArIFwiX1wiICsgaW5kZXggfSwgaXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDpnZ7kuIvmi4lcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSZXNwb25zZVRvb2xiYXJJdGVtKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHsgaWQ6IGlkUHJlZml4ICsgXCJfXCIgKyBpbmRleCB9LCBpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5om+5Yiw56ys5LiA5Liq5pyq5aSE55CG5a6M5ZON5bqU5byP55qE5YWD57SgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2dldEZpcnN0VW5SZXNwb25zZWRJbmRleCgpIHtcclxuICAgICAgICBjb25zdCB0ZW1wVW5SZXNwb25zZWRJbmRleCA9IHRoaXMucmVzaXplR3JvdXBzLmZpbmRJbmRleChncm91cCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChncm91cC5pc1Jlc3BvbnNlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBVblJlc3BvbnNlZEluZGV4O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlr7vmib7mnIDlkI7kuIDkuKrlpITnkIblk43lupTlvI/nmoTlhYPntKBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfZ2V0TGFzdFJlc3BvbnNlSW5kZXgoKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcFJlc3BvbnNpbmdJbmRleCA9IHRoaXMucmVzaXplR3JvdXBzLmZpbmRJbmRleChncm91cCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZ3JvdXAuaXNSZXNwb25zaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDmiYDmnInnu4TlhYPntKDpg73lt7LlpITnkIblrozlk43lupTlvI9cclxuICAgICAgICBpZiAodGVtcFJlc3BvbnNpbmdJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplR3JvdXBzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOaJgOaciee7hOWFg+e0oOmDveacquW8gOWni+WkhOeQhuWTjeW6lOW8j1xyXG4gICAgICAgIHJldHVybiB0ZW1wUmVzcG9uc2luZ0luZGV4ID4gMSA/IHRlbXBSZXNwb25zaW5nSW5kZXggLSAxIDogLTE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOaJvuWIsGdyb3Vw5b2i5oiQ55qE5LiL5ouJ77yM5Zyo5pWw5o2u5Lit55qE5L2N572uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2ZpbmRJbmRleEJ5SUQoXHJcbiAgICAgICAgZGF0YXM6IEFycmF5PFJlc3BvbnNlVG9vbGJhckl0ZW0gfCBSZXNwb25zZVRvb2xiYXJEcm9wRG93bj4sXHJcbiAgICAgICAgaWQ6IHN0cmluZ1xyXG4gICAgKTogYW55IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBkYXRhcy5maW5kSW5kZXgoKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtW1wiaWRcIl0gPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2uSUTlr7vmib5JdGVtXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2ZpbmRJdGVtQnlJRChcclxuICAgICAgICBpZDogc3RyaW5nLFxyXG4gICAgICAgIGRhdGE6IEFycmF5PFJlc3BvbnNlVG9vbGJhckRyb3BEb3duIHwgUmVzcG9uc2VUb29sYmFySXRlbT5cclxuICAgICk6IFJlc3BvbnNlVG9vbGJhckRyb3BEb3duIHwgUmVzcG9uc2VUb29sYmFySXRlbSB7XHJcbiAgICAgICAgbGV0IHRlbXBSZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IHRlbXBJbmRleCA9IGRhdGEuZmluZEluZGV4KChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbVtcImlkXCJdID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgdGVtcFJlc3VsdCA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDlpoLmnpzmmK/kuIvmi4nvvIzlsYLnuqfkuIvmi4lcclxuICAgICAgICAgICAgaWYgKGl0ZW1bXCJpc0RQXCJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wSXRlbSA9IHRoaXMuX2ZpbmRJdGVtQnlJRChpZCwgaXRlbVtcImNoaWxkcmVuXCJdKTtcclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBSZXN1bHQgPSB0ZW1wSXRlbTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBSZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuIl19