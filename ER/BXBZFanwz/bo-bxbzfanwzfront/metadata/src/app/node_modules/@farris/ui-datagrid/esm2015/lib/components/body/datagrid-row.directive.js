/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { delay, filter } from 'rxjs/operators';
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2019-08-12 07:47:12
* @LastEditors: 疯狂秀才(Lucas Huang)
* @LastEditTime: 2019-11-27 13:31:43
* @QQ: 1055818239
* @Version: v0.0.1
*/
import { Renderer2, Self, NgZone, ChangeDetectorRef, Optional, ContentChildren, QueryList } from '@angular/core';
import { Validators, FormBuilder, FormGroup } from '@angular/forms';
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, Injector, Inject, forwardRef } from '@angular/core';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DatagridRowHoverDirective } from './datagrid-row-hover.directive';
import { Utils } from '../../utils/utils';
import { DatagridBodyComponent } from './datagrid-body.component';
import { ALLOW_EDIT_CELL_HIGHLIGHT_CLS } from '../../types/constant';
export class DatagridRowDirective {
    /**
     * @param {?} dg
     * @param {?} injector
     * @param {?} fb
     * @param {?} el
     * @param {?} render
     * @param {?} drHover
     */
    constructor(dg, injector, fb, el, render, drHover) {
        this.dg = dg;
        this.injector = injector;
        this.fb = fb;
        this.el = el;
        this.render = render;
        this.drHover = drHover;
        this.editable = false;
        this.clickHandler = new EventEmitter();
        this.form = new FormGroup({});
        this.documentRowDblclickEvent = null;
        this.columnsChangedSubscription = null;
        this.datasourceChangedSubscription = null;
        this.subscriptions = [];
        this.dfs = this.injector.get(DatagridFacadeService);
        this.ngZone = this.injector.get(NgZone);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.dgb = this.injector.get(DatagridBodyComponent);
    }
    /**
     * @return {?}
     */
    get rowId() {
        if (this.rowData) {
            return this.dfs.primaryId(this.rowData);
        }
        return null;
    }
    /**
     * @return {?}
     */
    get disabled() {
        if (this.dg.disableRow) {
            return this.dg.disableRow(this.rowData, this.rowIndex);
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.datasourceChangedSubscription = this.dg.dgs.onDataSourceChange.subscribe((/**
         * @return {?}
         */
        () => {
            this.renderCustomStyle();
        }));
        this.columnsChangedSubscription = this.dg.dgs.columnsChanged.subscribe((/**
         * @return {?}
         */
        () => {
            this.createControl();
        }));
        /** @type {?} */
        const s$ = this.dg.dfs.rowUpdate$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            if (row && row.data) {
                // this.rowData = cloneDeep(row.data);
                if (this.dfs.primaryId(row.data) === this.rowId) {
                    this.renderCustomStyle(row.data);
                }
                // this.cd.detectChanges();
            }
        }));
        this.subscriptions.push(s$);
        /** @type {?} */
        const s1$ = this.dg.dgs.updateEmptyStyle$.subscribe((/**
         * @return {?}
         */
        () => {
            this.updateCellEmptyStyle();
        }));
        this.subscriptions.push(s1$);
        /** @type {?} */
        const s2$ = this.dg.dfs.selectRow$.pipe(filter((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            return r.id === this.rowId;
        }))).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.dg.selectedRow && !this.dg.selectedRow.dr) {
                /** @type {?} */
                const p = this.getRowPosition();
                if (p === 'left') {
                    this.dg.selectedRow.drl = this;
                }
                else if (p === 'right') {
                    this.dg.selectedRow.drr = this;
                }
                else {
                    this.dg.selectedRow.dr = this;
                }
            }
        }));
        this.subscriptions.push(s2$);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.columnsChangedSubscription) {
            this.columnsChangedSubscription.unsubscribe();
            this.columnsChangedSubscription = null;
        }
        if (this.datasourceChangedSubscription) {
            this.datasourceChangedSubscription.unsubscribe();
            this.datasourceChangedSubscription = null;
        }
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.unsubscribe()));
            this.subscriptions = [];
        }
        if (this.form) {
            this.form = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.updateCellEmptyStyle();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderCustomStyle();
        this.updateCellEmptyStyle();
    }
    /**
     * @private
     * @return {?}
     */
    getRowPosition() {
        /** @type {?} */
        const id = this.el.nativeElement.id;
        if (id.indexOf('fixedleft') > -1) {
            return 'left';
        }
        else if (id.indexOf('fixedright') > -1) {
            return 'right';
        }
        else {
            return 'center';
        }
    }
    /**
     * @param {?=} rowData
     * @return {?}
     */
    renderCustomStyle(rowData = null) {
        if (this.dg.rowStyler) {
            /** @type {?} */
            const _rd = rowData || this.rowData;
            /** @type {?} */
            const trStyle = this.dg.rowStyler(_rd, this.rowIndex);
            if (trStyle && Object.keys(trStyle).length) {
                this.dg.renderCustomStyle(trStyle, this.el.nativeElement);
            }
            else {
                this.dg.dgs.removeCssRule(`#${this.dg.id} #${this.el.nativeElement.id}`);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onRowClick(event) {
        if (event.target['className'] && event.target['className'].indexOf('checkbox-column') > -1) {
            return;
        }
        if (!this.dg.enableSelectRow) {
            return;
        }
        if (this.dg.disabled) {
            return;
        }
        if (this.dg.disableRow) {
            if (this.dg.disableRow(this.rowData, this.rowIndex)) {
                event.stopPropagation();
                return false;
            }
        }
        // if (!this.dg.editable) {
        //     event.stopPropagation();
        // }
        /** @type {?} */
        const rowId = this.dfs.primaryId(this.rowData);
        if (!rowId) {
            console.warn(`在第 ${this.rowIndex + 1} 行，主键字段[${this.dg.idField}]的值为 空，请检查相关数据。`);
        }
        /** @type {?} */
        const beforEventParam = {
            rowIndex: this.rowIndex,
            rowData: this.rowData,
            gridInstance: this.dg
        };
        if (!event.shiftKey) {
            this.dg.dgs.focusRowChanged.emit({
                rowIndex: this.rowIndex,
                rowData: this.rowData
            });
        }
        /** @type {?} */
        const useNewSelectionMode = this.dg.sms.beforRowClick(Object.assign({}, beforEventParam, { e: event, id: rowId, dr: this }));
        if (useNewSelectionMode) {
            return;
        }
        if (!this.dfs.isRowSelected(rowId)) {
            /** @type {?} */
            const canendedit = this.dg.endRowEdit();
            if (!canendedit || canendedit.canEnd) {
                this.dg.beforeSelect(beforEventParam).pipe(delay(100)).subscribe((/**
                 * @param {?} canSelect
                 * @return {?}
                 */
                (canSelect) => {
                    if (canSelect) {
                        this.dfs.selectRow(this.rowIndex, this.rowData);
                        if (this.dg.selectedRow) {
                            this.dg.selectedRow.dr = this;
                        }
                        /** @type {?} */
                        const trCLS = this.el.nativeElement.className;
                        if (trCLS.indexOf('f-datagrid-row-selected') === -1) {
                            this.el.nativeElement.className = trCLS + ' f-datagrid-row-selected';
                        }
                        // this.drHover.setRowHoverCls(false);
                        // this.dg.selectChanged.emit(this.dg.selectedRow);
                        this.clickHandler.emit();
                    }
                    this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                    this.dg.dgs.setSelecedRow.emit({ selected: true, id: this.dfs.primaryId(this.rowData) });
                }));
            }
        }
        else {
            if (this.dg.selectedRow && !this.dg.selectedRow.dr) {
                this.dg.selectedRow.dr = this;
            }
            if (!this.dg.keepSelect) {
                this.dg.beforeUnselect(beforEventParam).subscribe((/**
                 * @param {?} canUnselect
                 * @return {?}
                 */
                (canUnselect) => {
                    if (canUnselect) {
                        // this.dg.unSelect.emit(this.dg.selectedRow);
                        this.dfs.unSelectRow(this.rowIndex, this.rowData);
                        /** @type {?} */
                        const trCLS = this.el.nativeElement.className;
                        if (trCLS.indexOf('f-datagrid-row-selected') > -1) {
                            this.el.nativeElement.className = trCLS.replace('f-datagrid-row-selected', '');
                        }
                    }
                    this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                    this.dg.dgs.setSelecedRow.emit();
                }));
            }
            else {
                this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
            }
        }
    }
    /**
     * @return {?}
     */
    initFormControl() {
        this.form = this.fb.group({});
        this.createControl();
        this.form['bindingData'] = this.rowData;
    }
    /**
     * @return {?}
     */
    createControl() {
        if (this.dg && this.dg.flatColumns) {
            this.dg.flatColumns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                if (!col.editor && !col.editorTemplate) {
                    return;
                }
                if (!this.form.controls[col.field]) {
                    /** @type {?} */
                    const control = this.createFormControl(col);
                    this.form.addControl(col.field, control);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    createFormControl(col) {
        return this.fb.control(Utils.getValue(col.field, this.rowData), {
            validators: col.editor ? this.bindValidations(col.editor.validators) : null
        });
    }
    /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    bindValidations(validators) {
        /** @type {?} */
        const validations = [];
        if (validators && validators.length) {
            validators.forEach((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                /** @type {?} */
                let validation = null;
                switch (v.type) {
                    case 'required':
                        validation = Validators.required;
                        break;
                    case 'min':
                        validation = Validators.min(v.value);
                        break;
                    case 'max':
                        validation = Validators.max(v.value);
                        break;
                    case 'minLength':
                        validation = Validators.minLength(v.value);
                        break;
                    case 'maxLength':
                        validation = Validators.maxLength(v.value);
                        break;
                    case 'email':
                        validation = Validators.email;
                        break;
                    case 'requiredTrue':
                        validation = Validators.requiredTrue;
                        break;
                    case 'pattern':
                        validation = Validators.pattern(v.value);
                        break;
                }
                if (validation) {
                    validations.push(validation);
                }
                else {
                    if (this.dg.validators && this.dg.validators.length) {
                        /** @type {?} */
                        const vfn = this.dg.validators.find((/**
                         * @param {?} vr
                         * @return {?}
                         */
                        vr => vr.name === v.type));
                        if (vfn) {
                            validation = vfn.value(this.rowData);
                            validations.push(validation);
                        }
                    }
                }
            }));
        }
        return validations;
    }
    /**
     * @return {?}
     */
    refresh() {
        this.updateRowHeight();
        this.updateCellEmptyStyle();
    }
    /**
     * @return {?}
     */
    updateRowHeight() {
        if (!this.dg.nowrap) {
            /** @type {?} */
            const centerTr = this.dgb.mainArea.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
            centerTr.style.height = 'auto';
            /** @type {?} */
            const trHeight = centerTr.offsetHeight;
            /** @type {?} */
            let leftTrDom = null;
            /** @type {?} */
            let rightTrDom = null;
            /** @type {?} */
            const heightSizeList = [trHeight];
            if (this.dgb) {
                if (this.dgb.fixedLeftEl) {
                    leftTrDom = this.dgb.fixedLeftEl.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
                    if (leftTrDom) {
                        leftTrDom.style.height = 'auto';
                        heightSizeList.push(leftTrDom.offsetHeight);
                    }
                }
                if (this.dgb.fixedRightEl) {
                    rightTrDom = this.dgb.fixedRightEl.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
                    if (rightTrDom) {
                        rightTrDom.style.height = 'auto';
                        heightSizeList.push(rightTrDom.offsetHeight);
                    }
                }
                /** @type {?} */
                const maxHeight = Math.max(...heightSizeList);
                centerTr.style.height = `${maxHeight}px`;
                if (leftTrDom) {
                    leftTrDom.style.height = `${maxHeight}px`;
                }
                if (rightTrDom) {
                    rightTrDom.style.height = `${maxHeight}px`;
                }
                this.cd.markForCheck();
                this.dgb.updateCanvasHeight();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateCellEmptyStyle() {
        if (!this.dg.enableEditCellStyle) {
            return;
        }
        /** @type {?} */
        let rowIsDisabled = false;
        if (this.dg.disableRow) {
            rowIsDisabled = this.dg.disableRow(this.rowData, this.rowIndex);
        }
        /** @type {?} */
        const updateCellEmptyText = (/**
         * @param {?} cells
         * @return {?}
         */
        (cells) => {
            if (cells.length) {
                for (let k = 0; k < cells.length; k++) {
                    /** @type {?} */
                    const field = cells[k].getAttribute('field');
                    if (field) {
                        /** @type {?} */
                        const col = this.dfs.getColumn(field);
                        if (col) {
                            if (!col.editor) {
                                continue;
                            }
                            /** @type {?} */
                            const cls = col.align === 'right' ? 'allow-edit-cell-left' : 'allow-edit-cell';
                            /** @type {?} */
                            const emptyicon_cls = ALLOW_EDIT_CELL_HIGHLIGHT_CLS[col.editor.type];
                            /** @type {?} */
                            const span = cells[k].querySelector('.cell-text-box');
                            /** @type {?} */
                            const colVal = Utils.getValue(field, this.rowData);
                            /** @type {?} */
                            const fmtVal = this.dg.colFormatSer.format(colVal, this.rowData, col.formatter);
                            if (!this.dg.editable || rowIsDisabled || this.dg.cellIsReadOnly(col, this.rowData)) {
                                cells[k].className = cells[k].className.replace(cls, '');
                                cells[k].className = cells[k].className.replace(emptyicon_cls, '');
                                if (span) {
                                    if (span.className.indexOf('cell-empty') > -1) {
                                        span.className = span.className.replace('cell-empty', '');
                                    }
                                    if (colVal === '' || colVal === null || colVal === undefined) {
                                        span.innerHTML = '';
                                    }
                                    else {
                                        span.innerHTML = fmtVal;
                                    }
                                }
                            }
                            else {
                                if (span) {
                                    if (colVal === '' || colVal === null || colVal === undefined) {
                                        if (span.className.indexOf('cell-empty') === -1) {
                                            span.className = span.className + ' cell-empty';
                                        }
                                        span.innerHTML = Utils.getWhenEmptyText(col, this.dg.localeService.localeId);
                                    }
                                    else {
                                        span.innerHTML = fmtVal;
                                    }
                                }
                                if (cells[k].className.indexOf('cell-readonly') > -1) {
                                    cells[k].className = cells[k].className.replace('cell-readonly', '');
                                }
                                if (cells[k].className.indexOf(cls) === -1) {
                                    this.render.addClass(cells[k], cls);
                                }
                                if (cells[k].className.indexOf(emptyicon_cls) === -1) {
                                    this.render.addClass(cells[k], emptyicon_cls);
                                }
                            }
                        }
                    }
                }
            }
        });
        // if (this.dgb.fixedLeftEl) {
        //     const leftTrDom = this.dgb.fixedLeftEl.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
        //     if (leftTrDom) {
        //         updateCellEmptyText(leftTrDom.querySelectorAll('td[field]'));
        //     }
        // }
        /** @type {?} */
        const cells = this.el.nativeElement.querySelectorAll('td[field]:not([field="_datagrid-setting-control_"])');
        updateCellEmptyText(cells);
    }
}
DatagridRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[grid-row]',
                exportAs: 'gridRow'
            },] }
];
/** @nocollapse */
DatagridRowDirective.ctorParameters = () => [
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] },
    { type: Injector },
    { type: FormBuilder },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DatagridRowHoverDirective, decorators: [{ type: Optional }, { type: Self }] }
];
DatagridRowDirective.propDecorators = {
    editable: [{ type: Input }],
    rowData: [{ type: Input, args: ['grid-row',] }],
    rowIndex: [{ type: Input }],
    clickHandler: [{ type: Output }],
    cells: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => DatagridCellComponent)), { descendants: true },] }],
    onRowClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DatagridRowDirective.prototype.editable;
    /** @type {?} */
    DatagridRowDirective.prototype.rowData;
    /** @type {?} */
    DatagridRowDirective.prototype.rowIndex;
    /** @type {?} */
    DatagridRowDirective.prototype.clickHandler;
    /** @type {?} */
    DatagridRowDirective.prototype.cells;
    /** @type {?} */
    DatagridRowDirective.prototype.form;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.documentRowDblclickEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.dgb;
    /** @type {?} */
    DatagridRowDirective.prototype.cd;
    /** @type {?} */
    DatagridRowDirective.prototype.columnsChangedSubscription;
    /** @type {?} */
    DatagridRowDirective.prototype.datasourceChangedSubscription;
    /** @type {?} */
    DatagridRowDirective.prototype.subscriptions;
    /** @type {?} */
    DatagridRowDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.fb;
    /** @type {?} */
    DatagridRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.render;
    /** @type {?} */
    DatagridRowDirective.prototype.drHover;
}
//# sourceMappingURL=data:application/json;base64,