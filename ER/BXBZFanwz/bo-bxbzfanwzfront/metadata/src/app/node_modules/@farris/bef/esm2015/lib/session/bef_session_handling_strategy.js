/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2018-10-11 20:32:02
 * @Last Modified by: Witt
 * @Last Modified time: 2020-03-03 16:46:39
 */
import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HttpHeaderUtil } from '../utils/index';
import { HttpService } from '../http_service';
import { AppContext } from '@farris/devkit';
/**
 * BefSession处理策略类
 * @abstract
 */
class BefSessionHandlingStrategy {
    /**
     * 框架SessionId（用户的或者功能菜单的）
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getFrmSessionId(runtimeContext) {
        return this.frmSessionService.getCurrentSessionId(runtimeContext);
    }
    /**
     * @protected
     * @return {?}
     */
    get frmSessionId() {
        return this.frmSessionService.getCurrentSessionId();
    }
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     */
    constructor(storageStrategy, frmSessionService) {
        this.storageStrategy = storageStrategy;
        this.frmSessionService = frmSessionService;
    }
    /**
     * 获取框架SessionId
     * @param {?=} runtimeContext
     * @return {?}
     */
    getFrameworkSessionId(runtimeContext) {
        return this.getFrmSessionId(runtimeContext);
    }
    /**
     * 从缓存中获取BeSession
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getSessionIdFromStorage(runtimeContext) {
        /** @type {?} */
        const sessionStorageKey = this.getSessionStorageKey(runtimeContext);
        /** @type {?} */
        const beSessionId = this.storageStrategy.getItem(sessionStorageKey);
        return beSessionId;
    }
}
if (false) {
    /**
     * 存储策略
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.storageStrategy;
    /**
     * 框架Session服务
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.frmSessionService;
    /**
     * 获取SessionId
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionId = function () { };
    /**
     * @abstract
     * @param {?} sessionId
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.setSessionId = function (sessionId) { };
    /**
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.clearSessionId = function () { };
    /**
     * @abstract
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.extendRequestHeaders = function (headers, runtimeContext) { };
    /**
     * @abstract
     * @param {?} headers
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.handleReponseHeaders = function (headers) { };
    /**
     * @abstract
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionStorageKey = function (runtimeContext) { };
}
/**
 * 隔离的BeSession处理策略（此策略必须保证injector为null的情况下正常影讯性）
 * \@summary
 * ----------------------------------------
 * 处理原则：
 * 1、通过createSession创建；
 * 2、每个Repository拥有独立的BeSession；
 * 3、访问BE的EAPI时，通过header里的SessionId传递；
 * ----------------------------------------
 * 兼容性考虑：
 * 1、有产品部直接new BeSessionService()，没有传递
 */
class BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     * @param {?} httpClient
     * @param {?} beBaseUri
     * @param {?} injector
     */
    constructor(storageStrategy, frmSessionService, httpClient, beBaseUri, injector) {
        super(storageStrategy, frmSessionService);
        this.beSessionUri = beBaseUri;
        this.httpClient = httpClient;
        this.httpService = new HttpService(this.httpClient);
        this.injector = injector;
    }
    /**
     * 获取BeSessionId
     * @return {?}
     */
    getSessionId() {
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            return of(beSessionId);
        }
        return this.createSession();
    }
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    }
    /**
     * 清空Sessionid
     * @return {?}
     */
    clearSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        // this.storageStrategy.removeItem(sessionKey);
        this.storageStrategy.clear(this.frmSessionId, sessionKey);
    }
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendRequestHeaders(headers, runtimeContext) {
        /** @type {?} */
        const frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage(runtimeContext);
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = HttpHeaderUtil.appendSessionId(headers, beSessionId);
        }
        // const appContext = this.injector.get<AppContext>(AppContext, null);
        //if (appContext) {
        // const appId = appContext.ApplicationId;
        headers = HttpHeaderUtil.appendFuncInstId(headers, this.beSessionUri);
        // }
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        return headers;
    }
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    handleReponseHeaders(headers) {
        console.log(headers);
    }
    /**
     * 创建BeSessionId
     * @return {?}
     */
    createSession() {
        /** @type {?} */
        const params = {
            responseType: 'text'
        };
        if (!!this.frmSessionId) {
            /** @type {?} */
            const appContext = this.injector.get(AppContext, null);
            params.headers = new HttpHeaders({ SessionId: this.frmSessionId });
            params.headers = params.headers.append('X-CAF-Runtime-CommonVariable', this.frmSessionId);
            //if (appContext) {
            // const appId = appContext.ApplicationId;
            params.headers = params.headers.append('Func-Inst-Id', this.beSessionUri);
            //}
            params.headers = HttpHeaderUtil.toJson(params.headers);
        }
        return this.httpService.request('POST', this.beSessionUri, params).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        (beSessionId) => {
            this.setSessionId(beSessionId);
        })));
    }
    /**
     * @return {?}
     */
    extendHttpHeader() {
    }
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * 1、在使用独立BeSession的组合表单中，需要通过BeSessionUri隔离；
     * 2、在Debug模式下，FrmSessionId=UserSessionid，如果只用它作key，
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getSessionStorageKey(runtimeContext) {
        /** @type {?} */
        let sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return `${sessionId}_${this.beSessionUri}`;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.injector;
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.beSessionUri;
    /**
     * httpClient
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    BefSeparatedSessionHandlingStrategy.prototype.httpService;
}
class BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     * @param {?} beBaseUri
     * @param {?} injector
     */
    constructor(storageStrategy, frmSessionService, beBaseUri, injector) {
        super(storageStrategy, frmSessionService);
        this.beSessionUri = beBaseUri;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    getSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        const sessionId = this.storageStrategy.getItem(sessionKey);
        return of(sessionId);
        // return of(null);
    }
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    }
    /**
     * 清空Sessionid
     * @return {?}
     */
    clearSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.removeItem(sessionKey);
    }
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendRequestHeaders(headers, runtimeContext) {
        /** @type {?} */
        const frmSessionId = this.getFrameworkSessionId(runtimeContext);
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage(runtimeContext);
        // headers = HttpHeaderUtil.appendRequireMessage(headers, true);
        /** @type {?} */
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            /** @type {?} */
            const token = appContext.Token;
            headers = HttpHeaderUtil.appendFuncInstId(headers, token);
        }
        headers = HttpHeaderUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        if (beSessionId) {
            headers = HttpHeaderUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    }
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    handleReponseHeaders(headers) {
        console.log(headers);
    }
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * \@summary
     * @protected
     * @param {?=} runtimeContext
     * @return {?}
     */
    getSessionStorageKey(runtimeContext) {
        // const isDebug = false;
        // if (isDebug) {
        //   return `${this.frmSessionId}_${this.beSessionUri}`;
        // } else {
        //   return this.frmSessionId;
        // }
        /** @type {?} */
        let sessionId = null;
        if (runtimeContext) {
            sessionId = this.getFrameworkSessionId(runtimeContext);
        }
        else {
            sessionId = this.frmSessionId;
        }
        return `${sessionId}_${this.beSessionUri}`;
    }
}
if (false) {
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @private
     */
    BefUnifiedSessionHandlingStrategy.prototype.beSessionUri;
    /**
     * @type {?}
     * @private
     */
    BefUnifiedSessionHandlingStrategy.prototype.injector;
}
export { BefSessionHandlingStrategy, BefSeparatedSessionHandlingStrategy, BefUnifiedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,