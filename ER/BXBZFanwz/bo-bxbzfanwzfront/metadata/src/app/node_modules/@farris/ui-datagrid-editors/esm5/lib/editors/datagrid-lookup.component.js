/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injector } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:00:48
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { LookupDefaultOptions } from '../editor-default-options';
import { LookupGridComponent } from '@farris/ui-lookup';
import { RuntimeStateService } from '@farris/ui-common';
var DatagridLookupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridLookupComponent, _super);
    function DatagridLookupComponent(render, el, rts, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.stopPropagation = false;
        _this.extInfoFormatter = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.options.extInfoFormatter) {
                return _this.options.extInfoFormatter({ bindingData: _this.dr.rowData, instance: e.instance });
            }
            return '';
        });
        _this.rts.state$.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (state && state.form && state.form.lookup) {
                _this.pending = state.form.lookup.pending;
                _this.dg.pending = _this.pending;
            }
        }));
        return _this;
    }
    Object.defineProperty(DatagridLookupComponent.prototype, "controlId", {
        set: /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this.instance.controlId = id;
            if (this.instance.uri) {
                this.instance.controlId += '_' + this.instance.uri;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, LookupDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.instance.changeDetector.detectChanges();
        this.inputElement = this.instance.inputGroup.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        if (this.options.loader) {
            this.instance['http'] = { getData: this.options.loader };
        }
        this.instance['host'] = this.dg;
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.onDialogClosed = /**
     * @return {?}
     */
    function () {
        // this.lookup.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.onDialogOpen = /**
     * @return {?}
     */
    function () {
        this.instance.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.onLoadSuccess = /**
     * @return {?}
     */
    function () {
        this.instance.changeDetector.detectChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridLookupComponent.prototype.onClear = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // const rowData = this.instance.selectionMgr.getBindingData();
        // this.instance['defaultMapping'].lookupFieldMap(null, this.instance.mapFields, rowData);
        this.instance.changeDetector.detectChanges();
        if (this.options.clear) {
            this.options.clear();
        }
    };
    DatagridLookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-lookup',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <farris-lookup-grid #lookup style=\"width: 100%\"\n                id=\"{{ controlId }}\"\n                [formControlName]=\"column.field\"\n                [uri]=\"options.uri\"\n                [helpId]=\"options.helpId\"\n                [displayType]=\"options.displayType\"\n                [singleSelect]=\"options.singleSelect\"\n                [idField]=\"options.idField\"\n                [pageSize]=\"options.pageSize || 20\"\n                [pageIndex]=\"options.pageSize || 1\"\n                [pagination]=\"options.pageination\"\n                [textField]=\"options.textField\"\n                [valueField]=\"options.valueField\"\n                [title]=\"options.title\"\n                [useFavorite]=\"options.useFavorite\"\n                [isRecordSize]=\"options.isRecordSize\"\n                [useTip]=\"options.useTip\"\n                [editable]=\"options.editable\"\n                [readonly]=\"options.readonly\"\n                [dialogWidth]=\"options.dialogWidth\"\n                [dialogHeight]=\"options.dialogHeight\"\n                [showMaxButton]=\"options.showMaxButton\"\n                [showCloseButton]=\"options.showCloseButton\"\n                [resizable]=\"options.resizable\"\n                [buttonAlign]=\"options.buttonAlign\"\n                [enableClear]=\"options.enableClear\"\n                [searchOnServer]=\"options.searchOnServer\"\n                [nosearch]=\"options.nosearch\"\n                [maxLength]=\"options.maxLength\"\n                [mappingFn]=\"options.mappingFn\"\n                [mapFields]=\"options.mapFields\"\n                [context]=\"options.context\"\n                [expandLevel]=\"options.expandLevel\"\n                [dictPicking]=\"options.dictPicking\"\n                [dictPicked]=\"options.dictPicked\"\n                [enableFullTree]=\"options.enableFullTree\"\n                [loadTreeDataType]=\"options.loadTreeDataType\"\n                [enableCascade]=\"options.enableCascade\"\n                [cascadeStatus]=\"options.cascadeStatus\"\n                [useExtendInfo]=\"options.useExtendInfo\"\n                [extInfoFields]=\"options.extInfoFields\"\n                [extInfoFormatter]=\"options.extInfoFormatter\"\n                [textAlign]=\"options.textAlign\"\n                [loadDataWhenOpen]=\"options.loadDataWhenOpen\"\n                [selectFirstInNav]=\"options.selectFirstInNav\"\n                [customNavFormatter]=\"options.customNavFormatter\"\n                [customFormatter]=\"options.customFormatter\"\n                [treeInfo]=\"options?.treeInfo\"\n                (dialogClosed)=\"onDialogClosed()\"\n                (dialogOpened)=\"onDialogOpen()\"\n                (clear)=\"onClear($event)\"\n                (loadSuccess)=\"onLoadSuccess()\"\n            ></farris-lookup-grid>\n        </datagrid-tooltip>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridLookupComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: Injector }
    ]; };
    DatagridLookupComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['lookup',] }]
    };
    return DatagridLookupComponent;
}(DatagridBaseEditorDirective));
export { DatagridLookupComponent };
if (false) {
    /** @type {?} */
    DatagridLookupComponent.prototype.instance;
    /** @type {?} */
    DatagridLookupComponent.prototype.stopPropagation;
    /** @type {?} */
    DatagridLookupComponent.prototype.extInfoFormatter;
    /**
     * @type {?}
     * @private
     */
    DatagridLookupComponent.prototype.rts;
}
//# sourceMappingURL=data:application/json;base64,