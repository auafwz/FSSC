/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 13:53:03
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-01 15:02:29
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, Optional, ElementRef, Renderer2, EventEmitter, Directive, HostListener, Injector } from '@angular/core';
import { convertColumns } from '../datatable-column';
import { DataTableService } from '../datatable.service';
import { DataTableComponent } from '../datatable.component';
import { ColumnFormatService } from '@farris/ui-common/column';
import { CommonUtils } from '@farris/ui-common';
var DTDblClickRowDirective = /** @class */ (function () {
    function DTDblClickRowDirective(el, dt) {
        this.el = el;
        this.dt = dt;
    }
    /**
     * @return {?}
     */
    DTDblClickRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    DTDblClickRowDirective.prototype.ondblclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.row) {
            this.dt.rowDblClick.emit(this.row);
        }
        event.stopPropagation();
    };
    DTDblClickRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dblclick]'
                },] }
    ];
    /** @nocollapse */
    DTDblClickRowDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataTableComponent, decorators: [{ type: Optional }] }
    ]; };
    DTDblClickRowDirective.propDecorators = {
        row: [{ type: Input, args: ['dblclick',] }],
        ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
    };
    return DTDblClickRowDirective;
}());
export { DTDblClickRowDirective };
if (false) {
    /** @type {?} */
    DTDblClickRowDirective.prototype.row;
    /** @type {?} */
    DTDblClickRowDirective.prototype.el;
    /** @type {?} */
    DTDblClickRowDirective.prototype.dt;
}
var DataTableBodyComponent = /** @class */ (function () {
    function DataTableBodyComponent(el, dataService, render, dt, colFormatSer, utils, injector) {
        this.el = el;
        this.dataService = dataService;
        this.render = render;
        this.dt = dt;
        this.colFormatSer = colFormatSer;
        this.utils = utils;
        this.injector = injector;
        this.rows = [];
        this.rowDblClick = new EventEmitter();
        this.selectRow = new EventEmitter();
        this.cellEdit = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.lastRowIndex = 0;
        this.lastColumnIndex = 0;
        this.edit = {};
        this.className = {};
        this.isRowTempl = false;
        this.selectedRowIndex = -1;
        this._selections = {};
        this.emptyMessage = '暂无数据';
        this.localeService = this.injector.get(LocaleService);
    }
    Object.defineProperty(DataTableBodyComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this._selections) {
                return;
            }
            /** @type {?} */
            var keys = Object.keys(this._selections);
            if (keys.length) {
                if (this.dt.singleSelect) {
                    return this._selections;
                }
                else {
                    return keys.map((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) { return _this._selections[k]; }));
                }
            }
            return undefined;
        },
        // 已选择的行 默认为空
        set: 
        // 已选择的行 默认为空
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._selections = v || {};
            this.dt.updateCheckboxState(this.rows);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataTableBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dataService.selectedAll.subscribe((/**
         * @param {?} allChecked
         * @return {?}
         */
        function (allChecked) {
            /** @type {?} */
            var idfield = _this.idField();
            _this.rows.forEach((/**
             * @param {?} row
             * @return {?}
             */
            function (row) {
                if (allChecked) {
                    _this._selections[row[idfield]] = row;
                }
                else {
                    delete _this._selections[row[idfield]];
                }
            }));
        }));
        if (this.rows) {
            this.isRowTempl = this.rows.some((/**
             * @param {?} row
             * @return {?}
             */
            function (row) {
                return row.hasOwnProperty('rowTempl');
            }));
        }
        if (this.fixed === 'left') {
            this.columns = convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = convertColumns(this.columns, 'right');
        }
        this.emptyMessage = this.localeService.getValue('datagrid.emptyMessage');
    };
    /**
     * @return {?}
     */
    DataTableBodyComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._rows = this.el.nativeElement.querySelectorAll('tr');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DataTableBodyComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.rows && !changes.rows.isFirstChange()) {
            if (!this.dt.singleSelect) {
                /** @type {?} */
                var checkedRows = changes.rows.currentValue.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return _this.isSelected(n) ? 1 : 0;
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                if (!changes.rows.currentValue.length) {
                    this.dataService.updateCheckAllStatus.next(0);
                    return;
                }
                if (checkedRows.length === changes.rows.currentValue.length) {
                    this.dataService.updateCheckAllStatus.next(1);
                }
                else {
                    if (checkedRows.length === 0) {
                        this.dataService.updateCheckAllStatus.next(0);
                    }
                    else {
                        this.dataService.updateCheckAllStatus.next(2);
                    }
                }
            }
        }
    };
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     */
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    DataTableBodyComponent.prototype.getValue = /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        if (field.indexOf('.') === -1) {
            return data[field];
        }
        else {
            return (field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                return obj[key];
            }), data) || '');
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    DataTableBodyComponent.prototype.selectedRow = /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    function (event, index, data) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        var isSelected = false;
        /** @type {?} */
        var idfield = this.idField();
        if (this.dt.singleSelect) {
            if (this.selectedRowIndex !== index || !this._selections || this._selections[idfield] !== data[idfield]) {
                this.selectedRowIndex = index;
                this._selections = data;
                isSelected = true;
                this.dataService.selectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
            else {
                if (!this.dt.keepSelect) {
                    this.selectedRowIndex = -1;
                    this._selections = undefined;
                    isSelected = false;
                    this.dataService.unSelectedRow.next({
                        rowIndex: index,
                        rowData: data
                    });
                }
                else {
                    isSelected = true;
                }
            }
        }
        else {
            if (this.isSelected(data)) {
                delete this._selections[data[idfield]];
                isSelected = false;
                this.dataService.unSelectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
            else {
                this._selections[data[this.idField()]] = data;
                isSelected = true;
                this.dataService.selectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
        }
        if (isSelected) {
            this.dt.selectedRow.emit({ data: data, index: index });
            // 兼容
            this.dt.selectRows.emit({ data: data, index: index });
        }
        else {
            this.dt.unSelectRow.emit({ data: data, index: index });
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    DataTableBodyComponent.prototype.onChecked = /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    function (event, index, data) {
        /** @type {?} */
        var state = event.checked;
        /** @type {?} */
        var idfield = this.dt.idField;
        if (state) {
            this._selections[data[idfield]] = data;
            this.dataService.selectedRow.next({
                rowIndex: index,
                rowData: data
            });
            this.dt.selectedRow.emit({ data: data, index: index });
            // 兼容
            this.dt.selectRows.emit({ data: data, index: index });
        }
        else {
            delete this._selections[data[idfield]];
            this.dataService.unSelectedRow.next({
                rowIndex: index,
                rowData: data
            });
            this.dt.unSelectRow.emit({ data: data, index: index });
        }
        event.originalEvent.stopPropagation();
    };
    /**
     * @private
     * @return {?}
     */
    DataTableBodyComponent.prototype.idField = /**
     * @private
     * @return {?}
     */
    function () {
        return this.dt.idField;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DataTableBodyComponent.prototype.isSelected = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var idfield = this.idField();
        if (this._selections) {
            if (this.dt.singleSelect) {
                return this._selections[idfield] === row[idfield];
            }
            else {
                return this._selections[row[idfield]] !== undefined;
            }
        }
        return false;
    };
    /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    DataTableBodyComponent.prototype.formatData = /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    function (field, data, formatter) {
        /** @type {?} */
        var value = this.utils.getValue(field, data, true);
        return this.colFormatSer.format(value, data, formatter);
    };
    // 添加自定义设置列 单元格类样式
    // 添加自定义设置列 单元格类样式
    /**
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    DataTableBodyComponent.prototype.getTdClassName = 
    // 添加自定义设置列 单元格类样式
    /**
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    function (value, col) {
        /** @type {?} */
        var tempClassName = {};
        // 列类的样式
        if (col.className &&
            Object.prototype.toString.call(col.className) === '[object String]') {
            tempClassName[col.className] = true;
        }
        if (this.cellClassName && this.cellClassName(value, col)) {
            tempClassName[this.cellClassName(value, col)] = true;
        }
        return tempClassName;
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    DataTableBodyComponent.prototype.createRowClassName = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    };
    /**
     * @param {?} event
     * @param {?} col
     * @param {?} row
     * @return {?}
     */
    DataTableBodyComponent.prototype.onCellClick = /**
     * @param {?} event
     * @param {?} col
     * @param {?} row
     * @return {?}
     */
    function (event, col, row) {
        this.cellClick.emit({ event: event, col: col, row: row });
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    DataTableBodyComponent.prototype.renderRowStyle = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        if (this.dt.rowStyler) {
            return this.dt.rowStyler({ data: row, index: index });
        }
        return '';
    };
    /**
     * @param {?} val
     * @param {?} row
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    DataTableBodyComponent.prototype.renderCellStyle = /**
     * @param {?} val
     * @param {?} row
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    function (val, row, index, col) {
        if (this.dt.cellStyler) {
            return this.dt.cellStyler({ value: val, data: row, index: index, col: col, field: col.field });
        }
        return '';
    };
    DataTableBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datatable-body',
                    template: "\n        <table\n            class=\"table\"\n            [class.table-sm]=\"size === 'small'\"\n            [class.table-hover]=\"dt.hover\"\n            [class.table-striped]=\"striped\"\n            [class.table-bordered]=\"bordered\"\n            [class.f-table-norecords]=\"!rows || !rows.length\"\n        >\n            <colgroup>\n                <col class=\"dt-checkbox-cell\" *ngIf=\"!dt.singleSelect\" />\n                <col\n                    *ngFor=\"let col of columns\"\n                    [style.width]=\"col.width + 'px'\"\n                />\n            </colgroup>\n\n            <tbody class=\"ui-table-tbody\" *ngIf=\"rows && rows.length\">\n                <tr\n                    *ngFor=\"let row of rows; trackBy: dt.trackByRows; let rowIndex = index\"\n                    [ngClass]=\"createRowClassName(row, rowIndex)\"\n                    (click)=\"selectedRow($event, rowIndex, row)\"\n                    [class.selected]=\"isSelected(row)\"\n                    [dblclick]=\"row\"\n                    [ngStyle]=\"renderRowStyle(row, rowIndex)\"\n                >\n                    <td class=\"dt-checkbox-cell\" *ngIf=\"!dt.singleSelect\">\n                        <dt-checkbox\n                            [checked]=\"isSelected(row)\"\n                            (checkedChange)=\"onChecked($event, rowIndex, row)\"\n                        ></dt-checkbox>\n                    </td>\n                    <td\n                        [ngClass]=\"getTdClassName(row[col.field], col)\"\n                        *ngFor=\"let col of columns; let colIndex = index\"\n                        [style.textAlign]=\"col.align || 'left'\"\n                        [ngStyle]=\"renderCellStyle(utils.getValue(col.field, row), row, rowIndex, col)\"\n                        (click)=\"onCellClick($event, col, row)\"\n                    >\n                        <ng-container *ngIf=\"!col.cellTempl; else cellTemp\">\n                            <span *ngIf=\"col.formatter\" [innerHTML]=\"formatData(col.field, row, col.formatter) | safe:'html'\" ></span>\n                            <span *ngIf=\"!col.formatter\" [title]=\"utils.getValue(col.field, row)\"\n                             [innerHTML]=\"utils.getValue(col.field, row, true)\"></span>\n                        </ng-container>\n                        <ng-template\n                            #cellTemp\n                            [ngTemplateOutlet]=\"col.cellTempl\"\n                            [ngTemplateOutletContext]=\"{\n                                $implicit: row,\n                                rowIndex: rowIndex,\n                                value: row[col.field]\n                            }\"\n                        ></ng-template>\n                    </td>\n                </tr>\n            </tbody>\n\n            <tbody class=\"ui-table-tbody\" *ngIf=\"!rows || !rows.length\">\n                <tr class=\"f-table-norecords-row\">\n                    <td [attr.align]=\"'center'\"\n                        class=\"farris-treetable-emptydata\"\n                        [attr.colspan]=\"columns.length\"\n                    >\n                        <div\n                            class=\"f-table-norecords-content\"\n                            [innerHTML]=\"emptyMessage | safe: 'html'\"\n                        ></div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    ",
                    styles: ["\n            .table td:focus-within {\n                box-shadow: inset 0 0 0 2px rgba(0, 0, 0, 0.13);\n            }\n            .table td div {\n                width: 100%;\n                height: 100%;\n            }\n            .table td input {\n                width: 100%;\n                height: 100%;\n                font-family: auto;\n                line-height: 1;\n                font-size: 13px;\n            }\n            .table td input:focus {\n                border: 0;\n            }\n            input[type='checkbox']:focus {\n                outline: none;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    DataTableBodyComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataTableService },
        { type: Renderer2 },
        { type: DataTableComponent, decorators: [{ type: Optional }] },
        { type: ColumnFormatService },
        { type: CommonUtils },
        { type: Injector }
    ]; };
    DataTableBodyComponent.propDecorators = {
        size: [{ type: Input }],
        hover: [{ type: Input }],
        bordered: [{ type: Input }],
        striped: [{ type: Input }],
        columns: [{ type: Input }],
        fixed: [{ type: Input }],
        rows: [{ type: Input }],
        rowClassName: [{ type: Input }],
        cellClassName: [{ type: Input }],
        rowDblClick: [{ type: Output }],
        selectRow: [{ type: Output }],
        cellEdit: [{ type: Output }],
        cellClick: [{ type: Output }]
    };
    return DataTableBodyComponent;
}());
export { DataTableBodyComponent };
if (false) {
    /** @type {?} */
    DataTableBodyComponent.prototype.size;
    /** @type {?} */
    DataTableBodyComponent.prototype.hover;
    /** @type {?} */
    DataTableBodyComponent.prototype.bordered;
    /** @type {?} */
    DataTableBodyComponent.prototype.striped;
    /** @type {?} */
    DataTableBodyComponent.prototype.columns;
    /** @type {?} */
    DataTableBodyComponent.prototype.fixed;
    /** @type {?} */
    DataTableBodyComponent.prototype.rows;
    /** @type {?} */
    DataTableBodyComponent.prototype.rowClassName;
    /** @type {?} */
    DataTableBodyComponent.prototype.cellClassName;
    /** @type {?} */
    DataTableBodyComponent.prototype.rowDblClick;
    /** @type {?} */
    DataTableBodyComponent.prototype.selectRow;
    /** @type {?} */
    DataTableBodyComponent.prototype.cellEdit;
    /** @type {?} */
    DataTableBodyComponent.prototype.cellClick;
    /** @type {?} */
    DataTableBodyComponent.prototype.lastRowIndex;
    /** @type {?} */
    DataTableBodyComponent.prototype.lastColumnIndex;
    /** @type {?} */
    DataTableBodyComponent.prototype.boxShadow;
    /** @type {?} */
    DataTableBodyComponent.prototype._rows;
    /** @type {?} */
    DataTableBodyComponent.prototype.edit;
    /** @type {?} */
    DataTableBodyComponent.prototype.className;
    /** @type {?} */
    DataTableBodyComponent.prototype.isRowTempl;
    /** @type {?} */
    DataTableBodyComponent.prototype.selectedRowIndex;
    /** @type {?} */
    DataTableBodyComponent.prototype._selections;
    /** @type {?} */
    DataTableBodyComponent.prototype.emptyMessage;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.localeService;
    /** @type {?} */
    DataTableBodyComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.render;
    /** @type {?} */
    DataTableBodyComponent.prototype.dt;
    /** @type {?} */
    DataTableBodyComponent.prototype.colFormatSer;
    /** @type {?} */
    DataTableBodyComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,