/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NotifyService } from '@farris/ui-notify';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { Component, Input, EventEmitter, Output, ViewChild, forwardRef, ElementRef, HostListener, HostBinding, Injector, ViewContainerRef, ComponentFactoryResolver, Renderer2, ApplicationRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { FarrisDatePickerDirective } from './farris-datepicker.input';
import { DefaultView, ShowType, CalToggle } from './enums/public-api';
import { UtilService, DefaultConfigService, DatepickerLocaleService, DatePickerService } from './services/public-api';
import { LocaleService } from '@farris/ui-locale';
import { isValid, parse } from 'date-fns';
import { CalendarComponent } from './components/calendar/calendar.component';
import { CLICK, EMPTY_STR } from './constants/constants';
/** @type {?} */
var FARRIS_DP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return FarrisDatepickerComponent; })),
    multi: true
};
var FarrisDatepickerComponent = /** @class */ (function () {
    function FarrisDatepickerComponent(el, utilService, defaultConfigService, injector) {
        this.el = el;
        this.utilService = utilService;
        this.defaultConfigService = defaultConfigService;
        this.injector = injector;
        this.cls = 'f-cmp-datepicker f-cmp-inputgroup';
        // 是否禁用该组件
        this.disabled = false;
        // 是否只读
        this.readonly = false;
        // 是否只能选择数据，不可键入
        this.editable = true;
        // 是否使用日期范围输入模式
        this.dateRange = false;
        // 是否使用时间输入框
        this.showTime = false;
        // 显示类型
        this.showType = ShowType.all;
        // 本地语言
        this.locale = 'zh-cn';
        // 是否使用默认值
        this.useDefault = false;
        this.returnType = 'String';
        // placeholder
        this.placeholder = '';
        this.beginPlaceholder = '';
        this.endPlaceholder = '';
        /**
         * 输入值变化后关闭选择面板。 默认为 true
         */
        this.whenValueChangedThenCloseSelectorPanel = true;
        // 需要高亮显示的日期
        this.highlightDates = [];
        // 禁用区域的日期开始时间
        this.disableDateRangesBegin = {
            year: 0,
            month: 0,
            day: 0
        };
        // 禁用区域的日期结束时间
        this.disableDateRangesEnd = {
            year: 0,
            month: 0,
            day: 0
        };
        // 禁用的日期
        this.disableDates = [];
        // 一周中被禁用的日子
        this.disableWeekdays = [];
        // 被标记的日期
        this.markDates = [];
        // 被标记的日期的显示颜色
        this.markDatesColor = '#59a1ff';
        // 是否显示第几周
        this.showWeekNumbers = false;
        // 是否标记周末
        this.isMarkWeekends = false;
        // 被标记周末的显示颜色
        this.markWeekendsColor = '#59a1ff';
        // 日期范围模式下input的显示分割符合
        this.dateRangeDatesDelimiter = '~';
        // 配置左侧 sidebar 快捷键
        this.shortcuts = [];
        // 日期范围选择时，默认结束月份为当前月份 + monthRangeValue
        this.monthRangeValue = 1;
        // clear 事件
        this.clear = new EventEmitter();
        // valueChanged 事件
        this.valueChange = new EventEmitter();
        // focus 事件
        this.focus = new EventEmitter();
        // blur 事件
        this.blur = new EventEmitter();
        // beginValueChange
        this.beginValueChange = new EventEmitter();
        // endValueChange
        this.endValueChange = new EventEmitter();
        // PrevFocus dateRange 第一个日期
        this.PrevFocus = new EventEmitter();
        // NextFocus dateRange 第二个日期
        this.NextFocus = new EventEmitter();
        // close 事件
        this.close = new EventEmitter();
        this.cRef = null;
        this._timeFormat = '';
        this._value = '';
        this._beginValue = '';
        this._endValue = '';
        this._initFinished = false;
        this._minDate = {
            year: 1840,
            month: 1,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0
        };
        this._maxDate = {
            year: 10000,
            month: 1,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0
        };
        this.dateOpts = {};
        // 开始输入控件聚焦
        this.beginFocus = false;
        // 结束输入控件聚焦
        this.endFocus = false;
        // 整体聚焦
        this.totalFocus = false;
        // 是否字符超长显示Tip
        this.isActiveTip = false;
        this._realValue = null;
        this._realRangeValue = null;
        this.formatedValue = '';
        this.dtService = null;
        this._updateOn = 'change';
        // 日期选择后设置为 true， blur 事件将不会重复执行valueChanged；
        // 键盘修改时，blur 事件中会执行一次 valueChanged 后，将此值设为 false;
        this._valueChangeEmitted = false;
        this._mousedownEvent = null;
        this.closeCalendarHandler = null;
        this.cdr = null;
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { });
        this.onModelTouched = (/**
         * @return {?}
         */
        function () { });
        this.defaultConfig = this.defaultConfigService.getDefaultConfig();
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService);
            this.dtService = this.injector.get(DateTimeHelperService);
            this.notifySer = this.injector.get(NotifyService, null);
            if (this.notifySer) {
                this.notifySer.config.position = 'top-center';
            }
        }
        this.localeConfig = new DatepickerLocaleService();
        this.vcRef = this.injector.get(ViewContainerRef, null);
        this.cfr = this.injector.get(ComponentFactoryResolver, null);
        this.renderer = this.injector.get(Renderer2, null);
        this._applicationRef = this.injector.get(ApplicationRef);
        this.cdr = this.injector.get(ChangeDetectorRef);
        // this.datePicekrService = this.injector.get(DatePickerService, null)
    }
    Object.defineProperty(FarrisDatepickerComponent.prototype, "dateFormat", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateFormat;
        },
        // 日期格式
        set: 
        // 日期格式
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value) {
                // value 格式形如 yyyy-MM-dd HH:mm:ss
                // const formArr = 'yyyy-MM-dd HH:mm:ss'.split(' ');
                value = value.replace(/^\s+|\s+$/g, ''); // 去掉左右空格
                value = value.replace(/\s+/g, ' '); // 将中间的多个连续空格，替换为1个空格
                // 将中间的多个连续空格，替换为1个空格
                /** @type {?} */
                var formArr = value.split(' ');
                this._dateFormat = formArr[0];
                // 处理'yyyy-MM-dd h:mm:ss a'即12小时显示的情况
                if (formArr.length === 3) {
                    this._timeFormat = 'h:mm:ss a';
                }
                else {
                    this._timeFormat = formArr[1];
                }
            }
            // this._dateFormat = this._dateFormat ? (this._dateFormat + '').replace(/m/g, 'M') : '';
            if (this._dateFormat) {
                /** @type {?} */
                var mm = ['yyyy-mm', 'yyyy/mm', 'yyyy年mm', 'mm/yyyy'];
                /** @type {?} */
                var _mm = mm.find((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) { return _this._dateFormat.includes(m); }));
                if (_mm) {
                    this._dateFormat = this._dateFormat.replace(_mm, _mm.replace(/m/g, 'M'));
                }
                if (this._timeFormat && this.showTime) {
                    this._dateFormat += ' ' + this._timeFormat;
                    if (this._timeFormat.indexOf('时') > -1) {
                        this._timeFormat = this._timeFormat.replace('时', ':').replace('分', ':').replace('秒', '');
                    }
                }
            }
            // this.dateOpts.dateFormat = this._dateFormat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisDatepickerComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        // 最小日期
        // 加入接收时分秒功能
        set: 
        // 最小日期
        // 加入接收时分秒功能
        /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var type = Object.prototype.toString.call(val);
            /** @type {?} */
            var date;
            switch (type) {
                case '[object Date]':
                    date = val;
                    break;
                case '[object String]':
                    if (val) {
                        date = new Date(val);
                    }
                    else {
                        date = new Date(1840, 1, 1, 0, 0, 0);
                    }
                    break;
                case '[object Null]':
                    date = new Date(1840, 1, 1, 0, 0, 0);
                    break;
                // case null:
                //     date = new Date(1840, 1, 1, 0, 0, 0);
                //     break;
                case '[object Undefined]':
                    date = new Date(1840, 1, 1, 0, 0, 0);
                    break;
                default:
                    date = new Date(1840, 1, 1, 0, 0, 0);
                    break;
            }
            if (isValid(date)) {
                /** @type {?} */
                var year = date.getFullYear();
                /** @type {?} */
                var month = date.getMonth() + 1;
                /** @type {?} */
                var day = date.getDate();
                /** @type {?} */
                var hour = date.getHours();
                /** @type {?} */
                var minute = date.getMinutes();
                /** @type {?} */
                var second = date.getSeconds();
                this._minDate = { year: year, month: month, day: day, hour: hour, minute: minute, second: second };
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisDatepickerComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        // 最大日期
        // 加入接收时分秒功能
        set: 
        // 最大日期
        // 加入接收时分秒功能
        /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var type = Object.prototype.toString.call(val);
            /** @type {?} */
            var date;
            switch (type) {
                case '[object Date]':
                    date = val;
                    break;
                case '[object String]':
                    if (val) {
                        date = new Date(val);
                    }
                    else {
                        date = new Date(10000, 1, 1, 0, 0, 0);
                    }
                    break;
                case '[object Null]':
                    date = new Date(10000, 1, 1, 0, 0, 0);
                    break;
                // case null:
                //     date = new Date(10000, 1, 1, 0, 0, 0);
                //     break;
                case '[object Undefined]':
                    date = new Date(10000, 1, 1, 0, 0, 0);
                    break;
                default:
                    date = new Date(10000, 1, 1, 0, 0, 0);
                    break;
            }
            if (isValid(date)) {
                /** @type {?} */
                var year = date.getFullYear();
                /** @type {?} */
                var month = date.getMonth() + 1;
                /** @type {?} */
                var day = date.getDate();
                /** @type {?} */
                var hour = date.getHours();
                /** @type {?} */
                var minute = date.getMinutes();
                /** @type {?} */
                var second = date.getSeconds();
                this._maxDate = { year: year, month: month, day: day, hour: hour, minute: minute, second: second };
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisDatepickerComponent.prototype, "beginValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dateFrom(this._beginValue, true);
        },
        // 日期范围：开始日期
        set: 
        // 日期范围：开始日期
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : '';
            if (value instanceof Date) {
                value = this.dateTo(value);
                this.returnType = 'Date';
            }
            else {
                if (value.indexOf('T') > -1) {
                    value = value.replace('T', ' ');
                }
                this.returnType = 'String';
            }
            this._beginValue = value;
            if (this._initFinished) {
                this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisDatepickerComponent.prototype, "endValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dateFrom(this._endValue, true);
        },
        // 日期范围：结束日期
        set: 
        // 日期范围：结束日期
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : '';
            if (value instanceof Date) {
                value = this.dateTo(value);
                this.returnType = 'Date';
            }
            else {
                if (value.indexOf('T') > -1) {
                    value = value.replace('T', ' ');
                }
                this.returnType = 'String';
            }
            this._endValue = value;
            if (this._initFinished) {
                this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisDatepickerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._value = v ? v : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._ngControl = this.injector.get(NgControl, null);
        this.initPlaceholder();
        this.mergeDateOptions();
        if (this._beginValue && this._endValue) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
        this._initFinished = true;
        this.datePicekrService = new DatePickerService(this.dateOpts);
    };
    /**
     * @private
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.initPlaceholder = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.localeService) {
            this.locale = this.localeService.getValue('locale');
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
            this.placeholder = this.placeholder
                ? this.placeholder
                : this.localDateOpts.placeholder
                    ? this.localDateOpts.placeholder
                    : '请选择日期';
            if (!this.beginPlaceholder) {
                this.beginPlaceholder = this.localDateOpts.range.begin || this.placeholder;
            }
            if (!this.endPlaceholder) {
                this.endPlaceholder = this.localDateOpts.range.end || this.placeholder;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.mergeDateOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateOpts = tslib_1.__assign({}, this.defaultConfig, this.buildOptions());
        if (this.dateOpts.dateFormat) {
            if (!this._dateFormat) {
                this.dateFormat = this.dateOpts.dateFormat;
                this.dateOpts.dateFormat = this.dateFormat;
            }
        }
        if (this.dateOpts.returnFormat) {
            if (!this.returnFormat) {
                this.returnFormat = this.dateOpts.returnFormat;
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.locale && changes.locale.isFirstChange()) {
            // this.dp.setLocaleOptions();
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
        }
        if (changes) {
            /** @type {?} */
            var flag_1 = false;
            /** @type {?} */
            var inputs_1 = ['showTime', 'showType', 'dateRange', 'maxDate', 'minDate', 'monthRangeValue'];
            Object.keys(changes).forEach((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!changes[e].isFirstChange() && (_this.dateOpts[e] || inputs_1.includes(e))) {
                    // this[e] = changes[e].currentValue;
                    flag_1 = true;
                }
            }));
            if (flag_1) {
                this.dateOpts = tslib_1.__assign({}, this.defaultConfig, this.buildOptions());
            }
        }
        if (changes.readonly &&
            !changes.readonly.currentValue &&
            !changes.readonly.firstChange &&
            !this.value &&
            this.useDefault) {
            this.setDefaultValue();
        }
    };
    /**
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this._timer = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setDefaultValue();
        }));
    };
    /**
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        clearTimeout(this._timer);
        this.closeSelector();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.value && !this.readonly && !this.disabled) {
            if (this.value) {
                this.clearIcon.nativeElement.style.visibility = '';
            }
            if (this.dateOpts.dateRange) {
                if (this.dateOpts.showTime) {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 300;
                }
                else {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 190;
                }
            }
            else {
                if (this.dateOpts.showTime) {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 170;
                }
                else {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 120;
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.readonly && !this.disabled) {
            this.clearIcon.nativeElement.style.visibility = 'hidden';
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onBlur = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.totalFocus = false;
        /** @type {?} */
        var _runblur = true;
        if (this.value) {
            try {
                this.value = this.transform(this.value);
                /** @type {?} */
                var valid = this._isValid(this.value);
                if (!valid) {
                    this.clearDate();
                    _runblur = false;
                }
            }
            catch (e) {
                this.clearDate();
                _runblur = false;
            }
        }
        /** @type {?} */
        var updateModel = (/**
         * @return {?}
         */
        function () {
            if (!_this._valueChangeEmitted) {
                _this.onNgModelChange(_this.value, null, true);
                _this.onModelTouched();
            }
        });
        if (this.editable && _runblur) {
            if (this['inDatagrid']) {
                updateModel();
            }
            else {
                setTimeout(updateModel, 250);
            }
        }
        this._valueChangeEmitted = false;
        this._mousedownEvent();
        this._mousedownEvent = null;
        this.blur.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onFocus = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.totalFocus = true;
        this.registerMouseDownHandle();
        this.focus.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onInputClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.readonly && !this.disabled) {
            this.registerMouseDownHandle();
            this.toggleCalendar(false);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.registerMouseDownHandle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._mousedownEvent) {
            this._mousedownEvent = this.renderer.listen(document, 'mousedown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target.closest('.f-cmp-datepicker') ||
                    e.target.closest('.f-datepicker-container') || e.target.className.indexOf('f-icon-date') > -1) {
                    if (_this.dateInput) {
                        _this.renderer.setStyle(_this.dateInput.nativeElement, 'unselectable', 'on');
                    }
                    e.preventDefault();
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.setDefaultValue = /**
     * @return {?}
     */
    function () {
        if (!this.readonly && !this.value && this.useDefault) {
            /** @type {?} */
            var now = new Date();
            /** @type {?} */
            var nowValue = '';
            if (!this.dateOpts.dateRange) {
                nowValue = this.dateTo(now);
            }
            else {
                nowValue =
                    this.dateTo(now) +
                        this.dateRangeDatesDelimiter +
                        this.dateTo(new Date(now.setMonth(now.getMonth() + 1)));
            }
            if (this.datePicekrService.validate(nowValue)) {
                this.value = nowValue;
                this.onNgModelChange(this.value);
                this.onModelTouched();
            }
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.clearDate = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event === void 0) { $event = null; }
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.disabled) {
            this._realRangeValue = null;
            this._realValue = null;
            this.onDateChanged({
                isRange: this.dateOpts.dateRange,
                singleDate: {
                    date: this.utilService.resetDate(),
                    jsDate: null,
                    formatted: EMPTY_STR,
                    epoc: 0
                },
                dateRange: {
                    beginDate: this.utilService.resetDate(),
                    beginJsDate: null,
                    beginEpoc: 0,
                    endDate: this.utilService.resetDate(),
                    endJsDate: null,
                    endEpoc: 0,
                    formatted: EMPTY_STR
                }
            });
            this.closeSelector(CalToggle.CloseByCalBtn);
            this.onModelChange(null);
            this.clear.emit();
            if (this.clearIcon) {
                this.clearIcon.nativeElement.style.visibility = 'hidden';
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onSingleInputNgModelChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.value = $event || '';
        this._realValue = this.value ? this.dateFrom($event) : '';
        this.closeSelector();
    };
    /**
     * @param {?} value
     * @param {?=} realdate
     * @param {?=} emitValueChange
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onNgModelChange = /**
     * @param {?} value
     * @param {?=} realdate
     * @param {?=} emitValueChange
     * @return {?}
     */
    function (value, realdate, emitValueChange) {
        if (realdate === void 0) { realdate = null; }
        if (emitValueChange === void 0) { emitValueChange = false; }
        // this.value = value;
        if (this.dateRange || this.showType == ShowType.selectWeek) {
            /** @type {?} */
            var tmpArr = value ? value.split(this.dateRangeDatesDelimiter) : ['', ''];
            /** @type {?} */
            var _beginValue = this.transform(tmpArr[0], this.returnFormat);
            /** @type {?} */
            var _endValue = this.transform(tmpArr[1], this.returnFormat);
            this._beginValue = this.transform(tmpArr[0]);
            this._endValue = this.transform(tmpArr[1]);
            value = _beginValue && _endValue ? _beginValue + this.dateRangeDatesDelimiter + _endValue : '';
            this._realRangeValue = value;
            this.onModelChange(value);
            this.cdr.detectChanges();
            this.beginValueChange.emit(this._beginValue);
            this.endValueChange.emit(this._endValue);
            /** @type {?} */
            var p = {
                date: null,
                formatted: this.value,
                returnFormatted: this._realRangeValue,
                cmpRef: this
            };
            this.valueChange.emit(p);
        }
        else {
            if (value === '') {
                this.value = '';
                this._onModelChange(null, emitValueChange);
                return;
            }
            if (realdate) {
                this._realValue = this.getRealReturnFormatted(realdate);
                this._onModelChange(this._realValue, emitValueChange);
                if (this.dateInput && this.dateInput.nativeElement.value !== this.value) {
                    this.renderer.setProperty(this.dateInput.nativeElement, 'value', this.value);
                }
            }
            else {
                if (this._isValid(value)) {
                    this._realValue = this.getRealReturnFormatted(realdate);
                    if (this.dateInput) {
                        this.renderer.setProperty(this.dateInput.nativeElement, 'value', this.value);
                    }
                    this._onModelChange(this._realValue, emitValueChange);
                }
            }
        }
    };
    /**
     * @private
     * @param {?} realValue
     * @param {?} emit
     * @return {?}
     */
    FarrisDatepickerComponent.prototype._onModelChange = /**
     * @private
     * @param {?} realValue
     * @param {?} emit
     * @return {?}
     */
    function (realValue, emit) {
        this._realValue = realValue;
        this.onModelChange(realValue);
        if (emit) {
            /** @type {?} */
            var p = {
                date: this.utilService.isDateValid(this.value, this.dateOpts, true),
                formatted: this.value,
                returnFormatted: realValue,
                cmpRef: this
            };
            if (this.valueChange.observers.length) {
                if (this.whenValueChangedThenCloseSelectorPanel) {
                    this.closeSelector();
                }
                this.valueChange.emit(p);
            }
        }
    };
    /**
     * @private
     * @param {?} realdate
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.getRealReturnFormatted = /**
     * @private
     * @param {?} realdate
     * @return {?}
     */
    function (realdate) {
        if (realdate) {
            if (this.returnType === 'Date') {
                return realdate;
            }
            else {
                if (this.returnFormat) {
                    return this.dtService.formatTo(realdate, this.returnFormat);
                }
                return realdate;
            }
        }
        else {
            return this.dateFrom(this._realValue || this.value) || '';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onDateRangeInputBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        this.onNgModelChange(this._realRangeValue || this.value);
    };
    /**
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.openCalendar = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        var val = this._realValue;
        if (this.dateRange) {
            val = this._realRangeValue;
        }
        else {
            if (this.returnType === 'Date') {
                val = this.transform(val, this.returnFormat);
            }
        }
        if (this.cRef === null) {
            this.cRef = this.calendarRef.createComponent(this.cfr.resolveComponentFactory(CalendarComponent));
            this.datePicekrService.appendSelector(this.cRef.location.nativeElement);
            this.datePicekrService.registerScrollEvent((/**
             * @return {?}
             */
            function () {
                _this.closeSelector();
            }));
            this.cRef.instance.initialize(this.dateOpts, '', this.datePicekrService.getSelectorPosition(this.el.nativeElement, this.cRef), val, (/**
             * @param {?} dm
             * @param {?} close
             * @return {?}
             */
            function (dm, close) {
                if (_this.dateOpts.dateRange && _this.showTime && dm.dateRange.endJsDate < dm.dateRange.beginJsDate) {
                    // const { year: beginYear, month: beginMonth,  day: beginDay  } = {...dm.dateRange.beginDate};
                    // const { year: endYear, month: endMonth,  day: endDay  } = {...dm.dateRange.endDate};
                    // error message:  The end time must not be earlier than the start time
                    // error message:  結束時間不得早于開始時間
                    /** @type {?} */
                    var msg = _this.localDateOpts.message['101'];
                    if (_this.notifySer) {
                        _this.notifySer.warning(msg);
                    }
                    else {
                        alert(msg);
                    }
                    return;
                }
                _this.onDateChanged(dm);
                if (close) {
                    _this.closeSelector(CalToggle.CloseByDateSel);
                }
            }), (/**
             * @param {?} cvc
             * @return {?}
             */
            function (cvc) {
                // this.emitCalendarChanged(cvc);
            }), (/**
             * @param {?} rds
             * @return {?}
             */
            function (rds) {
                // this.emitRangeDateSelection(rds);
            }), (/**
             * @return {?}
             */
            function () {
                _this.closeSelector(CalToggle.CloseByEsc);
            }));
            // this.cdr.detectChanges();
        }
        else {
            this.datePicekrService.appendSelector(this.cRef.location.nativeElement);
        }
        this.cRef.changeDetectorRef.detectChanges();
        // this.preventClose = false;
    };
    /**
     * @param {?=} reason
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.closeSelector = /**
     * @param {?=} reason
     * @return {?}
     */
    function (reason) {
        if (this.cRef !== null) {
            this.calendarRef.remove(this.calendarRef.indexOf(this.cRef.hostView));
            this.cRef = null;
            // this.cdr.detectChanges();
            /** @type {?} */
            var container = document.querySelector('.date-overlay-container');
            if (container.childElementCount) {
                container.remove();
            }
            this.renderer.setStyle(container, 'pointer-events', '');
        }
        this.totalFocus = false;
        if (this.dateOpts.dateRange) {
            this.beginFocus = false;
            this.endFocus = false;
        }
        if (this.closeCalendarHandler) {
            this.closeCalendarHandler();
            this.closeCalendarHandler = null;
        }
        if (this.datePicekrService) {
            this.datePicekrService.removeMouseEvent();
        }
    };
    /**
     * @param {?} close
     * @param {?=} emit
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.toggleCalendar = /**
     * @param {?} close
     * @param {?=} emit
     * @return {?}
     */
    function (close, emit) {
        var _this = this;
        if (emit === void 0) { emit = true; }
        if (this.disabled) {
            this.totalFocus = false;
            if (this.dateOpts.dateRange) {
                this.beginFocus = false;
                this.endFocus = false;
            }
            return;
        }
        if (this.cRef === null) {
            if (!this.closeCalendarHandler) {
                this.closeCalendarHandler = this.renderer.listen(document, CLICK, (/**
                 * @return {?}
                 */
                function () { return _this.closeSelector(CalToggle.CloseByOutClick); }));
            }
            this.totalFocus = true;
            this.openCalendar();
            /** @type {?} */
            var container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', 'auto');
        }
        else {
            /** @type {?} */
            var flag_2 = true;
            /** @type {?} */
            var container = document.querySelector('.date-overlay-container');
            if (container && this.cRef.location) {
                if (container.hasChildNodes()) {
                    container.childNodes.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    function (el) {
                        if (el === _this.cRef.location.nativeElement) {
                            flag_2 = false;
                        }
                    }));
                }
            }
            if (flag_2) {
                this.renderer.setStyle(container, 'pointer-events', 'auto');
                this.totalFocus = true;
                this.openCalendar();
            }
            else {
                this.totalFocus = false;
                if (this.dateOpts.dateRange) {
                    this.beginFocus = false;
                    this.endFocus = false;
                }
                // document.removeEventListener(CLICK, this.onClickHidden);
                close && this.closeSelector(CalToggle.CloseByCalBtn);
                // this.renderer.setStyle(container, 'pointer-events', '')
                if (emit) {
                    this.close.emit();
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onDateChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var valChangeParams = '';
        if (event.singleDate) {
            this.value = event.singleDate.formatted;
            this.formatedValue = event.singleDate.formatted;
            /** @type {?} */
            var returnFormatted = this.getRealReturnFormatted(event.singleDate.jsDate);
            valChangeParams = tslib_1.__assign({}, event.singleDate, { formatted: event.singleDate.formatted, returnFormatted: returnFormatted });
            var _a = event.singleDate.date, year = _a.year, month = _a.month, day = _a.day, hour = _a.hour, minute = _a.minute, second = _a.second;
            if (month && (this.dateFormat.indexOf('yyyy') === -1 || this.dateFormat.indexOf('dd') === -1)) {
                /** @type {?} */
                var nd = new Date(year || new Date().getFullYear(), month - 1, day || 1, hour || 0, minute || 0, second || 0);
                event.singleDate.jsDate = nd;
            }
            this.onNgModelChange(returnFormatted, event.singleDate.jsDate);
        }
        else if (event.dateRange) {
            this.value = event.dateRange.formatted;
            this.formatedValue = event.dateRange.formatted;
            /** @type {?} */
            var returnFormatted = event.dateRange.returnFormatted;
            // let returnFormatted = this.dateFrom(event.dateRange.returnFormatted);
            valChangeParams = tslib_1.__assign({}, event.dateRange, { formatted: event.dateRange.formatted, returnFormatted: returnFormatted });
            this.onNgModelChange(returnFormatted, event.dateRange);
        }
        this.onModelTouched();
        this._valueChangeEmitted = true;
        this.valueChange.emit(valChangeParams);
    };
    /**
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.buildOptions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dateOpts;
        if (!this.localDateOpts) {
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
        }
        if (this.showType === ShowType.noDateAndMonth) {
            this.localDateOpts.dateFormat = 'yyyy';
            this.localDateOpts.returnFormat = 'yyyy';
        }
        /** @type {?} */
        var _showTime = (Number(this.showType) === ShowType.all) ? this.showTime : false;
        dateOpts = {
            dateRange: this.dateRange,
            showTime: _showTime,
            showType: Number(this.showType),
            dateFormat: this.dateFormat ? this.dateFormat : this.localDateOpts.dateFormat,
            returnFormat: this.returnFormat ? this.returnFormat : this.localDateOpts.returnFormat,
            minYear: this._minDate.year,
            maxYear: this._maxDate.year,
            highlightDates: this.highlightDates,
            disableDates: this.disableDates,
            showWeekNumbers: this.showWeekNumbers,
            disableDateRanges: [
                {
                    begin: this.disableDateRangesBegin,
                    end: this.disableDateRangesEnd
                }
            ],
            disableUntil: this._minDate,
            disableSince: this._maxDate,
            disableWeekdays: this.disableWeekdays,
            markDates: [
                {
                    dates: this.markDates,
                    color: this.markDatesColor
                }
            ],
            markWeekends: {
                marked: this.isMarkWeekends,
                color: this.markWeekendsColor
            },
            dateRangeDatesDelimiter: this.dateRangeDatesDelimiter,
            shortcuts: this.shortcuts,
            timeFormat: this._timeFormat,
            monthRangeValue: this.monthRangeValue
        };
        switch (Number(this.showType)) {
            case ShowType.noDate:
                dateOpts.defaultView = DefaultView.Month;
                break;
            case ShowType.noDateAndMonth:
                dateOpts.defaultView = DefaultView.Year;
                // dateOpts.dateFormat = 'yyyy';
                // dateOpts.returnFormat = 'yyyy';
                // this.dateFormat = 'yyyy';
                break;
            case ShowType.selectWeek:
                dateOpts.showWeekNumbers = true;
                dateOpts.dateRange = true;
                dateOpts.firstDayOfWeek = 'mo';
                break;
            // default:
            // this.returnType = 'String';
        }
        return tslib_1.__assign({}, this.localDateOpts, dateOpts);
    };
    /**
     * @param {?} d
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.dateTo = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        /** @type {?} */
        var dateFormat = this.dateOpts.dateFormat ? this.dateOpts.dateFormat : this.defaultConfig.dateFormat;
        /** @type {?} */
        var monthLabels = this.dateOpts.monthLabels ? this.dateOpts.monthLabels : this.defaultConfig.monthLabels;
        /** @type {?} */
        var showTime = this.dateOpts.showTime ? this.dateOpts.showTime : this.defaultConfig.showTime;
        /** @type {?} */
        var year = d.getFullYear();
        /** @type {?} */
        var month = d.getMonth() + 1;
        /** @type {?} */
        var day = d.getDate();
        /** @type {?} */
        var hour = d.getHours();
        /** @type {?} */
        var minute = d.getMinutes();
        /** @type {?} */
        var second = d.getSeconds();
        /** @type {?} */
        var date;
        if (!showTime) {
            date = { year: year, month: month, day: day };
            this.originTime = { hour: hour, minute: minute, second: second };
        }
        else {
            date = { year: year, month: month, day: day, hour: hour, minute: minute, second: second };
        }
        return this.utilService.formatDate(date, dateFormat, monthLabels);
    };
    /**
     * @param {?} str
     * @param {?=} ignorRange
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.dateFrom = /**
     * @param {?} str
     * @param {?=} ignorRange
     * @return {?}
     */
    function (str, ignorRange) {
        if (ignorRange === void 0) { ignorRange = false; }
        if (!str) {
            return '';
        }
        /** @type {?} */
        var dateRange = this.dateOpts.dateRange ? this.dateOpts.dateRange : this.defaultConfig.dateRange;
        /** @type {?} */
        var dateFormat = this.dateOpts.dateFormat ? this.dateOpts.dateFormat : this.defaultConfig.dateFormat;
        /** @type {?} */
        var returnFormat = this.dateOpts.dateFormat ? this.dateOpts.returnFormat : this.defaultConfig.returnFormat;
        /** @type {?} */
        var showTime = this.dateOpts.showTime ? this.dateOpts.showTime : this.defaultConfig.showTime;
        /** @type {?} */
        var delimeters = dateFormat.match(/[^(DdMmYy)]{1,}/g);
        /** @type {?} */
        var dateValue;
        /** @type {?} */
        var getValue = this.utilService.getDateValue;
        if ((dateRange || this.dateOpts.showType === ShowType.selectWeek) && !ignorRange) {
            /** @type {?} */
            var tmpBegin = str.split(this.dateRangeDatesDelimiter)[0];
            /** @type {?} */
            var tmpEnd = str.split(this.dateRangeDatesDelimiter)[1];
            /** @type {?} */
            var tmpBeginDate = this.utilService.isDateValid(tmpBegin, this.dateOpts, true);
            /** @type {?} */
            var tmpEndDate = this.utilService.isDateValid(tmpEnd, this.dateOpts, true);
            tmpBeginDate = this.utilService.isInitializedDate(tmpBeginDate) ? tmpBeginDate : this.dateOpts.disableUntil;
            tmpEndDate = this.utilService.isInitializedDate(tmpEndDate) ? tmpEndDate : this.dateOpts.disableSince;
            return (this.utilService.formatDate(tmpBeginDate, returnFormat, this.defaultConfig.monthLabels) +
                this.dateRangeDatesDelimiter +
                this.utilService.formatDate(tmpEndDate, returnFormat, this.defaultConfig.monthLabels));
        }
        else {
            if (this.returnType === 'Date') {
                if (str && str instanceof Date) {
                    return str;
                }
                return convert(str, getValue, this.originTime);
            }
            else {
                /** @type {?} */
                var tmpDate = this.utilService.isDateValid(str, this.dateOpts, true);
                return this.utilService.formatDate(tmpDate, returnFormat, this.defaultConfig.monthLabels);
            }
        }
        /**
         * @param {?} v
         * @param {?} _getValue
         * @param {?=} originTime
         * @return {?}
         */
        function convert(v, _getValue, originTime) {
            if (originTime === void 0) { originTime = { hour: 0, minute: 0, second: 0 }; }
            if (showTime) {
                /** @type {?} */
                var date = v.split(' ')[0];
                /** @type {?} */
                var time = v.split(' ')[1];
                dateValue = _getValue(date, dateFormat, delimeters);
                if (time) {
                    time = time.replace(/[时,分]/g, ':').replace(/[秒]/, '');
                    var _a = tslib_1.__read(time.split(':'), 3), h = _a[0], m = _a[1], s = _a[2];
                    /** @type {?} */
                    var hour = h;
                    /** @type {?} */
                    var minute = m;
                    /** @type {?} */
                    var second = s ? s : '';
                    dateValue[3] = { value: hour, format: 'hh' };
                    dateValue[4] = { value: minute, format: 'mm' };
                    if (second) {
                        dateValue[5] = { value: second, format: 'ss' };
                    }
                }
            }
            else {
                /** @type {?} */
                var date = v.split(' ')[0];
                dateValue = _getValue(date, dateFormat, delimeters);
            }
            /** @type {?} */
            var year = Number(dateValue[0] ? dateValue[0].value : 1970);
            /** @type {?} */
            var yearValue = dateValue[0];
            if (yearValue.format) {
                if (!yearValue.value || yearValue.value.length !== yearValue.format.length) {
                    year = null;
                }
            }
            /** @type {?} */
            var month = Number(dateValue[1] ? dateValue[1].value : 1) - 1;
            /** @type {?} */
            var day = Number(dateValue[2] ? dateValue[2].value : 1);
            /** @type {?} */
            var _hour = dateValue[3] ? Number(dateValue[3].value) : originTime.hour;
            /** @type {?} */
            var _minute = dateValue[4] ? Number(dateValue[4].value) : originTime.minute;
            /** @type {?} */
            var _second = dateValue[5] ? Number(dateValue[5].value) : originTime.second;
            if (!year) {
                return null;
            }
            return new Date(year, month, day, _hour, _minute, _second);
        }
    };
    /**
     * @param {?} value
     * @param {?=} _fmt
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.transform = /**
     * @param {?} value
     * @param {?=} _fmt
     * @return {?}
     */
    function (value, _fmt) {
        if (_fmt === void 0) { _fmt = this.dateOpts.dateFormat; }
        value = value ? value : '';
        var _a = this.dateOpts, returnFormat = _a.returnFormat, dateFormat = _a.dateFormat, showTime = _a.showTime;
        /** @type {?} */
        var _tmpDate = null;
        if (typeof value === 'string') {
            _tmpDate = parse(value, returnFormat, new Date());
        }
        else {
            if (value instanceof Date) {
                _tmpDate = value;
            }
        }
        /** @type {?} */
        var formattedVal = value;
        if (isValid(_tmpDate)) {
            formattedVal = this.dtService.formatTo(_tmpDate, _fmt);
        }
        else {
            // 兼容年月日,年月,年格式
            value = value.replace(/[年,月]/g, '-').replace(/[日]/, '');
            if (value[value.length - 1] === '-') {
                value = value.substr(0, value.length - 1);
            }
            if (isValid(new Date(value))) {
                formattedVal = this.dtService.formatTo(value, _fmt);
            }
            else {
                value = '';
            }
        }
        if (value) {
            if (this.dateFrom(value, true) === '') {
                /** @type {?} */
                var tmpDate = this.utilService.isDateValid(value, Object.assign({}, this.dateOpts, {
                    dateFormat: returnFormat
                }));
                formattedVal = this.utilService.formatDate(tmpDate, _fmt, this.defaultConfig.monthLabels);
            }
        }
        return formattedVal;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.value !== value) {
            if (this.dateOpts.dateRange) {
                /** @type {?} */
                var _tmpDateArr = value.split(this.dateRangeDatesDelimiter);
                /** @type {?} */
                var beginStr = _tmpDateArr[0];
                /** @type {?} */
                var endStr = _tmpDateArr[1];
                this._beginValue = this.transform(beginStr);
                this._endValue = this.transform(endStr);
                this.value = this._beginValue && this._endValue ? this._beginValue + this.dateRangeDatesDelimiter + this._endValue : '';
            }
            else {
                this.value = this.transform(value);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.dateOpts.dateRange) {
            /** @type {?} */
            var _tmpDateArr = value.split(this.dateRangeDatesDelimiter);
            /** @type {?} */
            var beginStr = _tmpDateArr[0];
            /** @type {?} */
            var endStr = _tmpDateArr[1];
            this._beginValue = this.transform(beginStr);
            this._endValue = this.transform(endStr);
            this.value = this._beginValue && this._endValue ? this._beginValue + this.dateRangeDatesDelimiter + this._endValue : '';
        }
        else {
            this.value = this.transform(value);
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.getValueByType = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val instanceof Date) {
            this.returnType = 'Date';
            // return this.dateTo(val);
            return val;
        }
        else if (val && val instanceof Object) {
            var begin = val.begin, end = val.end;
            /** @type {?} */
            var beginStr = begin instanceof Date ? this.dateTo(begin) : '';
            /** @type {?} */
            var endStr = begin instanceof Date ? this.dateTo(end) : '';
            this.returnType = 'Object';
            return beginStr && endStr ? beginStr + this.dateRangeDatesDelimiter + endStr : '';
        }
        else if (val && typeof val === 'string') {
            if (val.indexOf('T') > -1) {
                val = val.replace('T', ' ');
            }
            this.returnType = 'String';
            return val;
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this._realValue = val;
        if (this.dateRange) {
            this._realRangeValue = val;
        }
        this.setValue(this.getValueByType(val));
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onPrevFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.beginFocus = true;
        if (this.endFocus == true) {
            this.endFocus = !this.endFocus;
        }
        this.PrevFocus.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisDatepickerComponent.prototype.onNextFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.endFocus = true;
        if (this.beginFocus == true) {
            this.beginFocus = !this.beginFocus;
        }
        this.NextFocus.emit();
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    FarrisDatepickerComponent.prototype._convert2dateString = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            /** @type {?} */
            var t = val.replace(/[年,月]/g, '-').replace(/[日,号]/g, ' ').replace(/[时,点,分,分钟]/g, ':').replace('秒', '');
            if (t[t.length - 1] === '-') {
                // t = t.substr(0, t.length - 1);
                t += '01';
            }
            if (t[t.length - 1] === ':') {
                t = t.substr(0, t.length - 1);
            }
            return t.replace(/^\s+|\s+$/g, '');
        }
        return val;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisDatepickerComponent.prototype._isValid = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = this._convert2dateString(value);
        if (value) {
            if (this.dateFormat.indexOf('yyyy') === -1 || this.dateFormat.indexOf('dd') === -1) {
                /** @type {?} */
                var _tmpDate = parse(this.value, this.dateFormat, new Date());
                if (this._realValue) {
                    if (this.returnType === 'Date') {
                        return isValid(this._realValue);
                    }
                    else {
                        return isValid(new Date(this._convert2dateString(this._realValue)));
                    }
                }
                /** @type {?} */
                var d = this.utilService.isDateValid(value, this.dateOpts);
                if (d) {
                    if (d.year || d.month) {
                        /** @type {?} */
                        var cdate = new Date();
                        /** @type {?} */
                        var year = cdate.getFullYear();
                        /** @type {?} */
                        var str = (this.dateOpts.returnFormat || 'yyyy-MM-dd')
                            .replace('yyyy', '' + (d.year || year)).replace('MM', '' + d.month).replace('dd', '1');
                        return isValid(new Date(str));
                    }
                    return false;
                }
                return isValid(value);
            }
            else {
                /** @type {?} */
                var reg = /^\d{1,}$/;
                if (reg.test(value) && this.dateFormat.indexOf('yyyyMMdd') > -1) { // 验证传入的格式为 yyyyMMddHHmmss
                    // 验证传入的格式为 yyyyMMddHHmmss
                    /** @type {?} */
                    var _r = this._isValid2(value);
                    if (_r.isValided) {
                        this._realValue = this.getRealReturnFormatted(_r.date);
                        this.value = this.transform(_r.date);
                    }
                    return _r.isValided;
                }
                else {
                    /** @type {?} */
                    var _tmpDate = parse(value, this.dateFormat, new Date());
                    /** @type {?} */
                    var d = this.utilService.isDateValid(this.value, this.dateOpts);
                    return isValid(_tmpDate) || this.utilService.isInitializedDate(d);
                }
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisDatepickerComponent.prototype._isValid2 = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var year = 0;
        /** @type {?} */
        var month = 0;
        /** @type {?} */
        var day = 0;
        /** @type {?} */
        var hour = 0;
        /** @type {?} */
        var minute = 0;
        /** @type {?} */
        var seconds = 0;
        /** @type {?} */
        var df = this.dateFormat;
        if (df.includes('yyyy')) {
            if (value) {
                year = +value.slice(0, 4);
                value = value.slice(4);
            }
            else {
                return false;
            }
        }
        if (df.includes('MM')) {
            if (value) {
                month = +value.slice(0, 2) - 1;
                value = value.slice(2);
                if (month < 0) {
                    month = 0;
                }
            }
            else {
                return false;
            }
        }
        if (df.includes('dd')) {
            if (value) {
                day = +value.slice(0, 2);
                value = value.slice(2);
            }
            else {
                return false;
            }
        }
        if (df.includes('HH')) {
            if (value) {
                hour = +value.slice(0, 2);
                value = value.slice(2);
            }
        }
        if (df.includes('mm')) {
            if (value) {
                minute = +value.slice(0, 2);
                value = value.slice(2);
            }
        }
        if (df.includes('ss')) {
            if (value) {
                seconds = +value.slice(0, 2);
            }
        }
        /** @type {?} */
        var d = new Date(year, month, day, hour, minute, seconds);
        return {
            isValided: isValid(d),
            date: d
        };
    };
    FarrisDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-datepicker',
                    exportAs: 'farris-datepicker',
                    template: "<div class=\"input-group\" [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly,\r\n        'f-state-focus':totalFocus\r\n    }\">\r\n    <ng-container *ngIf=\"!dateOpts.dateRange; else range\">\r\n        <input type=\"text\" class=\"form-control\" [attr.placeholder]=\"readonly||disabled?'':placeholder\" name=\"farris-date\" [ngModel]=\"value\"\r\n            (ngModelChange)=\"onSingleInputNgModelChange($event)\" #dateInput autocomplete=\"off\" [readonly]=\"readonly || !editable\"\r\n            [disabled]=\"disabled\" (dateChanged)=\"onDateChanged($event)\" (blur)=\"onBlur($event)\"\r\n            (focus)=\"onFocus($event)\" (click)=\"onInputClick($event)\" style=\"padding-right: 4px;\" farrisPopover\r\n            [popover]=\"value\" [triggers]=\"'hover'\" [popActive]=\"isActiveTip\" [showAction]=\"'show2'\"\r\n            [container]=\"'body'\" (keydown.tab)=\"closeSelector(3)\" />\r\n\r\n    </ng-container>\r\n    <ng-template #range>\r\n        <div class=\"form-control date-range-wrapper\" (click)=\"onInputClick($event)\" (blur)=\"onBlur($event)\"\r\n            (focus)=\"onFocus($event)\" [title]=\"readonly || !editable|| disabled ?value:''\">\r\n            <span class=\"sub-input-wrapper sub-input-wrapper-begin\" [class.f-state-focus]=\"totalFocus&&beginFocus\">\r\n                <input class=\"sub-input form-control\" type=\"text\" [attr.placeholder]=\"readonly||disabled?'':beginPlaceholder\"\r\n                    [(ngModel)]=\"_beginValue\" [readonly]=\"readonly || !editable\" [disabled]=\"disabled\"\r\n                    autocomplete=\"off\" (blur)=\"onDateRangeInputBlur('begin')\" (focus)=\"onPrevFocus($event)\"/>\r\n            </span>\r\n            <span class=\"f-icon f-icon-orientation-arrow sub-input-spliter\"></span>\r\n            <span class=\"sub-input-wrapper sub-input-wrapper-end\" [class.f-state-focus]=\"totalFocus&&endFocus\">\r\n                <input class=\"sub-input form-control\" type=\"text\" [attr.placeholder]=\"readonly||disabled?'':endPlaceholder\"\r\n                    [(ngModel)]=\"_endValue\" [readonly]=\"readonly || !editable\" [disabled]=\"disabled\" autocomplete=\"off\"\r\n                    (blur)=\"onDateRangeInputBlur('end')\" (focus)=\"onNextFocus($event)\" />\r\n            </span>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\" style=\"position: relative;\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear\" (click)=\"clearDate($event)\"\r\n            style=\"visibility: hidden\" #clearIcon>\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <button type=\"button\" class=\"btn f-cmp-iconbtn\" (click)=\"onInputClick($event)\">\r\n            <span class=\"f-icon f-icon-date\"></span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-container #calendar>\r\n    <ng-container></ng-container>\r\n</ng-container>",
                    providers: [FARRIS_DP_VALUE_ACCESSOR, UtilService, DefaultConfigService, LocaleService],
                    styles: ["\n            :host {\n                display: block;\n            }\n\n            :host .datepicker-clear {\n                position: absolute;\n                height: 100%;\n                right: 0;\n                top: 0;\n                z-index: 100;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    FarrisDatepickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: UtilService },
        { type: DefaultConfigService },
        { type: Injector }
    ]; };
    FarrisDatepickerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        dateRange: [{ type: Input }],
        showTime: [{ type: Input }],
        showType: [{ type: Input }],
        locale: [{ type: Input }],
        dateFormat: [{ type: Input }],
        useDefault: [{ type: Input }],
        returnType: [{ type: Input }],
        returnFormat: [{ type: Input }],
        placeholder: [{ type: Input }],
        beginPlaceholder: [{ type: Input }],
        endPlaceholder: [{ type: Input }],
        whenValueChangedThenCloseSelectorPanel: [{ type: Input }],
        minDate: [{ type: Input }],
        maxDate: [{ type: Input }],
        highlightDates: [{ type: Input }],
        disableDateRangesBegin: [{ type: Input }],
        disableDateRangesEnd: [{ type: Input }],
        disableDates: [{ type: Input }],
        disableWeekdays: [{ type: Input }],
        markDates: [{ type: Input }],
        markDatesColor: [{ type: Input }],
        showWeekNumbers: [{ type: Input }],
        isMarkWeekends: [{ type: Input }],
        markWeekendsColor: [{ type: Input }],
        dateRangeDatesDelimiter: [{ type: Input }],
        shortcuts: [{ type: Input }],
        monthRangeValue: [{ type: Input }],
        beginValue: [{ type: Input }],
        endValue: [{ type: Input }],
        clear: [{ type: Output }],
        valueChange: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        beginValueChange: [{ type: Output }],
        endValueChange: [{ type: Output }],
        PrevFocus: [{ type: Output }],
        NextFocus: [{ type: Output }],
        close: [{ type: Output }],
        dp: [{ type: ViewChild, args: [FarrisDatePickerDirective,] }],
        clearIcon: [{ type: ViewChild, args: ['clearIcon',] }],
        calendarRef: [{ type: ViewChild, args: ['calendar', { read: ViewContainerRef },] }],
        PFocus: [{ type: ViewChild, args: ['onPrevFocus',] }],
        NFocus: [{ type: ViewChild, args: ['onNextFocus',] }],
        dateInput: [{ type: ViewChild, args: ['dateInput',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
    };
    return FarrisDatepickerComponent;
}());
export { FarrisDatepickerComponent };
if (false) {
    /** @type {?} */
    FarrisDatepickerComponent.prototype.cls;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disabled;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.readonly;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.editable;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateRange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showTime;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showType;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.locale;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.useDefault;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.returnType;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.returnFormat;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.placeholder;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.beginPlaceholder;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.endPlaceholder;
    /**
     * 输入值变化后关闭选择面板。 默认为 true
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.whenValueChangedThenCloseSelectorPanel;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.highlightDates;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableDateRangesBegin;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableDateRangesEnd;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableDates;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableWeekdays;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.markDates;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.markDatesColor;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showWeekNumbers;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.isMarkWeekends;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.markWeekendsColor;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateRangeDatesDelimiter;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.shortcuts;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.monthRangeValue;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.clear;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.valueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.focus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.blur;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.beginValueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.endValueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.PrevFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.NextFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.close;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dp;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.clearIcon;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.calendarRef;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.PFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.NFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateInput;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.cRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._timeFormat;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._value;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._beginValue;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._endValue;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._initFinished;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._timer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._dateFormat;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._maxDate;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateOpts;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.defaultConfig;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.localDateOpts;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.localeConfig;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.localeService;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.beginFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.endFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.totalFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.originTime;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.isActiveTip;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.datePicekrService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._realValue;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._realRangeValue;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.formatedValue;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dtService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._applicationRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._ngControl;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._updateOn;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._valueChangeEmitted;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._mousedownEvent;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.closeCalendarHandler;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.cdr;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.onModelChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.defaultConfigService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,