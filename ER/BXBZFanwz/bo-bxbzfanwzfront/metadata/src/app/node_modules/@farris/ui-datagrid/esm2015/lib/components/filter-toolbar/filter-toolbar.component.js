/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Component, ViewEncapsulation, Injector, ChangeDetectorRef, ElementRef, ViewChild, Renderer2, Input, NgZone } from '@angular/core';
import { DatagridService } from './../../services/datagrid.service';
import ResizeObserver from 'resize-observer-polyfill';
import { DatagridComponent } from '../../datagrid.component';
export class DatagridFilterToolbarComponent {
    /**
     * @param {?} inject
     * @param {?} el
     * @param {?} cd
     * @param {?} dgs
     * @param {?} render
     * @param {?} ngZone
     * @param {?} localeSer
     */
    constructor(inject, el, cd, dgs, render, ngZone, localeSer) {
        this.inject = inject;
        this.el = el;
        this.cd = cd;
        this.dgs = dgs;
        this.render = render;
        this.ngZone = ngZone;
        this.localeSer = localeSer;
        this.empty = '[ 无 ]';
        this.filterText = this.empty;
        this.openFilterPanel = false;
        this.showExpand = false;
        this.enableFilterSetting = false;
        this.windowResizeHandler = null;
        this.ro = null;
        this.empty = this.localeSer.getValue('datagrid.filter.nofilter');
        this.filterText = this.empty;
    }
    /**
     * @return {?}
     */
    get toolbarWidth() {
        return this.filterToolbarRef.nativeElement.offsetWidth;
    }
    /**
     * @return {?}
     */
    get filterTextContainerWidth() {
        /** @type {?} */
        let actionW = 52;
        if (this.enableFilterSetting) {
            actionW = 65;
        }
        return this.toolbarWidth - 85 - actionW;
    }
    /**
     * @return {?}
     */
    get filterTextRealWidth() {
        this.render.setStyle(this.filterPanelTextRef.nativeElement, 'white-space', 'nowrap');
        /** @type {?} */
        const w = this.filterPanelTextRef.nativeElement.scrollWidth;
        this.render.setStyle(this.filterPanelTextRef.nativeElement, 'white-space', 'normal');
        return w;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dg = this.inject.get(DatagridComponent);
        this.dfrs = this.dg.clientFilterService;
        this.filterChangeSubscription = this.dgs.onFilterChanged.subscribe((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            this.filterText = this.dfrs.convertFilterCondition2String(n);
            if (!this.filterText) {
                this.filterText = this.empty;
            }
            this.updateExpandState();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.bindEvent();
            }), 100);
            if (!this.showExpand) {
                this.openFilterPanel = false;
            }
            this.cd.detectChanges();
            this.dgs.onFilterTextChange(this.filterText);
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.ro = new ResizeObserver((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.updateExpandState();
                    this.cd.detectChanges();
                }), 100);
            }));
            this.ro.observe(this.el.nativeElement.closest('div.f-datagrid'));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ro.disconnect();
        if (this.filterChangeSubscription) {
            this.filterChangeSubscription.unsubscribe();
            this.filterChangeSubscription = null;
        }
        if (this.windowResizeHandler) {
            this.windowResizeHandler();
            this.windowResizeHandler = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindEvent() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const filterFields = this.filterToolbarRef.nativeElement.querySelectorAll('.filter-field');
            this.bindFilterFieldHandler(filterFields);
            /** @type {?} */
            const dropdownFilterFields = this.filterPanelTextRef.nativeElement.querySelectorAll('.filter-field');
            this.bindFilterFieldHandler(dropdownFilterFields, false);
        }));
    }
    /**
     * @private
     * @param {?} filterFields
     * @param {?=} hidePanel
     * @return {?}
     */
    bindFilterFieldHandler(filterFields, hidePanel = true) {
        if (filterFields && filterFields.length) {
            filterFields.forEach((/**
             * @param {?} ff
             * @return {?}
             */
            ff => {
                this.render.listen(ff, 'click', (/**
                 * @return {?}
                 */
                () => {
                    this.removeFilterField(ff, hidePanel);
                }));
            }));
        }
    }
    /**
     * @private
     * @param {?} ff
     * @param {?=} hidePanel
     * @return {?}
     */
    removeFilterField(ff, hidePanel = true) {
        /** @type {?} */
        const field = ff.classList[1].replace('filter-column-', '');
        delete this.dg.conditions[field];
        this.dfrs.removeFilterField(field);
        ff.remove();
        if (hidePanel) {
            this.openFilterPanel = false;
            this.updateExpandState();
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateExpandState() {
        this.showExpand = this.isShowExpand();
    }
    /**
     * @return {?}
     */
    isShowExpand() {
        if (this.filterTextContainerWidth > this.filterTextRealWidth) {
            return false;
        }
        else if (this.filterTextRealWidth > this.filterTextContainerWidth) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clearFilter($event) {
        this.filterText = this.empty;
        this.dgs.onClearFilter();
        this.dgs.onFilterChanged.emit({});
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    refreshFilter($event) {
        this.dg.filterData();
        return false;
    }
    /**
     * @return {?}
     */
    showFilterTextPanel() {
        this.openFilterPanel = !this.openFilterPanel;
        this.cd.detectChanges();
    }
}
DatagridFilterToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-toolbar',
                template: `
        <div class="f-datagrid-filter-toolbar-panel" #filterPanel [class.show]="openFilterPanel" style="width: auto">
            <span class="filter-text" #filterPanelText [innerHTML]="filterText"></span>
        </div>
        <div class="f-datagrid-filter-toolbar" #filterToolbar>
            <span class="title">{{'datagrid.filter.title'| locale}}：</span>
            <span #filterbarTxt class="filter-text" [innerHTML]="filterText"> </span>
            <span class="filter-action" *ngIf="filterText !== empty ">
                <span *ngIf="showExpand" class="f-icon filter-action-item"
                    [class.f-icon-arrow-chevron-up]="openFilterPanel"
                    [class.f-icon-arrow-chevron-down]="!openFilterPanel"
                (click)="showFilterTextPanel()" title="{{'datagrid.filter.more'|locale}}"></span>
                <span title="{{'datagrid.filter.clearAll'|locale}}" class="f-icon f-icon-x filter-action-item filter-clear" (click)="clearFilter($event)"></span>
                <span title="refresh" class="f-icon f-icon-reload-sm filter-action-item filter-refresh" style="color: #388fff" (click)="refreshFilter($event)"></span>
                <span *ngIf="enableFilterSetting" class="f-icon f-icon-cog filter-action-item" title="{{'datagrid.filter.setting'|locale}}"></span>
            </span>
        </div>
    `,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DatagridFilterToolbarComponent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: DatagridService },
    { type: Renderer2 },
    { type: NgZone },
    { type: LocaleService }
];
DatagridFilterToolbarComponent.propDecorators = {
    enableFilterSetting: [{ type: Input }],
    filterPanelRef: [{ type: ViewChild, args: ['filterPanel',] }],
    filterPanelTextRef: [{ type: ViewChild, args: ['filterPanelText',] }],
    filterTextRef: [{ type: ViewChild, args: ['filterbarTxt',] }],
    filterToolbarRef: [{ type: ViewChild, args: ['filterToolbar',] }]
};
if (false) {
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.empty;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterText;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.openFilterPanel;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.showExpand;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.enableFilterSetting;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterPanelRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterPanelTextRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterTextRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterToolbarRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterChangeSubscription;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.windowResizeHandler;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.localeSer;
}
//# sourceMappingURL=data:application/json;base64,