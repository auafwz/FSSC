/*
 * @Author: aalizzwell
 * @Date: 2019-08-02 15:31:34
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2020-03-03 09:33:43
 */
import { Injectable, Optional, Injector, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { RuntimeFrameworkService } from './rtf-service';
import { AppType } from '@gsp-sys/rtf-common';
import { MenuStateService } from './menu-state.service';
import { NavigationEventService } from './navigation-event.service';
import { QuerystringService } from './querystring';
import { FrameContext, TranslateToken } from '@farris/devkit';
import { FEPageModalService } from '@farris/extend-page-modal';
import lodash from 'lodash-es';
import { FarrisFormService } from './farris-form.service';
import { LanguageService } from './languag.service';
import { map, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
// tslint:disable: no-string-literal max-line-length
var APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';
/**
 * 导航服务
 * @scope FormModule
 */
var NavigationService = /** @class */ (function () {
    function NavigationService(runtimeFrameworkService, menuStateService, navigationEventService, querystringService, frameContext, injector) {
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.menuStateService = menuStateService;
        this.navigationEventService = navigationEventService;
        this.querystringService = querystringService;
        this.frameContext = frameContext;
        this.injector = injector;
        // appId不同于tabId，每次表单实例化时都会重新生成
        var appId = this.formAppContext && this.formAppContext.ApplicationId;
        var tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        // 已经编译的表单，使用appId记录hash
        if (appId) {
            var appContextManager = window[APP_CONTEXT_MANAGER] || new Map();
            if (appContextManager && !appContextManager.has(appId)) {
                appContextManager.set(appId, { hash: window.location.hash });
                window[APP_CONTEXT_MANAGER] = appContextManager;
            }
        }
        if (tabId) {
            var formEventServices = window['formEventServices'] || new Map();
            // tabId、appId都存在时，使用appId替换tabId
            if (appId) {
                tabId = appId;
            }
            if (formEventServices && formEventServices.has(tabId)) {
                this.navigationEventService = formEventServices.get(tabId);
            }
            else {
                this.navigationEventService.registerEvent();
                formEventServices.set(tabId, this.navigationEventService);
                window['formEventServices'] = formEventServices;
            }
        }
    }
    Object.defineProperty(NavigationService.prototype, "context", {
        set: function (context) {
            this.navigationEventService['context'] = context;
            this['commandContext'] = context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationService.prototype, "formAppContext", {
        /**
         * 获取整个表单的appcontext（除module上的appcontext）
         */
        get: function () {
            if (this.frameContext) {
                var appContext = this.frameContext.appContext;
                // tslint:disable-next-line: max-line-length
                while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(FrameContext, null) !== null) {
                    appContext = appContext.parent;
                }
                return appContext;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationService.prototype, "querystrings", {
        get: function () {
            var hash = window.location.hash;
            var appId = this.formAppContext && this.formAppContext.ApplicationId;
            if (appId) {
                var appContextManager = window[APP_CONTEXT_MANAGER];
                var appContext = appContextManager && appContextManager.get(appId);
                hash = appContext && appContext.hash || hash;
            }
            var params = this.querystringService.parse(hash);
            if (params) {
                params.formToken = this.runtimeFrameworkService.formToken;
            }
            return params;
        },
        enumerable: true,
        configurable: true
    });
    // #region 接口
    /**
     * 打开菜单
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param tabName tab标题
     * @param destructuring 是否解构参数
     */
    NavigationService.prototype.openMenu = function (tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
        if (tabName) {
            tabName = this.translate(tabName);
        }
        var queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        var paramsMap = this.buildParamMap(params);
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        var options = {
            tabId: tabId,
            funcId: funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            appId: undefined,
            appEntrance: undefined,
            isReload: reload,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
        // null false "false" "true" undefined
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    };
    /**
     * 打开菜单（流）
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    NavigationService.prototype.openMenu$ = function (tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
        if (tabName) {
            tabName = this.translate(tabName);
        }
        var queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        var paramsMap = this.buildParamMap(params);
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        var options = {
            tabId: tabId,
            funcId: funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            appId: undefined,
            appEntrance: undefined,
            isReload: reload,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        return this.runtimeFrameworkService.openMenu$(options);
    };
    /**
     * 打开菜单(带维度)
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param dim1 dim1
     * @param dim2 dim2
     * @param destructuring 解构参数
     */
    NavigationService.prototype.openMenuWithDimension = function (tabId, funcId, params, enableRefresh, dim1, dim2, tabName, metadataId, destructuring) {
        if (tabName) {
            tabName = this.translate(tabName);
        }
        if (metadataId === undefined || metadataId === null) {
            metadataId = '';
        }
        var queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        var paramsMap = this.buildParamMap(params);
        queryStringParams.set('dim1', dim1 ? dim1 : 'public');
        queryStringParams.set('dim2', dim2 ? dim2 : 'public');
        queryStringParams.set('metadataId', metadataId);
        queryStringParams.set('isRtc', '1');
        queryStringParams.set('isRootMetadata', 'true');
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        var options = {
            tabId: tabId,
            funcId: funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            appId: undefined,
            appEntrance: undefined,
            isReload: false,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
        // null false "false" "true" undefined
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    };
    /**
     * 打开应用
     * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param appId 应用Id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param reload 是否重新刷新
     * @param tabName tab标题
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    NavigationService.prototype.openApp = function (tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
        if (tabName) {
            tabName = this.translate(tabName);
        }
        var queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        var paramsMap = this.buildParamMap(params);
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        var options = {
            tabId: tabId,
            appId: appId,
            appEntrance: appEntrance,
            funcId: undefined,
            appType: AppType.App,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            isReload: reload,
            tabName: tabName || null
        };
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    };
    /**
     * 打开应用(流式)
     * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param appId 应用Id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param reload 是否重新刷新
     * @param tabName tab标题
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    NavigationService.prototype.openApp$ = function (tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
        if (tabName) {
            tabName = this.translate(tabName);
        }
        var queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        var paramsMap = this.buildParamMap(params);
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        var options = {
            tabId: tabId,
            appId: appId,
            appEntrance: appEntrance,
            funcId: undefined,
            appType: AppType.App,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            isReload: reload,
            tabName: tabName || null
        };
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        return this.runtimeFrameworkService.openMenu$(options);
    };
    /**
     * 关闭
     * @param onCloseing 关闭前事件处理器
     */
    NavigationService.prototype.close = function () {
        var options = this.querystrings;
        var _a = this.findDialog(), isInDialog = _a.isDialogComponent, rootComponent = _a.rootComponent;
        if (isInDialog) {
            var modalRef = this.get(rootComponent, 'dialogRef');
            modalRef['close']();
            return;
        }
        options.token = options.formToken;
        this.runtimeFrameworkService.beforeCloseMenu(options);
    };
    /**
     * 强制关闭
     */
    NavigationService.prototype.destory = function () {
        var options = this.querystrings;
        options.token = options.formToken;
        this.runtimeFrameworkService.closeMenu(options);
    };
    /**
     *
     * @param params params
     * @deprecated 待废弃，与buildParamMap重复
     */
    NavigationService.prototype.parseParams = function (params) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        var paramMap = new Map();
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        return paramMap;
    };
    /**
     * 注册事件监听器
     * @param eventType 事件类型 onTabClosed
     * @param handler 处理器
     * @returns string 返回事件标识
     */
    NavigationService.prototype.addEventListener = function (eventType, handler) {
        return this.navigationEventService.addEventListener(eventType, handler);
    };
    /**
     * 移除事件监听器
     * @param eventType 事件类型 onTabClosed | onTabCloseing
     * @param key 事件标识
     */
    NavigationService.prototype.removeEventListener = function (eventType, key) {
        return this.navigationEventService.removeEventListener(eventType, key);
    };
    /**
     * 清空事件监听器
     * @param eventType 事件类型
     */
    NavigationService.prototype.clearEventListener = function (eventType) {
        this.navigationEventService.clearEventListener(eventType);
    };
    /**
     * 以弹框、侧边栏或新标签页方式打开表单
     * @param mode 打开方式，支持`modal`弹窗、`sidebar`侧边栏、`tab`新标签页
     * @param modalId 弹窗id，如果mode=`modal`且没有url，
     * @param configs 弹窗配置
     * @param url 远端表单url
     * @param tabId 标签页id，modal=tab时必填
     * @param tabType 标签页类型，`menu` 或`app`
     * @param funcOrAppId 菜单或应用id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param tabName 新标签页名称
     * @param enableRefresh 启用启动刷新
     * @param destructuring 是否解构
     */
    NavigationService.prototype.open = function (mode, modalId, url, configs, tabId, tabType, funcOrAppId, appEntrance, params, tabName, enableRefresh, destructuring) {
        var pageModalService = this.injector.get(FEPageModalService, null);
        if (!pageModalService) {
            throw new Error('get FEPageModalService failed.');
        }
        // 校验参数是否合法
        if (!mode) {
            throw new Error('[NavigationService]->open,mode参数不能为空！');
        }
        if (mode === 'modal' || mode === 'sidebar') {
            if (!modalId && !url) {
                throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时为空！');
            }
            if (modalId && url) {
                throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时存在！');
            }
            var uiStateConfig = this.getObjectTypeConfig(params);
            var modalConfig = this.buildConfigs(configs);
            if (mode === 'sidebar') {
                modalConfig.dialogType = mode;
            }
            var pageModalRef = null;
            if (modalId) {
                var farrisFormService = this.injector.get(FarrisFormService, null);
                if (!farrisFormService) {
                    return;
                }
                var componentType = farrisFormService.getControls(modalId);
                var componentRef = this.createComponentRef(componentType, uiStateConfig);
                pageModalRef = pageModalService.show(componentRef, modalConfig);
            }
            else if (url) {
                pageModalRef = pageModalService.showByUrl(url, modalConfig);
            }
            if (pageModalRef && !!pageModalRef.content) {
                pageModalRef.content.isDialogRootComponent = true;
                pageModalRef.content.dialogRef = pageModalRef;
            }
        }
        else if (mode === 'tab') {
            if (!tabId || !tabType || !funcOrAppId) {
                throw new Error('新标签模式时标签页id、标签类型、菜单或应用id均不能为空！');
            }
            if (tabType === 'app' && !appEntrance) {
                throw new Error('以应用方式打开时入口应用不能为空！');
            }
            if (tabType == 'app') {
                this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);
            }
            else if (tabType === 'menu') {
                this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);
            }
        }
        else {
            throw new Error('不支持的模式！');
        }
        // this.pageModalService.
    };
    /**
     * in app navigate
     * @param commands commands
     */
    // public navigate(commands: any[]);
    /**
     * in app navigate
     * @param commands commands
     * @param options options
     * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}
     */
    NavigationService.prototype.navigate = function (commands, options) {
        var router = this.injector && this.injector.get(Router, null);
        var activatedRoute = this.injector && this.injector.get(ActivatedRoute, null);
        var queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});
        if (options && options.hasOwnProperty('queryParams')) {
            delete options.queryParams;
        }
        var extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams: queryParams }, options || {});
        if (router) {
            return router.navigate(commands, extras);
        }
        else {
            return null;
        }
    };
    // #endregion
    // #region 私有方法
    /**
     * 封装路由参数
     * @param params 参数
     * @param options 配置参数
     */
    NavigationService.prototype.buildParamMap = function (params, options) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        var paramMap = new Map();
        if (options && Object.keys(options).length > 0) {
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            params = lodash.merge(params, options);
        }
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
        return paramMap;
    };
    NavigationService.prototype.buildParam = function (params, options) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        var paramMap = new Map();
        if (options && Object.keys(options).length > 0) {
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            params = lodash.merge(params, options);
        }
        if (typeof params !== 'object') {
            params = JSON.parse(params);
        }
        Object.keys(params).forEach(function (key) {
            paramMap.set(key, params[key]);
        });
        var currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
        return paramMap;
    };
    /**
     * 查找弹窗组件
     */
    NavigationService.prototype.findDialog = function () {
        var frameContext = this.get(this, 'commandContext.frameContext');
        var isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        var parentFrameContext = this.get(frameContext, 'parent');
        while (parentFrameContext != null && !isDialogComponent) {
            frameContext = this.get(frameContext, 'parent');
            parentFrameContext = this.get(parentFrameContext, 'parent');
            isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        }
        var rootComponent = this.get(frameContext, 'frameComponent');
        return { isDialogComponent: isDialogComponent, rootComponent: rootComponent };
    };
    /**
     * loadsh get
     * @param object 对象
     * @param path 路径
     * @param defaultVal 默认值
     */
    NavigationService.prototype.get = function (object, path, defaultVal) {
        if (defaultVal === void 0) { defaultVal = null; }
        var PATH = Array.isArray(path)
            ? path
            : path.split('.').filter(function (i) { return i.length; });
        if (!PATH.length) {
            return object === undefined ? defaultVal : object;
        }
        if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {
            return defaultVal;
        }
        return this.get(object[PATH.shift()], PATH, defaultVal);
    };
    NavigationService.prototype.convertToBoolean = function (value, defaultVal) {
        if (defaultVal === void 0) { defaultVal = false; }
        if (typeof value === 'undefined' || value === null) {
            value = defaultVal;
        }
        if (typeof value === 'string') {
            value = value || String(defaultVal);
            value = value === 'true' ? true : false;
        }
        return value;
    };
    /**
     * 翻译资源项
     * @param key 资源项key
     */
    NavigationService.prototype.translate = function (key) {
        var translateService = this.injector && this.injector.get(TranslateToken, null) || null;
        if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {
            key = key.replace('{{', '').replace('}}', '').trim();
            return translateService.transform(key, null);
        }
        return key;
    };
    // #endregion
    //#region 弹窗相关方法
    NavigationService.prototype.buildConfigs = function (config) {
        var _this = this;
        var languageService = this.injector.get(LanguageService, null);
        if (!languageService) {
            languageService = LanguageService.getInstance();
        }
        var defaultConfigs = {
            title: languageService && languageService.defaultDialogTitle || '',
            width: 800,
            height: 500,
            showButtons: false
        };
        var objectTypeConfig = this.getObjectTypeConfig(config);
        var configs = Object.assign(defaultConfigs, objectTypeConfig);
        var onClosingHandler = configs.beforeClose;
        var refresh = configs['refresh'] || {};
        var refreshCommandName = refresh && refresh.commandName || null;
        var refreshFrameId = refresh && refresh.frameId || null;
        // tslint:disable: no-string-literal
        var cancelChanges = configs['cancelChanges'] || false;
        configs.beforeClose = function (ref) {
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap(function (result) {
                    if (result) {
                        if (cancelChanges) {
                            return _this.cancelChanges(ref).pipe(switchMap(function () { return _this.refreshForm(refreshCommandName, refreshFrameId); }));
                        }
                    }
                    return of(result);
                }));
            }
            else {
                if (cancelChanges) {
                    return _this.cancelChanges(ref).pipe(switchMap(function () { return _this.refreshForm(refreshCommandName, refreshFrameId); }));
                }
                else {
                    return of(true);
                }
            }
        };
        return configs;
    };
    NavigationService.prototype.getObjectTypeConfig = function (config) {
        var objectTypeConfig;
        if (typeof config === 'undefined') {
            config = {};
        }
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    };
    /**
     * 取消服务器变更集
     */
    NavigationService.prototype.cancelChanges = function (ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            var component = ref.modalRef.content;
            if (component && component.context) {
                var repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(function () { return of(true); }));
                }
            }
        }
        return of(true);
    };
    NavigationService.prototype.refreshForm = function (refreshCommandName, refreshFrameId) {
        if (refreshCommandName && refreshFrameId) {
            var frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);
            if (frameContext) {
                var viewModel = frameContext.viewModel;
                return viewModel[refreshCommandName]().pipe(map(function () { return true; }));
            }
        }
        return of(true);
    };
    NavigationService.prototype.createComponentRef = function (componentType, uiStateObject) {
        var componentRef;
        var frameContext = this.getFrameContext();
        var componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            var contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);
            var modalContentInjector = ReflectiveInjector.resolveAndCreate([], frameContext.injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach(function (item) {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
        }
        return componentRef;
    };
    /**
     * 兼容旧弹窗，获取frameContext
     */
    NavigationService.prototype.getFrameContext = function () {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    };
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    NavigationService.prototype.getComponentFactoryResolver = function () {
        var frameContext = this.getFrameContext();
        var componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    };
    NavigationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NavigationService.ctorParameters = function () { return [
        { type: RuntimeFrameworkService },
        { type: MenuStateService },
        { type: NavigationEventService },
        { type: QuerystringService },
        { type: FrameContext, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return NavigationService;
}());
export { NavigationService };
//# sourceMappingURL=data:application/json;base64,