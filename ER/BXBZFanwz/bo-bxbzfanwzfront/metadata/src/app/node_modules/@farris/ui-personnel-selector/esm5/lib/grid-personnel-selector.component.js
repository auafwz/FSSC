/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-personnel-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
var personnelSelectorDefautOption = {
    absOrgType: 'System_organization',
    // 数据源类型
    readonly: false,
    // 是否只读
    placeholder: '请选择',
    viewType: 'tag',
    busNum: 'common',
    idField: 'userId'
};
var DatagridPersonnelSelectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridPersonnelSelectorComponent, _super);
    function DatagridPersonnelSelectorComponent(render, el, rts, utils, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.utils = utils;
        _this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        function (helpData, mapFields, dataObj) {
            if (mapFields) {
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} h
                             * @return {?}
                             */
                            function (h) {
                                return _this.utils.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = _this.utils.getValue(f, helpData);
                        }
                    }
                    mapFields[f].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    function (ff) {
                        /** @type {?} */
                        var field = trim(ff);
                        _this.utils.setValue(dataObj, field, val);
                    }));
                }));
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        // 这里添加了过滤 this.options 中null、undefined,万一 jit 生成了 undefined 的呢，
        this.options = Object.assign({}, personnelSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        function (itemValue) { return isUndefined(itemValue) || isNull(itemValue); })));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    };
    /**
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inputElement = this.el.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.setValue(fieldPath.join('.'), _this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.getValue(fieldPath.join('.'), _this.bindingData, true);
            });
        }
    };
    /**
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.inputClear = /**
     * @return {?}
     */
    function () {
        this.updateControlValue(null);
        this.instance.clear.emit();
        if (this.options.inputClear) {
            this.options.inputClear();
        }
    };
    /**
     * @param {?} removedItem
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.tagRemoved = /**
     * @param {?} removedItem
     * @return {?}
     */
    function (removedItem) {
        var _this = this;
        /** @type {?} */
        var mapFields = this.instance.mapFields;
        /** @type {?} */
        var helpFields = Object.keys(mapFields);
        /** @type {?} */
        var bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        var selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = _this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            var vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            function (v, i) {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            _this.utils.setValue(_this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    };
    /**
     * @param {?} changeData
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.selectionsChange = /**
     * @param {?} changeData
     * @return {?}
     */
    function (changeData) {
        /** @type {?} */
        var formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    };
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.updateControlValue = /**
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    };
    /**
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.formSelectedRowData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var defaultDisplayName = _this.instance.displayField ? item[_this.instance.displayField] : "[" + item.code + "]" + item.name;
            /** @type {?} */
            var displayName = _this.instance.formatFn ? _this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName: displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridPersonnelSelectorComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridPersonnelSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-personnel-selector',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n            <farris-personnel-selector #selection\n            style=\"width: 100%\"\n            [placeholder]=\"options.placeholder\"\n            [enableQuick]=\"false\"\n            [readonly]=\"options.readonly\"\n            [absOrgType]=\"options.absOrgType\"\n            [viewType]=\"options.viewType\"\n            [multiSelect]=\"options.multiSelect\"\n            [busNum]=\"options.busNum\"\n            [mapFields]=\"options.mapFields\"\n            [formatFn]=\"options.formatter\"\n            [formControlName]=\"column.field\"\n            [idField]=\"options.idField\"\n            [displayField]=\"options.textField\"\n            (inputClear)=\"inputClear()\"\n            (selectionsChange)=\"selectionsChange($event)\"\n            (tagRemoved)=\"tagRemoved($event)\"\n            >\n            </farris-personnel-selector>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridPersonnelSelectorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: CommonUtils },
        { type: Injector }
    ]; };
    DatagridPersonnelSelectorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['selection',] }]
    };
    return DatagridPersonnelSelectorComponent;
}(DatagridBaseEditorDirective));
export { DatagridPersonnelSelectorComponent };
if (false) {
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.instance;
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.bindingData;
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    DatagridPersonnelSelectorComponent.prototype.rts;
    /** @type {?} */
    DatagridPersonnelSelectorComponent.prototype.utils;
}
/** @type {?} */
export var PersonnelSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'PersonnelSelector', value: DatagridPersonnelSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,