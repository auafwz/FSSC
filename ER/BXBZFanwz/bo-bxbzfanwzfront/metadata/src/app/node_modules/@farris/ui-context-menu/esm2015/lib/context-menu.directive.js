/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, Injector, ElementRef, Renderer2, Optional } from '@angular/core';
import { of } from 'rxjs';
import { FarrisContextMenuService } from './context-menu.service';
export class FarrisContextMenuDirective {
    /**
     * @param {?} ctxMenuSer
     * @param {?} injector
     * @param {?} elRef
     * @param {?} render
     */
    constructor(ctxMenuSer, injector, elRef, render) {
        this.ctxMenuSer = ctxMenuSer;
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.disabled = false;
        this.highlight = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.id = this.contextMenuId();
        if (!this.beforeShowContextMenu) {
            this.beforeShowContextMenu = (/**
             * @return {?}
             */
            () => of(true));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextMenu(event) {
        if (!this.disabled) {
            /** @type {?} */
            let contextMenuDom = null;
            if (this.activeDomName) {
                contextMenuDom = ((/** @type {?} */ (event.target))).closest(this.activeDomName);
                if (contextMenuDom) {
                    this.render.addClass(contextMenuDom, 'f-context-menu-active');
                }
                else {
                    return;
                }
            }
            /** @type {?} */
            const beforeShow$ = this.beforeShowContextMenu({ event, contextMenuDom });
            if (beforeShow$ && beforeShow$.subscribe) {
                beforeShow$.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const ctxData = this.getContextData(e);
                    this.removeSurplusMenus();
                    if (ctxData.show) {
                        document.body.click();
                        this.ctxMenuSer.show({
                            menuItems: this.getViewMenuItems(ctxData.data),
                            event,
                            id: this.id,
                            activeDom: contextMenuDom,
                            context: ctxData.data,
                            menuClass: this.menuClass,
                            target: this.elRef.nativeElement,
                            activeWidth: e['focusTargetWidth'],
                            highlight: this.highlight
                        });
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }));
            }
        }
    }
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    /**
     * @private
     * @return {?}
     */
    removeSurplusMenus() {
        if (this.menuItems && this.menuItems.length) {
            this.menuItems.forEach((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                if (m !== '-' && m.children && m.children.length) {
                    m.children.forEach((/**
                     * @param {?} cm
                     * @return {?}
                     */
                    cm => {
                        if (cm !== '-') {
                            cm.children = [];
                        }
                    }));
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    contextMenuId() {
        /** @type {?} */
        const id = this.elRef.nativeElement.id;
        if (id) {
            return `${id}-context-menu`;
        }
        else {
            return 'context-menu_' + new Date().getTime();
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    getContextData(e) {
        if (typeof e === 'boolean') {
            return { show: e, data: null };
        }
        return e;
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    getViewMenuItems(context) {
        if (this.menuItems && this.menuItems.length) {
            return this.checkMenuItems(this.menuItems, context);
        }
        return [];
    }
    /**
     * @private
     * @param {?} menuItems
     * @param {?} context
     * @return {?}
     */
    checkMenuItems(menuItems, context) {
        /** @type {?} */
        const menus = menuItems.map((/**
         * @param {?} m
         * @return {?}
         */
        (m) => {
            if (typeof m === 'string') {
                return m;
            }
            else {
                /** @type {?} */
                const n = this.checkVisibleAndDisable(m, context);
                if (n.children) {
                    n.children = this.checkMenuItems(n.children, context);
                }
                return n;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return n === '-' || n.visible;
        }));
        if (menus && menus.length) {
            if (menus[0] === '-') {
                menus.shift(0);
            }
            if (menus[menus.length - 1] === '-') {
                menus.pop(0);
            }
        }
        return menus;
    }
    /**
     * @private
     * @param {?} m
     * @param {?} context
     * @return {?}
     */
    checkVisibleAndDisable(m, context) {
        /** @type {?} */
        const n = Object.assign({}, m);
        if (!n.hasOwnProperty('visible')) {
            n.visible = true;
        }
        else {
            if (typeof n.visible === 'function') {
                n.visible = n.visible(context);
            }
        }
        if (!n.hasOwnProperty('disable')) {
            n.disable = false;
        }
        else {
            if (typeof n.disable === 'function') {
                n.disable = n.disable(context);
            }
        }
        return n;
    }
}
FarrisContextMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-context-menus]',
            },] }
];
/** @nocollapse */
FarrisContextMenuDirective.ctorParameters = () => [
    { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisContextMenuDirective.propDecorators = {
    menuItems: [{ type: Input, args: ['farris-context-menus',] }],
    menuClass: [{ type: Input }],
    disabled: [{ type: Input }],
    context: [{ type: Input }],
    beforeShowContextMenu: [{ type: Input }],
    activeDomName: [{ type: Input }],
    highlight: [{ type: Input }],
    onContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FarrisContextMenuDirective.prototype.menuItems;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.menuClass;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.disabled;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.context;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.beforeShowContextMenu;
    /**
     * 触发右键菜单实际DOM标签名称
     * @type {?}
     */
    FarrisContextMenuDirective.prototype.activeDomName;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.highlight;
    /** @type {?} */
    FarrisContextMenuDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.ctxMenuSer;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    FarrisContextMenuDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,