import { DynamicCommandHandler } from '../command';
import { DomService } from '../schema';
import { SchemaService } from '../schema/schema.service';
var ContextMetadataBuilder = /** @class */ (function () {
    function ContextMetadataBuilder() {
    }
    /**
     * 构造应用程序上下文元数据
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数
     * @returns 应用程序上下文元数据
     */
    ContextMetadataBuilder.prototype.buildAppContextMetadata = function (formMetadataContent, stateMachineMetadata) {
        var module = formMetadataContent.module;
        var uiStates = module.states;
        var appContextMetadata = {
            identify: module.code,
            namespace: '',
            stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),
            uiStates: this.buildUiStateMetadata(uiStates)
        };
        return appContextMetadata;
    };
    /**
     * 构造视图上下文元数据
     * @param componentId 组件标识
     * @param viewModel 视图模型元数据
     * @param declarations 外部接口定义
     * @param subscriptions 事件订阅定义
     * @returns 视图上下文元数据
     */
    ContextMetadataBuilder.prototype.buildViewContextMetadata = function (component, viewModel, schema, controllers) {
        var contextMetadata = {
            identify: component.id,
            namespace: '',
            commands: this.buildCommand(viewModel.commands),
            commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),
            commandHandlerExtends: [],
            form: this.buildFormMetadata(viewModel),
            formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component),
            subForms: null,
            uiStates: this.buildUiStateMetadata(viewModel.states),
            bindingTo: viewModel.bindTo,
            viewModelCode: viewModel.code
        };
        return contextMetadata;
    };
    ContextMetadataBuilder.prototype.buildCommand = function (commandMetadataArray) {
        var commands = {};
        commandMetadataArray.reduce(function (previousValue, commandMetadata) {
            var ngCommand = {
                name: commandMetadata.code,
                params: {},
                paramDescriptions: {}
            };
            commandMetadata.params.reduce(function (previousCommand, param) {
                previousCommand.params[param.name] = param.value;
                previousCommand.paramDescriptions[param.name] = { type: 'string' };
                return previousCommand;
            }, ngCommand);
            previousValue[commandMetadata.code] = ngCommand;
            return previousValue;
        }, commands);
        return commands;
    };
    ContextMetadataBuilder.prototype.buildFormMetadata = function (viewModel) {
        return {
            formGroupName: viewModel.name,
            enableValidate: viewModel.enableValidation
        };
    };
    ContextMetadataBuilder.prototype.buildFormControlMetadata = function (formFields, viewModel, schema, component) {
        var formControls = {};
        var formFieldIds = formFields.map(function (formField) { return formField.id; });
        var schemaService = new SchemaService();
        var formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);
        var domService = new DomService();
        formFields.reduce(function (previousValue, field) {
            var schemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;
            var binding = schemaEntityField ? schemaEntityField.bindingPath : '';
            var domElements = domService.getElementByBinding(component.contents, field.id);
            var validRules = [];
            var matchedElement = domElements[0];
            if (matchedElement) {
                var keys_1 = 'maxValue,minValue,required,require';
                Object.keys(matchedElement).forEach(function (key) {
                    if (keys_1.includes(key)) {
                        if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                            // 把最大值属性转换成validRule
                            validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });
                        }
                        else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                            // 把最小值属性转换成validRule
                            validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });
                        }
                        else if (key === 'required' || key === 'require') {
                            // 把必填属性转换成validRule
                            // 必填表达式可以为状态机
                            if (matchedElement[key] === 'true' || matchedElement[key] === true) {
                                validRules.push({ type: 'required', constraints: [true] });
                            }
                        }
                    }
                });
            }
            previousValue[field.fieldName] = {
                /** 控件标识 */
                id: field.fieldName + "_" + field.id.substr(0, 13).replace('-', '_'),
                /** 控件名称 todo: 需要支持多语言 */
                name: matchedElement ? matchedElement.title : field.fieldName,
                /** 绑定字段路径 */
                binding: binding,
                /** 控件值更新时机 */
                updateOn: field.updateOn,
                /** 控件默认名称 */
                defaultI18nValue: matchedElement ? matchedElement.title : field.fieldName,
                /** 验证规则 */
                validRules: validRules
            };
            return previousValue;
        }, formControls);
        return formControls;
    };
    /**
     * 由状态机元数据创建状态机上下文描述
     * @param stateMachineMetadata 状态机元数据
     * @returns 状态机上下文描述
     */
    ContextMetadataBuilder.prototype.buildStataMachineMetadata = function (stateMachineMetadata) {
        var _this = this;
        // 声明状态机上下文元数据
        var stateMachine = {
            states: {},
            renderStates: {},
            actions: {}
        };
        if (!stateMachineMetadata) {
            return stateMachine;
        }
        // 由状态机元数据构造NgState
        stateMachineMetadata.state.reduce(function (previousValue, state) {
            previousValue.states[state.state] = {
                initialState: state.state === stateMachineMetadata.initialState
            };
            return previousValue;
        }, stateMachine);
        // 由状态机元数据构造NgRenderState
        Object.keys(stateMachineMetadata.renderState)
            .reduce(function (previousValue, renderStateName) {
            var renderStateMetadata = stateMachineMetadata.renderState[renderStateName];
            var renderFunction = _this.buildRenderFunction(renderStateMetadata);
            previousValue.renderStates[renderStateName] = {
                render: renderFunction
            };
            // previousValue.renderStates[renderStateName] = {
            //   render: (context: StateMachineContext) => {
            //     return context.parser.parse(renderStateMetadata.condition, this);
            //   }
            // };
            return previousValue;
        }, stateMachine);
        // 由状态机元数据构造NgAction
        Object.keys(stateMachineMetadata.action)
            .reduce(function (previousValue, actionName) {
            var actionMetadata = stateMachineMetadata.action[actionName];
            previousValue.actions[actionName] = {
                precondition: actionMetadata.precondition,
                transitTo: actionMetadata.transitTo
            };
            return previousValue;
        }, stateMachine);
        // 返回状态机元数据
        return stateMachine;
    };
    ContextMetadataBuilder.prototype.buildUiStateMetadata = function (states) {
        var uiStates = {};
        states.reduce(function (previousValue, uiState) {
            previousValue[uiState.code] = {
                stateName: uiState.code
            };
            return previousValue;
        }, uiStates);
        return uiStates;
    };
    ContextMetadataBuilder.prototype.buildRenderFunction = function (renderStateMetadata) {
        if (renderStateMetadata && renderStateMetadata.condition.length) {
            var renderFunctionString = renderStateMetadata.condition.reduce(function (previousFunctionString, condition) {
                var conditionTarget = condition.target;
                if (!conditionTarget.startsWith('\'')) {
                    conditionTarget = "'" + conditionTarget;
                }
                if (!conditionTarget.endsWith('\'')) {
                    conditionTarget = conditionTarget + "'";
                }
                var conditionSource = condition.source;
                if (conditionSource.indexOf('\'') < 0) {
                    conditionSource = "'" + conditionSource + "'";
                }
                if (conditionSource.indexOf('getUIState') > -1) {
                    conditionSource = conditionSource.replace('getUIState', 'context.getUIState');
                }
                if (conditionSource.indexOf('getData') > -1) {
                    conditionSource = conditionSource.replace('getData', 'context.getData');
                }
                // tslint:disable-next-line: max-line-length
                var functionString = (condition.lBracket || '') + "context.parse(" + conditionSource + ",'source')" + condition.compare + "context.parse(" + condition.target + ",'target')" + (condition.rBracket || '');
                if (condition.relation) {
                    switch (condition.relation.trim().toLocaleLowerCase()) {
                        case 'or':
                            functionString += '||';
                            break;
                        case 'and':
                            functionString += '&&';
                            break;
                    }
                }
                return previousFunctionString + functionString;
            }, '');
            if (renderFunctionString) {
                return new Function('context', "return " + renderFunctionString + ";");
            }
        }
        return new Function('context', 'return true;');
    };
    ContextMetadataBuilder.prototype.buildCommandHandlers = function (commandMetadataArray, controllers) {
        var commandHandlers = [];
        commandMetadataArray.reduce(function (previousValue, commandReference) {
            var commandName = commandReference.code;
            var controllerId = commandReference.cmpId;
            var controller = controllers[controllerId];
            var method = Object.assign({}, controller.methods[commandReference.handlerName]);
            method.params = method.params.map(function (param) { return Object.assign({}, param); });
            if (method.params && method.params.length) {
                commandReference.params.reduce(function (previousMethodValue, param) {
                    var methodParam = previousMethodValue.params.find(function (value) { return value.name === param.name; });
                    if (methodParam) {
                        methodParam.expression = param.value;
                    }
                    return previousMethodValue;
                }, method);
            }
            var commandHandler = new DynamicCommandHandler(commandName, method);
            previousValue.push(commandHandler);
            return previousValue;
        }, commandHandlers);
        return commandHandlers;
    };
    return ContextMetadataBuilder;
}());
export { ContextMetadataBuilder };
//# sourceMappingURL=data:application/json;base64,