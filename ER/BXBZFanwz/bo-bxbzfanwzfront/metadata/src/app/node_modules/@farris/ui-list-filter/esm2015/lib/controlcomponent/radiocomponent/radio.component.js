/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { SolutionService } from '../../service/solution.service';
import { RadioValue } from '../../entity/controltype/radio/radiovalue';
import { RadioGroupValue } from '../../entity/conditionvalue/radiovalue';
export class FilterRadioComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.cla = true;
        this.radioDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get isCheckExtend() {
        return !this.extend;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        this.radioValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.radioValue = [];
        }));
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.getDataSource();
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Radio) {
            /** @type {?} */
            let radioList = ((/** @type {?} */ (this.item.control)));
            this.radioDataSource = Array();
            if (radioList.enumValues && radioList.enumValues.length > 0) {
                radioList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.radioDataSource.push(Object.assign(new RadioValue(), element));
                }));
            }
        }
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
        //     this.extend = this.item.control.isExtend;
        // }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            this.item.value.value = event;
        }
        else {
            this.item.value.value = new RadioGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
}
FilterRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-radio',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <!-- <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup> -->\r\n    <farris-radiogroup \r\n    [value]=\"radioValue\" \r\n    [horizontal]=\"true\" \r\n    [data]=\"radioDataSource\"\r\n    [disabled]=\"disabled\"\r\n    (changeValue)=\"onSearch($event)\">\r\n    </farris-radiogroup>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
FilterRadioComponent.ctorParameters = () => [
    { type: SolutionService }
];
FilterRadioComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
    cla: [{ type: HostBinding, args: ['class.filter-item-radio',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    FilterRadioComponent.prototype.item;
    /** @type {?} */
    FilterRadioComponent.prototype.autoLabel;
    /** @type {?} */
    FilterRadioComponent.prototype.disabled;
    /** @type {?} */
    FilterRadioComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    FilterRadioComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    FilterRadioComponent.prototype.showlabel;
    /** @type {?} */
    FilterRadioComponent.prototype.radioValue;
    /** @type {?} */
    FilterRadioComponent.prototype.selectCheck;
    /** @type {?} */
    FilterRadioComponent.prototype.cla;
    /** @type {?} */
    FilterRadioComponent.prototype.radioDataSource;
    /**
     * @type {?}
     * @private
     */
    FilterRadioComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,