/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class InputGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const igv = (qc.value);
        /** @type {?} */
        const arr = [];
        if (igv.textValue && igv.textValue.length == 0) {
            return [];
        }
        else if (igv.isInputText) {
            arr.push({
                'FilterField': qc.labelCode,
                'Compare': CompareType.Like,
                // 'Value': encodeURIComponent(igv.textValue),
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach((/**
             * @param {?} itemValue
             * @return {?}
             */
            itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.labelCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItY29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFDMUIsT0FBTyxDQUFDLEVBQUU7O2NBQ0EsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQzs7Y0FDaEIsR0FBRyxHQUFHLEVBQUU7UUFDZCxJQUFHLEdBQUcsQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzNDLE9BQU8sRUFBRSxDQUFDO1NBQ2I7YUFDSSxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUU7WUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDTCxhQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVM7Z0JBQzNCLFNBQVMsRUFBRSxXQUFXLENBQUMsSUFBSTs7Z0JBRTNCLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FBUztnQkFDdEIsVUFBVSxFQUFFLFlBQVksQ0FBQyxHQUFHO2dCQUM1QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7YUFDakMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxHQUFHLENBQUM7U0FDZDthQUNJO1lBQ0QsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxTQUFTLENBQUMsRUFBRTtnQkFDbEQsU0FBUyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLGFBQWEsRUFBRSxFQUFFLENBQUMsU0FBUztvQkFDM0IsU0FBUyxFQUFFLFdBQVcsQ0FBQyxLQUFLO29CQUM1QixPQUFPLEVBQUUsU0FBUztvQkFDbEIsVUFBVSxFQUFFLFlBQVksQ0FBQyxFQUFFO29CQUMzQixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7aUJBQ2pDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN0QyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO2dCQUNuRCxPQUFPLEdBQUcsQ0FBQzthQUNkO2lCQUFNO2dCQUNILE9BQU8sRUFBRSxDQUFDO2FBQ2I7U0FDSjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBIYW5kbGVyIHtcclxuICAgIGNvbnZlcnQocWMpIHtcclxuICAgICAgICBjb25zdCBpZ3YgPSAocWMudmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgICAgIGlmKGlndi50ZXh0VmFsdWUgJiYgaWd2LnRleHRWYWx1ZS5sZW5ndGggPT0gMCApe1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlndi5pc0lucHV0VGV4dCkge1xyXG4gICAgICAgICAgICBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnOiBxYy5sYWJlbENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZSc6IENvbXBhcmVUeXBlLkxpa2UsXHJcbiAgICAgICAgICAgICAgICAvLyAnVmFsdWUnOiBlbmNvZGVVUklDb21wb25lbnQoaWd2LnRleHRWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnOiBpZ3YudGV4dFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJzogUmVsYXRpb25UeXBlLkFuZCxcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlndi5nZXRPcmlnaW5hbFZhbHVlKCkuc3BsaXQoJywnKS5mb3JFYWNoKGl0ZW1WYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtVmFsdWUgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCc6IHFjLmxhYmVsQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAnQ29tcGFyZSc6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZSc6IGl0ZW1WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAnUmVsYXRpb24nOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYXJyWzBdWydMYnJhY2tldCddID0gJygnO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmJyYWNrZXQnXSA9ICcpJztcclxuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==