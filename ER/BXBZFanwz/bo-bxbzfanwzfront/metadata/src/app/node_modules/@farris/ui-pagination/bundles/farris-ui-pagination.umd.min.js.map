{"version":3,"sources":["ng://@farris/ui-pagination/lib/pagination.service.ts","ng://@farris/ui-pagination/lib/paginate.pipe.ts","ng://@farris/ui-pagination/lib/pagination-controls.component.ts","ng://@farris/ui-pagination/lib/pagination-controls.directive.ts","ng://@farris/ui-pagination/lib/selected-list/selected-list.component.ts","ng://@farris/ui-pagination/lib/pagination.module.ts"],"names":["PaginationService","prototype","defaultId","this","DEFAULT_ID","IdService","uuid","removeInstance","id","instances","register","instance","updateInstance","change","emit","changed","prop","getCurrentPage","currentPage","setCurrentPage","page","Math","ceil","totalItems","itemsPerPage","setPageList","newList","pageList","setTotalItems","setItemsPerPage","getInstance","clone","obj","target","i","hasOwnProperty","Injectable","args","providedIn","EventEmitter","LARGE_NUMBER","Number","MAX_SAFE_INTEGER","PaginatePipe","transform","collection","Array","_id","service","state","start","end","serverSideMode","remote","createInstance","perPage","stateIsIdentical","slice","saveState","config","length","checkConfig","missing","filter","Error","join","size","every","element","index","Pipe","name","pure","decorators","type","Optional","coerceToBoolean","input","PaginationControlsComponent","Object","defineProperty","_directionLinks","value","_autoHide","_responsive","onMouseLeave","$event","showPagesPanel","paginationDirective","changeDetectorRef","detectChanges","onMouseEnter","getTotalItems","changePageSizeHandler","pagesize","stopPropagation","getPageSize","pageSizeChange","onPageNumberChanged","inputEl","maxNumber","currentPageNumber","newpageList","goto","newpager","getCurrent","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","Output","ViewChild","mouseInSelectedList","viewMode","maxSize","previousLabel","nextLabel","screenReaderPaginationLabel","screenReaderPageLabel","screenReaderCurrentLabel","showPageList","showPageInfo","showPageNumber","showSelectedList","showGoToLast","showGoToFirst","showGotoInput","message","pageListFirstText","pageListLastText","pageChange","PaginationControlsDirective","ngOnInit","undefined","updatePageLinks","ngOnChanges","changes","ngOnDestroy","changeSub","unsubscribe","previous","checkValidId","setCurrent","next","first","last","getLastPage","isFirstPage","isLastPage","pageSize","pageIndex","inst","getPageList","pager","console","warn","_this","correctedCurrentPage","outOfBoundCorrection","setTimeout","pages","createPageArray","totalPages","paginationRange","halfWay","isStart","isEnd","isMiddle","ellipsesNeeded","label","pageNumber","calculatePageNumber","push","Directive","exportAs","ChangeDetectorRef","Injector","injector","get","subscribe","markForCheck","PaginationSelectedListComponent","onClose","close","onRemoveClick","remove","onClearClick","clear","onClick","data","PaginationModule","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","LocaleModule","declarations","providers","exports"],"mappings":"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","sourcesContent":["import { IdService } from '@farris/ui-common';\r\nimport {EventEmitter, Injectable} from '@angular/core';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PaginationService {\r\n\r\n    public change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    private instances: { [id: string]: PaginationInstance } = {};\r\n    private DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n\r\n    public defaultId(): string {\r\n        return this.DEFAULT_ID + new IdService().uuid();\r\n    }\r\n\r\n    removeInstance(id: string) {\r\n        if (this.instances[id]) {\r\n            delete this.instances[id];\r\n        }\r\n    }\r\n\r\n    public register(instance: PaginationInstance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        } else {\r\n            const changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance(instance: PaginationInstance): boolean {\r\n        let changed = false;\r\n        for (const prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    public getCurrentPage(id: string): number {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    public setCurrentPage(id: string, page: number) {\r\n        if (this.instances[id]) {\r\n            const instance = this.instances[id];\r\n            const maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setPageList(id: string, newList: number[]) {\r\n        if (this.instances[id]) {\r\n            const instance = this.instances[id];\r\n            instance.pageList = newList;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    public setTotalItems(id: string, totalItems: number) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    public setItemsPerPage(id: string, itemsPerPage: number) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    public getInstance(id: string = this.DEFAULT_ID): PaginationInstance {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {} as PaginationInstance;\r\n    }\r\n\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone(obj: any): any {\r\n        const target = {};\r\n        for (const i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n}\r\n","import { Optional, Pipe, PipeTransform } from '@angular/core';\r\nimport { PaginationService } from './pagination.service';\r\nimport { PaginationInstance } from './pagination-instance';\r\n\r\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\n\r\nexport type Collection<T> = T[] | ReadonlyArray<T>;\r\n\r\nexport interface PaginatePipeArgs {\r\n    id?: string;\r\n    itemsPerPage?: string | number;\r\n    currentPage?: string | number;\r\n    totalItems?: string | number;\r\n    pageList?: number[];\r\n    remote?: boolean;\r\n}\r\n\r\nexport interface PipeState {\r\n    collection: any[];\r\n    size: number;\r\n    start: number;\r\n    end: number;\r\n    slice: any[];\r\n}\r\n\r\n@Pipe({\r\n    name: 'paginate',\r\n    pure: false\r\n})\r\nexport class PaginatePipe implements PipeTransform {\r\n\r\n    // store the values from the last time the pipe was invoked\r\n    private state: { [id: string]: PipeState } = {};\r\n\r\n    constructor(@Optional() private service: PaginationService) {\r\n        if (!this.service) {\r\n            this.service = new PaginationService();\r\n        }\r\n    }\r\n\r\n    public transform<T, U extends Collection<T>>(collection: U, args: PaginatePipeArgs): U {\r\n\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n\r\n\r\n\r\n        if (!(collection instanceof Array)) {\r\n            const _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice as U;\r\n            } else {\r\n                return collection;\r\n            }\r\n        }\r\n\r\n        // const serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        const serverSideMode = args.remote;\r\n        const instance = this.createInstance(collection, args);\r\n        const id = instance.id;\r\n        let start: number;\r\n        let end: number;\r\n        let perPage = instance.itemsPerPage;\r\n\r\n        this.service.register(instance);\r\n\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n\r\n            const isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice as U;\r\n            } else {\r\n                const slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice as U;\r\n            }\r\n        }\r\n\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    }\r\n\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    private createInstance(collection: any[], config: PaginatePipeArgs): PaginationInstance {\r\n        // this.checkConfig(config);\r\n\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length,\r\n            pageList: config.pageList || [10, 20, 30, 50, 100],\r\n            remote: config.remote\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    private checkConfig(config: PaginatePipeArgs): void {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    private saveState(id: string, collection: any[], slice: any[], start: number, end: number) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    private stateIsIdentical(id: string, collection: any[], start: number, end: number): boolean {\r\n        const state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        const isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n\r\n        return state.slice.every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\n","import { PaginationService } from './pagination.service';\r\nimport { PaginationControlsDirective } from './pagination-controls.directive';\r\nimport {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, ElementRef, Optional} from '@angular/core';\r\n\r\nfunction coerceToBoolean(input: string | boolean): boolean {\r\n    return !!input && input !== 'false';\r\n}\r\n\r\n// styleUrls: ['./pagination-controls.component.css'],\r\n\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\n\r\n//  #farris-gotopagenumber{ text-align: center;\r\n//     -moz-appearance: textfield;\r\n//     width: 40px;\r\n// }\r\n// #farris-gotopagenumber::-webkit-outer-spin-button,\r\n// #farris-gotopagenumber::-webkit-inner-spin-button {\r\n//     -webkit-appearance: none;\r\n// }\r\n@Component({\r\n    selector: 'pagination-controls',\r\n    templateUrl: './pagination-controls.component.html',\r\n    styles: [],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PaginationControlsComponent {\r\n\r\n    private _directionLinks = true;\r\n    private _autoHide = false;\r\n    private _responsive = false;\r\n\r\n    private mouseInSelectedList = false;\r\n\r\n    /** æ¾ç¤ºæ¨¡å¼ï¼ default é»è®¤ï¼simple: ç®æ´ */\r\n    @Input() viewMode = 'default';\r\n\r\n    @Input() id: string;\r\n    @Input() maxSize = 7;\r\n    @Input()\r\n    get directionLinks(): boolean {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value: boolean) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get autoHide(): boolean {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value: boolean) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get responsive(): boolean {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value: boolean) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    @Input() previousLabel = 'Previous';\r\n    @Input() nextLabel = 'Next';\r\n    @Input() screenReaderPaginationLabel = 'Pagination';\r\n    @Input() screenReaderPageLabel = 'page';\r\n    @Input() screenReaderCurrentLabel = `You're on page`;\r\n    @Input() showPageList = true;\r\n    @Input() showPageInfo = true;\r\n    @Input() showPageNumber = true;\r\n\r\n    @Input() showSelectedList = false;\r\n\r\n    @Input() showGoToLast = false;\r\n    @Input() showGoToFirst = false;\r\n\r\n    /** æ¾ç¤ºè·³è½¬è³æå®é¡µç è¾å¥æ¡ */\r\n    @Input() showGotoInput = false;\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Input() message = 'æ¯é¡µ {0} æ¡è®°å½ï¼å± {1} æ¡è®°å½';\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Input() pageListFirstText = 'æ¾ç¤º';\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Input() pageListLastText = 'æ¡';\r\n\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() pageSizeChange = new EventEmitter<number>();\r\n    @ViewChild('p') paginationDirective: PaginationControlsDirective;\r\n\r\n    @ViewChild('focusPageSize') focusPageSizeRef: ElementRef<any>;\r\n    @ViewChild('pglistinfo') pglistinfo: ElementRef<any>;\r\n    showPagesPanel = false;\r\n\r\n    // constructor(@Optional() private pagerService: PaginationService) {\r\n    //     if (!this.pagerService) {\r\n    //         this.pagerService = new PaginationService();\r\n    //     }\r\n    // }\r\n\r\n    onMouseLeave($event) {\r\n        this.showPagesPanel = false;\r\n        this.paginationDirective.changeDetectorRef.detectChanges();\r\n    }\r\n\r\n    onMouseEnter($event: MouseEvent) {\r\n        if (this.paginationDirective.getTotalItems() === 0) {\r\n            return;\r\n        }\r\n        this.showPagesPanel = true;\r\n    }\r\n\r\n    changePageSizeHandler($event, pagesize) {\r\n        $event.stopPropagation();\r\n        // å½åé¡µåæ¬¡ç¹å»\r\n        if (pagesize === this.paginationDirective.getPageSize()) {\r\n            return;\r\n        }\r\n        this.showPagesPanel = false;\r\n        // this.removeOverlay();\r\n        this.pageSizeChange.emit(pagesize);\r\n    }\r\n\r\n    onPageNumberChanged(inputEl: KeyboardEvent, maxNumber) {\r\n        const target = inputEl.target as any;\r\n        const currentPageNumber = Number(target.value);\r\n        if (currentPageNumber > maxNumber) {\r\n            target.value = maxNumber;\r\n        } else {\r\n            if (currentPageNumber < 1) {\r\n                target.value = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    setPageList(newpageList: number[]) {\r\n        this.paginationDirective.setPageList(newpageList);\r\n    }\r\n\r\n    goto($event) {\r\n        const newpager = Number($event.target.value);\r\n        if (this.paginationDirective.getCurrent() !== newpager) {\r\n            this.paginationDirective.goto(newpager);\r\n        }\r\n    }\r\n\r\n}\r\n","import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, OnInit, OnChanges, OnDestroy, Optional, Injector } from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\n\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport interface Page {\r\n    label: string;\r\n    value: any;\r\n}\r\n\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\n@Directive({\r\n    selector: 'pagination-template,[pagination-template]',\r\n    exportAs: 'paginationApi'\r\n})\r\nexport class PaginationControlsDirective implements OnInit, OnChanges, OnDestroy {\r\n    @Input() id: string;\r\n    @Input() maxSize = 7;\r\n    @Output() pageChange: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() pageSizeChange = new EventEmitter<number>();\r\n    pages: Page[] = [];\r\n\r\n\r\n    private changeSub: Subscription;\r\n\r\n    constructor(@Optional() private service: PaginationService,\r\n                public changeDetectorRef: ChangeDetectorRef, @Optional() private injector: Injector) {\r\n\r\n        if (!this.service) {\r\n            if (this.injector) {\r\n                this.service = this.injector.get(PaginationService);\r\n            } else {\r\n                this.service = new PaginationService();\r\n            }\r\n        }\r\n\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n                if (this.id === id) {\r\n                    this.updatePageLinks();\r\n                    this.changeDetectorRef.markForCheck();\r\n                    this.changeDetectorRef.detectChanges();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnChanges(changes: any) {\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n        this.service.removeInstance(this.id);\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n    /**\r\n     * lucas added 2019/07/02\r\n     * Go to the first page\r\n     */\r\n    first($event: any) {\r\n        $event.stopPropagation();\r\n        this.checkValidId();\r\n        this.setCurrent( 1);\r\n    }\r\n    /**\r\n     * lucas added 2019/07/02\r\n     * Go to the last page\r\n     */\r\n    last($event: any) {\r\n        $event.stopPropagation();\r\n        this.checkValidId();\r\n        this.setCurrent(this.getLastPage());\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage(): boolean {\r\n        return this.getCurrent() === 1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage(): boolean {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page: number, pageSize?: number, $event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        if (!pageSize) {\r\n            pageSize =  this.getPageSize();\r\n        }\r\n\r\n        this.pageChange.emit({ pageIndex: page, pageSize});\r\n    }\r\n\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent(): number {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n\r\n\r\n    setPageList(pageList: number[]) {\r\n        this.service.setPageList(this.id, pageList);\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage(): number {\r\n        const inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n\r\n    getTotalItems(): number {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n\r\n    getPageList() {\r\n        return this.service.getInstance(this.id).pageList;\r\n    }\r\n\r\n    getPageSize() {\r\n        return this.service.getInstance(this.id).itemsPerPage;\r\n    }\r\n\r\n    goto(pager: number) {\r\n        // alert(pager);\r\n        this.setCurrent(pager);\r\n    }\r\n\r\n    private checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    private updatePageLinks() {\r\n        const inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.setCurrent(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        } else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    private outOfBoundCorrection(instance: PaginationInstance): number {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        } else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n\r\n        return instance.currentPage;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    private createPageArray(currentPage: number, itemsPerPage: number, totalItems: number, paginationRange: number): Page[] {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        const pages = [];\r\n        const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n\r\n        const ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            const pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            const openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            const closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            } else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label,\r\n                value: pageNumber\r\n            });\r\n            i ++;\r\n        }\r\n        return pages;\r\n    }\r\n\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    private calculatePageNumber(i: number, currentPage: number, paginationRange: number, totalPages: number) {\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        } else if (i === 1) {\r\n            return i;\r\n        } else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            } else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            } else {\r\n                return i;\r\n            }\r\n        } else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n","import { debounce } from 'rxjs/operators';\r\nimport { Component, OnInit, EventEmitter, Output, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { interval } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'pagination-selected-list',\r\n    templateUrl: './selected-list.component.html',\r\n})\r\nexport class PaginationSelectedListComponent implements OnInit, OnChanges {\r\n\r\n    @Input() data = [];\r\n\r\n    @Output() close = new EventEmitter();\r\n    @Output() remove = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n    }\r\n\r\n    onClose($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.close.emit();\r\n    }\r\n\r\n    onRemoveClick($event: MouseEvent, id: any) {\r\n        $event.stopPropagation();\r\n        this.remove.emit(id);\r\n    }\r\n\r\n    onClearClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.clear.emit();\r\n    }\r\n\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n","import { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PaginatePipe} from './paginate.pipe';\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationControlsComponent} from './pagination-controls.component';\r\nimport {PaginationControlsDirective} from './pagination-controls.directive';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PaginationSelectedListComponent } from './selected-list/selected-list.component';\r\n\r\nexport {PaginationInstance} from './pagination-instance';\r\nexport {PaginationService} from './pagination.service';\r\nexport {PaginationControlsComponent} from './pagination-controls.component';\r\nexport {PaginationControlsDirective} from './pagination-controls.directive';\r\nexport {PaginatePipe} from './paginate.pipe';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        LocaleModule\r\n    ],\r\n    declarations: [\r\n        PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective,\r\n        PaginationSelectedListComponent\r\n    ],\r\n    providers: [PaginationService],\r\n    exports: [\r\n        PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective,\r\n        PaginationSelectedListComponent\r\n    ]\r\n})\r\nexport class PaginationModule { }\r\n"]}