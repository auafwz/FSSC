/*
 * @Author: Witt
 * @Date: 2019-03-12 14:59:22
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-06-15 17:26:07
 */
import { Injector, Injectable, ChangeDetectorRef } from '@angular/core';
import { FrameContext } from './frame_context';
import { Subscription, Declaration } from '../event-mechanism/index';
import { FRAME_COMPONENT_INIT_HANDLER_TOKEN } from './tokens';
class FrameComponent {
    /**
     * 框架构造函数
     * @param injector 注入器
     */
    constructor(injector) {
        this.injector = injector;
        this.initialized = false;
        this.context = this.injector.get(FrameContext, null);
        if (this.context) {
            this.initialize();
        }
        // this.context.init(this);
        // this.viewModel = this.context.viewModel;
        // this.cd = this.getChangeDetectorRef();
        // // 必须先执行context的初始化，然后再初始化Subscription
        // this.initPublicEvent();
        // this.initSubscription();
        // this.restComponent();
    }
    ngOnInit() {
        this.initialize();
    }
    initialize() {
        if (!this.initialized) {
            this.context.init(this);
            this.viewModel = this.context.viewModel;
            this.cd = this.getChangeDetectorRef();
            // 必须先执行context的初始化，然后再初始化Subscription
            this.initPublicEvent();
            this.initSubscription();
            this.restComponent();
            this.onFrameComponentInit();
            this.initialized = true;
        }
    }
    /**
     * 执行组件初始化
     */
    onFrameComponentInit() {
        const frameComponentInitHandlers = this.injector.get(FRAME_COMPONENT_INIT_HANDLER_TOKEN, null);
        if (frameComponentInitHandlers && Array.isArray(frameComponentInitHandlers) && frameComponentInitHandlers.length > 0) {
            frameComponentInitHandlers.forEach((handler) => {
                handler.onComponentInit(this.context);
            });
        }
    }
    /**
     * 获取变更检测器实例
     * @todo：应该通过注入获取，但注入会引起表单编译。
     */
    getChangeDetectorRef() {
        // const cd = this.get<ChangeDetectorRef>(ChangeDetectorRef, null, InjectFlags.Optional);
        const cd = this.injector.get(ChangeDetectorRef, null);
        return cd;
    }
    /**
     * 将当前组件脱离变更检测树
     */
    detach() {
        if (this.isCdValid() === false) {
            return;
        }
        this.cd.detach();
    }
    /**
     * 将当前组件重新加入变更检测树
     */
    reattach() {
        if (this.isCdValid() === false) {
            return;
        }
        this.cd.reattach();
    }
    /**
     * 对当前组件进行一次变更检查
     */
    detectChanges() {
        if (this.isCdValid() === false) {
            return;
        }
        this.cd.detectChanges();
    }
    /**
     * 检测ChangeDetection是否有效
     * @todo: Can't be depend on the destroyed property, destroyed.
     */
    isCdValid() {
        return this.cd && this.cd['destroyed'] === false || false;
    }
    /**
     * 重置组件状态
     * @todo：AppContext是全局的，
     */
    restComponent() {
        if (this.context !== this.context.root) {
            return;
        }
        // 1、如果AppContext不是root并且父AppContext也不是root不清理;
        // 2、表单Module里注入了FARRIS_DEVKIT_APP_PROVIDERS里面有一个冗余的AppContext注入
        //    导致所有AppContext的根是该冗余的AppContext，所以要检测parent.parent。
        // 只清理根组件的session
        if (this.context.appContext.parent !== null && this.context.appContext.parent.parent !== null) {
            return;
        }
        // Repository被注册到全局了，模块依赖注入中的对象，没有重置时机，临时在根组件中进行注销。
        // @todo：应该清理全部repository，目前缺少全局管理所有Repository的地方。
        this.context.repository.reset();
        // 重置组件绑定数据
        this.context.bindingData.reset();
    }
    ngOnDestroy() {
        if (this.context.isRootFrameContext() === true) {
            this.context.appContext.unregisterFromManager(this.context);
        }
        this.eventPipes.forEach((eventPipe) => {
            eventPipe.disposeByCaller(this);
        });
        this.context.destroy();
    }
    /**
     * 初始化事件订阅
     */
    initSubscription() {
        this.subscription = this.getSubscription();
        if (!this.subscription) {
            return;
        }
        this.eventPipes = this.subscription.init(this);
    }
    /**
     * 获取component对应的订阅
     * @returns
     */
    getSubscription() {
        return this.injector.get(Subscription, null);
    }
    initPublicEvent() {
        this.declaration = this.getDeclaration();
        if (!this.declaration) {
            return;
        }
        this.declaration.init(this);
    }
    /**
     * 获取当前component对应的declaration
     * @returns
     */
    getDeclaration() {
        return this.injector.get(Declaration, null);
    }
    /**
     * 事件触发器，触发事件发布
     * @param eventName 待发布事件
     */
    trigger(eventName) {
        const subscription = this.context.commandBus.executingCommandCount$.subscribe((executingCommandCount) => {
            if (executingCommandCount !== 0) {
                return;
            }
            this.innerTrigger(eventName);
            // @todo
            // subscription存在未undefine的情况，待进一步排查。
            if (subscription) {
                subscription.unsubscribe();
            }
            else {
                setTimeout(() => {
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }, 0);
            }
        });
    }
    /**
     * 内部触发变更检测
     */
    innerTrigger(eventName) {
        // 根据事件名，查找对应的事件处理器
        const eventHandler = this.declaration && this.declaration[eventName];
        if (!eventHandler) {
            return;
        }
        // 执行事件
        eventHandler();
    }
}
FrameComponent.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FrameComponent.ctorParameters = () => [
    { type: Injector }
];
export { FrameComponent };
//# sourceMappingURL=data:application/json;base64,