{"version":3,"sources":["ng://@farris/component-querycondition/lib/service/communicationservice.ts","ng://@farris/component-querycondition/lib/service/convertorservice.ts","ng://@farris/component-querycondition/lib/entity/controltype.ts","ng://@farris/component-querycondition/lib/entity/controltype/dropdownlist/enumtype.ts","ng://@farris/component-querycondition/lib/entity/controltype/dropdownlist/integerenumvalue.ts","ng://@farris/component-querycondition/lib/entity/controltype/dropdownlist/stringenumvalue.ts","ng://@farris/component-querycondition/lib/entity/controltype/dropdownlist/boolenumvalue.ts","ng://@farris/component-querycondition/lib/entity/controltype/dropdownlist/ienumvalue.ts","ng://@farris/component-querycondition/lib/entity/controltype/dropdownlist/dropdownlistcontrol.ts","ng://@farris/component-querycondition/lib/entity/controltype/text/textcontrol.ts","ng://@farris/component-querycondition/lib/entity/controltype/daterange/date-range.control.ts","ng://@farris/component-querycondition/lib/entity/controltype/date/single-date-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/smarthelp/smarthelpcontrol.ts","ng://@farris/component-querycondition/lib/entity/controltype/numberrange/numberrangecontrol.ts","ng://@farris/component-querycondition/lib/entity/controltype/number/single-number-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/year/year-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/checkbox/checkbox-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/daterange/datertime-range-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/month/month-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/monthrange/month-range-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/date/single-date-time-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/combolookup/combolookup-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/radio/radio-control.ts","ng://@farris/component-querycondition/lib/entity/controltype/input-group/inputgroupcontrol.ts","ng://@farris/component-querycondition/lib/entity/controltype/icontrol.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/textvalue.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/numberrangevaue.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/daterangevalue.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/smarthelpvalue.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/single-date-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/single-number-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/single-year-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/checkbox-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/dropdownlistvalue.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/single-month-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/month-range-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/single-date-time-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/combolookup-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/radio-value.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/inputgroupvalue.ts","ng://@farris/component-querycondition/lib/entity/conditionvalue/ivalue.ts","ng://@farris/component-querycondition/lib/entity/querycondition.ts","ng://@farris/component-querycondition/lib/entity/valuetype.ts","ng://@farris/component-querycondition/lib/service/solution.service.ts","ng://@farris/component-querycondition/lib/querycondition.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/numberrangecomponent/numberrange.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/input/input.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/inputgroup/inputgroup.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/smarthelp/smarthelp.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/dropdown/dropdownlist.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/numbercomponent/single-number.component.ts","ng://@farris/component-querycondition/lib/fieldconfigdialog/configdialog.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/checkbox/checkbox.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/radio/radio.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/datepicker/datepicker.component.ts","ng://@farris/component-querycondition/lib/controlcomponent/combolookup/combolookup.component.ts","ng://@farris/component-querycondition/lib/directives/clear-fields.directive.ts","ng://@farris/component-querycondition/lib/directives/label-text-multi.directive.ts","ng://@farris/component-querycondition/lib/querycondition.module.ts","ng://@farris/component-querycondition/lib/entity/querysolutionvo.ts","ng://@farris/component-querycondition/lib/entity/comparetype.ts","ng://@farris/component-querycondition/lib/entity/fieldconfig/fieldconfig.ts"],"names":["CommunicationService","Injectable","this","eventbus","EventEmitter","ConvertorService","ControlType","Text","SingleDate","SmartHelp","DropDownList","DateRange","NumberRange","SingleNumber","SingleYear","BoolCheck","DateTimeRange","SingleMonth","MonthRange","SingleDateTime","ComboLookUp","Radio","InputGroup","EnumType","IntType","StringType","BoolType","EnumIntegerValue","prototype","getEnumType","getEnumValueName","name","getEnumValue","value","EnumStringValue","EnumBoolValue","EnumValueConvert","convertJObject","obj","enumValue","enumType","jobj","Object","initFromJobject","content","assign","DropDownListControl","getControlType","isRequired","require","DropDownListControlConvert","convertToObject","dropDownListControl","valueType","enumValues","jarray_1","convertor_1","forEach","element","push","multiSelect","panelHeight","placeholder","className","initFromObject","control","Array","convertor","TextControl","DateRangeControl","SingleDateControl","SmartHelpContol","NumberRangeControl","SingleNumberControl","SingleYearControl","CheckBoxControl","data","separator","isStringValue","DateTimeRangeControl","SingleMonthControl","MonthRangeControl","SingleDateTimeControl","ComboLookUpControl","RadioControl","RadioControlConvert","radioControl","horizontal","showLabel","disabled","InputGroupControl","DialogConfig","ControlConvert","controlType","TextValue","clearValue","undefined","setOriginalValue","getOriginalValue","isEmpty","trim","NumberRangeValue","startValue","endValue","Error","begin","end","parseFloat","NumberRangeValueConvertor","numberRangeValue","DateRangeValue","formatted","startTime","split","delimiter","endTime","SmartHelpValue","_this","args","valueField","valueArr","map","helpItem","getPropValue","cloneDeep","length","join","textValue","isInputText","getTextValue","textField","textArr","arg","shift","SingleDateValue","dateValue","date","SingleNumberValue","numValue","SingleYearValue","yearValue","year","CheckBoxValue","v","DropDownListValue","key","hasOwnProperty","SingleMonthValue","monthValue","month","MonthRangeValue","SingleDateTimeValue","datetimeValue","datetime","ComboLookUpValue","RadioValue","InputGroupValue","item","targetField","ConditionValueConvert","conditionValue","QueryCondition","QueryConditionConvert","queryCondition","id","fieldCode","fieldName","placeHolder","valueConvert","controlConvertor","beginPlaceHolder","endPlaceHolder","conditonValue","conditionControl","ValueType","Value","Enum","Express","SolutionService","getControlConfigState","controlConfigState","updateControlConfigState","simpleCondition","next","convertToSimpleQueryConditions","fields","simpleQueryCondition","field","labelCode","getSimpleControl","controlData","simpleControl","controlTypeMap","get","controltype","updateSimpleControl","resultObj","sourceProps","source","distProps","m","k","convertToQueryConditions","_a","getControlAndValue","valueData","editable","groupText","usageMode","dialogOptions","setInputGroupDialog","click","format","returnFormat","weekSelect","showWeekNumbers","enableCustomFormat","emptyString","precision","textAlign","bigNumber","isBigNumber","min","minValue","max","maxValue","uri","displayType","idField","mapFields","preEventCmd","postEventCmd","context","enableFullTree","loadTreeDataType","singleSelect","expandLevel","enableCascade","nosearch","displayFields","displayTextSeparator","clearFields","clear","dialogTitle","panelWidth","pageSize","pageList","displayTypeTransform","maxDate","minDate","disable","getGuid","s4","Math","random","toString","substring","showInfo","message","infoType","title","timeout","notify","config","position","success","msg","info","warning","error","getConditionItemTitle","setValues","solution","fieldConfigs","readonly","qc","conditions","queryConditions","find","c","isNumCheck","updateControl","prop","isValid","type","filter","condition","inputGroupControlData","modalConfigData","modalConfig","dialogConfig","modalId","JSON","parse","replace","showHeader","showCloseButton","showMaxButton","width","height","NotifyService","BehaviorSubject","Map","QueryConditionComponent","defineProperty","_resetFieldConfigs","solutionService","_selectedFieldConditions","ngOnDestroy","ngOnInit","currentLocale","localeIds","isControlInline","selectedFieldConditions","ngAfterViewInit","ngAfterViewChecked","hasSetMultiClass","currentItem","indexOf","getStyle","configDialogConfirm","event","fieldConditionsChange","emit","openFieldConfigDialog","configDialog","inputSelectedFileds","dialog","show","resetSelectedConditionValues","exceptRequired","fieldCondition","conditionChange","confirmLabelFormat","hasCustom_1","labelFormat","noCheckBoxConditions_1","maxLength_1","showCompleteLabel","concat","Component","selector","template","encapsulation","ViewEncapsulation","None","providers","ComponentFactoryResolver","Injector","BsModalService","LocaleService","Input","Output","ViewChild","communicationService","convertorService","resolver","injector","modalService","localeService","en","zh-CHS","showButton","fieldCodeOfClearFields","ngZone","LOCALE_ID","NgZone","NumberRangeComponent","ngOnChanges","changes","currentValue","firstChange","some","constructMultiFieldNumberRange","testId","canNull","valueChange","dataArray","start","isNaN","beginValue","beginValueChange","$event","endValueChange","changeFields","InputComponent","constructTextItem","_inputItem","textItem","textValueObj","onBlur","InputGroupComponent","constructInputGroupItem","inputGroupItem","inputGroupValueObj","getInputGroupBindingInfo","inputGroupControl","stringify","onClick","options","handle","selectedItem","isTextFromDialog","textFormDialog","SolutionSmartHelpComponent","getSmartHelpBindingInfo","lookup","textChanged","subscribe","textChangedHandler","smartHelpControl","dialogWidth","dialogHeight","smartHelpValue","parseInt","clearData","helpValue","selectedDataHandler","mappingEmitter","onBeforeOpen","t","ids","n","displayValue","of","DropDownListComponent","getDataSource","initialValue","selectedItemId","dropDownListDataSource","selectChange","selected","onClear","SingleNumberComponent","number","numberValue","ConfigDialogComponent","selectedIds","getValue","cancel","cancelEmitter","multiSelectCmp","searchValue","close","confirm","_fieldData","selectedFields","index","findIndex","filedsDataSource","confirmEmitter","reset","CheckBoxComponent","_item","nr","checkValue","valueChanged","RadioComponent","radioValue","HostBinding","cls","DatePickerComponent","dateRange","bindValue","dateFormat","showType","ShowType","noDateAndMonth","showTime","noDate","updateParamsByCondition","selectWeek","simpleConditions","findSimpleCondition","onDateChange","returnFormatted","dateRangeDatesDelimiter","all","ComboLookUpComponent","getComboLookUpBindingInfo","autoWidth","valueChangeHandler","selections","comboLookUpControl","comboLookUpValue","selectedValues","ClearFieldsDirective","ngCtrl","valueChanges","qcc","conditionItem","Directive","NgControl","decorators","Optional","Self","inject","LabelTextMultiDirective","_enableMulti","judgeMulti","runOutsideAngular","setTimeout","textEl","el","nativeElement","querySelector","clientWidth","scrollWidth","multiCls","ElementRef","QueryConditionModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FarrisDialogModule","LayoutModule","LookupModule","MultiSelectModule","FieldGroupModule","InputGroupModule","FDropdownDirectiveTypeModule","LoadingModule","forRoot","NotifyModule","FarrisDatePickerModule","LocaleModule","ComboListModule","NumberSpinnerModule","FarrisFormsModule","ComboLookupModule","declarations","entryComponents","bootstrap","exports","QuerySolutionVo","isDefault","isChanged","QuerySolutionVoConvertor","querySolutionVo","belongId","code","isSystem","jArray_1","queryConditionString","conditionJarry","convertor_2","formatFromJobject","formatConvertJObject","CompareType","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","Like","FieldConfig"],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\r\n/**\r\n * ä¸ºäºå¼å®¹æ§ä»£ç ï¼\r\n * ä¿çä¸ä¸ªç©ºçservice\r\n*/\r\n@Injectable()\r\nexport class CommunicationService {\r\n    \r\n    public eventbus: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n}","import { Injectable } from '@angular/core';\r\n/**\r\n * ä¸ºäºå¼å®¹æ§ä»£ç ï¼\r\n * ä¿çä¸ä¸ªç©ºçservice\r\n*/\r\n@Injectable()\r\nexport class ConvertorService {\r\n    constructor(){}\r\n}","export enum ControlType{\r\n    Text = 0,\r\n    SingleDate = 1,\r\n    SmartHelp = 2,\r\n    DropDownList = 3,\r\n    DateRange = 4,\r\n    NumberRange = 5,\r\n    SingleNumber = 6,\r\n    SingleYear = 7,\r\n    BoolCheck = 8,\r\n    DateTimeRange = 9,\r\n    SingleMonth = 10,\r\n    MonthRange = 11,\r\n    SingleDateTime = 12,\r\n    ComboLookUp = 13,\r\n    Radio = 14,\r\n    InputGroup = 15\r\n}","export enum EnumType{\r\n    IntType=0,\r\n    StringType=1,\r\n    BoolType=2\r\n}","import { IEnumValue } from \"./ienumvalue\";\r\nimport { EnumType } from \"./enumtype\";\r\n\r\n/**\r\n * ä¸æåè¡¨Integerç±»å\r\n */\r\nexport class EnumIntegerValue implements IEnumValue{\r\n    getEnumType(): EnumType {\r\n        return EnumType.IntType;\r\n    }\r\n    \r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:number;\r\n}","import { IEnumValue } from \"./ienumvalue\";\r\nimport { EnumType } from \"./enumtype\";\r\n\r\n/**\r\n * ä¸æåè¡¨Stringç±»å\r\n */\r\nexport class EnumStringValue implements IEnumValue{\r\n    getEnumType(): EnumType {\r\n        return  EnumType.StringType;\r\n    }\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n    \r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}","import { IEnumValue } from \"./ienumvalue\";\r\nimport { EnumType } from \"./enumtype\";\r\n\r\n/**\r\n * ä¸æåè¡¨Boolç±»å\r\n */\r\nexport class EnumBoolValue implements IEnumValue{\r\n    \r\n    getEnumType(): EnumType {\r\n        return  EnumType.BoolType;\r\n    }\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:boolean;\r\n}","import { EnumType } from \"./enumtype\";\r\nimport { EnumIntegerValue } from \"./integerenumvalue\";\r\nimport { EnumStringValue } from \"./stringenumvalue\";\r\nimport { EnumBoolValue } from \"./boolenumvalue\";\r\n\r\nexport interface IEnumValue{\r\n    getEnumType():EnumType;\r\n    getEnumValueName():string;\r\n    getEnumValue():any;\r\n}\r\n\r\nexport class EnumValueConvert{\r\n\r\n    convertJObject(obj:IEnumValue):Object{\r\n        let enumValue=obj as IEnumValue;\r\n        let enumType=enumValue.getEnumType();\r\n        let jobj=new Object();\r\n        jobj[\"Type\"]=enumType;\r\n        jobj[\"Content\"]=enumValue;\r\n        return jobj;\r\n    }\r\n\r\n    initFromJobject(jobj:Object):IEnumValue{\r\n        let enumType=jobj[\"Type\"] as EnumType;\r\n        let content=jobj[\"Content\"] as IEnumValue;\r\n        if(enumType==EnumType.IntType){\r\n            return Object.assign(new EnumIntegerValue(),content) ;\r\n        }\r\n        else if(enumType==EnumType.BoolType){\r\n            return Object.assign(new EnumBoolValue(),content) ;\r\n        }\r\n        else{\r\n            return Object.assign(new EnumStringValue(),content) ;\r\n        }\r\n    }\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { EnumType } from \"./enumtype\";\r\nimport { IEnumValue, EnumValueConvert } from \"./ienumvalue\";\r\nimport { EnumStringValue } from \"./stringenumvalue\";\r\nimport { EnumBoolValue } from \"./boolenumvalue\";\r\nimport { EnumIntegerValue } from \"./integerenumvalue\";\r\n\r\n/**\r\n * ä¸æåè¡¨æ§ä»¶\r\n */\r\nexport class DropDownListControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.DropDownList;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * ä¸æå¼ç±»å\r\n     */\r\n    valueType:EnumType;\r\n\r\n    /**\r\n     * ä¸ææ°æ®æºåè¡¨\r\n     * è¯¥å±æ§ä¸ºIEnumValueæ¥å£ç±»åï¼å·ä½å®ç°ç±»å¦ä¸ï¼\r\n     * 1.å¸å°ç±»åï¼EnumBoolValue,å¸å°ç±»åçæ§ä»¶ä¼è½¬æä¸æåè¡¨ï¼å®ç°ç±»ä½¿ç¨EnumBoolValue\r\n     * 2.å­ç¬¦ä¸²ç±»åï¼EnumStringValue\r\n     * 3.æ´åç±»åï¼EnumIntegerValue ä¾å¦Radio Buttonç±»åéè¦ä½¿ç¨EnumIntegerValueå®ç°ç±»\r\n     */\r\n    enumValues:Array<IEnumValue>;\r\n\r\n    /**\r\n     * æ¯å¦å¤é\r\n    */\r\n    multiSelect: boolean;\r\n\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n\r\n    placeholder: string;\r\n\r\n    panelHeight: number | string;\r\n\r\n    require: boolean;\r\n}\r\n\r\n/**\r\n * ä¸æåè¡¨æ§ä»¶åºååä¸ååºååå¨\r\n */\r\nexport class DropDownListControlConvert{\r\n\r\n    /**\r\n     * åºåå\r\n     * @param obj ä¸æåè¡¨æ§ä»¶å®ä½\r\n     */\r\n    convertToObject(obj: DropDownListControl){\r\n        let dropDownListControl = obj as DropDownListControl;\r\n        let jobj = new Object();\r\n        jobj[\"valueType\"] = dropDownListControl.valueType;\r\n        if(dropDownListControl.enumValues != null){\r\n            let jarray = jobj[\"enumValues\"] = [];\r\n            let convertor = new EnumValueConvert();\r\n            dropDownListControl.enumValues.forEach(element => {\r\n                if(dropDownListControl.valueType == EnumType.BoolType){\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(),element)));\r\n                }\r\n                else if(dropDownListControl.valueType == EnumType.IntType){\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(),element)));\r\n                }\r\n                else{\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(),element)));\r\n                }\r\n            });\r\n        }\r\n        jobj[\"multiSelect\"] = dropDownListControl.multiSelect;\r\n        jobj[\"panelHeight\"] = dropDownListControl.panelHeight;\r\n        jobj[\"placeholder\"] = dropDownListControl.placeholder;\r\n        jobj[\"className\"] = dropDownListControl.className;\r\n        jobj[\"require\"] = dropDownListControl.require;\r\n        return jobj;\r\n    }\r\n\r\n    /**\r\n     * ååºåå\r\n     * @param jobj ä¸æåè¡¨æ§ä»¶å®ä½åºåååçJSONå¯¹è±¡\r\n     */\r\n    initFromObject(jobj: Object): DropDownListControl{\r\n        let control = new DropDownListControl();\r\n        if(jobj[\"valueType\"] != null){\r\n            control.valueType = jobj[\"valueType\"] as number;\r\n        }\r\n        if(jobj[\"enumValues\"] != null){\r\n            control.enumValues = new Array<IEnumValue>();\r\n            jobj[\"enumValues\"].forEach(element => {\r\n                let convertor = new EnumValueConvert();\r\n                control.enumValues.push(convertor.initFromJobject(element));\r\n            });\r\n        }\r\n        if(jobj[\"multiSelect\"] != null){\r\n            control.multiSelect = jobj[\"multiSelect\"];\r\n        }\r\n        if(jobj[\"panelHeight\"] != null){\r\n            control.panelHeight = jobj[\"panelHeight\"];\r\n        }\r\n        if(jobj[\"placeholder\"] != null){\r\n            control.placeholder = jobj[\"placeholder\"];\r\n        }\r\n        if(jobj[\"className\"] != null){\r\n            control.className = jobj[\"className\"];\r\n        }\r\n        if(jobj[\"require\"] != null){\r\n            control.require = jobj[\"require\"];\r\n        }\r\n        return control;\r\n    }\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * ææ¬æ§ä»¶\r\n */\r\nexport class TextControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»åï¼è¿åå¼ï¼ææ¬æ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Text;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * å­ç¬¦ä¸²é¿åº¦\r\n     */\r\n    length: number;\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n\r\n    placeholder: string;\r\n\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥æåºé´æ§ä»¶\r\n */\r\nexport class DateRangeControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRange;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n        /**\r\n    * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n    */\r\n   returnFormat: string;\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n        /*\r\n    *ç»ææç¤º\r\n    */\r\n //  beginPlaceHolder: string;\r\n   /**\r\n   * èµ·å§æç¤º\r\n   */\r\n   //endPlaceHolder: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n    weekSelect: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥ææ§ä»¶\r\n */\r\nexport class SingleDateControl implements IControl {\r\n\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleDate;\r\n    }\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n    /**\r\n     * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n     */\r\n    returnFormat: string;\r\n\r\n    /**\r\n    * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * å¸®å©æ§ä»¶\r\n */\r\nexport class SmartHelpContol implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.SmartHelp;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n\r\n    /**\r\n     * å¸®å©æ°æ®æº\r\n     */\r\n    uri: string;\r\n\r\n    /**\r\n     * å¸®å©çææ¬æ¾ç¤ºå­æ®µ\r\n     */\r\n    textField: string;\r\n\r\n    /**\r\n     * å¸®å©å¼å­æ®µ\r\n     */\r\n    valueField: string;\r\n\r\n    /**\r\n     * å­æ®µæ å°ä¿¡æ¯\r\n     */\r\n    mapFields: any;\r\n\r\n    /**\r\n     * ä¸»é®\r\n    */\r\n    idField: any;\r\n\r\n    /**\r\n     * å¸®å©å±ç¤ºå½¢å¼ï¼æ®éåè¡¨ï¼æ ç»æ\r\n    */\r\n    displayType: any;\r\n\r\n    /**\r\n     * è¿è¡æ¶åæ°éç½®ä¼ é\r\n    */\r\n    context: any;\r\n\r\n    /**\r\n     * å¸®å©åäºä»¶\r\n    */\r\n    preEventCmd: any;\r\n\r\n    /**\r\n    * å¸®å©åäºä»¶\r\n    */\r\n    postEventCmd: any;\r\n\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n\r\n    /**\r\n     * æé å®æ´æ \r\n     */\r\n    enableFullTree: boolean;\r\n\r\n    /**\r\n     * æ°æ®å è½½æ¹å¼\r\n     */\r\n    loadTreeDataType: string;\r\n\r\n    /**\r\n     * æ¯å¦å¤é\r\n     */\r\n    singleSelect: boolean;\r\n\r\n    /**å±å¼å°æå®çº§æ° */\r\n    expandLevel: number;\r\n\r\n    /**\r\n     * å¯ç¨çº§èéæ©\r\n     */\r\n    enableCascade: boolean;\r\n\r\n    /**\r\n     * æ§ä»¶ä¸ºç©ºæ¶æç¤ºä¿¡æ¯ï¼å¼å®¹æ§è¡¨å\r\n     */\r\n    placeholder: string;\r\n\r\n    /**\r\n     * æ§ä»¶æ¯å¦å¿å¡«\r\n     */\r\n    require: boolean;\r\n\r\n    //æææå·¥è¾å¥ãéæ©ä¸¤ç¨æ¶ï¼nosearchè®¾ä¸ºtrue\r\n    nosearch: boolean;\r\n\r\n    /**\r\n     * éæ©æ°æ®åèªå®ä¹æ¾ç¤ºçå­æ®µï¼é»è®¤ä¸ºç©ºï¼ä¸ºç©ºæ¶æ¾ç¤ºå¸®å©è®¾ç½®çææ¬å­æ®µ\r\n     */\r\n    displayFields: string;\r\n\r\n    /**\r\n     * èªå®ä¹æ¾ç¤ºå­æ®µæ¶ï¼ä¸åå­æ®µé´çåéç¬¦\r\n     */\r\n    displayTextSeparator: string;\r\n\r\n    /**\r\n     * æ¯å¦åè®¸ç¼è¾\r\n     */\r\n    editable: boolean;\r\n\r\n    /**\r\n     * å¼ååæ¶ï¼éè¦æ¸ç©ºåªäºå­æ®µ\r\n     */\r\n    clearFields: string;\r\n\r\n    /**\r\n     * å¸®å©æ¸ç©ºäºä»¶\r\n     */\r\n    clear: any;\r\n    /**\r\n     * é»è®¤åé¡µ\r\n     */\r\n    pageSize:number;\r\n    /**\r\n     * åé¡µ\r\n     */\r\n    pageList:string;\r\n   // æ é¢\r\n   dialogTitle: string;\r\n   // å®½åº¦\r\n   panelWidth: number;\r\n   // é«åº¦\r\n   panelHeight: number;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ°å­åºé´æ§ä»¶\r\n */\r\nexport class NumberRangeControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.NumberRange;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * é¿åº¦\r\n     */\r\n    length: number;\r\n\r\n    /**\r\n     * ç²¾åº¦\r\n     */\r\n    precision: number;\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    /*\r\n    *ç»ææç¤º\r\n    */\r\n   //beginPlaceHolder: string;\r\n   /**\r\n   * èµ·å§æç¤º\r\n   */\r\n  // endPlaceHolder: string;\r\n\r\n    placeholder: string;\r\n\r\n    require: boolean;\r\n\r\n    textAlign: string;\r\n\r\n    bigNumber: boolean;\r\n\r\n    min: number;\r\n    max: number;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ°å­åºé´æ§ä»¶\r\n */\r\nexport class SingleNumberControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleNumber;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * é¿åº¦\r\n     */\r\n    length: number;\r\n\r\n    /**\r\n     * ç²¾åº¦\r\n     */\r\n    precision: number;\r\n    /**\r\n    * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n\r\n    placeholder: string;\r\n\r\n    require: boolean;\r\n\r\n    textAlign: string;\r\n\r\n    bigNumber: boolean;\r\n\r\n    min: number;\r\n    max: number;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥ææ§ä»¶\r\n */\r\nexport class SingleYearControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleYear;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n     /**\r\n     * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n     */\r\n    returnFormat:string;\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n    \r\n    // æå¤§å¼\r\n    maxDate:string|Date|null;\r\n    // æå°å¼\r\n    minDate:string|Date|null;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\ninterface Checkbox {\r\n    value: any;\r\n    name: any;\r\n}\r\n/**\r\n * æ¥ææ§ä»¶\r\n */\r\nexport class CheckBoxControl implements IControl {\r\n    \r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.BoolCheck;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n    * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    /* radio æ°ç» */\r\n    data: Checkbox[] = [];\r\n    /* å¤éæ¡name */\r\n    name: string;\r\n    /* æ¯å¦æ°´å¹³åå¸ */\r\n    horizontal: boolean;\r\n    /* ç¦ç¨ */\r\n    disable: boolean;\r\n    /* å¤éæ¡ç»çå¼ */\r\n    value: any;\r\n    /* åéç¬¦ é»è®¤éå·*/\r\n    separator = ',';\r\n    /* å¼ç±»åæ¯å¦æ¯string */\r\n    isStringValue = true;\r\n\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥æåºé´æ§ä»¶\r\n */\r\nexport class DateTimeRangeControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.DateTimeRange;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n        /**\r\n     * å¼ºå¶ä½¿ç¨èªå®ä¹æ ¼å¼\r\n     */\r\n    enableCustomFormat:boolean;\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n         /**\r\n     * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n     */\r\n    returnFormat:string;\r\n\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n        // èµ·å§æç¤º\r\n       // beginPlaceHolder:string;\r\n        // ç»ææç¤º\r\n      //  endPlaceHolder:string;\r\n    \r\n    //weekSelect: boolean;\r\n    //showWeekNumbers: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥ææ§ä»¶\r\n */\r\nexport class SingleMonthControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleMonth;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n    /**\r\n     * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n     */\r\n    returnFormat:string;\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥æåºé´æ§ä»¶\r\n */\r\nexport class MonthRangeControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.MonthRange;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n        /**\r\n    * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n    */\r\n   returnFormat: string;\r\n   /*\r\n  *ç»ææç¤º\r\n  */\r\n //beginPlaceHolder: string;\r\n /**\r\n * èµ·å§æç¤º\r\n */\r\n// endPlaceHolder: string;\r\n\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥ææ§ä»¶\r\n */\r\nexport class SingleDateTimeControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleDateTime;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n       /**\r\n     * å¼ºå¶ä½¿ç¨èªå®ä¹æ ¼å¼\r\n     */\r\n    enableCustomFormat:boolean;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format: string;\r\n    /**\r\n     * è¿åæå¡å¨ç«¯æ¥ææ ¼å¼\r\n     */\r\n    returnFormat: string;\r\n\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n    placeholder: string;\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * å¸®å©æ§ä»¶\r\n */\r\nexport class ComboLookUpControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.ComboLookUp;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * ä¸æå¸®å©æ°æ®æº\r\n     */\r\n    uri: string;\r\n\r\n    /**\r\n     * ä¸»é®\r\n     */\r\n    idField: any;\r\n\r\n    /**\r\n     * ä¸æå¸®å©å¼å­æ®µ\r\n     */\r\n    valueField: string;\r\n\r\n    /**\r\n     * ä¸æå¸®å©ææ¬æ¾ç¤ºå­æ®µ\r\n     */\r\n    textField: string;\r\n\r\n    /**\r\n     * å­æ®µæ å°ä¿¡æ¯\r\n     */\r\n    mapFields: any;\r\n\r\n    /**\r\n     * ä¸æå¸®å©å±ç¤ºå½¢å¼ï¼ä¸æåè¡¨å¸®å©ï¼ä¸ææ åè¡¨å¸®å©\r\n     */\r\n    displayType: any;\r\n\r\n    /**\r\n     * å¸®å©åäºä»¶\r\n     */\r\n    preEventCmd: any;\r\n\r\n    /**\r\n     * å¸®å©åäºä»¶\r\n     */\r\n    postEventCmd: any;\r\n\r\n    /**\r\n     * æ¯å¦å¤é\r\n     */\r\n    singleSelect: boolean;\r\n\r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n     */\r\n    className: string;\r\n\r\n    placeholder: string;\r\n\r\n    panelWidth: number;\r\n\r\n    panelHeight: number;\r\n\r\n    require: boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { EnumType } from \"../dropdownlist/enumtype\";\r\nimport { IEnumValue, EnumValueConvert } from \"../dropdownlist/ienumvalue\";\r\nimport { EnumStringValue } from \"../dropdownlist/stringenumvalue\";\r\nimport { EnumBoolValue } from \"../dropdownlist/boolenumvalue\";\r\nimport { EnumIntegerValue } from \"../dropdownlist/integerenumvalue\";\r\n\r\n/**\r\n * åéç»æ§ä»¶\r\n */\r\nexport class RadioControl implements IControl {\r\n    \r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Radio;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    /**\r\n     * åéæ¡å¼ç±»å\r\n     */\r\n    valueType: EnumType;\r\n\r\n    /**\r\n     * åéæ¡æ°æ®æºåè¡¨\r\n     * è¯¥å±æ§ä¸ºIEnumValueæ¥å£ç±»åï¼å·ä½å®ç°ç±»å¦ä¸ï¼\r\n     * 1.å¸å°ç±»åï¼EnumBoolValue\r\n     * 2.å­ç¬¦ä¸²ç±»åï¼EnumStringValue\r\n     * 3.æ´åç±»åï¼EnumIntegerValue ä¾å¦Radio Buttonç±»åéè¦ä½¿ç¨EnumIntegerValueå®ç°ç±»\r\n     */\r\n    enumValues: Array<IEnumValue>;\r\n\r\n    /**\r\n    * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n\r\n    /**\r\n     * æ¯å¦æ¾ç¤ºlabel\r\n     */\r\n    showLabel: boolean;\r\n    \r\n    /* æ¯å¦æ°´å¹³åå¸ */\r\n    horizontal: boolean;\r\n    \r\n    /* æ¯å¦ç¦ç¨ */\r\n    disabled: boolean;\r\n    \r\n    require: boolean;\r\n}\r\n\r\n/**\r\n* åéç»æ§ä»¶åºååä¸ååºååå¨\r\n*/\r\nexport class RadioControlConvert{\r\n    /**\r\n     * åºåå\r\n     * @param obj åéç»æ§ä»¶å®ä½\r\n     */\r\n    convertToObject(obj: RadioControl){\r\n        let radioControl = obj as RadioControl;\r\n        let jobj = new Object();\r\n        jobj[\"valueType\"] = radioControl.valueType;\r\n        if(radioControl.enumValues != null){\r\n            let jarray = jobj[\"enumValues\"] = [];\r\n            let convertor = new EnumValueConvert();\r\n            radioControl.enumValues.forEach(element => {\r\n                if(radioControl.valueType == EnumType.BoolType){\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(),element)));\r\n                }\r\n                else if(radioControl.valueType == EnumType.IntType){\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(),element)));\r\n                }\r\n                else{\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(),element)));\r\n                }\r\n            });\r\n        }\r\n        jobj[\"horizontal\"] = radioControl.horizontal;\r\n        jobj[\"showLabel\"] = radioControl.showLabel;\r\n        jobj[\"disabled\"] = radioControl.disabled;\r\n        jobj[\"className\"] = radioControl.className;\r\n        jobj[\"require\"] = radioControl.require;\r\n        return jobj;\r\n    }\r\n\r\n    /**\r\n     * ååºåå\r\n     * @param jobj åéç»æ§ä»¶å®ä½åºåååçJSONå¯¹è±¡\r\n     */\r\n    initFromObject(jobj: Object): RadioControl{\r\n        let control = new RadioControl();\r\n        if(jobj[\"valueType\"] != null){\r\n            control.valueType = jobj[\"valueType\"] as number;\r\n        }\r\n        if(jobj[\"enumValues\"] != null){\r\n            control.enumValues = new Array<IEnumValue>();\r\n            jobj[\"enumValues\"].forEach(element => {\r\n                let convertor = new EnumValueConvert();\r\n                control.enumValues.push(convertor.initFromJobject(element));\r\n            });\r\n        }\r\n        if(jobj[\"horizontal\"] != null){\r\n            control.horizontal = jobj[\"horizontal\"];\r\n        }\r\n        if(jobj[\"showLabel\"] != null){\r\n            control.showLabel = jobj[\"showLabel\"];\r\n        }\r\n        if(jobj[\"disabled\"] != null){\r\n            control.disabled = jobj[\"disabled\"];\r\n        }\r\n        if(jobj[\"className\"] != null){\r\n            control.className = jobj[\"className\"];\r\n        }\r\n        if(jobj[\"require\"] != null){\r\n            control.require = jobj[\"require\"];\r\n        }\r\n        return control;\r\n    }\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æºè½è¾å¥æ¡æ§ä»¶\r\n */\r\nexport class InputGroupControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»åï¼è¿åå¼ï¼æºè½è¾å¥æ¡æ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.InputGroup;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.require;\r\n    }\r\n    \r\n    /**\r\n     * èªå®ä¹æ ·å¼\r\n    */\r\n    className: string;\r\n\r\n    /**\r\n     * æ¯å¦å¿å¡«\r\n     */\r\n    require: boolean;\r\n\r\n    /**\r\n     * æ¯å¦åè®¸è¾å¥\r\n     */\r\n    editable: boolean;\r\n\r\n    /**\r\n     * æé®æ¾ç¤ºææ¬\r\n     */\r\n    groupText: string;\r\n\r\n    /**\r\n     * ä½¿ç¨æ¨¡å¼ï¼ææ¬ãå¼¹åºè¡¨åï¼\r\n     */\r\n    usageMode: string;\r\n\r\n    /**\r\n     * å¼¹åºè¡¨åç¸å³éç½®\r\n     */\r\n    dialogOptions: DialogConfig;\r\n\r\n    /**\r\n     * æé®ç¹å»äºä»¶\r\n     */\r\n    click: any;\r\n}\r\n\r\nexport class DialogConfig {\r\n    modalId: string;\r\n    mapFields: any;\r\n    title: string;\r\n    width: number;\r\n    height: number;\r\n    showCloseButton:boolean;\r\n    showMaxButton:boolean;\r\n    showHeader:boolean;\r\n}","import { ControlType } from \"../controltype\";\r\nimport { DropDownListControl, DropDownListControlConvert } from \"./dropdownlist/dropdownlistcontrol\";\r\nimport { TextControl } from \"./text/textcontrol\";\r\nimport { DateRangeControl } from \"./daterange/date-range.control\";\r\nimport { SingleDateControl } from \"./date/single-date-control\";\r\nimport { SmartHelpContol } from \"./smarthelp/smarthelpcontrol\";\r\nimport { NumberRangeControl } from \"./numberrange/numberrangecontrol\";\r\nimport { SingleNumberControl } from './number/single-number-control';\r\nimport { SingleYearControl } from './year/year-control';\r\nimport { CheckBoxControl } from './checkbox/checkbox-control';\r\nimport { DateTimeRangeControl } from './daterange/datertime-range-control';\r\nimport { SingleMonthControl } from './month/month-control';\r\nimport { MonthRangeControl } from './monthrange/month-range-control';\r\nimport { SingleDateTimeControl } from './date/single-date-time-control';\r\nimport { ComboLookUpControl } from './combolookup/combolookup-control';\r\nimport { RadioControl, RadioControlConvert } from './radio/radio-control';\r\nimport { InputGroupControl } from './input-group/inputgroupcontrol';\r\n\r\n/**\r\n * æ§ä»¶æ¥å£\r\n */\r\nexport interface IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType;\r\n\r\n    /**\r\n     * æ§ä»¶æ¯å¦å¿å¡«\r\n     */\r\n    isRequired(): boolean;\r\n}\r\n\r\nexport class ControlConvert {\r\n    convertJObject(obj: IControl): Object {\r\n        let control = obj as IControl;\r\n        let controlType = control.getControlType();\r\n        let jobj = new Object();\r\n        jobj[\"Type\"] = controlType;\r\n\r\n        if(controlType == ControlType.DropDownList) { \r\n            let convertor = new DropDownListControlConvert();\r\n            jobj[\"Content\"] = convertor.convertToObject(control as DropDownListControl);\r\n        }\r\n        else if(controlType == ControlType.Radio) {\r\n            let convertor = new RadioControlConvert();\r\n            jobj[\"Content\"] = convertor.convertToObject(control as RadioControl);\r\n        }\r\n        else {\r\n            jobj[\"Content\"] = control;\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n    initFromJobject(jobj: Object): IControl {\r\n        let controlType = jobj[\"Type\"] as ControlType;\r\n        let content: IControl = jobj[\"Content\"];\r\n\r\n        if(controlType==ControlType.Text)\r\n            return Object.assign(new TextControl(), content as TextControl);\r\n        \r\n        if(controlType == ControlType.InputGroup)\r\n            return Object.assign(new InputGroupControl(), content as InputGroupControl);\r\n        \r\n        if(controlType == ControlType.DateRange)\r\n            return Object.assign(new DateRangeControl(), content as DateRangeControl);\r\n\r\n        if(controlType == ControlType.NumberRange)\r\n            return Object.assign(new NumberRangeControl(), content as NumberRangeControl);\r\n\r\n        if(controlType == ControlType.SingleDate)\r\n            return Object.assign(new SingleDateControl(), content as SingleDateControl);\r\n\r\n        if(controlType == ControlType.SingleNumber)\r\n            return Object.assign(new SingleNumberControl(), content as SingleNumberControl);\r\n\r\n        if(controlType == ControlType.DropDownList)\r\n            return new DropDownListControlConvert().initFromObject(content);\r\n\r\n        if(controlType == ControlType.SmartHelp)\r\n            return Object.assign(new SmartHelpContol(), content as SmartHelpContol);\r\n\r\n        if(controlType == ControlType.ComboLookUp)\r\n            return Object.assign(new ComboLookUpControl(), content as ComboLookUpControl);\r\n\r\n        if(controlType == ControlType.SingleYear)\r\n            return Object.assign(new SingleYearControl(), content as SingleYearControl);\r\n\r\n        if(controlType == ControlType.SingleMonth)\r\n            return Object.assign(new SingleMonthControl(), content as SingleMonthControl);\r\n\r\n        if(controlType == ControlType.BoolCheck)\r\n            return Object.assign(new CheckBoxControl(), content as CheckBoxControl);\r\n\r\n        if(controlType == ControlType.Radio)\r\n            return new RadioControlConvert().initFromObject(content);\r\n\r\n        if(controlType == ControlType.DateTimeRange)\r\n            return Object.assign(new DateTimeRangeControl(), content as DateTimeRangeControl);\r\n\r\n        if(controlType == ControlType.MonthRange)\r\n            return Object.assign(new MonthRangeControl(), content as MonthRangeControl);\r\n\r\n        if(controlType == ControlType.SingleDateTime)\r\n            return Object.assign(new SingleDateTimeControl(), content as SingleDateTimeControl);\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class TextValue implements IValue{\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        this.value = value;\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Text;\r\n    }\r\n    value:string;\r\n    constructor(data: {value: string} = {value : ''}){\r\n        this.value = data.value ? data.value.trim() : '';\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class NumberRangeValue implements IValue {\r\n    isEmpty(): boolean {\r\n        return (this.startValue == null && this.endValue == null);\r\n    }\r\n    clearValue(): void {\r\n        this.startValue = undefined;\r\n        this.endValue = undefined;\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getOriginalValue() {\r\n        return {\r\n            begin: this.startValue,\r\n            end: this.endValue\r\n        };\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.NumberRange;\r\n    }\r\n    startValue: number;\r\n    endValue: number;\r\n    constructor(data: {startValue: string, endValue: string} = {startValue: null, endValue: null}){\r\n        this.startValue = data.startValue == null ? null : parseFloat(data.startValue);\r\n        this.endValue = data.endValue == null ? null : parseFloat(data.endValue);\r\n    }\r\n}\r\n\r\nexport class NumberRangeValueConvertor {\r\n    convertToObject(obj: IValue): Object {\r\n        let numberRangeValue = obj as NumberRangeValue;\r\n        let jobj = new Object();\r\n        jobj[\"startValue\"] = numberRangeValue.startValue;\r\n        jobj[\"endValue\"] = numberRangeValue.endValue;\r\n        return jobj;\r\n    }\r\n\r\n    initFromObject(jobj: Object): NumberRangeValue {\r\n        let numberRangeValue = new NumberRangeValue();\r\n        if (jobj[\"startValue\"]) {\r\n            //key pointï¼as Numberå¹¶ä¸ä¼è½¬åæ ¼å¼\r\n            numberRangeValue.startValue = parseFloat(jobj[\"startValue\"]);\r\n        }\r\n        if (jobj[\"endValue\"]) {\r\n            numberRangeValue.endValue = parseFloat(jobj[\"endValue\"]);\r\n        }\r\n        return numberRangeValue;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class DateRangeValue implements IValue {\r\n  setOriginalValue(value: { formatted: string, delimiter: string }): void {\r\n    if (value.formatted) {\r\n      this.startTime = value.formatted.split(value.delimiter)[0];\r\n      this.endTime = value.formatted.split(value.delimiter)[1];\r\n    } else {\r\n      this.clearValue();\r\n    }\r\n  }\r\n  getOriginalValue() {\r\n     if(!this.startTime||!this.endTime){\r\n      return '';\r\n     }\r\n    return `${this.startTime}~${this.endTime}`;\r\n  }\r\n  getControlType(): ControlType {\r\n    return ControlType.DateRange;\r\n  }\r\n  clearValue(): void {\r\n    this.startTime = undefined;\r\n    this.endTime = undefined;\r\n  }\r\n  startTime: string;\r\n  endTime: string;\r\n\r\n  constructor(value: { startTime: string, endTime: string } = { startTime: '', endTime: '' }) {\r\n    this.startTime = value.startTime;\r\n    this.endTime = value.endTime;\r\n  }\r\n  isEmpty(): boolean {\r\n    return !this.startTime || !this.endTime;\r\n  }\r\n}\r\n","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { cloneDeep } from 'lodash-es';\r\n\r\nexport class SmartHelpValue implements IValue{\r\n\r\n    getControlType(): ControlType {\r\n        return ControlType.SmartHelp;\r\n    }\r\n\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getOriginalValue(): string {\r\n        const args = this.valueField.split('.');\r\n        const valueArr = this.value.map(helpItem => this.getPropValue(helpItem, cloneDeep(args)));\r\n        return valueArr && valueArr.length ? valueArr.join(',') : '';\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.valueField = undefined;\r\n        this.textValue = undefined;\r\n        this.isInputText = undefined;\r\n    }\r\n    \r\n    isEmpty(): boolean {\r\n        return !this.value.length;\r\n    }\r\n\r\n    value: any[];\r\n    valueField: string;\r\n    textValue: string;\r\n    //å¸®å©çå¼æ¯å¦ä¸ºæå¨è¾å¥çä»»æå¼ï¼å¯¹åºå¸®å©çä»»æè¾å¥å±æ§nosearch\r\n    isInputText: boolean; \r\n\r\n    constructor(data: {\r\n        value: any, \r\n        valueField: string,\r\n        textValue: string,\r\n        isInputText: boolean\r\n    } = {value: [], valueField: undefined, textValue: undefined, isInputText: undefined}){\r\n        if(data.textValue){\r\n            this.value = data.value;\r\n            this.valueField = data.valueField;\r\n            this.textValue = data.textValue;\r\n            this.isInputText = data.isInputText;\r\n        }else{\r\n            //å¸®å©æªæ¯æå¤éæ¶ï¼æ²¡ætextValueå±æ§ï¼ææå¼é½æ¯éè¿éæ©äº§çç\r\n            this.value = data.value;\r\n            this.valueField = data.valueField ? data.valueField : '';\r\n            this.textValue = 'help-text-value-null'; \r\n            this.isInputText = false;\r\n        }\r\n    }\r\n\r\n    getTextValue(textField: string): string {\r\n        const args = textField.split('.');\r\n        const textArr = this.value.map(helpItem => this.getPropValue(helpItem, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(',') : '';\r\n    }\r\n\r\n    getPropValue(helpItem: any, args: Array<string>): any{\r\n        if(args.length > 1){\r\n            const arg = args.shift();\r\n            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;\r\n        }\r\n        return helpItem[args[0]];\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class SingleDateValue implements IValue{\r\n    setOriginalValue(value: any): void {\r\n        this.dateValue = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.dateValue;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleDate;\r\n    }\r\n    dateValue: string;\r\n    \r\n    constructor(date: string = ''){\r\n        this.dateValue = date;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.dateValue;\r\n    }\r\n    clearValue(): void {\r\n        this.dateValue = undefined;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class SingleNumberValue implements IValue{\r\n    isEmpty(): boolean {\r\n        return this.numValue == null;\r\n    }\r\n    clearValue(): void {\r\n        this.numValue = undefined;\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getOriginalValue() {\r\n        return this.numValue;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleNumber;\r\n    }\r\n    numValue: number;\r\n\r\n    constructor(data: string = null){\r\n        this.numValue = data == null ? null : parseFloat(data);\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class SingleYearValue implements IValue{\r\n    setOriginalValue(value: any): void {\r\n        this.yearValue = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.yearValue;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleYear;\r\n    }\r\n    clearValue(): void {\r\n        this.yearValue = undefined;\r\n    }\r\n    yearValue: string;\r\n    constructor(year: string = ''){\r\n        this.yearValue = year;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.yearValue;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n// CheckBoxValueåå§åï¼ä¸'app-solution-checkbox'ç»ä»¶åå§åæ¯åç¦»ç\r\n// CheckBoxValue è¦æ±valueæ¯å¸å°ç±»åï¼ç»ä»¶è¦æ±valueæ¯trueæ¶ï¼å¼åºä¸ºtrueå­ç¬¦ä¸²\r\nexport class CheckBoxValue implements IValue{\r\n    clearValue(): void {\r\n        this.value = [];\r\n    }\r\n    // å¦æç»ä»¶çè¿åå¼æ¯å­ç¬¦ä¸²ï¼è½¬åä¸ºå¸å°å¼\r\n    setOriginalValue(value: any[]): void {\r\n        if(value.length){\r\n            this.value = value.map(v => {\r\n               if(typeof v == 'string'){\r\n                 return true;\r\n               }else {\r\n                 return v;\r\n               }\r\n            });\r\n         }else{\r\n            this.value = value;\r\n         }\r\n    }\r\n    // æCheckBoxValueçtrueå¸å°å¼ï¼è½¬åä¸ºç»ä»¶å¯è¯å«çå­ç¬¦ä¸²\r\n    getOriginalValue() {\r\n        if(this.value.length){\r\n          return this.value.map(v => {\r\n            if(v === true){\r\n              return \"true\";\r\n            }else{\r\n              return v;\r\n            }\r\n          });\r\n        }\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.BoolCheck;\r\n    }\r\n    value: any[];\r\n    // CheckBoxValue åå§åï¼ä¼ å¥çå¼æªåä»»ä½ä¿®æ¹\r\n    constructor(value: any[] = []){\r\n        this.value = value;\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.value.length == 0;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { IEnumValue, EnumValueConvert } from \"../controltype/dropdownlist/ienumvalue\";\r\n\r\nexport class DropDownListValue implements IValue{\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.key = undefined;\r\n    }\r\n    setOriginalValue(data): void {}\r\n    getOriginalValue() {\r\n        return this.key;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.DropDownList;\r\n    }\r\n    value: any = [];//æ§ç»æ{Type: '', Content: {value: string, name: string}} æ°ç»æArray[{value: string, name: string}]\r\n    key: string;//æ§ç»ææ ï¼æ°ç»æä¸ºéä¸­çvalueå¼ï¼å¤éæ¯ä»¥,åå²çå­ç¬¦ä¸²\r\n    constructor(data: {value: any, key: string} = {value: [], key: undefined}){\r\n        if(data.value && data.value.length > 0){//å·²æåå§å¼[]\r\n            if(data.hasOwnProperty('key')){//æ°ç»æ\r\n                this.value = data.value;\r\n                this.key = data.key;\r\n            }else{//æ§ç»æ\r\n                this.value = data.value['Content'] && data.value['Content'].value ? [data.value['Content']] : [];\r\n                this.key = data.value['Content'] && data.value['Content'].value ? data.value['Content'].value: undefined;\r\n            }\r\n        }else{\r\n            this.clearValue();\r\n        }\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.key;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class SingleMonthValue implements IValue{\r\n    setOriginalValue(value: any): void {\r\n        this.monthValue = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.monthValue;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleMonth;\r\n    }\r\n    clearValue(): void {\r\n        this.monthValue = undefined;\r\n    }\r\n    monthValue: string;\r\n    constructor(month: string = ''){\r\n        this.monthValue = month;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.monthValue;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class MonthRangeValue implements IValue {\r\n  setOriginalValue(value: { formatted: string, delimiter: string }): void {\r\n    if (value.formatted) {\r\n      this.startTime = value.formatted.split(value.delimiter)[0];\r\n      this.endTime = value.formatted.split(value.delimiter)[1];\r\n    } else {\r\n      this.clearValue();\r\n    }\r\n  }\r\n  getOriginalValue() {\r\n    if(!this.startTime||!this.endTime){\r\n      return '';\r\n     }\r\n    return `${this.startTime}~${this.endTime}`;\r\n  }\r\n  getControlType(): ControlType {\r\n    return ControlType.MonthRange;\r\n  }\r\n  clearValue(): void {\r\n    this.startTime = undefined;\r\n    this.endTime = undefined;\r\n  }\r\n  startTime: string;\r\n  endTime: string;\r\n\r\n  constructor(value: { startTime: string, endTime: string } = { startTime: '', endTime: '' }) {\r\n    this.startTime = value.startTime;\r\n    this.endTime = value.endTime;\r\n  }\r\n  isEmpty(): boolean {\r\n    return !this.startTime || !this.endTime;\r\n  }\r\n}\r\n","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class SingleDateTimeValue implements IValue{\r\n    setOriginalValue(value: any): void {\r\n        this.datetimeValue = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.datetimeValue;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.SingleDateTime;\r\n    }\r\n    datetimeValue: string;\r\n    \r\n    constructor(datetime: string = ''){\r\n        this.datetimeValue = datetime;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.datetimeValue;\r\n    }\r\n    clearValue(): void {\r\n        this.datetimeValue = undefined;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { cloneDeep } from 'lodash-es';\r\n\r\nexport class ComboLookUpValue implements IValue{\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.valueField = undefined;\r\n        this.textValue = undefined;\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getOriginalValue(): string {\r\n        const args = this.valueField.split('.');\r\n        const valueArr = this.value.map(helpItem => this.getPropValue(helpItem, cloneDeep(args)));\r\n        return valueArr && valueArr.length ? valueArr.join(',') : '';\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.ComboLookUp;\r\n    }\r\n\r\n    valueField:string;\r\n    value:any[];\r\n    textValue: string;\r\n\r\n    constructor(data: {\r\n        value: any, \r\n        valueField: string,\r\n        textValue: string;\r\n    } = {value: [], valueField: undefined, textValue: undefined}){\r\n        if(data.textValue){//æ°ç»æï¼valueæ¯æ°ç»\r\n            this.valueField = data.valueField;\r\n            this.value = data.value;\r\n            this.textValue = data.textValue;\r\n        }else{//æ§ç»æï¼valueæ¯å¯¹è±¡\r\n            this.valueField = data.valueField ? data.valueField : '';\r\n            this.value = (data.value && data.value.data) ? [data.value.data] : [];\r\n            this.textValue = 'help-text-value-null'; //æ§ç»ææ textValueå±æ§\r\n        }\r\n\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.valueField;\r\n    }\r\n\r\n    getPropValue(helpItem: any, args: Array<string>): any{\r\n        if(args.length > 1){\r\n            const arg = args.shift();\r\n            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;\r\n        }\r\n        return helpItem[args[0]];\r\n    }\r\n\r\n    getTextValue(textField: string): string {\r\n        const args = textField.split('.');\r\n        const textArr = this.value.map(helpItem => this.getPropValue(helpItem, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(',') : '';\r\n    }\r\n\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class RadioValue implements IValue {\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        this.value = value;\r\n    }\r\n    getOriginalValue(): any {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Radio;\r\n    }\r\n    value: any;\r\n    constructor(value: any = undefined) {\r\n        this.value = value;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n}","import { IValue } from './ivalue';\r\nimport { ControlType } from '../controltype';\r\nimport { cloneDeep } from 'lodash-es';\r\n\r\nexport class InputGroupValue implements IValue {\r\n\r\n    getControlType(): ControlType {\r\n        return ControlType.InputGroup;\r\n    }\r\n\r\n    setOriginalValue(value: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getOriginalValue(): string {\r\n        const args = this.textField.split('.');\r\n        const textArr = this.value.map(item => this.getPropValue(item, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(','): '';\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.textValue = undefined;\r\n        this.textField = undefined;\r\n        this.isInputText = undefined;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.textValue;\r\n    }\r\n\r\n    //éè¿å¼¹çªè¿åçè¥å¹²ä¸ªå¼å¯¹è±¡ææçæ°ç»\r\n    value: any[];\r\n    //æ§ä»¶åæ¾ç¤ºçå¼\r\n    textValue: string;\r\n    //å¼¹çªæ¨¡å¼ä¸ï¼ååè¡¨ä¸­åªä¸ªå­æ®µçå¼æ å°å°å½åå­æ®µ\r\n    textField: string;\r\n    //æ¯å¦æ¯æå¨è¾å¥çå¼\r\n    isInputText: boolean;\r\n\r\n    constructor(data: {\r\n        value: any,\r\n        textValue: string,\r\n        textField: string,\r\n        isInputText: boolean\r\n    } = {value: [], textValue: undefined, textField: undefined, isInputText: undefined}){\r\n        this.value = data.value;\r\n        this.textValue = data.textValue ? data.textValue.trim() : '';\r\n        this.textField = data.textField;\r\n        this.isInputText = data.isInputText;\r\n    }\r\n\r\n    getTextValue(targetField: string): string {\r\n        const args = targetField.split('.');\r\n        const textArr = this.value.map(item => this.getPropValue(item, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(','): '';\r\n    }\r\n\r\n    getPropValue(item: any, args: Array<string>): any{\r\n        if(args.length > 1){\r\n            const arg = args.shift();\r\n            return item[arg] ? this.getPropValue(item[arg], args) : '';\r\n        }\r\n        return item[args[0]];\r\n    }\r\n}","import { ControlType } from \"../controltype\";\r\nimport { TextValue } from \"./textvalue\";\r\nimport { NumberRangeValueConvertor, NumberRangeValue } from \"./numberrangevaue\";\r\nimport { DateRangeValue } from \"./daterangevalue\";\r\nimport { SmartHelpValue } from \"./smarthelpvalue\";\r\nimport { SingleDateValue } from './single-date-value';\r\nimport { SingleNumberValue } from './single-number-value';\r\nimport { SingleYearValue } from './single-year-value';\r\nimport { CheckBoxValue } from './checkbox-value';\r\nimport { DropDownListValue } from './dropdownlistvalue';\r\nimport { SingleMonthValue } from './single-month-value';\r\nimport { MonthRangeValue } from './month-range-value';\r\nimport { SingleDateTimeValue } from './single-date-time-value';\r\nimport { ComboLookUpValue} from './combolookup-value';\r\nimport { RadioValue } from './radio-value';\r\nimport { InputGroupValue } from './inputgroupvalue';\r\n\r\nexport interface IValue {\r\n    getControlType(): ControlType;\r\n    getOriginalValue(): any;\r\n    setOriginalValue(value: any): void;\r\n    clearValue(): void;\r\n    isEmpty(): boolean;\r\n}\r\n\r\nexport class ConditionValueConvert {\r\n    /**\r\n     * åºåå\r\n     * ä¸ºäºå¼å®¹C#äº§ççæ§æ°æ®ï¼åserverä¼ éçJSON objectå±æ§åå¨æ¹ä¸ºé¦å­æ¯å¤§å\r\n     */\r\n    convertToObject(obj: IValue): Object {\r\n        let conditionValue = obj as IValue;\r\n        let controlType = conditionValue.getControlType();\r\n        let jobj = new Object();\r\n        jobj[\"Type\"] = controlType;\r\n        if (controlType == ControlType.NumberRange) {\r\n            let convertor = new NumberRangeValueConvertor();\r\n            jobj[\"Content\"] = convertor.convertToObject(conditionValue);\r\n        }\r\n        else {\r\n            jobj[\"Content\"] = conditionValue;\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n\r\n    initFromObject(jobj: Object): IValue {\r\n        let content: IValue = jobj[\"Content\"];\r\n        \r\n        switch(jobj[\"Type\"]){\r\n            case ControlType.Text:\r\n                return new TextValue(jobj[\"Content\"]);\r\n            case ControlType.NumberRange:\r\n                return new NumberRangeValue(jobj[\"Content\"]);\r\n            case ControlType.DateRange:\r\n            case ControlType.DateTimeRange:\r\n                return new DateRangeValue(jobj[\"Content\"]);\r\n            case ControlType.DropDownList:\r\n                return new DropDownListValue(jobj[\"Content\"]);\r\n            case ControlType.SmartHelp:\r\n                return new SmartHelpValue(jobj[\"Content\"]);\r\n            case ControlType.ComboLookUp:\r\n                return new ComboLookUpValue(jobj[\"Content\"]);\r\n            case ControlType.SingleDate:\r\n                return Object.assign(new SingleDateValue(), content as SingleDateValue);\r\n            case ControlType.SingleNumber:\r\n                return Object.assign(new SingleNumberValue(), content as SingleNumberValue);\r\n            case ControlType.SingleYear:\r\n                return Object.assign(new SingleYearValue(), content as SingleYearValue);\r\n            case ControlType.BoolCheck:\r\n                return Object.assign(new CheckBoxValue(), content as CheckBoxValue);\r\n            case ControlType.Radio:\r\n                return Object.assign(new RadioValue(), content as RadioValue);\r\n            case ControlType.SingleMonth:\r\n                return Object.assign(new SingleMonthValue(), content as SingleMonthValue);\r\n            case ControlType.MonthRange:\r\n                return Object.assign(new MonthRangeValue(), content as MonthRangeValue);\r\n            case ControlType.SingleDateTime:\r\n                return Object.assign(new SingleDateTimeValue(), content as SingleDateTimeValue);\r\n            case ControlType.InputGroup:\r\n                return Object.assign(new InputGroupValue(), content as InputGroupValue);\r\n        }\r\n    }\r\n}","import { CompareType } from \"./comparetype\";\r\nimport { ValueType } from \"./valuetype\";\r\nimport { IControl, ControlConvert } from \"./controltype/icontrol\";\r\nimport { IValue, ConditionValueConvert } from \"./conditionvalue/ivalue\";\r\n\r\n/**\r\n * æ¥è¯¢æ¡ä»¶å®ä½ç±»\r\n */\r\nexport class QueryCondition {\r\n\r\n  /**\r\n   * å¯ä¸æ§æ è¯\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * å­æ®µç¼å·\r\n   */\r\n  fieldCode: string;\r\n\r\n  /**\r\n   * å­æ®µåç§°\r\n   */\r\n  fieldName: string;\r\n\r\n  /**\r\n   * æ¯è¾ç¬¦\r\n   */\r\n  // compareType:CompareType;\r\n\r\n  /**\r\n   * å¼ç±»å\r\n   */\r\n  valueType: ValueType;\r\n\r\n  /**\r\n   * ä¸ºç©ºæ¶æç¤ºä¿¡æ¯\r\n   */\r\n  placeHolder: string;\r\n  /**\r\n   * å¼å§\r\n   */\r\n  beginPlaceHolder:string;\r\n  /**\r\n   * ç»æ\r\n   */\r\n  endPlaceHolder:string;\r\n  /**\r\n   * å¼\r\n   * è¯¥å±æ§ä¸ºIValueæ¥å£ï¼æ ¹æ®ä¸åçæ§ä»¶ç±»åæä¸åçå®ç°ç±»ï¼å·ä½å¦ä¸ï¼\r\n   * 1. ææ¬ç±»åï¼TextValue\r\n   * 2. ä¸æåè¡¨ï¼DropDownListValue\r\n   * 3. æ¥æåºé´ï¼DateRangeValue\r\n   * 4. æ°å­åºé´ï¼NumberRangeValue\r\n   * 5. å¸®å©ç±»åï¼SmartHelpValue\r\n   * 6. å¤éæ¡: CheckBoxValue\r\n   * 7. åæ°å¼: SingleNumberValue\r\n   * 8. åå¹´åº¦: SingleYearValue\r\n   * 9. åæåº¦: SingleMonthValue\r\n   * 10. æåº¦åºé´: MonthRangeValue\r\n   * 11. åæ¥æ: SingleDateValue\r\n   * 12. åæ¥ææ¶é´: SingleDateTimeValue\r\n   * 13. ä¸æå¸®å©ï¼ ComboLookUpValue\r\n   * 14. åéæ¡ï¼ RadioValue\r\n   * 15. æºè½è¾å¥æ¡ï¼ InputGroupValue\r\n   */\r\n  value: IValue;\r\n\r\n  /**\r\n   * æ§ä»¶ç±»åï¼ç®ååæ¬ææ¬ç±»åï¼ä¸æåè¡¨ï¼æ¥æåºé´ï¼æ°å­åºé´ï¼å¸®å©ç±»å\r\n   * æ§ä»¶ç±»åä¸ºIControlæ¥å£ï¼æ ¹æ®ä¸åçæ§ä»¶ç±»åå¯¹åºä¸åçå®ç°ç±»ï¼å·ä½å¦ä¸ï¼\r\n   * 1. ææ¬ç±»åï¼TextControl\r\n   * 2. ä¸æåè¡¨ï¼DropDownListControl\r\n   * 3. æ¥æåºé´ï¼DateRangeControl\r\n   * 4. æ°å­åºé´ï¼NumberRangeControl\r\n   * 5. å¸®å©ç±»åï¼SmartHelpControl\r\n   * 6. åæ¥æï¼ SingleDateControl\r\n   * 7. åæ°å¼ï¼SingleNumberControl\r\n   * 8. åå¹´åº¦ï¼SingleYearControl\r\n   * 9. åæåº¦ï¼SingleMonthControl\r\n   * 10. æåº¦åºé´ï¼MonthRangeControl\r\n   * 11. åæ¥ææ¶é´ï¼SingleDateTimeControl\r\n   * 12. æ¥ææ¶é´åºé´ï¼DateTimeRangeControl\r\n   * 13. å¤éæ¡ï¼CheckBoxControl\r\n   * 14. ä¸æå¸®å©ï¼ComboLookUpControl\r\n   * 15. åéæ¡ï¼ RadioControl\r\n   * 16. æºè½è¾å¥æ¡ï¼ InputGroupControl\r\n   */\r\n  control: IControl;\r\n  readonly: boolean;\r\n}\r\n\r\n/**\r\n * æ¥è¯¢æ¡ä»¶åºååä¸ååºååå¨\r\n */\r\nexport class QueryConditionConvert {\r\n\r\n  /**\r\n   * åºåå\r\n   * @param obj æ¥è¯¢æ¡ä»¶å®ä½\r\n   * ä¸ºäºå¼å®¹C#äº§ççæ§æ°æ®ï¼åserverä¼ éçJSON objectå±æ§åå¨æ¹ä¸ºé¦å­æ¯å¤§å\r\n   */\r\n  convertJObject(obj: QueryCondition): Object {\r\n    let queryCondition = obj as QueryCondition;\r\n    let jobj = new Object();\r\n    jobj[\"ID\"] = queryCondition.id;\r\n    jobj[\"FieldCode\"] = queryCondition.fieldCode;\r\n    jobj[\"FieldName\"] = queryCondition.fieldName;\r\n    // jobj[\"compareType\"]=queryCondition.compareType;\r\n    jobj[\"ValueType\"] = queryCondition.valueType;\r\n    jobj[\"placeHolder\"] = queryCondition.placeHolder;\r\n    // æ è®ºæ¯å¦åºé´é½è¿½å \r\n    jobj[\"beginPlaceHolder\"]=queryCondition.hasOwnProperty('beginPlaceHolder')?queryCondition['beginPlaceHolder']:'';\r\n    jobj[\"endPlaceHolder\"]=queryCondition.hasOwnProperty('endPlaceHolder')?queryCondition['endPlaceHolder']:'';\r\n  \r\n    let valueConvert = new ConditionValueConvert();\r\n    if (queryCondition.value) {\r\n      jobj[\"Value\"] = valueConvert.convertToObject(queryCondition.value);\r\n    }\r\n    let controlConvertor = new ControlConvert();\r\n    if (queryCondition.control) {\r\n      jobj[\"Control\"] = controlConvertor.convertJObject(queryCondition.control);\r\n    }\r\n    return jobj;\r\n  }\r\n\r\n  /**\r\n   * ååºåå\r\n   * @param jobj æ¥è¯¢æ¡ä»¶å®ä½åºåååçJSONå¯¹è±¡\r\n   * serverç«¯å­å¨çæ¯åç«¯å®ä¹å¥½æ ¼å¼çå­ç¬¦ä¸²ï¼æä»¥clientæ¥æ¶æ¶ä»¥çº¦å®å¥½çæ ¼å¼ååºåå\r\n   */\r\n  initFromJobject(jobj: Object): QueryCondition {\r\n    let queryCondition = new QueryCondition();\r\n    queryCondition.id = jobj[\"ID\"];\r\n    queryCondition.fieldCode = jobj[\"FieldCode\"];\r\n    queryCondition.fieldName = jobj[\"FieldName\"];\r\n    // queryCondition.compareType=jobj[\"compareType\"] as CompareType;\r\n    queryCondition.valueType = (jobj[\"ValueType\"]) as ValueType;\r\n    queryCondition.placeHolder = jobj[\"placeHolder\"];\r\n    queryCondition.beginPlaceHolder=jobj.hasOwnProperty('beginPlaceHolder')?jobj['beginPlaceHolder']:'';\r\n    queryCondition.endPlaceHolder=jobj.hasOwnProperty('endPlaceHolder')?jobj['endPlaceHolder']:'';\r\n    const conditonValue = jobj[\"Value\"];\r\n    if (conditonValue) {\r\n      let valueConvert = new ConditionValueConvert();\r\n      queryCondition.value = valueConvert.initFromObject(conditonValue);\r\n    }\r\n    const conditionControl = jobj[\"Control\"];\r\n    if (conditionControl) {\r\n      let controlConvertor = new ControlConvert();\r\n      queryCondition.control = controlConvertor.initFromJobject(conditionControl);\r\n    }\r\n    return queryCondition;\r\n  }\r\n}\r\n","export enum ValueType{\r\n\r\n    /**\r\n     *å¼ç±»å\r\n     */\r\n    Value = 0,\r\n\r\n    /**\r\n     * å¸®å©ç±»å\r\n     */\r\n    SmartHelp=1,\r\n\r\n    /**\r\n     * æä¸¾ç±»å\r\n     */\r\n    Enum=2,\r\n\r\n    /**\r\n     * è¡¨è¾¾å¼\r\n     */\r\n    Express=3\r\n}","import { Injectable } from '@angular/core';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { QueryCondition } from '../entity/querycondition';\r\nimport { ValueType } from '../entity/valuetype';\r\nimport { TextControl } from '../entity/controltype/text/textcontrol';\r\nimport { InputGroupControl, DialogConfig } from '../entity/controltype/input-group/inputgroupcontrol';\r\nimport { TextValue } from '../entity/conditionvalue/textvalue';\r\nimport { DateRangeControl } from '../entity/controltype/daterange/date-range.control';\r\nimport { DateRangeValue } from '../entity/conditionvalue/daterangevalue';\r\nimport { NumberRangeControl } from '../entity/controltype/numberrange/numberrangecontrol';\r\nimport { NumberRangeValue } from '../entity/conditionvalue/numberrangevaue';\r\nimport { DropDownListControl } from '../entity/controltype/dropdownlist/dropdownlistcontrol';\r\nimport { DropDownListValue } from '../entity/conditionvalue/dropdownlistvalue';\r\nimport { SmartHelpContol } from '../entity/controltype/smarthelp/smarthelpcontrol';\r\nimport { SmartHelpValue } from '../entity/conditionvalue/smarthelpvalue';\r\nimport { SingleDateControl } from '../entity/controltype/date/single-date-control';\r\nimport { SingleDateValue } from '../entity/conditionvalue/single-date-value';\r\nimport { SingleNumberControl } from '../entity/controltype/number/single-number-control';\r\nimport { SingleNumberValue } from '../entity/conditionvalue/single-number-value';\r\nimport { SingleYearControl } from '../entity/controltype/year/year-control';\r\nimport { SingleYearValue } from '../entity/conditionvalue/single-year-value';\r\nimport { SingleMonthControl } from '../entity/controltype/month/month-control';\r\nimport { SingleMonthValue } from '../entity/conditionvalue/single-month-value';\r\nimport { CheckBoxControl } from '../entity/controltype/checkbox/checkbox-control';\r\nimport { CheckBoxValue } from '../entity/conditionvalue/checkbox-value';\r\nimport { DateTimeRangeControl } from '../entity/controltype/daterange/datertime-range-control';\r\nimport { MonthRangeControl } from '../entity/controltype/monthrange/month-range-control';\r\nimport { MonthRangeValue } from '../entity/conditionvalue/month-range-value';\r\nimport { SingleDateTimeControl } from '../entity/controltype/date/single-date-time-control';\r\nimport { SingleDateTimeValue } from '../entity/conditionvalue/single-date-time-value';\r\nimport { ComboLookUpControl } from '../entity/controltype/combolookup/combolookup-control';\r\nimport { ComboLookUpValue } from '../entity/conditionvalue/combolookup-value';\r\nimport { RadioControl } from '../entity/controltype/radio/radio-control';\r\nimport { RadioValue } from '../entity/conditionvalue/radio-value';\r\nimport { InputGroupValue } from '../entity/conditionvalue/inputgroupvalue';\r\nimport { QuerySolutionVo } from '../entity/querysolutionvo';\r\nimport { FieldConfig } from '../entity/fieldconfig/fieldconfig';\r\nimport { ControlType } from '../entity/controltype';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class SolutionService {\r\n  // æ è®°åæ´\r\n  private controlConfigState: BehaviorSubject<any> = new BehaviorSubject([]);\r\n\r\n  constructor(private notify: NotifyService) { }\r\n  controlTypeMap: Map<number, string> = new Map([\r\n    [ControlType.Text, 'text'], [ControlType.BoolCheck, 'bool-check'], [ControlType.DateRange, 'date'],\r\n    [ControlType.DateTimeRange, 'date-time'], [ControlType.NumberRange, 'number'], [ControlType.DropDownList, 'dropdown'],\r\n    [ControlType.SmartHelp, 'help'], [ControlType.SingleDate, 'single-date'], [ControlType.SingleNumber, 'single-number'],\r\n    [ControlType.SingleYear, 'single-year'], [ControlType.SingleMonth, 'single-month'], [ControlType.MonthRange, 'month'],\r\n    [ControlType.SingleDateTime, 'single-date-time'], [ControlType.ComboLookUp, 'combolist-help'], [ControlType.Radio, 'radio'],\r\n    [ControlType.InputGroup, 'input-group']\r\n  ]);\r\n  getControlConfigState() {\r\n    return this.controlConfigState;\r\n  }\r\n  /**\r\n   * ä¼ éè¿æ¥çæ¯å·²ç»å¤çè¿çæ¡ä»¶\r\n   * @param simpleCondition \r\n   */\r\n  updateControlConfigState(simpleCondition: Array<any>) {\r\n    this.controlConfigState.next(simpleCondition);\r\n  }\r\n  /**\r\n   * åªè¿åå­å¨çå±æ§\r\n   */\r\n  convertToSimpleQueryConditions(fields: Array<FieldConfig>): Array<any> {\r\n    let simpleQueryCondition = {};\r\n    if(fields&&fields.length==0){\r\n      return [];\r\n    }\r\n    return fields.map(field => {\r\n      simpleQueryCondition['fieldCode'] = field.labelCode;\r\n      simpleQueryCondition['control'] = this.getSimpleControl(field);\r\n      return simpleQueryCondition;\r\n    });\r\n  }\r\n  /**\r\n   * åªå¤çè®¾ç½®çå±æ§\r\n   * @param field \r\n   */\r\n  private getSimpleControl(field: FieldConfig) {\r\n    const controlData = field.control;\r\n    let simpleControl = {};\r\n    let tControlType=this.controlTypeMap.get(controlData.controltype)\r\n    switch (tControlType) {\r\n      case 'single-year':\r\n        this.updateSimpleControl(simpleControl, ['maxDate', 'minDate'], controlData);\r\n        break;\r\n      default:\r\n        simpleControl = {};\r\n    }\r\n    return simpleControl;\r\n  }\r\n  /**\r\n   * åªå¤çæå®å±æ§\r\n   * @param resultObj ä¿®æ¹çå¯¹è±¡  {test01:'',test01:''}\r\n   * @param sourceProps å¾è·åçå±æ§åè¡¨ ['prop01','prop02']\r\n   * @param source åå¼æ¥æº{prop01:'',prop02:''}\r\n   * @param distProps ç®æ å±æ§ï¼å¯¹åºçè¿åå±æ§æç§è®¾ç½®['dist01','']\r\n   * @return \r\n   */\r\n  private updateSimpleControl(resultObj, sourceProps, source, distProps = []) {\r\n    if (distProps.length == 0) {\r\n      distProps = sourceProps;\r\n    }\r\n    for (let m = 0; m < sourceProps.length; m++) {\r\n      if (!distProps[m]) {\r\n        distProps[m] = sourceProps[m];\r\n      }\r\n    }\r\n    for (let k = 0; k < sourceProps.length; k++) {\r\n      if (source && source.hasOwnProperty(sourceProps[k])) {\r\n        resultObj[distProps[k]] = source[sourceProps[k]];\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * å°å­æ®µéç½®JSONæè¿°ä¿¡æ¯è½¬æ¢ä¸ºç­éæ¡ä»¶\r\n   * @param fields å­æ®µéç½®ä¿¡æ¯\r\n   * @returns ç­éæ¡ä»¶æ°ç»\r\n   */\r\n  public convertToQueryConditions(fields: Array<FieldConfig>): Array<QueryCondition> {\r\n    let queryCondition: QueryCondition;\r\n    return fields.map(field => {\r\n      queryCondition = new QueryCondition();\r\n      queryCondition.id = field.id;\r\n      queryCondition.fieldCode = field.labelCode;\r\n      // queryCondition.code = field.code; æ ç¨å±æ§\r\n      queryCondition.fieldName = field.name;\r\n      queryCondition.valueType = ValueType.Value;\r\n      queryCondition.placeHolder = field.placeHolder;\r\n      queryCondition.beginPlaceHolder=field.hasOwnProperty('beginPlaceHolder')?field.beginPlaceHolder:'';\r\n      queryCondition.endPlaceHolder=field.hasOwnProperty('endPlaceHolder')?field.endPlaceHolder:'';      \r\n      let { control, value } = this.getControlAndValue(field);\r\n      queryCondition.control = control;\r\n      queryCondition.value = value;\r\n      return queryCondition;\r\n    });\r\n  }\r\n  /**\r\n   * æ ¹æ®æ§ä»¶ç±»ååå«åå»ºç­éæ¡ä»¶çcontrolå¯¹è±¡åvalueå¯¹è±¡\r\n   * @param field å­æ®µéç½®ä¿¡æ¯\r\n   * @returns ç­éæ¡ä»¶çcontrolå¯¹è±¡åvalueå¯¹è±¡\r\n   */\r\n  getControlAndValue(field: FieldConfig) {\r\n    const controlData = field.control;\r\n    const valueData = field.value;\r\n    let control, value: any;\r\n    switch (controlData.controltype) {\r\n      case 'text':\r\n        control = new TextControl();\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        //plain string\r\n        value = new TextValue({ value: valueData });\r\n        break;\r\n      case 'input-group':\r\n        control = new InputGroupControl();\r\n        control.className = controlData.className;\r\n        control.require = controlData.require;\r\n        control.editable = controlData.editable;\r\n        control.groupText = controlData.groupText;\r\n        control.usageMode = controlData.usageMode;\r\n        control.dialogOptions = this.setInputGroupDialog(field);\r\n        control.click = controlData.click;\r\n        value = new InputGroupValue(valueData);\r\n        break;\r\n      case 'date':\r\n        control = new DateRangeControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        control.weekSelect = controlData.weekSelect;\r\n        control.showWeekNumbers = controlData.showWeekNumbers;\r\n        //control.beginPlaceHolder=controlData.beginPlaceHolder;\r\n        //control.endPlaceHolder=controlData.endPlaceHolder;\r\n        //{startTime: valueData.startTime, endTime: valueData.endTime}\r\n        value = new DateRangeValue(valueData);\r\n        break;\r\n      case 'date-time':\r\n        control = new DateTimeRangeControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        control.enableCustomFormat=controlData.enableCustomFormat;        \r\n       // control.beginPlaceHolder=controlData.beginPlaceHolder;\r\n        //control.endPlaceHolder=controlData.endPlaceHolder;\r\n        //control.weekSelect = controlData.weekSelect;\r\n        //control.showWeekNumbers = controlData.showWeekNumbers;\r\n        //{startTime: valueData.startTime, endTime: valueData.endTime}\r\n        value = new DateRangeValue(valueData);\r\n        break;\r\n      case 'month':\r\n        control = new MonthRangeControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;      \r\n        //control.beginPlaceHolder=controlData.beginPlaceHolder;\r\n        //control.endPlaceHolder=controlData.endPlaceHolder;\r\n        value = new MonthRangeValue(valueData);\r\n        break;\r\n      case 'number':\r\n        control = new NumberRangeControl();\r\n        control.className = controlData.className;\r\n        control.placeholder = this.emptyString(controlData.placeholder);\r\n        control.require = controlData.require;\r\n        control.precision = controlData.precision;\r\n        control.textAlign = controlData.textAlign;\r\n        control.bigNumber = controlData.isBigNumber;\r\n        control.min = controlData.minValue;\r\n        control.max = controlData.maxValue;        \r\n        //control.beginPlaceHolder=controlData.beginPlaceHolder;\r\n        //control.endPlaceHolder=controlData.endPlaceHolder;\r\n        //{startValue: valueData.startValue, endValue: valueData.endValue}\r\n        value = new NumberRangeValue(valueData);\r\n        break;\r\n      case 'dropdown':\r\n        control = new DropDownListControl();\r\n        control.valueType = controlData.valueType;\r\n        control.enumValues = controlData.enumValues;\r\n        control.multiSelect = controlData.multiSelect;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.panelHeight = controlData.panelHeight;\r\n        control.require = controlData.require;\r\n        //{value: [enumValues], key: ä»¥ï¼å·åå²çå­ç¬¦ä¸²})\r\n        value = new DropDownListValue(valueData);\r\n        break;\r\n      case 'help':\r\n        control = new SmartHelpContol();\r\n        control.uri = controlData.uri;\r\n        control.textField = controlData.textField;\r\n        control.valueField = controlData.valueField;\r\n        control.displayType = controlData.displayType;\r\n        control.idField = controlData.idField;\r\n        control.mapFields = controlData.mapFields;\r\n        control.preEventCmd = controlData.preEventCmd;\r\n        control.postEventCmd = controlData.postEventCmd;\r\n        control.context = controlData.context;\r\n        control.className = controlData.className;\r\n        control.enableFullTree = controlData.enableFullTree;\r\n        control.loadTreeDataType = controlData.loadTreeDataType;\r\n        control.singleSelect = controlData.singleSelect;\r\n        control.expandLevel = controlData.expandLevel;\r\n        control.enableCascade = controlData.enableCascade;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        control.nosearch = controlData.nosearch;\r\n        control.displayFields = controlData.displayFields;\r\n        control.displayTextSeparator = controlData.displayTextSeparator;\r\n        control.editable = controlData.editable;\r\n        control.clearFields = controlData.clearFields;\r\n        control.clear = controlData.clear;\r\n        control.dialogTitle = controlData.dialogTitle;\r\n        control.panelHeight = controlData.panelHeight;\r\n        control.panelWidth = controlData.panelWidth;\r\n        if (controlData.hasOwnProperty('pageSize')) {\r\n          control.pageSize = controlData.pageSize;\r\n        }\r\n        if (controlData.hasOwnProperty('pageList')) {\r\n          control.pageList = controlData.pageList;\r\n        }\r\n        //{value: [{}], valueField: string, textValue: string}\r\n        value = new SmartHelpValue(valueData);\r\n        break;\r\n      case 'combolist-help':\r\n        control = new ComboLookUpControl();\r\n        control.uri = controlData.uri;\r\n        control.idField = controlData.idField;\r\n        control.valueField = controlData.valueField;\r\n        control.textField = controlData.textField;\r\n        control.mapFields = controlData.mapFields;\r\n        control.displayType = this.displayTypeTransform(controlData.displayType);\r\n        control.singleSelect = controlData.singleSelect;\r\n        control.preEventCmd = controlData.preEventCmd;\r\n        control.postEventCmd = controlData.postEventCmd;\r\n        control.enableFullTree = controlData.enableFullTree;\r\n        control.loadTreeDataType = controlData.loadTreeDataType;\r\n        control.expandLevel = controlData.expandLevel;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.panelWidth = controlData.panelWidth;\r\n        control.panelHeight = controlData.panelHeight;\r\n        control.require = controlData.require;\r\n        //{value: [{}], valueField: string, textValue: string}\r\n        value = new ComboLookUpValue(valueData);\r\n        break;\r\n      case 'single-date':\r\n        control = new SingleDateControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        //plain string\r\n        value = new SingleDateValue(valueData);\r\n        break;\r\n      case 'single-date-time':\r\n        control = new SingleDateTimeControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        control.enableCustomFormat=controlData.enableCustomFormat;    \r\n        value = new SingleDateTimeValue(valueData);\r\n        break;\r\n      case 'single-number':\r\n        control = new SingleNumberControl();\r\n        control.className = controlData.className;\r\n        control.placeholder = this.emptyString(controlData.placeholder);\r\n        control.precision = controlData.precision;\r\n        control.require = controlData.require;\r\n        control.textAlign = controlData.textAlign;\r\n        control.bigNumber = controlData.isBigNumber;\r\n        control.min = controlData.minValue;\r\n        control.max = controlData.maxValue;\r\n        //{numValue: xxxx}\r\n        value = new SingleNumberValue(valueData);\r\n        break;\r\n      case 'single-year':\r\n        control = new SingleYearControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        control.maxDate = controlData.maxDate;\r\n        control.minDate = controlData.minDate;\r\n        //yearValue : plain string\r\n        value = new SingleYearValue(valueData);\r\n        break;\r\n      case 'single-month':\r\n        control = new SingleMonthControl();\r\n        control.format = controlData.format;\r\n        control.returnFormat=controlData.returnFormat;\r\n        control.className = controlData.className;\r\n        control.placeholder = controlData.placeholder;\r\n        control.require = controlData.require;\r\n        value = new SingleMonthValue(valueData);\r\n        break;\r\n      case 'bool-check':\r\n        control = new CheckBoxControl();\r\n        control.className = controlData.className;\r\n        control.data = [{ value: \"true\", name: field.name }];\r\n        control.horizontal = controlData.horizontal;\r\n        control.disable = controlData.disable;\r\n        control.isStringValue = false;\r\n        control.require = controlData.require;\r\n        //[true] or [false]\r\n        value = new CheckBoxValue(valueData);\r\n        break;\r\n      case 'radio':\r\n        control = new RadioControl();\r\n        control.valueType = controlData.valueType;\r\n        control.enumValues = controlData.enumValues;\r\n        control.className = controlData.className;\r\n        control.showLabel = controlData.showLabel;\r\n        control.horizontal = controlData.horizontal;\r\n        control.disabled = controlData.disabled;\r\n        control.require = controlData.require;\r\n        value = new RadioValue(valueData);\r\n        break;\r\n    }\r\n    return { control, value };\r\n  }\r\n\r\n  getGuid() {\r\n    return (this.s4() + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + this.s4() + this.s4());\r\n  }\r\n\r\n  private s4() {\r\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n  }\r\n\r\n  showInfo(message: string, infoType: string, title: string, timeout: number) {\r\n    this.notify.config.position = 'top-center';\r\n    if (infoType == 'success') {\r\n      this.notify.success(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n    }\r\n    else if (infoType == 'info') {\r\n      this.notify.info(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n    }\r\n    else if (infoType == 'warning') {\r\n      this.notify.warning(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n    }\r\n    else if (infoType == 'error') {\r\n      this.notify.error(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * æ ¹æ®å­æ®µè·åLableæ§ä»¶çTitle\r\n  * @param field\r\n  */\r\n  getConditionItemTitle(field: QueryCondition) {\r\n    if (field.id && field.id !== '') {\r\n      return field.fieldName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å è½½ç­éæ¹æ¡æ¶èµé»è®¤å¼\r\n   * @param solution éè¦èµé»è®¤å¼çç­éæ¹æ¡\r\n   * @param fieldConfigs é»è®¤å¼è®¾ç½®\r\n   * @param readonly æ¯å¦åªè¯»\r\n   * @returns å·²èµé»è®¤å¼çç­éæ¹æ¡\r\n   */\r\n  setValues(solution: QuerySolutionVo, fieldConfigs: FieldConfig[], readonly: boolean): QuerySolutionVo {\r\n    let qc: QueryCondition;\r\n    const conditions = solution.queryConditions ? solution.queryConditions : [];\r\n    let controlType: string;\r\n    fieldConfigs.forEach(field => {\r\n      qc = conditions.find(c => c.fieldCode == field.labelCode);\r\n      //qc.controlå¹¶ä¸æ¯controlData\r\n      if (qc && qc.control && qc.value) {\r\n        controlType = this.controlTypeMap.get(qc.control.getControlType());\r\n        field.control = { controltype: controlType };\r\n        const { control, value } = this.getControlAndValue(field);\r\n        qc.value = this.isNumCheck(qc, value, field);\r\n        qc.readonly = readonly;\r\n      }\r\n    });\r\n    return solution;\r\n  }\r\n  /**\r\n   * \r\n   * @param solution éè¦æ´æ°éç½®çç­éæ¹æ¡\r\n   * @param fieldConfigs æ´æ°éç½®\r\n   * @returns å·²æ´æ°éç½®çç­éæ¹æ¡\r\n   */\r\n  updateControl(conditions: Array<QueryCondition>, fieldConfigs: FieldConfig[]) {\r\n    let qc: QueryCondition;\r\n    conditions = conditions ? conditions : [];\r\n    if (conditions.length > 0) {\r\n      fieldConfigs.forEach(field => {\r\n        qc = conditions.find(c => c.fieldCode == field.labelCode);\r\n        if (qc && qc.control) {\r\n          for (var prop in field.control) {\r\n            qc.control[prop] = field.control[prop]\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // let qc: QueryCondition;\r\n    // const conditions = solution.queryConditions ? solution.queryConditions : [];\r\n    // if (conditions.length > 0) {\r\n    //   fieldConfigs.forEach(field => {\r\n    //     qc = conditions.find(c => c.fieldCode == field.labelCode);\r\n    //     if (qc && qc.control) {\r\n    //       for (var prop in field.control) {\r\n    //         qc.control[prop] = field.control[prop]\r\n    //       }\r\n    //     }\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * å¿å¡«æ§ä»¶éç©ºå¤æ­\r\n   * @param conditions è¿è¡ç­éæä½æ¶å½åææçç­éæ¡ä»¶\r\n   */\r\n  isValid(conditions: Array<QueryCondition>): any[] {\r\n    let qc: QueryCondition;\r\n    const errorArr = conditions.map(qc => {\r\n      if (qc.control.isRequired() && qc.value.isEmpty())\r\n        return {\r\n          type: 'require',\r\n          field: qc.fieldName\r\n        };\r\n    });\r\n    return errorArr.filter(error => error != null);\r\n  }\r\n\r\n  /**\r\n   * è§£å³æ°å¼æ§ä»¶placeholderæ¾ç¤ºä¸ºundefinedçé®é¢\r\n   * @param s æ°å¼æ§ä»¶JSONæè¿°ä¸­çplaceholderéç½®ä¿¡æ¯\r\n   */\r\n  private emptyString(data: any) {\r\n    if (data === null || data === undefined) {\r\n      return '';\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * è§£å³jitçæä»£ç åä¸æå¸®å©æ§ä»¶çdisplayTypeå±æ§ä¸ç»ä»¶apiä¸ä¸è´çé®é¢\r\n   * @param data ä¸æå¸®å©æ§ä»¶JSONæè¿°ä¸­çdisplayTypeéç½®ä¿¡æ¯\r\n   */\r\n  private displayTypeTransform(data: any) {\r\n    if (data === 'List') {\r\n      return 'LOOKUPLIST';\r\n    }\r\n    return 'LOOKUPTREELIST';\r\n  }\r\n\r\n  /**\r\n   * è§£å³æ°å¼æ§ä»¶èµé»è®¤å¼åè½ä¸æå¤§æå°å¼éå¶åè½çå²çªé®é¢\r\n   * @param condition å½åæ­£å¨èµé»è®¤å¼çç­éæ¡ä»¶ï¼è¥æ¯æ°å¼ç±»åï¼éè¦æåå¶controlå¯¹è±¡çmaxå±æ§åminå±æ§çå¼\r\n   * @param value é»è®¤å¼éç½®valueå¯¹è±¡\r\n   * @param field é»è®¤å¼éç½®\r\n   * @returns æ ¡éªæå¤§å¼åæå°å¼ä¹åçé»è®¤å¼éç½®valueå¯¹è±¡\r\n   */\r\n  private isNumCheck(condition: any, value: any, field: any) {\r\n    let minValue: any;\r\n    let maxValue: any;\r\n    if (field.control.controltype == 'single-number') {\r\n      minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;\r\n      maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;\r\n      value.numValue = ((value.numValue - minValue) > 0) ? value.numValue : minValue;\r\n      value.numValue = ((value.numValue - maxValue) < 0) ? value.numValue : maxValue;\r\n    }\r\n    if (field.control.controltype == 'number') {\r\n      minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;\r\n      maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;\r\n      value.startValue = ((value.startValue - minValue) > 0) ? value.startValue : minValue;\r\n      value.startValue = ((value.startValue - maxValue) < 0) ? value.startValue : maxValue;\r\n      value.endValue = ((value.endValue - minValue) > 0) ? value.endValue : minValue;\r\n      value.endValue = ((value.endValue - maxValue) < 0) ? value.endValue : maxValue;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * æºè½è¾å¥æ¡æ§ä»¶éè¦å¼¹åºè¡¨åæ¶ï¼å°è¡¨åéç½®JSONæè¿°è½¬æ¢ä¸ºå¼¹åºè¡¨åå½ä»¤å¯æ¥æ¶çå¼¹çªåæ°\r\n   * @param field éç½®ä¸ºæºè½è¾å¥æ¡æ§ä»¶çå­æ®µçJSONæè¿°\r\n   * @returns å¼¹çªåæ°\r\n   */\r\n  private setInputGroupDialog(field: any): DialogConfig {\r\n    let inputGroupControlData = field.control;\r\n    let modalConfigData = inputGroupControlData.modalConfig;\r\n    if (!field.id || inputGroupControlData.usageMode == 'text') {\r\n      return undefined;\r\n    }\r\n\r\n    let dialogConfig = new DialogConfig();\r\n    dialogConfig.modalId = field.id;\r\n    if (modalConfigData.mapFields) {\r\n      dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '\"'));\r\n    }\r\n    dialogConfig.showHeader = modalConfigData.hasOwnProperty('showHeader') ? modalConfigData.showHeader : true;\r\n    dialogConfig.showCloseButton = modalConfigData.hasOwnProperty('showCloseButton') ? modalConfigData.showCloseButton : true;\r\n    dialogConfig.showMaxButton = modalConfigData.hasOwnProperty('showMaxButton') ? modalConfigData.showMaxButton : true;\r\n    dialogConfig.title = modalConfigData.hasOwnProperty('title') ? modalConfigData.title : '';\r\n    dialogConfig.width = modalConfigData.width;\r\n    dialogConfig.height = modalConfigData.height;\r\n    return dialogConfig;\r\n  }\r\n}\r\n\r\n","import { Component, ViewEncapsulation, Input, ComponentFactoryResolver, Injector, ComponentFactory,\r\n    Output, EventEmitter, LOCALE_ID, ViewChild, OnInit, OnDestroy, AfterViewChecked,   NgZone, AfterViewInit } from '@angular/core';\r\nimport { QueryCondition } from './entity/querycondition';\r\nimport { CommunicationService } from './service/communicationservice';\r\nimport { ConvertorService } from './service/convertorservice';\r\nimport { ControlType } from './entity/controltype';\r\nimport { ConfigDialogComponent } from './fieldconfigdialog/configdialog.component';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { SolutionService } from './service/solution.service';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'farris-querycondition',\r\n    templateUrl: './querycondition.component.html',\r\n    styleUrls: ['./querycondition.component.css'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [CommunicationService]\r\n})\r\nexport class QueryConditionComponent implements OnInit, OnDestroy, AfterViewChecked,AfterViewInit {\r\n\r\n    @Input() fieldConfigs: Array<QueryCondition>;\r\n    private _resetFieldConfigs=[];\r\n    @Input() \r\n    set resetFieldConfigs(value:Array<any>){\r\n        if(value&&value.length>0){\r\n            this.solutionService.updateControlConfigState(value);\r\n        }\r\n        this._resetFieldConfigs=value;\r\n    }\r\n    get resetFieldConfigs(){\r\n        return this._resetFieldConfigs;\r\n    }\r\n    @Input() isControlInline: boolean = true;\r\n    private _selectedFieldConditions:Array<QueryCondition>;\r\n    @Input() \r\n    set selectedFieldConditions(value:Array<QueryCondition>){\r\n        this._selectedFieldConditions=value;\r\n    }\r\n    get selectedFieldConditions():Array<QueryCondition>{\r\n        return this._selectedFieldConditions;\r\n    };\r\n\r\n    @Input() showCompleteLabel: boolean = false;\r\n\r\n    @Input() isDisabled: boolean;\r\n\r\n    @Output() fieldConditionsChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @ViewChild('configDialog') configDialog: ConfigDialogComponent;\r\n\r\n    localeIds = {\r\n        'en': 'en',\r\n        'zh-CHS': 'zh-CHS'\r\n    }\r\n    currentLocale: string;\r\n    \r\n    solutionService: SolutionService;\r\n    \r\n    controlType = ControlType;\r\n    \r\n    labelFormat: string;\r\n\r\n    showButton: boolean = false;\r\n\r\n    fieldCodeOfClearFields: Array<string> = [];\r\n    @ViewChild(\"queryConditionWrap\") queryConditionWrapEl;\r\n    // è·ångZone\r\n    private ngZone = null;\r\n    constructor(\r\n        private communicationService: CommunicationService,\r\n        private convertorService: ConvertorService,\r\n        private resolver: ComponentFactoryResolver,\r\n        private injector: Injector,\r\n        private modalService: BsModalService,\r\n        private localeService: LocaleService\r\n    ) {\r\n        this.currentLocale = this.injector.get(LOCALE_ID);\r\n        this.solutionService = this.injector.get(SolutionService);\r\n        if (!this.ngZone) {          \r\n            this.ngZone = this.injector.get<NgZone>(NgZone, null);\r\n        }\r\n    }\r\n    ngOnDestroy(): void {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.currentLocale === this.localeIds['en']) {\r\n            this.isControlInline = false;\r\n        }\r\n        this.selectedFieldConditions = this.selectedFieldConditions || new Array<QueryCondition>();\r\n    }\r\n    ngAfterViewInit(){\r\n       \r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        \r\n       \r\n    }\r\n    hasSetMultiClass(currentItem: any):boolean{\r\n        if(currentItem.control.className&&currentItem.control.className.indexOf('farris-group-multi-label')>-1){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /* */\r\n    getStyle(currentItem: any): string {\r\n        const defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';\r\n        // è®¾ç½®æ¾ç¤ºæ ç­¾å¨å¹¶ä¸æ¾ç¤ºäºæè¡\r\n        // if(this.showCompleteLabel && currentItem.control.className == 'farris-group-multi-label'){\r\n        //     return defaultCondtionStyle.concat(\" farris-group-multi-label\");\r\n        // }\r\n        let className=currentItem.control.className;\r\n        className=className?className.replace('farris-group-multi-label',''):'';        \r\n        return className ? className : defaultCondtionStyle;\r\n    }\r\n\r\n    configDialogConfirm(event: Event) {\r\n        this.selectedFieldConditions = event as unknown as Array<QueryCondition>;\r\n        this.fieldConditionsChange.emit(event);\r\n    }\r\n\r\n    openFieldConfigDialog() {\r\n        this.configDialog.inputSelectedFileds = this.selectedFieldConditions ? this.selectedFieldConditions : [];\r\n        this.configDialog.dialog.show();\r\n    }\r\n\r\n    resetSelectedConditionValues(exceptRequired=false): Array<QueryCondition> {\r\n        return this.selectedFieldConditions.map(fieldCondition => {\r\n            if(exceptRequired){\r\n                if(!fieldCondition.control.isRequired()){\r\n                    fieldCondition.value.clearValue();\r\n                }\r\n            }else{\r\n                fieldCondition.value.clearValue();\r\n            }\r\n            \r\n            return fieldCondition;\r\n        });\r\n    }\r\n\r\n    conditionChange() {\r\n        this.fieldConditionsChange.emit(this.selectedFieldConditions);\r\n    }\r\n\r\n    confirmLabelFormat(conditions: Array<QueryCondition>) {\r\n        if(this.isControlInline) {\r\n            this.labelFormat = 'farris-form-controls-inline';\r\n            let hasCustom=false;\r\n            if(conditions.length) {\r\n                // å¤éæ¡labelæ ç­¾ç®åå¨æ¡çå³ä¾§ï¼è¶åºå®½åº¦åä¸æ¹åºç°æ»å¨æ¡ï¼è®¡ç®æ ç­¾æå¤§é¿åº¦æ¶éå°å¶æé¤\r\n                let noCheckBoxConditions: Array<QueryCondition> = [];\r\n                conditions.forEach(condition => {\r\n                    if(condition.control.getControlType() != ControlType.BoolCheck){\r\n                        noCheckBoxConditions.push(condition);\r\n                    }\r\n                    if(condition.control['className']&& condition.control['className']!= 'farris-group-multi-label'){\r\n                        hasCustom=true;\r\n                    }\r\n                });\r\n               \r\n                this.labelFormat+=hasCustom?' condition-is-custom':' condition-with-fixed';              \r\n\r\n                let maxLength = 0;\r\n                if(noCheckBoxConditions.length){\r\n                    noCheckBoxConditions.forEach(item => {\r\n                        maxLength = (item.fieldName.length > maxLength) ? (item.fieldName.length) : maxLength;\r\n                    });\r\n                }\r\n                //éè¦å®æ´æ¾ç¤ºæ§ä»¶æ ç­¾æ¶ï¼æ ¹æ®æ ç­¾æå¤§é¿åº¦ç¡®å®æ ç­¾æ æ¯è¡å¯æ¾ç¤ºçå­ç¬¦æ°\r\n                if(this.showCompleteLabel) {\r\n                    if(maxLength > 8) {\r\n                        //æ ç­¾è¶åº8ä¸ªå­ç¬¦åï¼è®¾ç½®æ¯è¡æå¤å¯æ¾ç¤º10ä¸ªå­ç¬¦\r\n                        this.labelFormat = this.labelFormat.concat(\" f-form-label-xl\");\r\n                    }\r\n                    else if((maxLength < 9) && (maxLength > 6)) {\r\n                        //æ ç­¾è¶åº6ä¸ªå­ç¬¦ãä¸è¶è¿8ä¸ªå­ç¬¦æ¶ï¼è®¾ç½®æ¯è¡æå¤å¯æ¾ç¤º8ä¸ªå­ç¬¦\r\n                        this.labelFormat = this.labelFormat.concat(\" f-form-label-lg\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(this.labelFormat){\r\n            return this.labelFormat + (this.isControlInline&&this.showCompleteLabel?' condition-with-complete':'');\r\n        }\r\n    }\r\n}\r\n","import { Component, Input, OnInit, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { NumberRangeValue, NumberRangeValueConvertor } from '../../entity/conditionvalue/numberrangevaue';\r\n\r\n\r\n@Component({\r\n  selector: 'app-solution-numberrange',\r\n  templateUrl: './numberrange.component.html',\r\n})\r\n\r\nexport class NumberRangeComponent implements OnInit, OnChanges {\r\n  // numberRange: string;\r\n  beginValue: any;\r\n  endValue: any;\r\n  testId: string;\r\n  precision: number;\r\n  textAlign: string;\r\n  placeholder: string;\r\n  @Input() item: any;\r\n  canNull: boolean;\r\n  bigNumber: boolean;\r\n  min: number;\r\n  max: number;\r\n  beginPlaceHolder:string;\r\n  endPlaceHolder:string;\r\n\r\n  /**\r\n   * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n   */\r\n  @Input() changeFields: Array<string> = [];\r\n\r\n  @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n  constructor(private solutionService: SolutionService) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n      const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n      if(isChange){\r\n        this.constructMultiFieldNumberRange(this.item.value as NumberRangeValue);\r\n      }\r\n  }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.testId = this.solutionService.getGuid();\r\n    this.canNull = true;\r\n    this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);\r\n    this.beginPlaceHolder=this.item.beginPlaceHolder?this.item.beginPlaceHolder:this.placeholder;\r\n    this.endPlaceHolder=this.item.endPlaceHolder?this.item.endPlaceHolder:this.placeholder;\r\n    this.precision = this.item.control.precision;\r\n    this.textAlign = this.item.control.textAlign;\r\n    this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;\r\n    if(!this.bigNumber){\r\n      this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);\r\n      this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);\r\n    }\r\n    this.constructMultiFieldNumberRange(this.item.value as NumberRangeValue);\r\n  }\r\n\r\n  valueChange(data: any) {\r\n    const dataArray = data.split(\"~\");\r\n    const start = dataArray[0] && dataArray[0].length > 0 ? dataArray[0] : null;\r\n    const end = dataArray[1] && dataArray[1].length > 0 ? dataArray[1] : null;\r\n    if(!this.bigNumber) {\r\n      this.item.value = new NumberRangeValue({startValue: start, endValue: end});\r\n    }else {\r\n      const numberRangeValue = new NumberRangeValue();\r\n      isNaN(parseFloat(start)) ? numberRangeValue.startValue = null : numberRangeValue.startValue = start;\r\n      isNaN(parseFloat(end)) ? numberRangeValue.endValue = null : numberRangeValue.endValue = end;\r\n      this.item.value = numberRangeValue;\r\n    }\r\n    this.conditionChange.emit();\r\n  }\r\n\r\n  // constructNumberRange(value: NumberRangeValue): string {\r\n  //   return \"a~b\".replace(/a/, value.startValue ? value.startValue.toString().trim() : \"\").replace(/b/, value.endValue ? value.endValue.toString().trim() : \"\");\r\n  // }\r\n\r\n  constructMultiFieldNumberRange(value: NumberRangeValue) {\r\n    // this.beginValue = value && value.startValue ? value.startValue.toString().trim() : '';\r\n    // this.endValue = value && value.endValue ? value.endValue.toString().trim() : '';\r\n    this.beginValue = value.startValue == null ? null : value.startValue;\r\n    this.endValue = value.endValue == null ? null : value.endValue;\r\n  }\r\n\r\n  // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n  //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n  // }\r\n\r\n  getConditionItemTitle(field: QueryCondition) {\r\n    return this.solutionService.getConditionItemTitle(field);\r\n  }\r\n\r\n  beginValueChange($event) {\r\n    this.beginValue = $event;\r\n  }\r\n\r\n  endValueChange($event) {\r\n    this.endValue = $event;\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnChanges, EventEmitter, Output} from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { TextValue } from '../../entity/conditionvalue/textvalue';\r\n\r\n@Component({\r\n    selector: 'app-solution-input',\r\n    templateUrl: './input.component.html',\r\n})\r\n\r\nexport class InputComponent implements OnInit{\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    _inputItem: QueryCondition;\r\n\r\n    placeholder: string;\r\n\r\n    @Input()\r\n    set item(textItem: any) {\r\n        this._inputItem = textItem;\r\n    }\r\n    get item(): any{\r\n        return this.constructTextItem(this._inputItem);\r\n    }\r\n    testId: string;\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    constructTextItem(textItem: QueryCondition): QueryCondition {\r\n        const textValueObj = textItem.value as TextValue;\r\n        textValueObj.value = textValueObj.value && textValueObj.value.trim();\r\n        textItem.value = textValueObj;\r\n        return textItem;\r\n    }\r\n\r\n    constructor(private solutionService:SolutionService){}\r\n\r\n    ngOnInit(): void {\r\n        this.testId = this.solutionService.getGuid();\r\n        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);\r\n    }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n    \r\n    onBlur(){\r\n        this.conditionChange.emit();\r\n    }\r\n}","import { Component, Input, OnInit, EventEmitter, Output} from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { InputGroupControl } from '../../entity/controltype/input-group/inputgroupcontrol';\r\nimport { InputGroupValue } from '../../entity/conditionvalue/inputgroupvalue';\r\n\r\n\r\n@Component({\r\n    selector: 'app-solution-inputgroup',\r\n    templateUrl: './inputgroup.component.html',\r\n})\r\n\r\nexport class InputGroupComponent implements OnInit {\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    _inputItem: QueryCondition;\r\n\r\n    @Input()\r\n    set item(inputGroupItem: any) {\r\n        this._inputItem = inputGroupItem;\r\n    }\r\n    get item(): any{\r\n        return this.constructInputGroupItem(this._inputItem);\r\n    }\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n    //ç»ä»¶id\r\n    testId: string;\r\n    //ä½¿ç¨æ¨¡å¼ï¼ææ¬textæèå¼¹çªopen-modal\r\n    usageMode: string;\r\n    //å¼¹çªå½ä»¤éè¦æ¥æ¶çåæ°\r\n    dialogOptions: any;\r\n    //å¼¹çªæ¨¡å¼ä¸ï¼ååè¡¨ä¸­åªä¸ªå­æ®µçå¼æ å°å°å½åå­æ®µ\r\n    textField: string;\r\n    //æ§ä»¶åæ¾ç¤ºææ¬æ¯å¦ä¸ºå¼¹çªè¿åçææ¬ï¼æå¨è¾å¥æèæå¨ååºä¿®æ¹æ¶ä¸ºfalse\r\n    isTextFromDialog: boolean = false;\r\n    //å¼¹çªè¿åçææ¬\r\n    textFormDialog: string;\r\n\r\n    constructInputGroupItem(inputGroupItem: QueryCondition): QueryCondition {\r\n        const inputGroupValueObj = inputGroupItem.value as InputGroupValue;\r\n        inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue.trim();\r\n        inputGroupItem.value = inputGroupValueObj;\r\n        return inputGroupItem;\r\n    }\r\n\r\n    constructor(private solutionService:SolutionService){}\r\n\r\n    ngOnInit(): void {\r\n        this.testId = this.solutionService.getGuid();\r\n        this.getInputGroupBindingInfo();\r\n    }\r\n\r\n    getInputGroupBindingInfo() {\r\n        const inputGroupControl = (this.item.control as InputGroupControl);\r\n        this.usageMode = inputGroupControl.usageMode;\r\n        if(this.usageMode == 'open-modal'||this.usageMode == 'open-remote-modal') {\r\n            this.dialogOptions = inputGroupControl.dialogOptions;\r\n            /*\r\n                example of dialogOptions = {\r\n                   modalId: \"1e011720-eb0f-4c9c-82b6-6844c89b2303\"\r\n                   mapFields: {hDepartment: \"Name\"}\r\n                   title: \"æµè¯æ é¢æ \"\r\n                   width: 800\r\n                   height: 600\r\n                }\r\n             */\r\n            if(this.dialogOptions.mapFields){\r\n                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('\"')[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n    \r\n    onClick(event: any){\r\n        if(this.usageMode == 'text'){\r\n            this.item.control.click();\r\n        }\r\n        else{\r\n            const options = this.dialogOptions;\r\n            options.handle = (selectedItem) => {\r\n                if(selectedItem && this.textField){\r\n                    this.item.value.value = selectedItem;\r\n                    this.item.value.textValue = this.item.value.getTextValue(this.textField);\r\n                    this.item.value.textField = this.textField;\r\n                    this.item.value.isInputText = false;\r\n\r\n                    this.isTextFromDialog = true;\r\n                    this.textFormDialog = this.item.value.textValue;\r\n                    this.onBlur();\r\n                }\r\n            }\r\n            this.item.control.click({event, options});\r\n        }\r\n    }\r\n\r\n    onBlur(){\r\n        if(this.usageMode == 'text') {\r\n            this.item.value.isInputText = true;\r\n        }\r\n        if(this.usageMode == 'open-modal'||this.usageMode == 'open-remote-modal') {\r\n            if(!this.isTextFromDialog) {\r\n                //console.log('å¼¹çªæ¨¡å¼ä¸æ§ä»¶åææ¬æ¯æå¨è¾å¥ç');\r\n                this.item.value.isInputText = true;\r\n            }\r\n            if(this.item.value.textValue != this.textFormDialog){\r\n                //console.log('éè¿å¼¹çªéæ©çå¼å·²è¢«æå¨ä¿®æ¹');\r\n                this.isTextFromDialog = false;\r\n                this.item.value.value = [];\r\n                this.item.value.textField = undefined;\r\n                this.item.value.isInputText = true;\r\n            }\r\n        }\r\n        this.conditionChange.emit();\r\n    }\r\n}","import { Component, Input, OnInit, OnChanges, Output, EventEmitter, Injector, ViewChild, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { SmartHelpContol } from '../../entity/controltype/smarthelp/smarthelpcontrol';\r\nimport { IControl } from '../../entity/controltype/icontrol';\r\nimport { SmartHelpValue } from '../../entity/conditionvalue/smarthelpvalue';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-solution-smarthelp',\r\n    templateUrl: './smarthelp.component.html',\r\n})\r\n\r\nexport class SolutionSmartHelpComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    @Output('helpMapping') mappingEmitter = new EventEmitter();\r\n\r\n    @ViewChild('lookup') lookup: LookupGridComponent;\r\n\r\n    uri: string;\r\n    textField: string;\r\n    mapFields: any;\r\n    idField: any;\r\n    valueField: any;\r\n    textValue: any;\r\n    displayType: any;\r\n    context: any;\r\n    preEventCmd: any;\r\n    postEventCmd: any;\r\n    loadTreeDataType: string;\r\n    enableFullTree: boolean;\r\n    singleSelect: boolean;\r\n    expandLevel: number;\r\n    enableCascade: boolean;\r\n    testId: string;\r\n    placeholder: string;\r\n    nosearch: boolean;\r\n    displayFields: string;\r\n    displayTextSeparator: string;\r\n    editable: boolean;\r\n    clearFields: string;\r\n    // æ é¢\r\n    dialogTitle: string;\r\n    // å®½åº¦\r\n    dialogWidth: number;\r\n    // é«åº¦\r\n    dialogHeight: number;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    pageSize: number = 20;\r\n    /** å¯ç¨åé¡µè®°å½æ°åè¡¨ */\r\n    pageList: Array<number> = [10, 20, 30, 50, 100];\r\n\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.getSmartHelpBindingInfo();\r\n        this.testId = this.solutionService.getGuid();\r\n        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);\r\n\r\n        this.lookup.textChanged.subscribe((v) => {\r\n            this.textChangedHandler(v);\r\n        })\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getSmartHelpBindingInfo();\r\n        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if (isChange) {\r\n                this.textValue = (this.item.value as SmartHelpValue).textValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    //ITEMï¼\r\n    //control: SmartHelpContol {uri: \"WuLiao.wOrgId\", textField: \"name\", valueField: \"code\", mapFields: {}, idField: \"id\"}\r\n    // fieldCode: \"wOrgId\"\r\n    // fieldName: \"æå±æºæ\"\r\n    // id: \"WuLiao.wOrgId\"\r\n    // value: SmartHelpValue {valueField: null, value: null}\r\n    // valueType: 0\r\n    getSmartHelpBindingInfo() {\r\n        const smartHelpControl = (this.item.control as SmartHelpContol);\r\n        this.uri = smartHelpControl.uri;\r\n        this.textField = smartHelpControl.textField;\r\n        this.idField = smartHelpControl.idField;\r\n        this.valueField = smartHelpControl.valueField;\r\n        this.displayType = smartHelpControl.displayType;\r\n        this.mapFields = smartHelpControl.mapFields;\r\n        this.context = smartHelpControl.context;\r\n        this.preEventCmd = smartHelpControl.preEventCmd;\r\n        this.postEventCmd = smartHelpControl.postEventCmd;\r\n        this.enableFullTree = smartHelpControl.enableFullTree;\r\n        this.loadTreeDataType = smartHelpControl.loadTreeDataType;\r\n        this.singleSelect = smartHelpControl.singleSelect === false ? false : true;\r\n        this.expandLevel = smartHelpControl.expandLevel;\r\n        this.enableCascade = smartHelpControl.enableCascade;\r\n        // æ é¢\r\n        this.dialogTitle = smartHelpControl.dialogTitle?smartHelpControl.dialogTitle:'';\r\n        // å®½åº¦\r\n        this.dialogWidth = smartHelpControl.panelWidth;\r\n        // é«åº¦\r\n        this.dialogHeight = smartHelpControl.panelHeight;\r\n        const smartHelpValue = (this.item.value as SmartHelpValue);\r\n        if (smartHelpValue.textValue == 'help-text-value-null') {//æ§æ°æ®å¼å®¹\r\n            this.textValue = smartHelpValue.getTextValue(this.textField);\r\n        } else {\r\n            this.textValue = smartHelpValue.textValue;\r\n        }\r\n        this.nosearch = smartHelpControl.nosearch;//é»è®¤false\r\n        this.displayFields = smartHelpControl.displayFields ? smartHelpControl.displayFields : '';\r\n        this.displayTextSeparator = smartHelpControl.displayTextSeparator ? smartHelpControl.displayTextSeparator : '_';\r\n        this.editable = smartHelpControl.editable;\r\n        this.clearFields = smartHelpControl.clearFields;\r\n        if (smartHelpControl.hasOwnProperty('pageSize') && smartHelpControl.pageSize) {\r\n            this.pageSize = smartHelpControl.pageSize\r\n        }\r\n        if (smartHelpControl.hasOwnProperty('pageList') && smartHelpControl.pageList) {\r\n            this.pageList = smartHelpControl.pageList.split(\",\").map(item => { return parseInt(item); })\r\n        }\r\n    }\r\n\r\n    onBeforeOpen = () => {\r\n        const t = this.item.value as SmartHelpValue;\r\n        if (t && t.value) {\r\n            const ids = t.value.map(n => n[this.idField || 'id']).join(',');\r\n            this.lookup.displayValue = ids;\r\n        }\r\n\r\n        return of(true);\r\n    }\r\n\r\n    clearData(data: any) {\r\n        (this.item.value as SmartHelpValue).clearValue();\r\n        if (this.item.control.clear) {\r\n            this.item.control.clear();\r\n        }\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    /**\r\n     * selectedItem\r\n     * code: \"code02\"\r\n        id: \"id02\"\r\n        name: \"æºæ02\"\r\n        version: \"2019-10-21T00:00:00\"\r\n    */\r\n    textChangedHandler(data: string) {//æå·¥è¾å¥æ¶è§¦å\r\n        if (this.item && this.item.value) {\r\n            const helpValue = (this.item.value as SmartHelpValue);\r\n            helpValue.value = [data];\r\n            helpValue.textValue = data;\r\n            helpValue.isInputText = true;\r\n            // this.textValue = helpValue.textValue;\r\n            this.conditionChange.emit();\r\n        }\r\n    }\r\n\r\n    selectedDataHandler(selectedItem: any) {//éæ©æ¶è§¦å\r\n        const helpValue = (this.item.value as SmartHelpValue);\r\n        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem;//åéè¿åå¯¹è±¡ï¼å¤éè¿åæ°ç»\r\n        helpValue.valueField = this.valueField;\r\n        helpValue.textValue = this.textValue;\r\n        helpValue.isInputText = false;\r\n        this.conditionChange.emit();\r\n    }\r\n}","import { Component, Input, OnInit, OnChanges, EventEmitter, Output, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { DropDownListControl } from '../../entity/controltype/dropdownlist/dropdownlistcontrol';\r\nimport { EnumType } from '../../entity/controltype/dropdownlist/enumtype';\r\nimport { EnumIntegerValue } from '../../entity/controltype/dropdownlist/integerenumvalue';\r\nimport { EnumStringValue } from '../../entity/controltype/dropdownlist/stringenumvalue';\r\nimport { EnumBoolValue } from '../../entity/controltype/dropdownlist/boolenumvalue';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { IValue } from '../../entity/conditionvalue/ivalue';\r\nimport { DropDownListValue } from '../../entity/conditionvalue/dropdownlistvalue';\r\n\r\n@Component({\r\n    selector: 'app-solution-dropdownlist',\r\n    templateUrl: './dropdownlist.component.html',\r\n})\r\n\r\nexport class DropDownListComponent implements OnInit, OnChanges {\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    //ä¸æåè¡¨æ°æ®æº\r\n    dropDownListDataSource: Array<any> = new Array<any>();\r\n    //ä¸æåè¡¨æ§ä»¶åæ¾ç¤ºææ¬\r\n    selectedItemId: any = '';\r\n    //ç»ä»¶id\r\n    testId: string;\r\n    //æ§ç»æä¸­placeholderå±æ§å¨item.controlå\r\n    placeholder: string;\r\n\r\n    constructor(private solutionService: SolutionService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.getDataSource();\r\n        const initialValue = this.item.value as DropDownListValue;\r\n        initialValue.key && (this.selectedItemId = initialValue.key);\r\n        this.testId = this.solutionService.getGuid();\r\n        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getDataSource();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.selectedItemId = (this.item.value as DropDownListValue).key;\r\n            }\r\n        }\r\n    }\r\n\r\n    getDataSource() {\r\n        this.dropDownListDataSource = (this.item.control as DropDownListControl).enumValues;\r\n    }\r\n\r\n    selectChange(selected: any){\r\n        this.item.value = new DropDownListValue({\r\n            value : selected['selections'],\r\n            key :  selected['value']\r\n        });\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    onClear(event: any){\r\n        this.item.value = new DropDownListValue();\r\n    }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}","import { Component, Input, OnInit, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { SingleNumberValue } from '../../entity/conditionvalue/single-number-value';\r\n\r\n@Component({\r\n    selector: 'app-solution-single-number',\r\n    templateUrl: './single-number.component.html',\r\n})\r\n\r\nexport class SingleNumberComponent implements OnInit, OnChanges {\r\n\r\n    number: number;\r\n    placeholder: string;\r\n    precision: number;\r\n    textAlign: string;\r\n    @Input() item: any;\r\n    testId: string;\r\n    canNull: boolean;\r\n    bigNumber: boolean;\r\n    min: number;\r\n    max: number;\r\n\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    constructor(private solutionService:SolutionService){}\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.number = this.item.value.getOriginalValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.number = this.item.value.getOriginalValue();\r\n        this.testId = this.solutionService.getGuid();\r\n        this.canNull = true;\r\n        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);\r\n        this.precision = this.item.control.precision;\r\n        this.textAlign = this.item.control.textAlign;\r\n        this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;\r\n        if(!this.bigNumber){\r\n            this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);\r\n            this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);\r\n        }\r\n    }\r\n\r\n    valueChange(data: any){\r\n        const numberValue = new SingleNumberValue();\r\n        isNaN(parseFloat(data)) ? numberValue.numValue = null : numberValue.numValue = data;\r\n        this.item.value = numberValue;\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}","import { Component, OnInit, Output, EventEmitter, ViewChild, TemplateRef, HostBinding, ViewEncapsulation, ElementRef, Input, SkipSelf, OnChanges, SimpleChanges, ContentChild, AfterContentInit, AfterViewInit } from '@angular/core';\r\nimport { SolutionService } from '../service/solution.service';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { QueryCondition } from '../entity/querycondition';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n@Component({\r\n    selector: 'app-queryconfigdialog',\r\n    templateUrl: './configdialog.component.html',\r\n    styleUrls: ['./configdialog.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ConfigDialogComponent implements OnInit, OnChanges {\r\n    @Input() inputSelectedFileds: Array<QueryCondition> = [];\r\n    @Input() filedsDataSource: Array<QueryCondition>;\r\n    @Output() cancelEmitter: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() confirmEmitter: EventEmitter<any> = new EventEmitter<any>();\r\n    @ViewChild('dialog') dialog: DialogComponent;\r\n    @ViewChild('searchMulti') multiSelectCmp: MultiSelectComponent;\r\n\r\n    selectedIds: Array<string> = [];\r\n    title: string;\r\n    constructor(private solutionService: SolutionService, private localeService: LocaleService) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.inputSelectedFileds && changes.inputSelectedFileds.currentValue) {\r\n            this.selectedIds = this.inputSelectedFileds.map(qc => qc.id);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.title = this.localeService.getValue('queryCondition.container.config');\r\n    }\r\n    /**\r\n     * åæ¶\r\n     */\r\n    cancel() {\r\n        this.selectedIds = this.inputSelectedFileds.map(qc => qc.id);\r\n        this.cancelEmitter.emit(true);        \r\n        this.multiSelectCmp.searchValue = '';\r\n        this.dialog.close();\r\n    }\r\n\r\n    /**\r\n     * ç¡®è®¤\r\n     */\r\n    confirm() {\r\n        const selectedFields = [];\r\n        let _fieldData: QueryCondition;\r\n        this.selectedIds.forEach(id => {\r\n            const index = this.inputSelectedFileds.findIndex(field => field.id == id);\r\n            if (index > -1) {\r\n                selectedFields.push(this.inputSelectedFileds[index]);\r\n            } else {\r\n                _fieldData = this.filedsDataSource.find(field => field.id == id);\r\n                _fieldData.value.clearValue();\r\n                selectedFields.push(_fieldData);\r\n            }\r\n        });\r\n        this.confirmEmitter.emit(selectedFields);        \r\n        this.multiSelectCmp.searchValue = '';\r\n        this.dialog.close();\r\n    }\r\n\r\n    /**\r\n     * éç½®\r\n     */\r\n    reset() {\r\n\r\n    }\r\n}\r\n","import { Component, Input, OnInit, Injector, OnChanges, SimpleChanges, EventEmitter, Output} from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { CheckBoxValue } from '../../entity/conditionvalue/checkbox-value';\r\nimport { CheckBoxControl } from '../../entity/controltype/checkbox/checkbox-control';\r\n\r\n\r\n@Component({\r\n    selector: 'app-solution-checkbox',\r\n    templateUrl: './checkbox.component.html',\r\n})\r\n\r\nexport class CheckBoxComponent implements OnInit, OnChanges {\r\n   \r\n    _item: QueryCondition;\r\n    checkValue: any[];\r\n    controlData: CheckBoxControl;\r\n    @Input() \r\n    set item(nr: QueryCondition){\r\n        this._item = nr;\r\n    }\r\n\r\n    get item(){\r\n        return this._item;\r\n    }\r\n    testId:string;\r\n\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    solutionService: SolutionService;\r\n\r\n    constructor(private injector: Injector){\r\n        this.solutionService = this.injector.get(SolutionService);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.checkValue = (this.item.value as CheckBoxValue).getOriginalValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.checkValue = this.item.value.getOriginalValue();\r\n        this.controlData = this.item.control as CheckBoxControl;\r\n        this.testId = this.solutionService.getGuid();\r\n    }\r\n\r\n    valueChanged(event: any[]){\r\n        //éä¸­æ¶è¿å[true], ä»éä¸­åä¸ºæªéä¸­æ¶è¿å[]\r\n        if(event.length){\r\n            this._item.value.setOriginalValue(event);\r\n        }else{\r\n            this._item.value.setOriginalValue([false]);\r\n        }\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}","import { Component, Input, OnInit, OnChanges, Injector, EventEmitter, Output, HostBinding, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { RadioControl } from '../../entity/controltype/radio/radio-control';\r\nimport { RadioValue } from '../../entity/conditionvalue/radio-value';\r\n\r\n@Component({\r\n    selector: 'app-solution-radio',\r\n    templateUrl: './radio.component.html',\r\n})\r\n\r\nexport class RadioComponent implements OnInit, OnChanges {\r\n\r\n    _item: QueryCondition;\r\n    solutionService: SolutionService;\r\n    radioControl: RadioControl;\r\n    radioValue: any;\r\n    testId: string;\r\n    showLabel: boolean;\r\n\r\n    @Input()\r\n    set item(nr: QueryCondition){\r\n        this._item = nr;\r\n    }\r\n    get item(){\r\n        return this._item;\r\n    }\r\n    \r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    @HostBinding('class.f-solution-radio-group-wrapper') cls = true;\r\n\r\n    constructor(private injector: Injector) {\r\n       this.solutionService = this.injector.get(SolutionService);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.radioValue = (this.item.value as RadioValue).getOriginalValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n       this.radioControl = this.item.control as RadioControl;\r\n       this.radioValue = (this.item.value as RadioValue).getOriginalValue();\r\n       this.testId = this.solutionService.getGuid();\r\n       this.showLabel = this.radioControl.showLabel;\r\n    }\r\n\r\n    valueChanged(event: any){\r\n        this._item.value.setOriginalValue(event);\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}","import { Component, Input, OnInit, OnChanges, Injector, EventEmitter, Output, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\n\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { ShowType } from '@farris/ui-datepicker';\r\n\r\n@Component({\r\n  selector: 'app-solution-datepicker',\r\n  templateUrl: './datepicker.component.html',\r\n})\r\nexport class DatePickerComponent implements OnInit, OnChanges {\r\n  // è¿æ»¤æ¡ä»¶\r\n  @Input() item: any;\r\n  // \r\n  @Input() controlType: number;\r\n\r\n  /**\r\n   * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n   */\r\n  @Input() changeFields: Array<string> = [];\r\n\r\n  @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n  solutionService: SolutionService;\r\n  dateRange: boolean; // trueåºé´ falseå\r\n  showTime: boolean; // trueæ¾ç¤ºæ¶é´ falseä¸æ¾ç¤º\r\n  showType: number = ShowType.all; // æ¾ç¤ºç±»åï¼é»è®¤æ¾ç¤ºå¨é¨1ï¼ä¸æ¾ç¤ºæ¥æï¼ç¨äºéæ©å¹´ææ¨¡å¼2ï¼ä¸æ¾ç¤ºæ¥æåæä»½ï¼ç¨äºéæ©å¹´æ¨¡å¼3ï¼ç¨äºå¨éæ©4ã\r\n  maxDate: string | Date | null = '';\r\n  minDate: string | Date | null = '';\r\n  disableDates: { year: number, month: number, day: number }[];\r\n  placeholder: string;\r\n  dateFormat: string; // æ¾ç¤ºå¼æ¥ææ ¼å¼å\r\n  returnFormat: string; // è¿åå¼æ¥ææ ¼å¼å\r\n  returnType: string; // è¿åå¼ç±»åï¼è¿åå¼ç±»åé»è®¤æåµä¸æ¯åè¾å¥å¼ç±»åç¸åï¼ä½æ¯å¦æè¾å¥å¼ä¸ºnullç­éæ³å¼ï¼é»è®¤ä¸ºStringï¼å¦ææ³æ¹ä¸ºDateï¼å®ä¹è¯¥å­æ®µã\r\n  disabled: boolean;\r\n  readonly: boolean;\r\n  editable: boolean = false;\r\n  dateRangeDatesDelimiter: string = '~';\r\n  bindValue: string;\r\n  beginValue: any;\r\n  endValue: any;\r\n  testId: string;\r\n  beginPlaceHolder:string;\r\n  endPlaceHolder:string;\r\n  constructor(private injector: Injector) {\r\n    this.solutionService = this.injector.get(SolutionService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n      const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n      if (isChange) {\r\n        if (this.dateRange) {\r\n          this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';\r\n          this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';\r\n          this.bindValue = this.item.value.getOriginalValue();\r\n        } else {\r\n          this.bindValue = this.item.value.getOriginalValue();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.testId = this.solutionService.getGuid();\r\n    // const controlType = this.item.control.getControlType();\r\n    switch (this.controlType) {\r\n      case ControlType.DateRange:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy-MM-dd';\r\n        this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';\r\n        this.dateRange = true;\r\n        break;\r\n      case ControlType.SingleDate:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy-MM-dd';\r\n        this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';\r\n        this.dateRange = false;\r\n        break;\r\n      case ControlType.SingleYear:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy';\r\n        this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy';\r\n        this.showType = ShowType.noDateAndMonth;\r\n        this.dateRange = false;\r\n        break;\r\n      case ControlType.DateTimeRange:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy-MM-dd HH:mm:ss';\r\n        if(this.item.control.enableCustomFormat){\r\n          // ä½¿ç¨èªå®ä¹æ ¼å¼\r\n          this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';\r\n        }else{\r\n           // æªå¯ç¨èªå®ä¹æ ¼å¼\r\n           this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';\r\n           this.dateFormat = this.dateFormat + ' HH:mm:ss';\r\n        }\r\n        this.showTime = true;\r\n        this.dateRange = true;\r\n        break;\r\n      case ControlType.SingleMonth:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy-MM';\r\n        this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';\r\n        this.showType = ShowType.noDate;\r\n        this.dateRange = false;\r\n        break;\r\n      case ControlType.MonthRange:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy-MM';\r\n        this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';\r\n        this.showType = ShowType.noDate;\r\n        this.dateRange = true;\r\n        break;\r\n      case ControlType.SingleDateTime:\r\n        this.returnFormat = this.item.control.returnFormat?this.item.control.returnFormat:'yyyy-MM-dd HH:mm:ss';\r\n        if(this.item.control.enableCustomFormat){\r\n          // ä½¿ç¨èªå®ä¹æ ¼å¼\r\n          this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';\r\n        }else{\r\n           // æªå¯ç¨èªå®ä¹æ ¼å¼\r\n           this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';\r\n           this.dateFormat = this.dateFormat + ' HH:mm:ss';\r\n        }\r\n        this.showTime = true;\r\n        this.dateRange = false;\r\n        break;\r\n    }\r\n    // æ´æ°æ¡ä»¶\r\n    this.updateParamsByCondition();\r\n    this.placeholder = this.item.placeHolder ? this.item.placeHolder : this.item.control.placeholder;\r\n    if (this.dateRange) {\r\n      this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';\r\n      this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';\r\n      this.beginPlaceHolder=this.item.beginPlaceHolder?this.item.beginPlaceHolder:this.placeholder;\r\n      this.endPlaceHolder=this.item.endPlaceHolder?this.item.endPlaceHolder:this.placeholder;\r\n      this.bindValue = this.item.value.getOriginalValue();\r\n    } else {\r\n      this.bindValue = this.item.value.getOriginalValue();\r\n    }\r\n    \r\n    if (this.item.control.weekSelect && this.controlType == ControlType.DateRange) {\r\n      this.showType = ShowType.selectWeek;\r\n    }\r\n    \r\n    // \r\n    this.solutionService.getControlConfigState().subscribe((simpleConditions) => {\r\n      //ç®åæ¡ä»¶\r\n      let findSimpleCondition = simpleConditions.find(item => item['fieldCode'] == this.item['fieldCode']);\r\n      if (findSimpleCondition) {\r\n        this.updateParamsByCondition(findSimpleCondition);\r\n      }\r\n    });\r\n  }\r\n  private updateParamsByCondition(condition = null) {\r\n    let conditionControl = null;\r\n    conditionControl = condition ? condition.control : this.item.control;\r\n    switch (this.controlType) {\r\n      case ControlType.SingleYear:\r\n        this.maxDate = conditionControl.hasOwnProperty('maxDate') ? conditionControl['maxDate'] : this.maxDate;\r\n        this.minDate = conditionControl.hasOwnProperty('minDate') ? conditionControl['minDate'] : this.minDate;\r\n        break;\r\n    }\r\n  }\r\n  onDateChange(event: any) {\r\n    this.item.value.setOriginalValue({\r\n      formatted: event.returnFormatted,\r\n      delimiter: this.dateRangeDatesDelimiter\r\n    });\r\n    this.conditionChange.emit();\r\n  }\r\n\r\n  getConditionItemTitle(field: QueryCondition) {\r\n    return this.solutionService.getConditionItemTitle(field);\r\n  }\r\n\r\n  beginValueChange($event) {\r\n   // this.beginValue = $event;\r\n  }\r\n\r\n  endValueChange($event) {\r\n   // this.endValue = $event;\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnChanges, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ComboLookUpControl } from '../../entity/controltype/combolookup/combolookup-control';\r\nimport { ComboLookUpValue } from '../../entity/conditionvalue/combolookup-value';\r\nimport { SolutionService } from '../../service/solution.service';\r\n\r\n@Component({\r\n    selector: 'app-solution-combolookup',\r\n    templateUrl: './combolookup.component.html',\r\n})\r\n\r\nexport class ComboLookUpComponent implements OnInit,OnChanges{\r\n   \r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item:any;\r\n\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    @Output('conditionChange') conditionChange = new EventEmitter();\r\n\r\n    uri: string;\r\n    idField: any;\r\n    valueField: any;\r\n    textField: string;\r\n    textValue: any;\r\n    mapFields: any;\r\n    displayType: any;\r\n    multiSelect: boolean;\r\n    preEventCmd: any;\r\n    postEventCmd: any;\r\n    testId: string;\r\n    placeholder: string;\r\n    autoWidth: boolean;\r\n    panelWidth: number;\r\n    panelHeight: number;\r\n    selectedValues = \"\";\r\n\r\n    constructor(private solutionService: SolutionService){ }\r\n\r\n    ngOnInit(): void {\r\n        this.getComboLookUpBindingInfo();\r\n        this.testId = this.solutionService.getGuid();\r\n        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);\r\n        this.autoWidth = false;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getComboLookUpBindingInfo();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.textValue = (this.item.value as ComboLookUpValue).textValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    valueChangeHandler(data: any){\r\n        const helpValue = (this.item.value as ComboLookUpValue);\r\n        helpValue.value = data.selections;\r\n        helpValue.valueField = this.valueField;\r\n        helpValue.textValue = helpValue.getTextValue(this.textField);\r\n        this.textValue = helpValue.textValue;\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    getComboLookUpBindingInfo(){\r\n        const comboLookUpControl = (this.item.control as ComboLookUpControl);\r\n        this.uri = comboLookUpControl.uri;\r\n        this.idField = comboLookUpControl.idField;\r\n        this.valueField = comboLookUpControl.valueField;\r\n        this.textField = comboLookUpControl.textField;\r\n        this.mapFields = comboLookUpControl.mapFields;\r\n        this.displayType = comboLookUpControl.displayType;\r\n        this.preEventCmd = comboLookUpControl.preEventCmd;\r\n        this.postEventCmd = comboLookUpControl.postEventCmd;\r\n        this.multiSelect = comboLookUpControl.singleSelect === true ? false : true;\r\n        this.panelWidth = comboLookUpControl.panelWidth ? comboLookUpControl.panelWidth : 300;\r\n        this.panelHeight = comboLookUpControl.panelHeight ? comboLookUpControl.panelHeight : 300;\r\n        const comboLookUpValue = (this.item.value as ComboLookUpValue);\r\n        if(comboLookUpValue.textValue == 'help-text-value-null'){//æ§æ°æ®å¼å®¹\r\n            this.textValue = comboLookUpValue.getTextValue(this.textField);\r\n        }else{\r\n            this.textValue = comboLookUpValue.textValue;\r\n        }\r\n\r\n        if (comboLookUpValue && comboLookUpValue.value) {\r\n            this.selectedValues = (comboLookUpValue.value || []).map(n => n[this.idField]).join(',');\r\n        }\r\n    }\r\n\r\n    clearData(data: any){\r\n        (this.item.value as ComboLookUpValue).clearValue();\r\n        this.conditionChange.emit();\r\n    }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}","import { Directive, Input, OnInit, Optional, Self, Injector } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { QueryConditionComponent } from '../querycondition.component';\r\n\r\n@Directive({\r\n    selector: '[clear-fields]'\r\n})\r\nexport class ClearFieldsDirective implements OnInit { \r\n    @Input('clear-fields') clearFields = '';\r\n   \r\n    constructor(@Optional() @Self() private ngCtrl: NgControl, private qcc: QueryConditionComponent, private inject: Injector) {} \r\n\r\n    ngOnInit() {\r\n        if(this.clearFields && this.ngCtrl) {\r\n            //console.log(this.ngCtrl, this.clearFields, this.qcc);\r\n            //console.log(this.qcc.selectedFieldConditions);\r\n            this.ngCtrl.valueChanges.subscribe( (v) => {\r\n                this.qcc.fieldCodeOfClearFields = [];\r\n                this.clearFields.split(',').forEach(n => {  \r\n                    const conditionItem = this.qcc.selectedFieldConditions.find(c => c.fieldCode === n);\r\n                    if (conditionItem) {\r\n                        this.qcc.fieldCodeOfClearFields.push(n);\r\n                        conditionItem.value.clearValue();\r\n                    }\r\n                });\r\n            })\r\n        }\r\n    }\r\n}","import { Directive, Input, OnInit, Injector, ElementRef, NgZone } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[label-text-multi]'\r\n})\r\nexport class LabelTextMultiDirective implements OnInit {\r\n    private multiCls = 'farris-group-multi-label';\r\n    private _enableMulti = false;\r\n    @Input('label-text-multi')\r\n    set enableMulti(value: boolean) {\r\n        this._enableMulti = value;\r\n        this.judgeMulti();\r\n    }\r\n    get enableMulti() {\r\n        return this._enableMulti\r\n    }\r\n    // è·ångZone\r\n    private ngZone = null;\r\n    constructor(private el: ElementRef, private injector: Injector) {\r\n        if (!this.ngZone) {\r\n            this.ngZone = this.injector.get<NgZone>(NgZone, null);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n    judgeMulti() {\r\n        if (this._enableMulti) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n\r\n                setTimeout(() => {\r\n                    let textEl = this.el.nativeElement.querySelector('.farris-label-text');\r\n                    if (!textEl) {\r\n                        return;\r\n                    }\r\n                    // è¶åº\r\n                    if (textEl.clientWidth < textEl.scrollWidth) {\r\n                        this.el.nativeElement.className = this.el.nativeElement.className + ' ' + this.multiCls;\r\n                    } else {\r\n                        this.el.nativeElement.className = this.el.nativeElement.className.replace(this.multiCls, '');\r\n                    }\r\n                }, 20);\r\n            });\r\n\r\n        }\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { QueryConditionComponent } from './querycondition.component';\r\nimport { NumberRangeComponent } from './controlcomponent/numberrangecomponent/numberrange.component';\r\nimport { InputComponent } from './controlcomponent/input/input.component';\r\nimport { InputGroupComponent } from './controlcomponent/inputgroup/inputgroup.component';\r\nimport { SolutionSmartHelpComponent } from './controlcomponent/smarthelp/smarthelp.component';\r\nimport { DropDownListComponent } from './controlcomponent/dropdown/dropdownlist.component';\r\nimport { SingleNumberComponent } from './controlcomponent/numbercomponent/single-number.component';\r\nimport { SolutionService } from './service/solution.service';\r\nimport { ConvertorService } from './service/convertorservice';\r\nimport { ConfigDialogComponent } from './fieldconfigdialog/configdialog.component';\r\nimport { NotifyModule, NotifyService } from '@farris/ui-notify';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { LayoutModule } from '@farris/ui-layout';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { MultiSelectModule } from '@farris/ui-multi-select';\r\nimport { FieldGroupModule } from '@farris/ui-field-group';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown'\r\nimport { LoadingModule } from '@farris/ui-loading';\r\n// import { InputModeModule } from '@farris/ui-input-group'\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\nimport { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { CheckBoxComponent } from './controlcomponent/checkbox/checkbox.component';\r\nimport { RadioComponent } from './controlcomponent/radio/radio.component';\r\nimport { DatePickerComponent } from './controlcomponent/datepicker/datepicker.component';\r\nimport { ComboLookUpComponent } from './controlcomponent/combolookup/combolookup.component';\r\nimport { ComboLookupModule } from '@farris/ui-combo-lookup';\r\nimport { ClearFieldsDirective } from './directives/clear-fields.directive';\r\nimport { LabelTextMultiDirective } from './directives/label-text-multi.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule, ReactiveFormsModule,\r\n    FarrisDialogModule,\r\n    LayoutModule,\r\n    LookupModule,\r\n    // FarrisInputModule,\r\n    MultiSelectModule,\r\n    FieldGroupModule,\r\n    InputGroupModule,\r\n    FDropdownDirectiveTypeModule,\r\n    LoadingModule.forRoot(),\r\n    NotifyModule.forRoot(),\r\n    FarrisDatePickerModule,\r\n    LocaleModule,\r\n    ComboListModule,\r\n    NumberSpinnerModule,\r\n    FarrisFormsModule,\r\n    ComboLookupModule\r\n  ],\r\n  declarations: [\r\n    QueryConditionComponent,\r\n    ConfigDialogComponent,\r\n    DatePickerComponent,\r\n    NumberRangeComponent,\r\n    SolutionSmartHelpComponent,\r\n    InputComponent,\r\n    DropDownListComponent,\r\n    SingleNumberComponent,\r\n    CheckBoxComponent,\r\n    ComboLookUpComponent,\r\n    RadioComponent,\r\n    InputGroupComponent,\r\n    ClearFieldsDirective,\r\n    LabelTextMultiDirective\r\n  ],\r\n  entryComponents: [\r\n    ConfigDialogComponent,\r\n  ],\r\n  providers: [\r\n    SolutionService,\r\n    NotifyService,\r\n    ConvertorService\r\n  ],\r\n  bootstrap: [QueryConditionComponent],\r\n  exports: [\r\n    QueryConditionComponent,\r\n    ConfigDialogComponent,\r\n    DatePickerComponent,\r\n    NumberRangeComponent,\r\n    SolutionSmartHelpComponent,\r\n    InputComponent,\r\n    DropDownListComponent,\r\n    SingleNumberComponent,\r\n    CheckBoxComponent,\r\n    ComboLookUpComponent,\r\n    RadioComponent,\r\n    InputGroupComponent\r\n  ]\r\n})\r\nexport class QueryConditionModule { }\r\n","import { QueryCondition, QueryConditionConvert } from \"./querycondition\";\r\n\r\n/**\r\n * æ¥è¯¢æ¹æ¡å®ä½ç±» \r\n */\r\nexport class QuerySolutionVo {\r\n    /**\r\n     * å¯ä¸æ§æ è¯\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * æå±IDï¼ä¾å¦æå±è¡¨åID\r\n     */\r\n    belongId: string;\r\n\r\n    /**\r\n     * æ¥è¯¢æ¹æ¡ç¼å·\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * æ¥è¯¢æ¹æ¡åç§°\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * æ¥è¯¢æ¡ä»¶\r\n     */\r\n    queryConditions: Array<QueryCondition>;\r\n\r\n    /**\r\n     * æ¯å¦ç³»ç»é¢ç½®æ¥è¯¢æ¹æ¡\r\n     */\r\n    isSystem: boolean;\r\n\r\n    /**\r\n     * æ¯å¦é»è®¤æ¥è¯¢æ¹æ¡\r\n     * åå§æ¶ï¼ä¸ºfalse\r\n     */\r\n    isDefault: boolean = false;\r\n\r\n    isChanged: boolean = false;\r\n    /**\r\n     * ç±»åï¼ preæ¯ä¸æ¬¡æ¥è¯¢\r\n     */\r\n    type: string;\r\n}\r\n\r\n/**\r\n * æ¥è¯¢æ¹æ¡å®ä½ç±»åºååä¸ååºååå¨\r\n */\r\nexport class QuerySolutionVoConvertor {\r\n\r\n    /**\r\n     * åºåå\r\n     * @param obj æ¥è¯¢æ¹æ¡å®ä½\r\n     */\r\n    convertJObject(obj: QuerySolutionVo): Object {\r\n        let querySolutionVo = obj as QuerySolutionVo;\r\n        let jobj = new Object();\r\n        jobj[\"id\"] = querySolutionVo.id;\r\n        jobj[\"belongId\"] = querySolutionVo.belongId;\r\n        jobj[\"code\"] = querySolutionVo.code;\r\n        jobj[\"name\"] = querySolutionVo.name;\r\n        jobj[\"isSystem\"] = querySolutionVo.isSystem;\r\n        jobj[\"isDefault\"] = querySolutionVo.isDefault;\r\n        jobj[\"type\"] = querySolutionVo.type;\r\n        if (querySolutionVo.queryConditions && querySolutionVo.queryConditions.length > 0) {\r\n            let jArray = [];\r\n            let convertor = new QueryConditionConvert();\r\n            querySolutionVo.queryConditions.forEach(element => {\r\n                jArray.push(convertor.convertJObject(element));\r\n            });\r\n            //åæå¡ç«¯åéæ°æ®æ¶ï¼åéquery condition listçjson string\r\n            jobj[\"queryConditionString\"] = JSON.stringify(jArray);\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n    /**\r\n     * ååºåå(åå§å)\r\n     * @param jobj æ¥è¯¢æ¹æ¡åºåååçObject\r\n     */\r\n    initFromJobject(jobj: Object): QuerySolutionVo {\r\n        let querySolutionVo = new QuerySolutionVo();\r\n        querySolutionVo.id = jobj[\"id\"];\r\n        querySolutionVo.code = jobj[\"code\"];\r\n        querySolutionVo.name = jobj[\"name\"];\r\n        querySolutionVo.belongId = jobj[\"belongId\"];\r\n        querySolutionVo.isSystem = jobj[\"isSystem\"];\r\n        querySolutionVo.isDefault = jobj[\"isDefault\"];\r\n        querySolutionVo.type=jobj.hasOwnProperty('type') ?jobj[\"type\"]:'';\r\n        querySolutionVo.queryConditions = new Array<QueryCondition>();\r\n        //æå¡å¨ç«¯è¿åçquery condition listå®éæ¯ json string\r\n        const queryConditionString = jobj[\"queryConditionString\"];\r\n        if (queryConditionString) {\r\n            const conditionJarry = JSON.parse(queryConditionString);\r\n            let convertor = new QueryConditionConvert();\r\n            conditionJarry.forEach(element => {\r\n                querySolutionVo.queryConditions.push(convertor.initFromJobject(element));\r\n            });\r\n        }\r\n        return querySolutionVo;\r\n    }\r\n    /**\r\n     * ä»ç¼å­ä¸­ååçJSONæ°æ®éè¦è½¬å\r\n     * ä»å¤§åè½¬æ¢å°å°åæ¡ä»¶\r\n     */\r\n    formatFromJobject(jobj: Array<any> | string): Array<QueryCondition> {\r\n        let queryConditions = new Array<QueryCondition>();\r\n        let conditionJarry;\r\n        if (typeof jobj == 'string') {\r\n            conditionJarry = JSON.parse(jobj);\r\n        } else {\r\n            conditionJarry = jobj;\r\n        }\r\n        let convertor = new QueryConditionConvert();\r\n        conditionJarry.forEach(element => {\r\n            queryConditions.push(convertor.initFromJobject(element));\r\n        });\r\n        return queryConditions;\r\n    }\r\n    /**\r\n     * å­å¥ç¼å­ä¸­\r\n     * ä»å¤§åè½¬æ¢å°å°åæ¡ä»¶\r\n     */\r\n    formatConvertJObject(jobj: Array<QueryCondition>):Array<any>{\r\n        let queryConditions =[];\r\n        let convertor = new QueryConditionConvert();\r\n        jobj.forEach(element => {\r\n            queryConditions.push(convertor.convertJObject(element));\r\n        });\r\n        return queryConditions;\r\n    }\r\n}","/**\r\n * æ­¤ç±»æ²¡æè¢«ä½¿ç¨\r\n * æ¯è¾ç¬¦ \r\n */\r\nexport enum CompareType{\r\n\r\n    /**\r\n     * ç­äº\r\n     */\r\n    // Equal=1,\r\n    Equal = 0,\r\n\r\n    /**\r\n     * å¤§äº\r\n     */\r\n    GreaterThan = 2,\r\n\r\n    /**\r\n     * å¤§äºæç­äº\r\n     */\r\n    GreaterThanOrEqual = 3,\r\n\r\n    /**\r\n     * å°äº\r\n     */\r\n    LessThan = 4,\r\n\r\n    /**\r\n     * å°äºæç­äº\r\n     */\r\n    LessThanOrEqual = 5, \r\n\r\n    /**\r\n     * ä¹é´\r\n     */\r\n    // BetWeen=6\r\n    Like = 6\r\n}","import { QueryCondition } from '../querycondition';\r\n\r\n/**\r\n * å­æ®µéç½®\r\n */\r\nexport class FieldConfig {\r\n\r\n  /**\r\n   * å­æ®µID\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * å­æ®µæ ç­¾ï¼å­æ®µç¼å·çå¯ä¸æ è¯\r\n   */\r\n  labelCode: string;\r\n\r\n  /**\r\n   * å­æ®µåç§°\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * æ¯å¦è¢«éä¸­\r\n   */\r\n  isChecked?: boolean;\r\n\r\n  /**\r\n   * æ¯å¦è¢«ç¦ç¨\r\n   */\r\n  isDisabled?: boolean;\r\n\r\n  /**\r\n   * å­æ®µä¸ºç©ºæ¶æç¤ºä¿¡æ¯\r\n   */\r\n  placeHolder?: string;\r\n  beginPlaceHolder?:string;\r\n  endPlaceHolder?:string;\r\n\r\n  control?: any;\r\n\r\n  value?: any;\r\n\r\n  constructor(qc: QueryCondition) {\r\n    this.id = qc.id;\r\n    this.labelCode = qc.fieldCode;\r\n    this.name = qc.fieldName;\r\n  }\r\n\r\n\r\n}\r\n"]}