/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { UploadServerService, UploadStatus } from '@farris/extend-file-upload';
import { Observable, forkJoin } from 'rxjs';
import { UploadService, GspFormUploadListEntity, GspFormRemoveListEntity, GspFormDocInfo, GspFormUploadEntity, OperatingModes } from '@gsp-svc/formdoc-upload';
import { FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-svc/formdoc-upload";
import * as i2 from "./ffileupload-adapt-unifile.config";
var FfileuploadAdaptUnifileService = /** @class */ (function (_super) {
    tslib_1.__extends(FfileuploadAdaptUnifileService, _super);
    function FfileuploadAdaptUnifileService(uploadSer, configSer) {
        var _this = _super.call(this) || this;
        _this.uploadSer = uploadSer;
        _this.configSer = configSer;
        // 暂时用于简单合并
        _this.bufferSize = 1024 * 1024; // 1024 * 1024
        _this.uploadedChunk = {};
        _this.fileTotalChunk = {};
        _this.extendData = _this.configSer.getConfig();
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uuid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var S4 = (/**
         * @return {?}
         */
        function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        /** @type {?} */
        var nGuid = S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4();
        return nGuid;
    };
    /**
     * 删除文件
     * @param file
     * @param event
     */
    /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.remove = /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        return this.innerRemoveList(files, event, extendService);
    };
    /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.innerRemoveList = /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        if (extendService === void 0) { extendService = null; }
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var removeFileInfo = new GspFormRemoveListEntity;
            /** @type {?} */
            var metadataIdList = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
                if (fileItem['response']) {
                    metadataIdList.push(fileItem['response']['metadataId']);
                }
            }));
            removeFileInfo.mode = _this.getFinallyConfig('mode', extendService);
            /** @type {?} */
            var rootId = _this.getFinallyConfig('rootId', extendService);
            removeFileInfo.metadataIdList = [].concat(metadataIdList);
            _this.uploadSer.removeList(metadataIdList, rootId).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                // 没有需要整合的服务器端返回数据
                observer.next({ type: 'removed', files: files });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                observer.error(error);
                observer.complete();
            }), (/**
             * @return {?}
             */
            function () {
                observer.complete();
            }));
        }));
    };
    /**
     * 上传文件
     * @param file
     * @param event
     */
    /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.upload = /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        return this.innerUploadList(files, event, extendService);
    };
    /**
     * 内部上传方式
     * @param files
     * @param event
     * @param extendService
     */
    /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.innerUploadList = /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var uploadInfo = new GspFormUploadListEntity;
            uploadInfo.formId = _this.getFinallyConfig('formId', extendService);
            uploadInfo.mode = _this.getFinallyConfig('mode', extendService);
            /** @type {?} */
            var rootId = _this.getFinallyConfig('rootId', extendService);
            uploadInfo.docInfoList = [];
            /** @type {?} */
            var readerObserable = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
                /** @type {?} */
                var sub = new Observable((/**
                 * @param {?} obser
                 * @return {?}
                 */
                function (obser) {
                    /** @type {?} */
                    var reader = new FileReader();
                    // 暂不处理异常
                    reader.readAsBinaryString(fileItem.nativeFile);
                    reader.onload = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var info = (/** @type {?} */ ({ 'fileName': '', 'fileContent': '' }));
                        info['fileName'] = fileItem.name;
                        info['fileContent'] = btoa(reader.result.toString());
                        // 如果data里有数据，并且属性是配置的扩展属性
                        if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                            // 
                            info['extProperty'] = event['data']['extProperty'];
                        }
                        uploadInfo.docInfoList.push(info);
                        obser.next();
                        obser.complete();
                    });
                }));
                readerObserable.push(sub);
            }));
            forkJoin(readerObserable).subscribe((/**
             * @param {?} datas
             * @return {?}
             */
            function (datas) {
                //     metadataId: string;
                //  fileName: string;
                _this.uploadSer.uploadList(uploadInfo, rootId).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result.error) {
                        // 此接口一旦出现问题，所有附件都上传不通过
                        observer.error(_this.errorInfoFormat(result.error, files));
                        observer.complete();
                        return;
                    }
                    // 合并返回结果到此处
                    result.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        /** @type {?} */
                        var findIndex = _this.findFileIndexByFileName(files, item.fileName);
                        if (findIndex > -1) {
                            files[findIndex]['response'] = item;
                            files[findIndex]['progress']['status'] = UploadStatus.Done;
                        }
                    }));
                    observer.next({ type: 'done', files: files });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    observer.error(_this.errorInfoFormat(error, files));
                    observer.complete();
                }), (/**
                 * @return {?}
                 */
                function () {
                    observer.complete();
                }));
            }));
        }));
    };
    ;
    /**
     * 分片加载
     * @param file
     * @param event
     * @param extendService
     */
    /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.multipartUpload = /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            // let fileInfo: FileInfo;
            /** @type {?} */
            var uuid = _this.uuid();
            // let uuid = UUID.UUID();
            //reader.readAsBinaryString(selectedFile);
            //reader.onload = (e) => {
            /** @type {?} */
            var fileName = file.name;
            // fileInfo = {
            //   id: uuid,
            //   name: fileName,
            //   type: file.type,
            //   source: "",
            //   size: this.formatFileSize(file.size),
            //   fileSize: file.size,
            //   picListDisplayName: this.getMultipartDisplayName(fileName),
            //   queueListDisplayName: fileName,
            //   //content: reader.result.toString(),
            //   hasUploaded: false,
            //   mouseOn: false,
            //   selectd: false,
            //   isUploading: true,
            //   uploadResult: false,
            //   uploadProcess: 0,
            //   errorMessage: "",
            //   extensionDropListId: 0,
            //   extensionName: ""
            // }
            /** @type {?} */
            var chunkTotal = Math.ceil(file.size / _this.bufferSize);
            // 标记当前附件总的分片数
            _this.fileTotalChunk[uuid] = chunkTotal;
            /** @type {?} */
            var chunkIndex = 0;
            // 标记当前附件成功的分片数
            _this.uploadedChunk[uuid] = 0;
            var _loop_1 = function () {
                /** @type {?} */
                var uploadInfo = new GspFormUploadEntity;
                uploadInfo.mode = OperatingModes.Temp;
                uploadInfo.formId = _this.getFinallyConfig('formId', extendService);
                uploadInfo.rootId = _this.getFinallyConfig('rootId', extendService);
                /** @type {?} */
                var docInfo = new GspFormDocInfo;
                docInfo.fileName = fileName;
                docInfo.metadataId = uuid;
                docInfo.total = chunkTotal;
                // 如果data里有数据，并且属性是配置的扩展属性
                if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                    docInfo['extProperty'] = (/** @type {?} */ (event['data']['extProperty']));
                }
                // 下一个文件大小
                /** @type {?} */
                var nextSize = Math.min((chunkIndex + 1) * _this.bufferSize, file.size);
                // File类型
                /** @type {?} */
                var fileData = file['nativeFile'].slice(chunkIndex * _this.bufferSize, nextSize);
                // 读取文件
                /** @type {?} */
                var reader = new FileReader();
                reader.readAsBinaryString(fileData);
                /** @type {?} */
                var innerIndex = chunkIndex;
                reader.onload = (/**
                 * @return {?}
                 */
                function () {
                    // 附件上传
                    docInfo.fileContent = btoa(reader.result.toString());
                    docInfo.index = innerIndex;
                    uploadInfo.docInfo = docInfo;
                    /** @type {?} */
                    var info = uploadInfo;
                    _this.uploadSer.uploadFile(info).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        if (result && result.error) {
                            // 分片上传有返回结果就是报错了
                            observer.error(_this.errorInfoFormat(result.error, [file]));
                            observer.complete();
                            return;
                        }
                        else {
                            _this.uploadedChunk[uuid]++;
                            if (_this.uploadedChunk[docInfo.metadataId] == _this.fileTotalChunk[docInfo.metadataId]) {
                                // 判断是所有分片都上传完成
                                file.progress = {
                                    status: UploadStatus.Done,
                                    data: {
                                        percentage: 100
                                    }
                                };
                                file.response = docInfo;
                                delete _this.uploadedChunk[uuid];
                                delete _this.fileTotalChunk[uuid];
                                observer.next({ type: 'done', files: [file] });
                                observer.complete();
                            }
                            else {
                                // 分片上传正常
                                /** @type {?} */
                                var percentage = Number.parseInt((_this.uploadedChunk[uuid] / _this.fileTotalChunk[uuid] * 100).toFixed(0));
                                // 判断未上传完成
                                file.progress = {
                                    status: UploadStatus.Uploading,
                                    data: {
                                        percentage: percentage
                                    }
                                };
                                observer.next({ type: 'uploading', files: [file] });
                            }
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        delete _this.uploadedChunk[uuid];
                        delete _this.fileTotalChunk[uuid];
                        observer.error(_this.errorInfoFormat(error, [file]));
                        observer.complete();
                    }));
                });
                chunkIndex = chunkIndex + 1;
            };
            while (chunkIndex < chunkTotal) {
                _loop_1();
            }
        }));
    };
    /**
     * 获取分片的附件大小
     * @param size
     */
    /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.formatFileSize = /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    function (size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    };
    /**
     * 获取分片的 附件名称
     * @param fileName
     */
    /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getMultipartDisplayName = /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            var headContent = fileName.substring(0, 2);
            /** @type {?} */
            var tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
            return headContent + "…" + tailContent;
        }
    };
    /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.errorInfoFormat = /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    function (error, files) {
        // 
        /** @type {?} */
        var errorFiles = files.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return { id: item.id, name: item.name };
        }));
        if (error) {
            return Object.assign(error, { files: errorFiles }, { message: error['Message'] || error['extensionMessage'] || '上传失败', type: 'error' });
        }
        else {
            return Object.assign({ files: errorFiles }, { message: '上传失败', type: 'error' });
        }
    };
    /**
     * 返回最终属性值
     * @param key
     * @param configValue
     * @param extendValue
     */
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getFinallyConfig = /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    function (key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        return this.extendData[key];
    };
    /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.findFileIndexByFileName = /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    function (files, fileName) {
        // 按照肯定能找到文件来处理
        /** @type {?} */
        var findIndex = files.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.name == fileName; }));
        return findIndex;
    };
    // 1024 * 1024
    FfileuploadAdaptUnifileService.previous = 0;
    FfileuploadAdaptUnifileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FfileuploadAdaptUnifileService.ctorParameters = function () { return [
        { type: UploadService },
        { type: FFileUploadAdaptUnifileConfigService }
    ]; };
    /** @nocollapse */ FfileuploadAdaptUnifileService.ngInjectableDef = i0.defineInjectable({ factory: function FfileuploadAdaptUnifileService_Factory() { return new FfileuploadAdaptUnifileService(i0.inject(i1.UploadService), i0.inject(i2.FFileUploadAdaptUnifileConfigService)); }, token: FfileuploadAdaptUnifileService, providedIn: "root" });
    return FfileuploadAdaptUnifileService;
}(UploadServerService));
export { FfileuploadAdaptUnifileService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.previous;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.extendData;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.bufferSize;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadedChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.fileTotalChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadSer;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.configSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,