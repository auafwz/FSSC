/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
/**
 * 检查帮助输入框值变化后返回的查询结果
 * @param {?=} data
 * @return {?}
 */
function checkSearchResult(data) {
    if (data === void 0) { data = null; }
    if (this.searchOnServer) {
        // this._searchResult = data;
        // this.showDialog();
        this.isShow = true;
    }
    else {
        this.setModelValue(this.displayText);
        this.runDictPickedEvent(null);
    }
}
/**
 * @return {?}
 */
export function onTextChanged() {
    var _this = this;
    /** @type {?} */
    var self = this;
    /** @type {?} */
    var isPending = (/**
     * @return {?}
     */
    function () {
        return _this.lookupUtils.rts.getFormState('lookup.pending');
    });
    /** @type {?} */
    var searchData = (/**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (_this.isTextChange && _this.displayText && (!_this.nosearch || e.originalEvent) && !isPending()) {
            _this.lookupUtils.pendingStart();
            _this.dictPickingSubscription = _this.dictPicking({
                instance: _this
            }).pipe(switchMap((/**
             * @param {?} pr
             * @return {?}
             */
            function (pr) {
                /** @type {?} */
                var o = true;
                if (pr === undefined || pr === null) {
                    o = true;
                }
                if (typeof pr === 'boolean') {
                    o = pr;
                }
                if (typeof pr === 'object') {
                    if (pr.showDialog === undefined) {
                        o = true;
                    }
                    else {
                        o = pr.showDialog;
                    }
                    if (pr.data) {
                        /** 保存帮助前传递的数据 */
                        _this.customData = pr.data;
                    }
                }
                if (o) {
                    return _this.httpMgr.getData({
                        search: {
                            field: '*',
                            value: _this.displayText
                        }
                    }, 'search');
                }
                else {
                    return of({ SHOWDIALOG: o, MESSAGE: pr.message || '' });
                }
            }))).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.closeLoading();
                _this.lookupUtils.pendingEnd();
                if (data.hasOwnProperty('SHOWDIALOG')) {
                    if (data.SHOWDIALOG && data.MESSAGE) {
                        _this.notifyService.warning(data.MESSAGE);
                    }
                    return;
                }
                if (data.items && data.items.length === 1) {
                    /** @type {?} */
                    var rowdata = data.items[0];
                    if (_this.isTree()) {
                        /** @type {?} */
                        var leafNode = _this.treeNodeHelper.getLeafNode(rowdata);
                        if (Array.isArray(leafNode)) {
                            checkSearchResult.bind(self, data)();
                            return;
                        }
                        else {
                            rowdata = leafNode.data;
                        }
                    }
                    if (!_this.singleSelect) {
                        rowdata = [rowdata];
                    }
                    _this.selectItem(rowdata);
                }
                else {
                    checkSearchResult.bind(self, data)();
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.closeLoading();
                _this.lookupUtils.pendingEnd();
                _this.messagerService.error(err ? err.Message : err);
            }));
        }
    });
    /** @type {?} */
    var inputBlurHandler = null;
    if (this.inputGroup && this.inputGroup.textbox && !this.nosearch) {
        this.lookupUtils.setActiveLookupInstance(this);
        inputBlurHandler = this.render2.listen(this.inputGroup.textbox.nativeElement, 'blur', searchData);
    }
    if (this.inputGroup) {
        this.inputGroup.enterHandle.subscribe(searchData);
        this.inputGroup.keydownHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var canOpen = false;
            if (e.code === 'ArrowRight') {
                if (_this.editable) {
                    canOpen = !e.target.value || e.target.selectionStart === e.target.value.length;
                }
                else {
                    canOpen = true;
                }
            }
            else {
                canOpen = e.code === _this.shortcutKey.open;
            }
            if (canOpen) {
                e.stopPropagation();
                e.preventDefault();
                _this.showDialog();
            }
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,