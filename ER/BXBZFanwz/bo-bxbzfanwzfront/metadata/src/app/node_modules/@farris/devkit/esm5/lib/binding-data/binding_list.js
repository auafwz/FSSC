/**
 * 绑定列表相关定义
 * @author Witt<jiwt@inspur.com>
 */
import * as tslib_1 from "tslib";
// tslint:disable: max-line-length
import { List } from 'immutable';
import { Subject } from 'rxjs';
import { ChangeType } from './changes';
import { BindingObjectFactory } from './binding_object_factory';
import { PropertyUtil } from './property_util';
import { BindingData } from './binding_data';
import { TranslateService } from '../i18n/translate_service';
/**
 * BindingList是一个BindingObject集合
 */
var BindingList = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BindingList(properties) {
        this.__type__ = 'BindingList';
        //#region 分页相关
        /**
         * 分页信息
         */
        this._paginationInfo = null;
        this.properties = properties;
        this.primaryKey = PropertyUtil.getPrimaryKey(properties);
        this.changes = new Subject();
        this.innerList = List();
        this.currentId = null;
    }
    Object.defineProperty(BindingList.prototype, "paginationInfo", {
        get: function () {
            return this._paginationInfo;
        },
        set: function (sPaginationInfo) {
            this._paginationInfo = sPaginationInfo;
            if (this._paginationInfo === sPaginationInfo) {
                return;
            }
            this.changes.next({
                type: ChangeType.PaginationInfoChange,
                path: [],
                value: this._paginationInfo
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BindingList.prototype, "pageIndex", {
        /**
         * 获取页码
         */
        get: function () {
            if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageIndex")) {
                return this.paginationInfo.pageIndex;
            }
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BindingList.prototype, "pageSize", {
        /**
         * 获取分页大小
         */
        get: function () {
            if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageSize")) {
                return this.paginationInfo.pageSize;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BindingList.prototype, "total", {
        /**
         * 获取数据总项数
         */
        get: function () {
            if (!!this.paginationInfo) {
                return this.paginationInfo.total || this.paginationInfo.totalCount;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BindingList.prototype, "skip", {
        /**
         * 获取跳过的数据条数
         */
        get: function () {
            var pageIndex = this.pageIndex;
            var pageSize = this.pageSize;
            return (pageIndex - 1) * pageSize;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 前台设置分页信息
     * @param skip skip
     * @param take take
     */
    BindingList.prototype.setPaginationInfo = function (skip, take) {
        this.paginationInfo = Object.assign({}, this.paginationInfo, {
            pageSize: take,
            pageIndex: skip / take + 1
        });
        /*this.changes.next({
          type: ChangeType.PaginationInfoChange,
          path: [],
          value: this.paginationInfo
        });*/
    };
    Object.defineProperty(BindingList.prototype, "currentItem", {
        //#endregion
        /**
         * 当前行对应的绑定对象
         * 如果currentId为null，则创建一个空结构，防止绑定报错；
         */
        get: function () {
            var currentItem = this.findById(this.currentId);
            if (!currentItem) {
                if (!this.emptyCurrentItem) {
                    this.emptyCurrentItem = BindingObjectFactory.create(this.properties);
                }
                return this.emptyCurrentItem;
            }
            return currentItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BindingList.prototype, "length", {
        /**
         * 绑定对象的数量
         */
        get: function () {
            return this.innerList.count();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 添加[Symbol.iterator]，使之能通过for of遍历
     */
    BindingList.prototype[Symbol.iterator] = function () {
        var self = this;
        var index = -1;
        var size = this.innerList.size;
        return {
            next: function () {
                index++;
                if (index < size) {
                    return { done: false, value: self.innerList.get(index) };
                }
                return { done: true, value: undefined };
            }
        };
    };
    /**
     * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。
     * @param objects 要加载绑定对象数组
     */
    BindingList.prototype.load = function (objects, entityCreate) {
        var _this = this;
        if (entityCreate === void 0) { entityCreate = false; }
        // 重置列表
        this.innerList = this.innerList.clear();
        if (objects.length !== 0) {
            // 加载数据
            objects.forEach(function (object) {
                _this.add(object);
            });
            // 设置默认当前行
            var currentItem = this.findById(this.currentId);
            if (!currentItem) {
                var firstId = objects[0][this.primaryKey];
                this.setCurrentId(firstId, false, false);
            }
        }
        else {
            this.currentId = null;
        }
        var change = {
            type: ChangeType.Load,
            path: [],
            value: objects
        };
        change.create = entityCreate;
        // 触发事件
        this.changes.next(change);
    };
    /**
     * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。
     * @param objects 要加载绑定对象数组
     */
    BindingList.prototype.append = function (objects, isCloned) {
        var _this = this;
        if (isCloned === void 0) { isCloned = false; }
        if (objects.length === 0) {
            return;
        }
        // 加载BindingObject
        objects.forEach(function (object) {
            _this.add(object);
        });
        // 当前行为新追加的最后1行
        var lastId = objects[objects.length - 1][this.primaryKey];
        this.setCurrentId(lastId, true, true);
        // 触发事件
        var change = {
            type: ChangeType.Append,
            path: [],
            value: objects
        };
        if (isCloned) {
            change.isCloned = true;
        }
        this.changes.next(change);
    };
    /**
     * 增加数据
     * @param objects 实体
     * @description 增加实体数据，但不切换当前行
     */
    BindingList.prototype.addData = function (objects) {
        var _this = this;
        if (objects.length === 0) {
            return;
        }
        // 加载BindingObject
        objects.forEach(function (object) {
            _this.add(object);
        });
        // 触发事件
        this.changes.next({
            type: ChangeType.Append,
            path: [],
            value: objects
        });
    };
    BindingList.prototype.insert = function (object, position) {
        var _this = this;
        var currentIndex = this.innerList.findIndex(function (obj) { return obj.primaryKeyValue === _this.currentId; });
        // 加载BindingObject
        if (position === 1) {
            this.innerList = this.innerList.insert(currentIndex + 1, object);
        }
        else if (position === -1) {
            this.innerList = this.innerList.insert(currentIndex, object);
        }
        else {
            this.innerList = this.innerList.push(object);
        }
        object.parent = this;
        // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
        object.changes.subscribe(function (change) {
            _this.changes.next(change);
        });
        this.setCurrentId(object.primaryKeyValue, true, true);
        // 触发事件
        this.changes.next({
            type: ChangeType.Append,
            path: [],
            value: object
        });
    };
    /**
     * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。
     * @param object 绑定对象
     */
    BindingList.prototype.add = function (object) {
        var _this = this;
        this.innerList = this.innerList.push(object);
        object.parent = this;
        // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
        object.changes.subscribe(function (change) {
            _this.changes.next(change);
        });
    };
    /**
     * 删除主键值数组对应的绑定对象。
     * @param ids 主键值数组
     */
    BindingList.prototype.removeByIds = function (ids) {
        var _this = this;
        if (!ids || ids.length === 0) {
            return;
        }
        var nextCurrentId = this.currentId;
        ids.forEach(function (id) {
            // 如果当前行被删除，计算下一当前行
            if (id === nextCurrentId) {
                nextCurrentId = _this.getCurrentIdBeforeDeleting();
            }
            // 删除对象，找不到时跳过
            var index = _this.getIndexById(id);
            if (index === -1) {
                return;
            }
            _this.innerList = _this.innerList.delete(index);
        });
        // 重新设置当前行
        if (this.innerList.count() === 0) {
            this.currentId = null;
        }
        else {
            this.setCurrentId(nextCurrentId, false, false);
        }
        // 出发行删除事件
        this.changes.next({
            type: ChangeType.Remove,
            path: [],
            value: ids
        });
    };
    /**
     * 删除数据（不切换当前行）
     * @param ids ids
     */
    BindingList.prototype.removeDataByIds = function (ids) {
        var _this = this;
        if (!ids || ids.length === 0) {
            return;
        }
        ids.forEach(function (id) {
            // 删除对象，找不到时跳过
            var index = _this.getIndexById(id);
            if (index === -1) {
                return;
            }
            _this.innerList = _this.innerList.delete(index);
        });
        // 出发行删除事件
        this.changes.next({
            type: ChangeType.Remove,
            path: [],
            value: ids
        });
    };
    /**
     * 清空
     */
    BindingList.prototype.clear = function (clearOnly) {
        if (clearOnly === void 0) { clearOnly = false; }
        this.innerList.forEach(function (item) {
            item.unsubscribe.next();
            item.unsubscribe.complete();
            item.changes.complete();
            item.viewChanges.complete();
            // item.properties =undefined;
        });
        this.innerList = this.innerList.clear();
        this.currentId = null;
        if (!clearOnly) {
            this.changes.next({
                type: ChangeType.Remove,
                path: [],
                value: []
            });
        }
    };
    /**
     * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。
     * - 如果被删除的行是最后1行，则上移1行；
     * - 其他情况，下移1行。
     */
    BindingList.prototype.getCurrentIdBeforeDeleting = function () {
        var nextIndex = -1;
        var currentIndex = this.getIndexById(this.currentId);
        if (currentIndex === this.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return this.getIdByIndex(nextIndex);
    };
    /**
     * 根据主键值获取对应绑定对象
     * @param   id 要查找的主键值
     * @returns 找到时返回对应BindingObject， 找不到时返回null
     */
    BindingList.prototype.findById = function (id) {
        var _this = this;
        var target;
        target = this.innerList.find(function (item) {
            return item.getValue(_this.primaryKey) === id;
        });
        return target === undefined ? null : target;
    };
    /**
     * 将主键值为id的绑定对象设置为当前行
     * @param  id        要设置的主键值
     * @param  emitEvent 是否发送当前行变更事件
     * @param  force 强制切换
     */
    BindingList.prototype.setCurrentId = function (id, emitEvent, emitGlobalEvent, force) {
        if (emitEvent === void 0) { emitEvent = true; }
        if (emitGlobalEvent === void 0) { emitGlobalEvent = true; }
        if (force === void 0) { force = false; }
        if (this.currentId === id && !force) {
            return;
        }
        // 不存在时设置为null
        // const currentObj = this.findById(id);
        // if (!currentObj) {
        //   this.currentId = null;
        // } else {
        //   this.currentId = id;
        // }
        // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。
        var currentObj = this.findById(id);
        if (!currentObj && !force) {
            return;
        }
        this.currentId = id;
        // 发出行切换事件
        if (emitEvent === true) {
            this.changes.next({
                type: ChangeType.SelectionChanged,
                path: [],
                value: this.currentItem,
                force: force
            });
        }
        // 是否发送全局的行切换事件
        if (emitGlobalEvent === true) {
            this.changes.next({
                type: ChangeType.GlobalSelectionChanged,
                path: [],
                value: this.currentItem,
                force: force
            });
        }
    };
    /**
     * 根据主键值为id的绑定对象的索引
     * @param id 主键值
     * @returns 找到时返回对应的index，找不到时返回-1
     */
    BindingList.prototype.getIndexById = function (id) {
        var _this = this;
        return this.innerList.findIndex(function (obj) {
            return obj[_this.primaryKey] === id;
        });
    };
    /**
     * 根据索引位置获取对应绑定对象的主键值
     * @reutrn 找到时返回对应主键值，找不到返回null
     */
    BindingList.prototype.getIdByIndex = function (index) {
        if (index < 0 || index > this.length) {
            return null;
        }
        if (this.innerList.has(index) === false) {
            return null;
        }
        var obj = this.innerList.get(index);
        return obj[this.primaryKey];
    };
    /**
     * 转换为BindingObject数组
     */
    BindingList.prototype.toArray = function () {
        return this.innerList.toArray();
    };
    /**
     * 交互数据位置
     * @param id1 id1
     * @param id2 id2
     */
    BindingList.prototype.swapById = function (id1, id2) {
        var item1 = this.innerList.find(function (element) { return element.primaryKeyValue === id1; });
        var item2 = this.innerList.find(function (element) { return element.primaryKeyValue === id2; });
        this.innerList = this.innerList.map(function (bindingObject, index) {
            if (bindingObject.primaryKeyValue === id1) {
                return item2;
            }
            else if (bindingObject.primaryKeyValue === id2) {
                return item1;
            }
            else
                return bindingObject;
        }).toList();
        this.changes.next({
            type: ChangeType.Swap,
            path: []
        });
    };
    /**
     * 转换为JSON对象
     * @returns 普通对象数组
     */
    BindingList.prototype.toJSON = function (options) {
        var result = [];
        this.innerList.forEach(function (obj) {
            result.push(obj.toJSON(options));
        });
        return result;
    };
    /**
     * 获取分页信息
     * @param path 路径
     * @param defaultValue 默认值
     */
    BindingList.prototype.getPaginationConfigByPath = function (path, defaultValue) {
        if (!path || path === '/') {
            return this.paginationInfo;
        }
        if (typeof path !== 'string') {
            throw new Error('路径必须为字符串！');
        }
        path = path.substring(1);
        var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; }).map(function (item) { return item.trim(); });
        var config = this.paginationInfo;
        paths.forEach(function (item) {
            if (config && config.hasOwnProperty(item)) {
                config = config[item];
            }
            else {
                config = null;
            }
        });
        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
    };
    /**
     * 对bindingList就行排序
     * @param string 排序字段
     * @param directions 排序规则字段
     * @param options 参数
     */
    BindingList.prototype.sortBy = function (fields, directions, options) {
        var _this = this;
        if (!fields || fields.length < 1 || !directions || directions.length < 1) {
            throw new Error('sortBy:argument error');
        }
        // 默认升序
        var arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
        var arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
        // 排序字段和排序方式应一致
        if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
            throw new Error('sortBy:fields and directions not match');
        }
        // nage,age,total
        var comparator = function (props, orders) { return function (item1, item2) {
            return props.reduce(function (result, prop) {
                if (result === 0) {
                    var bindingProperty = _this.properties.find(function (item) { return item.name === prop; });
                    var isMultiLangProp = false;
                    if (bindingProperty) {
                        isMultiLangProp = bindingProperty.enableMultiLangInput;
                    }
                    var currentLanguage = TranslateService.getCurrentLanguage();
                    var order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                    var item1Value = _this.getValue(item1, prop, isMultiLangProp, currentLanguage);
                    var item2Value = _this.getValue(item2, prop, isMultiLangProp, currentLanguage);
                    if (item1Value === null || item1Value === undefined) {
                        item1Value = '';
                    }
                    if (item2Value === null || item2Value === undefined) {
                        item2Value = '';
                    }
                    if (typeof item1Value === 'string' && typeof item2Value === 'string') {
                        var localeCompareResult = item1Value.localeCompare(item2Value);
                        result = localeCompareResult * order;
                    }
                    else {
                        if (item1Value > item2Value) {
                            result = order * 1;
                        }
                        if (item1Value < item2Value) {
                            result = order * -1;
                        }
                    }
                }
                return result;
            }, 0);
        }; };
        this.innerList = this.innerList.sort(comparator(arrFields, arrDirections)).toList();
    };
    BindingList.prototype.getValue = function (target, propName, isMultiLangProp, currentLanguage) {
        if (isMultiLangProp === void 0) { isMultiLangProp = false; }
        if (currentLanguage === void 0) { currentLanguage = 'zh-CHS'; }
        var e_1, _a;
        if (target instanceof BindingList) {
            target = target.currentItem;
        }
        else if (target instanceof BindingData) {
            target = target.list.currentItem;
        }
        var result = null;
        if (propName.indexOf('.') === -1) {
            result = target[propName];
        }
        else {
            var props = propName.split('.');
            try {
                for (var props_1 = tslib_1.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {
            return result[currentLanguage];
        }
        else {
            return result;
        }
    };
    return BindingList;
}());
export { BindingList };
//# sourceMappingURL=data:application/json;base64,