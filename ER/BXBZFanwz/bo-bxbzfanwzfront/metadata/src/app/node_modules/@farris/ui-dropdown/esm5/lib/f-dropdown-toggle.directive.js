/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, HostListener, ElementRef, Input } from '@angular/core';
import { FDropdownDirective } from './f-dropdown.directive';
var FDropdownToggleDirective = /** @class */ (function () {
    function FDropdownToggleDirective(dropdown, elementRef) {
        var _this = this;
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this._disabled = false;
        this.haspopup = true;
        this.nativeEle = null;
        dropdown.toggleElement = elementRef.nativeElement;
        this.nativeEle = elementRef.nativeElement;
        this.dropdown.getOpenState().subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (_this.dropdown.isSubDP && _this.dropdown.isOpen) {
                if (_this.nativeEle.className.indexOf('active') < 0) {
                    _this.nativeEle.className += ' active';
                }
            }
            else {
                if (_this.nativeEle.className.indexOf('active') > -1) {
                    _this.nativeEle.className = _this.nativeEle.className.replace(' active', ' ');
                }
            }
        }));
    }
    Object.defineProperty(FDropdownToggleDirective.prototype, "dpDisabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FDropdownToggleDirective.prototype, "disableCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ev
     * @return {?}
     */
    FDropdownToggleDirective.prototype.onclick = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this._disabled) {
            return;
        }
        if (this.dropdown.isSubDP) {
            ev.stopImmediatePropagation();
        }
        this.dropdown.toggle();
    };
    FDropdownToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fDropdownToggle]'
                },] }
    ];
    /** @nocollapse */
    FDropdownToggleDirective.ctorParameters = function () { return [
        { type: FDropdownDirective },
        { type: ElementRef }
    ]; };
    FDropdownToggleDirective.propDecorators = {
        dpDisabled: [{ type: Input }],
        disableCls: [{ type: HostBinding, args: ['class.disabled',] }],
        haspopup: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
        onclick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FDropdownToggleDirective;
}());
export { FDropdownToggleDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype._disabled;
    /** @type {?} */
    FDropdownToggleDirective.prototype.haspopup;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.nativeEle;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.dropdown;
    /**
     * @type {?}
     * @private
     */
    FDropdownToggleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1kcm9wZG93bi10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kcm9wZG93bi8iLCJzb3VyY2VzIjpbImxpYi9mLWRyb3Bkb3duLXRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsV0FBVyxFQUNYLFlBQVksRUFDWixVQUFVLEVBRVYsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVEO0lBMEJFLGtDQUFvQixRQUE0QixFQUFVLFVBQXNCO1FBQWhGLGlCQWNDO1FBZG1CLGFBQVEsR0FBUixRQUFRLENBQW9CO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXRCeEUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQVVTLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFXM0MsY0FBUyxHQUFHLElBQUksQ0FBQztRQUV2QixRQUFRLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsR0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsS0FBYztZQUNwRCxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUNqRCxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ2xELEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQztpQkFDdkM7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDbkQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDM0U7YUFDRjtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztJQW5DRCxzQkFDSSxnREFBVTs7Ozs7UUFEZCxVQUNlLEtBQWM7WUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDekIsQ0FBQzs7O09BQUE7SUFDRCxzQkFDSSxnREFBVTs7OztRQURkO1lBRUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBOzs7OztJQUlELDBDQUFPOzs7O0lBRFAsVUFDUSxFQUFjO1FBQ3BCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ3pCLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDOztnQkF4QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzs7O2dCQUpRLGtCQUFrQjtnQkFKekIsVUFBVTs7OzZCQVdULEtBQUs7NkJBSUwsV0FBVyxTQUFDLGdCQUFnQjsyQkFLNUIsV0FBVyxTQUFDLG9CQUFvQjswQkFDaEMsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUEwQm5DLCtCQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0F0Q1ksd0JBQXdCOzs7Ozs7SUFDbkMsNkNBQTBCOztJQVUxQiw0Q0FBbUQ7Ozs7O0lBV25ELDZDQUF5Qjs7Ozs7SUFDYiw0Q0FBb0M7Ozs7O0lBQUUsOENBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSG9zdCxcclxuICBIb3N0QmluZGluZyxcclxuICBIb3N0TGlzdGVuZXIsXHJcbiAgRWxlbWVudFJlZixcclxuICBSZW5kZXJlcjIsXHJcbiAgSW5wdXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRkRyb3Bkb3duRGlyZWN0aXZlIH0gZnJvbSAnLi9mLWRyb3Bkb3duLmRpcmVjdGl2ZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmRHJvcGRvd25Ub2dnbGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRkRyb3Bkb3duVG9nZ2xlRGlyZWN0aXZlIHtcclxuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGRwRGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWU7XHJcbiAgfVxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZGlzYWJsZWQnKVxyXG4gIGdldCBkaXNhYmxlQ2xzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtaGFzcG9wdXAnKSBoYXNwb3B1cCA9IHRydWU7XHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gIG9uY2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLl9kaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5kcm9wZG93bi5pc1N1YkRQKSB7XHJcbiAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5kcm9wZG93bi50b2dnbGUoKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBuYXRpdmVFbGUgPSBudWxsO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZHJvcGRvd246IEZEcm9wZG93bkRpcmVjdGl2ZSwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBkcm9wZG93bi50b2dnbGVFbGVtZW50ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5uYXRpdmVFbGU9ZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy5kcm9wZG93bi5nZXRPcGVuU3RhdGUoKS5zdWJzY3JpYmUoKHN0YXRlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmRyb3Bkb3duLmlzU3ViRFAgJiYgdGhpcy5kcm9wZG93bi5pc09wZW4pIHtcclxuICAgICAgICBpZiAodGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lLmluZGV4T2YoJ2FjdGl2ZScpIDwgMCkge1xyXG4gICAgICAgICAgdGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lICs9ICcgYWN0aXZlJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHRoaXMubmF0aXZlRWxlLmNsYXNzTmFtZS5pbmRleE9mKCdhY3RpdmUnKSA+IC0xKSB7XHJcbiAgICAgICAgICB0aGlzLm5hdGl2ZUVsZS5jbGFzc05hbWU9dGhpcy5uYXRpdmVFbGUuY2xhc3NOYW1lLnJlcGxhY2UoJyBhY3RpdmUnLCAnICcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==