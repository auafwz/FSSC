import { InjectionToken } from '@angular/core';
// export type ClassType = new (...args: any[]) => any;
export const BigNumberType = 'BigNumber';
export var DataChangeType;
(function (DataChangeType) {
    DataChangeType[DataChangeType["Add"] = 0] = "Add";
    DataChangeType[DataChangeType["Delete"] = 1] = "Delete";
})(DataChangeType || (DataChangeType = {}));
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
})(HttpMethod || (HttpMethod = {}));
/**
 * 后端消息
 */
// tslint:disable-next-line: no-namespace
export var BackEndMessage;
(function (BackEndMessage) {
    /**
     * 消息级别
     */
    let Level;
    (function (Level) {
        Level["Error"] = "Error";
        Level["Info"] = "Info";
        Level["Warning"] = "Warning";
    })(Level = BackEndMessage.Level || (BackEndMessage.Level = {}));
    /**
     * 消息
     * @description 接口执行成功，但有info/warning级别的消息
     */
    class Message {
        constructor(bizMessages, context) {
            this.bizMessages = bizMessages;
            this.context = context;
        }
    }
    BackEndMessage.Message = Message;
})(BackEndMessage || (BackEndMessage = {}));
export var RunMode;
(function (RunMode) {
    RunMode["compatible"] = "compatible";
    RunMode["highSpeed"] = "highSpeed";
})(RunMode || (RunMode = {}));
/**
 * 控制器运行模式，compatible | highSpeed
 */
export const DEVKIT_RUN_MODE = new InjectionToken('@farris/devkit_run_mode');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0MsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUM7QUFtQnpDLE1BQU0sQ0FBTixJQUFZLGNBQThCO0FBQTFDLFdBQVksY0FBYztJQUFHLGlEQUFHLENBQUE7SUFBRSx1REFBTSxDQUFBO0FBQUMsQ0FBQyxFQUE5QixjQUFjLEtBQWQsY0FBYyxRQUFnQjtBQVcxQyxNQUFNLENBQU4sSUFBWSxVQUtYO0FBTEQsV0FBWSxVQUFVO0lBQ3BCLHlCQUFXLENBQUE7SUFDWCwyQkFBYSxDQUFBO0lBQ2IseUJBQVcsQ0FBQTtJQUNYLCtCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFMVyxVQUFVLEtBQVYsVUFBVSxRQUtyQjtBQUVEOztHQUVHO0FBQ0gseUNBQXlDO0FBQ3pDLE1BQU0sS0FBVyxjQUFjLENBMkU5QjtBQTNFRCxXQUFpQixjQUFjO0lBQzdCOztPQUVHO0lBQ0gsSUFBWSxLQUlYO0lBSkQsV0FBWSxLQUFLO1FBQ2Ysd0JBQWUsQ0FBQTtRQUNmLHNCQUFhLENBQUE7UUFDYiw0QkFBbUIsQ0FBQTtJQUNyQixDQUFDLEVBSlcsS0FBSyxHQUFMLG9CQUFLLEtBQUwsb0JBQUssUUFJaEI7SUFpREQ7OztPQUdHO0lBQ0gsTUFBYSxPQUFPO1FBR2xCLFlBQVksV0FBMEIsRUFBRSxPQUF3QjtZQUM5RCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN6QixDQUFDO0tBQ0Y7SUFQWSxzQkFBTyxVQU9uQixDQUFBO0FBT0gsQ0FBQyxFQTNFZ0IsY0FBYyxLQUFkLGNBQWMsUUEyRTlCO0FBOENELE1BQU0sQ0FBTixJQUFZLE9BR1g7QUFIRCxXQUFZLE9BQU87SUFDakIsb0NBQXlCLENBQUE7SUFDekIsa0NBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUhXLE9BQU8sS0FBUCxPQUFPLFFBR2xCO0FBQ0Q7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQVUseUJBQXlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAvaW5kZXgnO1xyXG5cclxuLy8gZXhwb3J0IHR5cGUgQ2xhc3NUeXBlID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xyXG5leHBvcnQgY29uc3QgQmlnTnVtYmVyVHlwZSA9ICdCaWdOdW1iZXInO1xyXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRpb24ge1xyXG4gIHBhZ2VTaXplOiBudW1iZXI7XHJcbiAgcGFnZUluZGV4OiBudW1iZXI7XHJcbiAgdG90YWw6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uIHtcclxuICBwYWdlU2l6ZTogbnVtYmVyO1xyXG4gIHBhZ2VJbmRleDogbnVtYmVyO1xyXG4gIHRvdGFsOiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdERhdGEge1xyXG4gIGRhdGE/OiBhbnlbXTtcclxuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRGF0YUNoYW5nZVR5cGUgeyBBZGQsIERlbGV0ZSB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERhdGFDaGFuZ2Uge1xyXG4gIC8qKlxyXG4gICAqIOWPmOabtOi3r+W+hO+8jOS4u+imgemSiOWvueW4puS7juihqOeahOaDheWGtVxyXG4gICAqL1xyXG4gIGZwYXRoPzogc3RyaW5nO1xyXG4gIGRhdGFJZDogc3RyaW5nO1xyXG4gIGNoYW5nZVR5cGU6IERhdGFDaGFuZ2VUeXBlO1xyXG4gIFtwcm9wOiBzdHJpbmddOiBhbnk7XHJcbn1cclxuZXhwb3J0IGVudW0gSHR0cE1ldGhvZCB7XHJcbiAgR0VUID0gJ0dFVCcsXHJcbiAgUE9TVCA9ICdQT1NUJyxcclxuICBQVVQgPSAnUFVUJyxcclxuICBERUxFVEUgPSAnREVMRVRFJ1xyXG59XHJcblxyXG4vKipcclxuICog5ZCO56uv5raI5oGvXHJcbiAqL1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLW5hbWVzcGFjZVxyXG5leHBvcnQgbmFtZXNwYWNlIEJhY2tFbmRNZXNzYWdlIHtcclxuICAvKipcclxuICAgKiDmtojmga/nuqfliKtcclxuICAgKi9cclxuICBleHBvcnQgZW51bSBMZXZlbCB7XHJcbiAgICBFcnJvciA9ICdFcnJvcicsXHJcbiAgICBJbmZvID0gJ0luZm8nLFxyXG4gICAgV2FybmluZyA9ICdXYXJuaW5nJ1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlkI7nq6/mtojmga/lr7nosaFcclxuICAgKi9cclxuICBleHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlIHtcclxuICAgIGNvbnRleHQ6IElNZXNzYWdlQ29udGV4dDtcclxuICAgIGJpek1lc3NhZ2VzOiBJQml6TWVzc2FnZVtdO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmtojmga/kvY3nva5cclxuICAgKi9cclxuICBleHBvcnQgaW50ZXJmYWNlIElMb2NhdGlvbiB7XHJcbiAgICAvKipcclxuICAgICAqIOihqOWQjVxyXG4gICAgICovXHJcbiAgICBub2RlQ29kZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlr7nlupTnmoTooYxcclxuICAgICAqL1xyXG4gICAgcm93cz86IHN0cmluZ1tdO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlr7nlupTnmoTliJdcclxuICAgICAqL1xyXG4gICAgY29sdW1ucz86IHN0cmluZ1tdO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmtojmga/nu5PmnoRcclxuICAgKi9cclxuICBleHBvcnQgaW50ZXJmYWNlIElCaXpNZXNzYWdlIHtcclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv5L2N572uXHJcbiAgICAgKi9cclxuICAgIGxvY2F0aW9uPzogSUxvY2F0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmtojmga/lhoXlrrlcclxuICAgICAqL1xyXG4gICAgbWVzc2FnZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmtojmga/nuqfliKtcclxuICAgICAqL1xyXG4gICAgbGV2ZWw6IExldmVsO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmtojmga/kuIrkuIvmlodcclxuICAgKi9cclxuICBleHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlQ29udGV4dCB7XHJcbiAgICBuczogc3RyaW5nO1xyXG4gICAgYXBwQ29udGV4dDogQXBwQ29udGV4dDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGvXHJcbiAgICogQGRlc2NyaXB0aW9uIOaOpeWPo+aJp+ihjOaIkOWKn++8jOS9huaciWluZm8vd2FybmluZ+e6p+WIq+eahOa2iOaBr1xyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBNZXNzYWdlIGltcGxlbWVudHMgSU1lc3NhZ2Uge1xyXG4gICAgcHVibGljIGNvbnRleHQ6IElNZXNzYWdlQ29udGV4dDtcclxuICAgIHB1YmxpYyBiaXpNZXNzYWdlczogSUJpek1lc3NhZ2VbXTtcclxuICAgIGNvbnN0cnVjdG9yKGJpek1lc3NhZ2VzOiBJQml6TWVzc2FnZVtdLCBjb250ZXh0OiBJTWVzc2FnZUNvbnRleHQpIHtcclxuICAgICAgdGhpcy5iaXpNZXNzYWdlcyA9IGJpek1lc3NhZ2VzO1xyXG4gICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmtojmga/lpITnkIbnqIvluo9cclxuICAgKi9cclxuICBleHBvcnQgaW50ZXJmYWNlIElCYWNrRW5kTWVzc2FnZUhhbmRsZXIge1xyXG4gICAgaGFuZGxlKG1lc3NhZ2U6IElNZXNzYWdlLCBjb250ZXh0PzogYW55KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1lc3NhZ2VTZXJ2aWNlIHtcclxuICAvKipcclxuICAgKiDmj5DnpLpcclxuICAgKiBAcGFyYW0gbWVzc2FnZSBcclxuICAgKi9cclxuICBpbmZvKG1lc3NhZ2U6IHN0cmluZyk7XHJcbiAgLyoqXHJcbiAgICog6ZSZ6K+vXHJcbiAgICogQHBhcmFtIG1lc3NhZ2UgXHJcbiAgICovXHJcbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nKTtcclxuICAvKipcclxuICAgKiDorablkYpcclxuICAgKiBAcGFyYW0gbWVzc2FnZSBcclxuICAgKi9cclxuICB3YXJuaW5nKG1lc3NhZ2U6IHN0cmluZyk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU5vdGlmeVNlcnZpY2Uge1xyXG4gIC8qKlxyXG4gICAqIOaPkOekulxyXG4gICAqIEBwYXJhbSBtZXNzYWdlIFxyXG4gICAqIEBwYXJhbSBvcHRpb25zIFxyXG4gICAqL1xyXG4gIGluZm8obWVzc2FnZTogc3RyaW5nLCBvcHRpb25zPzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pO1xyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBjb250ZW50IOaIkOWKn+aPkOekulxyXG4gICAqIEBwYXJhbSBvcHRpb25zIFxyXG4gICAqL1xyXG4gIHN1Y2Nlc3MoY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pO1xyXG4gIC8qKlxyXG4gICAqIOitpuWRiuaPkOekulxyXG4gICAqIEBwYXJhbSBjb250ZW50IFxyXG4gICAqL1xyXG4gIHdhcm5pbmcoY29udGVudDogc3RyaW5nKTtcclxuICAvKipcclxuICAgKiDplJnor6/mj5DnpLpcclxuICAgKiBAcGFyYW0gY29udGVudCBcclxuICAgKiBAcGFyYW0gb3B0aW9ucyBcclxuICAgKi9cclxuICBlcnJvcihjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM/OiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFJ1bk1vZGUge1xyXG4gIGNvbXBhdGlibGUgPSAnY29tcGF0aWJsZScsXHJcbiAgaGlnaFNwZWVkID0gJ2hpZ2hTcGVlZCdcclxufVxyXG4vKipcclxuICog5o6n5Yi25Zmo6L+Q6KGM5qih5byP77yMY29tcGF0aWJsZSB8IGhpZ2hTcGVlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERFVktJVF9SVU5fTU9ERSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSdW5Nb2RlPignQGZhcnJpcy9kZXZraXRfcnVuX21vZGUnKTsiXX0=