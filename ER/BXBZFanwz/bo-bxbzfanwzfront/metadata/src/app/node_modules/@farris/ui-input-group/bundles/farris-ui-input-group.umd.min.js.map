{"version":3,"sources":["ng://@farris/ui-input-group/lib/input-group.service.ts","ng://@farris/ui-input-group/lib/input-group.component.ts","ng://@farris/ui-input-group/lib/input-group.module.ts"],"names":["InputGroupService","Injectable","args","providedIn","INPUT_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputGroupComponent","multi","prototype","ngOnInit","this","groupText","renderer","setStyle","el","nativeElement","querySelector","initSmartPassword","ngAfterViewInit","_this","ngZone","runOutsideAngular","enableClear","inputGroup","addEventListener","onMouseEnter","bind","onMouseLeave","ngOnChanges","changes","isFirstChange","currentValue","ngModelChange","val","isPassword","closeEyeICON_1","enableViewPassword","openEyes_1","inputType","onClickHandle","$event","inputtype","cd","detectChanges","onEnter","enterHandle","emit","originalEvent","stopPropagation","onInputFocus","disabled","addClass","focusCls","editable","readonly","focusHandle","onInputClick","inputClick","event","value","showClearButton","state","toggleClearIcon","getStateCls","f-state-disabled","f-state-readonly","f-state-editable","isShow","str","clearIcon","target","style","display","onMouseOverInExtentInfo","updateExtendInfo","onMousedown","tagName","preventDefault","onClearValue","flag1","flag2","onValueChange","clear","onBlur","removeClass","blurHandle","onModelChange","onModelTouched","valueChange","showButtonWhenDisabled","clickHandle","onIconMouseEnter","e","iconMouseEnter","onIconMouseLeave","iconMouseLeave","focus","textbox","writeValue","obj","undefined","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setFocusToEnd","selectionStart","length","selectionEnd","Component","selector","template","providers","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","NgZone","Injector","HostBinding","type","Input","Output","ViewChild","injector","autocomplete","customCls","placeholder","textAlign","minLength","maxLength","enableTitle","useExtendInfo","extendInfo","forcePlaceholder","EventEmitter","keyupHandle","keydownHandle","get","ChangeDetectorRef","InputGroupModule","NgModule","declarations","imports","CommonModule","FormsModule","PopoverModule","forRoot","FarrisCommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InputGroupService {\n\n  constructor() { }\n}\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-08 18:53:41\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-27 11:19:44\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { SimpleChanges, Renderer2, forwardRef, Injector, HostBinding, ChangeDetectorRef } from '@angular/core';\r\nimport { NgZone, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { Component, OnInit, Output, EventEmitter, ElementRef, Input, AfterViewInit, ViewChild, OnChanges } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl, MaxLengthValidator } from '@angular/forms';\r\n\r\nexport const INPUT_GROUP_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => InputGroupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farrisui-input-group, input-group, farris-input-group',\r\n    template: `\r\n        <div #inputGroup [class]=\"customCls + ' input-group'\"\r\n            [class.f-state-disabled]=\"disabled\"\r\n            [class.f-state-editable]=\"editable && !disabled && !readonly\"\r\n            [class.f-state-readonly]=\"readonly && !disabled\">\r\n            <span class=\"input-group-before-tips\" *ngIf=\"useExtendInfo\" (mouseenter)=\"onMouseOverInExtentInfo()\"\r\n                farrisPopover [popover]=\"extendInfo\" [triggers]=\"'hover'\" [container]=\"'body'\" [placement]=\"'top'\">\r\n                <i class=\"f-icon f-icon-info-circle\"></i><b class=\"tips-arrow\"></b>\r\n            </span>\r\n\r\n            <input\r\n                #textbox\r\n                name=\"input-group-value\"\r\n                class=\"form-control\"\r\n                [class.text-left]=\"textAlign == 'left'\"\r\n                [class.text-center]=\"textAlign == 'center'\"\r\n                [class.text-right]=\"textAlign == 'right'\"\r\n                [attr.title]=\"enableTitle? value: ''\"\r\n                [attr.type]=\"inputType\"\r\n                [attr.placeholder]=\"(disabled||readonly)&&!forcePlaceholder?'':placeholder\"\r\n                [attr.autocomplete]=\"autocomplete\"\r\n                [readonly]=\"readonly || !editable\"\r\n                [ngModel]=\"value\"\r\n                [disabled]=\"disabled\"\r\n                (blur)=\"onBlur($event)\"\r\n                (mousedown)=\"onMousedown($event)\"\r\n                (ngModelChange)=\"onValueChange($event)\"\r\n                (keydown.enter)=\"onEnter($event)\"\r\n                (focus)=\"onInputFocus($event)\"\r\n                (click)=\"onInputClick($event)\"\r\n                minlength=\"{{minLength}}\"\r\n                maxlength=\"{{maxLength}}\"\r\n                (keyup)=\"keyupHandle.emit($event)\"\r\n                (keydown)=\"keydownHandle.emit($event)\"\r\n                [attr.tabindex]=\"tabIndex\"\r\n            />\r\n            <div class=\"input-group-append\" [ngClass]=\"{'append-force-show':showButtonWhenDisabled&&(readonly||disabled)}\">\r\n                <span *ngIf=\"enableClear && !readonly && !disabled\"\r\n                    [style.display]=\"showClearButton ? 'flex' : 'none'\"\r\n                    class=\"input-group-text input-group-clear\"\r\n                    (click)=\"onClearValue($event)\"><i class=\"f-icon modal_close\"></i>\r\n                </span>\r\n                <span class=\"input-group-text\"\r\n                    (mouseenter)=\"onIconMouseEnter($event)\" (mouseleave)=\"onIconMouseLeave($event)\"\r\n                    *ngIf=\"groupText && !groupTextTemplate\" [innerHTML]=\"groupText | safe: 'html'\"\r\n                    (click)=\"onClickHandle($event)\"></span>\r\n                <ng-container *ngIf=\"groupTextTemplate\">\r\n                    <ng-container *ngTemplateOutlet=\"groupTextTemplate\" ></ng-container>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            .input-group-text {\r\n                cursor: pointer;\r\n            }\r\n            .input-group-clear {\r\n                cursor: pointer;\r\n                background: #fff !important;\r\n            }\r\n\r\n            .input-group-text:hover {\r\n                background: #ccc;\r\n            }\r\n        `\r\n    ],\r\n    // .input-group-clear:hover {\r\n    //     background: #e9ecef !important;\r\n    // }\r\n    providers: [INPUT_GROUP_VALUE_ACCESSOR],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class InputGroupComponent\r\n    implements OnInit, AfterViewInit, OnChanges, ControlValueAccessor {\r\n    @HostBinding('class.f-cmp-inputgroup')\r\n    @Input() autocomplete = 'off';\r\n    showClearButton = false;\r\n    ngControl: NgControl;\r\n    @Input() value = '';\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ */\r\n    @Input() editable = true;\r\n    /** å¯ç¨æ¸é¤æé® */\r\n    @Input() enableClear = true;\r\n    /** æ©å±æé® */\r\n    @Input() groupText = '';\r\n    /** èªå®ä¹CLASS */\r\n    @Input() customCls = '';\r\n    /** å½ç»ä»¶ç¦ç¨æåªè¯»æ¶æ¾ç¤ºåè¾¹çæé® */\r\n    @Input() showButtonWhenDisabled = false;\r\n    /** å¯ç¨æç¤ºä¿¡æ¯ */\r\n    @Input() placeholder = '';\r\n    /** ææ¬å¨è¾å¥æ¡ä¸­çå¯¹é½æ¹å¼ */\r\n    @Input() textAlign = 'left';\r\n\r\n    @Input() groupTextTemplate: TemplateRef<any>;\r\n    @Input() isPassword = false;\r\n    @Input() enableViewPassword = true;\r\n\r\n    @Input() minLength: number | undefined = undefined;\r\n    @Input() maxLength: number | undefined = undefined;\r\n\r\n    @Input() tabIndex: number;\r\n\r\n    @Input() enableTitle = true;\r\n    /** æ©å±ä¿¡æ¯ï¼å¨è¾å¥æ¡åé¢ æ¾ç¤º â  å¾æ é¼ æ æ»è¿åæ¾ç¤º */\r\n    @Input() useExtendInfo = false;\r\n    @Input() extendInfo = '';\r\n    @Input() forcePlaceholder = false;\r\n    @Output() updateExtendInfo = new EventEmitter();\r\n\r\n    @Output() clear = new EventEmitter();\r\n    @Output() valueChange = new EventEmitter();\r\n    @Output() clickHandle = new EventEmitter();\r\n    @Output() blurHandle = new EventEmitter();\r\n    @Output() focusHandle = new EventEmitter();\r\n    @Output() enterHandle = new EventEmitter();\r\n    @Output() iconMouseEnter = new EventEmitter();\r\n    @Output() iconMouseLeave = new EventEmitter();\r\n    @Output() keyupHandle = new EventEmitter();\r\n    @Output() keydownHandle = new EventEmitter();\r\n    @Output() inputClick = new EventEmitter();\r\n\r\n    @ViewChild('inputGroup') inputGroup: ElementRef;\r\n    @ViewChild('textbox') textbox: ElementRef;\r\n\r\n\r\n    inputType = 'text';\r\n\r\n    private state: boolean;\r\n    cd: ChangeDetectorRef = null;\r\n\r\n    private focusCls = 'f-state-focus';\r\n\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n\r\n\r\n    constructor(\r\n        public el: ElementRef,\r\n        private renderer: Renderer2,\r\n        private ngZone: NgZone,\r\n        private injector: Injector\r\n    ) {\r\n        this.cd = this.injector.get(ChangeDetectorRef);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.groupText) {\r\n            this.renderer.setStyle(\r\n                this.el.nativeElement.querySelector('.input-group-append'),\r\n                'margin-left',\r\n                '0'\r\n            );\r\n        }\r\n\r\n        this.initSmartPassword();\r\n\r\n\r\n        // if (!this.editable) {\r\n        //     this.readonly = true\r\n        // }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            if (this.enableClear) {\r\n                this.inputGroup.nativeElement.addEventListener(\r\n                    'mouseenter',\r\n                    this.onMouseEnter.bind(this)\r\n                );\r\n                this.inputGroup.nativeElement.addEventListener(\r\n                    'mouseleave',\r\n                    this.onMouseLeave.bind(this)\r\n                );\r\n            }\r\n\r\n            // this.textbox.nativeElement.addEventListener('focus', (e) => {\r\n            //     if (!this.readonly && !this.disabled) {\r\n            //         this.renderer.addClass(this.inputGroup.nativeElement, this.focusCls);\r\n            //         this.focusHandle.emit(e);\r\n            //     }\r\n            // });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.groupText && !changes.groupText.isFirstChange()) {\r\n            if (changes.groupText.currentValue) {\r\n                this.renderer.setStyle(\r\n                    this.el.nativeElement.querySelector('.input-group-append'),\r\n                    'margin-left',\r\n                    '-1'\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    ngModelChange(val: any) {\r\n        // console.log(val);\r\n    }\r\n\r\n\r\n    private initSmartPassword() {\r\n        if (this.isPassword) {\r\n            const openEyeICON = '<span class=\"f-icon f-icon-eye\" style=\"color: rgb(56, 143, 255);\"></span>';\r\n            const closeEyeICON = '<span class=\"f-icon f-icon-eye\"></span>';\r\n            this.groupText = closeEyeICON;\r\n\r\n            if (!this.enableViewPassword) {\r\n                this.groupText = '';\r\n            }\r\n\r\n            this.inputType = 'password';\r\n            let openEyes = false;\r\n            this.onClickHandle = ($event) => {\r\n                openEyes = !openEyes;\r\n                const inputtype = openEyes ? 'text' : 'password';\r\n                this.groupText = openEyes ? openEyeICON : closeEyeICON;\r\n                this.inputType = inputtype;\r\n                this.cd.detectChanges();\r\n                return false;\r\n            };\r\n        } else {\r\n            this.inputType = 'text';\r\n        }\r\n    }\r\n\r\n    onEnter($event: KeyboardEvent) {\r\n        this.enterHandle.emit({originalEvent: $event});\r\n        $event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onInputFocus($event) {\r\n        if (this.disabled) {\r\n            return;\r\n        } else {\r\n            this.renderer.addClass(this.inputGroup.nativeElement, this.focusCls);\r\n            if (this.editable || !this.readonly) {\r\n                this.focusHandle.emit($event);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputClick($event) {\r\n        this.inputClick.emit($event);\r\n    }\r\n\r\n\r\n    onMouseEnter(event) {\r\n        if (this.value) {\r\n            if (!this.editable) {\r\n                if (!this.state && !this.disabled) {\r\n                    this.showClearButton = true;\r\n                }\r\n            } else {\r\n                if (!this.readonly && !this.disabled) {\r\n                    this.showClearButton = true;\r\n                }\r\n            }\r\n        }\r\n        if (this.showClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    onMouseLeave(event) {\r\n        this.showClearButton = false;\r\n        this.toggleClearIcon(event, false);\r\n    }\r\n\r\n    getStateCls() {\r\n        if (this.disabled) {\r\n            return { 'f-state-disabled': true };\r\n        } else {\r\n            if (!this.editable) {\r\n                return { 'f-state-editable': true, 'f-state-readonly': this.readonly };\r\n            } else {\r\n                return { 'f-state-readonly': this.readonly };\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? '' : 'none';\r\n        const clearIcon = event.target.querySelector('.input-group-clear');\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    onMouseOverInExtentInfo() {\r\n        this.updateExtendInfo.emit();\r\n    }\r\n\r\n    onMousedown($event: MouseEvent) {\r\n        const target = $event.target as HTMLElement;\r\n        if (target.tagName !== 'INPUT') {\r\n            $event.preventDefault();\r\n        }\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    onClearValue($event: any) {\r\n        const flag1 = !this.readonly && !this.disabled && this.editable;\r\n        const flag2 = !this.editable;\r\n        $event.stopPropagation();\r\n        if (flag1 || flag2) {\r\n            this.onValueChange('', false);\r\n            this.showClearButton = false;\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    onBlur(event) {\r\n        this.renderer.removeClass(this.inputGroup.nativeElement, this.focusCls);\r\n        this.blurHandle.emit(event);\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onValueChange(val: string, emit = true) {\r\n        if (this.value !== val) {\r\n            this.value = val;\r\n            this.onModelChange(val);\r\n            this.onModelTouched(val);\r\n            if (emit) {\r\n                this.valueChange.emit(val);\r\n            }\r\n        }\r\n    }\r\n\r\n    onClickHandle(event: Event) {\r\n\r\n        if (this.showButtonWhenDisabled || ((!this.editable  || !this.readonly) && !this.disabled)) {\r\n            this.clickHandle.emit({\r\n                originalEvent: event,\r\n                value: this.value\r\n            });\r\n        }\r\n\r\n\r\n        // if (!this.editable) {\r\n        //     if (!this.disabled) {\r\n        //         this.clickHandle.emit({\r\n        //             originalEvent: event,\r\n        //             value: this.value\r\n        //         });\r\n        //     }\r\n        // } else {\r\n        //     if (!this.readonly && !this.disabled) {\r\n        //         this.clickHandle.emit({\r\n        //             originalEvent: event,\r\n        //             value: this.value\r\n        //         });\r\n        //     }\r\n        // }\r\n\r\n        event.stopPropagation();\r\n    }\r\n    onIconMouseEnter(e: MouseEvent) {\r\n        this.iconMouseEnter.emit(e);\r\n    }\r\n    onIconMouseLeave(e: MouseEvent) {\r\n        this.iconMouseLeave.emit(e);\r\n    }\r\n    focus() {\r\n        this.textbox.nativeElement.focus();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.value = (obj === null || obj === undefined) ? '' : obj;\r\n        this.textbox.nativeElement.value = this.value;\r\n        // å¨æ­¤å¤æ§è¡ onModelChange å pristine ç¶æåä¸º false å³éç¬¬ä¸æ¬¡å è½½ï¼å¯¼è³è¡¨åä¸­çéè¯¯ä¿¡æ¯æ¾ç¤ºåºæ¥ï¼\r\n        // å¦æå¿é¡»è¦æ§è¡ä¸æ¬¡ï¼éè¦éæ°ngControl çç¶æ\r\n        // this.onModelChange(obj);\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    setFocusToEnd() {\r\n        const el = this.textbox.nativeElement;\r\n        el.focus();\r\n        el.selectionStart = el.value.length;\r\n        el.selectionEnd = el.value.length;\r\n    }\r\n}\r\n","import { PopoverModule } from '@farris/ui-popover';\r\nimport { NgModule } from '@angular/core';\r\nimport { InputGroupComponent } from './input-group.component';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [InputGroupComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    PopoverModule.forRoot(),\r\n    FarrisCommonModule\r\n  ],\r\n  exports: [\r\n    InputGroupComponent\r\n  ]\r\n})\r\nexport class InputGroupModule { }\r\n"]}