/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ApplicationRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { VerifyDetailComponent } from './verify-detail.component';
import * as i0 from "@angular/core";
export class VerifyDetailService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    createVerify(option) {
        this.clear();
        //if (!this.verifyContainer) {
        /** @type {?} */
        const containerFac = this.cfr.resolveComponentFactory(VerifyDetailComponent);
        /** @type {?} */
        const cmpRef = containerFac.create(this.injector);
        this.appRef.attachView(cmpRef.hostView);
        /** @type {?} */
        let maxHeight;
        if (option.parent) {
            // option.parent.nativeElement.style.position = 'relative';
            maxHeight = option.parent.nativeElement.offsetHeight - 60;
            option.parent.nativeElement.appendChild(cmpRef.location.nativeElement);
        }
        else {
            maxHeight = document.documentElement.clientHeight - 60;
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
        }
        this.verifyContainer = cmpRef;
        this.verifyContainer.instance.maxHeight = maxHeight;
        this.verifyContainer.instance.showList = option.showList;
        this.verifyContainer.instance.showType = option.showType;
        this.verifyContainer.instance.tabList = option.verifyType;
        this.verifyContainer.instance.validatorList = option.verifyList;
        // this.verifyContainer.instance.listshowChange.subscribe((event)=>{
        //   console.log(event);
        // });
        // this.verifyContainer.instance.validatorClick.subscribe((event)=>{
        //   console.log(event);
        // });
        return this.verifyContainer.instance;
        //}
    }
    /**
     * @return {?}
     */
    clear() {
        if (this.verifyContainer) {
            /** @type {?} */
            const el = this.verifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.verifyContainer.destroy();
            this.verifyContainer = undefined;
        }
    }
}
VerifyDetailService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
VerifyDetailService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
/** @nocollapse */ VerifyDetailService.ngInjectableDef = i0.defineInjectable({ factory: function VerifyDetailService_Factory() { return new VerifyDetailService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: VerifyDetailService, providedIn: "root" });
if (false) {
    /** @type {?} */
    VerifyDetailService.prototype.verifyContainer;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerifyDetailService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LWRldGFpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12ZXJpZnktZGV0YWlsLyIsInNvdXJjZXMiOlsibGliL3ZlcmlmeS1kZXRhaWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsY0FBYyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFNbEUsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7O0lBRzlCLFlBQ1UsR0FBNkIsRUFDN0IsUUFBa0IsRUFDbEIsTUFBc0I7UUFGdEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUMzQixDQUFDOzs7OztJQUVOLFlBQVksQ0FBQyxNQUEwQjtRQUNuQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7OztjQUVMLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDOztjQUN0RSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7WUFDcEMsU0FBZ0I7UUFDcEIsSUFBRyxNQUFNLENBQUMsTUFBTSxFQUFDO1lBQ2YsMkRBQTJEO1lBQzNELFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQzFELE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3hFO2FBQ0c7WUFDRixTQUFTLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBQ3ZELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDM0U7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3BELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3pELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQzFELElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBRWhFLG9FQUFvRTtRQUNwRSx3QkFBd0I7UUFDeEIsTUFBTTtRQUNOLG9FQUFvRTtRQUNwRSx3QkFBd0I7UUFDeEIsTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFDekMsR0FBRztJQUNMLENBQUM7Ozs7SUFFTSxLQUFLO1FBQ1IsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFOztrQkFDbEIsRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLGFBQWE7WUFDdEQsSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFO2dCQUNmLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztTQUNsQztJQUNMLENBQUM7OztZQXRERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFONEQsd0JBQXdCO1lBQWxDLFFBQVE7WUFBeEIsY0FBYzs7Ozs7SUFTL0MsOENBQXFEOzs7OztJQUVuRCxrQ0FBcUM7Ozs7O0lBQ3JDLHVDQUEwQjs7Ozs7SUFDMUIscUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBBcHBsaWNhdGlvblJlZiwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWZXJpZnlEZXRhaWxDb21wb25lbnQgfSBmcm9tICcuL3ZlcmlmeS1kZXRhaWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVmVyaWZ5RGV0YWlsT3B0aW9ucyB9IGZyb20gJy4vdmVyaWZ5Lm9wdGlvbnMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVmVyaWZ5RGV0YWlsU2VydmljZSB7XHJcblxyXG4gIHZlcmlmeUNvbnRhaW5lcjogQ29tcG9uZW50UmVmPFZlcmlmeURldGFpbENvbXBvbmVudD47XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIFxyXG4gICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmXHJcbiAgICApIHt9XHJcblxyXG4gIGNyZWF0ZVZlcmlmeShvcHRpb246VmVyaWZ5RGV0YWlsT3B0aW9ucyl7XHJcbiAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgIC8vaWYgKCF0aGlzLnZlcmlmeUNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckZhYyA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFZlcmlmeURldGFpbENvbXBvbmVudCk7XHJcbiAgICAgICAgY29uc3QgY21wUmVmID0gY29udGFpbmVyRmFjLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KGNtcFJlZi5ob3N0Vmlldyk7XHJcbiAgICAgICAgbGV0IG1heEhlaWdodDpudW1iZXI7XHJcbiAgICAgICAgaWYob3B0aW9uLnBhcmVudCl7XHJcbiAgICAgICAgICAvLyBvcHRpb24ucGFyZW50Lm5hdGl2ZUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgICAgbWF4SGVpZ2h0ID0gb3B0aW9uLnBhcmVudC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCAtIDYwO1xyXG4gICAgICAgICAgb3B0aW9uLnBhcmVudC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKGNtcFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgIG1heEhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSA2MDtcclxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChjbXBSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyID0gY21wUmVmO1xyXG4gICAgICAgIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLm1heEhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5zaG93TGlzdCA9IG9wdGlvbi5zaG93TGlzdDtcclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS5zaG93VHlwZSA9IG9wdGlvbi5zaG93VHlwZTtcclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5pbnN0YW5jZS50YWJMaXN0ID0gb3B0aW9uLnZlcmlmeVR5cGU7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UudmFsaWRhdG9yTGlzdCA9IG9wdGlvbi52ZXJpZnlMaXN0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHRoaXMudmVyaWZ5Q29udGFpbmVyLmluc3RhbmNlLmxpc3RzaG93Q2hhbmdlLnN1YnNjcmliZSgoZXZlbnQpPT57XHJcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhldmVudCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgLy8gdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2UudmFsaWRhdG9yQ2xpY2suc3Vic2NyaWJlKChldmVudCk9PntcclxuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy52ZXJpZnlDb250YWluZXIuaW5zdGFuY2U7XHJcbiAgICAvL31cclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhcigpIHtcclxuICAgICAgaWYgKHRoaXMudmVyaWZ5Q29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLnZlcmlmeUNvbnRhaW5lci5sb2NhdGlvbi5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIGlmIChlbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZlcmlmeUNvbnRhaW5lci5kZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlDb250YWluZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==