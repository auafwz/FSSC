{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/devkit/lib/metadata/decorator/decorator.ts","ng://@farris/devkit/lib/metadata/decorator/metadata_util.ts","ng://@farris/devkit/lib/changeset/types.ts","ng://@farris/devkit/lib/changeset/change_set.ts","ng://@farris/devkit/lib/entity/metadata/field_decorator.ts","ng://@farris/devkit/lib/cache/types.ts","ng://@farris/devkit/lib/entity/metadata/entity_decorator.ts","ng://@farris/devkit/lib/cache/core/cache_object.ts","ng://@farris/devkit/lib/cache/core/decorator.ts","ng://@farris/devkit/lib/cache/core/cache_container.ts","ng://@farris/devkit/lib/cache/provider/memory_cache_provider.ts","ng://@farris/devkit/lib/cache/provider/default_cache_provider.ts","ng://@farris/devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/devkit/lib/entity/types.ts","ng://@farris/devkit/lib/entity/entity_factory.ts","ng://@farris/devkit/lib/entity/entity_type_creator.ts","ng://@farris/devkit/lib/entity/entity_creator.ts","ng://@farris/devkit/lib/entity/validator/validation_types.ts","ng://@farris/devkit/lib/entity/validator/validation_error.ts","ng://@farris/devkit/lib/entity/validator/validation_executor.ts","ng://@farris/devkit/lib/entity/validator/validation_utils.ts","ng://@farris/devkit/lib/utils/date_util.ts","ng://@farris/devkit/lib/i18n/translate_service.ts","ng://@farris/devkit/lib/entity/validator/validator.ts","ng://@farris/devkit/lib/entity/entity_list.ts","ng://@farris/devkit/lib/core/types.ts","ng://@farris/devkit/lib/i18n/user_settings_service.ts","ng://@farris/devkit/lib/i18n/zoned_time.ts","ng://@farris/devkit/lib/misc/router-param.service.ts","ng://@farris/devkit/lib/binding-data/changes.ts","ng://@farris/devkit/lib/binding-data/binding_property.ts","ng://@farris/devkit/lib/binding-data/base_binding_object.ts","ng://@farris/devkit/lib/binding-data/property_util.ts","ng://@farris/devkit/lib/binding-data/binding_object.ts","ng://@farris/devkit/lib/binding-data/binding_list_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/devkit/lib/form/decorators.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/devkit/lib/core/data-path/data_path_node.ts","ng://@farris/devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/devkit/lib/core/data-path/data_path.ts","ng://@farris/devkit/lib/core/data-path/data_path_creator.ts","ng://@farris/devkit/lib/core/data-type-info/data_prop_info.ts","ng://@farris/devkit/lib/core/data-type-info/data_type_info.ts","ng://@farris/devkit/lib/core/tokens.ts","ng://@farris/devkit/lib/core/core.ts","ng://@farris/devkit/lib/core/escape.ts","ng://@farris/devkit/lib/resolver/types.ts","ng://@farris/devkit/lib/resolver/resolver_registry.ts","ng://@farris/devkit/lib/repository/decorators.ts","ng://@farris/devkit/lib/repository/entity_collection.ts","ng://@farris/devkit/lib/repository/entity_manager.ts","ng://@farris/devkit/lib/repository/pagination_manager.ts","ng://@farris/devkit/lib/repository/data_change_history.ts","ng://@farris/devkit/lib/repository/sort_condition_manager.ts","ng://@farris/devkit/lib/repository/filter_condition_manager.ts","ng://@farris/devkit/lib/misc/uid.ts","ng://@farris/devkit/lib/repository/repository.ts","ng://@farris/devkit/lib/repository/default_repository.ts","ng://@farris/devkit/lib/resolver/entity_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/state_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/comment_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/resolve_service.ts","ng://@farris/devkit/lib/utils/expression_util.ts","ng://@farris/devkit/lib/utils/data_type_info_util.ts","ng://@farris/devkit/lib/form/form.ts","ng://@farris/devkit/lib/binding-data/entity_util.ts","ng://@farris/devkit/lib/binding-data/binding_data.ts","ng://@farris/devkit/lib/binding-data/binding_list.ts","ng://@farris/devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/devkit/lib/binding-data/decorators.ts","ng://@farris/devkit/lib/misc/data-path-util.ts","ng://@farris/devkit/lib/misc/guid.ts","ng://@farris/devkit/lib/misc/run_mode_service.ts","ng://@farris/devkit/lib/entity/entity.ts","ng://@farris/devkit/lib/entity/dynamic_entity.ts","ng://@farris/devkit/lib/schema/schema.ts","ng://@farris/devkit/lib/entity/entity_data_service.ts","ng://@farris/devkit/lib/entity/entity_prototype.ts","ng://@farris/devkit/lib/entity/entity_type_factory.ts","ng://@farris/devkit/lib/rest/rest_service.ts","ng://@farris/devkit/lib/command/decorators.ts","ng://@farris/devkit/lib/misc/is-observable.ts","ng://@farris/devkit/lib/command/flow/task_node.ts","ng://@farris/devkit/lib/variable/variable_parser.ts","ng://@farris/devkit/lib/variable/parse_util.ts","ng://@farris/devkit/lib/variable/data_variable_parser.ts","ng://@farris/devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/devkit/lib/variable/command_variable_parser.ts","ng://@farris/devkit/lib/variable/variable_parse_service.ts","ng://@farris/devkit/lib/variable/frame_id_variable_parser.ts","ng://@farris/devkit/lib/variable/form_state_variable_parser.ts","ng://@farris/devkit/lib/variable/event_param_variable_parser.ts","ng://@farris/devkit/lib/variable/index.ts","ng://@farris/devkit/lib/command/flow/task_link.ts","ng://@farris/devkit/lib/command/flow/task_flow.ts","ng://@farris/devkit/lib/command/command_context.ts","ng://@farris/devkit/lib/i18n/translate_token.ts","ng://@farris/devkit/lib/command/command_handler.ts","ng://@farris/devkit/lib/command/command_handler_registry.ts","ng://@farris/devkit/lib/command/command_handler_extender.ts","ng://@farris/devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/devkit/lib/ui-state/decorators.ts","ng://@farris/devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/devkit/lib/ui-state/ui_state.ts","ng://@farris/devkit/lib/ui-state/tokens.ts","ng://@farris/devkit/lib/state-machine/types.ts","ng://@farris/devkit/lib/state-machine/context.ts","ng://@farris/devkit/lib/state-machine/state_machine_event.ts","ng://@farris/devkit/lib/state-machine/state_machine.ts","ng://@farris/devkit/lib/state-machine/decorators.ts","ng://@farris/devkit/lib/view-model/decorators.ts","ng://@farris/devkit/lib/view-model/view_model.ts","ng://@farris/devkit/lib/context/context.ts","ng://@farris/devkit/lib/app/binding_data_manager.ts","ng://@farris/devkit/lib/app/repository_mananger.ts","ng://@farris/devkit/lib/app/frame_component_refresher.ts","ng://@farris/devkit/lib/app/change_detection_controller.ts","ng://@farris/devkit/lib/app/app_context_manager.ts","ng://@farris/devkit/lib/app/component_manager.ts","ng://@farris/devkit/lib/app/tokens.ts","ng://@farris/devkit/lib/message/messagemanager.ts","ng://@farris/devkit/lib/message/messagedata.ts","ng://@farris/devkit/lib/message/messagebody.ts","ng://@farris/devkit/lib/validation/tokens.ts","ng://@farris/devkit/lib/schema/dom.service.ts","ng://@farris/devkit/lib/schema/form-metadata.ts","ng://@farris/devkit/lib/schema/schema.service.ts","ng://@farris/devkit/lib/app/app_metadata_collector.ts","ng://@farris/devkit/lib/app/view_model_manager.ts","ng://@farris/devkit/lib/app/render_context_metadata_manager.ts","ng://@farris/devkit/lib/frame/tokens.ts","ng://@farris/devkit/lib/app/app_context.ts","ng://@farris/devkit/lib/app/frame_contex_manager.ts","ng://@farris/devkit/lib/event-bus-new/event-bus-proxy.ts","ng://@farris/devkit/lib/event-mechanism/declaration/event-type.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration_decorator.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription_decorator.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe-type.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe.ts","ng://@farris/devkit/lib/event-bus-new/event-bus.ts","ng://@farris/devkit/lib/exception/tokens.ts","ng://@farris/devkit/lib/expression/types.ts","ng://@farris/devkit/lib/i18n/tokens.ts","ng://@farris/devkit/lib/manifest/tokens.ts","ng://@farris/devkit/lib/expression/expression_registry.ts","ng://@farris/devkit/lib/listener/tokens.ts","ng://@farris/devkit/lib/listener/change_listener.ts","ng://@farris/devkit/lib/expression/expression_executor.ts","ng://@farris/devkit/lib/expression/expression_result.ts","ng://@farris/devkit/lib/expression/expression_manager.ts","ng://@farris/devkit/lib/expression/expression_result_factory.ts","ng://@farris/devkit/lib/listener/ui_state_change_listener.ts","ng://@farris/devkit/lib/expression/tokens.ts","ng://@farris/devkit/lib/listener/repository_change_listener.ts","ng://@farris/devkit/lib/listener/listener_registry.ts","ng://@farris/devkit/lib/listener/binding_data_change_listener.ts","ng://@farris/devkit/lib/listener/listeners.ts","ng://@farris/devkit/lib/expression/expression_event_emitter.ts","ng://@farris/devkit/lib/effector/tokens.ts","ng://@farris/devkit/lib/effector/repository_effector.ts","ng://@farris/devkit/lib/effector/uistate_effector.ts","ng://@farris/devkit/lib/effector/readonly_effector.ts","ng://@farris/devkit/lib/effector/dependency_effector.ts","ng://@farris/devkit/lib/effector/effector_registry.ts","ng://@farris/devkit/lib/effector/relative_effector.ts","ng://@farris/devkit/lib/effector/validate_effector.ts","ng://@farris/devkit/lib/effector/required_effector.ts","ng://@farris/devkit/lib/effector/visible_effector.ts","ng://@farris/devkit/lib/effector/effector_factory.ts","ng://@farris/devkit/lib/event-handler/event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_value_changed_event_handler.ts","ng://@farris/devkit/lib/effector/effector_manager.ts","ng://@farris/devkit/lib/event-handler/state_value_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_add_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_remove_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_update_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_append_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_value_change_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_remove_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_selection_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/event_handler_registry.ts","ng://@farris/devkit/lib/expression/expression_engine_impl.ts","ng://@farris/devkit/lib/frame/frame_context.ts","ng://@farris/devkit/lib/frame/frame_component.ts","ng://@farris/devkit/lib/frame/frame_event.ts","ng://@farris/devkit/lib/frame/frame_event_bus.ts","ng://@farris/devkit/lib/command/command_handler_factory.ts","ng://@farris/devkit/lib/command/command_bus.ts","ng://@farris/devkit/lib/command/providers.ts","ng://@farris/devkit/lib/command/dynamic_command_handler.ts","ng://@farris/devkit/lib/providers.ts","ng://@farris/devkit/lib/devkit_module.ts","ng://@farris/devkit/lib/listener/deprecated_binding_data_change_listener.ts","ng://@farris/devkit/lib/core/encode_url.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__values","o","m","__read","ar","error","__spread","concat","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","chainFn","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","_i","annotationInstance","bind","typeDecorator","cls","ngMetadataName","annotationCls","values","propName","makePropDecorator","PropDecoratorFactory","decoratorInstance","meta","unshift","MetadataUtil","getClassMetadatas","getClassMetadataByName","metadataName","getClassMetadataByNameWithTranslate","translateService","keysToTranslate","allClassMetadatas","find","classMetadata","translateMetadataByName","getPropsMetadatas","getPropsMetadatasByName","getPropsMetadatasByNameWithTranslate","metadatas","allPropMetadatas","keys","forEach","propMetadata","translateMetadatasByName","_this","metadataPropKey","propertyVariable","startsWith","endsWith","translateKey","replace","trim","transform","getPropMetadatasByName","getPropMetadataByName","ModifyType","Modification","modifyType","path","preValue","position","type","isEqual","other","JSON","stringify","ChangeSet","modifications","append","modification","ValueChange","appendValueChangeModification","Add","Insert","Clone","appendAddModification","Remove","appendRemoveModification","Load","existedModification","findModifyItemsPath","existedAddModification","findNewAddItemsPath","primaryKey","primaryKeyValue","addModification","filter","addDataItem","fullRemovePath","valueModification","valueChangePath","from","removeDescendantRemoveModifications","clear","index","parentRemoveModification","parentPathWithId","createRemovePathWithId","descendantPathWithId","isDescendantPath","parentPath","descendantPath","parentPathItem","parentPathItemIndex","isPlainObject","toString","getPrototypeOf","proto","NG_FIELD","NgField","makeNgFieldDecorator","options","primary","foreign","Boolean","dataField","String","NG_LIST","NgList","makeNgListDecorator","NG_OBJECT","NgObject","makeNgObjectDecorator","NG_Dynamic","CacheReturnType","NgDynamic","makeNgDynamicDecorator","NG_ENTITY","CacheKeyCompare","compare","key1","key2","CacheObject","isExpired","ttl","Date","now","valueOf","createAt","content","Cacheable","propertyKey","descriptor","undefined","className","method","provider","Error","Function","cacheKey","argsString","cacheObject","get","result","object","set","CacheContainer","isCacheObjectExpired","MemoryCacheProvider","has","store","findIndex","item","cacheKeyCompare","delete","splice","DefaultCacheProvider","buffer","size","Map","FieldMetadataUtil","getNgFields","getNgField","getDataField","getNgObjects","getNgDynamic","getNgList","getPrimaryFieldMetadata","ngFieldObj","prop","propMeta","property","getPrimaryKey","entityType","primaryNgField","getValidationMetadata","fieldMetadatas","validRules","map","rule","getValidationMetadataWithPath","parentPaths","getPaths","propertyPath","property_1","join","tslib_1.__decorate","context","EntityMetadataUtil","getAllNgProperties","ngPlainProperties","getNgFieldProperties","ngEntityProperties","getNgObjectProperties","ngDynamicProperties","getNgDynamicProperties","ngEntityListProperties","getNgEntityMatadata","getNgListProperties","getPrimaryKeyProperty","primaryKeyProperty","ngProperty","PARENT_PATH","PARENT_CLASS","EntityFactory","T","data","EntityTypeCreator","entity","getType","createType","_super","tslib_1.__extends","Entity","EntityType","entityPrototype","extendProperties","ngFields","ngObjects","ngLists","ngDynamic","extendPlainProperty","extendListProperty","extendObjectProperty","extendDynamicProperty","ngField","getPropValue","newPropValue","oldPropValue","isPropValueChanged","setPropValue","changeSetValue","preparePropValue","emitValueChange","ngListMetadata","propertyName","entityList","fieldMetadata_1","createPath","val","EntityList","entities","loadEntities","onListChanged","subscribe","setChanges","ngObjectMetadata","fieldMetadata","childEntity","buildEntity","modifyInfo","ngDynamicMetadata","dynamicEntity","originalData","buildDynamic","parent","instance","onValueChanged","changes","DynamicFactory","createEntity","entityData","createEntities","entityListData","validationMessage","ValidationTypes","isValidType","indexOf","getMessage","CURRENT_LANGUAGE","setCurrentLanguage","language","CUSTOM_VALIDATION","REQUIRED","EQUALS","NOT_EQUALS","IS_NUMBER","IS_INT","IS_FLOAT","IS_STRING","IS_BOOLEAN","IS_DATE","IS_DATE_STRING","IS_BOOLEAN_STRING","IS_NUMBER_STRING","IS_EMAIL","IS_JSON","IS_LOWERCASE","IS_UPPERCASE","RANGE","MIN","MINVALUE","MAX","MAXVALUE","LENGTH","MAX_LENGTH","MIN_LENGTH","MIN_DATE","MAX_DATE","EXCLUDE","MATCHES","FIELD_CONTAINER","fieldContainer","required","equals","notEquals","isNumber","isInt","isFloat","isBoolean","isDate","isEmail","min","minValue","minDate","max","maxValue","maxDate","isBooleanString","isDateString","isLowercase","isUppercase","range","maxLength","minLength","isNumberString","exclude","matches","ValidationError","isArray","ValidationExecutor","replaceMessageSpecialTokens","message","messageString","constraints","constraint","RegExp","targetName","execute","newValue","validationErrors","externalRules","currentRowId","frameContext","form","getValidationRules","validateMetadatas","remainedExternalRules","parentPathArray","objectCursor","cursorParentPath","parentPath_1","reverse","rules","pathArray","split","fieldName_1","fieldParentPath","targetId_1","targetId","validateRule","fullPath","fieldName","validateRules","bindingPaths","form_1","getForm","formControl_1","getFormControl","id","formGroupName","defaultI18nValue","reduce","curr","_a","typeName","isMultLanguageField","multiLangFields","getMultiLanguageFields","includes","field","frameContext_1","fieldContainerName","Number","isInteger","validationDisplayName","validationError","generateValidationError","defaultValidations","objectValidations","listValidations","ngFields_1","enableMultiLangInput","stripEmptyErrors","errors","children","errorMap","validValue","validator","validateValueByMetadata","Promise","promise","then","isValid","createValidationError","awaitingPromises","parentIndex","INDEX_LABEL","listFields","validationError_1","items","actualIndex","primaryValue","objectFields","extType","getFrameContext","eventFrameContext","paths","bindingPath","appContext","frameContextManager","getFrameContexts","viewModel","ngFormControls","test","ValidationUtils","createDetailedErrorMessage","messages","propConstraintFailed","ruleName","formattedProperty","convertErrorsToNormalObject","errObj","err","childErrors","itemErr","childErr","_b","DateUtil","formatISO","dateOrDateString","isEmptyDateOrDateString","emptyISODateTimeString","dateObj","parse","format","defaultISOFormat","dateFormat","defaultDisplayFormat","parseISO","date","isEmptyDate","isEmptyDateString","dateString","dateOrDateString1","dateOrDateString2","dateObj1","dateObj2","compareAsc","emptyDateTimeString","defaultDateFormat","defaultTimeFormat","TranslateService","setTranslate","translate","getCurrentLanguage","defaultLanguage","Validator","validate","executor","all","sortValidationErrors","buildErrors","sortable","info","sort","a","verify","ignoreAsyncValidateRules","validType","constraintsToValidate","param","eval","patch","currentRows","parentEntityListPaths","getEntityListPath","childrenList","slice","getMainEntityPrimaryValue","currentRow","msg","Set","newMsg","customValidation","comparison","isEmptyValue","currentLanguage","Infinity","allowInfinity","isNaN","allowNaN","isFinite","validatorJs","isString","getTime","toDate","isLength","hasInvalidLangs","dateRange","isYearRange","isMonthOrDayRange","parseInt","getRangeValue","isDayTimeRange","splitor","isDateRange","isYearMonthRange","num","match","BigNumber","isGreaterThanOrEqualTo","isLessThanOrEqualTo","isNumeric","contains","seed","notContains","isJSON","someChars","arrChar","counter","pattern","ValidatorJS.default","rawData","changeSet","tslib_1.__values","initEntity","changeItem","appendNew","isCloned","newEntity","insert","appendEntity","appendEntities","remove","primaryId","total","count","indexToRemove","entityToRemove","primaryProperty","updateIndex","modinfo","listChanged","change","sum","getPropertyName","toJson","toJSON","toArray","isNewEntity","subChanges","newLength","__type__","Subject","asObservable","DataChangeType","HttpMethod","RunMode","BigNumberType","BackEndMessage","Level","Message","bizMessages","DEVKIT_RUN_MODE","InjectionToken","UserSettingsService","setUserSettings","userSettings","timeZone","timeZoneOffset","getTimeZone","getTimeZoneOffset","ZonedTime","zonedTimeToSpecialTimeZoneOffsetTimeString","offset","offsetMinutes","moment","utc","add","timeZoneOffsetTimeToUtcTimeString","utcOffset","toISOString","ChangeType","ViewChangeType","BindingPropertyType","RouterParamService","getParams","url","getAllParams","setParams","params","allParams","setAllParams","clearParams","allParamsJson","window","sessionStorage","getItem","setItem","clearAllParams","Injectable","BaseBindingObject","getValue","setShowValidationMsg","flag","isShowValidationMsg","innerValues","setValue","propertyValue","emitEventToView","emitEventToEntity","invokeOnValueChange","oldPropertyValue","entityChanged","of","viewChange","buildViewChangesContext","viewChanges","buildChangesContext","langCode","properties","List","list","Dynamic","ignoreMultiLangInput","multiLangValueObj","useFullMultiLangProperty","localStorage","ValueChanged","unsubscribe","controlMap","PropertyUtil","getProperties","ngFieldProperties","ngFieldProperty","Plain","isPrimaryKey","isForeignKey","ngObjectProperties","ngObjectProperty","ngListProperties","ngListProperty","ngDynamicProperty","getDynamicProperties","dynamicData","getPropertyByName","BindingObject","BindingListTypeFactory","bindingProperties","bindingListType","BindingList","BindingListType","bindingListTypePrototype","bindingListPrototype","bindingProperty","currentItem","BindingListFactory","bindingList","BindingObjectTypeFactory","bindingObjectType","BindingObjectType","typePrototype","extendDynamicObjectProperty","childListProperties","bindingObjects","load","childObjectProperties","bindingObject","BindingObjectFactory","createDynamicBindingObject","childList","childObject","attachDynamicObjectProperty","dynamicObject","NG_VALIDATE_FORM","NG_CHILD_FORM","NgChildForm","obj","NG_CHILD_FORM_ARRAY","NgChildFormArray","NG_FORM_CONTROL","NgFormControl","BindingPathConverter","toBindingPathArray","part","toBindingPathString","bindingPathArray","BindingPathComparer","srcPath","dstPath","srcPathArray","dstPathArray","every","srcPathItem","srcPathIndex","isParent","childPath","childPathArray","isAncestor","ancestorPath","descendantPathArray","ancestorPathArray","ancestorPathItem","ancestorPathIndex","BindingPathTraverser","getLeafPathString","getParentPathString","EntityPathConverter","toEntityPathArray","bindingPathString","bindingData","entityPathArray","currentBindingObject","createPrimaryKeyPath","currentBindingList","DataPathNodeType","EntityPathComparer","FormPathConverter","formPahtString","DataPathNode","prev","DataPath","newNode","head","tailNode","getTail","lastNode","currentNode","clone","newDataPath","curDataNode","DataPropGroup","DataPathCreator$$1","DataPathCreator","fullPathArrayOrString","entityManager","dataPath","fullPathArray","currentNodeInfo","nodeValue","shift","nodeType","DataId","entityTypeInfo","DataTypeInfo","nextNodeValue","getNextPathNodeInfo","parentNodeInfo","parentNodeValue","parentNodeType","parentEntityTypeInfo","nextPathNodeInfo","PropName","nextPropInfo","getPropInfoByName","group","typeInfo","shortPathArrayOrString","shortPathArray","currentEntityTypeInfo","propInfo","DataPropInfo","getBindingPathByTableName","tableName","fullEntityPath","getFullEntityPath","dataTypeInfo","entityInfo","nodeCode","originalCode","propInfoMap","idx","dataTypeInfo_1","getPropInfos","isVOField","getPropNames","propNames","getPropInfosByGroup","getPropNamesByGroup","getPropInfoByPath","arrPath","getTypeInfoByPath","getPrimaryKeyPropInfo","getPropMappingByName","mapping","getPropMappingByPath","checkPropGroup","propGroup","collectPropInfos","foreignKey","addPropInfo","collectEntityInfos","metadataInfo","originalDataField","FORM_PATH_TOKEN","BACK_END_MESSAGE_HANDLER_TOKEN","MESSAGE_SERVICE_TOKEN","NOTIFY_SERVICE_TOKEN","Core","warn","optionalParams","logable","console","log","escape","RESOLVER_TOKEN","ENTITY_TEMPLATE","STATE_TEMPLATE","GROUP_FUNCTIONS","Injector","Optional","Inject","ResolverRegistry","injector","resolvers","NG_REPOSITORY","EntityCollection","innerEntitySet","innerEntityMap","notifyCollectionChanged","reset","isReset","entityCreate","complete","valueChanged","listenEntityChangeEvent","addEntity","verifyEntityToAdd","insertEntity","updateEntity","Update","addEntities","entitiesToAdd","addData","AddData","getEntityById","identity","getEntityByPath","rootEntityId","parentNode","currentPath","getEntitiesByPath","getEntities","predicate","getAllEntities","removeEntityById","verifyEntityToRemove","removeEntitiesByIds","removeEntities","entitiesToRemove","removeData","RemoveData","resetEntities","entityId","collectionChanged","paginationInfo","pageSize","original","PaginationInfoChange","pageIndex","updatePaginationInfoByPath","pageInfo","totalCount","setPaginationConfigByPath","getPaginationConfigByPath","defaultValue","config","current","Math","abs","EntityManager","createEntitiesByPath","fPath","childEntityList","subPaths","fid","entityCollection","propEntityType","EntityUtil","getPropInfo","getEntityNodeByPath","entityCollectionOrList","createByLongPathFromRoot","entityNode","pathNode","getPropValueByPath","setPropValueByPath","propValue","insertEntityBeforeByPath","fpath","insertEntitiesBeforeByPath","insertEntityAfterByPath","insertEntitiesAfterByPath","appendEntityByPath","initialData","insertEntityByPath","appendEntitiesByPath","removeEntityByPath","removeEntitiesByPath","ids","clearAllEntityChanges","clearEntityChangesById","clearEntityChangesByIds","checkAllEntityChanges","some","checkEntityChangesById","clearEntityChangesByArray","idArray","PaginationManager","expandMainEntityConfig","entityName","paginationConfig","entityConfig","removeLasts","newKey","substring","deleteMainEntityConfig","defaultPageSize","getChilds","objectType","listProperties","itemTypeName","child","childs","DataChangeHistory","addChange","dataChange","changeType","addChanges","history","clearByIds","dataId","ids_1","ids_1_1","isChanged","onAddData","onDeleteData","SortConditionManager","getConditionsByBindingPath","directionConverter","conditions","sorts","condition","sortType","SortType","SortField","addCondition","direction","isBindingPathExist","bindingPathSortConditions","conditionIndex","removeCondition","setConditions","fields","directions","filedsArray","directionsArray","FilterConditionManager","getFilters","filters","mergeCondition","merge","findConditionIndex","addConditions","removes","props_1","props_1_1","UID","redix","timestamp","previous","Repository","innerName","guid","updateEntityType","readMetadata","repositoryMetadata","apiUri","apiUrl","setPaginationConfig","paginationManager","pagination","buildEntities","listData","dataChangeHistory","sortConditionManager","filterConditionManager","DefaultRepository","getList","getById","queryChild","updateById","updateEntityById","appendByPath","insertByPath","removeById","ifSave","batchRemove","removeByIds","removeByPath","updateChangesById","updateChangesByPath","updateAllChanges","applyChanges","applyChangesById","cancelChanges","batchRemoveByPath","batchAppendByPath","defaultValues","batchAppend","EntityDependencyResolver","resolve","expr","groupFunctionDependencies","ExpressionUtil","getGroupFunctionDependency","repository","entityDependencies","getEntityDependency","dep","merged","getValidEntityPropertyExpression","entityPropertyExpression","propPaths","deps","regex","entityPropertyExpressions","convertToNodeCode","substr","CONTEXT_FUNCTIONS","StateDependencyResolver","contextFunctions","argumentsRegex_1","groupFunction","argumentMatchResult","argument","CommentDependencyResolver","dependencies","defineMatchArray","defineString","defineObject","ResolveService","expression","resolverRegistry","commentDependencyResolver","resolver","commentDependencies","dependency","groupFunctionRegex","groupFunctions","entityExpression","nodeCodes","entityExpressions","nextNodeCode","nextNodeCodePropInfo","dataPropInfo","getChildrenEntityPaths","results","childrens","getCurrentRowByPaths","findById","getAvailableChildrenPathsFromEntityPaths","getBindingPath","getEntityPath","DataTypeInfoUtil","getChildrenNodeCodes","Form","FormGroup","ngValidateForm","enableValidate","updateErrors","errorObj","isGrid","insMap","setControlValue","isFormValid","setIsShowmap","domPropertyName","isShowPropMap","raisedByValidateEffector","getObject","getGridItemControl","getCardControlErrors","cardControls","getFormControlErrors","getGridControlErrors","controlIdMap","prefix","getDomPropertyNameByEntityProp","currentId","isSubForm","innerList","controls","ngFormControl","getngFormControlByBinding","messageTemplate","invalidMessage","updateFormErrors","forceShow","clearBackendError","setErrors","markAsTouched","errorType","binding","getErrorMessage","domProperty","validateRuleType","formControl","controlName","init","buildForm","collectMetadatas","createChildForms","createControls","resetCardValidMsg","x","resetFormControls","updateFieldValidateRule","isRequired","clearValidators","markAsUntouched","markAsPristine","requiredRuleIndex","displayFieldName","validators","ruleObj","validateFn","getValidatorByRuleObj","setValidators","addFieldValidateRule","expressionId","ruleType","control","controlPaths","currentLangValue","isInValid","bigNumber","isGreaterThan","isLessThan","collectionFormControlMetadats","formControls","ngChildForms","subForms","preloadMetadata","formControlId","validationRule","FormControl","updateOn","setUpBindingDataPipeline","valueConverter","formGroup","formType","addControls","column","converter","editor","fieldPath","bindingFieldPath","initValue","getValueFromBindingData","pipe","changePath","isUdt","SelectionChanged","UpdateErrors","changePathWithDot","fullEntityProp","pathPrefix","newControlValue","convertFrom","domPropName","valueChanges","oldBindingValue","oldValue","compareDate","newBindingValue","convertTo","clearBackEndMessages","runMode","highSpeed","isDateConverter","srcDate","dstDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getEntityValueChangingListeners","listeners","valueChanging","getEntityValueChangedListeners","validatoinRules","ngFormControl_1","displayFieldName_1","validationrulesToAdd","setTranslateService","messageKeys","errors_1","errors_2","loadEntity","loadEntityList","setUpEntityPipeline","takeUntil","primaryKeyPath","dynamic","value_1","target_1","parentId","findId","pathData","controlProp","entityValidate","callback","validateFromUtilSync","formErrors","mergedErrors","validateError","setUpEntityListPipeline","paths_1","parentId_1","paths_2","parentPath_2","parentId_2","paths_3","parentPath_3","parentId_3","loadRepository","entityCollectionChange","createBindingObjects","createBindingObject","removeDataByIds","watchReposiroty","pagingInfo","targetPropName","propType","primaryNgFiledProp","isObjectProp","isDynamicProp","appendInitialData","parentID","BindingData","firePagingChangeEvent","setPagingInfo","skip","take","parentObject","updatePagingInfo","setValueChangeInvokerFactory","valueChangeInvokerFactory","getValudChangeInvokerFactory","initByRepository","initByBindingList","setDataTypeInfo","useInitValue","getInitValueByPaths","clearValue","getPath","_paginationInfo","sPaginationInfo","setPaginationInfo","emptyCurrentItem","self","objects","firstId","setCurrentId","lastId","Append","currentIndex","nextCurrentId","getCurrentIdBeforeDeleting","getIndexById","clearOnly","nextIndex","getIdByIndex","emitEvent","emitGlobalEvent","force","GlobalSelectionChanged","swapById","id1","id2","item1","element","item2","toList","Swap","sortBy","orders","arrFields","arrDirections","isMultiLangProp","order","item1Value","item2Value","localeCompare","BindingDataFactory","createFromRepository","BindingPropertyUtil","EntityLoadUtil","createFromEntityManager","createFromExistingBindingData","existingBindingData","NG_BINDING_DATA","DataPathUtil","convertToBindingPathArray","convertToEntityPathArray","convertToRestUrl","restPathArray","getLeafPath","getParentPath","Guid","isGuid","createEmpty","raw","isEmpty","EMPTY","RunModeService","setRunMode","mode","getRunMode","newData","validErrors","primaryFieldMetadata","tap","validateAll","validateContext","validateFromUtil","cb","pathObj","handleParent","loadFields","loadChild","loadLists","loadObjects","loadDynamicObjects","buildChanges","enableTimeZone","ngDynamics","initialize","initializeNormalField","initializeList","initializeObject","initializeDynamic","createEntityFromJsonData","ngList","objectData","ngDynamicObjects","loadDynamicData","originDataField","originalDataFieldType","isEmptyMultiLangPropValue","isValidating","onUpdate","compatible","DynamicEntity","initializeDynamicField","path_1","dynamicEntity_1","createDynamicEntityFromJsonData","parentModification","SchemaEntityField$Type","SchemaEntityFieldType$Type","SchemaEntityFieldTypeName","ENTITY_DATA_SERVICE_TOKEN","getFieldValue","schemaField","multiLanguage","setFieldValue","getComplexFieldValue","innerEntities","setComplexFieldValue","ComplexField","complexFieldInstance","objectPropertyValue","changeInfo","isInitializing","schemaEntity","setEntities","isFieldValueChanged","emitFieldValueChange","Schema","SchemaEntity","SchemaEntityType","SchemaEntityField","SchemaEntityFieldType","SchemaEntityFieldEditor","EntityTypeFactory","schema","schemaType","createClass","attachEntityInstanceData","createEntityInstanceDataInitializer","ConcreteEntity","entityInstance","entityTypeConstructor","innerData","types","__prop__metadata__","entityTypePrototype","definePresetProperty","defineFieldsToPrototype","defineEntitiesToPrototype","prototypeObject","innerPrimaryProperty","parentEntityType","schemaEntityField","$type","SimpleField","defineSimpleFieldToPrototype","defineComplexFieldToPrototype","code","complexFieldType","entitMetadata","fieldData","complexFieldValue","subEntityName","includedEntityTypes","originalEntityDataArray","originalEntityData","concreteEntityInstance","RestfulService","uri","request","put","optionsWithBody","addBody","post","httpParams","buildParams","methodName","httpClient","HttpParams","HttpClient","NG_COMMAND_HANDLER","NG_COMMAND_HANDLER_EXTENDER","TaskNode","func","observable","Observable","VARIABLE_PARSERS","ParseUtil","getAppContext","getRootFrameContext","root","getFrameContextById","frameId","DataVariableParser","extractPaths","replaceValue","searchValue","dataVariables","DATA_PATTERN","dataVariable","pathMatches","parts","UIStateVariableParser","getUIState","uiStateVariables","UI_STATE_PATTERN","uiStateVariable","stateName","state","uiState","formatDate","year","month","day","StateMachineVariableParser","stateMachineVariables","STATE_MACHINE_PATTERN","sessionVariable","getPathObj","stateMachine","getTargetStateMachine","targetFrameContext","splitPath","CommandVariableParser","CommandContext","command","VariableParseService","eventParam","parseExpression","itemIndex","evaluate","parsedExpression","parsers","parser","VARIABLE_MATCHER","FrameIdVariableParser","variables","extractVariables","exp","getVariableValue","relativeFrameId","getFullFrameId","namespace","FORM_STATES_EXP","FORM_STATE_EXP","FormStateVariableParser","variableExpression","exprs","variable","formStates","EVENT_PARAMS_EXP","EVENT_PARAM_EXP","EventParamVariableParser","VARIABLE_PROVIDERS","provide","multi","useClass","TaskLink","canLink","to","TaskFlow","addNode","node","nodes","addNodes","insertNode","findNodeIndex","createNode","appendNode","addLink","link","createLink","links","addLinks","getNext","nextLink","taskFlow","TranslateToken","CommandHandler","variableParseService","parseService","schedule","lastTaskResult$","setTimeout","commandToExecute","paramsTransform","transParamTypes","paramDescriptions","initContext","context$","BehaviorSubject","currentTask","concatMap","latestResult","throwIfEmpty","takeLast","displayError","pArray","ele","$1","$2","addTask","insertTask","afterTask","replaceTask","invoke","serviceInstance","setContextToServiceInstance","parsedArgs","serviceContext","parType","numResult","boolResult","strValue","toLowerCase","COMMAND_HANDLERS_TOKEN","CommandHandlerRegistry","commandName","commandHandler","handlerMap","regist","handlerMetadata","handlers","handler","CommandHandlerExtender","COMMAND_HANDLER_EXTENDERS_TOKEN","CommandHandlerExtenderRegistry","extendersMap","extender","extenderMetadata","extenders","NG_COMPONENT_STATE","NgParam","UIStateMetadataUtil","getUIFields","UIState","_init","uiFields","initializeUIField","uiStates","uiFieldMetadata","uiField","isExistProperty","paramTypeTransform","ngParams","ngParam","dataType","originalDataType","setPropertyValue","PARAM_TYPE_TRANSFORM_TOKEN","State","StateMachineContext","initialState","stateMachineEvent","transitTo","nextState","states","render","targetType","parseSourceValue","ListenUIStateChange","getData","ListenEntityChange","StateMachineEvent","UI_STATE_PATTERN_1","DATA_PATTERN_1","getFrameField","frameField","frameContextMap","uiFieldList","dataFrameContextMap","dataFieldList","isAccordingValue","arr","StateMachine","effectHandlers","transit","perform","statemachine","preconditons","stateMachineMetadata","collectionMetadata","buildStateMachine","renderStates","actions","propsMetadatas","buildNgState","renderStateName","buildNgRenderState","actionName","buildNgAction","ngState","ngRenderState","renders","ngAction","precondition","stateRender","stateChange","isStateInited","NgState","NgRenderState","NgAction","action","NG_COMMAND","NgCommand","ViewModel","expressionManager","expressionResult","setMetadata","bindingTo","viewModelCode","buildCommands","entityValueChangingListeners","entityValueChangedListeners","plainPath","change_1","changed","commands","valueChangeSuccess_1","initListeners","ngCommands","keybindingMap","ngCommand","keyBinding","targetContext","commandBus","dispatch","extractPath","bindingBasePath","valueChangingListeners_1","valueChangedListeners_1","bindToParent","verifycationChanged","verifyInformations","wfConf","source","Context","getParam","setParam","BindingDataManager","getBindingDataMap","bindingDataMap","getBindingDataByName","regBindingData","unRegisteBindingData","ifBindingDataExits","RepositoryManager","regRepository","repositoryMap","unRegisteRepository","getRepositoryMap","getRepositories","getRepositoryByName","ifRepositoryExits","FrameComponentRefresher","refreshComponents","frameComponentMap","component","onFormLoad","regFrameComponent","unregFrameContext","ChangeDetectionController","reattach","frameContexts","frameComponent","detectChanges","detach","AppContextManager","registerAppContext","appContextSet","unregisterAppContext","getAppContexts","ComponentManager","componentRefs","getComponentsByFrameId","FORM_ID","MessageManager","getMessager","listner","callbackfn","addEventListener","sender","send","win","postMessage","setAppContext","curAppContext","MessageData","MessageBody","VALIDATION_HANDLER","DomService","getElementByBinding","contents","bindingFieldId","contents_1","contents_1_1","childControls","FormContent","FormContentForDB","Id","Code","Name","Contents","FormMetadaDataDom","FormModule","FormOptions","SchemaService","getFieldsByIds","fieldIds","specifiedFieldsMap","entityPath","bindTo","getEntityFields","fieldsMap_1","flattenFields","fieldId","fieldsMap","fields_1","fields_1_1","splitIndex","entities_1","entities_1_1","ContextMetadataBuilder","buildAppContextMetadata","formMetadataContent","module","identify","buildStataMachineMetadata","buildUiStateMetadata","buildViewContextMetadata","controllers","buildCommand","commandHandlers","buildCommandHandlers","commandHandlerExtends","buildFormMetadata","buildFormControlMetadata","commandMetadataArray","previousValue","commandMetadata","previousCommand","enableValidation","formFields","formFieldIds","formField","formFieldsMap","domService","domElements","matchedElement","title","renderState","renderStateMetadata","renderFunction","buildRenderFunction","actionMetadata","renderFunctionString","previousFunctionString","conditionTarget","conditionSource","functionString","lBracket","rBracket","relation","toLocaleLowerCase","commandReference","controllerId","cmpId","controller","methods","handlerName","previousMethodValue","methodParam","DynamicCommandHandler","ViewModelManager","getViewModelMap","viewModelMap","getViewModelByName","register","exsit","ContextMetadataManager","getContextMetadataMap","contextMetadataMap","getContextMetadataByName","contextMetadata","FRAME_ID","NAMESPACE","FRAME_COMPONENT_INIT_HANDLER_TOKEN","AppContext","getFrameContextMap","initializeByMetadata","contextMetadataBuilder","registerToManager","appContextManager","unregisterFromManager","repositoryName","repositoryManager","bindingDataManager","regFrameContext","regContextMetadata","componentId","contextMetadataManager","getFormAppContext","destory","isFormDestoryed","applicationId","appId","token","registerCommandHandler","frameComponentRefresher","refresh","getContextById","getAllFrameContexts","handleSelectChange","srcFrameContext","initMessageEvent","resultTask_1","messager_1","allFrameContext","validation","InjectFlags","findHandler","retMsg","contextMap","temp","vm","buildRenderViewContext","viewModels","formModule","viewmodels","viewComponents","components","schemas","matchedComponent","matchedViewModel","parentViewModel","parentComponent","buildRenderViewContextRecursively","subViewModels","subViewModel","getComponentProviders","useValue","FrameContext","SkipSelf","useIsoluteEventBus","formId","ApplicationId","Token","FrameContextManager","changeDetectionController","messagePipe","componentManager","opened","router","Router","viewModelManager","existedFrameContext","frameContextSet","getFrameContextsByNamespace","getFrameContextFromAllAppContexts","EventBusProxy","eventName","eventBus","hostType","eventTokenValueProvider","EventTypeEnum","NG_DECLARATION","Declaration","bindDeclaration","initWithDeclarations","ngDeclarations","ngPublicEventProps","getNgPublicEvent","ngExportEvent","emitter","tokenValue","eventArgs","eventType","eventSender","currentContext","eventId","ROUTE","getParentContext","parentAppContext","NG_SUBSCRIPTION","ParamMap","EventPipeType","Subscription","bindSubscription","initWithSubscriptions","ngEvents","ngEventHandlerProps","getNgEvents","eventPipes","ngImportEvent","receiver","paramMapCollection","eventPipe","on","subscriptionHandler","eventHandler","currentFrameContext","paramMap2UiState","destContext","setUiStateProperty","targetFrameContextId","EventPipe","eventData","eventSubject","subscriptionInMap","subscriptionMap","subscription","lastEventId","isInSampeScope","subscribeOnce","caller","onceSubscriptionMap","unSubscribe","subscriber","unSubscribeForOnce","_c","matchEmitterToken","examByTargetToken","dispose","parentEventPipeList","location_1","disposeByCaller","eventPipeType","Parsing","senderAppContext","receiverAppContext","isoluteEventBus","Compile","EventBus","getProxy","ownerType","ownerName","proxyMap","emitterType","eventPipeList","eventMap","Type","eventPipeList_1","eventPipeList_1_1","getEventPipe","once","requestFor","requestName","requestValue","success","fail","findExistEventPipe","response","status","responseOn","responseSubject","requestObj","eventPipeList_2","eventPipeList_2_1","EventCache","setToken","tokens","getToken","Expression","ExpressionBindingType","ExpressionType","EventType","EventSource","MessageType","EffectPath","EXCEPTION_HANDLER","UserSettingsToken","MESSAGE","zh-CHS","require","dataPicking","en","zh-CHT","DEPENDENCY_SPLITER","FORM_MANIFEST_SERVICE_TOKEN","FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN","ExpressionRegistry","formExpressionManifestService","switchMap","describe","expressions","expressionObject","ns","bindingType","messageType","Required","Validate","DataPicking","getExpressionMessage","_expressions","cleanSpecialCharacters","catchError","getExpressionById","expressionType","replacer","replaceAll","originalValue","search","LISTENER_TOKEN","ChangeListener","subject","findEntityPaths","ExpressionExecutor","compile","expressionContext","buildContext","factory","expression_1","ExpressionEngineExpression","ExpressionEngine","ExpressionContext","ExpressionResult","ExpressionManager","rowData","expressionRegistry","customContext","Readonly","Visible","onDataPicking","configs","warning","notifyService","hideTitle","resolveService","groupDependencies","entityContext","buildEntityContext","stateContext","buildStateContext","contexts","entityOriginalNodeCode","bignumber_js","CurrentLanguage","expressionExecutor","executeAsync","isGroupdMainEntity","isEntityDependency","getEntity","collection","childrenEntityPaths","row","parentRow","getPropertyValue","entity_1","fullPaths_1","__items__","rootFrameContext","getVirtualRootFrameContext","uiState_1","getOwnPropertyNames","messageService","ExpressionResultFactory","registeEvent","expressionObjects","ASSIGNER_TOKEN","EVENT_HANDLER_TOKEN","UIStateChangeListener","buildEventPath","registerEvent","RepositoryChangeListener","convertEventType","Field","event","ListenerRegistry","BindingDataChangeListener","Listeners","registry","listener","onEvent","ExpressionEventEmitter","attach","events","observers","EFFECTOR_TOKEN","RepositoryEffector","effect","rowId","UIStateEffector","ReadonlyEffector","DependencyEffector","EffectorRegistry","effectors","RelativeEffector","ValidateEffector","domInfo","getDomInfoByEntityPath","isGridComponent","buildFormErrors","currentErrors","frameContexts_1","frameContexts_1_1","keys_1","keys_1_1","bindings","dgColumnNames","dgColumnInfo","array","getVerifyInformations","buildVerifyInformations","targetField","removeValidateVerifyInformations","RequiredEffector","pathValue","updateColumnValidators","datagridColumns","isValidValue","datagrid","updateColumn","columns","columnsChanged","getDataPropInfo","VisibleEffector","datagridComponent","getTablePaths","getDatagridComponent","fieldPaths","getPropertyPaths","showColumn","hideColumn","matchedFrameContexts","componentsMap","tablePaths","EffectorFactory","getEffector","nsEffectors","effectorRegistry","effector","Compute","Dependency","Relative","EventHandler","handleEvent","effectTo","effectorFactory","effectPaths","effectOptions","isValidateOrRequiredExpression","getEntityPathFromEvent","buildEntityPath","cleanEventPath","getEventId","tableCode","propertyIndex","idIndex","expressionBindingType","object_1","v1","v2","userAssignCurrentRow","row_1","entityCode","buildEffectPath","expressionPaths","currentPaths","propertyInfo","getPathInfo","propertyNames","getTablePathsFromEventPaths","getPropertyPathsFromEventPaths","analysis","expressionPathInfo","eventPaths","eventPathInfo","expressionTablePaths","expressionPropertyNames","eventTablePaths","eventPropertyNames","distance","eventFromChildren","eventFromParent","isSameTable","buildCurrentRows","fullPaths","convertBooleanTypeExpressionResult","isBooleanTypeExpression","isReadonlyExpression","isVisibleExpression","isValidateExpression","isRequiredExpression","isDependencyExpression","EntityValueChangedEventHandler","getCurrentRowByEvent","EffectorManager","StateValueChangedEventHandler","changePaths","eventPath","effectRows","output","prevPaths","currentCurrentRows","flag_1","nextPrevPaths_1","nextBindingPaths","RepositoryAddEntityEventHandler","RepositoryRemoveEntityEventHandler","RepositoryLoadEventHandler","EntityUpdateEventHandler","depPathInfo","eventEntityPath","childrenPaths","BindingDataAppendObjectEventHandler","groupExpressions","dependPathInfo","eventTablePaths_1","relativeExpressions","propertyPaths_1","prevPaths_1","BindingDataValueChangeEventHandler","eventEntityPaths","list_1","list_1_1","BindingDataRemoveObjectEventHandler","propertyPaths","BindingDataLoadEventHandler","BindingDataSelectionChangedEventHandler","EventHandlerRegistry","ExpressionEngineImpl","attachEvent","expressionEventEmitter","getEventHandler","resolveDependency","eventHandlerRegistry","bindingDataValueChangeEventHandler","entityValueChangedEventHandler","stateValueChangedEventHandler","repositoryAddEntityEventHandler","bindingDataAppendEntityEventHandler","repositoryRemoveEntityEventHandler","bindingDataRemoveObjectEventHandler","entityUpdateEventHandler","repositoryLoadEventHandler","bindingDataLoadEventHandler","bindingDataSelectionChangedHandler","bindInjector","componentInjector","initializeBindingData","initializeStateMachine","initializeUiState","initializeForm","initializeCommandBus","initializeViewModel","registerExceptionHandler","initExpression","expressionEngineImpl","location","href","exceptionHandler","applicationContext","isRootFrameContext","isExceptionHandlerExist","setContext","isDestoried","__frame_context__","handle","getFrameId","initializeRepository","handlerRegistry","extendsRegistry","commandHandlerFactory","CommandHandlerFactory","CommandBus","regViewModel","isRunAtHighSpeedMode","repositoryBindingData","routerParams","parentContext","childViewModels","viewModelName","name_1","nameToken","charAt","toLocaleUpperCase","destroy","formFrameContext","getViewModel","renderAppContext","attachViewComponent","viewComponent","actionPath","$event","actionBindingPath","bindingViewModel","alert","defaultViewModel","FrameComponent","ngOnInit","initialized","cd","getChangeDetectorRef","initPublicEvent","initSubscription","restComponent","onFrameComponentInit","frameComponentInitHandlers","onComponentInit","ChangeDetectorRef","isCdValid","ngOnDestroy","getSubscription","declaration","getDeclaration","trigger","executingCommandCount$","executingCommandCount","innerTrigger","FrameEvent","FrameEventBus","frameIds","off","rawHandler","extenderRegistry","extend","commandResult$","executeCommand","lastTaskResult","removeCommandFromExecutingQueue","is401Error","addCommandToExecutingQueue","handlerFactory","executingCommands","postOrNot","executingCommand","COMMAND_PROVIDERS","dynamicInvoke","serviceTocken","dynamicInvoke2","methodObject","serviceUri","serviceName","service","stageParam","result$","System","import","serviceModule","resolvedReflectiveProviders","loadProvidersFromModule","reflectiveInjector","ReflectiveInjector","fromResolvedProviders","originalContextInjector_1","serviceMethodResult","isObservable","scheduleStages","stages","initialStage","preStage","currentStage","forkStage","providerArray","isInjectableService","providerName","hasInjectableDecorator","isFunction","injectableDecorators","decorator","__annotations__","decoratorFactory","FARRIS_DEVKIT_APP_PROVIDERS","FARRIS_DEVKIT_MODULE_PROVIDERS","FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS","FARRIS_DEVKIT_FRAME_PROVIDERS","DevkitModule","NgModule","providers","DeprecatedBindingDataChangeListener","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","parameters","NgEntity","NgRepository","encodeUrl","encodeURI","NgCommandHandler","NgCommandHandlerExtender","NgBindingData","NgValidateForm","NgDeclaration","NgSubscription","getNgSubscriptionDecoratorFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Type } from '@angular/core';\r\n\r\n/**\r\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * @ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n *\r\n */\r\nexport interface TypeDecorator {\r\n    /**\r\n     * Invoke as ES7 decorator.\r\n     */\r\n    <T extends Type<any>>(type: T): T;\r\n\r\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\r\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\r\n    // so we cannot declare this interface as a subtype.\r\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\r\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\r\n}\r\n\r\nexport const ANNOTATIONS = '__annotations__';\r\nexport const PARAMETERS = '__parameters__';\r\nexport const PROP_METADATA = '__prop__metadata__';\r\n\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nexport function makeDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\r\n    chainFn?: (fn: Function) => void,\r\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\r\n        new(...args: any[]): any;\r\n        (...args: any[]): any;\r\n        (...args: any[]): (cls: any) => any;\r\n    } {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, ...args);\r\n            return this;\r\n        }\r\n\r\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\r\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\r\n            typeFn && typeFn(cls, ...args);\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (cls as any)[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn) { chainFn(typeDecorator); }\r\n        return typeDecorator;\r\n    }\r\n\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\r\n    return DecoratorFactory as any;\r\n}\r\n\r\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\r\n    return function ctor(...args: any[]) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            // tslint:disable-next-line:forin\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function makeParamDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\r\n\r\n        (<any>ParamDecorator).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n\r\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (cls as any)[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n\r\nexport function makePropDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function PropDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n\r\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        return function PropDecorator(target: any, name: string) {\r\n            const constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (constructor as any)[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\r\nimport { Translate } from '../../i18n';\r\n//import { Cacheable, DefaultCacheProvider } from '../../cache';\r\n\r\n/**\r\n * 元数据解析\r\n * 约束：\r\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\r\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\r\n */\r\nclass MetadataUtil {\r\n\r\n  // ----------------------------------------\r\n  // 类型元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取类元数据\r\n   * 返回结果形如：\r\n   * [\r\n   *   Injectable\r\n   *   NgViewModel\r\n   *   NgViewModel\r\n   * ]\r\n   */\r\n  static getClassMetadatas(constructor: any): any[] {\r\n    const metadatas = constructor[ANNOTATIONS];\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个class上的某种装饰器\r\n   * 返回结果：NgViewModel\r\n   */\r\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\r\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\r\n    return metadata;\r\n  }\r\n\r\n  static getClassMetadataByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): any {\r\n    const allClassMetadatas = this.getClassMetadatas(constructor);\r\n    if (!allClassMetadatas) {\r\n      return null;\r\n    }\r\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\r\n      return classMetadata.ngMetadataName === metadataName;\r\n    });\r\n    this.translateMetadataByName(metadata, translateService, keysToTranslate);\r\n    return metadata;\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // 属性元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取所有属性的所有元数据\r\n   * 返回格式：\r\n   * {\r\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\r\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   * }\r\n   */\r\n   // @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPropsMetadatas(constructor: any): any {\r\n    const allPropMetadatas = constructor[PROP_METADATA];\r\n    return allPropMetadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取所有属性的某一类型的元数据\r\n   * 如果同一属性\r\n   * 返回结果：\r\n   * {\r\n   *    propName1: NgDefaultValue,\r\n   *    propName2: NgDefaultValue\r\n   * }\r\n   */\r\n  // @Cache({ provider: new MemoryCacheProvider(new MetadataKeyCompare()), key: ((context: any, args: any[]) => { return { constructor: args[0], metadataName: args[1] } }) })\r\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\r\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\r\n    return metadatas;\r\n  }\r\n  static getPropsMetadatasByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\r\n    const metadatas = {};\r\n    // 读取构造函数中存储的类属性注解。\r\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\r\n    if (!allPropMetadatas) {\r\n      return metadatas;\r\n    }\r\n    // 遍历所有属性提取注解信息。\r\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\r\n      // 提取当前属性注解对象\r\n      const propMetadatas: any[] = allPropMetadatas[propName];\r\n      // 提取指定类型的注解项\r\n      const metadata = propMetadatas.find((propMetadata: any) => {\r\n        return propMetadata.ngMetadataName === metadataName;\r\n      });\r\n      if (metadata) {\r\n        metadatas[propName] = metadata;\r\n      }\r\n    });\r\n    // 翻译指定属性的值\r\n    this.translateMetadatasByName(metadatas, translateService, keysToTranslate);\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadatasByName(metadatas: any, translateService?: Translate, keysToTranslate?: string[])\r\n    : { [propName: string]: any } {\r\n    Object.keys(metadatas).forEach((propName: string) => {\r\n      // 提取指定类型的注解项\r\n      this.translateMetadataByName(metadatas[propName], translateService, keysToTranslate);\r\n    });\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadataByName(metadata: any, translateService?: Translate, keysToTranslate?: string[]): any {\r\n    if (metadata && translateService && keysToTranslate) {\r\n      keysToTranslate.forEach((metadataPropKey) => {\r\n        const propertyVariable: string = metadata[metadataPropKey];\r\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n        }\r\n      });\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的所有元数据\r\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   */\r\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的某种元数据\r\n   * 返回格式：NgDefaultValue\r\n   */\r\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n\r\n  // ----------------------------------------\r\n  // 参数元数据\r\n  // ----------------------------------------\r\n\r\n}\r\n\r\nexport { MetadataUtil };\r\n","/**\r\n * 变更记录\r\n */\r\nexport class Modification {\r\n\r\n  /**\r\n   * 实体变更路径。如：[1, 'name']\r\n   * 说明： 1 为实体主键ID， name 为属性名称\r\n   */\r\n  path?: string[];\r\n\r\n  /**\r\n   * 原值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 变更后的新值\r\n   *\r\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\r\n   * - Add: value的值为json 对象\r\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\r\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\r\n   *\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ModifyType;\r\n\r\n  /**\r\n   * 数据是否通过验证\r\n   */\r\n  isValid?: boolean;\r\n\r\n  /**\r\n   * 数据验证结果\r\n   */\r\n  errors?: { [type: string]: string };\r\n\r\n  /**\r\n   * 插入位置\r\n   */\r\n  position?: 1 | -1;\r\n\r\n  /**\r\n   * 变更集的值\r\n   */\r\n  changeSetValue?: any;\r\n  /**\r\n   * 重置数据\r\n   */\r\n  isReset?: boolean;\r\n  entityCreate?: boolean;\r\n  dynamic?: boolean;\r\n  /**\r\n   * 构造函数\r\n   * @param value 新值\r\n   * @param modifyType 变更类型\r\n   * @param path 变更路径\r\n   * @param preValue 旧值\r\n   */\r\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any, position?: 1 | -1) {\r\n    this.type = modifyType;\r\n    this.value = value;\r\n    this.preValue = preValue;\r\n    this.path = path;\r\n    this.position = position;\r\n  }\r\n}\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport enum ModifyType {\r\n\r\n  /**\r\n   * 添加\r\n   */\r\n  Add = 'ADD',\r\n  /**\r\n   * 添加数据\r\n   */\r\n  AddData = 'AddData',\r\n  /**\r\n   * 克隆数据\r\n   */\r\n  Clone = 'CLONE',\r\n  /**\r\n   * 删除\r\n   */\r\n  Remove = 'REMOVE',\r\n  RemoveData = 'RemoveData',\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  ValueChange = 'VALUE_CHANGE',\r\n\r\n  /**\r\n   * 加载\r\n   */\r\n  Load = 'LOAD',\r\n\r\n  /**\r\n   * 未改变\r\n   */\r\n  UnChanged = 'UNCHANGED',\r\n\r\n  /**\r\n   * 分页信息变更\r\n   */\r\n  PaginationInfoChange = 'PAGINATION_INFO_CHANGE',\r\n\r\n  /**\r\n   * 插入\r\n   */\r\n  Insert = 'Insert',\r\n  /**\r\n   * 更新实体\r\n   */\r\n  Update = 'UPDATE'\r\n}\r\n","/*\r\n * @Author: Lucus, Witt\r\n * @Date: 2018-10-30 15:53:59\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-08 17:25:08\r\n */\r\n\r\nimport { Modification, ModifyType } from './types';\r\n\r\nfunction isEqual(value: any, other: any) {\r\n  return JSON.stringify(value) === JSON.stringify(other);\r\n}\r\n\r\n/**\r\n * 实体数据变更集\r\n */\r\nclass ChangeSet {\r\n\r\n  /**\r\n   * 变更集合\r\n   */\r\n  protected modifications: Modification[] = [];\r\n\r\n  /**\r\n   *  获取所有的变更记录\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.modifications;\r\n  }\r\n\r\n  /**\r\n   * 将变更集添加到集合中\r\n   * ### 使用示例\r\n   * ```\r\n   * const changeSet = new ChangeSet();\r\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\r\n   * changeSet.append(modify)\r\n   * ```\r\n   * @param changeItem 变更数据\r\n   */\r\n  public append(modification: Modification) {\r\n    switch (modification.type) {\r\n      case ModifyType.ValueChange:\r\n        this.appendValueChangeModification(modification);\r\n        break;\r\n      case ModifyType.Add:\r\n      case ModifyType.Insert:\r\n      case ModifyType.Clone:\r\n        this.appendAddModification(modification);\r\n        break;\r\n      case ModifyType.Remove:\r\n        this.appendRemoveModification(modification);\r\n        break;\r\n      case ModifyType.Load:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加值变化变更\r\n   */\r\n  private appendValueChangeModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findModifyItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\r\n      existedModification.value = value;\r\n    } else {\r\n      const existedAddModification = this.findNewAddItemsPath(modification.path);\r\n      if (existedAddModification) {\r\n\r\n        // @todo：\r\n        // 1、此处逻辑有问题，value是个字符串，不能直接assign；\r\n        // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\r\n        // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\r\n        existedAddModification.value = Object.assign({}, existedAddModification.value, value);\r\n      } else {\r\n\r\n        // 其他情况，新增一条ValueChange变更。\r\n        this.modifications.push(modification);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加新增变更\r\n   */\r\n  private appendAddModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findNewAddItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\r\n      existedModification.value = existedModification.value.concat(value);\r\n    } else {\r\n\r\n      // 2、如果没有，则新增一条Add变更。\r\n      this.modifications.push(modification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加删除变更\r\n   */\r\n  private appendRemoveModification(modification: Modification) {\r\n\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n\r\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\r\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\r\n    this.modifications.forEach((addModification: Modification) => {\r\n\r\n      // 只处理新增变更\r\n      if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {\r\n        return;\r\n      }\r\n\r\n      // @todo 只考虑主从结构，再深的层次暂不考虑\r\n      if (isEqual(addModification.path, path) === false) {\r\n        return;\r\n      }\r\n\r\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\r\n      addModification.value = addModification.value.filter((addDataItem: any) => {\r\n        return addDataItem[primaryKey] !== primaryKeyValue;\r\n      });\r\n    });\r\n\r\n    // 2、移除对应的修改变更\r\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\r\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\r\n      if (valueModification.type !== ModifyType.ValueChange) {\r\n        return true;\r\n      }\r\n      const valueChangePath = Array.from(valueModification.path);\r\n      valueChangePath.pop();\r\n\r\n      // 路径相同进行移除\r\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\r\n      return !isToRemove;\r\n    });\r\n\r\n    // 先删除下级删除变更，再插入\r\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\r\n    this.removeDescendantRemoveModifications(modification);\r\n    this.modifications.push(modification);\r\n  }\r\n\r\n  /**\r\n   * 清空变更集合\r\n   */\r\n  public clear() {\r\n    this.modifications = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据path获取Add类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findNewAddItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据path获取ValueChange类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findModifyItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除后代（包括自己）所有的删除变更\r\n   * @todo：临时做一个最小化修改\r\n   */\r\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\r\n\r\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\r\n\r\n    // 删除后代修改变更\r\n    this.modifications = this.modifications.filter((modification: Modification) => {\r\n      if (modification.type !== ModifyType.Remove) {\r\n        return true;\r\n      }\r\n      const descendantPathWithId = this.createRemovePathWithId(modification);\r\n      const isDescendant = this.isDescendantPath(parentPathWithId, descendantPathWithId);\r\n      return !isDescendant;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取删除路径的完整格式\r\n   * @summary\r\n   * 1、目前删除变更的路径标记到父集合；\r\n   * 2、为了方便比较，将被删除的数据id加入到路径中\r\n   */\r\n  private createRemovePathWithId(modification: Modification) {\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\r\n    return pathWithId;\r\n  }\r\n\r\n  /**\r\n   * 判断是否是后代节点路径\r\n   * @param parentPath 父节点路径\r\n   * @param descendantPath 后代节点\r\n   */\r\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\r\n    if (parentPath.length > descendantPath.length) {\r\n      return false;\r\n    }\r\n\r\n    let isDescendantPath = true;\r\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\r\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\r\n        isDescendantPath = false;\r\n        return;\r\n      }\r\n    });\r\n\r\n    return isDescendantPath;\r\n  }\r\n\r\n}\r\n\r\nexport { ChangeSet };\r\n\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { ClassType } from '../types';\r\nimport { ValidateRule } from '../validator/index';\r\n\r\nfunction isPlainObject(value): boolean {\r\n  if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\r\n    return false;\r\n  }\r\n  if (Object.getPrototypeOf(value) === null) {\r\n    return true;\r\n  }\r\n  let proto = value;\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n  return Object.getPrototypeOf(value) === proto;\r\n}\r\n\r\nexport interface NgProperty {\r\n\r\n  /**\r\n   * 数据字段名\r\n   * @summary\r\n   * 服务器端返回的数据中，该属性对应的key。\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称（请勿使用，待删除）\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 原始字段类型（请勿使用，待删除）\r\n   */\r\n  originalDataFieldType?: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type?: any;\r\n\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** 实体属性注解器名称 */\r\nexport const NG_FIELD = 'NgField';\r\n\r\n/** 实体属性元数据选项 */\r\nexport interface NgFieldProperty extends NgProperty {\r\n\r\n  /** 属性名称 */\r\n  property?: string;\r\n\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n\r\n  /** 原始字段类型 */\r\n  originalDataFieldType?: string;\r\n\r\n  /** 是否为主键 */\r\n  primary?: boolean;\r\n\r\n  /** 是否为外键 */\r\n  foreign?: boolean;\r\n\r\n  /** 默认值 */\r\n  defaultValue?: any;\r\n\r\n  /** 验证规则 */\r\n  validRules?: ValidateRule[];\r\n\r\n  /** 初始值，用于字段清空后 */\r\n  initValue?: any;\r\n\r\n  /** 启用多语录入 */\r\n  enableMultiLangInput?: boolean;\r\n  /**\r\n   * 启用时区\r\n   */\r\n  enableTimeZone?: boolean;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 实体属性注解器 */\r\nexport interface NgFieldPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgFieldProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgFieldProperty | string | ClassType): any;\r\n  (obj?: NgFieldProperty | string | boolean): any;\r\n  new(obj?: NgFieldProperty | string | boolean): any;\r\n}\r\n\r\nfunction makeNgFieldDecorator(options?: NgFieldProperty | string | boolean): any {\r\n  let metadata: NgFieldProperty = {\r\n    primary: false,\r\n    foreign: false\r\n  };\r\n\r\n  if (options) {\r\n    const paramType = typeof options;\r\n    switch (paramType) {\r\n      case 'boolean':\r\n        metadata.primary = Boolean(options);\r\n        break;\r\n      case 'string':\r\n        metadata.dataField = String(options);\r\n        break;\r\n      case 'object':\r\n        metadata = Object.assign(metadata, options);\r\n        break;\r\n    }\r\n  }\r\n  return metadata;\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n * }\r\n * ```\r\n */\r\nexport const NgField: NgFieldPropertyDecorator = makePropDecorator(NG_FIELD, makeNgFieldDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgList 注解器名称 */\r\nexport const NG_LIST = 'NgList';\r\n\r\n/**\r\n * 集合类型元数据选项\r\n */\r\nexport interface NgListProperty extends NgProperty {\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 实体类型 */\r\n  type?: any;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 集合类型注解器 */\r\nexport interface NgListPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgListProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgListProperty | string | ClassType): any;\r\n  new(obj: NgListProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgListDecorator(options: NgListProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n *      @NgList({\r\n *          dataField: 'roles',\r\n *          formType: Role\r\n *      })\r\n *      Roles: EntityList<Role>\r\n * }\r\n * ```\r\n */\r\nexport const NgList: NgListPropertyDecorator = makePropDecorator(NG_LIST, makeNgListDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgObject\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_OBJECT = 'NgObject';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgObjectProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /** 树分级类型 path|parent */\r\n  hierarchyType?: string;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgObjectPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgObjectProperty | string | ClassType): any;\r\n  new(obj: NgObjectProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgObjectDecorator(options: NgObjectProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgObject(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgObject: NgObjectPropertyDecorator = makePropDecorator(NG_OBJECT, makeNgObjectDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgDynamicProperty\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_Dynamic = 'NgDynamic';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgDynamicProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgDynamicPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgDynamicProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgDynamicProperty | string | ClassType): any;\r\n  new(obj: NgDynamicProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgDynamicDecorator(options: NgDynamicProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgDynamic: NgDynamicPropertyDecorator = makePropDecorator(NG_Dynamic, makeNgDynamicDecorator);\r\n","export type Type = (...args) => any;\r\nexport type TTL = number | Date;\r\nexport type Key = string | number | ICacheKey | ICacheKeyBuilder;\r\nexport interface ICacheKeyBuilder<T = any[], U = any> {\r\n  (context: U, args: T): any;\r\n}\r\nexport enum CacheReturnType {\r\n  Static = 1,\r\n  Promise\r\n}\r\nexport interface ICacheKey { }\r\nexport interface ICacheKeyCompare {\r\n  compare(key1: ICacheKey, key2: ICacheKey): boolean;\r\n}\r\nexport class CacheKeyCompare implements ICacheKeyCompare {\r\n  compare(key1: string | number, key2: string | number) {\r\n    return key1 === key2;\r\n  }\r\n}\r\nexport interface ICacheOptions<T> {\r\n  key?: Key;\r\n  // returnType?: CacheReturnType;\r\n  ttl?: TTL;\r\n  cacheKeyCompare?: ICacheKeyCompare;\r\n  provider: ICacheProvider<T>\r\n}\r\nexport interface ICacheObject<TValue> {\r\n  key: Key,\r\n  content: TValue,\r\n  ttl: TTL,\r\n  createAt: Date,\r\n  isExpired(): boolean;\r\n}\r\nexport interface ICacheProvider<TValue> {\r\n  has(key: Key): boolean;\r\n  length(): number;\r\n  set(value: ICacheObject<TValue>);\r\n  get(key: Key): ICacheObject<TValue>;\r\n  delete(key: Key);\r\n  clear();\r\n  keys(): IterableIterator<Key>;\r\n  values(): IterableIterator<ICacheObject<TValue>>;\r\n}\r\n","import { makeDecorator } from \"../../metadata/index\";\r\n\r\nexport const NG_ENTITY = 'NgEntity';\r\n\r\n/**\r\n * 实体描述\r\n */\r\nexport interface NgEntity{\r\n  /**\r\n   * 原始编号,对应schema中的code\r\n   */\r\n  originalCode: string;\r\n  /**\r\n   * 后端转换完之后的编号,对应schema中的label\r\n   */\r\n  nodeCode: string;\r\n}\r\n/**\r\n * 实体装饰器\r\n */\r\nexport interface NgEntityDecorator {\r\n  (obj?: NgEntity): any;\r\n  new(obj?: NgEntity): any;\r\n}\r\n/**\r\n * 实体装饰器\r\n * @param options options\r\n */\r\nexport function NgEntity(options: NgEntity){\r\n  const decoratorFactory = makeDecorator(NG_ENTITY, (obj: NgEntity) => obj);\r\n  return decoratorFactory(options);\r\n}","import { ICacheObject, Key, TTL } from \"../types\";\r\n\r\nexport class CacheObject<T> implements ICacheObject<T>{\r\n  public createAt: Date;\r\n  constructor(public key: Key, public content: T, public ttl: TTL) {\r\n    this.createAt = new Date();\r\n  }\r\n  public isExpired(): boolean {\r\n    if (typeof this.ttl === 'number') {\r\n      return Date.now().valueOf() > this.createAt.valueOf() + this.ttl;\r\n    } else {\r\n      return Date.now() > this.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { ICacheObject, ICacheOptions } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n/**\r\n * 缓存方法返回值\r\n * @param options ICacheOptions 缓存选项\r\n * @returns MethodDecorator\r\n */\r\nexport function Cacheable<T>(options?: ICacheOptions<T>): MethodDecorator {\r\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\r\n    if (descriptor === undefined) {\r\n      descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\r\n    }\r\n    const className = target.name || target && target.constructor && target.constructor.name;\r\n    const method = descriptor.value;\r\n    descriptor.value = function (...args: any[]) {\r\n      const ttl = options && options.ttl || 0;\r\n      const provider = options && options.provider;\r\n      if (!provider) {\r\n        throw new Error('cache provider is not defined.');\r\n      }\r\n      let key = options && options.key || undefined;\r\n      if (key && key instanceof Function) {\r\n        key = key(this, args);\r\n      }\r\n      let cacheKey = key;\r\n      if (!cacheKey) {\r\n        const argsString: string = JSON.stringify(args);\r\n        cacheKey = `${className}#${String(propertyKey)}#${argsString}`;\r\n      }\r\n      const cacheObject = provider.get(cacheKey);\r\n      if (!cacheObject || (ttl && cacheObject.isExpired() === true)) {\r\n        const result = method.apply(this, args);\r\n        const object: ICacheObject<T> = new CacheObject(cacheKey, result, ttl);\r\n        provider.set(object);\r\n        return result;\r\n      }\r\n\r\n      return cacheObject && cacheObject.content;\r\n    }\r\n    return descriptor;\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key, TTL } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n\r\nexport class CacheContainer<T>{\r\n  constructor(protected provider: ICacheProvider<T>) {\r\n    this.provider = provider;\r\n  }\r\n  public get(key: Key): T {\r\n    const cacheObject: ICacheObject<T> = this.provider.get(key);\r\n    if (!cacheObject) {\r\n      return undefined;\r\n    }\r\n    const isExpired = this.isCacheObjectExpired(cacheObject);\r\n    return isExpired ? undefined : cacheObject.content;\r\n  }\r\n  public set(key: Key, value: T, ttl?: TTL) {\r\n    const cacheObject: ICacheObject<T> = new CacheObject(key, value, ttl || 0);\r\n    this.provider.set(cacheObject);\r\n  }\r\n  private isCacheObjectExpired(cacheObject: ICacheObject<T>) {\r\n    if (typeof cacheObject.ttl === 'number') {\r\n      return Date.now().valueOf() > cacheObject.createAt.valueOf() + cacheObject.ttl;\r\n    } else {\r\n      return Date.now() > cacheObject.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { CacheKeyCompare, ICacheKeyCompare, ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\nexport class MemoryCacheProvider<T> implements ICacheProvider<T> {\r\n  protected store: Array<ICacheObject<T>>;\r\n  protected cacheKeyCompare: ICacheKeyCompare;\r\n\r\n  constructor(cacheKeyCompare?: ICacheKeyCompare) {\r\n    this.store = new Array<ICacheObject<T>>();\r\n    this.cacheKeyCompare = cacheKeyCompare || new CacheKeyCompare();\r\n  }\r\n  public has(key: Key): boolean {\r\n    if (this.store.length < 1) {\r\n      return false;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    return index !== -1;\r\n  }\r\n  public length(): number {\r\n    return this.store.length;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.store.push(value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    if (this.store.length < 1) {\r\n      return undefined;\r\n    }\r\n    return this.store.find((item: ICacheObject<T>) => this.cacheKeyCompare.compare(key, item.key));\r\n  }\r\n  public delete(key: Key) {\r\n    if (this.store.length < 1) {\r\n      return;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    this.store.splice(index, 1);\r\n  }\r\n  public clear() {\r\n    this.store.length = 0;\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.store.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.store.values();\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\n/**\r\n * 默认缓存\r\n * @description\r\n * 默认缓存使用Map作为缓存容器，存储速度快。但不支持自定义的key对比，对于简单类型的key使用值对比，对于引用类型的key，对比的是引用的地址。\r\n */\r\nexport class DefaultCacheProvider<T> implements ICacheProvider<T>{\r\n  private buffer: Map<any, ICacheObject<T>>;\r\n\r\n  constructor() {\r\n    this.buffer = new Map<any, ICacheObject<T>>();\r\n  }\r\n  public has(key: Key): boolean {\r\n    return this.buffer.has(key);\r\n  }\r\n  public length(): number {\r\n    return this.buffer.size;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.buffer.set(value.key, value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    return this.buffer.get(key);\r\n  }\r\n  public delete(key: Key) {\r\n    this.buffer.delete(key);\r\n  }\r\n  public clear() {\r\n    this.buffer.clear();\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.buffer.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.buffer.values();\r\n  }\r\n}","import { MetadataUtil } from '../../metadata/index';\r\nimport {\r\n  NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST, NgFieldProperty, NgObjectProperty, NgListProperty\r\n} from './field_decorator';\r\nimport { ValidateRule } from '../validator/types';\r\nimport { Cacheable, DefaultCacheProvider } from '../../cache';\r\n\r\n/**\r\n * 属性注解器通用方法\r\n */\r\nexport class FieldMetadataUtil {\r\n  /**\r\n   * 获取实体所有的简单属性元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getNgFields(target: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取某个简单属性的元数据\r\n   */\r\n  static getNgField(target: any, propName: string): NgFieldProperty {\r\n    const ngFields = this.getNgFields(target);\r\n    const ngField = ngFields[propName] as NgFieldProperty;\r\n    return ngField;\r\n  }\r\n\r\n  /**\r\n   * 获取实体属性在原始数据中的属性名\r\n   */\r\n  static getDataField(target: any, propName: string) {\r\n    const ngField = this.getNgField(target, propName);\r\n    return ngField.dataField || propName;\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgObject的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getNgObjects(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);\r\n  }\r\n\r\n  static getNgDynamic(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgList的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgListProperty}\r\n   */\r\n  @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getNgList(target: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取实体标注为主键的属性元数据\r\n   * @param target 实体类型\r\n   */\r\n  @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPrimaryFieldMetadata(target: any): NgFieldProperty | undefined {\r\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\r\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\r\n      return ngFieldObj[prop].primary;\r\n    });\r\n\r\n    if (primaryKey) {\r\n      const propMeta = ngFieldObj[primaryKey];\r\n      propMeta.property = primaryKey;\r\n      if (!propMeta.dataField) {\r\n        propMeta.dataField = primaryKey;\r\n      }\r\n\r\n      return propMeta;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 获取主键名称，没有主键时返回空字符串\r\n   */\r\n  @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\r\n    if (!primaryNgField) {\r\n      return '';\r\n    }\r\n    return primaryNgField.property;\r\n  }\r\n\r\n  // static udtMap = {};\r\n\r\n  /**\r\n   * 获取NgField 的验证规则元数据\r\n   * @param target 实体类Type\r\n   */\r\n   @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getValidationMetadata(target: any): { [key: string]: ValidateRule[] } {\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});\r\n    // let udtParentName = '';\r\n    // Object.keys(this.udtMap).forEach(key => {\r\n    //   // 当前实体是udt类型时\r\n    //   if (this.udtMap[key].type.name === target.name) {\r\n    //     // 找出当前udt实体的父级信息\r\n    //     udtParentName = key;\r\n    //   }\r\n    // });\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n    // let primaryId = '';\r\n    // let udtPrimaryId = '';\r\n    // 不进行验证的属性名\r\n    // const excludeIDs = [];\r\n    // 排除udt的主键\r\n    // Object.keys(fieldMetadatas).forEach(key => {\r\n    //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n    //     primaryId = fieldMetadatas[key].dataField;\r\n    //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';\r\n    //     excludeIDs.push(fieldMetadatas[key].dataField);\r\n    //   }\r\n    // });\r\n    Object.keys(fieldMetadatas).forEach(key => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n      // if (excludeIDs.indexOf(key) > -1) {\r\n      //   return;\r\n      // }\r\n      if (validRules && validRules.length) {\r\n        validRules.map(rule => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n  @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getValidationMetadataWithPath(object: any): { [key: string]: ValidateRule[] } {\r\n    const target = object.constructor;\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    const parentPaths = object.getPaths().path || [];\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n\r\n    Object.keys(fieldMetadatas).forEach(key => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n\r\n      if (validRules && validRules.length) {\r\n        const propertyPath = parentPaths.concat([]);\r\n        propertyPath.push(key);\r\n        const property = propertyPath.join('.');\r\n        validRules.map(rule => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n          rule['path'] = property;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n}\r\n","import { Type } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { Entity } from '../entity';\r\nimport { NgEntity, NG_ENTITY } from './entity_decorator';\r\n// import { NgProperty } from './ng_property';\r\n// import { NG_FIELD,   NgFieldProperty   } from './ng_field';\r\n// import { NG_OBJECT,  NgObjectProperty  } from './ng_object';\r\n// import { NG_Dynamic, NgDynamicProperty } from './ng_dynamic';\r\n// import { NG_LIST,    NgListProperty    } from './ng_list';\r\nimport {\r\n  NgProperty, NG_FIELD, NgFieldProperty, NG_OBJECT, NgObjectProperty,\r\n  NG_Dynamic, NgDynamicProperty, NG_LIST,    NgListProperty\r\n} from './field_decorator';\r\n\r\n/**\r\n * 实体元数据工具类\r\n */\r\nexport class EntityMetadataUtil {\r\n\r\n  /**\r\n   * 获取所有属性\r\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\r\n   */\r\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: NgProperty } {\r\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\r\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\r\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\r\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\r\n\r\n    return Object.assign({},\r\n      ngPlainProperties,   ngEntityProperties,\r\n      ngDynamicProperties, ngEntityListProperties\r\n    );\r\n  }\r\n  /**\r\n   * 获取实体元数据描述\r\n   */\r\n  static getNgEntityMatadata(entityType: any): NgEntity{\r\n    return MetadataUtil.getClassMetadataByNameWithTranslate(entityType,NG_ENTITY);\r\n  }\r\n  /**\r\n   * 获取NgField的属性元数据\r\n   */\r\n  static getNgFieldProperties(entityType: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取NgObject属性元数据\r\n   */\r\n  static getNgObjectProperties(entityType: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);\r\n  }\r\n\r\n  /**\r\n   * 获取NgDynamic属性元数据\r\n   */\r\n  static getNgDynamicProperties(entityType: any): { [propName: string]: NgDynamicProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取NgList属性元数据\r\n   */\r\n  static getNgListProperties(entityType: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取主键属性元数据\r\n   */\r\n  static getPrimaryKeyProperty(entityType: Type<Entity>): NgFieldProperty {\r\n    let primaryKeyProperty;\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        primaryKeyProperty = ngProperty;\r\n      }\r\n    });\r\n\r\n    return primaryKeyProperty;\r\n  }\r\n}\r\n","export const PARENT_PATH = '__PARENT_PATH__';\r\nexport const PARENT_CLASS = '__PARENT__';\r\n\r\nexport type ClassType<T = any> = new (...args: any[]) => T;\r\n\r\nexport interface Dynamic {\r\n  loadDynamicData(dynamicData: any): void;\r\n}\r\n","import { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  // const entity = new T(data);\r\n  const entity: any = EntityTypeCreator.create(T, data);\r\n  return entity;\r\n}\r\nexport function DynamicFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n","import { ModifyType } from \"../changeset\";\r\nimport { Entity } from \"./entity\";\r\nimport { DynamicFactory, EntityFactory } from \"./entity_factory\";\r\nimport { EntityList } from \"./entity_list\";\r\nimport { FieldMetadataUtil, NgDynamicProperty, NgFieldProperty, NgListProperty, NgObjectProperty } from \"./metadata\";\r\nimport { ClassType, PARENT_CLASS, PARENT_PATH } from \"./types\";\r\n\r\nexport class EntityTypeCreator {\r\n  private static buffer = new Map<any, any>();\r\n  public static create(constructor: Function, data: any): Entity {\r\n    const entityType = this.getType(constructor);\r\n    const entity = new entityType(data);\r\n    entity.constructor = constructor;\r\n    return entity;\r\n  }\r\n  // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })\r\n  public static createType(constructor: Function): ClassType<Entity> {\r\n    const entityType = class EntityType extends Entity {\r\n      constructor(data: any) {\r\n        super(data);\r\n      }\r\n    };\r\n    const entityPrototype = entityType.prototype;\r\n    this.extendProperties(constructor, entityPrototype);\r\n    return entityType;\r\n  }\r\n  private static extendProperties(constructor: Function, entityPrototype: Entity) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n    this.extendPlainProperty(entityPrototype, ngFields);\r\n    this.extendListProperty(entityPrototype, ngLists);\r\n    this.extendObjectProperty(entityPrototype, ngObjects);\r\n    this.extendDynamicProperty(entityPrototype, ngDynamic);\r\n  }\r\n\r\n  private static extendPlainProperty(entityPrototype: Entity, ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(function (propName) {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      // const dataField = ngField.dataField || propName;\r\n      Object.defineProperty(entityPrototype, propName, {\r\n        get: function () {\r\n          const value = this.getPropValue(propName, ngField);\r\n          return value;\r\n        },\r\n        set: function (newPropValue) {\r\n          // 值相同时不触发变更。\r\n          const oldPropValue = this.getPropValue(propName, ngField);\r\n          if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n            return;\r\n          }\r\n          this.setPropValue(propName, ngField, newPropValue);\r\n          const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n          this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendListProperty(entityPrototype: Entity, ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(function (propertyName) {\r\n      const key = `__${propertyName}__`;\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let entityList = this[key];\r\n          if (!entityList) {\r\n            const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n            const path = this.createPath(propertyName);\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const val = this.data[dataField];\r\n            entityList = new EntityList<typeof fieldMetadata.type>();\r\n            entityList[PARENT_CLASS] = this;\r\n            entityList[PARENT_PATH] = path;\r\n            if (val) {\r\n              const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n              entityList.loadEntities(entities);\r\n            }\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                this.setChanges(value);\r\n              }\r\n            });\r\n            this[key] = entityList;\r\n          }\r\n          return entityList;\r\n        },\r\n        set: function (value) {\r\n          this[key] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendObjectProperty(entityPrototype: Entity, ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const key = `__${propertyName}__`;\r\n      // 如果没有值用一个空对象代替\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let childEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!childEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            // val不存在时，用空对象代替\r\n            const val = this.data[dataField] || {};\r\n            childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);\r\n            this[key] = childEntity;\r\n          }\r\n          return childEntity;\r\n        },\r\n        set: function (value: any) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          const childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);\r\n          this[key] = childEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendDynamicProperty(entityPrototype: Entity, ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const key = `__${propertyName}__`;\r\n      \r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let dynamicEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!dynamicEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const originalData = this.data[dataField] || {};\r\n            dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);\r\n            this[key] = dynamicEntity;\r\n          }\r\n          return dynamicEntity;\r\n        },\r\n        set: function (value) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          let dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);\r\n          this[key] = dynamicEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static getType(constructor: Function) {\r\n    if (this.buffer.has(constructor)) {\r\n      return this.buffer.get(constructor);\r\n    }\r\n    const entityType = this.createType(constructor);\r\n    this.buffer.set(constructor, entityType);\r\n    return entityType;\r\n  }\r\n  private static buildEntity(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = EntityFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        parent.setChanges(changes);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n  private static buildDynamic(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = DynamicFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        parent.setChanges(changes);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n}","import { Type } from '@angular/core';\r\nimport { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\n/**\r\n * 创建实体\r\n * @param entityType 实体类型\r\n * @param entityData 实体数据\r\n */\r\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\r\n  const entity: any = EntityTypeCreator.create(entityType, entityData);//new entityType(entityData);\r\n  entity.constructor = entityType;\r\n  return entity;\r\n}\r\n\r\n/**\r\n * 批量创建实体\r\n * @param entityType     实体类型\r\n * @param entityListData 实体数据数组\r\n */\r\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\r\n  const entities: T[] = [];\r\n  entityListData.forEach((entityData: any) => {\r\n    const entity = createEntity<T>(entityType, entityData);\r\n    entities.push(entity);\r\n  });\r\n  return entities;\r\n}\r\n\r\n/**\r\n * 已弃用：请使用createEntity方法代替。\r\n */\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n\r\n\r\n\r\n","const validationMessage = {};\r\n\r\n/**\r\n * 验证类型定义\r\n */\r\nexport class ValidationTypes {\r\n  static CURRENT_LANGUAGE = 'zh-CNS';\r\n\r\n  /**\r\n   * 条件验证表达式\r\n   */\r\n  static CUSTOM_VALIDATION = `customValidation`;\r\n\r\n  /**\r\n   * 必填\r\n   */\r\n  static REQUIRED = 'required';\r\n\r\n  /**\r\n   * 比较值是否相同\r\n   */\r\n  static EQUALS = 'equals';\r\n\r\n  /**\r\n   * 比较值是否不相同\r\n   */\r\n  static NOT_EQUALS = 'notEquals';\r\n\r\n  /**\r\n   * 数字\r\n   */\r\n  static IS_NUMBER = 'isNumber';\r\n\r\n  /**\r\n   * 整数\r\n   */\r\n  static IS_INT = 'isInt';\r\n\r\n  /**\r\n   * 浮点数\r\n   */\r\n  static IS_FLOAT = 'isFloat';\r\n\r\n  /**\r\n   * 字符串\r\n   */\r\n  static IS_STRING = 'isString';\r\n\r\n  /**\r\n   * 布尔值\r\n   */\r\n  static IS_BOOLEAN = 'isBoolean';\r\n\r\n  /**\r\n   * 日期\r\n   */\r\n  static IS_DATE = 'isDate';\r\n\r\n  /**\r\n   * 日期字符串\r\n   */\r\n  static IS_DATE_STRING = 'isDateString';\r\n\r\n  /**\r\n   * 布尔值字符串\r\n   */\r\n  static IS_BOOLEAN_STRING = 'isBooleanString';\r\n\r\n  /**\r\n   * 数字字符串\r\n   */\r\n  static IS_NUMBER_STRING = 'isNumberString';\r\n\r\n  /**\r\n   * 邮箱地址\r\n   */\r\n  static IS_EMAIL = 'isEmail';\r\n\r\n  /**\r\n   * JSON\r\n   */\r\n  static IS_JSON = 'isJSON';\r\n\r\n  /**\r\n   * 字符串小写\r\n   */\r\n  static IS_LOWERCASE = 'isLowercase';\r\n\r\n  /**\r\n   * 字符串大写\r\n   */\r\n  static IS_UPPERCASE = 'isUppercase';\r\n\r\n  /**\r\n   * 数字范围\r\n   */\r\n  static RANGE = 'range';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MIN = 'min';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MINVALUE = 'minValue';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAX = 'max';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAXVALUE = 'maxValue';\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  static LENGTH = 'length';\r\n\r\n  /**\r\n   * 字符串最大长度\r\n   */\r\n  static MAX_LENGTH = 'maxLength';\r\n\r\n  /**\r\n   * 字符串最小长度\r\n   */\r\n  static MIN_LENGTH = 'minLength';\r\n\r\n  /**\r\n   * 最小日期\r\n   */\r\n  static MIN_DATE = 'minDate';\r\n\r\n  /**\r\n   * 最大日期\r\n   */\r\n  static MAX_DATE = 'maxDate';\r\n\r\n  /**\r\n   * 排除非法字符\r\n   */\r\n  static EXCLUDE = 'exclude';\r\n\r\n  /**\r\n   * 正则表达式\r\n   */\r\n  static MATCHES = 'matches';\r\n\r\n  static FIELD_CONTAINER = 'fieldContainer';\r\n  /**\r\n   * 判断验证类型是否合法\r\n   * @param type 验证类型\r\n   */\r\n  static isValidType(type: string): boolean {\r\n    return (\r\n      type !== `isValidType` &&\r\n      type !== 'getMessage' &&\r\n      Object.keys(this)\r\n        .map(key => (this as any)[key])\r\n        .indexOf(type) !== -1\r\n    );\r\n  }\r\n  /**\r\n   * 获取指定验证类型的提示信息\r\n   * @param type 验证类型\r\n   * @returns 返回验证信息\r\n   */\r\n  static getMessage(type: string): string {\r\n    const messages = validationMessage[this.CURRENT_LANGUAGE] || validationMessage['zh-CHS'];\r\n    return messages[type] || '';\r\n  }\r\n\r\n  static setCurrentLanguage(language: string) {\r\n    this.CURRENT_LANGUAGE = language;\r\n  }\r\n}\r\n\r\nvalidationMessage['zh-CHS'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `请输入'$property'`,\r\n  equals: `'$property'的值与$constraint1不相等`,\r\n  notEquals: `'$property'的值不能与'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是数字`,\r\n  isInt: `'$property'的值不是整数`,\r\n  isFloat: `'$property'的值不是浮点型数字`,\r\n  isBoolean: `'$property'的值不是布尔值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `邮箱地址不正确`,\r\n  min: `'$property'的值不应小于$constraint1`,\r\n  minValue: `'$property'的值不应小于$constraint1`,\r\n  minDate: `'$property'的日期不应早于$constraint1`,\r\n  max: `'$property'的值不应大于$constraint1`,\r\n  maxValue: `'$property'的值不应大于$constraint1`,\r\n  maxDate: `'$property'不应晚于$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效布尔值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值应全部为小写字符串`,\r\n  isUppercase: `'$property'的值应全部为大写字符串`,\r\n  length: `'$property'的长度应介于$constraint1~$constraint2之间`,\r\n  range: `'$property'的值应介于$constraint1~$constraint2之间`,\r\n  maxLength: `'$property'的长度不得大于$constraint1`,\r\n  minLength: `'$property'的长度不得小于$constraint1`,\r\n  isNumberString: `'$property'的值不是数字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校验不通过`\r\n};\r\nvalidationMessage['en'] = {\r\n  fieldContainer: `$target row $value`,\r\n  required: `Please input '$property'`,\r\n  equals: `'$property' should equals '$constraint1'`,\r\n  notEquals: `'$property' should not equals '$constraint1'`,\r\n  isNumber: `'$property' should be number`,\r\n  isInt: `'$property' should be integer`,\r\n  isFloat: `'$property' should be float`,\r\n  isBoolean: `'$property' should be boolean`,\r\n  isDate: `'$property' should be date`,\r\n  isEmail: `'$property' should be e-mail address`,\r\n  min: `'$property' should not less than $constraint1`,\r\n  minValue: `'$property' should not less than $constraint1`,\r\n  minDate: `'$property' should not early than $constraint1`,\r\n  max: `'$property' should not bigger than $constraint1`,\r\n  maxValue: `'$property' should not bigger than $constraint1`,\r\n  maxDate: `'$property' should not late than $constraint1`,\r\n  isBooleanString: `'$property' should be boolean string`,\r\n  isDateString: `'$property' should be date string`,\r\n  isLowercase: `'$property' should be lowercase charactor`,\r\n  isUppercase: `'$property' should be uppercase charactor`,\r\n  length: `'$property' length should between $constraint1~$constraint2之间`,\r\n  range: `'$property' value should between $constraint1~$constraint2之间`,\r\n  maxLength: `'$property' should not longer than $constraint1`,\r\n  minLength: `'$property' should not shorter than $constraint1`,\r\n  isNumberString: `'$property' should be number string`,\r\n  exclude: `'$property' should not include $constraint1`,\r\n  matches: `'$property' calibration failed`\r\n};\r\nvalidationMessage['zh-CHT'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `請輸入'$property'`,\r\n  equals: `'$property'的值與$constraint1不相等`,\r\n  notEquals: `'$property'的值不能與'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是數字`,\r\n  isInt: `'$property'的值不是整數`,\r\n  isFloat: `'$property'的值不是浮點型數字`,\r\n  isBoolean: `'$property'的值不是佈爾值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `郵箱地址不正確`,\r\n  min: `'$property'的值不應小於$constraint1`,\r\n  minValue: `'$property'的值不應小於$constraint1`,\r\n  minDate: `'$property'的日期不應早於$constraint1`,\r\n  max: `'$property'的值不應大於$constraint1`,\r\n  maxValue: `'$property'的值不應大於$constraint1`,\r\n  maxDate: `'$property'不應晚於$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效佈爾值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值應全部爲小冩字符串`,\r\n  isUppercase: `'$property'的值應全部爲大冩字符串`,\r\n  length: `'$property'的長度應介於$constraint1~$constraint2之間`,\r\n  range: `'$property'的值應介於$constraint1~$constraint2之間`,\r\n  maxLength: `'$property'的長度不得大於$constraint1`,\r\n  minLength: `'$property'的長度不得小於$constraint1`,\r\n  isNumberString: `'$property'的值不是數字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校驗不通過`\r\n};\r\n","import { FrameContext } from \"../../frame/index\";\r\n\r\n/**\r\n * 验证错误信息\r\n */\r\nexport class ValidationError {\r\n  /**\r\n   * 所属实体对象\r\n   */\r\n  target?: any;\r\n\r\n  /**\r\n   * 验证实体属性名称\r\n   */\r\n  property: string;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  propertyName?: string;\r\n  /**\r\n   * 验证实体属性值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 验证失败的规则\r\n   * @summary {[formType-规则名称]: string - 验证信息 }\r\n   */\r\n  constraints: { [type: string]: string; };\r\n\r\n  /**\r\n   * 子对象验证错误信息集合\r\n   */\r\n  children: ValidationError[];\r\n\r\n  /**\r\n   * 待验证的对象是否为数组集合\r\n   */\r\n  isArray = false;\r\n\r\n  /**\r\n   * 待验证的对象所属集合中的索引\r\n   */\r\n  index = undefined;\r\n\r\n  /**\r\n   * 验证字段名\r\n   */\r\n  field: string;\r\n  /**\r\n   * 校验规则\r\n   */\r\n  rule: any;\r\n  /**\r\n   * 字段绑定路径\r\n   */\r\n  binding?: string;\r\n  frameContext?: FrameContext;\r\n  /**\r\n   * 错误对应字段的完整绑定路径\r\n   */\r\n  fullPath?: string;\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { Validator } from './validator';\r\nimport { ValidateRule } from './types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { EntityList } from '../entity_list';\r\nimport { FieldMetadataUtil, NgFieldProperty } from '../metadata/index';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 执行数据验证\r\n */\r\nexport class ValidationExecutor<T extends Entity> {\r\n\r\n  constructor(private validator: Validator<T>) { }\r\n\r\n  /** 异步验证请求集合 */\r\n  awaitingPromises: Promise<any>[] = [];\r\n  /**\r\n   * 将信息中的关键字替换为具体实体对象中的信息\r\n   * @param message 验证信息\r\n   * @param metadata 验证规则\r\n   * @param value 待验证的值\r\n   */\r\n  public static replaceMessageSpecialTokens(message: any, metadata: ValidateRule, value: any) {\r\n    let messageString: string;\r\n    if (message instanceof Function) {\r\n      messageString = (message as (args: ValidateRule) => string)(metadata);\r\n    } else if (typeof message === 'string') {\r\n      messageString = message as string;\r\n    }\r\n\r\n    if (messageString && metadata.constraints instanceof Array) {\r\n      metadata.constraints.forEach((constraint, index) => {\r\n        messageString = messageString.replace(new RegExp(`\\\\$constraint${index + 1}`, 'g'), constraint);\r\n      });\r\n    }\r\n\r\n    if (messageString && value !== undefined && value !== null) {\r\n      messageString = messageString.replace(/\\$value/g, value);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$property/g, metadata.property);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$target/g, metadata.targetName);\r\n    }\r\n\r\n    return messageString;\r\n  }\r\n\r\n  /**\r\n   * 验证实例对象\r\n   * @param object 验证实例对象\r\n   * @param newValue 实体将要更新的值\r\n   * @param validationErrors 验证信息集合\r\n   * @param propertyName 实例对象属性\r\n   * @param index 所属集合实例中索引\r\n   */\r\n  execute(object: T, newValue, validationErrors: ValidationError[], propertyName?: string, index?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    // if (!currentRowId) {\r\n    //   currentRowId = object.primaryValue;\r\n    // }\r\n    if (!externalRules && frameContext) {\r\n      externalRules = frameContext.form.getValidationRules();\r\n    }\r\n    // 提取实体上定义的验证描述\r\n    // 格式{key:[rule1,rule2]}\r\n    let validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);\r\n    const remainedExternalRules = new Map<string, ValidateRule[]>();\r\n\r\n    // 合并额外验证规则\r\n    if (externalRules) {\r\n      // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];\r\n      // if (parentPathArray.length > 1) {\r\n      //   parentPathArray[0] = '';\r\n      // }\r\n      const parentPathArray = [];\r\n      let objectCursor = object;\r\n      while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {\r\n        const cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';\r\n        // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {\r\n        parentPathArray.push(cursorParentPath);\r\n        // }\r\n        objectCursor = objectCursor['__PARENT__'];\r\n        if (objectCursor instanceof EntityList) {\r\n          objectCursor = objectCursor['__PARENT__'];\r\n        }\r\n      }\r\n      const parentPath = parentPathArray.reverse().join('/');\r\n\r\n      externalRules.forEach((rules, path) => {\r\n        if (path) {\r\n          // 提取额外验证规则字段路径\r\n          const pathArray = path.split('/');\r\n          // 提取字段名称\r\n          const fieldName = pathArray.pop();\r\n          // 提取字段父路径\r\n          const fieldParentPath = pathArray.join('/');\r\n          // 匹配外部验证规则和实体验证规则父路径\r\n          if (parentPath === fieldParentPath) {\r\n            validateMetadatas[fieldName] = [...(validateMetadatas[fieldName] || [])];\r\n            // 同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。\r\n            if (rules.length) {\r\n              let targetId = '';\r\n              rules.forEach(rule => {\r\n                if (rule.targetId && rule.targetId.length > targetId.length) {\r\n                  targetId = rule.targetId;\r\n                }\r\n                validateMetadatas[fieldName].push(rule);\r\n              });\r\n              validateMetadatas[fieldName].forEach((validateRule: ValidateRule) => {\r\n                validateRule.targetId = targetId;\r\n                validateRule.targetName = rules[0].targetName;\r\n                validateRule.property = rules[0].property;\r\n                if (rules[0].frameContext) {\r\n                  validateRule.frameContext = rules[0].frameContext;\r\n                }\r\n                validateRule.fullPath = rules[0].fullPath;\r\n                validateRule['initialized'] = true;\r\n              });\r\n            }\r\n          } else {\r\n            remainedExternalRules.set(path, rules);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 处理校验规则中的属性名称\r\n    if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {\r\n      Object.keys(validateMetadatas).forEach((fieldName: string) => {\r\n        const validateRules = validateMetadatas[fieldName];\r\n        if (validateRules && validateRules.length > 0) {\r\n          const firstValidateRule = validateRules[0];\r\n          const path = firstValidateRule['path'];\r\n          if (path) {\r\n            const bindingPaths = path.split('.');\r\n            const form = this.getForm(bindingPaths, frameContext);\r\n            const formControl = this.getFormControl(bindingPaths, frameContext);\r\n            if (formControl) {\r\n              validateRules.forEach((validateRule: ValidateRule) => {\r\n                if (validateRule['initialized'] !== true) {\r\n                  validateRule.targetId = formControl.id;\r\n                  validateRule.targetName = form && form.formGroupName;\r\n                  validateRule.property = formControl.name || formControl.defaultI18nValue || '';\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 过滤出当前验证属性的验证规则\r\n    if (propertyName) {\r\n      validateMetadatas = Object.keys(validateMetadatas)\r\n        .filter(key => key === propertyName)\r\n        .reduce((val, curr) => Object.assign({}, val, { [curr]: validateMetadatas[curr] }), {});\r\n    }\r\n    // validateMetadatas = {rule:当前属性的所有校验规则}\r\n    Object.keys(validateMetadatas).filter((key: string) =>\r\n      object && (\r\n        object.hasOwnProperty(key) ||\r\n        (\r\n          object.constructor.prototype &&\r\n          object.constructor.prototype.typeName &&\r\n          object.constructor.prototype.hasOwnProperty(key)\r\n        ) ||\r\n        object['__proto__'].hasOwnProperty(key)\r\n      )\r\n    ).forEach(key => {\r\n      // todo: 没用兼容value是undefined的情况\r\n      let value = newValue;\r\n      if (newValue === undefined) {\r\n        value = (object as any)[key];\r\n      }\r\n      let isMultLanguageField = false;\r\n      const multiLangFields = this.getMultiLanguageFields(object);\r\n      if (multiLangFields && multiLangFields.length > 0) {\r\n        if (multiLangFields.includes(key)) {\r\n          isMultLanguageField = true;\r\n        }\r\n      }\r\n      // const value = newValue || \r\n      const validateRules: ValidateRule[] = validateMetadatas[key];\r\n      if (validateRules.length) {\r\n        const fieldName = validateRules[0].property;\r\n        const field = validateRules[0].targetId;\r\n        const frameContext = validateRules[0].frameContext;\r\n        const fullPath = validateRules[0].fullPath;\r\n        // const fieldContainerName = Number.isInteger(index) ?\r\n        // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;\r\n        const fieldContainerName = Number.isInteger(index) ?\r\n          ValidationExecutor.replaceMessageSpecialTokens(\r\n            ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER),\r\n            validateRules[0], index + 1\r\n          ) : validateRules[0].targetName;\r\n        const validationDisplayName = fieldContainerName ? `${fieldContainerName} - ${fieldName}` : `${fieldName}`;\r\n        const property = validateRules['path'] || key;\r\n        const validationError = this.generateValidationError(object, value, property, validationDisplayName, index, field, frameContext, fullPath);\r\n        if (index !== undefined) {\r\n          validationError['index'] = index;\r\n        }\r\n        validationErrors.push(validationError);\r\n        this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);\r\n      }\r\n    });\r\n\r\n    this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);\r\n\r\n    this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);\r\n    // this.sortValidationErrors(validationErrors);\r\n\r\n    // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题\r\n    // if (!propertyName) {\r\n    //     this.objectValidations(object, validationErrors);\r\n    // }\r\n  }\r\n\r\n\r\n\r\n  private getMultiLanguageFields(entity: any) {\r\n    if (entity && entity.constructor) {\r\n      const ngFields = FieldMetadataUtil.getNgFields(entity.constructor);\r\n      return Object.keys(ngFields).filter((fieldName: string) => ngFields[fieldName].enableMultiLangInput);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 清除通过验证信息\r\n   * @param errors 验证失败信息\r\n   */\r\n  stripEmptyErrors(errors: ValidationError[]) {\r\n    return errors.filter(error => {\r\n      if (error.children) {\r\n        error.children = this.stripEmptyErrors(error.children);\r\n      }\r\n\r\n      if (Object.keys(error.constraints).length === 0) {\r\n        if (error.children.length === 0) {\r\n          return false;\r\n        } else {\r\n          delete error.constraints;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 生成未通过验证的对象\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param propertyName 待验证的实体属性名称\r\n   * @param index 验证数据索引\r\n   * @param field 待验证字段\r\n   */\r\n  private generateValidationError(object: any, value: any, property: string, propertyName?: string, index?: number, field?: string, frameContext?: FrameContext, fullPath?: string) {\r\n    const validationError = new ValidationError();\r\n\r\n    validationError.target = object;\r\n    validationError.value = value;\r\n\r\n    validationError.property = property;\r\n    validationError.propertyName = propertyName;\r\n    validationError.field = field;\r\n    validationError.index = index;\r\n    validationError.children = [];\r\n    validationError.constraints = {};\r\n    if (frameContext) {\r\n      validationError.frameContext = frameContext;\r\n    }\r\n    validationError.fullPath = fullPath;\r\n    return validationError;\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的属性\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param validateRules 验证规则\r\n   * @param errorMap 难证信息。{[key]: message}\r\n   *\r\n   * key: 验证规则名称\r\n   * message: 验证信息\r\n   */\r\n  private defaultValidations(object: T, value: any, validateRules: ValidateRule[], validationError: ValidationError, isMultLanguageField?: boolean, currentRowId?: string) {\r\n    const errorMap = validationError.constraints;\r\n    return validateRules\r\n      .filter(validateRule => {\r\n        // 验证实体属性是否符合规则\r\n        const validValue = this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);\r\n        if (validValue instanceof Promise) {\r\n          const promise = validValue.then(isValid => {\r\n            if (!isValid) {\r\n              const { type, messageString: message } = this.createValidationError(object, value, validateRule);\r\n              errorMap[type] = message;\r\n              validationError.rule = validateRule;\r\n            }\r\n          });\r\n          this.awaitingPromises.push(promise);\r\n        }\r\n        return !validValue;\r\n      })\r\n      .forEach(validateRule => {\r\n        // 不符合规则，生成错误信息\r\n        const { type: key, messageString: message } = this.createValidationError(object, value, validateRule);\r\n        errorMap[key] = message;\r\n        validationError.rule = validateRule;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 验证列表中的每条记录\r\n   * @param object 要验证的实体实例对象\r\n   * @param errors 验证失败的信息集合\r\n   * @param property 属性名称\r\n   * @param parentIndex 当前集合的父对象所属集合列表中的索引。\r\n   */\r\n  private listValidations(\r\n    object: any,\r\n    errors: ValidationError[],\r\n    property?: string,\r\n    parentIndex?: any,\r\n    externalRules?: Map<string, ValidateRule[]>,\r\n    frameContext?: FrameContext\r\n  ) {\r\n    const INDEX_LABEL = \"__ACTUAL_INDEX__\";\r\n    const listFields = FieldMetadataUtil.getNgList(object.constructor);\r\n    if (!listFields) {\r\n      return;\r\n    }\r\n    let keys = Object.keys(listFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = listFields[propertyName];\r\n      const clzType = metadata.type;\r\n      const value = object[propertyName] as EntityList<T>;\r\n      if (value) {\r\n        const parentPaths = object.getPaths().path || [];\r\n        parentPaths.push(propertyName);\r\n        const validationError = this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);\r\n        validationError.isArray = true;\r\n        errors.push(validationError);\r\n        value.items.forEach((entity, index) => {\r\n          let actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;\r\n          this.execute(entity, undefined, validationError.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的引用对象\r\n   * @param object 要验证的实体对象\r\n   * @param errors 错误信息集合\r\n   */\r\n  private objectValidations(object: T, errors: ValidationError[], property?: string, parentIndex?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    const objectFields = FieldMetadataUtil.getNgObjects(object.constructor);\r\n    if (!objectFields || Object.keys(objectFields).length < 1) {\r\n      return;\r\n    }\r\n\r\n    let keys = Object.keys(objectFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = objectFields[propertyName];\r\n      const objectType = metadata.type;\r\n      const value = object[propertyName];\r\n      if (value) {\r\n        this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建验证规则信息\r\n   * @param object 要验证的实体对象\r\n   * @param value 验证的值\r\n   * @param metadata 验证规则\r\n   */\r\n  private createValidationError(object: T, value: any, metadata: ValidateRule) {\r\n    const targetName = object.constructor ? (object.constructor as any).name : undefined;\r\n    const type = metadata.type;\r\n    let message = metadata.message;\r\n\r\n    if (!message) {\r\n      message = ValidationTypes.getMessage(type);\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {\r\n      if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {\r\n        // 获取日期类型的提示信息\r\n        const extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;\r\n        message = ValidationTypes.getMessage(extType);\r\n        /*if (metadata.constraints[0]) {\r\n          metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');\r\n        }*/\r\n      }\r\n    }\r\n\r\n    const messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);\r\n    return { type, messageString, metadata };\r\n  }\r\n  private getFrameContext(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    paths.pop();\r\n    const bindingPath = paths.join('/');\r\n    const frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find((context: FrameContext) => context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\r\n    return frameContext || null;\r\n  }\r\n  private getForm(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    return frameContext && frameContext.form || null;\r\n  }\r\n  private getFormControl(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    const propertyName = paths.pop();\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    const formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;\r\n    return formControl;\r\n  }\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return regex.test(value);\r\n  }\r\n}\r\n","import { ValidationError } from './validation_error';\r\nimport { ValidationResult } from './types';\r\n/**\r\n * 数据验证帮助类，提供一些公共的操作方法函数\r\n */\r\nexport class ValidationUtils {\r\n\r\n  /**\r\n   * 将错误信息集合转变为可读性高的文本数组\r\n   * @param errors 验证失败错误集合\r\n   * @param messages 返回的错误信息文本集合\r\n   * @param parentPath 验证属性上级路径\r\n   */\r\n  static createDetailedErrorMessage(\r\n    errors: ValidationError[],\r\n    messages: string[] = [],\r\n    parentPath: string = ''\r\n  ): string[] {\r\n    errors.forEach(error => {\r\n      const targetName = error.target ? error.target.constructor.name : '';\r\n      const property = error.propertyName;\r\n\r\n      const propConstraintFailed = (propertyName: string): string =>\r\n        `   - 属性 ${parentPath}${propertyName} 验证失败的规则:  \\n` +\r\n        `${Object.keys(error.constraints)\r\n          .map(ruleName => {\r\n            return `        #${ruleName}: ${error.constraints[ruleName]}\\n`;\r\n          })\r\n          .join('')}`;\r\n\r\n      if (!parentPath) {\r\n        messages.push(`类型为 ${targetName} 的实例对象数据验证失败，详细信息：\\n`);\r\n\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(property));\r\n        }\r\n\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, property);\r\n        }\r\n      } else {\r\n        const formattedProperty = Number.isInteger(+error.index)\r\n          ? `[${error.index}].${property}`\r\n          : `${parentPath ? `.` : ``}${property}`;\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(formattedProperty));\r\n        }\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, `${parentPath}${formattedProperty}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    return messages;\r\n  }\r\n\r\n  /**\r\n   * 错误信息集合转换为简单对象格式\r\n   * @param errors 错误信息集合\r\n   * @param errObj 返回简单对象。如:\r\n   * ```\r\n   * { name: { required: '必填', max: '最大值99' },\r\n   *   list: {\r\n   *      0: { name:{required: '必填'},\r\n   *           age: { min: '最小值 20' }\r\n   *         },\r\n   *      2: { ... }\r\n   *   }\r\n   * }\r\n   *\r\n   * ```\r\n   */\r\n  static convertErrorsToNormalObject(errors: ValidationError[], errObj: {}): {} {\r\n    errors.forEach(err => {\r\n      const property = err.propertyName;\r\n\r\n      const buildArray = (childErrors: ValidationError[]) => {\r\n        const itemErr = {};\r\n        childErrors.forEach((childErr: ValidationError) => {\r\n          if (childErr.children.length) {\r\n            itemErr[childErr.index] = ValidationUtils.convertErrorsToNormalObject(childErr.children, childErr);\r\n          } else {\r\n            if (itemErr[childErr.index]) {\r\n              itemErr[childErr.index] = Object.assign({}, itemErr[childErr.index], {\r\n                [childErr.propertyName]: childErr.constraints\r\n              });\r\n            } else {\r\n              itemErr[childErr.index] = { [childErr.propertyName]: childErr.constraints };\r\n            }\r\n          }\r\n        });\r\n\r\n        return itemErr;\r\n      };\r\n\r\n      if (!err.isArray) {\r\n        if (!err.children.length) {\r\n          errObj[property] = err.constraints;\r\n        } else {\r\n          errObj[property] = ValidationUtils.convertErrorsToNormalObject(err.children, errObj);\r\n        }\r\n      } else {\r\n        errObj[property] = buildArray(err.children);\r\n      }\r\n    });\r\n\r\n    return errObj;\r\n  }\r\n}\r\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\r\n\r\n/**\r\n * 日期处理类\r\n */\r\nclass DateUtil {\r\n\r\n  /**\r\n   * 空日期字符串（N版）\r\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\r\n   */\r\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\r\n  static emptyDateTimeString = null;\r\n\r\n  /**\r\n   * 默认空日期字符串（ISO标准格式）\r\n   */\r\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\r\n  static emptyISODateTimeString = null;\r\n\r\n  /**\r\n   * 默认日期听格式\r\n   */\r\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\r\n\r\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\r\n\r\n  static defaultDateFormat = 'yyyy-MM-dd';\r\n\r\n  static defaultTimeFormat = 'HH:mm:ss';\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\r\n   */\r\n  static formatISO(dateOrDateString: string|Date): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    return format(dateObj, this.defaultISOFormat);\r\n  }\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为指定格式的字符串\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   * @param dateFormat 日期格式字符串\r\n   */\r\n  static format(dateOrDateString: string|Date, dateFormat?: string): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\r\n    return format(dateObj, dateFormat);\r\n  }\r\n\r\n  /**\r\n   * 创建日期\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   */\r\n  static parse(dateOrDateString: string | Date): Date {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return dateOrDateString as Date;\r\n    }\r\n\r\n    return parseISO(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否是日期对象\r\n   */\r\n  static isDate(date: any): boolean {\r\n    return isDate(date);\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期或者空日期字符串\r\n   * @param dateOrDateString 日期或日期字符串\r\n   */\r\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return this.isEmptyDate(dateOrDateString as Date);\r\n    }\r\n    return this.isEmptyDateString(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否为空日期字符串\r\n   * @param date 日期对象\r\n   */\r\n  static isEmptyDate(date: Date) {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期字符串\r\n   * @param dateString 日期字符串\r\n   */\r\n  static isEmptyDateString(dateString: string) {\r\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 相等返回true，否则返回false\r\n   */\r\n  static isEqual(dateOrDateString1: string|Date, dateOrDateString2: string|Date): boolean {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (dateObj1 === dateObj2) {\r\n      return true;\r\n    }\r\n    return isEqual(dateObj1, dateObj2);\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 返回-1、0、1\r\n   */\r\n  static compare(dateOrDateString1: string|Date, dateOrDateString2: string|Date) {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (this.isEqual(dateObj1, dateObj2) === true) {\r\n      return 0;\r\n    }\r\n\r\n    // 处理解析后为null的场景，null比所有有效日期小\r\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\r\n      return -1;\r\n    }\r\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\r\n      return 1;\r\n    }\r\n\r\n    return compareAsc(dateObj1, dateObj2);\r\n  }\r\n}\r\n\r\nexport { DateUtil };\r\n\r\n","import { Translate } from './translate';\r\n\r\nexport class TranslateService {\r\n  private static defaultLanguage = 'zh-CHS';\r\n  public static translate: Translate = null;\r\n  /**\r\n   * 设置多语服务\r\n   * @param translate translate\r\n   */\r\n  public static setTranslate(translate: Translate) {\r\n    if (translate) {\r\n      this.translate = translate;\r\n    }\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   */\r\n  public static getCurrentLanguage() {\r\n    return this.translate && this.translate.getCurrentLanguage() || this.defaultLanguage;\r\n  }\r\n}\r\n","import * as ValidatorJS from 'validator';\r\nimport { ValidateRule, IsNumberOptions, ValidationResult } from './types';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationExecutor } from './validation_executor';\r\nimport { ValidationUtils } from './validation_utils';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { TranslateService } from '../../i18n/translate_service';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { RuleType } from '../../form/index';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 校验实体实例对象数据\r\n */\r\nexport class Validator<T extends Entity> {\r\n  constructor() { }\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  /**\r\n   * 验证实例对象中数据是否合法\r\n   * @param object 待校验的实例对象\r\n   * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  validate(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Promise<ValidationResult> {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    return Promise.all(executor.awaitingPromises).then(() => {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      this.sortValidationErrors(errors);\r\n      return this.buildErrors(errors);\r\n    });\r\n  }\r\n  /**\r\n   * 校验信息排序（为了兼容树形表）\r\n   * @param validationErrors 验证信息数组\r\n   */\r\n  private sortValidationErrors(validationErrors: ValidationError[]) {\r\n    // 如果存在无序号的信息则不排序\r\n    let sortable: boolean = true;\r\n    validationErrors.forEach(info => {\r\n      if (info.children && info.children.length > 1) {\r\n        this.sortValidationErrors(info.children);\r\n      }\r\n      if (typeof info.index !== \"number\") {\r\n        sortable = false;\r\n      }\r\n    });\r\n    if (sortable) {\r\n      validationErrors.sort((a, b) => a.index - b.index);\r\n    }\r\n  }\r\n  /**\r\n   * 执行校验\r\n   * @param object \r\n   * @param propertyName \r\n   * @param value \r\n   * @param externalRules \r\n   * @param index \r\n   * @param frameContext \r\n   * @param ignoreAsyncValidateRules\r\n   * @returns \r\n   */\r\n  public verify(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext, ignoreAsyncValidateRules: boolean = false): Promise<ValidationResult> | { isValid: boolean, errors: any, message: string } {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    if (executor.awaitingPromises && executor.awaitingPromises.length > 0 && ignoreAsyncValidateRules === false) {\r\n      return Promise.all(executor.awaitingPromises).then(() => {\r\n        const errors = executor.stripEmptyErrors(validationErrors);\r\n        const result = this.buildErrors(errors);\r\n        return result;\r\n      });\r\n    } else {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      return this.buildErrors(errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证实体属性元数据中设置的校验规则是否合法\r\n   * @param object 实例对象\r\n   * @param value 待校验的值\r\n   * @param validateRule 验证规则\r\n   */\r\n  validateValueByMetadata(object: any, value: any, validateRule: ValidateRule, isMultLanguageField?: boolean, currentRowId?: string): boolean | any {\r\n    const validType = validateRule.type;\r\n    let constraintsToValidate = [];\r\n    if (validateRule.constraints) {\r\n      constraintsToValidate = validateRule.constraints.map(param => {\r\n        if (typeof param === 'function') {\r\n          return param(object, value);\r\n        }\r\n        return param;\r\n      });\r\n    } else {\r\n      validateRule.constraints = [];\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(validType)) {\r\n      if (validType === ValidationTypes.MAXVALUE) {\r\n        const rule = constraintsToValidate[0];\r\n        if (this.isDateString(value) || this.isDate(value) || this.isDateString(rule) || this.isDate(rule)) {\r\n          // 如果日期值不存在，则不判断大小\r\n          if (!value) {\r\n            return true;\r\n          }\r\n          if (value.indexOf('~') !== -1) {\r\n            // 不对日期区间进行校验\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MAX_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));\r\n        } else {\r\n          return this[ValidationTypes.MAXVALUE](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else if (validType === ValidationTypes.MINVALUE) {\r\n        // 如果是null或undefined，直接返回true\r\n        if (constraintsToValidate[0] === null || constraintsToValidate[0] === undefined) {\r\n          return true;\r\n        }\r\n        if (this.isDateString(value) || this.isDate(value)) {\r\n          if (constraintsToValidate[0] === 0) {\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MIN_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));\r\n        } else if (this.isNumber(value)) {\r\n          return this[ValidationTypes.MIN](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else {\r\n        return this[validType](value, isMultLanguageField, ...constraintsToValidate);\r\n      }\r\n    } else {\r\n      if (typeof validateRule.eval === 'function') {\r\n        const bindingPath = validateRule.bindingPath;\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        let fieldName = validateRule.field;\r\n        if (bindingPaths.length !== 0) {\r\n          const prefix = bindingPaths.join('/');\r\n          fieldName = `${prefix}/${fieldName.split('.').filter(p => p).join('/')}`;\r\n        }\r\n        const options: any = { patch: { [fieldName]: value } };\r\n        options.currentRows = [];\r\n        const parentEntityListPaths: string[] = object && typeof object['getEntityListPath'] === 'function' && object.getEntityListPath();\r\n        if (parentEntityListPaths.length === 4) {\r\n          const childrenList = parentEntityListPaths.slice(1, 3).reverse();\r\n          options.currentRows.push({ bindingPath: childrenList[1], primaryValue: childrenList[0].split(':')[1] });\r\n        }\r\n        if (currentRowId) {\r\n          if (validateRule.bindingPath.split('/').filter(p => p).length !== 0) {\r\n            const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n            options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n          }\r\n          options.currentRow = { bindingPath: validateRule.bindingPath, primaryValue: currentRowId };\r\n        } else {\r\n          const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n          options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n        }\r\n\r\n        const result = validateRule.eval(options);\r\n        if (validateRule.type === RuleType.Require) {\r\n          const isValid = this.required(value, isMultLanguageField);\r\n          if (result) {\r\n            return isValid;\r\n          } else {\r\n            return true;\r\n          }\r\n        } else {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n  private buildErrors(errors: ValidationError[]) {\r\n    const msg = new Set(ValidationUtils.createDetailedErrorMessage(errors));\r\n    const newMsg = [];\r\n    msg.forEach(v => {\r\n      newMsg.push(v);\r\n    });\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      message: newMsg.join('')\r\n    };\r\n  }\r\n  /** 自定义验证 */\r\n  customValidation(value, comparison: boolean): boolean {\r\n    return comparison;\r\n  }\r\n  private isEmptyValue(value: any) {\r\n    const result = value === '' || value === null || value === undefined\r\n      || value === '0001-01-01' || value === '0001-01-01 00:00:00' || value === '0001-01-01T00:00:00';\r\n    return result;\r\n  }\r\n  /** 必填项 */\r\n  required(value: any, isMultLanguageField?: boolean): boolean {\r\n    if (isMultLanguageField) {\r\n      const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      // 如果能够获取到当前语言，那么当前语言对应的输入不能为空\r\n      if (currentLanguage) {\r\n        return !!value[currentLanguage];\r\n      }\r\n      // 如果当前语言为空，那么必填要求至少有一个输入\r\n      // const allEmpty = Object.values(value).every((v: any) => !v || v.length < 1); // .filter((v: any) => !v || v.length < 1);\r\n      // if (allEmpty) {\r\n      //   return false;\r\n      // }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (!Object.keys(value).length) {\r\n        return false;\r\n      }\r\n      value = Object.values(value)[0];\r\n    }\r\n    // tslint:disable: max-line-length\r\n    return value !== '' && value !== null && value !== undefined\r\n      && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n  }\r\n\r\n  /** 判断两个值是否相等 */\r\n  equals(value: any, comparison: any): boolean {\r\n    return value === comparison;\r\n  }\r\n\r\n  /**\r\n   * 检查 value 是否不等于参照值\r\n   * @param value 要检查的值\r\n   * @param comparison 对比参照值\r\n   */\r\n  notEquals(value: any, comparison: any): boolean {\r\n    return value !== comparison;\r\n  }\r\n\r\n  /**\r\n   * 判断value 是否为数字\r\n   * @param value 要检查的值\r\n   * @param options 验证选项\r\n   */\r\n  isNumber(value: any, options: IsNumberOptions = {}): boolean {\r\n    if (value === Infinity || value === -Infinity) {\r\n      return options.allowInfinity;\r\n    }\r\n\r\n    if (Number.isNaN(value)) {\r\n      return options.allowNaN;\r\n    }\r\n\r\n    return Number.isFinite(value);\r\n  }\r\n\r\n  /** 判断value是否为整数 */\r\n  isInt(value: number) {\r\n    return Number.isInteger(value);\r\n  }\r\n\r\n  /** 是否为浮点类型 */\r\n  isFloat(value: any): boolean {\r\n    if (this.isNumber(value) || this.isNumberString(value)) {\r\n      return this.validatorJs.isFloat(value);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否布尔值\r\n   */\r\n  isBoolean(value: any): boolean {\r\n    return value instanceof Boolean || typeof value === 'boolean';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为字符串\r\n   */\r\n  isString(value: any): boolean {\r\n    return value instanceof String || typeof value === 'string';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期\r\n   */\r\n  isDate(value: any): boolean {\r\n    return value instanceof Date && !isNaN(value.getTime());\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期字符串\r\n   */\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return this.isString(value) && regex.test(value) && this.validatorJs.toDate(value);\r\n  }\r\n\r\n  /** 判断value 的长度是否在允许的最小值 和最大值之间 */\r\n  length(value: any, min: number, max?: number, isMultLanguageField?: boolean): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLength(value, min, max);\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最小值\r\n   * @param value 待检查的字符串\r\n   * @param min 最小长度\r\n   */\r\n  minLength(value: any, isMultLanguageField: boolean, min: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length < min);\r\n        if (hasInvalidLangs && hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length > min : true;\r\n      // }\r\n      // 如果无法获取当前语言，则只要有一种语言的输入长度大于最小长度即可。\r\n      // const hasValidLangs = Object.values(value).filter((v: any) => v && v.length > min);\r\n      // if (hasValidLangs.length > 0) {\r\n      //   return true;\r\n      // }\r\n      // return false;\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, min));\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最大值\r\n   * @param value 待检查的字符串\r\n   * @param max 最大长度\r\n   */\r\n  maxLength(value: any, isMultLanguageField: boolean, max: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length < max : true;\r\n      // }\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length > max);\r\n        if (hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object') {\r\n      for (const key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          const element = value[key];\r\n          if (typeof element === 'string' && !this.length(value[key], 0, max)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, 0, max));\r\n  }\r\n\r\n  /** 检查value的值是否在 最大值与最小值之间 */\r\n  range(value: number, isMultLanguageField: boolean, min: number, max: number): boolean {\r\n    return typeof value === 'number' && this.isNumber(min) && this.isNumber(max) && value >= min && value <= max;\r\n  }\r\n  /**\r\n   * 日期类型的值是否在某个区间\r\n   * @param value value\r\n   * @param min 最小值\r\n   * @param max 最大值\r\n   */\r\n  dateRange(value: any, isMultLanguageField: boolean, rule: string, type: string) {\r\n    // 2010~2020|04~05|03 11:00:00~05 12:00:00\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    if (type === 'maxValue' || type === 'maxDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 1)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    } else if (type === 'minValue' || type === 'minDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 0)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  private getRangeValue(value: string, position: 0 | 1, splitor = '~') {\r\n    return value.split(splitor)[position];\r\n  }\r\n  private isDateRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /(\\d{4}|\\d{2})/.test(value);\r\n  }\r\n  /**\r\n   * 是否年度区间\r\n   * @param value value\r\n   */\r\n  private isYearRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}~\\d{4}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为年月区间\r\n   * @param value value\r\n   */\r\n  private isYearMonthRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}-\\d{2}~\\d{4}-\\d{2}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为月或天的区间\r\n   * @param value value\r\n   */\r\n  private isMonthOrDayRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1}~[0|1|2|3]\\d{1}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为天+时间的区间\r\n   * @param value value\r\n   */\r\n  private isDayTimeRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}~[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is greater than second.\r\n   */\r\n  min(num: number, isMultLanguageField: boolean, min: number): boolean {\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * 最小值验证\r\n   */\r\n  minValue(num: number | string, isMultLanguageField: boolean, min: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if (typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(min);\r\n      return value.isGreaterThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is less than second.\r\n   */\r\n  max(num: number, isMultLanguageField: boolean, max: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * 最大值验证\r\n   */\r\n  maxValue(num: number | string, isMultLanguageField: boolean, max: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if (typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(max);\r\n      return value.isLessThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's after the specified date.\r\n   */\r\n  minDate(date: Date, isMultLanguageField: boolean, minDate: Date): boolean {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() >= minDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's before the specified date.\r\n   */\r\n  maxDate(date: Date, isMultLanguageField: boolean, maxDate: Date): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (date === null || date === undefined) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() <= maxDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if a string is a boolean.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isBooleanString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isBoolean(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is numeric.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isNumberString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isNumeric(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string contains the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  contains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string does not contain the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  notContains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && !this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is an email.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isEmail(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isEmail(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is valid JSON (note: uses JSON.parse).\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isJSON(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isJSON(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is lowercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isLowercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLowercase(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is uppercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isUppercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isUppercase(value);\r\n  }\r\n\r\n  /**\r\n   * 验证字符串是否包含非法字符\r\n   * @param value 验证的字符串\r\n   * @param someChars 非法字符。如：#￥%@$\r\n   */\r\n  exclude(value: string, isMultLanguageField: boolean, someChars: string): boolean {\r\n    const arrChar = someChars.split('');\r\n    let counter = 0;\r\n    arrChar.forEach(val => {\r\n      if (this.contains(value, isMultLanguageField, val)) {\r\n        counter++;\r\n      }\r\n    });\r\n\r\n    return counter === 0;\r\n  }\r\n\r\n  /**\r\n   * 自定义正则验证\r\n   * @param value 待验证的字符串\r\n   * @param pattern 正则表达式\r\n   */\r\n  matches(value: string, isMultLanguageField: boolean, pattern: any): boolean {\r\n    value = (value === null || value === undefined) ? '' : value.toString();\r\n    if (value === '') {\r\n      return true;\r\n    }\r\n    return this.validatorJs.matches(value, pattern);\r\n  }\r\n}\r\n","import { Subject, Observable, from } from 'rxjs';\r\nimport { ChangeSet } from '../changeset/change_set';\r\nimport { Modification, ModifyType } from '../changeset/types';\r\nimport { Entity } from './entity';\r\nimport { EntityFactory } from './entity_creator';\r\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\r\nimport { Validator } from './validator/validator';\r\nimport { ValidationResult } from './validator/types';\r\n\r\nexport interface IList<T> {\r\n  [index: number]: T;\r\n}\r\n/**\r\n * 实体集合列表\r\n */\r\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\r\n  public __type__ = 'EntityList';\r\n\r\n  // #region 私有属性\r\n  private originalData: any[] = [];\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private rawData: T[];\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private listChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private validator = new Validator<T>();\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 集合改变时触发(新增、行记录修改、删除)\r\n   * @event\r\n   */\r\n  public onListChanged = this.listChanged.asObservable();\r\n\r\n  /**\r\n   * 获取项集合\r\n   */\r\n  public get items(): T[] {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 列表变更集\r\n   */\r\n  public get changes() {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 获取指定索引处的值\r\n   */\r\n  [index: number]: T;\r\n\r\n  /**\r\n   * 迭代器\r\n   */\r\n  *[Symbol.iterator](): Iterator<T> {\r\n    yield* this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据集合\r\n   * @param type 集合中的实体类型\r\n   */\r\n  constructor(data?: any[], type?: ClassType) {\r\n    this.clear();\r\n    if (data) {\r\n      // this.loadEntities(data);\r\n      data.forEach(item => {\r\n        this.initEntity(EntityFactory(type, item));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /** 加载实体列表 */\r\n  public loadEntities(entities: T[]) {\r\n    this.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.initEntity(entity);\r\n    });\r\n\r\n    // 发送Load变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: entities,\r\n      preValue: undefined,\r\n      type: ModifyType.Load,\r\n      target: this\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.rawData = [];\r\n    this.originalData = [];\r\n  }\r\n\r\n  /**\r\n   * 添加实体对象到集合中，并返回新加的对象\r\n   * @param entity 实体对象\r\n   * @param isCloned 克隆\r\n   */\r\n  public appendNew(entity: T, isCloned: boolean = false): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    if (isCloned === true) {\r\n      changeItem.type = ModifyType.Clone;\r\n    }\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param entity 实体\r\n   * @param position 插入位置\r\n   */\r\n  public insert(entity: T, position?: 1 | -1): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Insert,\r\n      position: position,\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(entity: T): void {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   */\r\n  public appendEntities(entities: T[]): void {\r\n    const newEntites = entities.map((entity: T) => {\r\n      return this.initEntity(entity, true);\r\n    });\r\n    const changeItem = {\r\n      path: [],\r\n      value: newEntites,\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\r\n   * @param primaryId 主键ID\r\n   */\r\n  public remove(primaryId: string): boolean {\r\n    const total = this.count();\r\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\r\n      return entity.primaryValue === primaryId;\r\n    });\r\n    if (indexToRemove === -1) {\r\n      return false;\r\n    }\r\n    const entityToRemove = this.rawData[indexToRemove];\r\n    this.rawData.splice(indexToRemove, 1);\r\n\r\n    // 删除变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\r\n      preValue: undefined,\r\n      type: ModifyType.Remove\r\n    };\r\n\r\n    this.updateIndex(total);\r\n    this.setChanges(changeItem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 从集合中获取指定ID值的实体对象\r\n   * @param id 主键值\r\n   */\r\n  public get(id: string) {\r\n    return this.items.find(item => {\r\n      return item.primaryValue === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将变更记录添加到集合变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(modinfo: Modification) {\r\n\r\n    // 向app层发送的变更\r\n    this.listChanged.next(modinfo);\r\n\r\n    // 构造向changeSet中添加的chagne\r\n    const change = Object.assign({}, modinfo);\r\n    if ((modinfo.type === ModifyType.Add || modinfo.type === ModifyType.Insert || modinfo.type === ModifyType.Clone) && modinfo.value[0] instanceof Entity) {\r\n      change.value = [modinfo.value[0].data];\r\n    }\r\n    this.changeSet.append(change);\r\n  }\r\n\r\n  /** 集合总记录数 */\r\n  public count() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /**\r\n   * 获取实体对象的索引值\r\n   */\r\n  public indexOf(entity: T): number {\r\n    return this.items.indexOf(entity);\r\n  }\r\n\r\n  /**\r\n   * 计算集合中某个属性的总和\r\n   * @param propertyName 属性名称\r\n   */\r\n  public sum(propertyName: string): number {\r\n    if (this.count() === 0) {\r\n      return 0;\r\n    }\r\n    return this.items.reduce((val, curr: T) => {\r\n      return val + curr[propertyName];\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * 集合数据验证\r\n   */\r\n  public validate(): Observable<ValidationResult> {\r\n    const propertyName = this.getPropertyName();\r\n    return from(this.validator.validate(this[PARENT_CLASS], propertyName));\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用toJSON方法代替\r\n   * @deprecated\r\n   */\r\n  public toJson() {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    this.items.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public toArray(): T[] {\r\n    return this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 私有方法\r\n\r\n  /**\r\n   * 实体初始化\r\n   * @param entity 实体\r\n   */\r\n  private initEntity(entity: T, isNewEntity: boolean = false): T {\r\n    entity[PARENT_CLASS] = this;\r\n    entity[PARENT_PATH] = this[PARENT_PATH];\r\n    entity.onValueChanged.subscribe((v: Modification) => {\r\n      const path = v.path;\r\n      const value = v.value;\r\n      const preValue = v.preValue;\r\n      const operator = v.type;\r\n      const subChanges = { path, value, preValue, type: operator };\r\n      if (v.changeSetValue !== undefined) {\r\n        subChanges['changeSetValue'] = v.changeSetValue;\r\n      }\r\n      this.setChanges(subChanges);\r\n    });\r\n    // TODO: 添加数据验证逻辑代码\r\n    const newLength = this.rawData.push(entity);\r\n    this[newLength - 1] = entity;\r\n    if (!isNewEntity) {\r\n      this.originalData.push(entity.toJSON());\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 更新索引\r\n   * @param total 总记录数\r\n   */\r\n  private updateIndex(total: number) {\r\n    for (let i = 0; i < total; i++) {\r\n      delete this[i];\r\n    }\r\n    this.rawData.forEach((entity, index) => {\r\n      this[index] = entity;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取属性名称\r\n   */\r\n  private getPropertyName() {\r\n    const path = this[PARENT_PATH];\r\n    if (path && path.length) {\r\n      const name = path[path.length - 1];\r\n      return name;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\n\r\n// export type ClassType = new (...args: any[]) => any;\r\nexport const BigNumberType = 'BigNumber';\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  pageIndex: number;\r\n  total: number;\r\n}\r\n\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  pageIndex: number;\r\n  total: number;\r\n}\r\n\r\n\r\nexport interface ResultData {\r\n  data?: any[];\r\n  pagination?: Pagination;\r\n}\r\n\r\nexport enum DataChangeType { Add, Delete }\r\n\r\nexport interface DataChange {\r\n  /**\r\n   * 变更路径，主要针对带从表的情况\r\n   */\r\n  fpath?: string;\r\n  dataId: string;\r\n  changeType: DataChangeType;\r\n  [prop: string]: any;\r\n}\r\nexport enum HttpMethod {\r\n  GET = 'GET',\r\n  POST = 'POST',\r\n  PUT = 'PUT',\r\n  DELETE = 'DELETE'\r\n}\r\n\r\n/**\r\n * 后端消息\r\n */\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace BackEndMessage {\r\n  /**\r\n   * 消息级别\r\n   */\r\n  export enum Level {\r\n    Error = 'Error',\r\n    Info = 'Info',\r\n    Warning = 'Warning'\r\n  }\r\n  /**\r\n   * 后端消息对象\r\n   */\r\n  export interface IMessage {\r\n    context: IMessageContext;\r\n    bizMessages: IBizMessage[];\r\n  }\r\n  /**\r\n   * 消息位置\r\n   */\r\n  export interface ILocation {\r\n    /**\r\n     * 表名\r\n     */\r\n    nodeCode: string;\r\n    /**\r\n     * 对应的行\r\n     */\r\n    rows?: string[];\r\n    /**\r\n     * 对应的列\r\n     */\r\n    columns?: string[];\r\n  }\r\n  /**\r\n   * 消息结构\r\n   */\r\n  export interface IBizMessage {\r\n    /**\r\n     * 消息位置\r\n     */\r\n    location?: ILocation;\r\n    /**\r\n     * 消息内容\r\n     */\r\n    message: string;\r\n    /**\r\n     * 消息级别\r\n     */\r\n    level: Level;\r\n  }\r\n  /**\r\n   * 消息上下文\r\n   */\r\n  export interface IMessageContext {\r\n    ns: string;\r\n    appContext: AppContext;\r\n  }\r\n  /**\r\n   * 消息\r\n   * @description 接口执行成功，但有info/warning级别的消息\r\n   */\r\n  export class Message implements IMessage {\r\n    public context: IMessageContext;\r\n    public bizMessages: IBizMessage[];\r\n    constructor(bizMessages: IBizMessage[], context: IMessageContext) {\r\n      this.bizMessages = bizMessages;\r\n      this.context = context;\r\n    }\r\n  }\r\n  /**\r\n   * 消息处理程序\r\n   */\r\n  export interface IBackEndMessageHandler {\r\n    handle(message: IMessage, context?: any);\r\n  }\r\n}\r\n\r\nexport interface IMessageService {\r\n  /**\r\n   * 提示\r\n   * @param message \r\n   */\r\n  info(message: string);\r\n  /**\r\n   * 错误\r\n   * @param message \r\n   */\r\n  error(message: string);\r\n  /**\r\n   * 警告\r\n   * @param message \r\n   */\r\n  warning(message: string);\r\n}\r\n\r\nexport interface INotifyService {\r\n  /**\r\n   * 提示\r\n   * @param message \r\n   * @param options \r\n   */\r\n  info(message: string, options?: { [prop: string]: any });\r\n  /**\r\n   * \r\n   * @param content 成功提示\r\n   * @param options \r\n   */\r\n  success(content: string, options?: { [prop: string]: any });\r\n  /**\r\n   * 警告提示\r\n   * @param content \r\n   */\r\n  warning(content: string);\r\n  /**\r\n   * 错误提示\r\n   * @param content \r\n   * @param options \r\n   */\r\n  error(content: string, options?: { [prop: string]: any });\r\n}\r\n\r\nexport enum RunMode {\r\n  compatible = 'compatible',\r\n  highSpeed = 'highSpeed'\r\n}\r\n/**\r\n * 控制器运行模式，compatible | highSpeed\r\n */\r\nexport const DEVKIT_RUN_MODE = new InjectionToken<RunMode>('@farris/devkit_run_mode');","import { UserSettings } from \"./types\";\r\nexport class UserSettingsService {\r\n  private static userSettings: UserSettings = null;\r\n  private static timeZone: string = undefined;\r\n  private static timeZoneOffset: number = undefined;\r\n  public static setUserSettings(userSettings: UserSettings) {\r\n    this.userSettings = userSettings;\r\n    this.timeZone = undefined;\r\n    this.timeZoneOffset = undefined;\r\n  }\r\n  /**\r\n   * 获取用户配置的时区\r\n   */\r\n  public static getTimeZone() {\r\n    if (this.timeZone !== undefined) {\r\n      return this.timeZone;\r\n    }\r\n    const timeZone = this.userSettings && this.userSettings.timeZone || null;\r\n    this.timeZone = timeZone;\r\n    return timeZone;\r\n  }\r\n  public static getTimeZoneOffset() {\r\n    if (this.timeZoneOffset !== undefined) {\r\n      return this.timeZoneOffset;\r\n    }\r\n    const timeZoneOffset = this.userSettings && this.userSettings.timeZoneOffset || null;\r\n    this.timeZoneOffset = timeZoneOffset;\r\n    return timeZoneOffset;\r\n  }\r\n}","import moment from 'moment';\r\n//import { timezones } from './time_zones';\r\n//import { Timezone } from './types';\r\nexport class ZonedTime {\r\n  /**\r\n   * 将指定时区的时间转换为UTC时区时间（带时区）\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   */\r\n  // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment.tz(date, timeZone).utc().format();\r\n  // }\r\n  /**\r\n   * 将带时区的时间转换为指定时区的时间字符串\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   * @param format 时间格式\r\n   */\r\n  // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment(date).tz(timeZone).format(format);\r\n  // }\r\n  /**\r\n   * 获取标准时区名称\r\n   * @param tz 时区\r\n   */\r\n  // public static getStandardTimezoneName(tz: string) {\r\n  //   let momentZone = moment.tz.zone(tz);\r\n  //   let standardTimezone = tz;\r\n  //   if (!momentZone) {\r\n  //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));\r\n  //     standardTimezone = timezone && timezone.utc[0] || null;\r\n  //   }\r\n  //   return standardTimezone;\r\n  // }\r\n\r\n  public static zonedTimeToSpecialTimeZoneOffsetTimeString(date: Date | string | number, offset: number = 0, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    const utcTime = moment(date).utc();\r\n    const offsetMinutes = offset * 60;\r\n    const result = utcTime.add(offsetMinutes, 'm');\r\n    return result.format(format);\r\n  }\r\n  public static timeZoneOffsetTimeToUtcTimeString(date: Date | string | number, offset: number, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    return moment(date).utcOffset(offset, true).toISOString();\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * 路由参数服务\r\n */\r\n@Injectable()\r\nclass RouterParamService {\r\n\r\n  /**\r\n   * 获取参数\r\n   */\r\n  public getParams(url: string): any {\r\n    const allParams = this.getAllParams();\r\n    return allParams[url] || {};\r\n  }\r\n\r\n  /**\r\n   * 设置参数\r\n   */\r\n  public setParams(url: string, params: any) {\r\n    const allParams = this.getAllParams();\r\n    allParams[url] = params;\r\n    this.setAllParams(allParams);\r\n  }\r\n\r\n  /**\r\n   * 清空参数\r\n   */\r\n  public clearParams() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取全部参数\r\n   */\r\n  public getAllParams(): any {\r\n    const allParamsJson = window.sessionStorage.getItem('ROUTER_PARAMS') || '{}';\r\n    const allParams = JSON.parse(allParamsJson);\r\n    return allParams;\r\n  }\r\n\r\n  /**\r\n   * 设置所有的参数\r\n   */\r\n  public setAllParams(allParams: any): void {\r\n    allParams = allParams || {};\r\n    const allParamsJson = JSON.stringify(allParams);\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', allParamsJson);\r\n  }\r\n\r\n  /**\r\n   * 清空所有参数\r\n   */\r\n  public clearAllParams() {\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', '{}');\r\n  }\r\n}\r\n\r\nexport { RouterParamService };\r\n","/**\r\n * 变更相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 绑定数据变更\r\n */\r\nexport interface Change {\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ChangeType;\r\n\r\n  /**\r\n   * 变更路径\r\n   */\r\n  path: string[];\r\n\r\n  /**\r\n   * 变更后的值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 变更前的值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 错误信息\r\n   */\r\n  errors?: any;\r\n\r\n  /**\r\n   * 验证后回调，会将验证结果传入\r\n   */\r\n  cb?: Function;\r\n\r\n  /**\r\n   * 是否提交过，为true时开启输入时验证\r\n   */\r\n  isSubmitted?: boolean;\r\n\r\n  /**\r\n   * 在grid中使用，如果存在id，则将errors在form中以\r\n   * {\r\n   *  [id]: errors\r\n   * }\r\n   * 的形式保存一份\r\n   */\r\n  id?: string;\r\n\r\n  isUdt?: boolean;\r\n\r\n  isGrid?: boolean;\r\n  /**\r\n   * 新增\r\n   */\r\n  create?: boolean;\r\n  /**\r\n   * 复制\r\n   */\r\n  isCloned?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 绑定数据变更类型\r\n */\r\nexport enum ChangeType {\r\n  Update = 'Update',\r\n  Load = 'Load',\r\n  Append = 'Append',\r\n  Remove = 'Remove',\r\n  Swap = 'Swap',\r\n  SelectionChanged = 'SelectionChanged',\r\n  ValueChanged = 'ValueChanged',\r\n  UpdateErrors = 'UpdateErrors',\r\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\r\n  /**\r\n   * 分页信息变化\r\n   */\r\n  PaginationInfoChange = 'PaginationInfoChange',\r\n}\r\n\r\n/**\r\n * 视图变更\r\n */\r\nexport interface ViewChange {\r\n  type: ViewChangeType;\r\n  path: string[];\r\n  value: any;\r\n  preValue?: any;\r\n  context?: any;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 视图变更类型\r\n */\r\nexport enum ViewChangeType {\r\n  ValueChanged\r\n}\r\n\r\n/**\r\n * Form值变化事件\r\n */\r\nexport interface FormValueChange {\r\n  path: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  command: string; // 监听命令\r\n  entityChanged: boolean; // 实体是否已改变\r\n}\r\n\r\n/**\r\n * 实体值变化事件\r\n */\r\nexport interface EntityValueChange {\r\n  paths: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  changed: boolean; // 实体是否已改变\r\n  [prop: string]: any;\r\n}","/**\r\n * 绑定属性相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 属性类型\r\n */\r\nexport enum BindingPropertyType {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 对象类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List',\r\n\r\n  /**\r\n   * 动态类型\r\n   */\r\n  Dynamic = 'Dynamic'\r\n}\r\n\r\n\r\n/**\r\n * 绑定属性\r\n */\r\nexport interface BindingProperty {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type: BindingPropertyType;\r\n\r\n  /**\r\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\r\n   */\r\n  entityType?: any;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  isPrimaryKey?: boolean;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n}\r\n","import { Subject, of } from 'rxjs';\r\nimport { Map } from 'immutable';\r\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { InvokeOnValueChange } from './types';\r\n\r\n/**\r\n * 绑定对象基类\r\n */\r\nabstract class BaseBindingObject {\r\n  public __type__ = 'BindingObject';\r\n  // protected data: any = undefined;\r\n  /**\r\n   * immutable值对象\r\n   */\r\n  protected innerValues: Map<string, any>;\r\n  /**\r\n   * 当前语言\r\n   */\r\n  protected currentLanguage: string;\r\n  /**\r\n   * 父对象或父列表\r\n   */\r\n  public parent: BindingList | BaseBindingObject;\r\n\r\n  /**\r\n   * 实体引起的变更\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 界面层引起的变更流\r\n   */\r\n  public viewChanges: Subject<ViewChange>;\r\n\r\n  /**\r\n   *  属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 主键值\r\n   */\r\n  public get primaryKeyValue() {\r\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\r\n  }\r\n\r\n  /**\r\n   * 标识是否提交过\r\n   */\r\n  public isShowValidationMsg = false;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe: Subject<any> = new Subject();\r\n  /**\r\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\r\n   */\r\n  public controlMap: any = {};\r\n  constructor() {\r\n    this.innerValues = Map<string, any>();\r\n    this.changes = new Subject<Change>();\r\n    this.viewChanges = new Subject<ViewChange>();\r\n  }\r\n  /**\r\n   * 设置是否提交过\r\n   */\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n  // public abstract load(data: any);\r\n  /**\r\n   * 根据属性名获取属性值\r\n   * @param   propertyName 属性名\r\n   * @returns 属性值\r\n   */\r\n  public getValue(propertyName: string): any {\r\n    return this.innerValues.get(propertyName);\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   * @param propertyName        属性名\r\n   * @param propertyValue       属性值\r\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\r\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\r\n   * @param errors              错误消息\r\n   * @param invokeOnValueChange 值变化事件执行句柄\r\n   */\r\n  public setValue(propertyName: string, propertyValue: any, emitEventToView: boolean = false, emitEventToEntity: boolean = false, errors?: any, invokeOnValueChange?: InvokeOnValueChange, context?: any): void {\r\n    // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值\r\n    // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {\r\n    //   return;\r\n    // }\r\n    const oldPropertyValue = this.getValue(propertyName);\r\n    // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值\r\n    if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {\r\n      return;\r\n    }\r\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\r\n    // if (oldPropertyValue === propertyValue) {\r\n    //   return;\r\n    // }\r\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\r\n      // 设定缺省\r\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean, primaryValue?: any) {\r\n        return of(true);\r\n      };\r\n    }\r\n\r\n    if (emitEventToEntity === true) {\r\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\r\n      // if(!this.innerValues.has(propertyName)) {\r\n      //   return;\r\n      // }\r\n      // 执行实体值变化前事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, false, this.primaryKeyValue).subscribe((result) => {\r\n        if (result) {\r\n          // 如果成功，执行变化，并通知实体变化\r\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n          // this.data[propertyName] = propertyValue;\r\n          const viewChange = this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);\r\n          this.viewChanges.next(viewChange);\r\n          // 如果需要通知视图，通知视图相应修改\r\n          if (emitEventToView === true) {\r\n            const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n            this.changes.next(change);\r\n          }\r\n          // 执行实体值变化后事件\r\n          invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();\r\n        } else {\r\n          // 如果失败，不再通知实体变化\r\n          // 并执行界面回滚操作\r\n          const change = this.buildChangesContext(propertyName, oldPropertyValue, context, errors);\r\n          this.changes.next(change);\r\n        }\r\n      });\r\n    } else {\r\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\r\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n      // this.data[propertyName] = propertyValue;\r\n      if (emitEventToView === true) {\r\n        const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n        this.changes.next(change);\r\n      }\r\n      // 执行实体值变化后事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();\r\n    }\r\n  }\r\n  /**\r\n   * 将BindingObject实例转换成JSON对象\r\n   */\r\n  public toJSON(options?: any): any {\r\n    const langCode = this.getCurrentLanguage();//window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    const result = {};\r\n    this.properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        const list: BindingList = this[propName];\r\n        result[propName] = list.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else {\r\n        // 1、对于多语录入字段；\r\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\r\n        if (property.enableMultiLangInput === true) {\r\n          // 忽略多语字段，只返回当前语言\r\n          if (options && options.ignoreMultiLangInput === true) {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[propName] = multiLangValueObj[langCode];\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          } else if (options && options.useFullMultiLangProperty) {\r\n            // 给审批提供的扩展 @2021-10-13\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[`${propName}_MULTILANGUAGE`] = multiLangValueObj;\r\n            }\r\n          } else {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (!multiLangValueObj) {\r\n              result[propName] = { [langCode]: multiLangValueObj };\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          }\r\n        } else {\r\n          result[propName] = this.getValue(propName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   * @returns \r\n   */\r\n  protected getCurrentLanguage() {\r\n    this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    return this.currentLanguage;\r\n  }\r\n  /**\r\n   * 构造bindignData变更上下文\r\n   * @param propertyName \r\n   * @param propertyValue \r\n   * @param context \r\n   * @param errors \r\n   * @param type \r\n   * @returns \r\n   */\r\n  private buildChangesContext(propertyName: string, propertyValue: any, context?: any, errors?: any, type: ChangeType = ChangeType.ValueChanged): Change {\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: propertyValue,\r\n      id: this.primaryKeyValue,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n  /**\r\n   * 构造viewChanges上下文\r\n   * @param propertyName \r\n   * @param value \r\n   * @param preValue \r\n   * @param errors \r\n   * @param context \r\n   * @param type \r\n   * @returns \r\n   */\r\n  private buildViewChangesContext(propertyName: string, value: any, preValue: any, errors?: any, context?: any, type: ViewChangeType = ViewChangeType.ValueChanged): ViewChange {\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: value,\r\n      preValue: preValue,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n}\r\nexport { BaseBindingObject }","import { Type } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\n\r\n/**\r\n * 属性工具类\r\n */\r\nclass PropertyUtil {\r\n\r\n  /**\r\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\r\n   * @param  entityType 实体类型\r\n   * @returns 绑定属性集合\r\n   */\r\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\r\n    const properties = [];\r\n\r\n    // Plain\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\r\n      const ngFieldProperty = ngFieldProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Plain,\r\n        isPrimaryKey: ngFieldProperty.primary,\r\n        isForeignKey: ngFieldProperty.foreign,\r\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\r\n      });\r\n    });\r\n\r\n    // Object\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\r\n      const ngObjectProperty = ngObjectProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Object,\r\n        entityType: ngObjectProperty.type\r\n      });\r\n    });\r\n\r\n    // List\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\r\n      const ngListProperty = ngListProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.List,\r\n        entityType: ngListProperty.type\r\n      });\r\n    });\r\n\r\n    // Dynamics\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\r\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Dynamic,\r\n        entityType: ngDynamicProperty.type\r\n      });\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\r\n    const properties = [];\r\n    Object.keys(dynamicData).forEach((propertyName: string) => {\r\n      if (dynamicData.hasOwnProperty(propertyName)) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Dynamic,\r\n            entityType: null\r\n          });\r\n        } else {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Plain,\r\n            isPrimaryKey: false,\r\n            isForeignKey: false\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return properties;\r\n  }\r\n  /**\r\n   * 根据属性名获取属性\r\n   */\r\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\r\n    const targetProperty = properties.find((property: BindingProperty) => {\r\n      return property.name === propertyName;\r\n    });\r\n    return targetProperty;\r\n  }\r\n\r\n  /**\r\n   * 获取实体主键名\r\n   * @param properties 属性集合\r\n   * @returns 主键名\r\n   */\r\n  static getPrimaryKey(properties: BindingProperty[]): string {\r\n\r\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\r\n    const primaryProperty = properties.find((property: BindingProperty) => {\r\n      return property.isPrimaryKey === true;\r\n    });\r\n    return primaryProperty ? primaryProperty.name : '';\r\n  }\r\n\r\n}\r\n\r\nexport { PropertyUtil };\r\n","/**\r\n * BindingObject相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { BindingProperty } from './binding_property';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\n/**\r\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\r\n */\r\nclass BindingObject extends BaseBindingObject {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param properties 属性集合\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    super();\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n  }\r\n  /**\r\n   * 重新加载数据\r\n   * @param data \r\n   */\r\n  /*public load(data: any) {\r\n    throw new Error('Method not implemented.');\r\n  }*/\r\n}\r\n\r\nexport { BindingObject };\r\n","import { Type } from \"@angular/core\";\r\nimport { ClassType } from \"../entity\";\r\nimport { BindingList } from \"./binding_list\";\r\nimport { BindingProperty } from \"./binding_property\";\r\n/**\r\n * BindingListTypeFactory\r\n */\r\nexport class BindingListTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingList>> = new Map<BindingProperty[], Type<BindingList>>();\r\n  public static create(bindingProperties: BindingProperty[]) {\r\n    const bindingListType = this.getType(bindingProperties);\r\n    const bindingList = new bindingListType(bindingProperties);\r\n    return bindingList;\r\n  }\r\n  /**\r\n   * 创建BindingList模板类\r\n   * @param bindingProperties \r\n   * @returns \r\n   */\r\n  private static createType(bindingProperties: BindingProperty[]): ClassType<BindingList> {\r\n    const bindingListType = class BindingListType extends BindingList {\r\n      constructor(properties: BindingProperty[]) {\r\n        super(properties);\r\n      }\r\n    }\r\n    const bindingListTypePrototype = bindingListType.prototype;\r\n    this.extendProperties(bindingListTypePrototype, bindingProperties);\r\n    return bindingListType;\r\n  }\r\n  /**\r\n   * 扩展BindingList模板类属性\r\n   * @param bindingListPrototype bindingList原型\r\n   * @param bindingProperties 属性数组\r\n   */\r\n  private static extendProperties(bindingListPrototype: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingListPrototype, propertyName, {\r\n        get: function () {\r\n          return this.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param bindingProperties bindingList属性\r\n   * @returns \r\n   */\r\n  private static getType(bindingProperties: BindingProperty[]): Type<BindingList> {\r\n    if (this.provider.has(bindingProperties)) {\r\n      return this.provider.get(bindingProperties);\r\n    }\r\n    const bindingListType = this.createType(bindingProperties);\r\n    this.provider.set(bindingProperties, bindingListType);\r\n    return bindingListType;\r\n  }\r\n}","/**\r\n * 绑定列表工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListTypeFactory } from './binding_list_type_factory';\r\nimport { BindingProperty } from './binding_property';\r\n\r\n/**\r\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\r\n *\r\n * **示例代码**\r\n * ```ts\r\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\r\n * const deptList = BindingListFactory.create(deptProperties);\r\n * ```\r\n */\r\nclass BindingListFactory {\r\n\r\n  /**\r\n   * 创建BindingList实例，并扩展其属性\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static create(bindingProperties: BindingProperty[]): BindingList {\r\n    // const bindingList = new BindingList(bindingProperties);\r\n    // this.extendProperties(bindingList, bindingProperties);\r\n    const bindingList = BindingListTypeFactory.create(bindingProperties);\r\n    return bindingList;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\r\n   * @param bindingList       要扩展的绑定列表\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingList, propertyName, {\r\n        get: () => {\r\n          return bindingList.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingListFactory };\r\n\r\n","import { Type } from '@angular/core';\r\n//import { Map as ImmutableMap } from 'immutable';\r\nimport { Change } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { ClassType } from '../entity';\r\nimport { BindingObject } from './binding_object';\r\nimport { TranslateService } from '../i18n/translate_service';\r\n// import { BindingObjectFactory } from './binding_object_factory';\r\n\r\n/**\r\n * BindingObjectTypeFactory\r\n */\r\nexport class BindingObjectTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingObject>> = new Map<BindingProperty[], Type<BindingObject>>();\r\n  /**\r\n   * 创建BindingObject\r\n   * @param properties \r\n   * @param data \r\n   * @returns \r\n   */\r\n  public static create(properties: BindingProperty[]/*, data?: any*/) {\r\n    const bindingObjectType = this.getType(properties);\r\n    return new bindingObjectType();\r\n  }\r\n  /**\r\n   * 创建原型类型\r\n   * @param properties \r\n   * @returns \r\n   */\r\n  private static createType(properties: BindingProperty[]): ClassType<BindingObject> {\r\n    // 继承原绑定对象所有属性\r\n    const bindingObjectType = class BindingObjectType extends BaseBindingObject {\r\n      constructor() {\r\n        super();\r\n        // this.innerValues = ImmutableMap(Object.assign({}, data));\r\n\r\n      }\r\n      //#endregion load\r\n\r\n      /*\r\n      public load(data: any) {\r\n        // data包含多语字段\r\n        this.innerValues = ImmutableMap(Object.assign({}, data));\r\n        this.properties.forEach((property: BindingProperty) => {\r\n          if (property.type === BindingPropertyType.List) {\r\n            this.loadLists(property);\r\n          } else if (property.type === BindingPropertyType.Object) {\r\n            this.loadObjects(property);\r\n          } else if (property.type === BindingPropertyType.Dynamic) {\r\n            this.loadDynamicObjects(property);\r\n          } else {\r\n            this.loadFields(property);\r\n          }\r\n        });\r\n      }\r\n      private loadFields(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const dataField = property.dataField || propertyName;\r\n        let value;\r\n        if (property.enableMultiLangInput) {\r\n          value = this.getValue(dataField, false);\r\n        } else {\r\n          value = this.getValue(propertyName);\r\n        }\r\n        this[propertyName] = value;\r\n      }\r\n      private loadLists(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const bindingList: BindingList = this[key];\r\n        if (bindingList) {\r\n          const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map(item => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n        }\r\n      }\r\n      private loadObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const value = this.getValue(propertyName) || {};\r\n        const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n        const bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n        this[key] = bindingObject;\r\n\r\n      }\r\n      private loadDynamicObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const value = this.getValue(propertyName) || {};\r\n        const dynamicObject = BindingObjectFactory.createDynamicBindingObject(value);\r\n        Object.defineProperty(this, propertyName, {\r\n          value: dynamicObject\r\n        });\r\n      }*/\r\n      //#endregion\r\n    };\r\n    // 获取主键\r\n    const primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n    // 设置主键\r\n    bindingObjectType.prototype.primaryKey = primaryKey;\r\n    bindingObjectType.prototype.properties = properties;\r\n    // 将属性扩展到原型对象上\r\n    this.extendProperties(bindingObjectType.prototype, properties);\r\n    return bindingObjectType;\r\n  }\r\n  /**\r\n   * 扩展原型属性\r\n   * @param typePrototype \r\n   * @param properties \r\n   */\r\n  private static extendProperties(typePrototype: BaseBindingObject, properties: BindingProperty[]) {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(typePrototype, property);\r\n      } else {\r\n        this.extendPlainProperty(typePrototype, property);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型列表属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendListProperty(typePrototype: BaseBindingObject, property: BindingProperty) {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingList = this[key];\r\n        if (!bindingList) {\r\n          bindingList = BindingListFactory.create(childListProperties);\r\n          this[key] = bindingList;\r\n          // 加载数据\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map(item => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n          // 指定子List的parent、监听子List的changes事件\r\n          bindingList.parent = this;\r\n          bindingList.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingList;\r\n      },\r\n      set: function (bindingList: BindingList) {\r\n        this[key] = bindingList;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型对象属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingObject = this[key];\r\n        if (!bindingObject) {\r\n          const value = this.getValue(propertyName) || {};\r\n          bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n          this[key] = bindingObject;\r\n          // 指定子Object的parent、监听子Object的changes事件\r\n          bindingObject.parent = this;\r\n          bindingObject.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingObject;\r\n      },\r\n      set: function (value: BaseBindingObject) {\r\n        this[key] = value;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型动态属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendDynamicObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    // Object.defineProperty(typePrototype, propertyName, {\r\n    //   value: null\r\n    // });\r\n    typePrototype[propertyName] = null;\r\n  }\r\n  /**\r\n   * 扩展原型简单属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendPlainProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        if (property.enableMultiLangInput === true) {\r\n          let value = this.getValue(propertyName, false);\r\n          if (!value) {\r\n            value = this.getValue(propertyName, false);\r\n            const langCode = TranslateService.getCurrentLanguage();\r\n            return { [langCode]: value };\r\n          }\r\n          return value;\r\n        } else {\r\n          const value = this.getValue(propertyName);\r\n          return value;\r\n        }\r\n      },\r\n      set: function (value: any) {\r\n        const oldValue = this.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        this.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param properties bindingList属性\r\n   * @returns \r\n   */\r\n  private static getType(properties: BindingProperty[]): Type<BindingObject> {\r\n    if (this.provider.has(properties)) {\r\n      return this.provider.get(properties);\r\n    }\r\n    const bindingObjectType = this.createType(properties);\r\n    this.provider.set(properties, bindingObjectType);\r\n    return bindingObjectType;\r\n  }\r\n}","/**\r\n * 绑定对象工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Change } from './changes';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingObjectTypeFactory } from './binding_object_type_factory';\r\n\r\n/**\r\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\r\n *\r\n * **扩展属性处理**\r\n *\r\n * 对于要扩展的属性（BindingProperty）有三种处理：\r\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\r\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\r\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\r\n *\r\n * **示例代码**\r\n *\r\n * ```ts\r\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\r\n * const empBindingObject = BindingObjectFactory.create(properties);\r\n * ```\r\n */\r\nclass BindingObjectFactory {\r\n\r\n  /**\r\n   * 创建BindingObject实例\r\n   * @param properties 要扩展的属性集合\r\n   * @returns 带扩展属性的空BindingObject对象\r\n   */\r\n  static create(properties: BindingProperty[]/*, data?: any*/): BindingObject {\r\n    const bindingObjectType = BindingObjectTypeFactory.create(properties/*, data*/);\r\n    return bindingObjectType;\r\n    // const object = new BindingObject(properties);\r\n    // this.extendProperties(object, properties);\r\n    // return object;\r\n  }\r\n\r\n  static createDynamicBindingObject(data: any): BindingObject {\r\n    const properties = PropertyUtil.getDynamicProperties(data);\r\n    const object = BindingObjectTypeFactory.create(properties/*, data*/);//new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * 扩展属性绑定对象的属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 绑定属性集合\r\n   */\r\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(object, property);\r\n      } else {\r\n        this.extendPlainProperty(object, property);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展列表类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 列表类型的绑定属性集合\r\n   */\r\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childList = BindingListFactory.create(childListProperties);\r\n\r\n    // 指定子List的parent、监听子List的changes事件\r\n    childList.parent = object;\r\n    childList.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childList\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展对象类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 对象类型的绑定属性集合\r\n   */\r\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childObject = this.create(childObjectProperties);\r\n\r\n    // 指定子Object的parent、监听子Object的changes事件\r\n    childObject.parent = object;\r\n    childObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childObject\r\n    });\r\n  }\r\n\r\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    object[propertyName] = null;\r\n  }\r\n\r\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\r\n    dynamicObject.parent = object;\r\n    dynamicObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n    Object.defineProperty(object, propertyName, {\r\n      value: dynamicObject\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展简单类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 简单类型的绑定属性集合\r\n   */\r\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(object, propertyName, {\r\n      get: () => {\r\n        return object.getValue(propertyName);\r\n      },\r\n      set: (value: any) => {\r\n        const oldValue = object.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        object.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { BindingObjectFactory };\r\n","import { Type } from '@angular/core';\r\nimport { makePropDecorator, makeDecorator } from '../metadata/index';\r\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\r\nimport { Form } from './form';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { ValidateRule } from '../entity';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgValidateForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_VALIDATE_FORM = 'NgValidateForm';\r\n\r\n/**\r\n * 表单描述\r\n */\r\nexport interface NgValidateForm {\r\n\r\n  /**\r\n   * Form名称，用于显示验证信息\r\n   */\r\n  formGroupName: string;\r\n  /**\r\n   * 是否启用验证\r\n   */\r\n  enableValidate: boolean;\r\n}\r\n\r\n/**\r\n * 表单装饰器\r\n */\r\nexport interface NgValidateFormDecorator {\r\n  (obj?: NgValidateForm): any;\r\n  new(obj?: NgValidateForm): any;\r\n}\r\n\r\n/**\r\n * 表单装饰器工厂\r\n */\r\nexport function NgValidateForm(options: NgValidateForm) {\r\n  const decoratorFactory = makeDecorator(NG_VALIDATE_FORM, (obj: NgValidateForm) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_CHILD_FORM = 'NgChildForm';\r\n\r\n/**\r\n * 子表单描述\r\n */\r\nexport interface NgChildForm {\r\n\r\n  /**\r\n   * 子表单类型\r\n   */\r\n  formType: Type<Form>;\r\n}\r\n\r\n/**\r\n * 子表单装饰器\r\n */\r\nexport interface NgChildFormDecorator {\r\n  (obj?: NgChildForm): any;\r\n  new(obj?: NgChildForm): any;\r\n}\r\n\r\n/**\r\n * 子表单装饰器工厂\r\n */\r\nexport const NgChildForm: NgChildFormDecorator =\r\n  makePropDecorator(NG_CHILD_FORM, (obj: NgChildForm) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildFormArray\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单数组装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_CHILD_FORM_ARRAY = 'NgChildFormArray';\r\n\r\n/**\r\n * 子表单数组描述\r\n */\r\nexport interface NgChildFormArray {\r\n\r\n  /**\r\n   * 子表单数组内子表单的类型\r\n   */\r\n  formType: Type<Form>;\r\n\r\n  /**\r\n   * 多行记录\r\n   */\r\n  multi?: boolean;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器\r\n */\r\nexport interface NgFormArrayDecorator {\r\n  (obj?: NgChildFormArray): any;\r\n  new(obj?: NgChildFormArray): any;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器工厂\r\n */\r\nexport const NgChildFormArray: NgFormArrayDecorator =\r\n  makePropDecorator(NG_CHILD_FORM_ARRAY, (obj: NgChildFormArray) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgFormControl\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 表单控件装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_FORM_CONTROL = 'NgFormControl';\r\n\r\n/**\r\n * 表单控件描述\r\n */\r\nexport interface NgFormControl {\r\n  /**\r\n   * 控件标识\r\n   */\r\n  id?: string;\r\n  /**\r\n   * 控件名称\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * 默认控件名称(多语环境翻译无值时使用)\r\n   */\r\n  defaultI18nValue?: string;\r\n\r\n  /**\r\n   * 绑定字段路径\r\n   */\r\n  binding?: string;\r\n\r\n  /**\r\n   * 值转换器\r\n   */\r\n  valueConverter?: ControlValueConverter;\r\n\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * 控件值更新时机\r\n   */\r\n  updateOn?: 'change' | 'blur' | 'submit';\r\n\r\n  /**\r\n   * 同步验证器\r\n   */\r\n  validators?: ValidatorFn | ValidatorFn[] | null;\r\n\r\n  /**\r\n   * 异步验证器\r\n   */\r\n  asyncValidatorFn?: AsyncValidatorFn | AsyncValidatorFn | null;\r\n\r\n  /**\r\n   * 验证规则\r\n   */\r\n  validRules?: ValidateRule | ValidateRule[] | null;\r\n\r\n  /**\r\n   * 值改变前监听器\r\n   */\r\n  valueChanging?: string;\r\n  /**\r\n   * 值改变后监听器\r\n   */\r\n  valueChanged?: string;\r\n  /**\r\n   * 大数\r\n   */\r\n  bigNumber?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器\r\n */\r\nexport interface NgFormControlDecorator {\r\n  (obj?: NgFormControl): any;\r\n  new(obj?: NgFormControl): any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器工厂\r\n */\r\nexport const NgFormControl: NgFormControlDecorator =\r\n  makePropDecorator(NG_FORM_CONTROL, (obj: NgFormControl) => obj);\r\n","/**\r\n * 数据路径处理\r\n */\r\nclass BindingPathConverter {\r\n\r\n  /**\r\n   * (BindingPathString | BindingPathArray) => BindingPathArray\r\n   * @param bindingPath BindingPath的字符串或者数组格式\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\r\n    let bindingPathArray: string[];\r\n    if (typeof bindingPath === 'string') {\r\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n        return part !== '';\r\n      });\r\n      return bindingPathArray;\r\n    } else {\r\n      bindingPathArray = bindingPath.concat([]);\r\n    }\r\n\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * BindingPathArray => BindingPathString\r\n   */\r\n  public static toBindingPathString(bindingPathArray: string[]): string {\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathConverter };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath比较器\r\n */\r\nclass BindingPathComparer {\r\n\r\n  /**\r\n   * 是否相等\r\n   */\r\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\r\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\r\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\r\n\r\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\r\n      return srcPathItem === dstPathArray[srcPathIndex];\r\n    });\r\n\r\n    return isEqual;\r\n  }\r\n\r\n  /**\r\n   * 是否是父路径\r\n   */\r\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\r\n\r\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\r\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\r\n\r\n    // 长度差1个\r\n    if (childPathArray.length !== parentPathArray.length + 1) {\r\n      return;\r\n    }\r\n\r\n    return this.isAncestor(childPath, parentPath);\r\n  }\r\n\r\n  /**\r\n   * 是否是祖先路径\r\n   */\r\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\r\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\r\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\r\n\r\n    if (descendantPath.length <= ancestorPathArray.length) {\r\n      return false;\r\n    }\r\n\r\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\r\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\r\n    });\r\n\r\n    return isAncestor;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingPathComparer };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath遍历器\r\n */\r\nclass BindingPathTraverser {\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return bindingPathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    bindingPathArray.pop();\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathTraverser };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil\r\n} from '../../binding-data/index';\r\nimport { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * EntityPath转换器\r\n */\r\nclass EntityPathConverter {\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityPathConverter };\r\n","\r\n/**\r\n * 实体路径比较器\r\n */\r\nclass EntityPathComparer {\r\n}\r\n\r\nexport { EntityPathComparer };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:25:38\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 09:39:10\r\n */\r\n\r\n\r\n/**\r\n * 路径类型\r\n */\r\nenum DataPathNodeType {\r\n\r\n  /**\r\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\r\n   */\r\n  DataId   = 'DataId',\r\n\r\n  /**\r\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\r\n   */\r\n  PropName = 'PropName',\r\n}\r\n\r\n\r\n/**\r\n * 路径节点\r\n */\r\nclass DataPathNode {\r\n\r\n  /**\r\n   * 上一节点\r\n   */\r\n  prev: DataPathNode;\r\n\r\n  /**\r\n   * 下一节点\r\n   */\r\n  next: DataPathNode;\r\n\r\n  /**\r\n   * 节点类型\r\n   */\r\n  type: DataPathNodeType;\r\n\r\n  /**\r\n   * 路径数据\r\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\r\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(type: DataPathNodeType, data: any) {\r\n    this.type = type;\r\n    this.value = data;\r\n\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n\r\nexport { DataPathNodeType, DataPathNode };\r\n","\r\n/**\r\n * 表单路径转换类\r\n */\r\nclass FormPathConverter {\r\n\r\n  /**\r\n   * ControlPathString => BingingPathArray\r\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(formPahtString: string): string[] {\r\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n}\r\n\r\nexport { FormPathConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:26:41\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-01-15 22:00:45\r\n */\r\n\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\n/**\r\n * 变更路径（简单双向列表）\r\n */\r\nclass DataPath {\r\n\r\n  /**\r\n   * 头节点\r\n   */\r\n  public head: DataPathNode;\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  public length: number;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.head = new DataPathNode(null, null);\r\n    this.length = 0;\r\n  }\r\n\r\n  /**\r\n   * 添加一个节点到头部\r\n   */\r\n  public unshift(type: DataPathNodeType, data: any) {\r\n    const newNode = new DataPathNode(type, data);\r\n    newNode.next = this.head.next;\r\n    newNode.prev = this.head;\r\n\r\n    this.head.next = newNode;\r\n    if (newNode.next) {\r\n      newNode.next.prev = newNode;\r\n    }\r\n\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 在链表最后追加一个节点\r\n   */\r\n  public push(type: DataPathNodeType, data: any) {\r\n    const tailNode = this.getTail();\r\n    const newNode = new DataPathNode(type, data);\r\n    tailNode.next = newNode;\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 获取链表尾部节点\r\n   */\r\n  public getTail(): DataPathNode {\r\n    let lastNode = this.head;\r\n    while (lastNode.next) {\r\n      lastNode = lastNode.next;\r\n    }\r\n    return lastNode;\r\n  }\r\n\r\n  /**\r\n   * 转换为数组格式\r\n   */\r\n  public toArray() {\r\n    const pathArray = [];\r\n    let currentNode = this.head.next;\r\n    while (currentNode) {\r\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为字符串格式\r\n   */\r\n  public toString() {\r\n    const pathArray = this.toArray();\r\n    const pathString = pathArray.join(', ');\r\n    return `[${pathString}]`;\r\n  }\r\n\r\n  /**\r\n   * 拷贝\r\n   */\r\n  public clone(): DataPath {\r\n    const newDataPath = new DataPath();\r\n    let curDataNode = this.head.next;\r\n    while (curDataNode) {\r\n      newDataPath.push(curDataNode.type, curDataNode.value);\r\n      curDataNode = curDataNode.next;\r\n    }\r\n    return newDataPath;\r\n  }\r\n}\r\n\r\nexport { DataPath };\r\n","\r\nimport { DataTypeInfo, DataPropGroup  } from '../../core/index';\r\nimport { Entity  } from '../../entity/index';\r\nimport { Repository, EntityManager } from '../../repository/index';\r\nimport { BindingData } from '../../binding-data/index';\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\nimport { DataPath } from './data_path';\r\n\r\n/**\r\n * 数据Path工厂类\r\n */\r\nclass DataPathCreator {\r\n\r\n  /**\r\n   * 将长路径数组或字符串转换为\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   */\r\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\r\n    const dataPath = new DataPath();\r\n    const fullPathArray = fullPathArrayOrString as string[];\r\n    if (!fullPathArray || fullPathArray.length === 0) {\r\n      return dataPath;\r\n    }\r\n\r\n    let currentNodeInfo = {\r\n      nodeValue: fullPathArray.shift(),\r\n      nodeType: DataPathNodeType.DataId,\r\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\r\n    };\r\n    while (currentNodeInfo) {\r\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\r\n\r\n      // 处理下一个节点\r\n      const nextNodeValue = fullPathArray.shift();\r\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\r\n        break;\r\n      }\r\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\r\n    }\r\n\r\n    return dataPath;\r\n  }\r\n\r\n  /**\r\n   * 获取下一个路径节点的信息\r\n   * @param parentNodeInfo 当前路径节点信息\r\n   * @param nextNodeValue 下一个路径节点的值\r\n   * @summary\r\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\r\n   * 2、多个因素混用了一个结构；\r\n   */\r\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\r\n\r\n    const parentNodeValue = parentNodeInfo.nodeValue;\r\n    const parentNodeType = parentNodeInfo.nodeType;\r\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\r\n\r\n    if (!nextNodeValue || !parentEntityTypeInfo) {\r\n      return null;\r\n    }\r\n\r\n    const nextPathNodeInfo = {\r\n      nodeValue: nextNodeValue,\r\n      nodeType: null,\r\n      entityTypeInfo: null\r\n    };\r\n\r\n\r\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\r\n    if (parentNodeType === DataPathNodeType.DataId) {\r\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\r\n    } else {\r\n\r\n      // DataNodeType=Object：必然对应一个属性信息\r\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\r\n      if (nextPropInfo.group === DataPropGroup.List) {\r\n\r\n        // EntityPropGroup=EntityList：下一个节点是List类型。\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\r\n      } else {\r\n\r\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\r\n        // EntityPropGroup=Dynamic|Plain：null\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\r\n      }\r\n    }\r\n\r\n    return nextPathNodeInfo;\r\n  }\r\n\r\n  /**\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   * 2、shortPathArrayOrString暂时只支持字符串数组\r\n   */\r\n  public static createByShortPathFromRoot(\r\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\r\n  ): DataPath {\r\n\r\n    const dataPath = new DataPath();\r\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\r\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n\r\n    // 遍历下级节点\r\n    shortPathArray.forEach((propName: string) => {\r\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\r\n      switch (propInfo.group) {\r\n        case DataPropGroup.Plain:\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          break;\r\n        case DataPropGroup.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n\r\n          break;\r\n        case DataPropGroup.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return dataPath;\r\n  }\r\n\r\n}\r\n\r\nexport { DataPathCreator };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-08-14 14:11:51\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-08-14 16:11:51\r\n */\r\n\r\nimport { DataTypeInfo } from './data_type_info';\r\n\r\n\r\n/**\r\n * 实体属性分组\r\n */\r\nenum DataPropGroup {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 动态实体类型\r\n   */\r\n  Dynamic = 'Dynamic',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List'\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实体属性信息\r\n */\r\nclass DataPropInfo {\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  public group: DataPropGroup;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * 影射名称\r\n   */\r\n  public mapping: string;\r\n\r\n  /**\r\n   * 属性类型描述\r\n   */\r\n  public typeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 元数据信息\r\n   * @todo\r\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\r\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\r\n   */\r\n  public metadataInfo?: any;\r\n  /**\r\n   * 是否vo字段\r\n   */\r\n  public isVOField?: boolean;\r\n}\r\n\r\nexport { DataPropGroup, DataPropInfo };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-07 09:05:09\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 20:35:02\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport {\r\n  NgProperty, NgFieldProperty, NgObjectProperty, NgDynamicProperty, NgListProperty,\r\n  EntityMetadataUtil,\r\n  NgEntity\r\n} from '../../entity/metadata/index';\r\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\r\n\r\n/**\r\n * 实体类型信息\r\n * @todo：\r\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\r\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\r\n */\r\nclass DataTypeInfo {\r\n  public entityInfo: NgEntity;\r\n\r\n  /**\r\n   * 数据类型\r\n   */\r\n  public type: Type<any>;\r\n\r\n  /**\r\n   * 属性集合\r\n   */\r\n  public propInfoMap: Map<string, DataPropInfo>;\r\n\r\n  /**\r\n   * 主键\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 外键\r\n   */\r\n  public foreignKey: string;\r\n\r\n  /**\r\n   * 是否为值对象\r\n   */\r\n  public get isValueObject() {\r\n    return !this.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   * @todo：不应该识别\r\n   */\r\n  constructor(type: any) {\r\n    this.type = type;\r\n    this.primaryKey = '';\r\n    this.foreignKey = '';\r\n    this.propInfoMap = new Map<string, DataPropInfo>();\r\n    this.collectEntityInfos();\r\n    this.collectPropInfos();\r\n  }\r\n  public getBindingPathByTableName(tableName: string): string {\r\n    const fullEntityPath = this.getFullEntityPath(this, tableName);\r\n    if (!fullEntityPath) {\r\n      return null;\r\n    }\r\n    fullEntityPath.splice(0, 1);\r\n    return '/' + fullEntityPath.join('/');\r\n  }\r\n  private getFullEntityPath(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = []) {\r\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      return paths;\r\n    }\r\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\r\n    if (props.length < 1) {\r\n      paths = [];\r\n      return paths;\r\n    }\r\n    if (dataTypeInfo.entityInfo) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n    }\r\n\r\n    for (let idx = 0; idx < props.length; idx++) {\r\n      const dataTypeInfo = props[idx].typeInfo;\r\n      const path = this.getFullEntityPath(dataTypeInfo, tableName);\r\n      if (!path || path.length < 1) {\r\n        continue;\r\n      } else {\r\n        paths = paths.concat(path);\r\n        return paths;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取全部属性信息\r\n   */\r\n  public getPropInfos(): DataPropInfo[] {\r\n    return Array.from(this.propInfoMap.values()).filter((propInfo) => !propInfo.isVOField);\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性的名称\r\n   */\r\n  public getPropNames(): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfos();\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性信息数组\r\n   */\r\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\r\n    const allPropInfos = Array.from(this.propInfoMap.values());\r\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\r\n      return propInfo.group === group && !propInfo.isVOField;\r\n    });\r\n    return propInfos;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性名称数组\r\n   * @param group 属性分组\r\n   */\r\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfosByGroup(group);\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据propName获取属性信息\r\n   */\r\n  public getPropInfoByName(propName: string): DataPropInfo {\r\n    if (this.propInfoMap.has(propName)) {\r\n      return this.propInfoMap.get(propName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取属性信息\r\n   */\r\n  public getPropInfoByPath(path: string[]): DataPropInfo {\r\n\r\n    // 先复制，防止shift方法产生污染\r\n    const arrPath = path.concat([]);\r\n    if (arrPath.length === 0) {\r\n      throw Error(`属性路径不能为空`);\r\n    }\r\n\r\n    // 循环查找\r\n    let typeInfo = this;\r\n    let propInfo = null;\r\n    while (typeInfo && arrPath.length > 0) {\r\n\r\n      const propName = arrPath.shift();\r\n      propInfo = typeInfo.getPropInfoByName(propName);\r\n      if (!propInfo) {\r\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\r\n      }\r\n      typeInfo = propInfo.typeInfo;\r\n\r\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\r\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\r\n        propInfo = null;\r\n        typeInfo = null;\r\n      }\r\n    }\r\n\r\n    return propInfo;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取对应属性的TypeInfo\r\n   */\r\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\r\n\r\n    // 空数组时返回\r\n    if (path.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    // 获取对应属性信息\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo.typeInfo) {\r\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\r\n    }\r\n\r\n    return propInfo.typeInfo;\r\n  }\r\n\r\n  /**\r\n   * 获取主键的属性信息\r\n   */\r\n  public getPrimaryKeyPropInfo(): DataPropInfo {\r\n    return this.getPropInfoByName(this.primaryKey);\r\n  }\r\n\r\n  /**\r\n   * 根据name获取影射名\r\n   */\r\n  public getPropMappingByName(name: string): string {\r\n    const propInfo = this.getPropInfoByName(name);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取映射名\r\n   */\r\n  public getPropMappingByPath(path: string[]): string {\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 检查属性是否属于特定的分组\r\n   */\r\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\r\n    const propInfo = this.getPropInfoByName(propName);\r\n    if (propInfo && propInfo.group === propGroup) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------------\r\n   * 属性元数据 => 属性描述信息\r\n   * --------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * 搜集所有属性信息\r\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\r\n   */\r\n  private collectPropInfos() {\r\n\r\n    // 简单属性\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        this.primaryKey = propName;\r\n      }\r\n      if (ngProperty.foreign === true) {\r\n        this.foreignKey = propName;\r\n      }\r\n      this.addPropInfo(DataPropGroup.Plain, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体属性\r\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\r\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityProperties[propName] as NgObjectProperty;\r\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n\r\n    // 动态实体属性\r\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      const ngProperty = ngDynamicProperties[propName] as NgDynamicProperty;\r\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体列表属性\r\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\r\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityListProperties[propName] as NgListProperty;\r\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n  }\r\n  private collectEntityInfos() {\r\n    const entityInfo = EntityMetadataUtil.getNgEntityMatadata(this.type);\r\n    this.entityInfo = entityInfo;\r\n\r\n  }\r\n  /**\r\n   * 添加属性信息\r\n   */\r\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: NgProperty) {\r\n\r\n    // 没有设置影射时，用属性名充当影射\r\n    mapping = mapping ? mapping : name;\r\n    let typeInfo = null;\r\n    if (type) {\r\n      typeInfo = new DataTypeInfo(type);\r\n    }\r\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\r\n    this.propInfoMap.set(name, propInfo);\r\n    // 将vo字段也加入便于表达式查找\r\n    const originalDataField = metadataInfo && metadataInfo.originalDataField;\r\n    if (originalDataField && !this.propInfoMap.has(originalDataField)) {\r\n      this.propInfoMap.set(originalDataField, { ...propInfo, isVOField: true });\r\n    } else if (metadataInfo && metadataInfo.type) {\r\n      const entityInfo = EntityMetadataUtil.getNgEntityMatadata(metadataInfo.type);\r\n      if (entityInfo && entityInfo.originalCode) {\r\n        this.propInfoMap.set(entityInfo.originalCode, { ...propInfo, isVOField: true });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { DataTypeInfo };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { IMessageService, INotifyService } from './types';\r\n/**\r\n * 表单模块路径\r\n */\r\nexport const FORM_PATH_TOKEN = new InjectionToken<string>('@farris/devkit form path token');\r\n/**\r\n * 后端消息处理器\r\n */\r\nexport const BACK_END_MESSAGE_HANDLER_TOKEN = new InjectionToken<string>('@farris/devkit_back_end_message_handler');\r\nexport const MESSAGE_SERVICE_TOKEN = new InjectionToken<IMessageService>('@farris/message_service_token');\r\nexport const NOTIFY_SERVICE_TOKEN = new InjectionToken<INotifyService>('@farris/notify_service_token');","export class Core {\r\n  public static warn(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.warn(message, ...optionalParams);\r\n  }\r\n  public static error(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.error(message, ...optionalParams);\r\n  }\r\n  public static log(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.log(message, ...optionalParams);\r\n  }\r\n  private static logable(): boolean {\r\n    return window && window.localStorage && window.localStorage.getItem('__DEVKIT_LOGABLE__') === 'true' || false;\r\n  }\r\n}","export function escape(value: string) {\r\n  if (!value || typeof value !== 'string') {\r\n    return value;\r\n  }\r\n  return value\r\n    .replace(/[\\\\]/g, '\\\\\\\\')\r\n    .replace(/[\\\"]/g, '\\\\\\\"')\r\n    .replace(/[\\/]/g, '\\\\/')\r\n    .replace(/[\\b]/g, '\\\\b')\r\n    .replace(/[\\f]/g, '\\\\f')\r\n    .replace(/[\\n]/g, '\\\\n')\r\n    .replace(/[\\r]/g, '\\\\r')\r\n    .replace(/[\\t]/g, '\\\\t');\r\n}","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface IResolver {\r\n  resolve(expr: string): string[];\r\n}\r\nexport const RESOLVER_TOKEN = new InjectionToken('@farris_resolver_token');\r\nexport const ENTITY_TEMPLATE = 'ENTITY~';\r\nexport const STATE_TEMPLATE = 'STATE~';\r\nexport const GROUP_FUNCTIONS = ['SumByProp', 'CountByProp', 'AvgByProp', 'MaxByProp', 'MinByProp', 'IsExistRecord', 'ListContains', 'ListGreaterThan', 'ListLessThan', 'ListStartWith', 'ListEndWith'];","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { IResolver, RESOLVER_TOKEN } from './types';\r\n\r\n@Injectable()\r\nexport class ResolverRegistry{\r\n  constructor(private injector: Injector, @Optional() @Inject(RESOLVER_TOKEN) public resolvers: Array<IResolver>){}\r\n}","import { Type } from '@angular/core';\r\nimport { makeDecorator } from '../metadata/index';\r\n\r\nexport const NG_REPOSITORY = 'NgRepository';\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport interface NgRepository {\r\n\r\n  /**\r\n     * API地址\r\n     */\r\n    apiUrl: string;\r\n\r\n    /**\r\n     * 实体类型\r\n     */\r\n    entityType: Type<any>;\r\n}\r\n\r\n/**\r\n * NgRepositoryDecorator\r\n */\r\nexport interface NgRepositoryDecorator {\r\n    (obj?: NgRepository): any;\r\n    new(obj?: NgRepository): any;\r\n}\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport function NgRepository(options: NgRepository) {\r\n  const decoratorFactory = makeDecorator(NG_REPOSITORY, (obj: NgRepository) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-01 19:36:51\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:46:42\r\n */\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Subject } from 'rxjs';\r\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n/**\r\n * 实体集合\r\n * @todo：应该用EntityList代替。\r\n */\r\nclass EntityCollection<T extends Entity> {\r\n\r\n  /**\r\n   * 内部实体Set\r\n   */\r\n  private innerEntitySet: Set<T>;\r\n\r\n  /**\r\n   * 内部实体Map\r\n   */\r\n  private innerEntityMap: Map<string, T>;\r\n  public changes: Subject<Modification>;\r\n\r\n  /**\r\n   * Entity集合变更流\r\n   */\r\n  public collectionChanged: Subject<Modification>;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public readonly entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public readonly primaryKey: string;\r\n\r\n  /**\r\n   * 实体当前分页信息\r\n   */\r\n  public paginationInfo: any;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityType: any) {\r\n    this.innerEntitySet = new Set<T>();\r\n    this.innerEntityMap = new Map<string, T>();\r\n    this.collectionChanged = new Subject<Modification>();\r\n    this.changes = new Subject<Modification>();\r\n    this.entityType = entityType;\r\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 实体数量\r\n   */\r\n  public count(): number {\r\n    return this.innerEntitySet.size;\r\n  }\r\n\r\n  public get entityTypeName() {\r\n    return this.entityType.name;\r\n  }\r\n  /**\r\n   * 是否包含指定主键值的实体\r\n   * @param id 主键值\r\n   */\r\n  public has(id: string): boolean {\r\n    return this.innerEntityMap.has(id);\r\n  }\r\n\r\n  /**\r\n   * 清空全部实体\r\n   */\r\n  public clear() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\r\n  }\r\n  /**\r\n   * 清空全部实体\r\n   * @param isReset 是否为重置实体操作\r\n   */\r\n  public reset() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    const modification = new Modification([], ModifyType.Load);\r\n    modification.isReset = true;\r\n    this.notifyCollectionChanged(modification);\r\n  }\r\n  /**\r\n   * 转换为实体数组\r\n   */\r\n  public toArray(): Entity[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON数组\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    const entities = this.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 批量加载实体\r\n   */\r\n  public loadEntities(entities: any[], entityCreate: boolean = false) {\r\n    this.innerEntityMap.forEach(item => {\r\n      item.unsubscribe.next();\r\n      item.unsubscribe.complete();\r\n      item.valueChanged.complete();\r\n      item.data = undefined;\r\n    });\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    const modification = new Modification(entities, ModifyType.Load);\r\n    modification.entityCreate = entityCreate;\r\n    this.notifyCollectionChanged(modification);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param entity 要追加的实体\r\n   * @param isCloned 实体是否是克隆的\r\n   */\r\n  public addEntity(entity: any, isCloned: boolean = false) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    const modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;\r\n    this.notifyCollectionChanged(new Modification([entity], modifyType));\r\n  }\r\n  /**\r\n   * 在当前行前或后插入数据\r\n   * @param entity 实体\r\n   * @param position 位置\r\n   */\r\n  public insertEntity(entity: any, position: 1 | -1) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));\r\n  }\r\n  /**\r\n   * 更新实体\r\n   * @param entity entity\r\n   * @param data 实体数据\r\n   */\r\n  public updateEntity(entity: any, data: any) {\r\n    entity.load(data);\r\n    this.notifyCollectionChanged(new Modification(data, ModifyType.Update, null, null));\r\n  }\r\n  /**\r\n   * 批量追加实体\r\n   * @param entities 要加载的实体数组\r\n   */\r\n  public addEntities(entities: any[]) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));\r\n  }\r\n  /**\r\n   * 添加实体（不切换当前行）\r\n   * @param entities 实体\r\n   */\r\n  public addData(entities: any[]) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.AddData));\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据主键值获取实体\r\n   */\r\n  getEntityById(identity: string): any {\r\n    if (this.innerEntityMap.has(identity) === false) {\r\n      return null;\r\n    }\r\n    const entity = this.innerEntityMap.get(identity);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 根据路径获取实体\r\n   */\r\n  getEntityByPath(pathArray: string[]): any {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let parentNode: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\r\n      const currentPath = pathArray[i];\r\n      if ((parentNode instanceof Entity) || (\r\n        parentNode.constructor &&\r\n        parentNode.constructor.prototype &&\r\n        parentNode.constructor.prototype.typeName === 'ConcreteEntityPrototype')\r\n      ) {\r\n        // @todo：强识了别冒号\r\n        if (currentPath.indexOf(':') === -1) {\r\n          parentNode = parentNode[pathArray[i]];\r\n        }\r\n      } else {\r\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\r\n      }\r\n    }\r\n    return parentNode;\r\n  }\r\n  /**\r\n   * id:1/a/id:2/c\r\n   * @param pathArray 路径数组\r\n   */\r\n  public getEntitiesByPath(pathArray: string[]) {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let entity: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && entity; i += 2) {\r\n      const path = pathArray[i];\r\n      entity = entity[path];\r\n      if (!(entity instanceof EntityList)) {\r\n        throw new Error('路径格式错误');\r\n      }\r\n      if ((i + 1) < pathArray.length) {\r\n        const id = pathArray[i + 1].split(':')[1];\r\n        entity = entity.get(id);\r\n      }\r\n    }\r\n    return entity;\r\n  }\r\n  /**\r\n   * 返回符合指定条件的实体集合\r\n   * @param predicate 条件谓词\r\n   */\r\n  getEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entities: any[] = Array.from(this.innerEntitySet);\r\n    const matchedEntities = entities.filter(predicate);\r\n    return matchedEntities;\r\n  }\r\n\r\n  /**\r\n   * 获取全部实体\r\n   */\r\n  getAllEntities(): any[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值删除对应实体\r\n   * @param identity 主键值\r\n   */\r\n  removeEntityById(identity: string): any {\r\n    this.verifyEntityToRemove(identity);\r\n    const entityToRemove = this.innerEntityMap.get(identity);\r\n    this.innerEntityMap.delete(identity);\r\n    this.innerEntitySet.delete(entityToRemove);\r\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\r\n    return entityToRemove;\r\n  }\r\n\r\n  removeEntitiesByIds(id: string) {\r\n  }\r\n\r\n  /**\r\n   * 删除符合条件的实体集合\r\n   */\r\n  public removeEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 移除数据（不切换当前行）\r\n   * @param predicate 过滤函数\r\n   */\r\n  public removeData(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 重置子表数据\r\n   * @param paths 路径\r\n   * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']\r\n   * @description path参数格式\r\n   * ```json\r\n   * [\r\n   * \"id:b5ed23ca-88d9-4377-98ec-92f35c1325f1\",\r\n   * \"cityMDMs\",\r\n   * \"id:373706af-622f-4aea-a006-dddbffd7bda3\",\r\n   * \"zoneMDMs\"\r\n   * ]\r\n   * ```\r\n   * @param entities 实体数组\r\n   */\r\n  public resetEntities(paths: string[], entities: any[]) {\r\n    if (paths[0].indexOf(':') === -1) {\r\n      throw new Error('路径格式错误');\r\n    }\r\n    // 获取主实体\r\n    const id = paths[0].split(':')[1];\r\n    let entity: any = this.innerEntityMap.get(id);\r\n    let entityList = entity[paths[1]] as EntityList<any>;\r\n    if (!entity) {\r\n      throw new Error(`找不到主键为${id}的实体`);\r\n    }\r\n    for (let index = 2; index < paths.length; index += 2) {\r\n      const pathInfo = paths[index].split(':');\r\n      const entityId = pathInfo[1];\r\n      // 获取到当前层级的实体\r\n      entity = entityList.get(entityId);\r\n      if (!entity) {\r\n        throw new Error(`找不到主键为${id}的实体`);\r\n      }\r\n      // 获取当前层级实体下的列表属性\r\n      entityList = entity[paths[index + 1]];\r\n    }\r\n    entityList.clear();\r\n    entityList.loadEntities(entities);\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能够添加\r\n   */\r\n  private verifyEntityToAdd(entity: any): boolean {\r\n    if (this.has(entity[this.primaryKey])) {\r\n      throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能移除\r\n   */\r\n  private verifyEntityToRemove(identity: string): boolean {\r\n    if (!this.has(identity)) {\r\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 实体集合变更流\r\n   */\r\n  private notifyCollectionChanged(modification: Modification) {\r\n    this.collectionChanged.next(modification);\r\n  }\r\n  private listenEntityChangeEvent(entity: Entity) {\r\n    if (entity) {\r\n      entity.onValueChanged.subscribe((change: Modification) => this.changes.next(change));\r\n    }\r\n  }\r\n\r\n  //#region 分页\r\n\r\n  /**\r\n   * 设置分页大小\r\n   */\r\n  set pageSize(pageSize: number) {\r\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\r\n      throw new Error('Invalid parameter:pageSize');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\r\n    this.paginationInfo = Object.assign({}, original, { pageSize });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\r\n   */\r\n  get pageSize(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageSize || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置数据总条数\r\n   */\r\n  set totalCount(total: number) {\r\n    if (typeof (total) !== 'number' || total < 0) {\r\n      throw new Error('Invalid parameter:total');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { total });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取数据总条数\r\n   */\r\n  get totalCount(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置当前页码\r\n   */\r\n  set pageIndex(pageIndex: number) {\r\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\r\n      throw new Error('Invalid parameter:pageIndex');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取当前页码\r\n   */\r\n  get pageIndex(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageIndex || 1;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 更新分页信息\r\n   * @param path 绑定路径\r\n   * @param pageInfo 分页信息\r\n   */\r\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\r\n    const original = this.paginationInfo;\r\n    const { pageIndex, pageSize } = pageInfo;\r\n    const total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;\r\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\r\n    this.setPaginationConfigByPath(path, paginationInfo);\r\n  }\r\n  /**\r\n   * 根据路径获取分页大小\r\n   * @param path 路径\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值，其中总条数key为total\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    const original = JSON.stringify(this.paginationInfo);\r\n    if (!path || path === '/') {\r\n      this.paginationInfo = value;\r\n    } else {\r\n      if (!Array.isArray(path)) {\r\n        path = path.toString().match(/[^/[\\]]+/g) || [];\r\n      }\r\n      path.slice(0, -1).reduce((prev, current, index) =>\r\n        Object(prev[current]) === prev[current]\r\n          ? prev[current]\r\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n            ? []\r\n            : {},\r\n        this.paginationInfo)[path[path.length - 1]] = value;\r\n    }\r\n\r\n    if (JSON.stringify(this.paginationInfo) !== original) {\r\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n    }\r\n    return this.paginationInfo;\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { EntityCollection };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-11 19:50:38\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../core/index';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\n\r\n\r\n/**\r\n * 实体管理类\r\n */\r\nclass EntityManager<T extends Entity> {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<Entity>;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<Entity>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    this.entityCollection = entityCollection;\r\n    this.entityType = entityCollection.entityType;\r\n  }\r\n\r\n\r\n  // #region 创建实体相关方法\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(entityData: any): T {\r\n    const entity = createEntity<T>(this.entityType, entityData);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public createEntities(entityListData: any[], entityType: any): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\r\n    return entities;\r\n  }\r\n  /**\r\n   * 批量创建下级实体\r\n   * @param fPath fpath\r\n   * @param entityListData 实体数据\r\n   */\r\n  public createEntitiesByPath(fPath: string, entityListData: any[]) {\r\n    const subPaths = fPath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    if (entityListData.length < 1) {\r\n      return [];\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fPath}`);\r\n      }\r\n    }\r\n    const entities = entityListData.map(entityData => {\r\n      return createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    });\r\n    return entities;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取实体、实体数组相关方法\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntityByPath(path: string[]): Entity {\r\n    const entity = this.getEntityNodeByPath(path) as Entity;\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntitiesByPath(path: string[]): Entity[] {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\r\n    let entities: Entity[];\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\r\n    } else {\r\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体节点\r\n   * @param path 节点路径\r\n   */\r\n  public getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\r\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\r\n    let entityNode: any = this.entityCollection;\r\n    let pathNode = dataPath.head.next;\r\n    while (pathNode) {\r\n      if (pathNode.type === DataPathNodeType.DataId) {\r\n        if (entityNode instanceof EntityCollection === true) {\r\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\r\n        } else {\r\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\r\n        }\r\n      } else {\r\n        entityNode = entityNode[pathNode.value];\r\n      }\r\n      if (!entityNode) {\r\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\r\n      }\r\n      pathNode = pathNode.next;\r\n    }\r\n    return entityNode;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取、设置属性值\r\n\r\n  /**\r\n   * 获取path对应的实体属性值\r\n   */\r\n  public getPropValueByPath(path: string[]): any {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    return entity[propName];\r\n  }\r\n\r\n  /**\r\n   * 设置path对应实体的属性值\r\n   */\r\n  public setPropValueByPath(path: string[], propValue: any): void {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    entity[propName] = propValue;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 插入实体\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityBeforeByPath(fpath: string[]) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesBeforeByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 追加实体\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加1个实体\r\n   */\r\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.addEntity(entity);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.appendEntity(entity);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath 路径 /id/childsNode/id/xxx\r\n   * @param entityData 实体数据\r\n   * @param initialData[可选] 默认值\r\n   */\r\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any, isCloned: boolean = false): Entity {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.appendNew(childEntity, isCloned);\r\n\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param fpath 父路径\r\n   * @param entityData 实体数据\r\n   * @param initialData 初始数据\r\n   * @param position 插入位置\r\n   */\r\n  public insertEntityByPath(fpath: string, entityData: any, initialData?: any, position?: 1 | -1) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.insert(childEntity, position);\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在path对应的实体集合中追加多个实体\r\n   */\r\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n      entityCollection.addEntities(entities);\r\n    } else {\r\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n      entityList.appendEntities(entities);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 删除实体\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除id对应的实体\r\n   */\r\n  // public removeEntityByPath(fpath: string[], id: string): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.removeEntityById(id);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.remove(id);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath path\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      const propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    childEntityList.remove(id);\r\n  }\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除ids对应的实体\r\n   */\r\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\r\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\r\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n    //   entityCollection.removeEntitiesByIds(ids);\r\n    // } else {\r\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n    //   entityList.remove(ids);\r\n    // }\r\n    throw new Error('Not Implemented');\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 清空变更集相关方法\r\n\r\n  /**\r\n   * 清空所有实体的变更集\r\n   */\r\n  public clearAllEntityChanges() {\r\n    const entities = this.entityCollection.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      entity.changes.splice(0, entity.changes.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空id指定的实体变更集\r\n   */\r\n  public clearEntityChangesById(id: string): void {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 清空ids数组中指定的实体的变更集\r\n   */\r\n  public clearEntityChangesByIds(ids: string[]): void {\r\n    if (!ids || ids.length < 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      this.clearEntityChangesById(id);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变更集检查相关方法\r\n\r\n  /**\r\n   * 检查所有的实体，是否有未提交的变更\r\n   */\r\n  public checkAllEntityChanges(): boolean {\r\n\r\n    const entities = this.entityCollection.toArray();\r\n    const hasChanges = entities.some((entity: Entity) => {\r\n      if (entity.changes.length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return hasChanges;\r\n  }\r\n\r\n  /**\r\n   * 检查id对应的实体，是否有未提交的变更\r\n   */\r\n  public checkEntityChangesById(id: string): boolean {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return false;\r\n    }\r\n    return entity.changes.length > 0;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 不规范方法，待废弃\r\n\r\n  /**\r\n   * 待废弃\r\n   * @deprecated\r\n   */\r\n  public clearEntityChangesByArray(idArray: string[]): void {\r\n    this.clearEntityChangesByIds(idArray);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { EntityManager };\r\n","import { Type, Injectable } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n@Injectable()\r\nexport class PaginationManager<T extends Entity> {\r\n\r\n  constructor(private entityType: any, private paginationConfig: any) {\r\n    if (this.paginationConfig === null || this.paginationConfig === undefined) {\r\n      this.paginationConfig = this.getNgListProperties();\r\n    }\r\n    // 兼容老表单，将之前的主表分页信息展开到分页配置根中\r\n    this.expandMainEntityConfig();\r\n    this.deleteMainEntityConfig();\r\n    this.removeLasts();\r\n  }\r\n  /**\r\n   * 主表分页信息展开到分页配置根中\r\n   */\r\n  private expandMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    if (this.paginationConfig.hasOwnProperty(entityName)) {\r\n      const entityConfig = this.paginationConfig[entityName];\r\n      this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\r\n    } else {\r\n      this.paginationConfig = Object.assign(this.paginationConfig, { pageSize: this.paginationConfig['pageSize'] || 0 });\r\n    }\r\n  }\r\n  /**\r\n   * 删除子表分页配置key后面的s\r\n   */\r\n  private removeLasts() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    Object.keys(this.paginationConfig).forEach(key => {\r\n      if (key !== entityName && key.endsWith('s')) {\r\n        const newKey = key.substring(0, key.length - 1);\r\n        this.paginationConfig[newKey] = this.paginationConfig[key];\r\n        delete this.paginationConfig[key];\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 删除主表实体配置信息\r\n   */\r\n  private deleteMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    delete this.paginationConfig[entityName];\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   */\r\n  public get pagination() {\r\n    return this.paginationConfig;\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationConfig;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\r\n    let config = this.paginationConfig;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    if (!Array.isArray(path)) {\r\n      path = path.toString().match(/[^/[\\]]+/g) || [];\r\n    }\r\n    path.slice(0, -1).reduce((prev, current, index) =>\r\n      Object(prev[current]) === prev[current]\r\n        ? prev[current]\r\n        : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n          ? []\r\n          : {},\r\n      this.paginationConfig)[path[path.length - 1]] = value;\r\n    return this.paginationConfig;\r\n  }\r\n\r\n  /**\r\n   * 递归获取当前实体的所有NgList属性\r\n   * @param defaultPageSize defaultPageSize\r\n   */\r\n  private getNgListProperties(defaultPageSize: number = 0) {\r\n\r\n    const getChilds = (objectType: Type<Entity>) => {\r\n      const listProperties = FieldMetadataUtil.getNgList(objectType);\r\n      let result = {};\r\n      if (Object.keys(listProperties).length < 1) {\r\n        return result;\r\n      }\r\n\r\n      Object.keys(listProperties).forEach(prop => {\r\n        let itemTypeName = listProperties[prop].dataField;\r\n        // 去掉尾部的s\r\n        if (itemTypeName.endsWith('s')) {\r\n          itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\r\n        }\r\n        result[itemTypeName] = {\r\n          pageSize: defaultPageSize\r\n        };\r\n        const child = getChilds(listProperties[prop].type);\r\n        if (child !== null && Object.keys(child).length > 0) {\r\n          result = Object.assign({}, result, child);\r\n        }\r\n      });\r\n      return result;\r\n    };\r\n    const childs = getChilds(this.entityType);\r\n    const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\r\n    return root;\r\n  }\r\n\r\n}\r\n","import { DataChange, DataChangeType } from '../core';\r\n\r\nclass DataChangeHistory {\r\n    private history: Array<DataChange>;\r\n    constructor() {\r\n        this.history = [];\r\n    }\r\n    public addChange(dataChange: DataChange) {\r\n        const changeType = DataChangeType[dataChange.changeType];\r\n        this[`on${changeType}Data`](dataChange);\r\n    }\r\n    public addChanges(dataChange: DataChange[]) {\r\n        dataChange.forEach(change => this.addChange(change));\r\n    }\r\n    public clear() {\r\n        this.history.splice(0, this.history.length);\r\n    }\r\n    public clearByIds(ids: string[]) {\r\n        this.history = this.history.filter(item => {\r\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\r\n                for (const id of ids) {\r\n                    const include = item.fpath.split('/').includes(id);\r\n                    return !include;\r\n                }\r\n            } else {\r\n                return !ids.includes(item.dataId);\r\n            }\r\n        });\r\n    }\r\n    public isChanged() {\r\n        return this.history.length > 0;\r\n    }\r\n    private onAddData(dataChange: DataChange) {\r\n        this.history.push(dataChange);\r\n    }\r\n    private onDeleteData(dataChange: DataChange) {\r\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\r\n        if (index >= 0) {\r\n            this.history.splice(index, 1);\r\n        } else {\r\n            this.history.push(dataChange);\r\n        }\r\n    }\r\n}\r\nexport { DataChangeHistory };\r\n","/**\r\n * 排序条件管理\r\n */\r\nexport class SortConditionManager {\r\n  /**\r\n   * 排序条件集合\r\n   * @description\r\n   * 排序条件数据结构描述：\r\n   * ```typescript\r\n   * key: bindingPath\r\n   * value: Array<{field:\"name|etc\",direction:\"asc|desc\"}>\r\n   * ```\r\n   */\r\n  private sorts: Map<string, Array<any>>;\r\n  constructor() {\r\n    this.sorts = new Map<string, Array<any>>();\r\n  }\r\n  /**\r\n   * 根据bingdingPath获取排序规则\r\n   * @param bindingPath bindingPath\r\n   * @param directionConverter converter\r\n   */\r\n  public getConditionsByBindingPath(bindingPath: string, directionConverter?: (direction: 'asc' | 'desc') => any) {\r\n    let conditions = this.sorts.get(bindingPath) || [];\r\n    if (conditions.length < 1) {\r\n      return conditions;\r\n    }\r\n    if (typeof directionConverter === 'function') {\r\n      conditions = conditions.map(condition => {\r\n        const sortType = directionConverter(condition.SortType);\r\n        return { SortField: condition.SortField, SortType: sortType };\r\n      });\r\n    }\r\n    return conditions;\r\n  }\r\n  /**\r\n   * 增加排序条件\r\n   * @param bindingPath 绑定路径\r\n   * @param field 排序字段\r\n   * @param direction 排序方向 asc|desc\r\n   */\r\n  public addCondition(bindingPath: string, field: string, direction: string) {\r\n    // 取消排序\r\n    if (!field || !direction) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const isBindingPathExist = this.sorts.has(bindingPath);\r\n    const condition = { SortField: field, SortType: direction };\r\n    if (!isBindingPathExist) {\r\n      this.sorts.set(bindingPath, [condition]);\r\n    } else {\r\n      const bindingPathSortConditions = this.sorts.get(bindingPath) || [];\r\n      // new condition will override the previous condition\r\n      const conditionIndex = bindingPathSortConditions.findIndex(item => item.SortField === field);\r\n      if (conditionIndex !== -1) {\r\n        bindingPathSortConditions[conditionIndex] = condition;\r\n      } else {\r\n        bindingPathSortConditions.push(condition);\r\n      }\r\n    }\r\n  }\r\n  public removeCondition(bindingPath: string, field: string) {\r\n    throw new Error('not implement!');\r\n  }\r\n  /**\r\n   * 批量增加排序条件\r\n   * @param bindingPath bindingPath\r\n   * @param fields fields , seprated by comma\r\n   * @param directions directions , seprated by comma\r\n   * @description set conditions and overwrite all conditions which has the same bindingPath\r\n   */\r\n  public setConditions(bindingPath: string, fields: string, directions: string) {\r\n    // 取消排序\r\n    if (!fields || !directions) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const filedsArray = fields.split(',').filter(item => item);\r\n    const directionsArray = directions.split(',').filter(item => item);\r\n    if (filedsArray.length !== directionsArray.length) {\r\n      throw new Error('arguments error,fields and direction are not match.');\r\n    }\r\n    const conditions = [];\r\n    filedsArray.forEach((field: string, index: number) => {\r\n      const condition = { SortField: field, SortType: directionsArray[index] };\r\n      conditions.push(condition);\r\n    });\r\n    this.sorts.set(bindingPath, conditions);\r\n  }\r\n  /**\r\n   * 清空所有排序条件\r\n   */\r\n  public clear() {\r\n    this.sorts.clear();\r\n  }\r\n\r\n}\r\n","/**\r\n * 过滤条件管理器\r\n */\r\nexport class FilterConditionManager {\r\n    private filters: Map<string, Array<any>> = new Map<string, Array<any>>();\r\n    /**\r\n     * 获取过滤条件\r\n     * @param bindingPath 绑定路径\r\n     */\r\n    public getFilters(bindingPath: string) {\r\n        return this.filters.get(bindingPath) || [];\r\n    }\r\n    /**\r\n     * 自定义合并\r\n     * @param bindingPath 绑定路径\r\n     * @param merge 合并函数\r\n     */\r\n    public mergeCondition(bindingPath: string, merge: (conditions: any) => any) {\r\n        const conditions = this.filters.get(bindingPath) || [];\r\n        const result = merge(conditions);\r\n        this.filters.set(bindingPath, result);\r\n    }\r\n    /**\r\n     * 增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    public addCondition(bindingPath: string, condition: any) {\r\n        // 通过bindingPath获取对应的过滤条件\r\n        const conditions = this.filters.get(bindingPath);\r\n        const index = this.findConditionIndex(bindingPath, condition);\r\n        if (index !== -1) {\r\n            conditions[index] = condition;\r\n        } else {\r\n            conditions.push(condition);\r\n        }\r\n    }\r\n    /**\r\n     * 批量增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public addConditions(bindingPath: string, conditions: Array<any>) {\r\n        if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {\r\n            return;\r\n        }\r\n        conditions.forEach(condition => {\r\n            this.addCondition(bindingPath, condition);\r\n        });\r\n    }\r\n    /**\r\n     * 删除过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param predicate 条件表达式\r\n     */\r\n    public removeCondition(bindingPath: string, predicate: (value: any, index: number, array: any[]) => boolean) {\r\n        const conditions: Array<{ [propName: string]: any }> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return;\r\n        }\r\n        const removes = conditions.filter(predicate);\r\n        if (removes) {\r\n            removes.forEach(condition => {\r\n                const index = this.findConditionIndex(bindingPath, condition);\r\n                if (index >= 0) {\r\n                    conditions.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 清空过滤条件\r\n     */\r\n    public clear() {\r\n        this.filters.clear();\r\n    }\r\n    /**\r\n     * 设置过滤条件数组\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public setConditions(bindingPath: string, conditions: Array<any>) {\r\n        this.filters.set(bindingPath, conditions);\r\n    }\r\n\r\n    /**\r\n     * 查找过滤条件索引\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    private findConditionIndex(bindingPath: string, condition: any) {\r\n        if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {\r\n            return -1;\r\n        }\r\n        const conditions: Array<any> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return -1;\r\n        }\r\n        return conditions.findIndex((value, index) => {\r\n            let isEqual = true;\r\n            const props = Object.keys(condition);\r\n            for (const prop of props) {\r\n                if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {\r\n                    isEqual = false;\r\n                    break;\r\n                }\r\n            }\r\n            return isEqual;\r\n        });\r\n    }\r\n}\r\n","// tslint:disable: no-bitwise\r\n// get uniqueId\r\nexport class UID {\r\n    private static previous = 0;\r\n    public static create(redix?: number) {\r\n        const timestamp = Date.now().valueOf();\r\n        let uuid = 0;\r\n        if (timestamp > UID.previous) {\r\n            UID.previous = timestamp;\r\n            uuid = timestamp;\r\n        } else {\r\n            UID.previous = UID.previous + 100;\r\n            uuid = UID.previous;\r\n        }\r\n        return uuid.toString(redix);\r\n    }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-12 15:37:11\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:44\r\n * @todo 待优化问题\r\n * 1、apiUrl是否应该在基类中，子类中的api如何传递给基类；\r\n */\r\n\r\nimport { Type, Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { DataTypeInfo } from '../core/index';\r\nimport { Modification } from '../changeset/index';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Entity, createEntity, createEntities, FieldMetadataUtil } from '../entity/index';\r\nimport { NgRepository } from './decorators';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { PaginationManager } from './pagination_manager';\r\nimport { DataChangeHistory } from './data_change_history';\r\nimport { SortConditionManager } from './sort_condition_manager';\r\nimport { FilterConditionManager } from './filter_condition_manager';\r\nimport { UID } from '../misc/uid';\r\n\r\n/**\r\n * 本地仓库\r\n * @description\r\n * # Repository\r\n * \r\n * Repository负责与后台接口交互并将接口返回的数据转换为Entity集合进行保存。因此Repository有两个重要的职责：后端交互、数据存储。\r\n * Repository中存储的数据是Entity类型，可以通过API对数据进行修改或删除。由于Repository和BindingData相互监听，对数据仓库的操作最终会通过BindingData更新到界面上。\r\n * \r\n * ## 实体操作\r\n * 实体操作仅对Repository本地已经存在的数据进行操作，不会发送请求。\r\n * \r\n * - 通过主键获取实体\r\n * \r\n *   ```javascript\r\n *    this.repository.entityCollection.getEntityById(\"id\");\r\n *   ```\r\n * \r\n * - 删除实体数据\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.removeEntityById(\"id\")\r\n *   ```\r\n * \r\n * - 清空所有实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.clear();\r\n *   ```\r\n * \r\n * - 将实体数据转换为json格式\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.toJSON();\r\n *   ```\r\n * \r\n * - 添加实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntity(entity:T);\r\n *   ```\r\n * - 添加子表实体\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.appendEntityByPath(\"/主实体Id/子表名s\",{子表JSON数据});\r\n *   ```\r\n * - 批量添加实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntities(entities:T[])\r\n *   ```\r\n *   \r\n * - 批量添加子表实体\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   const childrenEntities = entityManager.createEntitiesByPath([\"主实体Id\",\"子表名s\"], entityListData: any[])\r\n *   entityManager.appendEntitiesByPath([\"主实体Id\",\"子表名s\"],childrenEntities);\r\n *   ```\r\n * \r\n * - 批量加载实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.loadEntities(entities:T[]);\r\n *   ```\r\n * \r\n *   > 加载实体会将本地仓库数据置为加载的实体。\r\n * \r\n * - 创建实体\r\n * \r\n *   ```javascript\r\n *   this.repository.buildEntity(JSON数据);\r\n *   ```\r\n * \r\n * - 批量创建实体\r\n * \r\n *   ```javascript\r\n *   this.repository.buildEntities(JSON数据);\r\n *   ```\r\n * \r\n * - 获取子表数据\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntityByPath([\"主实体Id\",\"子表名\",\"子表id\"]);\r\n *   ```\r\n * \r\n *   !> **注意** entityManager属性仅存在于BefRepository类，因此在使用EntityManager时应先将Repository转换为BefRepository\r\n * \r\n * - 获取所有子表数据\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntitiesByPath([\"主实体Id\",\"子表名\"]);\r\n *   ```\r\n * \r\n *   > EntityManager不仅可以获取子表数据，同样可以获取主表数据。\r\n *   >\r\n *   > ```javascript\r\n *   > entityManager.getEntitiesByPath([\"主实体Id\"]);\r\n *   > ```\r\n *   \r\n * - 获取实体属性值\r\n * \r\n *   ```javascript\r\n *   const entity = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity['name'];\r\n *   // 或者\r\n *   const entity: any = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity.name;\r\n *   ```\r\n * \r\n * ## 后端交互\r\n * \r\n * ​\t通过接口操作后端数据，会直接对数据产生影响。\r\n * \r\n * - 更新实体数据\r\n * \r\n *   ```javascript\r\n *   this.repository.updateById('id');\r\n *   ```\r\n * \r\n * - 删除实体\r\n * \r\n *   ```javascript\r\n *   this.repository.removeById(\"id\");\r\n *   ```\r\n * \r\n * - 批量删除实体\r\n * \r\n *   ```javascript\r\n *   this.repository.removeByIds(ids:string[])\r\n *   ```\r\n * \r\n * - 删除下级表数据\r\n * \r\n *   ```javascript\r\n *   this.repository.removeByPath(['主表Id','子表名','子表Id'])\r\n *   ```\r\n * \r\n * - 新增主实体\r\n * \r\n *   ```javascript\r\n *   this.repository.append();\r\n *   ```\r\n * \r\n * - 新增子实体\r\n * \r\n *   ```javascript\r\n *   this.repository.appendByPath(['主表id','子表名']);\r\n *   ```\r\n * \r\n * - 加载实体数据\r\n * \r\n *   ```javascript\r\n *   this.repository.getById('id');\r\n *   ```\r\n * \r\n * - 获取主表数据\r\n * \r\n *   ```javascript\r\n *   this.repository.getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *   \r\n *   ```\r\n * \r\n *   > pageSize、pageIndex可以不传。\r\n * \r\n * - 获取主表数据（POST方法）\r\n * \r\n *   ```javascript\r\n *   this.repository.filter(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *   ```\r\n * \r\n * - 提交指定实体变更到后端\r\n * \r\n *   ```javascript\r\n *   this.repository.updateChangesById(\"id\");\r\n *   ```\r\n * \r\n * - 提交所有变更\r\n * \r\n *   ```javascript\r\n *   this.repository.updateAllChanges();\r\n *   ```\r\n * \r\n * - 应用变更（保存）\r\n * \r\n *   ```javascript\r\n *   this.repository.applyChanges();\r\n *   ```\r\n * \r\n * - 取消变更\r\n * \r\n *   ```javascript\r\n *   this.repository.cancelChanges();\r\n *   ```\r\n * \r\n * - 清除Repository所有变更\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   befRepository.entityManager.clearAllEntityChanges();\r\n *   ```\r\n *   \r\n * - 批量新增子表数据\r\n *   ```javascript\r\n *   this.repository.batchAppendByPath(path: string, defaultValues: Array<any>);\r\n *   ```\r\n *   \r\n *   > path `string`：/主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > defaultValues `Array<any>`：新增从表时的默认值，数组，元素为对象，key为字段名，value为默认值。\r\n *   \r\n * - 批量删除子表数据\r\n *   \r\n *   ```javascript\r\n *   this.repository.batchRemoveByPath(path: string, ids: string);\r\n *   ```\r\n *   \r\n *   > path `string`： /主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > ids `string` ：要删除的子表数据id，格式为`id1,id2,id3`\r\n */\r\n@Injectable()\r\nexport abstract class Repository<T extends Entity> {\r\n\r\n  // #region 私有属性\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  private innerName: string;\r\n\r\n  // #endregion\r\n\r\n  // #region 公有属性（共有属性不应该直接暴露，待包装）\r\n\r\n  /**\r\n   * API地址\r\n   */\r\n  public apiUri: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: any;\r\n\r\n\r\n  /**\r\n   * 实体类型信息\r\n   * @todo：实体层应该事先一个EntityTypeInfo，并继承DataTypeInfo。\r\n   */\r\n  public entityTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<T>;\r\n\r\n  /**\r\n   * 用户分页配置信息\r\n   */\r\n  public paginationInfo: any = null;\r\n\r\n  /**\r\n   * 数据变更历史（仅针对主表增加、各种表删除）\r\n   */\r\n  public dataChangeHistory: DataChangeHistory;\r\n\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  public filterConditionManager: FilterConditionManager;\r\n  // #endregion\r\n\r\n  // #region get/set方法\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public get primaryKey(): string {\r\n    return this.entityCollection.primaryKey;\r\n  }\r\n  public get changes(): Subject<Modification> {\r\n    return this.entityCollection.changes;\r\n  }\r\n  /**\r\n   * 实体变更集合\r\n   */\r\n  public get entityCollectionChange(): Subject<Modification> {\r\n    return this.entityCollection.collectionChanged;\r\n  }\r\n\r\n  /**\r\n   * 获取名称\r\n   */\r\n  public get name(): string {\r\n\r\n    // 1、老表单没有name属性\r\n    // 2、不能使用construcotr.name，压缩脚本会把name改掉，或者压缩成相同的名称（目前发现已知）\r\n    if (!this.innerName) {\r\n      const guid = UID.create();\r\n      this.innerName = `Repository_${guid}`;\r\n    }\r\n\r\n    return this.innerName;\r\n  }\r\n  /**\r\n   * 设置名称\r\n   */\r\n  public set name(value: string) {\r\n    this.innerName = value;\r\n  }\r\n\r\n  public paginationManager: PaginationManager<T>;\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.readMetadata();\r\n    if (this.entityType) {\r\n      this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n      this.entityCollection = new EntityCollection<T>(this.entityType);\r\n    }\r\n    this.dataChangeHistory = new DataChangeHistory();\r\n    this.sortConditionManager = new SortConditionManager();\r\n    this.filterConditionManager = new FilterConditionManager();\r\n  }\r\n\r\n  public updateEntityType(entityType: any) {\r\n    this.entityType = entityType;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection<T>(this.entityType);\r\n  }\r\n\r\n\r\n  /**\r\n   * 读取元数据\r\n   */\r\n  private readMetadata() {\r\n    const repositoryMetadata: NgRepository = MetadataUtil.getClassMetadataByName(this.constructor, 'NgRepository');\r\n    if (repositoryMetadata) {\r\n      // API地址\r\n      this.apiUri = repositoryMetadata.apiUrl;\r\n\r\n      // 实体类型\r\n      this.entityType = repositoryMetadata.entityType;\r\n    }\r\n\r\n    // // API地址\r\n    // this.apiUri = repositoryMetadata.apiUrl;\r\n\r\n    // // 实体类型\r\n    // this.entityType = repositoryMetadata.entityType;\r\n  }\r\n\r\n  /**\r\n   * 初始化分页配置\r\n   * @param config 用户分页配置\r\n   */\r\n  setPaginationConfig(config: any) {\r\n    this.paginationManager = new PaginationManager(this.entityType, config);\r\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\r\n    // tslint:disable-next-line: max-line-length\r\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.paginationManager.pagination, this.entityCollection.paginationInfo);\r\n    // 无需再单独设置一次pageSize，减少一次变更\r\n    // this.entityCollection.pageSize = pageSize;\r\n  }\r\n  /**\r\n   * 重置状态\r\n   */\r\n  public reset(): void {\r\n    this.entityCollection.reset();\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public buildEntity(data: any): T {\r\n    const entity = createEntity<T>(this.entityType, data);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public buildEntities(listData: any[]): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, listData);\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filters    过滤条件\r\n   * @param sorts      排序条件\r\n   * @param pagination 分页信息\r\n   */\r\n  abstract getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sorts 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 当前分页\r\n   */\r\n  abstract filter(filter?: any[], sorts?: any[], pageSize?: number | null, pageIndex?: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  abstract getList(): Observable<T[]>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 实体标识\r\n   */\r\n  abstract getById(id: string): Observable<T>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 主实体id\r\n   */\r\n  abstract getEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path 绑定路径\r\n   * @param ids 绑定路径对应的主键\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  abstract queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]>;\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  abstract updateById(id: string): Observable<T>;\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id 实体主键\r\n   */\r\n  abstract updateEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 创建新实体，将该实体加载到列表\r\n   */\r\n  abstract create(): Observable<any>;\r\n\r\n  // /**\r\n  //  * 创建后代实体，将该实体加载到后代列表（暂无该场景）\r\n  //  * @param path 路径\r\n  //  */\r\n  // abstract createByPath(path: string);\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  abstract append(): Observable<any>;\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   * @param path 实体路径\r\n   */\r\n  abstract appendByPath(path: string): Observable<any>;\r\n  /**\r\n   * 再指定位置插入数据\r\n   */\r\n  abstract insert(position: 1 | -1, defaultValue?: any): Observable<any>;\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path 实体路径\r\n   */\r\n  abstract insertByPath(path: string, position: 1 | -1): Observable<any>;\r\n  /**\r\n   * 根据id删除对应实体\r\n   * @param id 内码\r\n   */\r\n  abstract removeById(id: string, ifSave?: boolean): Observable<any>;\r\n\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param id ids\r\n   * @param ifSave 是否保存\r\n   * @deprecated 已废弃，该接口使用querystring传参，存在超长问题。请使用batchRemove接口替代。\r\n   */\r\n  abstract removeByIds(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  abstract batchRemove(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  abstract removeByPath(path: string, id: string);\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  abstract updateChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  abstract updateChangesByPath(path: string, id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  abstract updateAllChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  abstract applyChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  abstract applyChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  abstract cancelChanges(options?: any): Observable<boolean>;\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  abstract batchRemoveByPath(path: string, ids: string): Observable<boolean>;\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   * @description 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  abstract batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any>;\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  abstract batchAppend(defaultValues: Array<any>): Observable<any>;\r\n\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-28 15:46:07\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:53\r\n */\r\n\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from './repository';\r\nimport { EntityManager } from './entity_manager';\r\n\r\n/**\r\n * 空Repository实现\r\n */\r\n@Injectable()\r\nclass DefaultRepository<T extends Entity> extends Repository<T> {\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: EntityManager<T>;\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    // 初始化实体管理器\r\n    this.entityManager = new EntityManager(this.entityCollection);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getEntities(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  public filter(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getList(): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取子表分页的实体\r\n   * @param id 主实体id\r\n   */\r\n  public getEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path 绑定路径\r\n   * @param ids 绑定路径对应的主键\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id 实体主键\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public create(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  public append(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   */\r\n  public appendByPath(path: string): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 再指定位置插入数据\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path 实体路径\r\n   * @param position 插入位置\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id删除对应实体\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   */\r\n  public removeByIds(id: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  public removeByPath(path: string, id: string) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  public batchRemoveByPath(path: string, ids: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nexport { DefaultRepository };\r\n","import { Injectable } from '@angular/core';\r\nimport { DataTypeInfo } from '../core/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS, IResolver } from './types';\r\n\r\n@Injectable()\r\nexport class EntityDependencyResolver implements IResolver {\r\n  private entityTypeInfo: DataTypeInfo;\r\n  constructor(private repository: Repository<any>) {\r\n    this.entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n  }\r\n  /**\r\n   * 解析用户表达式中的实体依赖\r\n   * @param expr 用户配置的完整表达式\r\n   * @returns \r\n   */\r\n  public resolve(expr: string): string[] {\r\n    const groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);\r\n    const entityDependencies = this.getEntityDependency(expr);\r\n    // 去除错误的到子表的依赖\r\n    if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {\r\n      groupFunctionDependencies.forEach((dep: string) => {\r\n        const index = entityDependencies.findIndex(item => dep.startsWith(item));\r\n        if (index !== -1) {\r\n          entityDependencies.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n    // 去重\r\n    const merged = [...groupFunctionDependencies, ...entityDependencies];\r\n    const deps = [...new Set(merged)];\r\n    return deps;\r\n  }\r\n  /**\r\n   * 获取合法的实体属性表达式\r\n   * @param entityPropertyExpression 实体属性表达式\r\n   * @returns \r\n   */\r\n  private getValidEntityPropertyExpression(entityPropertyExpression: string): string[] {\r\n    const propPaths = entityPropertyExpression.split('.');\r\n    let propInfo = null;\r\n    try {\r\n      propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);\r\n    } catch (e) { }\r\n    if (!propInfo) {\r\n      if (propPaths.length > 1) {\r\n        propPaths.pop();\r\n        return this.getValidEntityPropertyExpression(propPaths.join('.'));\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return entityPropertyExpression.split('.');\r\n    }\r\n  }\r\n  /**\r\n   * 获取所有实体依赖\r\n   * @param expr 表达式字符串\r\n   * @returns \r\n   */\r\n  private getEntityDependency(expr: string): string[] {\r\n    const deps = [];\r\n    if (this.entityTypeInfo) {\r\n      // 使用正则匹配出所有实体\r\n      const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${this.entityTypeInfo.entityInfo.nodeCode}|${this.entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            console.warn(`无效的实体表达式:${item}`);\r\n            return;\r\n          }\r\n          // 去空格\r\n          item = item.trim().replace(/\\\"/g, '');\r\n          const paths = ExpressionUtil.convertToNodeCode(item, this.repository.entityTypeInfo);\r\n          item = paths.join('.');\r\n          // 截去主实体及点\r\n          item = item.substr(item.indexOf('.') + 1);\r\n          const dep = this.getValidEntityPropertyExpression(item);\r\n          if (dep && Array.isArray(dep) && dep.length > 0) {\r\n            // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      console.warn(`获取实体类型信息失败，请重新编译改表单。`);\r\n    }\r\n    return deps;\r\n  }\r\n\r\n}","import { IResolver } from \"./types\";\r\nconst CONTEXT_FUNCTIONS = ['GetContextParameter', 'GetSessionValue'];\r\nexport class StateDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const deps = [];\r\n    const regex = new RegExp(`DefaultFunction\\\\.(${CONTEXT_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\r\n    const contextFunctions: RegExpMatchArray = expr.match(regex);\r\n    if (contextFunctions && contextFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      contextFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1].trim().replace(/\\\"/g,'');\r\n          const dep = ['STATE~'];\r\n          dep.push(argument);\r\n          deps.push(dep.join('/'));\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { IResolver } from \"./types\";\r\n/**\r\n * 用户自定义参数解析器\r\n */\r\n@Injectable()\r\nexport class CommentDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const dependencies = [];\r\n    if (!expr || expr.length < 1) {\r\n      return dependencies;\r\n    }\r\n    const defineRegex = /\\/\\*\\*\\s*__define__\\((.*)\\)\\s*\\*\\//;\r\n    const defineMatchArray: RegExpMatchArray = expr.match(defineRegex);\r\n    if (defineMatchArray && defineMatchArray.length === 2) {\r\n      const defineString: string = defineMatchArray[1].trim();\r\n      let defineObject = null;\r\n      try {\r\n        defineObject = JSON.parse(defineString);\r\n      } catch (e) { console.warn(`自定义依赖解析失败：${defineString}`); }\r\n      if (defineObject && defineObject.hasOwnProperty('deps') && Array.isArray(defineObject['deps'])) {\r\n        dependencies.push(...defineObject['deps']);\r\n      }\r\n    }\r\n    return dependencies;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { CommentDependencyResolver } from \"./comment_dependency_resolver\";\r\nimport { ResolverRegistry } from \"./resolver_registry\";\r\nimport { IResolver } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ResolveService {\r\n  constructor(private injector: Injector, private resolverRegistry: ResolverRegistry) { }\r\n  public resolve(expression: string) {\r\n    const deps: string[] = [];\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {\r\n      return;\r\n    }\r\n    // 优先使用用户自定义的依赖\r\n    const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver: IResolver) => resolver instanceof CommentDependencyResolver);\r\n    if (commentDependencyResolver) {\r\n      const commentDependencies = commentDependencyResolver.resolve(expression);\r\n      if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {\r\n        deps.push(...commentDependencies);\r\n      }\r\n    }\r\n    // 如果用户已经自定义了依赖，则不再计算\r\n    if (deps && deps.length > 0) {\r\n      return deps;\r\n    }\r\n    this.resolverRegistry.resolvers.forEach((resolver: IResolver) => {\r\n      // 再解析一次也可以，返回的依然是空数组\r\n      if (resolver instanceof CommentDependencyResolver) {\r\n        return;\r\n      }\r\n      const dependency = resolver.resolve(expression);\r\n      if (dependency && dependency.length > 0) {\r\n        deps.push(...dependency);\r\n      }\r\n    });\r\n    // 去重\r\n    return [...new Set(deps)];\r\n  }\r\n}","import { BindingData, BindingList } from \"../binding-data/index\";\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core/index\";\r\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from \"../resolver/index\";\r\n\r\nexport class ExpressionUtil {\r\n  public static getGroupFunctionDependency(expr: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    const deps = [];\r\n    // 获取聚合函数依赖项\r\n    const groupFunctionRegex = new RegExp(`DefaultFunction\\\\.(${GROUP_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, \"g\");\r\n    const groupFunctions: RegExpMatchArray = expr.match(groupFunctionRegex);\r\n    if (groupFunctions && groupFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      groupFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1];\r\n          const args = argument.split(',').map(p => p.replace(/\\\"/g, ''));\r\n          if (args && args.length === 2) {\r\n            let item: any = args.join('.');\r\n            item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n            item = item.substr(item.indexOf('.') + 1);\r\n            const dep = item.split('.');\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          } else {\r\n            throw new Error(`无法解析参数： ${JSON.stringify(argument)}`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n  /**\r\n   * 将voCode转换为前端nodeCode\r\n   * @param entityExpression like Entity.Child.p1\r\n   * @returns \r\n   */\r\n  public static convertToNodeCode(entityExpression: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    // UserEntity.storys.p1\r\n    const nodeCodes = [];\r\n    if (entityTypeInfo && entityExpression.includes('.')) {\r\n      const entityExpressions = entityExpression.split('.') || [];\r\n      let dataTypeInfo = entityTypeInfo;\r\n      for (let index = 0; index < entityExpressions.length; index++) {\r\n        const prop = entityExpressions[index];\r\n        if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {\r\n          // 第一个是主表code，不能转nodeCode\r\n          if (index === 0) {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.originalCode);\r\n          } else {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);\r\n          }\r\n\r\n          // 下一级可能为子表、对象或属性\r\n          const nextNodeCode = entityExpressions[index + 1];\r\n          if (!nextNodeCode) {\r\n            break;\r\n          }\r\n          const nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);\r\n          if (!nextNodeCodePropInfo) {\r\n            break;\r\n          }\r\n          // 下一级为子表或对象\r\n          if (nextNodeCodePropInfo.typeInfo) {\r\n            dataTypeInfo = nextNodeCodePropInfo.typeInfo;\r\n          }\r\n        } else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {\r\n          const dataPropInfo = dataTypeInfo.getPropInfoByName(prop);\r\n          nodeCodes.push(dataPropInfo.name);\r\n        } else {\r\n          //throw new Error(`错误的属性参数 ${entityExpression}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo \r\n   * @param results \r\n   * @param paths \r\n   */\r\n  public static getChildrenEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        if (paths.length === 0) {\r\n          results.push([dataPropInfo.name]);\r\n        }\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          paths.push(dataPropInfo.name);\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          if (paths.length !== 0) {\r\n            paths.push(dataPropInfo.name);\r\n            results.push([...paths]);\r\n          }\r\n          paths.length = 0;\r\n        }\r\n      });\r\n    } else {\r\n      if (paths.length > 0) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n        results.push([...paths]);\r\n      }\r\n      paths.length = 0;\r\n    }\r\n  }\r\n  /**\r\n   * 获取指定绑定路径的当前行数据\r\n   * @param paths 绑定路径\r\n   * @param bindingData \r\n   * @returns \r\n   */\r\n  public static getCurrentRowByPaths(paths: string[], bindingData: BindingData): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      // 主表或下级表新增，此时事件行就是当前行，无需处理\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 从实体路径中获取级数最大的从表或从从表\r\n   * @param paths \r\n   * @returns \r\n   */\r\n  public static getAvailableChildrenPathsFromEntityPaths(paths: string[], entityTypeInfo: DataTypeInfo): string[] {\r\n    let nodeCodes = [];\r\n    paths = [...paths];\r\n    while (paths.length > 0) {\r\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n      if (dataPropInfo && dataPropInfo.group === 'List') {\r\n        nodeCodes = paths;\r\n        break;\r\n      }\r\n      paths.pop();\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 从路径中获取绑定路径\r\n   * @param paths 路径\r\n   * @param entityTypeInfo entityTypeInfo\r\n   * @returns \r\n   */\r\n  public static getBindingPath(paths: string[], entityTypeInfo: DataTypeInfo) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  public static getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n}","import { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\n\r\nexport class DataTypeInfoUtil {\r\n  /**\r\n   * 递归获取实体的所有下级实体编号\r\n   * @param dataTypeInfo \r\n   * @param results \r\n  */\r\n  public static getChildrenNodeCodes(dataTypeInfo: DataTypeInfo, results: any[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        results.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            results.push(dataPropInfo.name);\r\n            this.getChildrenNodeCodes(dataPropInfo.typeInfo, results);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { ElementRef, Injectable, Injector } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { filter } from 'rxjs/operators';\r\nimport { FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { BindingData, Change, ChangeType, BindingObject } from '../binding-data/index';\r\nimport { ValidateRule, Validation } from '../entity/validator/types';\r\nimport {\r\n  NG_FORM_CONTROL, NgFormControl,\r\n  NG_CHILD_FORM, NgChildForm,\r\n  NgValidateForm, NG_VALIDATE_FORM\r\n} from './decorators';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { DateUtil } from '../utils/index';\r\nimport { Translate } from '../i18n/translate';\r\nimport { ValidationTypes } from '../entity/validator/validation_types';\r\nimport { ValidationExecutor } from '../entity/validator/validation_executor';\r\nimport * as ValidatorJS from 'validator';\r\nimport { ValidationError } from '../entity';\r\nimport { DataPropInfo, DataTypeInfo, RunMode } from '../core';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { RuleType } from './types';\r\n/**\r\n * 表单定义\r\n */\r\n@Injectable()\r\nclass Form extends FormGroup {\r\n\r\n  /**\r\n   * 存放所有实例的映射\r\n   */\r\n  static insMap: {\r\n    [formName: string]: Form\r\n  } = {};\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public get formGroupName() {\r\n    return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';\r\n  }\r\n\r\n  /**\r\n   * 是否启用表单验证\r\n   */\r\n  public get enableValidate() {\r\n    return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;\r\n  }\r\n\r\n  public get translateService(): Translate {\r\n    return this.translate;\r\n  }\r\n  /**\r\n   * 排除的校验规则类型\r\n   */\r\n  // private excludeRuleTypes: { [propertyName: string]: string[] };\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    super({}, null, null);\r\n    this.controlIdMap = {};\r\n    this.cardControls = {};\r\n    this.isShowPropMap = {};\r\n    // this.excludeRuleTypes = {};\r\n  }\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  protected bindingData: BindingData;\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  protected bindingPath: string;\r\n  /**\r\n   * Form描述\r\n   */\r\n  private ngValidateForm: NgValidateForm;\r\n  /**\r\n   * 结构描述：FormControl\r\n   */\r\n  public ngFormControls: { [propName: string]: NgFormControl };\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metaDatas: { [propName: string]: any };\r\n  /**\r\n   * 结构描述：FormGroup\r\n   */\r\n  private ngChildForms: { [propName: string]: NgChildForm };\r\n  /**\r\n   * 存放某条数据下的属性错误信息\r\n   */\r\n  private controlIdMap: {\r\n    [id: string]: {\r\n      [propName: string]: object\r\n    }\r\n  };\r\n  /**\r\n   * 用于存储属性错误\r\n   */\r\n  private cardControls: object;\r\n  private raisedByValidateEffector = false;\r\n  public isShowValidationMsg = false;\r\n\r\n  // 属性在页面上展示状态的map,key是html中使用的属性名\r\n  public isShowPropMap: {\r\n    [domPropertyName: string]: boolean\r\n  };\r\n\r\n  private translate: Translate;\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n\r\n  /**\r\n   * 将formControl的错误信息更新到cardControl上\r\n   */\r\n  static updateErrors(propertyName, errorObj, id, value?, isGrid?) {\r\n    Object.keys(Form.insMap).forEach(key => {\r\n      const form = Form.insMap[key];\r\n      if (!form) {\r\n        return;\r\n      }\r\n      if (id) {\r\n        form.setControlValue(propertyName, value);\r\n      }\r\n      if (form.enableValidate) {\r\n        form.isFormValid(propertyName, errorObj, id, isGrid);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 设置dom属性为显示状态\r\n   * @param domPropertyName dom属性\r\n   */\r\n  public setIsShowmap(domPropertyName: string) {\r\n    this.isShowPropMap[domPropertyName] = true;\r\n  }\r\n\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.raisedByValidateEffector = false;\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n\r\n  public setControlValue(key: string, value: any) {\r\n    const bindingObject: BindingObject = this.bindingData && this.bindingData.getObject() || null;\r\n    if (bindingObject && bindingObject.controlMap) {\r\n      bindingObject.controlMap[key] = this.getGridItemControl(key, value);\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性名称获取错误信息\r\n   * @param domPropertyName dom属性名称\r\n   */\r\n  public getCardControlErrors(domPropertyName?: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  /**\r\n   * 获取字段校验错误\r\n   * @param domPropertyName \r\n   * @returns \r\n   */\r\n  public getFormControlErrors(domPropertyName?: string) {\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  public getGridControlErrors(domPropertyName: string, id: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];\r\n  }\r\n\r\n  public isFormValid(propertyName?: string, errorObj?: object, id?: string, isGrid?: boolean): boolean {\r\n    let prefix = '';\r\n    // 如果校验信息是由表达式触发的，不处理\r\n    if (this.raisedByValidateEffector) {\r\n      return;\r\n    }\r\n    if (isGrid === true) {\r\n      // 如果是grid，说明是子表，需要拼接子表frontNodeCode\r\n      const bindingPaths = this.bindingPath.split('/').filter(p => p);\r\n      if (bindingPaths.length > 0) {\r\n        prefix = bindingPaths.join('.').concat('.');\r\n      }\r\n\r\n    }\r\n    // 界面上绑定的字段名\r\n    const domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);\r\n    // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件\r\n    if (propertyName && !domPropertyName) {\r\n      return true;\r\n    }\r\n    // 若界面上不存在当前属性（动态列），不进行验证\r\n    if (domPropertyName && !this.isShowPropMap[domPropertyName]) {\r\n      return true;\r\n    }\r\n    let isValid = true;\r\n    const bindingObject = this.bindingData.getObject();\r\n    const currentId = bindingObject.primaryKeyValue;\r\n    const isSubForm = this.bindingPath !== '/';\r\n    const bindingList = this.bindingData.getList();\r\n\r\n    // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况\r\n    if (isSubForm && bindingList.innerList.size === 0) {\r\n      return true;\r\n    }\r\n    // 无数据时不做校验\r\n    if (!currentId) {\r\n      return true;\r\n    }\r\n    // dataGrid修改时，根据id，创建formControl，并设置错误对象\r\n    if (id && domPropertyName) {\r\n      // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {\r\n      //   this.controlIdMap[id] = {};\r\n      // }\r\n      this.controlIdMap[id] = this.controlIdMap[id] || {};\r\n      this.controlIdMap[id][domPropertyName] = {\r\n        errors: errorObj\r\n      };\r\n    }\r\n\r\n    // 将grid的FormControl同步到界面展示用的controlIDMap中\r\n    // const currentBindingObject = bindingList.currentItem as BindingObject;\r\n    const currentBindingObject: BindingObject = bindingObject;\r\n\r\n    if (id && id !== currentId) {\r\n      return;\r\n    }\r\n\r\n    // 验证全部字段时，清空已有的错误信息\r\n    if (!propertyName && !id) {\r\n      currentBindingObject.controlMap = {};\r\n      this.controlIdMap = {};\r\n      this.cardControls = {};\r\n    }\r\n    Object.keys(this.controls).forEach((key) => {\r\n      if (this.isShowPropMap[key] !== true) {\r\n        return;\r\n      }\r\n      // 同步实体错误信息\r\n      if (key === domPropertyName) {\r\n        // 实体验证的信息直接赋值\r\n        if (errorObj && Object.keys(errorObj).length > 0) {\r\n          // 卡片的错误\r\n          if (!isGrid) {\r\n            // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息\r\n            // 遍历错误，将validator返回的错误信息国际化\r\n            Object.keys(errorObj).map((validType: any) => {\r\n              const validationError: ValidationError = errorObj[validType] && errorObj[validType]['error'] || null;\r\n              if (validationError) {\r\n                const validateRule: ValidateRule = validationError.rule;\r\n                const ngFormControl = this.getngFormControlByBinding(validateRule.property);\r\n                if (ngFormControl) {\r\n                  validateRule.property = ngFormControl.name;\r\n                  validateRule.targetId = ngFormControl.id;\r\n                  validateRule.targetName = this.formGroupName;\r\n                  const messageTemplate = ValidationTypes.getMessage(validType);\r\n                  const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);\r\n                  errorObj[validType]['name'] = invalidMessage;\r\n                }\r\n                // todo: ngFormControl暂时不设置\r\n                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);\r\n              }\r\n            });\r\n            this.cardControls[key] = {\r\n              errors: errorObj\r\n            };\r\n          }\r\n        } else {\r\n          this.cardControls[key] = {};\r\n        }\r\n      }\r\n      if (this.controls[key] && this.controls[key].errors && Object.keys(this.controls[key].errors).length > 0) {\r\n        // 将错误同步到界面展示的位置\r\n        // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息\r\n        this.cardControls[key] = {\r\n          errors: {\r\n            ...this.cardControls[key] && this.cardControls[key].errors,\r\n            ...this.controls[key].errors\r\n          }\r\n        };\r\n        // 处理只开启前端校验，未在BE上启用必填校验的情况\r\n        if (this.cardControls) {\r\n          Object.keys(this.cardControls).forEach(key => {\r\n            if (this.cardControls[key] && this.cardControls[key].errors) {\r\n              Object.keys(this.cardControls[key].errors).forEach(validType => {\r\n                if (typeof this.cardControls[key].errors[validType] !== 'object') {\r\n                  // 获取对应的校验信息\r\n                  const validateRules: ValidateRule | ValidateRule[] = this.ngFormControls[key].validRules || [];\r\n                  const rules: ValidateRule[] = [].concat(validateRules);\r\n                  const validateRule: ValidateRule = rules.find(item => item.type === validType);\r\n                  if (validateRule) {\r\n                    validateRule.targetName = this.formGroupName;\r\n                    const messageTemplate = ValidationTypes.getMessage(validType);\r\n                    const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');\r\n                    this.cardControls[key].errors[key] = { value: this.controls[key] && this.controls[key].value || '', name: invalidMessage };\r\n                  }\r\n                }\r\n              })\r\n            }\r\n          });\r\n        }\r\n\r\n        isValid = false;\r\n        return false;\r\n      }\r\n    });\r\n    Object.keys(this.cardControls).forEach((key) => {\r\n      if (this.cardControls[key] && this.cardControls[key].errors && Object.keys(this.cardControls[key].errors).length > 0) {\r\n        isValid = false;\r\n        return false;\r\n      }\r\n    });\r\n    return isValid;\r\n  }\r\n  /**\r\n   * 更新表单错误信息\r\n   * @param errors 错误消息\r\n   */\r\n  public updateFormErrors(errors: { [domPropertyName: string]: { errors: { [ruleType: string]: { name: string, [prop: string]: any } } } }, forceShow: boolean = false, from: string = '') {\r\n    if (from && from === 'backend') {\r\n      this.clearBackendError();\r\n    }\r\n    // 原来是否已经显示错误，如果已经显示了则增加，否则替换\r\n    if (this.isShowValidationMsg === true || forceShow === true) {\r\n      this.isShowValidationMsg = true;\r\n      Object.keys(errors).forEach((key: string) => {\r\n        if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {\r\n          this.cardControls[key] = {\r\n            errors: {\r\n              ...this.cardControls[key] && this.cardControls[key].errors,\r\n              ...errors[key].errors\r\n            }\r\n          };\r\n        } else {\r\n          // 移除内存中的错误信息\r\n          this.cardControls[key] = {\r\n            errors: {}\r\n          };\r\n          // 重置控件错误信息\r\n          this.controls[key].setErrors(null);\r\n          this.controls[key].markAsTouched();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 清空后端消息\r\n   */\r\n  public clearBackendError() {\r\n    Object.keys(this.cardControls).forEach(key => {\r\n      const errors = this.cardControls[key] && this.cardControls[key].errors || null;\r\n      if (errors) {\r\n        Object.keys(errors).forEach(errorType => {\r\n          if (errorType && errorType.startsWith('backend-message-')) {\r\n            delete errors[errorType];\r\n          }\r\n        });\r\n        if (errors && Object.keys(errors).length === 0) {\r\n          delete this.cardControls[key].errors;\r\n        }\r\n      } else {\r\n        this.cardControls[key] = {};\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 根据实体属性获取ngFormControl\r\n   * @param binding 控件绑定的实体属性名\r\n   */\r\n  private getngFormControlByBinding(binding: string) {\r\n    return Object.values(this.ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl.binding && ngFormControl.binding === binding);\r\n  }\r\n  /**\r\n   * 根据dom属性和校验类型获取错误信息\r\n   * @param domProperty dom属性\r\n   * @param validateRuleType 校验类型\r\n   */\r\n  private getErrorMessage(domProperty: string, validateRuleType: string) {\r\n    const formControl = this.ngFormControls[domProperty];\r\n    if (formControl) {\r\n      const validRules = formControl.validRules;\r\n      const rules = [];\r\n      if (!Array.isArray(validRules)) {\r\n        rules.push(validRules);\r\n      } else {\r\n        rules.push(...validRules);\r\n      }\r\n      const rule = rules.find(item => item.type === validateRuleType);\r\n      if (rule) {\r\n        const controlName = formControl.name;\r\n        const messageTemplate = ValidationTypes.getMessage(validateRuleType);\r\n        const message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);\r\n        return message;\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 初始化Form\r\n   * @param context 上下文\r\n   */\r\n  public init(bindingData: BindingData, bindingPath: string, frameContext?: FrameContext) {\r\n    this.frameContext = frameContext;\r\n    this.bindingData = bindingData;\r\n    this.bindingPath = bindingPath;\r\n    this.buildForm();\r\n    // @todo: 这种方式做key，如果脚本被压缩，存在风险\r\n    Form.insMap[this.constructor.name] = this;\r\n  }\r\n\r\n  /**\r\n   * 构造表单\r\n   */\r\n  public buildForm() {\r\n    this.collectMetadatas();\r\n    // this.createChildFormArrays();\r\n    this.createChildForms();\r\n    this.createControls();\r\n  }\r\n\r\n  /**\r\n   * 重置表单验证信息\r\n   */\r\n  public resetCardValidMsg(): void {\r\n    this.cardControls = {};\r\n    // 剔除 列表中新增后取消,删除的项对应的control信息\r\n    Object.keys(this.controlIdMap).forEach(id => {\r\n      if (!this.bindingData.getList().innerList.map(x => x.id).includes(id)) {\r\n        delete this.controlIdMap[id];\r\n      }\r\n    });\r\n    this.resetFormControls();\r\n    this.setShowValidationMsg(false);\r\n  }\r\n  /**\r\n   * 更新字段校验规则\r\n   * @param propertyName 属性名\r\n   * @param isRequired 是否必填\r\n   */\r\n  public updateFieldValidateRule(propertyName: string, isRequired: boolean) {\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n\r\n    // 清空全部校验条件\r\n    if (formControl) {\r\n      formControl.clearValidators();\r\n      formControl.markAsUntouched();\r\n      formControl.markAsPristine();\r\n      formControl.setErrors([]);\r\n    }\r\n    // 动态必填场景时生成器不再在formControl上生成必填规则\r\n    // 因此validRules可能为空\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules: ValidateRule | ValidateRule[] = ngFormControl && ngFormControl.validRules || [];\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const requiredRuleIndex = validateRules.findIndex((validateRule: ValidateRule) => validateRule.type === ValidationTypes.REQUIRED);\r\n    if (isRequired) {\r\n      // 必填但控件没有必填规则，添加必填规则\r\n      if (requiredRuleIndex == -1) {\r\n\r\n        const validateRule: ValidateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };\r\n        // 扩展属性，以生成正确的错误提示\r\n        const displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';\r\n        validateRule.targetId = ngFormControl && ngFormControl.id || null;\r\n        validateRule.targetName = this.formGroupName;\r\n        validateRule.property = displayFieldName;\r\n        validateRule.field = ngFormControl && ngFormControl.binding;\r\n        validateRules.push(validateRule);\r\n      }\r\n    } else {\r\n      // 非必填场景，如果有必填规则，移除\r\n      if (requiredRuleIndex !== -1) {\r\n        validateRules.splice(requiredRuleIndex, 1);\r\n      }\r\n    }\r\n    // 整理校验规则\r\n    const validators: ValidatorFn[] = [];\r\n    Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n      const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n      if (validateFn) {\r\n        validators.push(validateFn);\r\n      }\r\n    }));\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    this.controls[propertyName].setValidators(validators);\r\n  }\r\n  public addFieldValidateRule(propertyName: string, message: string, expressionId: string, ruleType: RuleType) {\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n    if (formControl) {\r\n      // 清空全部校验条件\r\n      formControl.setErrors(null);\r\n    }\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules = this.ngFormControls[propertyName].validRules;\r\n    if (!validateRules) {\r\n      validateRules = [];\r\n    }\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const index = validateRules.findIndex((rule: ValidateRule) => rule && rule.expressionId === expressionId);\r\n    if (index !== -1) {\r\n      validateRules.splice(index, 1);\r\n    }\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    let fieldName = propertyName;\r\n    if (bindingPaths.length !== 0) {\r\n      const prefix = bindingPaths.join('/');\r\n      const binding = ngFormControl.binding || '';\r\n      const property = binding.split('.').join('/');\r\n      fieldName = `${prefix}/${property}`;\r\n    }\r\n    const context = this.frameContext;\r\n    const validateRule: ValidateRule = {\r\n      type: ruleType,\r\n      message: message,\r\n      expressionId: expressionId,\r\n      constraints: [],\r\n      bindingPath: bindingPaths.join('/'),\r\n      eval: function (options?: any) {\r\n        return context.viewModel.expression.validate(expressionId, options);\r\n      }\r\n    };\r\n    validateRules.push(validateRule);\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    // if (this.ngFormControls[propertyName] && validateRules.length > 0) {\r\n    //   const validators: ValidatorFn[] = [];\r\n    //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n    //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n    //     if (validateFn) {\r\n    //       validators.push(validateFn);\r\n    //     }\r\n    //   }));\r\n    //   this.controls[propertyName].setValidators(validators);\r\n    // }\r\n  }\r\n  /**\r\n   * 根据规则对象生成validator\r\n   * @param ruleObj: ValidateRule\r\n   */\r\n  private getValidatorByRuleObj(ruleObj: ValidateRule, ngFormControl: NgFormControl): ValidatorFn {\r\n    const { type, constraints = [], message = null } = ruleObj;\r\n    const displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n    const ruleHandlerObj = {\r\n      required: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = control.value;\r\n        let isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n        const parentPaths = this.bindingPath.split('/').filter(p => p);\r\n        const controlPaths = ngFormControl.binding.split('.');\r\n        const paths = parentPaths.concat(controlPaths);\r\n        const propInfo = this.getPropInfoByPath(paths);\r\n        const isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;\r\n        if (isMultiLangInput) {\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const currentLangValue = value && value[currentLanguage];\r\n          isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';\r\n        }\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        if (isValid && control.errors && control.errors.required) {\r\n          // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题\r\n          delete control.errors.required;\r\n          this.isFormValid(paths.join('.'));\r\n        }\r\n        return isValid ? null : { required: { value: control.value, name: invalidMessage } };\r\n      },\r\n      maxLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length > constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length < constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        // 这里只做最小值判断，如果用户未输入则不应该做判断\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value < constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const minValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = minValue.isGreaterThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);\r\n          // 假定为日期\r\n          // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或\"\"，则不对比大小，无意义\r\n          if (!constraints || constraints.length < 1 || !constraints[0]) {\r\n            return null;\r\n          }\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value < new Date(constraints[0]);\r\n          } else {\r\n            isInValid = new Date(control.value) < new Date(constraints[0]);\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      maxValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value > constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const maxValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = maxValue.isLessThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          // 假定为日期\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;\r\n          } else {\r\n            isInValid = new Date(control.value) > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      exclude: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isValid = typeof control.value === 'string' && !this.validatorJs.contains(control.value, constraints[0]);\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };\r\n      },\r\n      matches: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = (control.value === null || control.value === undefined) ? '' : control.value.toString();\r\n        const isValid = value === '' ? true : this.validatorJs.matches(value, constraints[0]);\r\n        let invalidMessage = message;\r\n        if (!invalidMessage) {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n\r\n        return isValid ? null : { matches: { value: control.value, name: invalidMessage } }\r\n      }\r\n    };\r\n    return ruleHandlerObj[type];\r\n  }\r\n\r\n  /**\r\n   * 搜集属性装饰器\r\n   */\r\n  private collectMetadatas() {\r\n    this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :\r\n      MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM,\r\n        this.translateService, ['formGroupName']);\r\n    this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);\r\n    this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);\r\n  }\r\n\r\n  private collectionFormControlMetadats(preloadMetadata: { [propName: string]: NgFormControl } = null): { [propName: string]: NgFormControl } {\r\n    const metadatas = preloadMetadata ? MetadataUtil.translateMetadataByName(preloadMetadata, this.translateService, ['name']) :\r\n      MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);\r\n    // 向验证规则中附加表单信息，用于显示验证提示。\r\n    if (metadatas) {\r\n      Object.keys(metadatas).forEach((propName: string) => {\r\n        const ngFormControl = metadatas[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const formControlId = ngFormControl.id;\r\n        if (Array.isArray(ngFormControl.validRules)) {\r\n          ngFormControl.validRules.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = formControlId;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return metadatas;\r\n  }\r\n\r\n  // 获取grid中每条数据的formControl\r\n  getGridItemControl(propName: string, value: any) {\r\n    const createControlFromRules = propertyName => {\r\n      const validators = [];\r\n      // 设置form中定义的验证规则\r\n      if (this.ngFormControls[propertyName] && Array.isArray(this.ngFormControls[propertyName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propertyName].validRules, ((ruleObj) => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n      return new FormControl(value, { validators: validators, updateOn: 'blur' });\r\n    };\r\n    return createControlFromRules(propName);\r\n  }\r\n\r\n  // 根据实体属性名获取界面绑定的属性名\r\n  getDomPropertyNameByEntityProp(propertyName: string, prefix: string = ''): string {\r\n    let domPropertyName = '';\r\n    Object.keys(this.ngFormControls).forEach(key => {\r\n      const binding = `${prefix}${this.ngFormControls[key].binding}`;\r\n      if (binding === propertyName) {\r\n        domPropertyName = key;\r\n      }\r\n    });\r\n    return domPropertyName;\r\n  }\r\n\r\n  /**\r\n   * 创建FormControl\r\n   */\r\n  createControls() {\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      const validators: ValidatorFn[] = [];\r\n\r\n      // 设置form中定义的验证规则\r\n      if (Array.isArray(this.ngFormControls[propName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propName].validRules, (ruleObj => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n\r\n      const updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';\r\n      const control = new FormControl(null, { validators: validators, updateOn: updateOn });\r\n      if (ngFormControl.binding) {\r\n        this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);\r\n      }\r\n      this.controls[propName] = control;\r\n      this[propName] = control;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建FormGroup\r\n   */\r\n  createChildForms() {\r\n    Object.keys(this.ngChildForms).forEach((propName: string) => {\r\n      const ngFormGroup = this.ngChildForms[propName];\r\n\r\n      // 构造子Form\r\n      const formGroup = new ngFormGroup.formType();\r\n      formGroup.init(this.bindingData, this.bindingPath, this.frameContext);\r\n\r\n      this.controls[propName] = formGroup;\r\n      this[propName] = formGroup;\r\n    });\r\n  }\r\n  /*\r\n  * 新增FormControls\r\n   */\r\n  addControls(column: any, converter?: ControlValueConverter) {\r\n\r\n    const updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';\r\n    const formControl = new FormControl('', { updateOn: updateOn });\r\n    const fieldPath = column.dataField;\r\n\r\n    // 日期格式  需要格式化\r\n    // this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n    if (column.editor && column.editor.binding) {\r\n      this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n      this.controls[column.editor.binding.path] = formControl;\r\n      this[column.editor.binding.path] = formControl;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 搭建control和table之间的通道\r\n   * @param control 控件\r\n   * @param bindingFieldPath 绑定的字段名\r\n   */\r\n  private setUpBindingDataPipeline(control: FormControl, bindingFieldPath, converter?: ControlValueConverter) {\r\n\r\n    if (!this.bindingData) {\r\n      throw Error('当前组件上下文中找不到BindingData，请检查！');\r\n    }\r\n\r\n    // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息\r\n    if (converter) {\r\n      converter['__FRAME_CONTEXT__'] = this.frameContext;\r\n    }\r\n\r\n    // 将bindignPath与bindingFieldPath合并\r\n    if (this.bindingPath.length > 1) {\r\n      bindingFieldPath = this.bindingPath.substr(1).replace(/\\//g, '.') + '.' + bindingFieldPath;\r\n    }\r\n    const bindingPaths: string[] = bindingFieldPath.split('.');\r\n    const propertyName = bindingPaths[bindingPaths.length - 1];\r\n    // 设置初始值\r\n    const initValue = this.getValueFromBindingData(bindingPaths, converter);\r\n    control.setValue(initValue);\r\n\r\n    // 设置初始值\r\n\r\n    // BindingData => control\r\n    this.bindingData.changes.pipe(filter((change: Change) => {\r\n      const bindingObject = this.bindingData.getObject();\r\n      const changePath = change.path.join('.');\r\n      if (change.isUdt) {\r\n        return changePath === bindingFieldPath;\r\n      }\r\n      if (change.type === ChangeType.ValueChanged) {\r\n        // path完全匹配\r\n        return changePath === bindingFieldPath;\r\n      } else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {\r\n        // 对于ObjectChanged、SelectionChanged，匹配到父级\r\n        const changePathWithDot = changePath === '' ? changePath : changePath + '.';\r\n        // 主表新增或切换时，重置错误信息\r\n        if (change && change.type === ChangeType.Load) {\r\n          this.resetCardValidMsg();\r\n        }\r\n        return bindingFieldPath.indexOf(changePathWithDot) === 0;\r\n      } else if (change.type === ChangeType.UpdateErrors) {\r\n        if (changePath === bindingFieldPath) {\r\n          this.cardControls[propertyName] = this.cardControls[propertyName] || {};\r\n          if (bindingFieldPath && this.controls[propertyName]) {\r\n            if (bindingObject.primaryKeyValue === change.id) {\r\n              this.cardControls[propertyName].errors = change.errors;\r\n            } else {\r\n              // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面\r\n              // this.cardControls[propertyName].errors = null;\r\n              // this.isFormValid(bindingFieldPath);\r\n            }\r\n          }\r\n          // 没有错误时\r\n          if (!change.path || !bindingFieldPath || !change.errors) {\r\n            this.cardControls[propertyName].errors = null;\r\n            this.isFormValid(bindingFieldPath);\r\n          }\r\n          return false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n    })).subscribe((change: Change) => {\r\n      let fullEntityProp = propertyName;\r\n      // udt字段展示时需要将父级属性名和自身属性名用'_'连接\r\n      let pathPrefix = '';\r\n      if (change.isUdt) {\r\n        if (change.isGrid) {\r\n          // grid 将从表主字段去除\r\n          change.path.shift();\r\n        }\r\n        if (change.path.length) {\r\n          pathPrefix = change.path.join('.');\r\n        }\r\n        fullEntityProp = pathPrefix;\r\n      }\r\n\r\n      const value = this.bindingData.getValue(bindingPaths, false);\r\n      const newControlValue = converter ? converter.convertFrom(value) : value;\r\n      // 设置FormControl\r\n      const domPropName = this.getDomPropertyNameByEntityProp(fullEntityProp);\r\n      this.cardControls[domPropName] = this.cardControls[domPropName] || {};\r\n      if (change.errors) {\r\n        this.cardControls[domPropName].errors = change.errors;\r\n      }\r\n      // dataGrid保存时，根据id，创建formControl，并设置错误对象\r\n      if (change.id) {\r\n        if (this.controlIdMap[change.id] && Object.keys(this.controlIdMap[change.id]).length === 0) {\r\n          this.controlIdMap[change.id] = {};\r\n        }\r\n        this.controlIdMap[change.id] = this.controlIdMap[change.id] || {};\r\n        if (change.errors) {\r\n          this.controlIdMap[change.id][domPropName] = {\r\n            errors: change.errors\r\n          };\r\n        }\r\n      }\r\n      // 如果和控件上的值一样，则不再更新控件的值\r\n      if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {\r\n        return;\r\n      }\r\n\r\n      // 正则判断是否为日期\r\n      control.setValue(newControlValue);\r\n\r\n    });\r\n\r\n    // control => BindingData\r\n    control.valueChanges.subscribe((value: any) => {\r\n      const oldBindingValue = this.bindingData.getValue(bindingPaths);\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (value && value.constructor && value.constructor.name === 'Date') {\r\n        if (oldBindingValue && converter) {\r\n          const oldValue = converter.convertFrom(oldBindingValue);\r\n          if (this.compareDate(value, oldValue) === true) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (this.isDate(converter) === true) {\r\n        if (DateUtil.isEqual(value, oldBindingValue) === true) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData\r\n      const newBindingValue = converter ? converter.convertTo(value) : value;\r\n      if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {\r\n        return;\r\n      }\r\n      // if (!this.isFormValid(propertyName, null, null, false)) {\r\n      //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};\r\n      //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);\r\n      // } else {\r\n      this.clearBackEndMessages(propertyName);\r\n      const emitEventToView = this.frameContext.appContext.runMode === RunMode.highSpeed;\r\n      this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: this.frameContext });\r\n      //}\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否是日期字段\r\n   * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；\r\n   * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；\r\n   * 3、不能使用constructor.name,压缩后name变了；\r\n   * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况\r\n   * @todo\r\n   * 为日期字段添加注解，根据注解来判断\r\n   */\r\n  private isDate(converter: ControlValueConverter): boolean {\r\n    let isDateConverter = false;\r\n\r\n    // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {\r\n    //   isDateConverter = true;\r\n    // }\r\n    if (converter && converter.hasOwnProperty('format') === true) {\r\n      isDateConverter = true;\r\n    }\r\n    return isDateConverter;\r\n  }\r\n\r\n  /**\r\n   * 比较日期（只比较年月日）\r\n   */\r\n  compareDate(srcDate: Date, dstDate: Date) {\r\n    if (!srcDate || !dstDate) {\r\n      return srcDate === dstDate;\r\n    }\r\n    const isEqual =\r\n      srcDate.getFullYear() === dstDate.getFullYear()\r\n      && srcDate.getMonth() === dstDate.getMonth()\r\n      && srcDate.getDate() === dstDate.getDate()\r\n      && srcDate.getHours() === dstDate.getHours()\r\n      && srcDate.getMinutes() === dstDate.getMinutes()\r\n      && srcDate.getSeconds() === dstDate.getSeconds();\r\n    return isEqual;\r\n  }\r\n\r\n  private getPropInfoByPath(path: Array<string>): DataPropInfo {\r\n    const entityType = this.frameContext && this.frameContext.repository.entityType || null;\r\n    if (entityType) {\r\n      const dataTypeInfo = new DataTypeInfo(entityType);\r\n      const propInfo: DataPropInfo = dataTypeInfo.getPropInfoByPath(path);\r\n      return propInfo;\r\n      // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 从BindingData中获取指定路径的值\r\n   */\r\n  private getValueFromBindingData(bindingPaths: string[], converter?: ControlValueConverter) {\r\n    const value = this.bindingData.getValue(bindingPaths);\r\n    const converteredValue = converter ? converter.convertFrom(value) : value;\r\n    return converteredValue;\r\n  }\r\n\r\n  public getEntityValueChangingListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanging) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanging;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n\r\n  public getEntityValueChangedListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanged) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanged;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n  /**\r\n   * 获取所有的前端验证规则\r\n   * @description\r\n   * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔\r\n   */\r\n  public getValidationRules(): Map<string, ValidateRule[]> {\r\n    const validatoinRules = new Map<string, ValidateRule[]>();\r\n    let parentPath = this.bindingPath;\r\n    if (parentPath.length && parentPath === '/') {\r\n      parentPath = '';\r\n    }\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      // const fieldName = `${parentPath}/${propName}`;\r\n\r\n      if (this.isShowPropMap[propName] === true || Object.keys(this.isShowPropMap).length === 0) {\r\n        const ngFormControl = this.ngFormControls[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const bindingPathArray = ngFormControl.binding ? ngFormControl.binding.split('.') : [propName];\r\n        const fieldNameArray = [parentPath, ...bindingPathArray];\r\n        const fieldName = fieldNameArray.join('/');\r\n        if (Array.isArray(ngFormControl.validRules) && ngFormControl.validRules.length > 0) {\r\n          let validationrulesToAdd = [...ngFormControl.validRules];\r\n          // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {\r\n          //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));\r\n          // }\r\n          validationrulesToAdd.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = ngFormControl.id;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n            validationRule.fullPath = fieldName;\r\n            if (this.frameContext) {\r\n              validationRule.frameContext = this.frameContext;\r\n            }\r\n          });\r\n          validatoinRules.set(fieldName, validationrulesToAdd);\r\n        } else {\r\n          validatoinRules.set(fieldName, [{\r\n            type: 'setDisplayInfo',\r\n            targetId: ngFormControl.id,\r\n            targetName: this.formGroupName,\r\n            property: displayFieldName,\r\n            fullPath: fieldName,\r\n            frameContext: this.frameContext\r\n          }]);\r\n        }\r\n      }\r\n    });\r\n    return validatoinRules;\r\n  }\r\n\r\n  public setTranslateService(translateService: Translate) {\r\n    if (!translateService) {\r\n      return;\r\n    }\r\n    this.translate = translateService;\r\n    ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());\r\n  }\r\n  /**\r\n   * 重置控件状态\r\n   */\r\n  private resetFormControls() {\r\n    if (Object.keys(this.controls).length > 0) {\r\n      Object.keys(this.controls).forEach((prop) => {\r\n        const formControl: AbstractControl = this.controls[prop];\r\n        formControl.markAsUntouched();\r\n        formControl.markAsPristine();\r\n      });\r\n    }\r\n\r\n  }\r\n  private clearBackEndMessages(domPropertyName: string) {\r\n    if (domPropertyName) {\r\n      if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n        const messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(item => item.startsWith('message-'));\r\n        const errors = { ...this.cardControls[domPropertyName]['errors'] };\r\n        messageKeys.forEach(key => delete errors[key]);\r\n        this.cardControls[domPropertyName] = { errors: errors };\r\n      }\r\n    } else {\r\n      Object.keys(this.cardControls).forEach(propertyName => {\r\n        if (this.cardControls[propertyName] && this.cardControls[propertyName]['errors'] && !!Object.keys(this.cardControls[propertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n          const messageKeys = Object.keys(this.cardControls[propertyName]['errors']).filter(item => item.startsWith('message-'));\r\n          const errors = { ...this.cardControls[propertyName]['errors'] };\r\n          messageKeys.forEach(key => delete errors[key]);\r\n          this.cardControls[propertyName] = { errors: errors };\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport { Form };\r\n","import { Repository } from '../repository/index';\r\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { ViewChange, Change, ChangeType } from './changes';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { Form } from '../form/index';\r\nimport { Pagination } from '../core';\r\nimport { BindingData } from './binding_data';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 实体操作工具类\r\n */\r\nclass EntityUtil {\r\n\r\n  /**\r\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\r\n    // 遍历bindingObject的properties进行赋值\r\n    bindingObject.properties.forEach((property: BindingProperty) => {\r\n      const propertyName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        if (entity && entity[propertyName]) {\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        if (entity && entity[propertyName]) {\r\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\r\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else {\r\n        const value = entity[propertyName];\r\n        bindingObject.setValue(propertyName, value, false, false);\r\n      }\r\n    });\r\n\r\n    this.setUpEntityPipeline(entity, bindingObject);\r\n  }\r\n\r\n  /**\r\n   * 建立entity和bindingObject之间的关联\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\r\n    // 监听entity变更\r\n    entity.onValueChanged.pipe(takeUntil(entity.unsubscribe)).subscribe((modification: Modification) => {\r\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {\r\n        return;\r\n      }\r\n      const propertyName = modification.path[modification.path.length - 1];\r\n      const primaryKeyPath = modification.path[modification.path.length - 2];\r\n\r\n      // 验证主键是否匹配\r\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\r\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\r\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\r\n          return;\r\n        }\r\n      }\r\n      // TODO:修复动态列不触发变更的问题，临时方案，应该有单独的dynamicBindingObject类\r\n      if (modification.dynamic) {\r\n        if (bindingObject['__original__']) {\r\n          return;\r\n        }\r\n        const value = modification.value;\r\n        const target = bindingObject[propertyName];\r\n        if (!target) {\r\n          return;\r\n        }\r\n        Object.keys(value).forEach((key: string) => {\r\n          if (target.getValue(key) === value[key]) {\r\n            return;\r\n          }\r\n          target.setValue(key, value[key], true, false);\r\n        });\r\n      } else {\r\n        // 值没有发生变化，不再设置\r\n        // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\r\n        if (bindingObject.getValue(propertyName) === modification.value) {\r\n          return;\r\n        }\r\n        bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\r\n      }\r\n\r\n    });\r\n    // 监听bindingObject变更\r\n    bindingObject.viewChanges.pipe(takeUntil(bindingObject.unsubscribe)).subscribe((viewChange: ViewChange) => {\r\n      const value = viewChange.value;\r\n      const propertyName = viewChange.path[0];\r\n\r\n      let pathPrefix = '';\r\n      const pathData = entity.getPaths();\r\n      const paths = pathData.path;\r\n      let id = bindingObject['id'];\r\n      bindingObject['__original__'] = true;\r\n      // if (pathData.isUdt) {\r\n      // grid中udt没有id，从父级中取出id，以便存放验证信息\r\n      const getParentId = (target: any) => {\r\n        let parentId = '';\r\n        const findId = (item: any) => {\r\n          if (item && item && item['id']) {\r\n            parentId = item['id'];\r\n            return;\r\n          } else if (item['parent']) {\r\n            findId(item['parent']);\r\n          }\r\n        };\r\n        findId(target);\r\n        return parentId;\r\n      };\r\n      id = getParentId(bindingObject);\r\n      // if (pathData.isGrid) {\r\n      //   // grid 将从表主字段去除\r\n      //   paths.pop();\r\n      // }\r\n      if (paths.length) {\r\n        pathPrefix = paths.join('.') + '.';\r\n      }\r\n      // }\r\n      const controlProp = pathPrefix + propertyName;\r\n      // 调用实体验证，并将错误信息合并到formControl上\r\n      const entityValidate = (callback?: (error: any) => void) => {\r\n        const enableValidate = Object.values(Form.insMap).find(item => item && item.enableValidate);\r\n        if (!enableValidate) {\r\n          if (typeof callback === 'function') {\r\n            callback(null);\r\n          }\r\n          return;\r\n        }\r\n        entity.validateFromUtilSync(propertyName, value, result => {\r\n          const errorObj = {};\r\n          if (result.errors && result.errors.length > 0) {\r\n            result.errors.forEach((error: any) => {\r\n              if (error.constraints) {\r\n                Object.keys(error.constraints).forEach(key => {\r\n                  errorObj[key] = {\r\n                    value: value,\r\n                    name: error.constraints[key],\r\n                    error: error\r\n                  };\r\n                });\r\n              }\r\n            });\r\n          }\r\n          // 先设置实体验证信息，再设置form验证信息，然后在form.isFormValid内部整合实体验证form验证信息\r\n          Form.updateErrors(controlProp, errorObj, id, value, pathData.isGrid);\r\n          const formErrors = viewChange['errors'] || {};\r\n          const mergedErrors = Object.assign({}, formErrors, errorObj);\r\n          let validateError = null;\r\n          if (Object.keys(mergedErrors).length > 0) {\r\n            validateError = { [propertyName]: mergedErrors };\r\n          }\r\n          if (typeof (callback) === 'function') {\r\n            callback(validateError);\r\n          }\r\n        }, viewChange.context);\r\n      };\r\n\r\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\r\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\r\n      if (bindingObject.primaryKey) {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        if (propertyName !== primaryKey) {\r\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\r\n            entityValidate();\r\n            return;\r\n          }\r\n        } else if (entity[propertyName] !== value) {\r\n          // todo: 因异步校验未结束实体主键没有被赋值，导致实体其他属性无法赋值，待后续前端校验重构时去掉\r\n          entity[propertyName] = value;\r\n          entityValidate();\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n      if (entity[propertyName] === value) {\r\n        entityValidate();\r\n        return;\r\n      }\r\n\r\n      // 调用表单验证,通过后调用实体验证\r\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\r\n      entityValidate((errors: any) => {\r\n        entity.errors = errors;\r\n        entity[propertyName] = value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\r\n    this.loadEntities(entityList.items, bindingList);\r\n    this.setUpEntityListPipeline(entityList, bindingList);\r\n  }\r\n\r\n  /**\r\n   * 建立entityList和bindingList之间的关联\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\r\n    entityList.onListChanged.subscribe((modification: Modification) => {\r\n      const target = modification['target'];\r\n      if (target && target !== entityList) {\r\n        return;\r\n      }\r\n      switch (modification.type) {\r\n        // 添加实体\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          {\r\n            const entitiesToAdd = <Entity[]>modification.value;\r\n            if (entitiesToAdd.length === 0) {\r\n              return;\r\n            }\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n\r\n            this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\r\n          }\r\n          break;\r\n        case ModifyType.Insert:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            const position = modification.position;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            this.insertEntity(modification.value[0], bindingList, position);\r\n          }\r\n          break;\r\n        // 删除实体\r\n        case ModifyType.Remove:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\r\n            const id = modification.value[bindingList.primaryKey];\r\n            bindingList.removeByIds([id]);\r\n            // this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          }\r\n          break;\r\n\r\n        // 加载实体\r\n        case ModifyType.Load:\r\n          // 检查父id是否一致，冒泡导致的变更不处理\r\n          const paths = modification.path;\r\n          const parentPath = paths[paths.length - 2];\r\n          const parentId = bindingList.parent.primaryKeyValue;\r\n          if (parentPath.indexOf(parentId) === -1) {\r\n            return;\r\n          }\r\n          const entities = modification.value;\r\n          this.loadEntities(entities, bindingList);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 监听repository变化，保持repository和bindingList同步。\r\n   * @param repository  实体仓库\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\r\n    // 初次加载\r\n    const entities = Array.from(repository.entityCollection.toArray());\r\n    this.loadEntities(entities, bindingList);\r\n\r\n    // 监听变化\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.Load:\r\n          bindingList.clear(true);\r\n          this.loadEntities(<Entity[]>modification.value, bindingList, modification.entityCreate);\r\n          break;\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\r\n          break;\r\n        case ModifyType.AddData:\r\n          this.addData(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.Insert:\r\n          this.insertEntity(modification.value, bindingList, modification.position);\r\n          break;\r\n        case ModifyType.Remove:\r\n          this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.RemoveData:\r\n          this.removeData(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.PaginationInfoChange:\r\n          // 分页信息无需同步到bindingList，放到bindingData即可。保留此处只是为了兼容产品部可能使用bindingList上分页信息的场景\r\n          bindingList.paginationInfo = <Pagination>modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // 监听BindingList数据变化\r\n    bindingList.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.PaginationInfoChange) {\r\n        const entityCollection = repository.entityCollection;\r\n        // const entityTypeName = entityCollection.entityTypeName;\r\n        // const original = entityCollection.paginationInfo[entityTypeName];\r\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\r\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntities(entities: Entity[], bindingList: BindingList, entityCreate: boolean = false) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.load(bindingObjects, entityCreate);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static appendEntities(entities: Entity[], bindingList: BindingList, isCloned: boolean = false) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.append(bindingObjects, isCloned);\r\n  }\r\n  /**\r\n   * 增加实体数据（不切换当前行）\r\n   * @param entities \r\n   * @param bindingList \r\n   */\r\n  static addData(entities: Entity[], bindingList: BindingList) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.addData(bindingObjects);\r\n  }\r\n  static insertEntity(entity: Entity, bindingList: BindingList, position: -1 | 1) {\r\n    const bindingObject = this.createBindingObject(entity, bindingList);\r\n    bindingList.insert(bindingObject, position);\r\n  }\r\n  /**\r\n   * 从bindingList移除entities对应的BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeByIds(ids);\r\n  }\r\n  static removeData(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeDataByIds(ids);\r\n  }\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return [];\r\n    }\r\n    const bindingObjects = [];\r\n    entities.forEach((entity: Entity) => {\r\n      const bindingObject = BindingObjectFactory.create(bindingList.properties);\r\n      // bindingObject['_ENTITY_'] = entity;\r\n      this.loadEntity(entity, bindingObject);\r\n\r\n      // // 为bindingObject设置默认值initialData属性\r\n      // if (entity['initialData']) {\r\n      //   bindingObject['initialData'] = entity['initialData'];\r\n      // }\r\n      bindingObjects.push(bindingObject);\r\n    });\r\n    return bindingObjects;\r\n  }\r\n  static createBindingObject(entity: Entity, bindingList: BindingList) {\r\n    const bindingObject = BindingObjectFactory.create(bindingList.properties);\r\n    this.loadEntity(entity, bindingObject);\r\n    return bindingObject;\r\n  }\r\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\r\n    // reposiroty => bindingData\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingData.pagingInfo = modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string,) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData(entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n}\r\n\r\nexport { EntityUtil };\r\n","// tslint:disable: max-line-length member-ordering\r\n/**\r\n * 绑定数据相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\r\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTypeInfo } from '../core/data-type-info';\r\nimport { Repository } from '../repository/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BindingObject } from './binding_object';\r\nimport { InvokeOnValueChange } from './types';\r\n\r\n/**\r\n * 绑定数据\r\n * @description\r\n * # BindingData\r\n * \r\n * BindingData用于直接和界面绑定，它持有一个不可变的数据集合（BindingList），数据集合中是一个个不可变的数据对象（BindingObject）。\r\n * \r\n * ## 更新界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //根据paths设置属性值\r\n * //@param paths 属性路径数组\r\n * //@param value 属性值\r\n * //@param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n * //@param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n * public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true)\r\n * ```\r\n * \r\n * ### 示例\r\n * \r\n * - 更新主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG');\r\n *   ```\r\n * \r\n * - 更新子表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['soItems','price'],20);\r\n *   ```\r\n * \r\n * - 更新业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['udt','udt_field'],'value');\r\n *   ```\r\n * \r\n * - 仅更新界面数据（不提交变更集）\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG',true,false);\r\n *   ```\r\n * \r\n *   > 注意：\r\n *   >\r\n *   > 仅更新界面数据时bindingData必须是对应组件上下文的bindingData。\r\n *   >\r\n *   > 更新数据的命令挂载到不同的组件，产生的效果也不相同。如果命令挂到了卡片视图模型，那么可以直接在构件中注入`FrameContext`或`BindingData`并更新数据就可以。但如果命令挂到了非卡片视图 * 模型，则应该先获取到卡片上下文的bindingData。\r\n *   >\r\n *   > - 命令挂在卡片视图模型:\r\n *   >\r\n *   >   ```javascript\r\n *   >   const frameContext = this.frameContext.bindingData;\r\n *   >   frameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n *   >\r\n *   > - 命令挂在非卡片视图模型：\r\n *   >\r\n *   >   ```javascript\r\n *   >   const cardFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('card-frameId');\r\n *   >   cardFrameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n * \r\n * ## 获取界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n *   ```javascript\r\n *   //获取paths对应的属性值\r\n *   //@param  paths 属性路径数组\r\n *   //@returns 属性值\r\n *   public getValue(paths: string[], useInitValue = false)\r\n *   ```\r\n * \r\n * ### 示例\r\n * \r\n * - 获取主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['name']) //'ESG'\r\n *   ```\r\n * \r\n * - 获取从表中字段属性\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['soItems','price']); // 20\r\n *   ```\r\n * \r\n * - 获取业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['udt','udt_field']); // 'value'\r\n *   ```\r\n * \r\n * ## 获取指定BindingObject\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //通过主键获取对应的bindingObject\r\n * bindingData.list.findById(id: string): BindingObject;\r\n * ```\r\n * \r\n * ### 示例\r\n * - 获取某个主实体\r\n *   ```javascript\r\n *   bindingData.list.findById(\"id\");\r\n *   ```\r\n * - 获取某个实体下子表的所有数据\r\n *   ```javascript\r\n *   // 获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   // 获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   ```\r\n * \r\n * - 获取子表某一行数据\r\n * \r\n *   ```javascript\r\n *   //获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   //获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   //子表行数据\r\n *   const childrenBindingObject = bindingList.findById('子表数据id');\r\n *   const name = childrenBindingObject.getValue(\"name\"); // 或者childrenBindingObject['name']\r\n *   ```\r\n * \r\n * ## 常见问题\r\n * \r\n * ### 赋值或取值时为何不用指定主键？\r\n * \r\n *    示例中取值或赋值时并没有指定主键值，这是由于BindingData赋值或取值时都是对当前行就行操作的，所以不需要指定主键。所以在计算&行切换场景下会导致取值或赋值错误，如本来想给第一行的某个字 * 段赋值，结果由于行切换导致把值赋给了其他行。\r\n * \r\n *    如果遇到赋值错误的情况可以通过BindingObject赋值或取值。\r\n * \r\n * ### 通过bindingData赋值了，界面也刷新了，但保存不上\r\n * \r\n *    这种情况多发生在有后端请求的情况下，比如通过bindingData赋值后紧接着有一个后端请求。由于bindingData赋值是异步的（目前是），这就可能导致赋值还没有结束（还没有产生变更）请求就发送 * 了，从而请求中没有对应的变更，请求回来后会默认清空本地变更，从而导致界面上显示数据已经修改，但数据库中数据并未修改。\r\n * \r\n *    解决该类问题可以通过实体赋值的方式，给实体赋值是同步的，赋值完成后变更就会产生，这样再发送请求时就可以把变更带到后端。\r\n */\r\n@Injectable()\r\nclass BindingData {\r\n\r\n  /**\r\n   * 数据类型描述\r\n   */\r\n  private dataTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 绑定该路径\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 可绑定的属性描述\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 行切换事件暂停抛出\r\n   */\r\n  public rowSelectedEventSuspend: boolean;\r\n  /**\r\n   * 数据列表\r\n   */\r\n  public list: BindingList;\r\n  private paginationInfo = null;\r\n\r\n  public set pagingInfo(pagingInfo: any) {\r\n    this.paginationInfo = pagingInfo;\r\n    this.firePagingChangeEvent();\r\n  }\r\n\r\n  public get pagingInfo() {\r\n    return this.paginationInfo;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param skip 跳过\r\n   * @param take 获取\r\n   * @param bindingPath 路径\r\n   */\r\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      // 找到父级\r\n      // 获取当前实体上级的主键\r\n      const paths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n      const parentObject = this.getValue(paths) as BindingObject;\r\n      if (parentObject && parentObject[parentObject.primaryKey]) {\r\n        // const key = `${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n        const key = `${nodeCode}`;\r\n        pagingInfo = pagingInfo[key] || {};\r\n        pagingInfo.pageIndex = ((skip / take) || 0) + 1;\r\n        pagingInfo.pageSize = take || 0;\r\n      }\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  public updatePagingInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number }, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, pageInfo);\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      pagingInfo[nodeCode] = Object.assign(pagingInfo[nodeCode], pageInfo);\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  private firePagingChangeEvent() {\r\n    this.list.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: this.bindingPath && this.bindingPath.split('/').filter(p => p) || [],\r\n      value: this.paginationInfo\r\n    });\r\n  }\r\n  /**\r\n   * 变更集\r\n   */\r\n  public get changes(): Subject<Change> {\r\n    return this.list.changes;\r\n  }\r\n\r\n  /**\r\n   * 值变化执行器工厂，根据路径产生执行器\r\n   */\r\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\r\n\r\n  /**\r\n   * 设置值变化执行器工厂\r\n   * @param value 值变化执行器工厂\r\n   */\r\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\r\n    this.valueChangeInvokerFactory = value;\r\n  }\r\n  public getValudChangeInvokerFactory() {\r\n    return this.valueChangeInvokerFactory;\r\n  }\r\n\r\n  /**\r\n   * 初始化（已废弃）\r\n   */\r\n  public init(repository: Repository<any>, bindingPath: string) {\r\n    this.initByRepository(repository, bindingPath);\r\n  }\r\n\r\n  /**\r\n   * 根据Repository对BindingData进行初始化\r\n   */\r\n  public initByRepository(repository: Repository<any>, bindingPath: string) {\r\n    this.bindingPath = bindingPath;\r\n\r\n    this.properties = PropertyUtil.getProperties(repository.entityType);\r\n    this.list = BindingListFactory.create(this.properties);\r\n    // 从repository初始化bindingData\r\n    this.pagingInfo = repository.entityCollection.paginationInfo;\r\n    // @todo\r\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\r\n    EntityUtil.loadRepository(repository, this.list);\r\n    this.dataTypeInfo = repository.entityTypeInfo;\r\n\r\n    this.extendProperties(this.properties);\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public initByBindingList(bindingList: BindingList, bindingPath: string) {\r\n    this.list = bindingList;\r\n    this.bindingPath = bindingPath;\r\n    this.extendProperties(this.list.properties);\r\n  }\r\n  public setDataTypeInfo(dataTypeInfo: DataTypeInfo) {\r\n    this.dataTypeInfo = dataTypeInfo;\r\n  }\r\n  /**\r\n   * 获取界面数据\r\n   * @param paths 属性路径数组\r\n   * @param useInitValue 是否使用默认值，默认为`false`\r\n   * @returns 属性值\r\n   */\r\n  public getValue(paths: string[], useInitValue = false) {\r\n    let target: any = this.list;\r\n    paths.forEach((path: string) => {\r\n      if (target) {\r\n        target = target[path];\r\n      }\r\n    });\r\n    if (useInitValue === true && paths && paths.length > 0) {\r\n      const initValue = this.getInitValueByPaths(paths);\r\n      if (target === undefined && target !== initValue) {\r\n        target = initValue;\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 该方法可以更新绑定层数据，从而达到更新界面数据的目的，进而更新本地仓库实体数据，产生变更，下次请求时会将变更带到后端并更新后端数据。\r\n   * @param paths 属性路径数组\r\n   * @param value 属性值\r\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n   * @description\r\n   * ## 示例\r\n   * \r\n   * ### 更新界面数据\r\n   * 使用该方法时只传递path和value参数，其余参数使用默认值。该用法会更新界面数据，同时更新实体数据，实体数据更新时会产生变更，这样在下次请求时会将该变更带到后端，\r\n   * 进而更新后端数据。\r\n   * ```typescript\r\n   * this.frameContext.bindingData.setValue(paths,value);\r\n   * ```\r\n   * \r\n   * ### 仅更新界面数据\r\n   * 有些场景下我们希望只更新界面的数据，不希望对后端数据产生影响，此时除传递paths和value参数外，还需要将emitEventToView设为true，emitEventToEntity设为false，\r\n   * 此时必须使用对应BindingData的setValue方法：\r\n   * ```typescript\r\n   * const tableFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n   * tableFrameContext.bindingData.setValue(paths,value,true,false);\r\n   * ```\r\n   * ## 注意事项\r\n   * setValue为异步方法，如果调用该方法后随即发送后端请求，此时实体变更尚未产生，但请求已经发送，变更无法带到后端，导致变更丢失，出现界面上显示数据已经修改，\r\n   * 但后端并未修改的问题。\r\n   * 因此，如果赋值后随即发送请求应该使用实体赋值的方法。\r\n   */\r\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true, errors: any = {}, context?: any) {\r\n\r\n    if (!paths || paths.length === 0) {\r\n      throw Error('路径不能为空');\r\n    }\r\n    const parentPaths = paths.slice(0, paths.length - 1);\r\n    const propName = paths[paths.length - 1];\r\n\r\n    let parent = this.getValue(parentPaths);\r\n    if (!parent) {\r\n      throw Error('找不到要设置的对象');\r\n    }\r\n    if (parent instanceof BindingData) {\r\n      parent = parent.list.currentItem;\r\n    } else if (parent instanceof BindingList) {\r\n      parent = parent.currentItem;\r\n    }\r\n    if (!!this.valueChangeInvokerFactory) {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, this.valueChangeInvokerFactory(paths), context);\r\n    } else {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, null, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据paths清空属性值\r\n   */\r\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true, context?: any) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    } else {\r\n\r\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\r\n      const oldValue = this.getValue(paths);\r\n      if (typeof oldValue === 'number') {\r\n        initValue = 0;\r\n      } else {\r\n        initValue = '';\r\n      }\r\n    }\r\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity, null, context);\r\n  }\r\n\r\n  /**\r\n   * 获取当前列表\r\n   */\r\n  public getList() {\r\n    if (!this.bindingPath || this.bindingPath === '/') {\r\n      return this.list;\r\n    }\r\n\r\n    const bindingPath = this.bindingPath.substr(1);\r\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.getValue(bindingPathArray);\r\n  }\r\n\r\n  /**\r\n   * 获取当前对象\r\n   */\r\n  public getObject() {\r\n    const bindingList = this.getList();\r\n    return bindingList.currentItem;\r\n  }\r\n  /**\r\n   * 绑定路径（仅路径部分，不包括属性）\r\n   * @param bindingPath 绑定路径\r\n   */\r\n  public getPath(bindingPath?: string[]) {\r\n    const bindingPaths = bindingPath.filter(p => p);\r\n    const path = [`${this.list.primaryKey}:${this.list.currentId}`];\r\n\r\n    bindingPaths.forEach((item: string) => {\r\n      path.push(item);\r\n      const list = this[item] as BindingList;\r\n      if (list) {\r\n        path.push(`${list.primaryKey}:${list.currentId}`);\r\n      }\r\n    });\r\n    return path;\r\n  }\r\n  /**\r\n   * 清空绑定数据\r\n   */\r\n  public reset() {\r\n    this.list.clear();\r\n  }\r\n  /**\r\n   * 通过绑定路径获取属性初始值\r\n   * @param paths 绑定路径\r\n   */\r\n  private getInitValueByPaths(paths: Array<string>) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo && this.dataTypeInfo.getPropInfoByPath(paths) || null;\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    }\r\n    return initValue;\r\n  }\r\n  /**\r\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\r\n   * @param properties 关联实体的属性集合\r\n   */\r\n  private extendProperties(properties: BindingProperty[]) {\r\n    properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.list.currentItem[propName];\r\n        },\r\n        set: (value: any) => {\r\n          this.list.currentItem[propName] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingData };\r\n","/**\r\n * 绑定列表相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n// tslint:disable: max-line-length\r\n\r\nimport { List } from 'immutable';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingData } from './binding_data';\r\nimport { TranslateService } from '../i18n/translate_service';\r\n\r\n/**\r\n * BindingList是一个BindingObject集合\r\n */\r\nclass BindingList {\r\n  public __type__ = 'BindingList';\r\n  /**\r\n   * immutable的BindingObject列表\r\n   */\r\n  private innerList: List<BindingObject>;\r\n\r\n  private emptyCurrentItem: BindingObject;\r\n\r\n  /**\r\n   * 关联实体的属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 父对象\r\n   */\r\n  public parent: BindingObject;\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 当前行对应的绑定对象的内码\r\n   */\r\n  public currentId: string;\r\n\r\n  //#region 分页相关\r\n\r\n  /**\r\n   * 分页信息\r\n   */\r\n  public _paginationInfo: any = null;\r\n\r\n  set paginationInfo(sPaginationInfo: any) {\r\n    this._paginationInfo = sPaginationInfo;\r\n    if (this._paginationInfo === sPaginationInfo) {\r\n      return;\r\n    }\r\n    this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this._paginationInfo\r\n    });\r\n  }\r\n\r\n  get paginationInfo(): any {\r\n    return this._paginationInfo;\r\n  }\r\n  /**\r\n   * 获取页码\r\n   */\r\n  get pageIndex() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\r\n      return this.paginationInfo.pageIndex;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   */\r\n  get pageSize() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\r\n      return this.paginationInfo.pageSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取数据总项数\r\n   */\r\n  get total() {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 获取跳过的数据条数\r\n   */\r\n  get skip() {\r\n    const pageIndex = this.pageIndex;\r\n    const pageSize = this.pageSize;\r\n    return (pageIndex - 1) * pageSize;\r\n  }\r\n\r\n  /**\r\n   * 前台设置分页信息\r\n   * @param skip skip\r\n   * @param take take\r\n   */\r\n  public setPaginationInfo(skip: number, take: number) {\r\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\r\n      pageSize: take,\r\n      pageIndex: skip / take + 1\r\n    });\r\n    /*this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });*/\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  /**\r\n   * 当前行对应的绑定对象\r\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\r\n   */\r\n  public get currentItem(): BindingObject {\r\n    const currentItem = this.findById(this.currentId);\r\n    if (!currentItem) {\r\n      if (!this.emptyCurrentItem) {\r\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\r\n      }\r\n      return this.emptyCurrentItem;\r\n    }\r\n    return currentItem;\r\n  }\r\n\r\n  /**\r\n   * 绑定对象的数量\r\n   */\r\n  public get length(): number {\r\n    return this.innerList.count();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.changes = new Subject<Change>();\r\n    this.innerList = List<BindingObject>();\r\n    this.currentId = null;\r\n  }\r\n\r\n  /**\r\n   * 添加[Symbol.iterator]，使之能通过for of遍历\r\n   */\r\n  [Symbol.iterator]() {\r\n    const self = this;\r\n    let index = -1;\r\n    const size = this.innerList.size;\r\n\r\n    return {\r\n      next: function () {\r\n        index++;\r\n        if (index < size) {\r\n          return { done: false, value: self.innerList.get(index) };\r\n        }\r\n        return { done: true, value: undefined };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public load(objects: BindingObject[], entityCreate: boolean = false): void {\r\n    // 重置列表\r\n    this.innerList = this.innerList.clear();\r\n    if (objects.length !== 0) {\r\n      // 加载数据\r\n      objects.forEach((object: BindingObject) => {\r\n        this.add(object);\r\n      });\r\n\r\n      // 设置默认当前行\r\n      const currentItem = this.findById(this.currentId);\r\n      if (!currentItem) {\r\n        const firstId = objects[0][this.primaryKey];\r\n        this.setCurrentId(firstId, false, false);\r\n      }\r\n    } else {\r\n      this.currentId = null;\r\n    }\r\n    const change: Change = {\r\n      type: ChangeType.Load,\r\n      path: [],\r\n      value: objects\r\n    };\r\n    change.create = entityCreate;\r\n    // 触发事件\r\n    this.changes.next(change);\r\n  }\r\n\r\n  /**\r\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public append(objects: BindingObject[], isCloned: boolean = false): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 当前行为新追加的最后1行\r\n    const lastId = objects[objects.length - 1][this.primaryKey];\r\n    this.setCurrentId(lastId, true, true);\r\n    // 触发事件\r\n    const change: Change = {\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects\r\n    };\r\n    if (isCloned) {\r\n      change.isCloned = true;\r\n    }\r\n    this.changes.next(change);\r\n  }\r\n  /**\r\n   * 增加数据\r\n   * @param objects 实体\r\n   * @description 增加实体数据，但不切换当前行\r\n   */\r\n  public addData(objects: BindingObject[]): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects\r\n    });\r\n  }\r\n  public insert(object: BindingObject, position?: 1 | -1) {\r\n    const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\r\n    // 加载BindingObject\r\n    if (position === 1) {\r\n      this.innerList = this.innerList.insert(currentIndex + 1, object);\r\n    } else if (position === -1) {\r\n      this.innerList = this.innerList.insert(currentIndex, object);\r\n    } else {\r\n      this.innerList = this.innerList.push(object);\r\n    }\r\n    object.parent = this;\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n\r\n    this.setCurrentId(object.primaryKeyValue, true, true);\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: object\r\n    });\r\n  }\r\n  /**\r\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\r\n   * @param object 绑定对象\r\n   */\r\n  public add(object: BindingObject) {\r\n    this.innerList = this.innerList.push(object);\r\n    object.parent = this;\r\n\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除主键值数组对应的绑定对象。\r\n   * @param ids 主键值数组\r\n   */\r\n  public removeByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let nextCurrentId = this.currentId;\r\n    ids.forEach((id: string) => {\r\n\r\n      // 如果当前行被删除，计算下一当前行\r\n      if (id === nextCurrentId) {\r\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\r\n      }\r\n\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 重新设置当前行\r\n    if (this.innerList.count() === 0) {\r\n      this.currentId = null;\r\n    } else {\r\n      this.setCurrentId(nextCurrentId, false, false);\r\n    }\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 删除数据（不切换当前行）\r\n   * @param ids ids\r\n   */\r\n  public removeDataByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear(clearOnly: boolean = false) {\r\n    this.innerList.forEach((item: BindingObject) => {\r\n      item.unsubscribe.next();\r\n      item.unsubscribe.complete();\r\n      item.changes.complete();\r\n      item.viewChanges.complete();\r\n      // item.properties =undefined;\r\n    });\r\n    this.innerList = this.innerList.clear();\r\n    this.currentId = null;\r\n    if (!clearOnly) {\r\n      this.changes.next({\r\n        type: ChangeType.Remove,\r\n        path: [],\r\n        value: []\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\r\n   * - 如果被删除的行是最后1行，则上移1行；\r\n   * - 其他情况，下移1行。\r\n   */\r\n  public getCurrentIdBeforeDeleting(): string {\r\n    let nextIndex = -1;\r\n    const currentIndex = this.getIndexById(this.currentId);\r\n    if (currentIndex === this.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n    return this.getIdByIndex(nextIndex);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值获取对应绑定对象\r\n   * @param   id 要查找的主键值\r\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\r\n   */\r\n  public findById(id: string): BindingObject | null {\r\n    let target: BindingObject;\r\n    target = this.innerList.find((item) => {\r\n      return item.getValue(this.primaryKey) === id;\r\n    });\r\n    return target === undefined ? null : target;\r\n  }\r\n\r\n  /**\r\n   * 将主键值为id的绑定对象设置为当前行\r\n   * @param  id        要设置的主键值\r\n   * @param  emitEvent 是否发送当前行变更事件\r\n   * @param  force 强制切换\r\n   */\r\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true, force: boolean = false): void {\r\n    if (this.currentId === id && !force) {\r\n      return;\r\n    }\r\n\r\n    // 不存在时设置为null\r\n    // const currentObj = this.findById(id);\r\n    // if (!currentObj) {\r\n    //   this.currentId = null;\r\n    // } else {\r\n    //   this.currentId = id;\r\n    // }\r\n\r\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\r\n    const currentObj = this.findById(id);\r\n    if (!currentObj && !force) {\r\n      return;\r\n    }\r\n    this.currentId = id;\r\n\r\n    // 发出行切换事件\r\n    if (emitEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.SelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n\r\n    // 是否发送全局的行切换事件\r\n    if (emitGlobalEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.GlobalSelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据主键值为id的绑定对象的索引\r\n   * @param id 主键值\r\n   * @returns 找到时返回对应的index，找不到时返回-1\r\n   */\r\n  public getIndexById(id: string): number {\r\n    return this.innerList.findIndex((obj: BindingObject) => {\r\n      return obj[this.primaryKey] === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据索引位置获取对应绑定对象的主键值\r\n   * @reutrn 找到时返回对应主键值，找不到返回null\r\n   */\r\n  public getIdByIndex(index: number): string {\r\n\r\n    if (index < 0 || index > this.length) {\r\n      return null;\r\n    }\r\n\r\n    if (this.innerList.has(index) === false) {\r\n      return null;\r\n    }\r\n    const obj = this.innerList.get(index);\r\n    return obj[this.primaryKey];\r\n  }\r\n\r\n  /**\r\n   * 转换为BindingObject数组\r\n   */\r\n  public toArray(): BindingObject[] {\r\n    return this.innerList.toArray();\r\n  }\r\n  /**\r\n   * 交互数据位置\r\n   * @param id1 id1\r\n   * @param id2 id2\r\n   */\r\n  public swapById(id1: any, id2: any) {\r\n    const item1 = this.innerList.find(element => element.primaryKeyValue === id1);\r\n    const item2 = this.innerList.find(element => element.primaryKeyValue === id2);\r\n    this.innerList = this.innerList.map((bindingObject: BindingObject, index: number) => {\r\n      if (bindingObject.primaryKeyValue === id1) {\r\n        return item2;\r\n      } else if (bindingObject.primaryKeyValue === id2) {\r\n        return item1;\r\n      } else return bindingObject;\r\n    }).toList();\r\n    this.changes.next({\r\n      type: ChangeType.Swap,\r\n      path: []\r\n    });\r\n  }\r\n  /**\r\n   * 转换为JSON对象\r\n   * @returns 普通对象数组\r\n   */\r\n  public toJSON(options?: any): any[] {\r\n    const result = [];\r\n    this.innerList.forEach((obj: BindingObject) => {\r\n      result.push(obj.toJSON(options));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 对bindingList就行排序\r\n   * @param string 排序字段\r\n   * @param directions 排序规则字段\r\n   * @param options 参数\r\n   */\r\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\r\n    if (!fields || fields.length < 1 || !directions || directions.length < 1) {\r\n      throw new Error('sortBy:argument error');\r\n    }\r\n    // 默认升序\r\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',') : fields || [];\r\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',') : directions || [];\r\n    // 排序字段和排序方式应一致\r\n    if (arrFields.length !== arrDirections.length || arrFields.length < 1) {\r\n      throw new Error('sortBy:fields and directions not match');\r\n    }\r\n    // nage,age,total\r\n    const comparator = (props: Array<string>, orders: Array<string>) => (item1: BindingObject, item2: BindingObject) => {\r\n      return props.reduce((result, prop) => {\r\n        if (result === 0) {\r\n          const bindingProperty = this.properties.find(item => item.name === prop);\r\n          let isMultiLangProp = false;\r\n          if (bindingProperty) {\r\n            isMultiLangProp = bindingProperty.enableMultiLangInput;\r\n          }\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\r\n          let item1Value = this.getValue(item1, prop, isMultiLangProp, currentLanguage);\r\n          let item2Value = this.getValue(item2, prop, isMultiLangProp, currentLanguage);\r\n\r\n          if (item1Value === null || item1Value === undefined) { item1Value = ''; }\r\n          if (item2Value === null || item2Value === undefined) { item2Value = ''; }\r\n\r\n          if (typeof item1Value === 'string' && typeof item2Value === 'string') {\r\n            const localeCompareResult = item1Value.localeCompare(item2Value);\r\n            result = localeCompareResult * order;\r\n          } else {\r\n            if (item1Value > item2Value) { result = order * 1; }\r\n            if (item1Value < item2Value) { result = order * -1; }\r\n          }\r\n        }\r\n        return result;\r\n      }, 0);\r\n    };\r\n    this.innerList = this.innerList.sort(comparator(arrFields, arrDirections)).toList();\r\n  }\r\n  private getValue(target: any, propName: string, isMultiLangProp: boolean = false, currentLanguage: string = 'zh-CHS') {\r\n    if (target instanceof BindingList) {\r\n      target = target.currentItem;\r\n    } else if (target instanceof BindingData) {\r\n      target = target.list.currentItem;\r\n    }\r\n    let result = null;\r\n    if (propName.indexOf('.') === -1) {\r\n      result = target[propName];\r\n    } else {\r\n      const props = propName.split('.');\r\n      for (const prop of props) {\r\n        target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);\r\n      }\r\n    }\r\n    if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {\r\n      return result[currentLanguage];\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\nexport { BindingList };\r\n","import { Entity } from '../entity/index';\r\nimport { Repository, EntityManager } from '../repository/index';\r\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\r\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingData } from './binding_data';\r\n\r\n\r\nclass BindingDataFactory {\r\n\r\n  /**\r\n   * 根据Repository创建一个BindingData\r\n   */\r\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n    bindingData.setDataTypeInfo(repository.entityTypeInfo);\r\n    EntityLoadUtil.loadRepository(repository, bindingList);\r\n\r\n    // 从repository初始化bindingData\r\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\r\n   * @internal\r\n   * @summary\r\n   * 1、该方法暂时仅供内部单元测试使用；\r\n   * 2、该方法暂时只创建BindingData，不建立双向关联\r\n   */\r\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n\r\n    // 初始化数据\r\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\r\n    EntityLoadUtil.loadEntities(entities, bindingList);\r\n\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据已经存在的BindingData创建一个新的BindingData\r\n   */\r\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\r\n    const bindingData = new BindingData();\r\n    bindingData.initByBindingList(existingBindingData.list, bindingPath);\r\n    return bindingData;\r\n  }\r\n}\r\n\r\nexport { BindingDataFactory };\r\n","/**\r\n * 绑定装饰器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { TypeDecorator, makeDecorator } from '../metadata/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * NgBindingData装饰器名称\r\n * @formType {string}\r\n */\r\nexport const NG_BINDING_DATA = 'NgBindingData';\r\n\r\n/**\r\n * NgBindingData\r\n */\r\nexport interface NgBindingData {\r\n\r\n  // /**\r\n  //  * 关联entity类型\r\n  //  */\r\n  // entity: Type<Entity>;\r\n\r\n  /**\r\n   * 关联repository类型\r\n   */\r\n  repository: Type<Repository<any>>;\r\n}\r\n\r\n/**\r\n * NgBindingContextDecorator\r\n */\r\nexport interface NgBindingDataDecorator {\r\n\r\n  (obj?: NgBindingData): TypeDecorator;\r\n\r\n  new(obj?: NgBindingData): NgBindingData;\r\n\r\n}\r\n\r\n/**\r\n * NgBindingContext\r\n */\r\n\r\n// export const NgBindingData: NgBindingDataDecorator =\r\n//   makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\nexport function NgBindingData(options: NgBindingData) {\r\n  const decoratorFactory = makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\r\n/**\r\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\r\n */\r\nclass DataPathUtil {\r\n\r\n  /**\r\n   * 转换成BindingData可识别的路径\r\n   */\r\n  public static convertToBindingPathArray(path: string): string[] {\r\n    const bindingPathArray = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\r\n   */\r\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const restPathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    restPathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      restPathArray.push(propName);\r\n      restPathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    // 移除最后一个主键\r\n    restPathArray.pop();\r\n    return '/' + restPathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    return pathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n}\r\n\r\nexport { DataPathUtil };\r\n","// tslint:disable: max-line-length\r\nimport { UID } from './uid';\r\n\r\n/**\r\n * GUID创建服务\r\n * @scope 静态类没有提供Provider\r\n */\r\nexport class Guid {\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n    public static validator = new RegExp('^[a-z0-9]+$', 'i');\r\n\r\n    public static EMPTY = '';\r\n\r\n    private value: string;\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid(UID.create());\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return UID.create();\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","import { RunMode } from \"../core\";\r\n\r\nexport class RunModeService {\r\n  private static mode: RunMode = null;\r\n  public static setRunMode(mode: RunMode) {\r\n    RunModeService.mode = mode;\r\n  }\r\n  public static getRunMode() {\r\n    return RunModeService.mode;\r\n  }\r\n}","import { Observable, Subject, from } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { NgFieldProperty, NgListProperty, NgObjectProperty, NgDynamicProperty, FieldMetadataUtil } from './metadata/index';\r\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\r\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\r\nimport { EntityList } from './entity_list';\r\nimport { EntityFactory } from './entity_factory';\r\nimport { Validator, ValidationResult, ValidateRule } from './validator/index';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\nimport { BigNumberType, RunMode } from '../core/types';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { FrameContext } from '../frame/index';\r\nimport { RunModeService } from '../misc';\r\n/**\r\n * @author Lucas Huang\r\n * 实体抽象基类，所有实体必须扩展自Entity\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *    userId: string;\r\n *    userName: string;\r\n *\r\n *    constructor(data: any){\r\n *        super(data);\r\n *    }\r\n * }\r\n * ```\r\n */\r\nexport abstract class Entity {\r\n  // #region 私有、保护属性\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  private validErrors = {};\r\n  private primaryFieldMetadata: NgFieldProperty = null;\r\n  private originalData = undefined;\r\n  /**\r\n   * 验证器\r\n   */\r\n  private validator: Validator<any>;\r\n\r\n  /**\r\n   * 增量变更集合\r\n   */\r\n  protected changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 是否正在验证\r\n   */\r\n  protected isValidating = false;\r\n\r\n  /**\r\n   * 新数据\r\n   */\r\n  protected newData = undefined;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe:Subject<any> = new Subject();\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public valueChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 属性值改变时触发\r\n   *\r\n   * ### 使用示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.onValueChanged.subscribe((data: Modification) => {\r\n   *      console.log(data);\r\n   *  })\r\n   *\r\n   * ```\r\n   *\r\n   * @event\r\n   */\r\n  public onValueChanged = this.valueChanged.asObservable();\r\n  public onUpdate = new Subject<Modification>();\r\n  /**\r\n   * 返回JSON格式的数据\r\n   */\r\n  public get data(): any {\r\n    return this.newData;\r\n  }\r\n  public set data(value: any){\r\n    this.newData = value;\r\n  }\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  public get errors() {\r\n    return this.validErrors;\r\n  }\r\n\r\n  public set errors(errors: any) {\r\n    this.validErrors = errors;\r\n  }\r\n\r\n  /**\r\n   * 实体变更集\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.changeSet.changes;\r\n  }\r\n  /**\r\n   * 实体主键元数据\r\n   */\r\n\r\n  public get primaryProperty(): NgFieldProperty {\r\n    if (!this.primaryFieldMetadata) {\r\n      this.primaryFieldMetadata = FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\r\n    }\r\n    return this.primaryFieldMetadata;\r\n  }\r\n\r\n  /**\r\n   * 主键\r\n   * @todo\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryKey(): string {\r\n    if (this.primaryProperty) {\r\n      return this.primaryProperty.property;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实体主键值\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryValue(): string {\r\n    if (this.primaryKey) {\r\n      // return this[this.primaryProperty.property].toString();\r\n      const primaryValue = this[this.primaryProperty.property];\r\n      return primaryValue ? primaryValue : '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    this.validator = new Validator();\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n    this.onValueChanged = this.valueChanged;\r\n    // this.onValueChanged = this.valueChanged.pipe(\r\n    //     scan((x: Modification, curr: Modification) => {\r\n    //         if (x) {\r\n    //             if (isEqual(x.path, curr.path) && x.type === curr.type) {\r\n    //                 return Object.assign(x, curr);\r\n    //             }\r\n    //             return curr;\r\n    //         }\r\n    //         return curr;\r\n    //     })\r\n    // );\r\n    if (RunModeService.getRunMode() === RunMode.compatible) {\r\n      this.initialize();\r\n    }\r\n    // this.validate();\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {\r\n      if (value && value.changeSetValue !== undefined) {\r\n        value = JSON.parse(JSON.stringify(value));\r\n        value.value = value.changeSetValue;\r\n      }\r\n      this.changeSet.append(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 校验实体各属性的值\r\n   * @param propertyName 属性名称，如果为空，则验证实体中所有设置了验证规则的属性\r\n   * @returns Observable<ValidationResult>\r\n   * ### 示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.validate().subscribe(result =>{\r\n   *      if(result.isValid){\r\n   *          ...\r\n   *      } else {\r\n   *          console.log(result.message);\r\n   *      }\r\n   *  })\r\n   *\r\n   * ```\r\n   */\r\n\r\n  // tslint:disable-next-line: max-line-length\r\n  public validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index, frameContext)).pipe(\r\n      tap(result => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  }\r\n\r\n  // 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n  public validateFromUtil(propertyName: string, value, cb, context?: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value, null, undefined, context && context.frameContext || null)).subscribe(result => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  }\r\n  /**\r\n   * 同步校验\r\n   * @param propertyName \r\n   * @param value \r\n   * @param cb \r\n   */\r\n  public validateFromUtilSync(propertyName: string, value: any, cb: any, context?: any) {\r\n    this.validErrors = {};\r\n    const result: any = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n    if (result && !result.isValid) {\r\n      this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n    }\r\n    cb(result);\r\n  }\r\n  public getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  }\r\n  public getEntityListPath() {\r\n    let paths = [];\r\n    const handleParent = (item: Entity) => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        if (item instanceof EntityList === true) {\r\n          const path = parentPaths.concat([]).reverse();\r\n          Array.prototype.push.apply(paths, path);\r\n        }\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    return paths.reverse();\r\n  }\r\n  public getMainEntityPrimaryValue() {\r\n    let item = this;\r\n    while (item[PARENT_CLASS]) {\r\n      item = item[PARENT_CLASS];\r\n    }\r\n    return item.primaryValue;\r\n  }\r\n  /**\r\n   * 加载数据\r\n   * @param data 新数据\r\n   */\r\n  public load(data: any, options: any = {}) {\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n    this.loadFields(data);\r\n    if (!options || (options && options.loadChild !== false)) {\r\n      this.loadLists(data);\r\n    }\r\n    this.loadObjects(data);\r\n    this.loadDynamicObjects(data);\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n  }\r\n  /**\r\n   * 转换为JSON\r\n   * @param buildChanges 是否构造变更集\r\n   * @param includeMultiLanguageField 是否包含多语字段\r\n   */\r\n  public toJSON(buildChanges?: boolean) {\r\n    const result = {};\r\n\r\n    // 简单属性\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n\r\n    // 对象属性\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 动态属性\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 列表属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  //#region 实体初始化相关private方法\r\n\r\n  /**\r\n   * 初始化实体\r\n   */\r\n  private initialize() {\r\n    const constructor = this.constructor;\r\n\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n\r\n    this.initializeNormalField(ngFields);\r\n    this.initializeList(ngLists);\r\n    this.initializeObject(ngObjects);\r\n    this.initializeDynamic(ngDynamic);\r\n  }\r\n\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  protected createPath(propertyName: string): string[] {\r\n    const primaryFieldMetadata = this.primaryProperty;\r\n    if (primaryFieldMetadata) {\r\n      const primaryDataField = primaryFieldMetadata.dataField;\r\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 属性字段初始化\r\n   * @param ngFields 属性字段元数据\r\n   */\r\n  private initializeNormalField(ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(propName => {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      const dataField = ngField.dataField || propName;\r\n\r\n      if (delete this[propName]) {\r\n        Object.defineProperty(this, propName, {\r\n          get: function () {\r\n            const value = this.getPropValue(propName, ngField);\r\n            return value;\r\n          },\r\n          set: function (newPropValue) {\r\n            // 值相同时不触发变更。\r\n            const oldPropValue = this.getPropValue(propName, ngField);\r\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n              return;\r\n            }\r\n            this.setPropValue(propName, ngField, newPropValue);\r\n            const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化列表类型的元数据\r\n   * @param ngListMetadata 列表类型元数据\r\n   */\r\n  private initializeList(ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n      const val = this.data[dataField];\r\n\r\n      const entityList = new EntityList<typeof fieldMetadata.type>();\r\n      entityList[PARENT_CLASS] = this;\r\n      entityList[PARENT_PATH] = path;\r\n\r\n      if (val) {\r\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n        entityList.loadEntities(entities);\r\n      }\r\n\r\n      entityList.onListChanged.subscribe(value => {\r\n        if (value) {\r\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n            value.path = entityList[PARENT_PATH].concat(value.path);\r\n          }\r\n          this.setChanges(value);\r\n        }\r\n      });\r\n      this[propertyName] = entityList;\r\n    });\r\n  }\r\n  /**\r\n   * 初始化子对象\r\n   * @param ngObjectMetadata 子对象元数据\r\n   */\r\n  private initializeObject(ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      // val不存在时，用空对象代替\r\n      const val = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      // 如果没有值用一个空对象代替\r\n      let childEntity = createEntityFromJsonData(val);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: () => {\r\n            return childEntity;\r\n          },\r\n          set: function (value: any) {\r\n            const modifyInfo = {\r\n              path: childEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            childEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      const originalData = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      let dynamicEntity = createEntityFromJsonData(originalData);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function () {\r\n            return dynamicEntity;\r\n          },\r\n          set: function (value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n\r\n  // #region 加载实体数据相关private、projected方法\r\n\r\n  /**\r\n   * 加载简单字段值\r\n   * @todo 临时用修改的方式模拟\r\n   */\r\n  protected loadFields(data: any) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      // if (ngField.primary === false) {\r\n      //   this[propName] = data[dataField];\r\n      // }\r\n      let propValue = data[dataField];\r\n      if (ngField.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this[propName] = propValue;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 加载子列表数据\r\n   * @param data 数据\r\n   */\r\n  protected loadLists(data: any) {\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      const entityType = ngList.type;\r\n\r\n      // 创建实体\r\n      const listData = data[dataField];\r\n      if (listData) {\r\n        const entities = listData.map((entityData: any) => {\r\n          return EntityFactory<typeof entityType>(entityType, entityData);\r\n        });\r\n        this[propName].loadEntities(entities);\r\n      } else {\r\n        this[propName].loadEntities([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadObjects(data: any) {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      const objectData = data[dataField];\r\n      const entity = this[propName] as Entity;\r\n      if (!entity || !objectData) {\r\n        return;\r\n      }\r\n      entity.load(objectData);\r\n    });\r\n  }\r\n\r\n  protected loadDynamicObjects(data: any) {\r\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\r\n      const ngDynamicObject = ngDynamicObjects[propName];\r\n      const dataField = ngDynamicObject.dataField || propName;\r\n\r\n      const dynamicData = data[dataField] || {};\r\n      const dynamicEntity = this[propName] as Dynamic;\r\n      if (!dynamicEntity) {\r\n        return;\r\n      }\r\n      dynamicEntity.loadDynamicData(dynamicData);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 私有工具方法\r\n\r\n\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  private emitValueChange(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any, changeSetValue: any = undefined): void {\r\n    const change = {\r\n      path: this.createPath(propName),\r\n      value: newPropValue,\r\n      changeSetValue,\r\n      preValue: oldPropValue,\r\n      type: ModifyType.ValueChange\r\n    };\r\n\r\n    if (this[PARENT_PATH]) {\r\n      change.path = this[PARENT_PATH].concat(change.path);\r\n    }\r\n    this.setChanges(change);\r\n  }\r\n  /**\r\n   * 准备提交给后端的属性值\r\n   * @param propName 属性\r\n   * @param propMetadata 属性描述\r\n   * @param propValue 属性值\r\n   */\r\n  private preparePropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    let value = undefined;\r\n    // 只要启用时区，传给后端的时间就必须带时区，因此当获取用户时区失败的时候，获取浏览器当前时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && propValue) {\r\n        value = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  private getPropValue(propName: string, propMetadata: NgFieldProperty) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    let value = this.data[dataField];\r\n\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (propMetadata.enableMultiLangInput === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    // 启用时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && value) {\r\n        return ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(value, timeZoneOffset);\r\n      }\r\n    }\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      value = value && value.toString() || null;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  private setPropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      this.data[dataField] = propValue === null ? null : propValue && propValue.toString() || '';\r\n    } else {\r\n      if (propMetadata.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this.data[dataField] = propValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  private isPropValueChanged(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any) {\r\n    if (propMetadata.enableMultiLangInput === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      if (typeof newPropValue !== 'string' && newPropValue !== null && newPropValue !== undefined) {\r\n        console.log('BigNumber must be a string !');\r\n        newPropValue = newPropValue.toString();\r\n      }\r\n      return newPropValue !== oldPropValue;\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  private isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // #endregion\r\n}\r\n","import { ModifyType, Modification } from '../changeset/types';\r\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\r\nimport { Entity } from './entity';\r\n\r\n/**\r\n * 支持动态字段集合的动态实体\r\n */\r\nexport class DynamicEntity extends Entity implements Dynamic {\r\n\r\n  /**\r\n   * 是否是嵌套的动态实体\r\n   */\r\n  public get IsNested(): boolean {\r\n    return this[PARENT_CLASS] instanceof DynamicEntity;\r\n  }\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    super(data);\r\n    this.loadDynamicData(data);\r\n  }\r\n\r\n  public loadDynamicData(dynamicData: any) {\r\n    this.initializeDynamicField(dynamicData);\r\n    // super.loadFields(dynamicData);\r\n  }\r\n\r\n  /**\r\n   * 初始化动态数据\r\n   * @param dynamicData 动态数据\r\n   */\r\n  private initializeDynamicField(dynamicData: any): void {\r\n    // 遍历动态数据的key，创建动态实体属性。\r\n    Object.keys(dynamicData).forEach(propertyName => {\r\n      const dataField = propertyName;\r\n      if (delete this[propertyName]) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          const path = this.createPath(propertyName);\r\n          let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgObject({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为外键 */\r\n          //     type: DynamicEntity\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            get: function () {\r\n              return dynamicEntity;\r\n            },\r\n            set: function (value) {\r\n              const modifyInfo = {\r\n                path: dynamicEntity[PARENT_PATH],\r\n                value: value.data,\r\n                preValue: this[propertyName].data,\r\n                type: ModifyType.ValueChange\r\n              };\r\n              dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\r\n              this.setChanges(modifyInfo);\r\n            }\r\n          });\r\n        } else {\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgField({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为主键 */\r\n          //     primary: false,\r\n          //     /** 是否为外键 */\r\n          //     foreign: false\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            // 定义返回数据方法。\r\n            get: function () {\r\n              // 从初始数据返回字段值。\r\n              return this.data[dataField];\r\n            },\r\n            set: function (value) {\r\n              // 值相同时不触发变更。\r\n              const oldValue = this.data[dataField];\r\n              if (oldValue === value) {\r\n                return;\r\n              }\r\n              // 更新元数据数据。\r\n              this.data[dataField] = value;\r\n              // 变更集\r\n              const changes = {\r\n                type: ModifyType.ValueChange,\r\n                path: this.createPath(propertyName),\r\n                value: value,\r\n                preValue: oldValue\r\n              };\r\n\r\n              if (this[PARENT_PATH]) {\r\n                changes.path = this[PARENT_PATH].concat(changes.path);\r\n              }\r\n              this.setChanges(changes);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\r\n    let instance: DynamicEntity;\r\n    if (value instanceof DynamicEntity) {\r\n      instance = value;\r\n    } else {\r\n      instance = new DynamicEntity(value);\r\n      instance.constructor = DynamicEntity;\r\n    }\r\n    instance[PARENT_CLASS] = this;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n        this.setChanges(changes);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   * @todo\r\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\r\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\r\n   */\r\n  setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n    const preValue = Object.assign({}, this.data);\r\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n    let parentPath = value.path;\r\n    if (value.path.length > 2) {\r\n      parentPath = value.path.slice(0, value.path.length - 2);\r\n    }\r\n\r\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\r\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\r\n    const parentModification: Modification = {\r\n      path: parentPath,\r\n      value: this.data,\r\n      preValue: preValue,\r\n      type: value.type,\r\n      dynamic: true\r\n    };\r\n\r\n    this.valueChanged.next(parentModification);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  /**\r\n   * toJSON\r\n   */\r\n  public toJSON() {\r\n    return this.data;\r\n  }\r\n}\r\n","import { EnumData, FormVariable } from './dom-entity';\r\n\r\nexport interface SchemaType {\r\n    name: string;\r\n    fields?: SchemaEntityField[];\r\n    entities?: SchemaEntity[];\r\n    primary?: string;\r\n}\r\n\r\n/**\r\n * schema\r\n */\r\nexport class Schema {\r\n    public dataSource?: string;\r\n    public sourceUri: string;\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public entities: SchemaEntity[];\r\n    public variables: SchemaEntityField[];\r\n    public eapiId: string;\r\n    public extendProperties: { enableStdTimeFormat: boolean };\r\n}\r\n\r\n/**\r\n * 实体\r\n */\r\nexport class SchemaEntity {\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public label: string;\r\n    public type: SchemaEntityType;\r\n}\r\n\r\n/**\r\n * 实体类型对象\r\n */\r\nexport class SchemaEntityType implements SchemaType {\r\n    public name: string;\r\n    public primary: string;\r\n    public fields: SchemaEntityField[];\r\n    public entities?: SchemaEntity[];\r\n    public displayName?: string;\r\n}\r\n\r\n/**\r\n * 字段\r\n */\r\nexport class SchemaEntityField {\r\n    public $type: SchemaEntityField$Type;\r\n    public id: string;\r\n    public originalId: string;\r\n    public code: string;\r\n    public label: string;\r\n    public bindingField: string;\r\n    public name: string;\r\n    public defaultValue: any;\r\n    public require: boolean;\r\n    public readonly: boolean;\r\n    public type: SchemaEntityFieldType;\r\n    public editor?: SchemaEntityFieldEditor;\r\n    public path?: string;\r\n    public bindingPath?: string;\r\n    public multiLanguage?: boolean;\r\n\r\n    // 表达式\r\n    public expression?: any;\r\n}\r\n\r\n/**\r\n * 字段类型对象\r\n */\r\nexport class SchemaEntityFieldType implements SchemaType {\r\n    public $type: SchemaEntityFieldType$Type;\r\n    public name: SchemaEntityFieldTypeName | any;\r\n    public length?: number;\r\n    public precision?: number;\r\n    public valueType?: SchemaEntityFieldType;\r\n    public enumValues?: EnumData[];\r\n    public fields?: SchemaEntityField[];\r\n    public displayName?: string;\r\n    public primary?: string;\r\n    public entities?: SchemaEntity[];\r\n    // 用于区分日期/日期事件和整型/浮点型数据\r\n    public elementType?: any;\r\n\r\n\r\n    // 扩展属性:  运行时定制用\r\n    public extendProperty?: any;\r\n}\r\n\r\n/**\r\n * 字段编辑器对象\r\n */\r\nexport class SchemaEntityFieldEditor {\r\n    public $type: any;\r\n    [propName: string]: any;\r\n}\r\n\r\n\r\n/**\r\n * 字段类型枚举\r\n */\r\nexport enum SchemaEntityField$Type {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    SimpleField = 'SimpleField',\r\n    /**\r\n     * 关联/UDT类型字段\r\n     */\r\n    ComplexField = 'ComplexField'\r\n}\r\n\r\n/**\r\n * 字段类型对象中的类型枚举\r\n */\r\nexport enum SchemaEntityFieldType$Type {\r\n\r\n    /**\r\n     * 字符串\r\n     */\r\n    StringType = 'StringType',\r\n    /**\r\n     * 备注\r\n     */\r\n    TextType = 'TextType',\r\n    /**\r\n     * 数字（整数、浮点数）\r\n     */\r\n    NumericType = 'NumericType',\r\n    /**\r\n     * 布尔\r\n     */\r\n    BooleanType = 'BooleanType',\r\n    /**\r\n     * 日期\r\n     */\r\n    DateType = 'DateType',\r\n\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTimeType = 'DateTimeType',\r\n\r\n    /**\r\n     * 枚举\r\n     */\r\n    EnumType = 'EnumType',\r\n    /**\r\n     * 实体类\r\n     */\r\n    EntityType = 'EntityType',\r\n\r\n    /**\r\n     * 分级码\r\n     */\r\n    HierarchyType = 'HierarchyType',\r\n\r\n    /**\r\n     * 对象\r\n     */\r\n    ObjectType = 'ObjectType',\r\n\r\n    /**\r\n     * 数字（大数据）\r\n     */\r\n    BigNumericType = 'BigNumericType'\r\n}\r\n\r\n\r\n/**\r\n * 字段类型中的名称\r\n */\r\nexport enum SchemaEntityFieldTypeName {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    String = 'String',\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTime = 'DateTime',\r\n    /**\r\n     * 日期\r\n     */\r\n    Date = 'Date',\r\n    /**\r\n     * 枚举\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * 布尔\r\n     */\r\n    Boolean = 'Boolean',\r\n\r\n    /**\r\n     * 数字\r\n     */\r\n    Number = 'Number',\r\n\r\n    /**\r\n     * 备注\r\n     */\r\n    Text = 'Text',\r\n\r\n    /**\r\n     * 大数字\r\n     */\r\n    BigNumber = 'BigNumber'\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 实体取数服务\r\n */\r\ninterface EntityDataService {\r\n\r\n  /**\r\n   * 新增子实体\r\n   * @param path 子实体路径\r\n   */\r\n  addChild(childPath: string);\r\n\r\n  /**\r\n   * 删除子实体\r\n   * @param path 子实体路径\r\n   * @param id 待删除子实体id\r\n   */\r\n  removeChild(childPath: string, id: string);\r\n\r\n}\r\n\r\nconst ENTITY_DATA_SERVICE_TOKEN = new InjectionToken<EntityDataService>('@farris/devkit ENTITY_DATA_SERVICE');\r\n\r\nexport { EntityDataService, ENTITY_DATA_SERVICE_TOKEN };\r\n","import { from, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Modification, ModifyType } from '../changeset';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { SchemaEntity, SchemaEntityField } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { FieldMetadataUtil } from './metadata/field_metadata_util';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { ValidateRule, ValidationResult } from './validator/types';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\n\r\nexport const entityPrototype = {\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  getFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const value = this.data[fieldName];\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (schemaField.multiLanguage === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = fieldName.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    return value;\r\n  },\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  setFieldValue: function(schemaField: SchemaEntityField, propertyValue: any) {\r\n    const fieldName = schemaField.label;\r\n    this.data[fieldName] = propertyValue;\r\n  },\r\n  /**\r\n   * 获取复杂类型对象的值\r\n   * @param schemaField Schema字段描述\r\n   * @returns 复杂类型对象的值\r\n   */\r\n  getComplexFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    return objectPropertyValue;\r\n  },\r\n  /**\r\n   * 向实体复杂类型字段赋值\r\n   * @param schemaField Schema字段描述\r\n   * @param ComplexField 复杂类型字段的类型定义\r\n   * @param propertyValue 属性值\r\n   */\r\n  setComplexFieldValue: function(schemaField: SchemaEntityField, ComplexField: any, propertyValue: any) {\r\n    // 提取字段名\r\n    const fieldName = schemaField.label;\r\n    let complexFieldInstance = null;\r\n    if (propertyValue instanceof ComplexField) {\r\n      complexFieldInstance = propertyValue;\r\n    } else {\r\n      complexFieldInstance = new ComplexField(propertyValue);\r\n      complexFieldInstance.constructor = ComplexField;\r\n    }\r\n    // 提取复杂类型对象的值\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    const propertyPath = (objectPropertyValue && objectPropertyValue[PARENT_PATH]) || complexFieldInstance[PARENT_PATH];\r\n    // 构造变更信息\r\n    const changeInfo = {\r\n      // 提取变更对象相对于根实体的路径\r\n      path: propertyPath,\r\n      // 记录对象最新值\r\n      value: propertyValue,\r\n      // 记录对象历史值\r\n      preValue: (this[fieldName] && this[fieldName].data) || null,\r\n      // 标记这是一个值变化变更\r\n      type: ModifyType.ValueChange\r\n    };\r\n    // 创建新的对象\r\n    this.innerEntities[fieldName] = complexFieldInstance;\r\n    // this.innerEntities[fieldName] = new ComplexField(propertyValue);\r\n    // 记录本次数据变更\r\n    if (!this.isInitializing) {\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 获取指定的子实体列表\r\n   * @param schemaEntity 实体描述\r\n   * @returns 子实体列表\r\n   */\r\n  getEntities: function(schemaEntity: SchemaEntity) {\r\n    const dataField = schemaEntity.label;\r\n    const listPropertyValue = this.innerEntities[dataField];\r\n    return listPropertyValue;\r\n  },\r\n  /**\r\n   * 更新指定子实体的值\r\n   * @param schemaEntity 实体描述\r\n   * @param propertyValue 实体列表\r\n   */\r\n  setEntities: function(schemaEntity: SchemaEntity, propertyValue: any) {\r\n    const dataField = schemaEntity.label;\r\n    this.innerEntities[dataField] = propertyValue;\r\n  },\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  isFieldValueChanged: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) {\r\n    if (schemaField.multiLanguage === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  },\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  emitFieldValueChange: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any): void {\r\n    if (!this.isInitializing) {\r\n      const fieldName = schemaField.label;\r\n      const changeInfo = {\r\n        path: this.createPath(fieldName),\r\n        value: newPropValue,\r\n        preValue: oldPropValue,\r\n        type: ModifyType.ValueChange\r\n      };\r\n\r\n      if (this[PARENT_PATH]) {\r\n        changeInfo.path = this[PARENT_PATH].concat(changeInfo.path);\r\n      }\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  setChanges: function(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {\r\n      this.changeSet.append(value);\r\n    }\r\n  },\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  createPath: function(propertyName: string): string[] {\r\n    if (this.primaryKey) {\r\n      return [this.primaryKey + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  },\r\n  getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  },\r\n  validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index)).pipe(\r\n      tap((result: any) => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  },\r\n  validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  },\r\n  /**\r\n   * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n   */\r\n  validateFromUtil(propertyName: string, value: any, cb: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value)).subscribe((result: any) => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  },\r\n  /**\r\n   * 将实体数据转换为JSON格式\r\n   */\r\n  toJSON(buildChanges?: boolean) {\r\n    // 声明转换初始值\r\n    const result = {};\r\n    // 提取简单类型字段的值\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n    // 提取对象类型字段的值\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取动态属性字段的值\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取列表字段的属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { ChangeSet, Modification } from '../changeset';\r\nimport { Schema, SchemaEntity, SchemaEntityField, SchemaEntityField$Type, SchemaType } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { entityPrototype } from './entity_prototype';\r\nimport { NG_FIELD, NG_LIST, NG_OBJECT } from './metadata';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { Validator } from './validator';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\n\r\nexport interface AbstractEntityType {\r\n  typeName: string;\r\n  types: any;\r\n  __prop__metadata__: any;\r\n}\r\n\r\n/**\r\n * 实体类型工厂\r\n * 用来根据实体Schema描述信息创建实体类型\r\n */\r\nexport class EntityTypeFactory {\r\n\r\n  constructor() { }\r\n  /**\r\n   * 由实体Schema结构创建实体类型\r\n   * @param schema 实体Schema结构\r\n   * @returns 实体类型\r\n   */\r\n  public create(schema: Schema) {\r\n    // 提取Schema定义中的第一个是实体描述\r\n    const schemaType = schema.entities[0].type;\r\n    // 创建实体类型\r\n    const entityType = this.createClass(schemaType);\r\n    return entityType;\r\n  }\r\n  /**\r\n   * 由实体Schema类型描述创建实体类\r\n   * @param schemaType Schema实体类型描述\r\n   * @returns 实体类型\r\n   */\r\n  private createClass(schemaType: SchemaType) {\r\n    const attachEntityInstanceData = this.createEntityInstanceDataInitializer(schemaType);\r\n    // 创建指定实体类型的初始化函数，用来在实体类型构造函数中为实体实例赋值\r\n    const initialize = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      entityInstance.isInitializing = true;\r\n      attachEntityInstanceData(entityInstance, entityData, entityTypeConstructor);\r\n      entityInstance.isInitializing = false;\r\n    };\r\n    // 声明实体类构造函数\r\n    const ConcreteEntity = function (data: any) {\r\n      // 创建实体变更集\r\n      this.changeSet = new ChangeSet();\r\n      // 初始化实体验证状态\r\n      this.isValidating = false;\r\n      // 初始化实体验证信息\r\n      this.validErrors = {};\r\n      // 初始化验证器\r\n      this.validator = new Validator();\r\n      // 初始化实体数据副本\r\n      this.innerData = Object.assign({}, data);\r\n      // 初始化子实体对象集合\r\n      this.innerEntities = {};\r\n      // 初始化实体值变化事件\r\n      this.valueChanged = new Subject<Modification>();\r\n      this.onValueChanged = this.valueChanged;\r\n      this.validateFromUtilSync = function (propertyName, value, cb, context) {\r\n        this.validErrors = {};\r\n        var result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n        if (result && !result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        }\r\n        cb(result);\r\n      };\r\n      // 调用初始化方法，初始化实体数据\r\n      initialize(this, data, ConcreteEntity);\r\n      this.load = (newData: any) => {\r\n        attachEntityInstanceData(this, newData, ConcreteEntity);\r\n      };\r\n    };\r\n    // 在实体类构造函数中记录视图类型名称\r\n    ConcreteEntity.typeName = `${schemaType.name}Entity`;\r\n    // 在实体类构造函数中记录其下直接引用的子类型\r\n    ConcreteEntity.types = {};\r\n    ConcreteEntity.__prop__metadata__ = {};\r\n    // 构造实体类的原型对象\r\n    const entityTypePrototype = Object.assign({ typeName: 'ConcreteEntityPrototype' }, entityPrototype);\r\n    // 向实体类原型对象中定义预制属性\r\n    this.definePresetProperty(entityTypePrototype, schemaType);\r\n    // 向实体类原型对象中定义字段属性get/set方法\r\n    this.defineFieldsToPrototype(entityTypePrototype, schemaType.fields, schemaType.primary, ConcreteEntity);\r\n    // 向实体类原型对象中定义访问子实体的get/set方法\r\n    this.defineEntitiesToPrototype(entityTypePrototype, schemaType.entities, ConcreteEntity);\r\n    // 将实体类的原型对象指向新构造的原型对象。\r\n    ConcreteEntity.prototype = entityTypePrototype;\r\n\r\n    return ConcreteEntity;\r\n  }\r\n  /**\r\n   * 向实体类原型对象中定义预制属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaType Schema类型描述\r\n   */\r\n  private definePresetProperty(prototypeObject: any, schemaType: SchemaType) {\r\n    /**\r\n     * 实体数据\r\n     */\r\n    Object.defineProperty(prototypeObject, 'data', {\r\n      get: function () {\r\n        return this.innerData;\r\n      }\r\n    });\r\n    /**\r\n     * 实体验证信息\r\n     */\r\n    Object.defineProperty(prototypeObject, 'errors', {\r\n      get: function () {\r\n        return this.validErrors;\r\n      },\r\n      set: function (errors: any) {\r\n        this.validErrors = errors;\r\n      }\r\n    });\r\n    /**\r\n     * 实体变更集\r\n     */\r\n    Object.defineProperty(prototypeObject, 'changes', {\r\n      get: function () {\r\n        return this.changeSet.changes;\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryProperty', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        // return schemaType.primary;\r\n        return prototypeObject.innerPrimaryProperty || { dataField: schemaType.primary };\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryKey', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        return schemaType.primary || '';\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键的值\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryValue', {\r\n      get: function () {\r\n        if (this.primaryKey) {\r\n          // return this[this.primaryProperty.property].toString();\r\n          const primaryValue = this[this.primaryKey];\r\n          return primaryValue ? primaryValue : '';\r\n        } else {\r\n          return '';\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 向实体类定义字段属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param fields 字段描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineFieldsToPrototype(\r\n    prototypeObject: any,\r\n    fields: SchemaEntityField[],\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ): void {\r\n    if (fields && fields.length) {\r\n      // 遍历Schema中描述的字段，在实体原型对象上定义字段访问函数\r\n      fields.forEach(schemaEntityField => {\r\n        switch (schemaEntityField.$type) {\r\n          // 定义简单类型字段\r\n          case SchemaEntityField$Type.SimpleField:\r\n            this.defineSimpleFieldToPrototype(prototypeObject, schemaEntityField, primary, parentEntityType);\r\n            break;\r\n          // 定义复杂类型字段\r\n          case SchemaEntityField$Type.ComplexField:\r\n            this.defineComplexFieldToPrototype(prototypeObject, schemaEntityField, parentEntityType);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 向实体类定义简单类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   */\r\n  private defineSimpleFieldToPrototype(\r\n    prototypeObject: any,\r\n    schemaField: SchemaEntityField,\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ) {\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        return this.getFieldValue(schemaField);\r\n      },\r\n      set: function (newPropValue) {\r\n        // 值相同时不触发变更。\r\n        const oldPropValue = this.getFieldValue(schemaField);\r\n        if (this.isFieldValueChanged(schemaField, newPropValue, oldPropValue) === false) {\r\n          return;\r\n        }\r\n        this.setFieldValue(schemaField, newPropValue);\r\n        this.emitFieldValueChange(schemaField, newPropValue, oldPropValue);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 字段名称 */\r\n      dataField: schemaField.label,\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 原始字段类型 */\r\n      originalDataFieldType: schemaField.type.name,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      primary: schemaField.label === primary,\r\n      ngMetadataName: NG_FIELD\r\n    };\r\n    if (fieldMetadata.primary) {\r\n      prototypeObject.innerPrimaryProperty = fieldMetadata;\r\n    }\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n  /**\r\n   * 向实体类定义复杂类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineComplexFieldToPrototype(prototypeObject: any, schemaField: SchemaEntityField, parentEntityType: AbstractEntityType) {\r\n    const complexFieldType = this.createClass(schemaField.type);\r\n    parentEntityType.types[schemaField.type.name] = complexFieldType;\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        const fieldValue = this.getComplexFieldValue(schemaField);\r\n        return fieldValue;\r\n      },\r\n      set: function (value: any) {\r\n        this.setComplexFieldValue(schemaField, complexFieldType, value);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 映射字段 */\r\n      dataField: schemaField.label,\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 引用实体类型 */\r\n      type: complexFieldType,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      ngMetadataName: NG_OBJECT\r\n    };\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n  /**\r\n   * 向实体类定义子实体\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param entities 实体描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineEntitiesToPrototype(prototypeObject: any, entities: SchemaEntity[], parentEntityType: AbstractEntityType) {\r\n    if (entities && entities.length) {\r\n      // 遍历Schema中描述的子实体，在实体对象上定义子实体列表\r\n      entities.forEach(schemaEntity => {\r\n        const complexFieldType = this.createClass(schemaEntity.type);\r\n        parentEntityType.types[schemaEntity.type.name] = complexFieldType;\r\n        // 提取子实体在实体对象上的属性名\r\n        const propertyName = schemaEntity.label;\r\n        Object.defineProperty(prototypeObject, propertyName, {\r\n          get: function () {\r\n            const fieldValue = this.getEntities(schemaEntity);\r\n            return fieldValue;\r\n          },\r\n          set: function (value: any) {\r\n            this.setEntities(schemaEntity, value);\r\n          }\r\n        });\r\n        const entitMetadata = {\r\n          /** 字段名称 */\r\n          dataField: schemaEntity.label,\r\n          /** 原始字段名称 */\r\n          originalDataField: '',\r\n          /** 实体类型 */\r\n          type: complexFieldType,\r\n          ngMetadataName: NG_LIST\r\n        };\r\n        if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n          parentEntityType.__prop__metadata__[propertyName] = [];\r\n        }\r\n        parentEntityType.__prop__metadata__[propertyName].push(entitMetadata);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 创建初始化实体对象方法\r\n   * @param schemaType 实体类型描述\r\n   * @returns 初始化实体对象方法\r\n   */\r\n  private createEntityInstanceDataInitializer(schemaType: SchemaType) {\r\n    /**\r\n     * 实体初始化函数，用来初始化实体的复杂类型数据和子实体数据\r\n     * @param entityInstance 实体类型实例\r\n     * @param data 实体原始数据\r\n     * @param entityTypeConstructor 实体类型构造函数\r\n     */\r\n    const initializer = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      // 初始化复杂类型字段\r\n      schemaType.fields\r\n        // 过滤复杂类型字段\r\n        .filter(field => field.$type === SchemaEntityField$Type.ComplexField)\r\n        // 遍历复杂类型字段创建对应实体类型数据\r\n        .forEach(field => {\r\n          // 提取字段名\r\n          const fieldName = field.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 获取复杂类型字段对应的实体类型\r\n          const ComplexField = includedEntityTypes[field.type.name];\r\n          // 提取复杂类型字段原始数据\r\n          const fieldData = entityData ? entityData[fieldName] : null;\r\n          // 创建复杂类型字段对象路径\r\n          const path = entityInstance.createPath(fieldName);\r\n          let complexFieldValue = entityInstance[fieldName];\r\n          if (complexFieldValue instanceof ComplexField) {\r\n            complexFieldValue.load(fieldData);\r\n          } else {\r\n            // 创建复杂类型字段实体实例\r\n            complexFieldValue = new ComplexField(fieldData);\r\n            complexFieldValue.constructor = ComplexField;\r\n            complexFieldValue[PARENT_CLASS] = entityTypeConstructor;\r\n            complexFieldValue[PARENT_PATH] = path;\r\n            complexFieldValue.onValueChanged.subscribe(changes => {\r\n              if (changes) {\r\n                changes.path = (entityInstance[PARENT_PATH] || []).concat(changes.path);\r\n                entityInstance.setChanges(changes);\r\n              }\r\n            });\r\n            entityInstance[fieldName] = complexFieldValue;\r\n          }\r\n        });\r\n      // 初始化子实体\r\n      if (schemaType.entities) {\r\n        // 遍历子实体创建对应实体类型的数据\r\n        schemaType.entities.forEach(schemaEntity => {\r\n          // 提取子实体名\r\n          const subEntityName = schemaEntity.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 创建子实体对象路径\r\n          const path = entityInstance.createPath(subEntityName);\r\n          // 创建子实体对象集合\r\n          let entityList = entityInstance[subEntityName];\r\n          if (!(entityList instanceof EntityList)) {\r\n            entityList = new EntityList<Entity>();\r\n            // 向子实体列表注册子实体变化事件\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                entityInstance.setChanges(value);\r\n              }\r\n            });\r\n            // 向实体类型实例上直接存储子实体对象列表\r\n            entityInstance[subEntityName] = entityList;\r\n          }\r\n          entityList[PARENT_CLASS] = entityTypeConstructor;\r\n          entityList[PARENT_PATH] = path;\r\n          // 提取子实体类型名称\r\n          const schemaEntityTypeName = schemaEntity.type.name;\r\n          // 获取子实体类型\r\n          const ConcreteEntity = includedEntityTypes[schemaEntityTypeName];\r\n          const originalEntityDataArray = entityData ? entityData[subEntityName] : null;\r\n          // 构造子实体集合\r\n          if (originalEntityDataArray) {\r\n            // 遍历子实体原始数据，构造实体对象集合\r\n            const entities = originalEntityDataArray.map((originalEntityData: any) => {\r\n              const concreteEntityInstance = new ConcreteEntity(originalEntityData);\r\n              concreteEntityInstance.constructor = ConcreteEntity;\r\n              return concreteEntityInstance;\r\n            });\r\n            // 向子实体列表中添加子实体对象\r\n            entityList.loadEntities(entities);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    return initializer;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport type RestfulMethod = 'GET' | 'PUT' | 'POST' | 'DELETE';\r\n\r\n@Injectable()\r\nexport class RestfulService {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http客户端\r\n   */\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  /**\r\n   * 发送GET请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  get(uri: string, params?: object, options?: any): Observable<any[]> {\r\n    return this.request(uri, 'GET', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送POST请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  put(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'PUT', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送PUT请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  post(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'POST', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送DELETE请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  delete(uri: string, params?: object, options?: any): Observable<any> {\r\n    return this.request(uri, 'DELETE', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  private request(uri: string, method: RestfulMethod, params: object, options: any = {}): Observable<any> {\r\n    options = options || {};\r\n    if (params) {\r\n      const httpParams = this.buildParams(params);\r\n      options.params = httpParams;\r\n    }\r\n    const methodName = method as string;\r\n    const result = this.httpClient.request(methodName, uri, options);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 构造Http请求参数\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n  private addBody(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, { body: body});\r\n    return mergedOptions;\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandler\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER = 'NgCommandHandler';\r\n\r\n/**\r\n * 命令处理描述\r\n */\r\nexport interface NgCommandHandler {\r\n\r\n  /**\r\n   * 要处理的名称\r\n   */\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器接口\r\n */\r\nexport interface NgCommandHandlerDecorator {\r\n  (handler?: NgCommandHandler): TypeDecorator;\r\n  new(handler?: NgCommandHandler): NgCommandHandler;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器工厂\r\n */\r\n\r\n// export const NgCommandHandler: NgCommandHandlerDecorator =\r\n//   makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\nexport function NgCommandHandler(options: NgCommandHandler) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\n  return decoratorFactory(options);\r\n  }\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandlerExtender\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理扩展装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER_EXTENDER = 'NgCommandHandlerExtender';\r\n\r\n/**\r\n * 命令处理扩展描述\r\n */\r\nexport interface NgCommandExtender {\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器接口\r\n */\r\nexport interface NgCommandHandlerExtenderDecorator {\r\n  (extender?: NgCommandExtender): TypeDecorator;\r\n  new(extender?: NgCommandExtender): NgCommandExtender;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器工厂\r\n */\r\nexport function NgCommandHandlerExtender(options: NgCommandExtender) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER_EXTENDER, (extender: NgCommandExtender) => extender);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-10-25 13:30:52 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-10-25 13:30:52 \r\n */\r\nimport { Observable } from 'rxjs';\r\n\r\nconst isObservable = (value) => {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\r\n        return true;\r\n    }\r\n    if (value['@@observable'] && value === value['@@observable']()) {\r\n        return true;\r\n    }\r\n    if (value instanceof Observable) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport { isObservable }\r\n","import { Observable, of } from 'rxjs';\r\nimport { CommandContext } from '../command_context';\r\nimport { isObservable } from '../../misc/is-observable';\r\n\r\n/**\r\n * 任务函数\r\n */\r\ntype TaskFunc = (context: CommandContext) => any;\r\n\r\n\r\n/**\r\n * 任务节点\r\n */\r\nclass TaskNode {\r\n\r\n  /**\r\n   * 任务名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 任务函数\r\n   */\r\n  func: TaskFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(name: string, func: TaskFunc) {\r\n    this.name = name;\r\n    this.func = func;\r\n  }\r\n\r\n  /**\r\n   * 执行任务函数\r\n   */\r\n  execute(context: CommandContext): Observable<any> {\r\n    const result = this.func(context);\r\n    const result$ = isObservable(result) ? result : of(result);\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { TaskFunc, TaskNode };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 变量解析接口\r\n */\r\ninterface VariableParser {\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any, eventParam?: any): any;\r\n}\r\n\r\nconst VARIABLE_PARSERS = new InjectionToken<VariableParser>('variable parsers');\r\n\r\nexport { VariableParser, VARIABLE_PARSERS };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\n\r\n// import { AppContext } from '../app/index';\r\n// import { FrameContext } from '../frame/index';\r\n// import { CommandContext } from '../command/index';\r\n\r\n/**\r\n * 解析辅助工具类\r\n */\r\nclass ParseUtil {\r\n\r\n  /**\r\n   * 获取应用上下文\r\n   */\r\n  static getAppContext(context: any): any {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext.appContext;\r\n    } else if (context.appContext) {\r\n      return context.appContext;\r\n    } else if (context.typeName === 'AppContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到AppContext，请检查！');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前Frame的Context\r\n   */\r\n  static getFrameContext(context: any) {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext;\r\n    } else if (context.typeName === 'FrameContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到FrameContext，请检查！');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取根Frame的Context\r\n   */\r\n  static getRootFrameContext(context: any): any {\r\n    const frameContext = this.getFrameContext(context);\r\n    return frameContext.root;\r\n  }\r\n\r\n  /**\r\n   * 根据frameId获取FrameContext\r\n   */\r\n  static getFrameContextById(context: any, frameId: string): any {\r\n    const appContext = this.getAppContext(context);\r\n    return appContext.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n}\r\n\r\nexport { ParseUtil };\r\n","/**\r\n * 数据源变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass DataVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any): any {\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths: string[] = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getValue(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{DATA~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:DATA~${paths[0]}}`) {\r\n        // 该内容是JSON的一部分，需要转义特殊字符\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach((path: string) => {\r\n      const replaceValue = this.getValue(path, appContext);\r\n      const searchValue = `{DATA~${path}}`;\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:DATA~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   */\r\n  private extractPaths(expression: string) {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const DATA_PATTERN_G = /\\{:?DATA~(\\S+?)\\}/g;\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (dataVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const DATA_PATTERN = /\\{:?DATA~(\\S+?)\\}/;\r\n    dataVariables.forEach(dataVariable => {\r\n      const pathMatches = dataVariable.match(DATA_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param path 路径：/\r\n   */\r\n  private getValue(path: string, appContext: AppContext): any {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const frameContext = appContext.getFrameContext(parts[0]);\r\n    if (!frameContext) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n\r\n    const bindingData = frameContext.bindingData;\r\n    if (!bindingData) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n    return bindingData.getValue(parts.slice(1));\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { DataVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass UIStateVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/frameId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getUIState(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{UISTATE~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:UISTATE~${paths[0]}}`) {\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{UISTATE~${path}}`;\r\n      const replaceValue = this.getUIState(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:UISTATE~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{:?UISTATE~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{:?UISTATE~(\\S+?)\\}/;\r\n    uiStateVariables.forEach((uiStateVariable: string) => {\r\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getUIState(path: string, appContext: AppContext) {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const [frameId, stateName] = parts;\r\n    const frameContext = appContext.getFrameContext(frameId);\r\n    let state = frameContext.uiState[stateName];\r\n    if (state && state.constructor.toString().startsWith('function Date()')) {\r\n      return this.formatDate(state);\r\n    }\r\n    for (let i = 2; i < parts.length; i++) {\r\n      state = state[parts[i]];\r\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\r\n      if (!state) {\r\n        return state;\r\n      }\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @todo：待删除\r\n   */\r\n  private formatDate(value: Date): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n\r\n    // 年\r\n    const year = value.getFullYear();\r\n\r\n    // 月\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // 日\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\nexport { UIStateVariableParser };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 状态机变量解析\r\n * @summary\r\n *\r\n * 解析策略：\r\n * 1、不带frameId，从顶层StateMachine中解析\r\n * {STATEMACHINE~/states/key}\r\n * {STATEMACHINE~/renderStates/key}\r\n *\r\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\r\n * {STATEMACHINE~/frameId/states/key}\r\n * {STATEMACHINE~/frameId/renderStates/key}\r\n *\r\n * 存在的问题：\r\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\r\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\r\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\r\n */\r\n@Injectable()\r\nclass StateMachineVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{STATEMACHINE~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的StateMachine变量字符串\r\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\r\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\r\n    if (stateMachineVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\r\n    stateMachineVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的值\r\n   */\r\n  private getValue(path: string, context: any): any {\r\n\r\n    const pathObj = this.getPathObj(path);\r\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\r\n\r\n    if (pathObj.type === 'currentState') {\r\n      return stateMachine.context.state;\r\n    } else if (pathObj.type === 'renderStates') {\r\n      return stateMachine[pathObj.name] as boolean;\r\n    } else {\r\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析path，并获取对应的StateMachine实例\r\n   */\r\n  private getTargetStateMachine(frameId: string, context): StateMachine {\r\n    let targetFrameContext: FrameContext;\r\n    if (frameId) {\r\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\r\n    } else {\r\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\r\n    }\r\n\r\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\r\n      throw new Error('找不到对应的状态机实例，请检查！');\r\n    }\r\n    return targetFrameContext.stateMachine;\r\n  }\r\n\r\n  /**\r\n   * 将Path解析为格式化的Path对象\r\n   */\r\n  private getPathObj(path: string): any {\r\n    let parsedPathObj: any;\r\n    const parts = this.splitPath(path);\r\n\r\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\r\n      parsedPathObj = {\r\n        frameId: '',\r\n        type: parts[0],\r\n        name: parts[1]\r\n      };\r\n    } else {\r\n      parsedPathObj = {\r\n        frameId: parts[0],\r\n        type: parts[1],\r\n        name: parts[2]\r\n      };\r\n    }\r\n\r\n    return parsedPathObj;\r\n  }\r\n\r\n  /**\r\n   * 分隔Path\r\n   */\r\n  private splitPath(path: string): string[] {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return parts;\r\n  }\r\n\r\n}\r\n\r\nexport { StateMachineVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { CommandContext } from '../command/index';\r\nimport { VariableParser } from './variable_parser';\r\n\r\n/**\r\n * 命令变量解析\r\n * {COMMAND~/params/key}\r\n * {COMMAND~/results/taskName}\r\n */\r\n@Injectable()\r\nclass CommandVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{COMMAND~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\r\n    uiStateVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getValue(path: string, context: any) {\r\n    if (context instanceof CommandContext === false) {\r\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\r\n    }\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const [type, name] = parts;\r\n    if (type === 'params') {\r\n      return context.command.params[name];\r\n    } else if (type === 'results') {\r\n      return context.results[name];\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandVariableParser };\r\n","/**\r\n * 变量解析服务\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\n\r\n\r\n/**\r\n * 变量解析服务\r\n * 职责：\r\n * 1、解析字符串中的变量，并替换成相应的值；\r\n * 2、对表达式进行求值。\r\n *\r\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\r\n */\r\n@Injectable()\r\nclass VariableParseService {\r\n\r\n  /**\r\n   * 解析器集合\r\n   */\r\n  private parsers: VariableParser[];\r\n\r\n  /**\r\n   * 构造变量解析服务\r\n   * @param parsers 解析器集合\r\n   */\r\n  constructor(@Inject(VARIABLE_PARSERS) parsers: VariableParser[]) {\r\n    this.parsers = parsers;\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  public parse(target: any, context?: any, eventParam?: any): any {\r\n    if (typeof target === 'string' && target.length > 0) {\r\n\r\n      // 字符串，直接解析\r\n      return this.parseExpression(target, context, eventParam);\r\n\r\n    } else if (Array.isArray(target)) {\r\n\r\n      // 遍历数组\r\n      target.forEach((item, itemIndex) => {\r\n        if (typeof item === 'string') {\r\n          target[itemIndex] = this.parseExpression(item, context, eventParam);\r\n        } else {\r\n          target[itemIndex] = this.parse(item, context, eventParam);\r\n        }\r\n      });\r\n\r\n    } else if (typeof target === 'object' && target !== null) {\r\n\r\n      // 遍历对象可枚举属性\r\n      const keys = Object.keys(target);\r\n      keys.forEach(key => {\r\n        if (typeof target[key] === 'string') {\r\n          target[key] = this.parseExpression(target[key], context, eventParam);\r\n        } else {\r\n          target[key] = this.parse(target[key], context, eventParam);\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 表达式求值\r\n   */\r\n  public evaluate(expression: string, context?: any, eventParam?: any): any {\r\n    const parsedExpression = this.parse(expression, context, eventParam);\r\n    return (new Function('return ' + parsedExpression))();\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  private parseExpression(expression: string, context: any, eventParam: any): string {\r\n\r\n    // 空串直接返回\r\n    if (expression === '') {\r\n      return '';\r\n    }\r\n\r\n    this.parsers.forEach(parser => {\r\n      if (typeof expression === 'string') {\r\n        expression = parser.parse(expression, context, eventParam);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n}\r\n\r\nexport { VariableParseService };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { FrameContext } from '../frame';\r\nconst VARIABLE_MATCHER = /#{\\S+?}/g;\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass FrameIdVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/#{root-component}/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach((exp: string) => {\r\n      const frameId = this.getVariableValue(exp);\r\n      expression = expression.replace(VARIABLE_MATCHER, frameId);\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 计算表达式的值\r\n   * @param expression like #{root-component}\r\n   */\r\n  private getVariableValue(expression: string) {\r\n    const relativeFrameId = expression.substring(2, expression.length - 1);\r\n    return this.getFullFrameId(relativeFrameId);\r\n  }\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return [];\r\n    }\r\n    return expression.match(VARIABLE_MATCHER);\r\n  }\r\n\r\n  /**\r\n   * 获取补全的frameId\r\n   * @param frameId frameId\r\n   */\r\n  private getFullFrameId(frameId: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const namespace = frameContext.namespace || '';\r\n    const prefix = namespace ? `${namespace}_` : '';\r\n    return `${prefix}${frameId}`;\r\n  }\r\n}\r\n\r\nexport { FrameIdVariableParser };\r\n","import { FrameContext } from '../frame';\r\nimport { ParseUtil } from './parse_util';\r\nimport { VariableParser } from './variable_parser';\r\nconst FORM_STATES_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/g;\r\nconst FORM_STATE_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/;\r\n\r\nexport class FormStateVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析表达式变量\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(FORM_STATE_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable);\r\n        expression = expression.replace(FORM_STATE_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const appContext = frameContext.appContext;\r\n    const formVariable = appContext.params.get(variable);\r\n    return formVariable;\r\n  }\r\n  /**\r\n   * 获取到表达式中所有FormState变量数组\r\n   * @param expression 表达式\r\n   */\r\n  private extractVariables(expression: string): string[] | null {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const formStates = expression.match(FORM_STATES_EXP);\r\n    if (!formStates || formStates.length < 1) {\r\n      return null;\r\n    }\r\n    return formStates;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nconst EVENT_PARAMS_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/g;\r\nconst EVENT_PARAM_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/;\r\n\r\n/**\r\n * 命令参数解析器\r\n */\r\n@Injectable()\r\nexport class EventParamVariableParser implements VariableParser {\r\n  public context: any;\r\n\r\n  public parse(expression: string, context: any, eventParam?: any) {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(EVENT_PARAM_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable, eventParam);\r\n        expression = expression.replace(EVENT_PARAM_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 匹配表达式中的符合正则表达式的项\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const variables = expression.match(EVENT_PARAMS_EXP);\r\n    if (!variables || variables.length < 1) {\r\n      return null;\r\n    }\r\n    return variables;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string, eventParam: any) {\r\n    if (!eventParam || !variable) {\r\n      return null;\r\n    }\r\n    const variables = variable.split('/').filter(p => p);\r\n    const result = variables.reduce((target: any, key: string) => {\r\n      if (target) {\r\n        return target[key];\r\n      } else {\r\n        return null;\r\n      }\r\n    }, eventParam);\r\n    return result;\r\n  }\r\n}","import { Provider } from '@angular/core';\r\n\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\nimport { DataVariableParser } from './data_variable_parser';\r\nimport { UIStateVariableParser } from './ui_state_variable_parser';\r\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\r\nimport { CommandVariableParser } from './command_variable_parser';\r\nimport { VariableParseService } from './variable_parse_service';\r\nimport { FrameIdVariableParser } from './frame_id_variable_parser';\r\nimport { FormStateVariableParser } from './form_state_variable_parser';\r\nimport { EventParamVariableParser } from './event_param_variable_parser';\r\n\r\n// Providers\r\nconst VARIABLE_PROVIDERS: Provider[] = [\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FrameIdVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FormStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: EventParamVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: DataVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: UIStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: StateMachineVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: CommandVariableParser },\r\n  VariableParseService\r\n];\r\n\r\nexport {\r\n  VariableParser, VARIABLE_PARSERS,\r\n  FrameIdVariableParser,\r\n  DataVariableParser, UIStateVariableParser,\r\n  CommandVariableParser, StateMachineVariableParser,\r\n  VariableParseService, EventParamVariableParser, VARIABLE_PROVIDERS\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务函数\r\n * @params result 上一步执行结果\r\n * @params context 执行上下文\r\n */\r\ntype LinkFunc = (context: CommandContext) => boolean;\r\n\r\n/**\r\n * 任务链接\r\n */\r\nclass TaskLink {\r\n\r\n  /**\r\n   * 源任务\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * 目标任务\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * 执行条件\r\n   * 1、表达式；\r\n   * 2、布尔值；\r\n   * 3、函数\r\n   */\r\n  condition: string | boolean| LinkFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(from: string, to: string, condition: string | boolean| LinkFunc) {\r\n    this.from = from;\r\n    this.to   = to;\r\n    this.condition = condition;\r\n  }\r\n\r\n  /**\r\n   * 是否能够\r\n   */\r\n  public canLink(context: CommandContext): boolean {\r\n    const type = typeof this.condition;\r\n    let canLink;\r\n    switch (type) {\r\n      case 'boolean':\r\n        canLink = this.condition as boolean;\r\n        break;\r\n      case 'function':\r\n        canLink = (<LinkFunc>this.condition)(context);\r\n        break;\r\n      case 'string':\r\n        const parseService = context.frameContext.injector.get<VariableParseService>(VariableParseService);\r\n        canLink = parseService.evaluate(this.condition as string, context);\r\n        break;\r\n      default:\r\n        canLink = false;\r\n        break;\r\n    }\r\n    return canLink;\r\n  }\r\n}\r\n\r\nexport { LinkFunc, TaskLink };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-17 14:13:40\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-17 16:08:34\r\n */\r\n\r\nimport { TaskFunc, TaskNode } from './task_node';\r\nimport { LinkFunc, TaskLink } from './task_link';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务执行流程\r\n */\r\nclass TaskFlow {\r\n\r\n  /**\r\n   * 节点集合\r\n   */\r\n  private nodes: TaskNode[] = [];\r\n\r\n  /**\r\n   * 边集合\r\n   */\r\n  private links: TaskLink[] = [];\r\n\r\n\r\n  // #region 节点操作\r\n\r\n  /**\r\n   * 添加节点\r\n   */\r\n  public addNode(name: string, func: TaskFunc): void {\r\n    const node = new TaskNode(name, func);\r\n    this.nodes.push(node);\r\n  }\r\n\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addNodes(nodes: TaskNode[]) {\r\n    this.nodes = this.nodes.concat(nodes);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   * @param target 目标节点名称\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public insertNode(target: string, name: string, func: TaskFunc): void {\r\n    const index = this.findNodeIndex(target);\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   */\r\n  public appendNode(target: string, name: string, func: TaskFunc) {\r\n    const index = this.findNodeIndex(target) + 1;\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 获取节点索引\r\n   * @param name 名称\r\n   */\r\n  private findNodeIndex(name: string): number {\r\n    return this.nodes.findIndex((node: TaskNode) => {\r\n      return node.name === name;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建任务节点\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  private createNode(name: string, func: TaskFunc): TaskNode {\r\n    const node = new TaskNode(name, func);\r\n    return node;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 链接操作\r\n\r\n  /**\r\n   * 添加链接\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public addLink(from: string, to: string, condition: string | boolean) {\r\n    const link = this.createLink(from, to, condition);\r\n    this.links.push(link);\r\n  }\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addLinks(links: TaskLink[]) {\r\n    this.links = this.links.concat(links);\r\n  }\r\n\r\n  /**\r\n   * 创建链接\r\n   */\r\n  private createLink(from: string, to: string, condition: string | boolean) {\r\n    const link = new TaskLink(from, to, condition);\r\n    return link;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 流程控制\r\n  /**\r\n   * 获取下一个节点\r\n   * @param from    源节点名称\r\n   * @param context 上下文\r\n   */\r\n  getNext(from?: string, context?: CommandContext): TaskNode {\r\n    if (!from) {\r\n      return this.nodes.shift();\r\n    }\r\n\r\n    // 符合满足条件的边\r\n    const nextLink = this.links.find((link: TaskLink) => {\r\n      return link.from === from && link.canLink(context);\r\n    });\r\n    if (!nextLink) {\r\n      return;\r\n    }\r\n\r\n    return this.nodes.find((node: TaskNode) => {\r\n      return node.name === nextLink.to;\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 其他方法\r\n\r\n  /**\r\n   * 克隆任务流\r\n   */\r\n  clone() {\r\n    const taskFlow = new TaskFlow();\r\n    taskFlow.addNodes(this.nodes);\r\n    taskFlow.addLinks(this.links);\r\n    return taskFlow;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { TaskFlow };\r\n","import { FrameContext } from '../frame/index';\r\nimport { Command } from './command';\r\n\r\n/**\r\n * Command上下文\r\n */\r\nclass CommandContext {\r\n\r\n  public typeName = 'CommandContext';\r\n\r\n  /**\r\n   * 命令实例\r\n   */\r\n  command: Command;\r\n\r\n  /**\r\n   * 组件上下文\r\n   */\r\n  frameContext: FrameContext;\r\n\r\n  /**\r\n   * 执行结果\r\n   * 记录每一个task执行的结果\r\n   */\r\n  results: { [taskName: string]: any } = {};\r\n\r\n  /**\r\n   * 最新的执行结果\r\n   */\r\n  latestResult: any;\r\n\r\n  /**\r\n   * 事件参数\r\n   */\r\n  eventParam: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param command 命令\r\n   * @param frameContext 框架上下文\r\n   */\r\n  constructor(command: Command, frameContext: FrameContext) {\r\n    this.command = command;\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandContext };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Translate } from './translate';\r\n\r\nexport const TranslateToken = new InjectionToken<Translate>('@farris/devkit TranslateToken');\r\n","import { InjectionToken, Optional, Injector } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport { concatMap, map, takeLast, take, timeout, throwIfEmpty } from 'rxjs/operators';\r\n\r\nimport { FrameContext } from '../frame/index';\r\nimport { VariableParseService } from '../variable/index';\r\n\r\nimport { Command, CommandParams, ParamDescriptions } from './command';\r\nimport { CommandContext } from './command_context';\r\nimport { TaskFunc, TaskFlow } from './flow/index';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { Translate } from '../i18n/translate';\r\n\r\n/**\r\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\r\n */\r\nabstract class CommandHandler {\r\n\r\n  /**\r\n   * 任务流程图\r\n   */\r\n  private taskFlow: TaskFlow;\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 变量解析服务\r\n   */\r\n  protected parseService: VariableParseService;\r\n\r\n  public commandName: string;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 构造执行流程\r\n   */\r\n  abstract schedule();\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.frameContext = frameContext;\r\n    this.parseService = variableParseService;\r\n    this.taskFlow = new TaskFlow();\r\n\r\n    this.schedule();\r\n  }\r\n\r\n  /**\r\n   * 执行任务\r\n   * @param command 要执行的命令\r\n   * @return 最后一个任务的执行结果\r\n   * @todo：按功能拆分小函数\r\n   */\r\n  public execute(command: Command): Observable<any> {\r\n    const lastTaskResult$ = new Subject();\r\n    const taskFlow = this.taskFlow.clone();\r\n\r\n    // setTimeout暂时不能去掉的原因：\r\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\r\n    // 2、关闭前命令需要延迟执行。\r\n    setTimeout(() => {\r\n\r\n      // 1、解析参数\r\n      // 避免解析变量时修改了原始的command\r\n      const { eventParam = null } = {\r\n        ...command\r\n      };\r\n      delete command.eventParam;\r\n      const commandToExecute = JSON.parse(JSON.stringify(command));\r\n      commandToExecute.params = this.paramsTransform(commandToExecute.params);\r\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.frameContext, eventParam);\r\n      command.eventParam = eventParam;\r\n      commandToExecute.eventParam = eventParam;\r\n      this.transParamTypes(commandToExecute.params, commandToExecute.paramDescriptions);\r\n\r\n      // 2、串联任务流\r\n      const initContext = new CommandContext(commandToExecute, this.frameContext);\r\n      initContext.eventParam = command.eventParam || null;\r\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\r\n      let currentTask = taskFlow.getNext('', initContext);\r\n      const highOrder$ = context$.pipe(\r\n        concatMap((context: CommandContext) => {\r\n          const result$ = currentTask.execute(context);\r\n          return result$.pipe(\r\n            take(1),\r\n            map((result: any) => {\r\n\r\n              // 写入执行结果\r\n              context.results[currentTask.name] = result;\r\n              context.latestResult = result;\r\n              currentTask = taskFlow.getNext(currentTask.name, context);\r\n\r\n              // 操作控制流\r\n              if (currentTask) {\r\n                context$.next(context);\r\n              } else {\r\n                context$.complete();\r\n              }\r\n\r\n              // 将结果流转换为context流\r\n              return context;\r\n            }),\r\n            throwIfEmpty(() => {\r\n              context$.complete();\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      // 3、执行合并后的任务流\r\n      highOrder$.pipe(\r\n        takeLast(1)\r\n      ).subscribe({\r\n        next: (context: CommandContext) => {\r\n          lastTaskResult$.next(context.latestResult);\r\n        },\r\n        error: (error: any) => {\r\n          this.displayError(error);\r\n          lastTaskResult$.error(error);\r\n        },\r\n        complete: () => {\r\n          lastTaskResult$.complete();\r\n        },\r\n      });\r\n\r\n    }, 0);\r\n\r\n    return lastTaskResult$;\r\n  }\r\n\r\n  /**\r\n   * 显示错误信息\r\n   */\r\n  private displayError(error: any) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n  /**\r\n   * 参数国际化转换方法\r\n   */\r\n  private  paramsTransform(params: object) {\r\n    const exp  = /\\{\\{(\\w+)\\}\\}/g;\r\n    if (!params) {\r\n      return null;\r\n    }\r\n    const translateService = this.frameContext.injector.get<Translate>(TranslateToken, null) || null;\r\n    const pArray = Object.keys(params);\r\n    const result = {};\r\n    if (pArray.length === 0) {\r\n      return params;\r\n    }\r\n    pArray.forEach((p) => {\r\n      let ele = params[p];\r\n      if (ele && exp.test(ele) && translateService) {\r\n        ele = ele.replace(exp, ($1, $2) => {\r\n          return translateService.transform($2, null);\r\n        });\r\n      }\r\n      result[p] = ele;\r\n\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addTask(name: string, func: TaskFunc) {\r\n    this.taskFlow.addNode(name, func);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addLink(from: string, to: string, condition: string | boolean) {\r\n    this.taskFlow.addLink(from, to, condition);\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public insertTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public afterTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 替换任务\r\n   * @param  name 要替换的任务名称\r\n   * @param  func 替换函数\r\n   */\r\n  public replaceTask(name: string, func: TaskFunc) {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 调用方法\r\n   */\r\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\r\n    this.setContextToServiceInstance(serviceInstance, context);\r\n    const parsedArgs = this.parseService.parse(args, context, context.eventParam);\r\n    return serviceInstance[method](...parsedArgs);\r\n  }\r\n\r\n  /**\r\n   * 为服务设置命令上下文\r\n   * @todo\r\n   * 通过这种方式存在很大问题：\r\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\r\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\r\n   * 建议解决方案：\r\n   * 1、将context修改为某个特殊属性名；\r\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\r\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\r\n   */\r\n  protected setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\r\n\r\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\r\n    const serviceContext = serviceInstance.context;\r\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\r\n      return;\r\n    }\r\n\r\n    serviceInstance.context = context;\r\n  }\r\n\r\n  /**\r\n   * 根据参数描述信息转换参数类型\r\n   */\r\n  private transParamTypes(params: CommandParams, paramDescriptions: ParamDescriptions) {\r\n    if (!paramDescriptions) {\r\n      return;\r\n    }\r\n    const keys = Object.keys(params);\r\n    keys.forEach(key => {\r\n      if (!paramDescriptions[key] || !paramDescriptions[key].type) {\r\n        return;\r\n      }\r\n\r\n      const parType = paramDescriptions[key].type;\r\n      const value = params[key];\r\n      if (value === undefined || value === null || typeof value === parType) {\r\n        return; // 值不存在或类型匹配，无需处理\r\n      }\r\n\r\n      switch (parType) {\r\n        case 'string':\r\n          // 其实转换前的参数都是string，这里不会走到\r\n          params[key] = value + '';\r\n          break;\r\n        case 'int':\r\n        case 'double':\r\n        case 'number':\r\n          // 前端数值类型只有number，这里兼容命令构件上设置为int和double的情况\r\n          const numResult = Number(value);\r\n          if (isNaN(numResult)) {\r\n            throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n          }\r\n          params[key] = numResult;\r\n          break;\r\n        case 'boolean':\r\n          let boolResult: boolean;\r\n          const strValue = (value + '').toLowerCase();\r\n          if (strValue === 'true') {\r\n            boolResult = true;\r\n          } else if (strValue === 'false') {\r\n            boolResult = false;\r\n          } else {\r\n            throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n          }\r\n          params[key] = boolResult;\r\n          break;\r\n        case 'datetime':\r\n          // todo：日期时间暂不处理\r\n          break;\r\n        case 'object':\r\n          // 表达式解析出来的参数，无需处理，按原类型返回\r\n          // todo: 输入参数是个json串，转成object\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 命令处理器注入Token\r\n */\r\nconst COMMAND_HANDLERS_TOKEN = new InjectionToken<CommandHandler>('@Farris Command Handlers');\r\n\r\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\r\n","/**\r\n * 命令处理注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER, NgCommandHandler } from './decorators';\r\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\r\n\r\n\r\n/**\r\n * 命令处理注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerRegistry {\r\n\r\n  /**\r\n   * CommandHandler Map\r\n   */\r\n  private handlerMap: Map<string, CommandHandler>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlers 命令处理实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLERS_TOKEN)handlers: CommandHandler[]) {\r\n    const self = this;\r\n    this.handlerMap = new Map<string, CommandHandler>();\r\n    if (handlers) {\r\n      handlers.forEach((handler: CommandHandler) => {\r\n        self.regist(handler);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加命令处理\r\n   * @param  commandName    命令名称\r\n   * @param  commandHandler 命令处理实例\r\n   */\r\n  public set(commandName: string, commandHandler: CommandHandler) {\r\n    if (this.handlerMap.has(commandName)) {\r\n      throw new Error(commandName + '对应的CommandHandler已经存在');\r\n    }\r\n    this.handlerMap.set(commandName, commandHandler);\r\n  }\r\n\r\n  /**\r\n   * 获取命令处理\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理实例\r\n   */\r\n  public get(commandName: string): CommandHandler {\r\n    if (this.handlerMap.has(commandName) === false) {\r\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\r\n    }\r\n    return this.handlerMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 注册命令处理\r\n   * @param handlers 命令处理实例\r\n   */\r\n  public regist(commandHandler: CommandHandler) {\r\n    let commandName = commandHandler.commandName;\r\n    if (!commandName) {\r\n      // 根据metadata获取对应的Command名称\r\n      const handlerMetadata: NgCommandHandler =\r\n        MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);\r\n      if (!handlerMetadata) {\r\n        throw new Error('CommandHandler必须指定要处理的命令名称');\r\n      }\r\n      commandName = handlerMetadata.commandName;\r\n    }\r\n    this.set(commandName, commandHandler);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerRegistry };\r\n","/**\r\n * 命令处理扩展相关\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\nimport { CommandHandler } from './command_handler';\r\n\r\n/**\r\n * 命令处理扩展抽象类\r\n *\r\n * CommandHandler由一个个Task串联而成，这些Task不是一成不变，\r\n * 通过CommandHandlerExtender可以在不同的时机对它扩展，\r\n * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。\r\n *\r\n * ### 定义并注册扩展\r\n *\r\n * **定义一个扩展**\r\n *\r\n * 按如下步骤可以实现一个扩展：\r\n * - 继承CommandHandlerExtender抽象基类；\r\n * - 实现extend方法，在其内部对任务进行扩展、替换；\r\n * - 添加NgCommandHandlerExtender指定要扩展的命令。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandlerExtender({\r\n *    commandName: 'formLoad'\r\n *  })\r\n * class FormLoadExtender extends CommandHandlerExtender {\r\n *\r\n *   extend(handler: CommandHandler): CommandHandler {\r\n *\r\n *     // 扩展一个任务\r\n *     handler.extendTask('loadData', (originalResult) => {\r\n *       console.log('do sth. to the original result');\r\n *     });\r\n *\r\n *     // 替换一个任务\r\n *     handler.extendTask('transitState', () => {\r\n *       console.log('transit to other state');\r\n *     });\r\n *\r\n *     return handler;\r\n *   }\r\n * }\r\n * ```\r\n * 在extend方法内部：\r\n * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；\r\n * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。\r\n *\r\n * **注册扩展**\r\n *\r\n * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，\r\n * 由它来统一进行注册。\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])\r\n *   ]\r\n * })\r\n * class SimpleModule {}\r\n * ```\r\n */\r\n@Injectable()\r\nabstract class CommandHandlerExtender {\r\n\r\n  /**\r\n   * 扩展方法\r\n   * @param handler 要扩展的命令处理器\r\n   */\r\n  abstract extend(handler: CommandHandler): CommandHandler;\r\n\r\n}\r\n\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = new InjectionToken<CommandHandlerExtender>('@farris/devkit CommandHandler Extenders');\r\n\r\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\r\n","/**\r\n * 命令处理扩展注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER_EXTENDER, NgCommandExtender } from './decorators';\r\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\r\n\r\n/**\r\n * 命令处理扩展注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerExtenderRegistry {\r\n\r\n  /**\r\n   * CommandHandlerExtender实例Map\r\n   * - key：命令名称\r\n   * - value：命令扩展实例\r\n   */\r\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param extenders 命令扩展实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLER_EXTENDERS_TOKEN)extenders: CommandHandlerExtender[]) {\r\n    const self = this;\r\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\r\n    if (extenders) {\r\n      extenders.forEach((extender: CommandHandlerExtender) => {\r\n        self.regist(extender);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取命令扩展实例数组\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理扩展实例数组\r\n   */\r\n  get(commandName: string): CommandHandlerExtender[] {\r\n    if (this.extendersMap.has(commandName) === false) {\r\n      return [];\r\n    }\r\n    return this.extendersMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 添加命令扩展\r\n   * @param commandName Command名称\r\n   * @param extender    CommandHandlerExtender实例\r\n   * @return void\r\n   */\r\n  set(commandName: string, extender: CommandHandlerExtender) {\r\n    if (this.extendersMap.has(commandName)) {\r\n\r\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\r\n      this.extendersMap.get(commandName).push(extender);\r\n    } else {\r\n\r\n      // 如果不存在，则创建新的扩展数组，并追加\r\n      this.extendersMap.set(commandName, [extender]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册命令扩展\r\n   * @param extender CommandHandlerExtender实例\r\n   */\r\n  regist(extender: CommandHandlerExtender) {\r\n\r\n    // 通过元数据获取要扩展的Comamnd名称\r\n    const extenderMetadata: NgCommandExtender =\r\n      MetadataUtil.getClassMetadataByName(extender.constructor, NG_COMMAND_HANDLER_EXTENDER);\r\n    if (!extenderMetadata) {\r\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\r\n    }\r\n    const commandName = extenderMetadata.commandName;\r\n\r\n    // 添加到Map中\r\n    this.set(commandName, extender);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerExtenderRegistry };\r\n","import { makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * NgComponentState元数据名称\r\n */\r\nexport const NG_COMPONENT_STATE = 'NgParam';\r\n\r\n/**\r\n * NgComponentState\r\n */\r\nexport interface NgParam {\r\n\r\n  /**\r\n   * 组件的ID\r\n   */\r\n  componentId?: string;\r\n\r\n  /**\r\n   * 状态名称\r\n   */\r\n  stateName?: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n\r\n}\r\n\r\n/**\r\n * NgUIStateDecorator\r\n */\r\nexport interface NgParamDecorator {\r\n  (obj?: NgParam): any;\r\n  new(obj?: NgParam): any;\r\n}\r\n\r\n/**\r\n * NgUIState\r\n */\r\nexport const NgParam: NgParamDecorator =\r\n  makePropDecorator(NG_COMPONENT_STATE, (obj?: NgParam) => obj);\r\n\r\n\r\n","import { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMPONENT_STATE, NgParam } from './decorators';\r\n\r\nexport class UIStateMetadataUtil {\r\n\r\n  /**\r\n   * 获取NgUIState的属性元数据\r\n   * @param \r\n   * @returns 属性元数据对象\r\n   * @example\r\n   * 返回格式：\r\n   * {\r\n   *    '属性名称': <NgUIStateProperty>{ ...}\r\n   * }\r\n   */\r\n  static getUIFields(target: Function): {[propName: string]: NgParam} {\r\n      return MetadataUtil.getPropsMetadatasByName(target, NG_COMPONENT_STATE);\r\n  }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-17 13:38:23\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-17 13:38:50\r\n * @todo：临时删除原有功能，待重构\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\r\nimport { NgParam } from './decorators';\r\n\r\nexport interface UIStateObservableParam {\r\n  field: string;\r\n  value: any;\r\n}\r\n/**\r\n * UI状态\r\n */\r\n@Injectable()\r\nexport class UIState {\r\n  /**\r\n   * @deprecated innerData为状态机内部变量，外部请不要使用\r\n   */\r\n  innerData: {};\r\n\r\n  // 监听变化\r\n  public changes: Subject<UIStateObservableParam>;\r\n  public paramTypeTransform = false;\r\n  constructor() {\r\n    this.changes = new Subject<UIStateObservableParam>();\r\n    this.innerData = Object.assign({});\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    const uiFields = UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  initialize(context: any) {\r\n    const uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  private initializeUIField(uiFieldMetadata: { [key: string]: NgParam }): void {\r\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\r\n      const fieldMetadata = uiFieldMetadata[propertyName] as NgParam;\r\n      const uiField = fieldMetadata.stateName || propertyName;\r\n\r\n      if (delete this[propertyName]) {\r\n        this.defineProperty(propertyName, uiField);\r\n      }\r\n    });\r\n  }\r\n\r\n  public isExistProperty(propertyName: any) {\r\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private defineProperty(propertyName: any, field: any = null) {\r\n    Object.defineProperty(this, propertyName, {\r\n      get: function () {\r\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n      },\r\n      set: function (value) {\r\n        // 值相同时不触发变更\r\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n        if (this.paramTypeTransform === true) {\r\n          const ngParams = UIStateMetadataUtil.getUIFields(this.constructor);\r\n          const ngParam = ngParams && ngParams[propertyName] || null;\r\n          const dataType = ngParam && ngParam.originalDataType || null;\r\n          if (dataType) {\r\n            value = this.transform(value, dataType);\r\n          }\r\n        }\r\n        if (oldValue === value) {\r\n          return;\r\n        }\r\n        if (field !== null) {\r\n          this.innerData[field] = value;\r\n        } else {\r\n          this.innerData[propertyName] = value;\r\n        }\r\n        this.changes.next({\r\n          field: propertyName,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public setPropertyValue(propertyName: any, value: any) {\r\n    if (propertyName === '' || propertyName === undefined) {\r\n      return;\r\n    }\r\n    if (!this.isExistProperty(propertyName)) {\r\n      this.defineProperty(propertyName);\r\n    }\r\n    this[propertyName] = value;\r\n  }\r\n  private transform(target: any, dataType: string) {\r\n    if (!dataType) {\r\n      return target;\r\n    }\r\n    dataType = dataType.toLowerCase();\r\n    if (dataType === 'string') {\r\n      if (target === null || target === undefined) {\r\n        return target;\r\n      }\r\n      return target.toString();\r\n    } else if (dataType === 'number') {\r\n      if (target === undefined) {\r\n        return undefined;\r\n      }\r\n      const result = Number(target);\r\n      if (isNaN(result)) {\r\n        throw new Error(`${target}无法转换为数字！`);\r\n      }\r\n      return result;\r\n    } else if (dataType === 'boolean') {\r\n      if (typeof target === 'boolean') {\r\n        return target;\r\n      } else {\r\n        if (target === null || target === undefined) {\r\n          return false;\r\n        }\r\n        target = target.toString().toLowerCase();\r\n        if (target === 'false') {\r\n          return false;\r\n        } else if (target === 'true') {\r\n          return true;\r\n        } else {\r\n          throw new Error(`${target}无法转换为布尔类型！`);\r\n        }\r\n      }\r\n    } else if (dataType === 'date' || dataType === 'datetime') {\r\n      // 日期、日期时间在前端依然按照字符串处理\r\n      return target;\r\n    } else if (dataType === 'object') {\r\n      if (typeof target === 'object') {\r\n        return target;\r\n      } else {\r\n        try {\r\n          return JSON.parse(target);\r\n        } catch {\r\n          throw new Error(`${target}无法转换为对象！`);\r\n        }\r\n      }\r\n    } else {\r\n      return target;\r\n    }\r\n  }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n/**\r\n * 变量类型转换\r\n */\r\nexport const PARAM_TYPE_TRANSFORM_TOKEN = new InjectionToken<boolean>('@farris/devkit_param_type_transform');","import { ViewModel } from '../view-model/index';\r\nimport { StateMachineContext } from './context';\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * State相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\r\n */\r\nexport class State {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param name 状态名称\r\n   */\r\n  constructor(public name: string) {\r\n  }\r\n}\r\n\r\n/**\r\n * 基本状态字典, 形如\r\n * {\r\n *  stateName1: stateInstance1,\r\n *  stateName2: stateInstance2,\r\n *  ...\r\n * }\r\n */\r\nexport interface StateDictionary {\r\n    [index: string]: State;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * RenderState相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 渲染状态，该状态用于和界面UI绑定\r\n */\r\nexport type RenderState = boolean;\r\n\r\n/**\r\n * 初始渲染状态\r\n */\r\nexport const initialUIState: RenderState = false;\r\n\r\n/**\r\n * 渲染状态字典，形如：\r\n * {\r\n *  renderStateName1: true,\r\n *  renderStateName1: false,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderStateDictionary {\r\n  [index: string]: RenderState;\r\n}\r\n\r\n\r\n/**\r\n * 渲染方法\r\n * 该方法接收一个StateMachineContext类型的上下文，\r\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\r\n */\r\nexport type Render = (context: StateMachineContext) => RenderState;\r\n\r\n/**\r\n * 渲染方法字典\r\n * {\r\n *  renderStateName1: render1,\r\n *  renderStateName1: render2,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderDictionary {\r\n  [index: string]: Render;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Action相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 状态机动作\r\n */\r\nexport type Action = () => any;\r\n\r\n/**\r\n * 状态机行为约束条件\r\n */\r\n// export interface Precondition {\r\n// }\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Effect相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\r\n */\r\nexport interface EffectHandlerOption {\r\n\r\n  /**\r\n   * 效果类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 效果实现\r\n   */\r\n  effect: any;\r\n}\r\n\r\n/**\r\n * 状态机界面效果\r\n */\r\nexport interface Effect {\r\n\r\n  /**\r\n   * 行为约束条件集合\r\n   */\r\n  preconditions?: any[];\r\n\r\n  /**\r\n   * 发生某行为后引起的界面变化效果\r\n   */\r\n  handlers?: EffectHandlerOption[];\r\n}\r\n\r\n/**\r\n * 状态机效果字典\r\n */\r\nexport interface EffectDictianry {\r\n    [index: string]: Effect;\r\n}\r\n\r\n\r\n","import { StateMachine } from './state_machine';\r\nimport { State } from './types';\r\nimport { Context } from '../context/context';\r\nimport { VariableParseService } from '../variable/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\n\r\n/**\r\n * 状态机上下文\r\n */\r\nexport class StateMachineContext {\r\n\r\n  /**\r\n   * 当前状态名称\r\n   */\r\n  state: string;\r\n\r\n  parent: Context;\r\n\r\n  parser: VariableParseService;\r\n\r\n  frameContext: FrameContext;\r\n\r\n  stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 构造函数\r\n   * @param stateMachine 状态机\r\n   * @param initialState 初始状态\r\n   */\r\n  constructor(public stateMachine: StateMachine) {\r\n    // this.state = initialState.name;\r\n  }\r\n\r\n  initialize(variableParseService: VariableParseService, initialState: State) {\r\n    this.frameContext = this.stateMachine && this.stateMachine.frameContext || null;\r\n    this.state = this.state || (initialState ? initialState.name : '');\r\n    this.parser = variableParseService;\r\n    this.stateMachineEvent = this.stateMachine.stateMachineEvent;\r\n  }\r\n\r\n  /**\r\n   * 状态迁移\r\n   * @param stateName 下一状态的名称\r\n   */\r\n  transitTo(stateName: string) {\r\n    const nextState = this.stateMachine.states[stateName];\r\n    if (nextState) {\r\n      this.state = nextState.name;\r\n      this.stateMachine.render();\r\n    }\r\n  }\r\n\r\n  parse(expression: string, targetType: 'source' | 'target'): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    const context = this.stateMachineEvent.getFrameContext(expression) || this.stateMachine.frameContext;\r\n    switch (targetType) {\r\n      case 'source':\r\n        return this.parseSourceValue(expression, context);\r\n      case 'target':\r\n        return this.parser.parse(expression, context);\r\n    }\r\n  }\r\n\r\n  private parseSourceValue(expression: string, context: any): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    let result = expression.trim();\r\n    result = this.parser.parse(result, context);\r\n    if (result === 'state') {\r\n      result = this.state;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // 兼容旧版本\r\n  get(expression: string): any {\r\n    return this.getUIState(expression);\r\n  }\r\n  // 解析uistate变量表达式并返回表达式的值\r\n  getUIState(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenUIStateChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n\r\n  // 解析data变量表达式并返回表达式的值\r\n  getData(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenEntityChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { StateMachine } from './state_machine';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Change } from '../binding-data/changes';\r\nimport { AppContext } from '../app';\r\n\r\n/**\r\n * 状态机事件，监听uistate的变化和entity的变化\r\n */\r\n@Injectable()\r\nexport class StateMachineEvent {\r\n\r\n  frameContext: FrameContext;\r\n\r\n  get appContext(): AppContext {\r\n    return this.stateMachine.appContext as AppContext;\r\n  }\r\n\r\n  uiFieldList: Array<string> = [];\r\n\r\n  frameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  dataFieldList: Array<string> = [];\r\n\r\n  dataFrameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  constructor(public stateMachine: StateMachine) {\r\n    this.frameContextMap = new Map<FrameContext, any>();\r\n    this.dataFrameContextMap = new Map<FrameContext, any>();\r\n  }\r\n\r\n  initialize(frameContext: FrameContext) {\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n  /**\r\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\r\n   */\r\n  private extractPaths(expression: string): string {\r\n    let path = '';\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}$/g;\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}$/g;\r\n    if (typeof expression === 'string') {\r\n      const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n      const dataVariables = expression.match(DATA_PATTERN_G);\r\n      if (uiStateVariables !== null) {\r\n        const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}$/;\r\n        uiStateVariables.forEach((uiStateVariable: string) => {\r\n          const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n      if (dataVariables !== null) {\r\n        const DATA_PATTERN = /\\{DATA~(\\S+?)\\}$/;\r\n        dataVariables.forEach((dataVariable: string) => {\r\n          const pathMatches = dataVariable.match(DATA_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 根据表达式返回当前组件的frameContext\r\n  getFrameContext(expression: any): FrameContext {\r\n    let frameId = this.extractPaths(expression).split('/')[1] || '';\r\n    if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {\r\n      const relativeFrameId = frameId.substring(2, frameId.length - 1);\r\n      frameId = this.frameContext.namespace ? `${this.frameContext.namespace}_${relativeFrameId}` : relativeFrameId;\r\n    }\r\n    return this.appContext.getFrameContext(frameId);\r\n  }\r\n\r\n  // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)\r\n  getFrameField(expression: any) {\r\n    return this.extractPaths(expression).split('/')[2];\r\n  }\r\n\r\n  // 监听表单变量的变化\r\n  ListenUIStateChange(frameContext: FrameContext, expression: any) {\r\n    const frameField = this.getFrameField(expression);\r\n    if (!this.frameContextMap.has(frameContext)) {\r\n      this.frameContextMap.set(frameContext, this.uiFieldList);\r\n      frameContext.uiState.changes.subscribe((data) => {\r\n        if (data.field && this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {\r\n      this.uiFieldList.push(frameField);\r\n    }\r\n  }\r\n\r\n\r\n  // 监听实体数据的变化\r\n  ListenEntityChange(frameContext: FrameContext, expression: any) {\r\n    if (!this.dataFrameContextMap.has(frameContext)) {\r\n      this.dataFrameContextMap.set(frameContext, this.dataFieldList);\r\n      frameContext.bindingData.changes.subscribe((change: Change) => {\r\n        // 切换当前行用到的是\r\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\r\n          this.stateMachine.render();\r\n        }\r\n        if (change.path.join() && this.isAccordingValue(this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {\r\n      this.dataFieldList.push(expression);\r\n    }\r\n  }\r\n  // 监听是否是解析的数据发生变化\r\n  isAccordingValue(arr: any, path: string) {\r\n    return arr.find(item => {\r\n      return item.indexOf(path) > -1;\r\n    }) === undefined ? false : true;\r\n  }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { StateMachineContext } from './context';\r\nimport { NgState, NgAction, NgRenderState } from './decorators';\r\nimport {\r\n  State, initialUIState, Effect, Render,\r\n  StateDictionary, RenderStateDictionary, RenderDictionary\r\n} from './types';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\n\r\n/**\r\n * 状态机初始化配置对象\r\n */\r\nexport interface StateMachineOption {\r\n\r\n  /**\r\n   * 界面渲染描述\r\n   */\r\n  renders?: { [index: string]: Render };\r\n\r\n  /**\r\n   * 状态集合\r\n   */\r\n  states?: string[];\r\n\r\n  /**\r\n   * 状态机界面控制效果\r\n   */\r\n  effects?: { [index: string]: Effect };\r\n}\r\n\r\n/**\r\n * 预置界面效果处理\r\n */\r\nexport const effectHandlers = {\r\n\r\n  /**\r\n   * 预置状态迁移处理\r\n   */\r\n  transit: {\r\n\r\n    /**\r\n     * 执行状态迁移\r\n     * @param stateMachine  状态机对象\r\n     * @param stateName     下一状态的名称\r\n     * @param preconditions 迁移条件\r\n     */\r\n    // tslint:disable-next-line: only-arrow-functions\r\n    perform: function (statemachine: StateMachine, stateName: string, preconditons: any[] = []) {\r\n      const nextState: State = statemachine.states[stateName];\r\n      statemachine.context.transitTo(nextState.name);\r\n      statemachine.render();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 状态机\r\n *\r\n * ### 基本概念\r\n * 状态机中有三个重要的概念：\r\n * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；\r\n * - 控件状态（RenderState）：控制具体控件的状态；\r\n * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。\r\n *\r\n * ### 定义状态机\r\n *\r\n * **基本步骤**\r\n *\r\n * - 继承StateMachine基类，并添加NgStatemachine注解；\r\n * - 定义页面状态、控件状态、迁移动作。\r\n *\r\n * **状态机中的注解**\r\n *\r\n * - NgStatemachine：将类标记为状态机，并进行扩展；\r\n * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；\r\n * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，\r\n *   一般情况下是通过对页面状态进行逻辑运算来确定。\r\n * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgStatemachine()\r\n * class SimpleStateMachine extends StateMachine {\r\n *\r\n *   // 查看状态，设置为初始状态\r\n *   @NgState({ initialState: true })\r\n *   viewState: State;\r\n *\r\n *   // 编辑状态\r\n *   @NgState()\r\n *   editState: State;\r\n *\r\n *   // 编辑按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'viewState'\r\n *   })\r\n *   canEdit: RenderState;\r\n *\r\n *   // 保存按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canSave: RenderState;\r\n *\r\n *   // 输入控件是否允许输入\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canInput: RenderState;\r\n *\r\n *   // 迁移到编辑状态\r\n *   @NgAction({ transitTo: 'editState' })\r\n *   edit: Action;\r\n *\r\n *   // 迁移到查看状态\r\n *   @NgAction({ transitTo: 'viewState' })\r\n *   view: Action;\r\n * }\r\n * ```\r\n * 在上边的代码中做了如下定义：\r\n * - 两个页面状态：查看状态、编辑状态，\r\n * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，\r\n * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。\r\n *\r\n *\r\n * ### 在模板中使用状态机\r\n *\r\n * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。\r\n *\r\n * ```html\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canEdit\">编辑</button>\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canSave\">保存</button>\r\n * <input id=\"code\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * <input id=\"name\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * ```\r\n *\r\n * ### 执行状态迁移\r\n * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。\r\n * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。\r\n * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *   commandName: 'save'\r\n * })\r\n * class SaveHandler extends CommandHandler {\r\n *\r\n *   schedule() {\r\n *     this.addTask('save', () => {\r\n *       // 实现保存\r\n *     });\r\n *\r\n *     // 状态迁移\r\n *     this.addTask('transitState', ) => {\r\n *       this.stateMachine['view']();\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class StateMachine {\r\n  private isStateInited = false;\r\n  /**\r\n   * 初始状态\r\n   */\r\n  public initialState: State;\r\n\r\n  /**\r\n   * 状态字典\r\n   */\r\n  public states: StateDictionary;\r\n\r\n  /**\r\n   * 渲染状态字典\r\n   */\r\n  public renderStates: RenderStateDictionary;\r\n\r\n  /**\r\n   * 渲染器字典\r\n   */\r\n  public renders: RenderDictionary;\r\n\r\n  /**\r\n   * 状态机上下文\r\n   */\r\n  public context: StateMachineContext;\r\n\r\n  /**\r\n   * 状态变更\r\n   */\r\n  public stateChange: BehaviorSubject<string>;\r\n\r\n  public appContext: any;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 状态机元数据\r\n   */\r\n  public metadatas: { states: { [stateName: string]: NgState }, renderStates: { [renderStateName: string]: NgRenderState }, actions: { [actionName: string]: NgAction } };\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n\r\n    // 遍历所有属性装饰器，并调用相应的build方法\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          this['build' + propMetadata.ngMetadataName](propName, propMetadata);\r\n        });\r\n      });\r\n    }\r\n\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n\r\n    this.stateChange = new BehaviorSubject<any>(false);\r\n    this.context = new StateMachineContext(this);\r\n    this.stateMachineEvent = new StateMachineEvent(this);\r\n  }\r\n\r\n  // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\r\n  initialize(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.appContext = frameContext.appContext;\r\n    this.frameContext = frameContext;\r\n    const stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();\r\n    this.metadatas = stateMachineMetadata;\r\n    this.buildStateMachine(stateMachineMetadata);\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n    this.context.initialize(variableParseService, this.initialState);\r\n    this.stateMachineEvent.initialize(this.frameContext);\r\n    this.render();\r\n  }\r\n\r\n  private collectionMetadata(): {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  } {\r\n    const stateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          switch (propMetadata.ngMetadataName) {\r\n            case 'NgState':\r\n              stateMachineMetadata.states[propName] = propMetadata;\r\n              break;\r\n            case 'NgRenderState':\r\n              stateMachineMetadata.renderStates[propName] = propMetadata;\r\n              break;\r\n            case 'NgAction':\r\n              stateMachineMetadata.actions[propName] = propMetadata;\r\n              break;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return stateMachineMetadata;\r\n  }\r\n\r\n  private buildStateMachine(metadata: {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  }) {\r\n    Object.keys(metadata.states).forEach((stateName: string) => {\r\n      this.buildNgState(stateName, metadata.states[stateName]);\r\n    });\r\n\r\n    Object.keys(metadata.renderStates).forEach((renderStateName: string) => {\r\n      this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);\r\n    });\r\n\r\n    Object.keys(metadata.actions).forEach((actionName: string) => {\r\n      this.buildNgAction(actionName, metadata.actions[actionName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 构造状态\r\n   * @param stateName 状态名称\r\n   * @param ngState   状态对象\r\n   */\r\n  private buildNgState(stateName: string, ngState: NgState) {\r\n    this.states = this.states || {};\r\n    this[stateName] = new State(stateName);\r\n    this.states[stateName] = this[stateName];\r\n    if (ngState.initialState) {\r\n      this.initialState = this[stateName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 构造界面状态\r\n   * @param renderStateName 渲染状态名称\r\n   * @param ngRenderState   渲染状态元数据\r\n   */\r\n  private buildNgRenderState(renderStateName: string, ngRenderState: NgRenderState) {\r\n    this.renderStates = this.renderStates || {};\r\n    this[renderStateName] = initialUIState;\r\n    this.renderStates[renderStateName] = this[renderStateName];\r\n\r\n    // 将renderState上指定的render加入到renders中\r\n    this.renders = this.renders || {};\r\n    this.renders[renderStateName] = ngRenderState.render;\r\n  }\r\n\r\n  /**\r\n   * 构造动作\r\n   * @param actionName 动作名称\r\n   * @param ngAction   动作元数据\r\n   */\r\n  private buildNgAction(actionName: string, ngAction: NgAction) {\r\n    this[actionName] = () => {\r\n      effectHandlers.transit.perform(this, ngAction.transitTo, ngAction.precondition);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重新计算所有渲染状态的值\r\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\r\n   */\r\n  render() {\r\n    for (const renderStateName in this.renderStates) {\r\n\r\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\r\n        continue;\r\n      }\r\n\r\n      const stateRender = this.renders[renderStateName];\r\n      if (!stateRender) {\r\n        continue;\r\n      }\r\n\r\n      // 调用render方法，更新renderState\r\n      this.renderStates[renderStateName] = stateRender(this.context);\r\n      this[renderStateName] = this.renderStates[renderStateName];\r\n    }\r\n    this.stateChange.next(this.context.state);\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\nimport { Render } from './types';\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgState\r\n */\r\nexport interface NgState {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  initialState?: boolean;\r\n  /**\r\n   * 状态名称\r\n   */\r\n  name?: string;\r\n}\r\n\r\n/**\r\n * NgStateDecorator\r\n */\r\nexport interface NgStateDecorator {\r\n  (obj?: NgState): any;\r\n  new(obj?: NgState): any;\r\n}\r\n\r\n/**\r\n * NgState\r\n */\r\nexport const NgState: NgStateDecorator =\r\n  makePropDecorator('NgState', (obj?: NgState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgRenderStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport interface NgRenderState {\r\n  render: Render;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport interface NgRenderStateDecorator {\r\n  (obj?: NgRenderState): any;\r\n  new(obj?: NgRenderState): any;\r\n}\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport const NgRenderState: NgRenderStateDecorator =\r\n  makePropDecorator('NgRenderState', (obj: NgRenderState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgActionDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgAction\r\n */\r\nexport interface NgAction {\r\n  precondition?: any[];\r\n  transitTo: string;\r\n}\r\n\r\n/**\r\n* NgActionDecorator\r\n*/\r\nexport interface NgActionDecorator {\r\n  (obj?: NgAction): any;\r\n  new(obj?: NgAction): any;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport const NgAction: NgActionDecorator =\r\n  makePropDecorator('NgAction', (action: NgAction) => action);","import { makePropDecorator } from '../metadata/index';\r\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommand\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 快捷键\r\n */\r\nexport interface Keybinding {\r\n\treadonly ctrlKey: boolean;\r\n\treadonly shiftKey: boolean;\r\n\treadonly altKey: boolean;\r\n\treadonly metaKey?: boolean;\r\n\treadonly key: String;\r\n}\r\n\r\n/**\r\n * 命令装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_COMMAND = 'NgCommand';\r\n\r\n/**\r\n * 命令描述\r\n */\r\nexport interface NgCommand {\r\n\r\n  /**\r\n   * 命令名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 命令参数\r\n   */\r\n  params?: CommandParams;\r\n\r\n  /**\r\n   * 框架id\r\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\r\n   */\r\n  frameId?: string;\r\n\r\n  /**\r\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\r\n   */\r\n  paramDescriptions?: ParamDescriptions;\r\n\r\n  /**\r\n   * 快捷键绑定\r\n   */\r\n  keyBinding?: Keybinding\r\n}\r\n\r\n\r\n/**\r\n * 命令装饰接口\r\n */\r\nexport interface NgCommandDecorator {\r\n  (ngCommand?: NgCommand): any;\r\n  new(ngCommand?: NgCommand): any;\r\n}\r\n\r\n/**\r\n * 命令装饰器工厂\r\n * @type {any}\r\n */\r\nexport const NgCommand: NgCommandDecorator =\r\n  makePropDecorator(NG_COMMAND, (obj: NgCommand) => obj);\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Command } from '../command/index';\r\nimport { NG_COMMAND, NgCommand, Keybinding } from './decorators';\r\nimport { BindingData, EntityValueChange } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Observable, of, Subject, from, EMPTY } from 'rxjs';\r\nimport { map, concatMap, tap, every, debounceTime, switchMap, takeLast } from 'rxjs/operators';\r\nimport { ExpressionManager, ExpressionResult } from '../expression/index';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { InvokeOnValueChange } from '../binding-data/types';\r\n\r\n/**\r\n * ViewModel是界面层访问应用层的入口。\r\n *\r\n * ### 定义ViewModel\r\n *\r\n * 定义ViewModel需要以下几个步骤：\r\n *\r\n * 1、定义的ViewModel需要继承ViewModel基类\r\n * 2、使用NgViewModel关联相关对象，比如：绑定数据（SinmpleDemoBindingData）、表单（SimpleDemoForm）、\r\n *    状态机（SimpleDemoStateMachine）等，但所有这些关联都是可选的，用不到或者自己单独实现时，不指定即可。\r\n * 3、同时我们需要传递一个injector给基类的构造函数，在ViewModel实例化时，会从injector获取NgViewModel声明的各个类型的实例。\r\n *\r\n * 下面我们来定义一个简单的ViewModel，代码如下：\r\n * ```ts\r\n * import { Injector, Injectable } from '@angular/core';\r\n * import { NgViewModel, ViewModel } from '@farris/devkit';\r\n *\r\n * @Injectable()\r\n * @NgViewModel({\r\n *   children: [],\r\n *   binding: SimpleDemoBindingData,\r\n *   form: SimpleDemoForm,\r\n *   stateMachine: SimpleDemoStateMachine,\r\n * })\r\n * class SimpleDemoViewModel extends ViewModel {\r\n *    constructor(injector: Injector) {\r\n *      super(injector);\r\n *    }\r\n *    @NgCommand({\r\n *      name: 'formLoad',\r\n *      params: {\r\n *        dataId: '1'\r\n *      }\r\n *    })\r\n *    public formLoad() {}\r\n * }\r\n * export { SimpleDemoViewModel };\r\n * ```\r\n *\r\n * 通过组件的构造函数，我们将ViewModel注入进组件\r\n * ```ts\r\n * @Component({\r\n *   selector: 'app-simple-demo',\r\n *   templateUrl: './simple-demo.component.html'\r\n * })\r\n * class SimpleDemoComponent implements OnInit {\r\n *\r\n *   public viewModel: SimpleDemoViewModel;\r\n *\r\n *   constructor(viewModel: SimpleDemoViewModel) {\r\n *     this.viewModel = viewModel;\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * ### 组件模板中使用ViewModel\r\n *\r\n * 我们可以在模板中绑定NgViewModel中指定的 BindingData、Form、StateMachine的实例。\r\n * ```html\r\n * * <!--绑定数据-->\r\n * <p>{{viewModel.bindingData.name}}</p>\r\n *\r\n * <!--绑定表单-->\r\n * <form [formGroup]=\"viewModel.form\">\r\n *   <input type=\"text\" formControlName=\"name\">\r\n * </form>\r\n *\r\n * <!--绑定状态机-->\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canAdd\">新增 </button>\r\n * * ```\r\n *\r\n * 我们在模板中绑定绑定viewModel的一个方法作为事件处理，这个方法可以是普通的方法，也可以是用NgCommand注解修饰过的。\r\n * ```html\r\n * <button type=\"button\" (click)=\"viewModel.add()\">新增 </button>\r\n * ```\r\n *\r\n * ### 组合的ViewModle\r\n *\r\n * 当界面比较复杂时，我们对界面按一定的粒度进行拆分，拆分出来的各个组成部分分别对应一个ViewModel，这样就形成了一个ViewModel树。\r\n * 我们在父的ViewModel的NgViewModel注解中通过在children属性中声明它的子ViewModel，将它们关联起来。\r\n * 假设我们有一个左列表右卡片的界面，我们可以为左列表、右卡片分别定义一个ViewModel，然后在页面的ViewModel中，将它们组合起来，\r\n * 代码如下：\r\n * ```ts\r\n * @Injectable()\r\n *  @NgViewModel({\r\n *  children: [LeftListViewModel, RightCardViewModel],\r\n *    binding: NestedDemoBindingData,\r\n * })\r\n * class NestedDemoViewModel extends ViewModel {\r\n *   constructor(injector: Injector) {\r\n *     super(injector);\r\n *   }\r\n * }\r\n * export { NestedDemoViewModel };\r\n * ```\r\n */\r\n@Injectable()\r\nclass ViewModel {\r\n\r\n  public name: string;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * 绑定路径\r\n   * 形如：/(根实体)，/edus（从表），/edus/grades（从从表）\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 界面状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 表单定义\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 界面验证信息\r\n   */\r\n  public verifyInformations: any[] = [];\r\n\r\n  public verifycationChanged = new Subject<any[]>();\r\n  /**\r\n   * 表达式服务\r\n   */\r\n  public get expression(): ExpressionManager {\r\n    return this.frameContext.expressionManager;\r\n  }\r\n  /**\r\n   * 表达式结果\r\n   */\r\n  public get expressionResult(): ExpressionResult {\r\n    return this.frameContext.expressionResult;\r\n  }\r\n  /**\r\n   * 快捷键映射\r\n   */\r\n  public keybindingMap: Map<string, Keybinding>;\r\n\r\n  /**\r\n   * 值变化前监听器\r\n   */\r\n  private entityValueChangingListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 值变化后监听器\r\n   */\r\n  private entityValueChangedListeners: Map<string, string>;\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metadatas: { [propName: string]: NgCommand };\r\n\r\n  /**\r\n   * kendogrid option\r\n   */\r\n\r\n  // constructor(metadata?: IContextMetadata) {\r\n  //   if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n  //     this.bindingPath = metadata.bindingTo;\r\n  //   }\r\n  // }\r\n  constructor() { }\r\n\r\n  public setMetadata(metadata: IContextMetadata) {\r\n    if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n      this.bindingPath = metadata.bindingTo;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(context: FrameContext) {\r\n    if (!this.name) {\r\n      this.name = context.metadata.viewModelCode || this.constructor.name;\r\n    }\r\n    this.frameContext = context;\r\n    this.bindingData = context.bindingData;\r\n    this.uiState = context.uiState;\r\n    this.form = context.form;\r\n    this.stateMachine = context.stateMachine;\r\n    this.buildCommands(context);\r\n    this.entityValueChangingListeners = new Map<string, string>();\r\n    this.entityValueChangedListeners = new Map<string, string>();\r\n    // 为bindingData赋值值变化监听器\r\n    if (this.bindingData) {\r\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\r\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\r\n          const plainPath = '/' + paths.join('/');\r\n          let command: string;\r\n          if (entityChanged === false) {\r\n            command = this.entityValueChangingListeners[plainPath];\r\n          } else {\r\n            command = this.entityValueChangedListeners[plainPath];\r\n          }\r\n\r\n          if (!!command) {\r\n            const change: EntityValueChange = {\r\n              paths: paths,\r\n              preValue: preValue,\r\n              value: value,\r\n              id: primaryValue,\r\n              changed: entityChanged\r\n            };\r\n            const commands = command.split(';').filter(p => p);\r\n            let valueChangeSuccess = true;\r\n            return from(commands).pipe(\r\n              concatMap(item => {\r\n                if (!valueChangeSuccess) {\r\n                  return EMPTY;\r\n                }\r\n                return this[item](change).pipe(\r\n                  tap((result: any) => {\r\n                    valueChangeSuccess = result;\r\n                  })\r\n                );\r\n              }),\r\n              every((result: any) => result)\r\n            );\r\n            // return this[command](change).pipe(map(result => {\r\n            //   return result === false ? false : true;\r\n            // }));\r\n          } else {\r\n            return of(true);\r\n          }\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    this.initListeners();\r\n  }\r\n\r\n  /**\r\n   * 绑定命令\r\n   */\r\n  public buildCommands(context: FrameContext) {\r\n    const ngCommands: {\r\n      [commandName: string]: NgCommand\r\n    } = context.metadata.commands || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_COMMAND);\r\n    this.metadatas = ngCommands;\r\n    this.keybindingMap = new Map<string, Keybinding>();\r\n    Object.keys(ngCommands).forEach((propertyName: string) => {\r\n      const ngCommand: NgCommand = ngCommands[propertyName];\r\n      // 注册快捷键\r\n      if (ngCommand.keyBinding) {\r\n        this.keybindingMap.set(propertyName, ngCommand.keyBinding);\r\n      }\r\n      Object.defineProperty(this, propertyName, {\r\n        value: (data: any) => {\r\n          // 获取命令处理上下文\r\n          let targetContext = context;\r\n          if (ngCommand.frameId) {\r\n            targetContext = context.appContext.getFrameContext(ngCommand.frameId);\r\n          }\r\n          const command: Command = {\r\n            name: ngCommand.name,\r\n            params: ngCommand.params,\r\n            paramDescriptions: ngCommand.paramDescriptions,\r\n            eventParam: data || null\r\n          };\r\n          return targetContext.commandBus.dispatch(command);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 从Form获取监听器\r\n   */\r\n  private initListeners() {\r\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\r\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\r\n    };\r\n\r\n    if (this.form) {\r\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\r\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\r\n      });\r\n\r\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\r\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\r\n      });\r\n    }\r\n  }\r\n\r\n  public bindToParent(parent: ViewModel) {\r\n    if (parent) {\r\n      if (parent.verifycationChanged) {\r\n        parent.verifycationChanged.subscribe(verifyInformations => {\r\n          this.verifycationChanged.next(verifyInformations);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 合并审批及表单表达式并计算结果\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  public transform(expression: string | boolean | Array<any>): any {\r\n    if (Array.isArray(expression)) {\r\n      const wfConf = expression.find(item => item && item.source === 'wf');\r\n      if (wfConf && wfConf.value) {\r\n        return this.transform(wfConf.value);\r\n      } else {\r\n        return this.transform(expression[0]);\r\n      }\r\n    } else {\r\n      if (typeof expression === 'boolean') {\r\n        return expression;\r\n      } else if (typeof expression === 'string') {\r\n        return new Function('ctx', `return ${expression}`).apply(this.frameContext, [this]);\r\n      } else {\r\n        // 表达式result\r\n        return expression;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { ViewModel };\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nclass Context {\r\n\r\n  /**\r\n   * 上下文变量\r\n   */\r\n  params: Map<string, any> = new Map<string, any>();\r\n\r\n  /**\r\n   * 获取变量\r\n   */\r\n  getParam(key: string): any {\r\n    return this.params.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置变量\r\n   */\r\n  setParam(key: string, value: any) {\r\n    this.params.set(key, value);\r\n  }\r\n}\r\n\r\nexport { Context };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:56:02\r\n */\r\n\r\nimport { BindingData } from '../binding-data';\r\n\r\n/**\r\n * BindingData管理类\r\n */\r\nclass BindingDataManager {\r\n\r\n  /**\r\n   * BindingDataMap\r\n   */\r\n  private bindingDataMap: Map<string, BindingData>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.bindingDataMap = new Map<string, BindingData>();\r\n  }\r\n\r\n  /**\r\n   * 获取BindingDataMap\r\n   */\r\n  public getBindingDataMap(): Map<string, BindingData> {\r\n    return this.bindingDataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取BindingData\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getBindingDataByName(name: string): BindingData {\r\n    return this.bindingDataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的BindingData\r\n   */\r\n  public regBindingData(name: string, bindingData: BindingData): void {\r\n    this.bindingDataMap.set(name, bindingData);\r\n  }\r\n  public unRegisteBindingData(name: string) {\r\n    this.bindingDataMap.delete(name);\r\n  }\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifBindingDataExits(name: string) {\r\n    const bindingData = this.getBindingDataByName(name);\r\n    return bindingData ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingDataManager };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 18:06:11\r\n */\r\n\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * Repository管理类\r\n */\r\n@Injectable()\r\nclass RepositoryManager {\r\n\r\n  /**\r\n   * repositoryMap\r\n   */\r\n  private repositoryMap: Map<string, Repository<Entity>>;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.repositoryMap = new Map<string, Repository<Entity>>();\r\n  }\r\n\r\n  /**\r\n   * 注册Repository\r\n   */\r\n  public regRepository(name: string, repository: Repository<Entity>): void {\r\n    this.repositoryMap.set(name, repository);\r\n  }\r\n\r\n  public unRegisteRepository(name: string){\r\n    this.repositoryMap.delete(name);\r\n  }\r\n  /**\r\n   * 获取RepositoryMap\r\n   * @internal\r\n   */\r\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\r\n    return this.repositoryMap;\r\n  }\r\n\r\n  /**\r\n   * 获取Repository数组\r\n   */\r\n  public getRepositories(): Repository<Entity>[] {\r\n    return Array.from(this.repositoryMap.values());\r\n  }\r\n\r\n  /**\r\n   * 根据name获取Repository\r\n   */\r\n  public getRepositoryByName(name: string): Repository<Entity> {\r\n    return this.repositoryMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifRepositoryExits(name: string) {\r\n    const repository = this.getRepositoryByName(name);\r\n    return repository ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { RepositoryManager };\r\n","import { FrameContext } from '../frame';\r\n\r\n/**\r\n * FrameComponent刷新器\r\n */\r\nclass FrameComponentRefresher {\r\n\r\n    private frameComponentMap: Map<string, any>;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.frameComponentMap = new Map<string, any>();\r\n    }\r\n\r\n    /**\r\n     * 刷新组件\r\n     */\r\n    public refreshComponents() {\r\n        this.frameComponentMap.forEach((component: any, frameId: string) => {\r\n            if (typeof component['onFormLoad'] === 'function') {\r\n                component.onFormLoad();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 注册组件\r\n     * @param frameId   FrameId\r\n     * @param component Frame组件实例\r\n     */\r\n    public regFrameComponent(frameId: string, component: any) {\r\n        this.frameComponentMap.set(frameId, component);\r\n    }\r\n    /**\r\n     * 注销组件注册\r\n     */\r\n    public unregFrameContext(frameContext: FrameContext): void {\r\n        const frameId = frameContext.frameId;\r\n        this.frameComponentMap.delete(frameId);\r\n    }\r\n}\r\n\r\nexport { FrameComponentRefresher };\r\n","import { FrameContext } from '../frame/index';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\n\r\n/**\r\n * 变更检测控制器\r\n */\r\nclass ChangeDetectionController {\r\n\r\n  /**\r\n   * 所有的FrameContext数组\r\n   */\r\n  private get frameContexts(): FrameContext[] {\r\n    return this.frameContextManager.getFrameContexts();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private frameContextManager: FrameContextManager) {\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent重新加入到变更检测树\r\n   * @todo\r\n   * 1、该方法仅供数据源变更产生大量变更时优化性能使用；\r\n   * 2、加setTimeout来保证数据变更流完成之后，再执行变更检测，目前父对象是通过subscribe监听子对象变化，导致产生异步；\r\n   * 3、应该从根本上解决该问题，而不是setTimeout。\r\n   */\r\n  public reattach(): void {\r\n    setTimeout(() => {\r\n      this.frameContexts.forEach((frameContext: FrameContext) => {\r\n        frameContext.frameComponent.reattach();\r\n        frameContext.frameComponent.detectChanges();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent脱离变更检测树\r\n   */\r\n  public detach(): void {\r\n    this.frameContexts.forEach((frameContext: FrameContext) => {\r\n      frameContext.frameComponent.detach();\r\n    });\r\n  }\r\n}\r\n\r\nexport { ChangeDetectionController };\r\n","import { AppContext } from './app_context';\r\n\r\n/**\r\n * The manager for all appContexts.\r\n * @summary\r\n * 1, The generator create unique frameId dynamically for each frameContext in the combination forms.\r\n * 2, Combined form and Host form visit each other by these unique frameIds.\r\n * 3, Now we make these forms has own appContext, they can't visit each other in old way.\r\n * 4, For compatible purpose, we collect all appContexts together and search frameContext in these appContexts by unque frameId.\r\n */\r\nclass AppContextManager {\r\n\r\n  /**\r\n   * AppContext Set\r\n   */\r\n  private appContextSet: Set<AppContext>;\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  constructor() {\r\n    this.appContextSet = new Set<AppContext>();\r\n  }\r\n\r\n  /**\r\n   * Register AppContext\r\n   */\r\n  public registerAppContext(appContext: AppContext): void {\r\n    this.appContextSet.add(appContext);\r\n  }\r\n\r\n  /**\r\n   * Unregister AppContext\r\n   */\r\n  public unregisterAppContext(appContext: AppContext): void {\r\n    this.appContextSet.delete(appContext);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all AppContexts.\r\n   */\r\n  public getAppContexts(): AppContext[] {\r\n    return Array.from(this.appContextSet);\r\n  }\r\n\r\n}\r\n\r\nexport { AppContextManager };\r\n","import { AppContext } from './app_context';\r\n\r\nexport class ComponentManager {\r\n  constructor(private appContext: AppContext) { }\r\n  public get(paths: string[]) {\r\n    if (!Array.isArray(paths) || paths.length < 1) {\r\n      throw new Error('Argument error !');\r\n    }\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    let component: any = componentRefs;\r\n    paths.forEach(path => {\r\n      component = component && component.get(path) || null;\r\n    });\r\n    return component;\r\n  }\r\n  /**\r\n   * 获取指定frame下所有的组件\r\n   * @param frameId \r\n   * @returns \r\n   */\r\n  public getComponentsByFrameId(frameId: string): Map<string, any> | undefined {\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    return componentRefs.get(frameId);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n/**\r\n * 表单Id\r\n */\r\nexport const FORM_ID = new InjectionToken<string>('@farris/devkit FORM_ID');\r\n","import { MessageBody } from './messagebody';\r\nimport { AppContext } from '../app/app_context';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class MessageManager {\r\n\r\n    private curAppContext: AppContext;\r\n    // private parent:Window;\r\n    // private children = new Map<string,Window>();\r\n\r\n    private constructor() {\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取当前window上的MessageManager对象\r\n     */\r\n    static getMessager(): MessageManager {\r\n        if (!window['igix_messagemanager']) {\r\n            window['igix_messagemanager'] = new MessageManager();\r\n        }\r\n        return window['igix_messagemanager'];\r\n    }\r\n\r\n    // addParentTarget(target: Window){\r\n    //     this.parent = target;\r\n    // }\r\n\r\n    // addChildTarget(key: string,target: Window){\r\n    //     this.children.set(key,target);\r\n    // }\r\n\r\n    listner(callbackfn: (e: MessageBody) => any) {\r\n        window.addEventListener('message', function(e) {\r\n            const data = e.data as MessageBody;\r\n            data.sender = e.source;\r\n            callbackfn(data);\r\n        });\r\n    }\r\n\r\n    // listnerMessage(targetId: string,callbackfn: (e: any) => any){\r\n    //     const win = this.children.get(targetId);\r\n    //     if(!win){\r\n    //         throw Error('This TargetId Can Not Find Window Object');\r\n    //     }\r\n\r\n    //     win.addEventListener('message',async function(e){\r\n    //         await callbackfn(e);\r\n    //     });\r\n    // }\r\n\r\n    send(msg: MessageBody) {\r\n        // const win = this.children.get(targetId);\r\n        let win;\r\n        if (msg.target) {\r\n            win = msg.target as Window;\r\n            delete msg.target;\r\n        } else {\r\n            win = window;\r\n        }\r\n\r\n        win.postMessage(msg, '*');\r\n    }\r\n\r\n    setAppContext(appContext: AppContext) {\r\n        this.curAppContext = appContext;\r\n    }\r\n\r\n    getAppContext() {\r\n        return this.curAppContext;\r\n    }\r\n}","export class MessageData {\r\n    frameId: string;\r\n    command: string;\r\n    arguments: any;\r\n    result: any;\r\n}\r\n","import { MessageData } from './messagedata';\r\n\r\nexport class MessageBody {\r\n\r\n    constructor(data: MessageData) {\r\n        this.data = data;\r\n    }\r\n\r\n    // invoke|message\r\n    type: string;\r\n    /**\r\n     * 目标Window对象？Window || string(暂时没用)\r\n     * 对于审批而言，就是嵌套的表单iframe的contentWindow\r\n     */\r\n    target: any;\r\n    /**\r\n     * 消息数据\r\n     */\r\n    data: MessageData;\r\n    /**\r\n     * 发送者window | string?\r\n     */\r\n    sender: any;\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IValidationHandler } from './types';\r\nexport const VALIDATION_HANDLER = new InjectionToken<IValidationHandler>('@farris/common-service ValidationHandler');","export class DomService {\r\n\r\n  constructor() { }\r\n\r\n  public getElementByBinding(contents: any[], bindingFieldId: string): any[] {\r\n    const controls = [];\r\n    for (const element of contents) {\r\n      // 优先变量数据集合类组件\r\n      if (element.fields) { // 列表\r\n        const childControls = this.getElementByBinding(element.fields, bindingFieldId);\r\n        controls.push(...childControls);\r\n      }\r\n      // 其次遍历容器类组件\r\n      else if (element.contents) { // 容器组件\r\n        const childControls = this.getElementByBinding(element.contents, bindingFieldId);\r\n        controls.push(...childControls);\r\n      }\r\n      // 再次遍历集合类字段节点\r\n      else if (element.editor) {\r\n        const childControls = this.getElementByBinding([element.editor], bindingFieldId);\r\n        controls.push(...childControls);\r\n      }\r\n      // 最后遍历输入类组件\r\n      else if (element.binding && element.binding.field === bindingFieldId) {\r\n        controls.push(element);\r\n      }\r\n    }\r\n    return controls;\r\n  }\r\n}\r\n","import { FormDeclaration } from './dom-entity';\r\nimport { Schema } from './schema';\r\n\r\nexport class FormContent {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: {\r\n        module: FormModule,\r\n        options?: FormOptions\r\n    };\r\n}\r\n\r\nexport class FormContentForDB {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: string;\r\n\r\n    constructor(content: FormContent) {\r\n        this.Id = content.Id;\r\n        this.Code = content.Code;\r\n        this.Name = content.Name;\r\n        this.Contents = JSON.stringify(content.Contents);\r\n    }\r\n}\r\n\r\nexport class FormMetadaDataDom {\r\n    module: FormModule;\r\n}\r\n\r\nexport class FormModule {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    caption: string;\r\n    type: string;\r\n    creator: string;\r\n    creationDate: Date;\r\n    updateVersion: string;\r\n    showTitle: boolean;\r\n    boostrap: string;\r\n    schemas: Array<Schema>;\r\n    states: Array<any>;\r\n    contents: Array<any>;\r\n    stateMachines: Array<any>;\r\n    viewmodels: Array<IFormViewModel>;\r\n    components: Array<any>;\r\n    webcmds: Array<any>;\r\n    serviceRefs: Array<any>;\r\n    ctrlLangs: any;\r\n\r\n    // 是否移动审批表单\r\n    isMobileApprove: boolean;\r\n\r\n    // 是否组合表单\r\n    isComposedFrm: boolean;\r\n\r\n    // 表单所在的工程名\r\n    projectName: string;\r\n\r\n    // 外部模块声明\r\n    extraImports: Array<{ name: string, path: string }>;\r\n\r\n    // 外部组件\r\n    externalComponents: Array<any>;\r\n    // 当前组件声明：事件、变量、命令\r\n    declarations: FormDeclaration;\r\n    // 订阅\r\n    subscriptions: Array<any>;\r\n}\r\n\r\n// export class FormDeclaration {\r\n//     events: Array<any>;\r\n//     commands: Array<any>;\r\n//     states: Array<any>;\r\n// }\r\n\r\nexport class FormOptions {\r\n    enableTextArea: boolean;\r\n    enableDragAndDropToModifyLayout: boolean;\r\n}\r\n\r\nexport interface IFormViewModel {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    fields: IFormViewModelField[];\r\n    commands: any[];\r\n    serviceRefs: any[];\r\n    states: IFormViewModelUiState[];\r\n    bindTo: string;\r\n    parent: string;\r\n    pagination: any;\r\n    enableValidation: boolean;\r\n}\r\n\r\nexport interface IFormViewModelField {\r\n    type: string;\r\n    id: string;\r\n    fieldName: string;\r\n    bindingPath: string;\r\n    groupId: string;\r\n    groupName: string;\r\n    updateOn: 'change' | 'blur' | 'submit';\r\n}\r\n\r\n\r\nexport interface IStateMachine {\r\n    initialState: string;\r\n    renderState: { [renderStateName: string]: IRenderState };\r\n    state: IState[];\r\n    action: { [actionName: string]: IAction };\r\n}\r\n\r\nexport interface IRenderState {\r\n    name: string;\r\n    condition: IRenderStateCondition[];\r\n    description: string;\r\n}\r\n\r\nexport interface IRenderStateCondition {\r\n    compare: string;\r\n    lBracket: string;\r\n    rBracket: string;\r\n    relation: string;\r\n    source: string;\r\n    target: string;\r\n}\r\n\r\nexport interface IState {\r\n    state: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IAction {\r\n    name: string;\r\n    transitTo: string;\r\n    precondition: any[];\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelCommand {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    params: IFormViewModelCommandParam[];\r\n    handlerName: string;\r\n    cmpId: string;\r\n    shortcut: any;\r\n    extensions: any[]\r\n}\r\n\r\nexport interface IFormViewModelCommandParam {\r\n    name: string;\r\n    showName: string;\r\n    value: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelUiState {\r\n    id: string;\r\n    category: string;\r\n    code: string;\r\n    name: string;\r\n    type: string;\r\n}\r\n\r\n","\r\nimport { IFormViewModel } from './form-metadata';\r\nimport { Schema, SchemaEntity, SchemaEntityField } from './schema';\r\n\r\nexport class SchemaService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * 根据字段标识数组获取指定字段集合\r\n     * @param fieldIds 字段标识数组\r\n     * @param schema 实体结构\r\n     * @param viewModel 视图模型\r\n     * @returns 已Map形式存储的指定字段字典\r\n     */\r\n    public getFieldsByIds(fieldIds: string[], schema: Schema, viewModel: IFormViewModel)\r\n        : Map<string, SchemaEntityField> {\r\n        const specifiedFieldsMap = new Map<string, SchemaEntityField>();\r\n        const entities = schema.entities;\r\n        if (entities && entities.length && viewModel) {\r\n            const entityPath = viewModel.bindTo;\r\n            const fields = this.getEntityFields(entities, entityPath);\r\n            const fieldsMap = this.flattenFields(fields);\r\n            fieldIds.forEach(fieldId => {\r\n                if (fieldsMap.has(fieldId)) {\r\n                    specifiedFieldsMap.set(fieldId, fieldsMap.get(fieldId));\r\n                }\r\n            });\r\n        }\r\n        return specifiedFieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 将字段列表打平为字典结构\r\n     * @param fields 字段属性\r\n     * @param fieldsMap 缺省参数，用来存储字段的Map对象\r\n     * @returns 以Map形式存储的字段字段\r\n     */\r\n    private flattenFields(\r\n        fields: SchemaEntityField[],\r\n        fieldsMap: Map<string, SchemaEntityField> = new Map<string, SchemaEntityField>()\r\n    ): Map<string, SchemaEntityField> {\r\n        for (const field of fields) {\r\n            fieldsMap.set(field.id, field);\r\n            if (field.type && field.type.fields && field.type.fields.length > 0) {\r\n                this.flattenFields(field.type.fields, fieldsMap);\r\n            }\r\n        }\r\n        return fieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 获取表字段列表\r\n     * @param entities 实体对象集合\r\n     * @param entityPath 指定实体路径，根实体路径为'/'\r\n     */\r\n    private getEntityFields(entities: SchemaEntity[], entityPath: string): SchemaEntityField[] {\r\n        if (entities && entities.length) {\r\n            const splitIndex = entityPath.indexOf('/');\r\n            if (splitIndex > -1) {\r\n                entityPath = entityPath.slice(splitIndex + 1, entityPath.length);\r\n            }\r\n            // 遍历所有实体，查找匹配指定路径的实体\r\n            for (const entity of entities) {\r\n                if (entityPath === '' || entityPath === entity.code || entityPath === entity.label) {\r\n                    return entity.type.fields;\r\n                } else {\r\n                    const fields = this.getEntityFields(entity.type.entities, entityPath);\r\n                    if (fields && fields.length) {\r\n                        return fields;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n","\r\nimport { CommandController, CommandHandler, CommandHandlerExtender, ControllerMethod, DynamicCommandHandler } from '../command';\r\nimport { ValidateRule } from '../entity';\r\nimport { NgFormControl, NgValidateForm } from '../form';\r\nimport { DomService, Schema, SchemaEntityField } from '../schema';\r\nimport {\r\n  IFormViewModel, IFormViewModelCommand, IFormViewModelCommandParam, IFormViewModelField,\r\n  IFormViewModelUiState, IRenderState, IStateMachine\r\n} from '../schema/form-metadata';\r\nimport { SchemaService } from '../schema/schema.service';\r\nimport { NgParam } from '../ui-state';\r\nimport { NgCommand } from '../view-model';\r\nimport { IContextMetadata, IContextStateMachineMetadata } from './app_metadata';\r\n\r\nexport class ContextMetadataBuilder {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 构造应用程序上下文元数据\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数\r\n   * @returns 应用程序上下文元数据\r\n   */\r\n  public buildAppContextMetadata(formMetadataContent: any, stateMachineMetadata: IStateMachine): IContextMetadata {\r\n    const module = formMetadataContent.module;\r\n    const uiStates = module.states;\r\n    const appContextMetadata = {\r\n      identify: module.code,\r\n      namespace: '',\r\n      stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),\r\n      uiStates: this.buildUiStateMetadata(uiStates)\r\n    };\r\n    return appContextMetadata;\r\n  }\r\n\r\n\r\n  /**\r\n   * 构造视图上下文元数据\r\n   * @param componentId 组件标识\r\n   * @param viewModel 视图模型元数据\r\n   * @param declarations 外部接口定义\r\n   * @param subscriptions 事件订阅定义\r\n   * @returns 视图上下文元数据\r\n   */\r\n  public buildViewContextMetadata(\r\n    component: any,\r\n    viewModel: IFormViewModel,\r\n    schema: Schema,\r\n    controllers: { [id: string]: CommandController }\r\n  ): IContextMetadata {\r\n    const contextMetadata = {\r\n      identify: component.id,\r\n      namespace: '',\r\n      commands: this.buildCommand(viewModel.commands),\r\n      commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),\r\n      commandHandlerExtends: [],\r\n      form: this.buildFormMetadata(viewModel),\r\n      formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component),\r\n      subForms: null,\r\n      uiStates: this.buildUiStateMetadata(viewModel.states),\r\n      bindingTo: viewModel.bindTo,\r\n      viewModelCode: viewModel.code\r\n    };\r\n    return contextMetadata;\r\n  }\r\n\r\n  private buildCommand(commandMetadataArray: IFormViewModelCommand[]): { [commandName: string]: NgCommand } {\r\n    const commands = {};\r\n    commandMetadataArray.reduce<{ [commandName: string]: NgCommand }>((previousValue, commandMetadata: IFormViewModelCommand) => {\r\n      const ngCommand: NgCommand = {\r\n        name: commandMetadata.code,\r\n        params: {},\r\n        paramDescriptions: {}\r\n      };\r\n      commandMetadata.params.reduce<NgCommand>((previousCommand, param) => {\r\n        previousCommand.params[param.name] = param.value;\r\n        previousCommand.paramDescriptions[param.name] = { type: 'string' };\r\n        return previousCommand;\r\n      }, ngCommand);\r\n      previousValue[commandMetadata.code] = ngCommand;\r\n      return previousValue;\r\n    }, commands);\r\n    return commands;\r\n  }\r\n\r\n  private buildFormMetadata(viewModel: IFormViewModel): NgValidateForm {\r\n    return {\r\n      formGroupName: viewModel.name,\r\n      enableValidate: viewModel.enableValidation\r\n    };\r\n  }\r\n\r\n  private buildFormControlMetadata(formFields: IFormViewModelField[], viewModel: IFormViewModel, schema: Schema, component: any)\r\n    : { [controlName: string]: NgFormControl } {\r\n    const formControls: { [controlName: string]: NgFormControl } = {};\r\n    const formFieldIds = formFields.map(formField => formField.id);\r\n    const schemaService = new SchemaService();\r\n    const formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);\r\n    const domService = new DomService();\r\n\r\n    formFields.reduce<{ [controlName: string]: NgFormControl }>((previousValue, field) => {\r\n      const schemaEntityField: SchemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;\r\n      const binding = schemaEntityField ? schemaEntityField.bindingPath : '';\r\n      const domElements = domService.getElementByBinding(component.contents, field.id);\r\n      const validRules: ValidateRule[] = [];\r\n      const matchedElement = domElements[0];\r\n      if (matchedElement) {\r\n        const keys = 'maxValue,minValue,required,require';\r\n        Object.keys(matchedElement).forEach(key => {\r\n          if (keys.includes(key)) {\r\n            if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最大值属性转换成validRule\r\n              validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最小值属性转换成validRule\r\n              validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'required' || key === 'require') {\r\n              // 把必填属性转换成validRule\r\n              // 必填表达式可以为状态机\r\n              if (matchedElement[key] === 'true' || matchedElement[key] === true) {\r\n                validRules.push({ type: 'required', constraints: [true] });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      previousValue[field.fieldName] = {\r\n        /** 控件标识 */\r\n        id: `${field.fieldName}_${field.id.substr(0, 13).replace('-', '_')}`,\r\n        /** 控件名称 todo: 需要支持多语言 */\r\n        name: matchedElement ? matchedElement.title : field.fieldName,\r\n        /** 绑定字段路径 */\r\n        binding,\r\n        /** 控件值更新时机 */\r\n        updateOn: field.updateOn,\r\n        /** 控件默认名称 */\r\n        defaultI18nValue: matchedElement ? matchedElement.title : field.fieldName,\r\n        /** 验证规则 */\r\n        validRules\r\n      };\r\n      return previousValue;\r\n    }, formControls);\r\n    return formControls;\r\n  }\r\n  /**\r\n   * 由状态机元数据创建状态机上下文描述\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @returns 状态机上下文描述\r\n   */\r\n  private buildStataMachineMetadata(stateMachineMetadata: IStateMachine): IContextStateMachineMetadata {\r\n    // 声明状态机上下文元数据\r\n    const stateMachine: IContextStateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n\r\n    if (!stateMachineMetadata) {\r\n      return stateMachine;\r\n    }\r\n\r\n    // 由状态机元数据构造NgState\r\n    stateMachineMetadata.state.reduce<IContextStateMachineMetadata>((previousValue, state) => {\r\n      previousValue.states[state.state] = {\r\n        initialState: state.state === stateMachineMetadata.initialState\r\n      };\r\n      return previousValue;\r\n    }, stateMachine);\r\n    // 由状态机元数据构造NgRenderState\r\n    Object.keys(stateMachineMetadata.renderState)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, renderStateName) => {\r\n        const renderStateMetadata = stateMachineMetadata.renderState[renderStateName];\r\n        const renderFunction = this.buildRenderFunction(renderStateMetadata);\r\n        previousValue.renderStates[renderStateName] = {\r\n          render: renderFunction\r\n        };\r\n        // previousValue.renderStates[renderStateName] = {\r\n        //   render: (context: StateMachineContext) => {\r\n        //     return context.parser.parse(renderStateMetadata.condition, this);\r\n        //   }\r\n        // };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 由状态机元数据构造NgAction\r\n    Object.keys(stateMachineMetadata.action)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, actionName) => {\r\n        const actionMetadata = stateMachineMetadata.action[actionName];\r\n        previousValue.actions[actionName] = {\r\n          precondition: actionMetadata.precondition,\r\n          transitTo: actionMetadata.transitTo\r\n        };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 返回状态机元数据\r\n    return stateMachine;\r\n  }\r\n\r\n  private buildUiStateMetadata(states: IFormViewModelUiState[]): { [stateName: string]: NgParam } {\r\n    const uiStates: { [stateName: string]: NgParam } = {};\r\n    states.reduce<{ [stateName: string]: NgParam }>((previousValue, uiState) => {\r\n      previousValue[uiState.code] = {\r\n        stateName: uiState.code\r\n      };\r\n      return previousValue;\r\n    }, uiStates);\r\n    return uiStates;\r\n  }\r\n\r\n  private buildRenderFunction(renderStateMetadata: IRenderState): any {\r\n    if (renderStateMetadata && renderStateMetadata.condition.length) {\r\n      const renderFunctionString = renderStateMetadata.condition.reduce<string>((previousFunctionString, condition) => {\r\n        let conditionTarget = condition.target;\r\n        if (!conditionTarget.startsWith('\\'')) {\r\n          conditionTarget = `'${conditionTarget}`;\r\n        }\r\n        if (!conditionTarget.endsWith('\\'')) {\r\n          conditionTarget = `${conditionTarget}'`;\r\n        }\r\n        let conditionSource = condition.source;\r\n        if (conditionSource.indexOf('\\'') < 0) {\r\n          conditionSource = `'${conditionSource}'`;\r\n        }\r\n        if (conditionSource.indexOf('getUIState') > -1) {\r\n          conditionSource = conditionSource.replace('getUIState', 'context.getUIState');\r\n        }\r\n        if (conditionSource.indexOf('getData') > -1) {\r\n          conditionSource = conditionSource.replace('getData', 'context.getData');\r\n        }\r\n        // tslint:disable-next-line: max-line-length\r\n        let functionString = `${condition.lBracket || ''}context.parse(${conditionSource},'source')${condition.compare}context.parse(${condition.target},'target')${condition.rBracket || ''}`;\r\n        if (condition.relation) {\r\n          switch (condition.relation.trim().toLocaleLowerCase()) {\r\n            case 'or':\r\n              functionString += '||';\r\n              break;\r\n            case 'and':\r\n              functionString += '&&';\r\n              break;\r\n          }\r\n        }\r\n        return previousFunctionString + functionString;\r\n      }, '');\r\n      if (renderFunctionString) {\r\n        return new Function('context', `return ${renderFunctionString};`);\r\n      }\r\n    }\r\n    return new Function('context', 'return true;');\r\n  }\r\n\r\n  private buildCommandHandlers(commandMetadataArray: IFormViewModelCommand[], controllers: { [id: string]: CommandController })\r\n    : CommandHandler[] {\r\n    const commandHandlers: CommandHandler[] = [];\r\n    commandMetadataArray.reduce<CommandHandler[]>((previousValue: CommandHandler[], commandReference: IFormViewModelCommand) => {\r\n      const commandName = commandReference.code;\r\n      const controllerId = commandReference.cmpId;\r\n      const controller = controllers[controllerId];\r\n      const method = Object.assign({}, controller.methods[commandReference.handlerName]);\r\n      method.params = method.params.map(param => Object.assign({}, param));\r\n      if (method.params && method.params.length) {\r\n        commandReference.params.reduce<ControllerMethod>((previousMethodValue: ControllerMethod, param: IFormViewModelCommandParam) => {\r\n          const methodParam = previousMethodValue.params.find(value => value.name === param.name);\r\n          if (methodParam) {\r\n            methodParam.expression = param.value;\r\n          }\r\n          return previousMethodValue;\r\n        }, method);\r\n      }\r\n      const commandHandler = new DynamicCommandHandler(commandName, method);\r\n      previousValue.push(commandHandler);\r\n      return previousValue;\r\n    }, commandHandlers);\r\n    return commandHandlers;\r\n  }\r\n}\r\n","import { ViewModel } from '../view-model';\r\n\r\n/**\r\n * ViewModel管理类\r\n */\r\nclass ViewModelManager {\r\n\r\n  /**\r\n   * ViewModelMap\r\n   */\r\n  private viewModelMap: Map<string, ViewModel>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.viewModelMap = new Map<string, ViewModel>();\r\n  }\r\n\r\n  /**\r\n   * 获取ViewModelMap\r\n   */\r\n  public getViewModelMap(): Map<string, ViewModel> {\r\n    return this.viewModelMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ViewModel\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getViewModelByName(name: string): ViewModel {\r\n    return this.viewModelMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的viewModel\r\n   */\r\n  public register(name: string, viewModel: ViewModel): void {\r\n    this.viewModelMap.set(name, viewModel);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const viewModel = this.getViewModelByName(name);\r\n    return viewModel ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModelManager };\r\n","import { IContextMetadata } from './app_metadata';\r\n\r\n/**\r\n * ContextMetadata管理类\r\n */\r\nclass ContextMetadataManager {\r\n\r\n  /**\r\n   * ContextMetadataMap\r\n   */\r\n  private contextMetadataMap: Map<string, IContextMetadata>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.contextMetadataMap = new Map<string, IContextMetadata>();\r\n  }\r\n\r\n  /**\r\n   * 获取ContextMetadataMap\r\n   */\r\n  public getContextMetadataMap(): Map<string, IContextMetadata> {\r\n    return this.contextMetadataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ContextMetadata\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getContextMetadataByName(name: string): IContextMetadata {\r\n    return this.contextMetadataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的ContextMetadata\r\n   */\r\n  public register(name: string, contextMetadata: IContextMetadata): void {\r\n    this.contextMetadataMap.set(name, contextMetadata);\r\n  }\r\n\r\n  /**\r\n   * ContextMetadata是否已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const contextMetadata = this.getContextMetadataByName(name);\r\n    return contextMetadata ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { ContextMetadataManager };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nexport const FRAME_ID = new InjectionToken<string>('@farris/devkit FRAME_ID');\r\n/**\r\n * 表单命名空间\r\n */\r\nexport const NAMESPACE = new InjectionToken<string>('@farris/devkit NAMESPACE');\r\n\r\n/**\r\n * 组件初始化\r\n */\r\nexport interface onFrameComponentInit {\r\n  onComponentInit(frameContext: FrameContext): void;\r\n}\r\n/**\r\n * 组件初始化时的处理器\r\n */\r\nexport const FRAME_COMPONENT_INIT_HANDLER_TOKEN = new InjectionToken<onFrameComponentInit[]>('@farris/frame_component_init_handler_token');\r\n","/**\r\n * 应用上下文\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\r\n */\r\nimport { Injectable, Injector, Optional, SkipSelf, InjectFlags } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Context } from '../context/index';\r\nimport { BindingData, BindingDataFactory, BindingList, Change } from '../binding-data';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\nimport { FrameComponentRefresher } from './frame_component_refresher';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { ChangeDetectionController } from './change_detection_controller';\r\nimport { AppContextManager } from './app_context_manager';\r\nimport { Subject } from 'rxjs';\r\nimport { ComponentManager } from './component_manager';\r\nimport { UID } from '../misc/uid';\r\nimport { FORM_ID } from './tokens';\r\nimport { MessageManager } from '../message/messagemanager';\r\nimport { MessageData } from '../message/messagedata';\r\nimport { MessageBody } from '../message/messagebody';\r\nimport { IValidationHandler, VALIDATION_HANDLER } from '../validation';\r\nimport { throwIfEmpty } from 'rxjs/operators';\r\nimport { ContextMetadataBuilder } from './app_metadata_collector';\r\nimport { FormModule, IFormViewModel, IStateMachine } from '../schema/form-metadata';\r\nimport { CommandController } from '../command';\r\nimport { StateMachine } from '../state-machine';\r\nimport { IContextMetadata } from './app_metadata';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser, VariableParseService\r\n} from '../variable';\r\nimport { ViewModelManager } from './view_model_manager';\r\nimport { Repository } from '../repository';\r\nimport { Entity } from '../entity';\r\nimport { UIState } from '../ui-state';\r\nimport { Schema } from '../schema';\r\nimport { ContextMetadataManager } from './render_context_metadata_manager';\r\nimport { Form } from '../form';\r\nimport { ViewModel } from '../view-model';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { NAMESPACE, FRAME_ID } from '../frame/tokens';\r\nimport { EventBus } from '../event-bus-new';\r\nimport { DEVKIT_RUN_MODE, RunMode } from '../core';\r\nimport { RunModeService } from '../misc/run_mode_service';\r\n\r\n@Injectable()\r\nclass AppContext extends Context {\r\n  public typeName = 'AppContext';\r\n  /**\r\n   * 注入器\r\n   */\r\n  public injector: Injector;\r\n  /**\r\n   * 根应用上下文\r\n   */\r\n  public root: AppContext;\r\n  /**\r\n   * 上级应用上下文\r\n   */\r\n  public parent: AppContext;\r\n  /**\r\n   * 应用上下文管理器\r\n   */\r\n  public appContextManager: AppContextManager;\r\n  /**\r\n   * FrameContext管理器\r\n   */\r\n  public frameContextManager: FrameContextManager;\r\n  /**\r\n   * FrameComponent刷新器\r\n   */\r\n  public frameComponentRefresher: FrameComponentRefresher;\r\n  /**\r\n   * Repository管理器\r\n   */\r\n  public repositoryManager: RepositoryManager;\r\n  /**\r\n   * 绑定数据管理器\r\n   */\r\n  public bindingDataManager: BindingDataManager;\r\n  /**\r\n   * 视图模型管理器\r\n   */\r\n  public viewModelManager: ViewModelManager;\r\n\r\n  public contextMetadataManager: ContextMetadataManager;\r\n  /**\r\n   * 变更检测控制器\r\n   */\r\n  public changeDetectionController: ChangeDetectionController;\r\n  /**\r\n   * 是否已经销毁\r\n   */\r\n  public isFormDestoryed = false;\r\n  /**\r\n   * 应用程序标识\r\n   */\r\n  public applicationId: string = null;\r\n\r\n  private token: string = null;\r\n  /**\r\n   * 是否使用独立的eventBus\r\n   * @memberof AppContext\r\n   */\r\n  public useIsoluteEventBus = false;\r\n\r\n  /**\r\n   * 独立的eventBus实例\r\n   *\r\n   * @type {EventBus}\r\n   * @memberof AppContext\r\n   */\r\n  public isoluteEventBus: EventBus;\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   * @summary\r\n   * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。\r\n   */\r\n  private get frameContexts(): Map<string, any> {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n  /**\r\n   * 消息管道\r\n   */\r\n  public messagePipe: Subject<any>;\r\n  /**\r\n   * 表单Id\r\n   */\r\n  public formId: string;\r\n  /**\r\n   * 组件实例数组\r\n   */\r\n  public componentRefs: Map<string, Map<string, any>>;\r\n  /**\r\n   * 视图组件管理器\r\n   */\r\n  public componentManager: ComponentManager;\r\n  /**\r\n   * 记录confirm弹窗是否打开\r\n   */\r\n  public opened: boolean;\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  // public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  // public filterConditionManager: FilterConditionManager;\r\n\r\n  protected contextMetadataBuilder: ContextMetadataBuilder;\r\n  /**\r\n   * 应用上下文元数据描述\r\n   */\r\n  public metadata: IContextMetadata = {};\r\n  /**\r\n   * 应用程序上下文全局状态\r\n   */\r\n  public uiState: UIState;\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public namespace: string;\r\n\r\n  public router: Router;\r\n\r\n  public formMetadataContent: any;\r\n  /**\r\n   * 控制器运行模式，支持compatible | highSpeed\r\n   */\r\n  public runMode: RunMode;\r\n\r\n  public get formModule(): FormModule {\r\n    return this.formMetadataContent ? this.formMetadataContent.module : null;\r\n  }\r\n\r\n  public controllers: { [id: string]: CommandController };\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    @Optional() injector: Injector,\r\n    @Optional() appContextManager: AppContextManager,\r\n    @Optional() @SkipSelf() parent: AppContext\r\n  ) {\r\n    super();\r\n\r\n    this.injector = injector;\r\n    this.appContextManager = appContextManager;\r\n    this.formId = this.injector && this.injector.get(FORM_ID, null) || null;\r\n    // 默认运行模式为兼容模式\r\n    this.runMode = this.injector && this.injector.get<RunMode>(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;\r\n    RunModeService.setRunMode(this.runMode);\r\n    this.params.set('formId', this.formId);\r\n    this.params.set('appId', this.ApplicationId);\r\n    this.params.set('token', this.Token);\r\n    // 确定父子关系\r\n    if (!parent) {\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n\r\n    this.registerToManager();\r\n\r\n    this.frameContextManager = new FrameContextManager(this);\r\n    this.frameComponentRefresher = new FrameComponentRefresher();\r\n    this.repositoryManager = new RepositoryManager();\r\n    this.bindingDataManager = new BindingDataManager();\r\n    this.changeDetectionController = new ChangeDetectionController(this.frameContextManager);\r\n    this.messagePipe = new Subject<any>();\r\n    this.componentRefs = new Map<string, Map<string, any>>();\r\n    this.componentManager = new ComponentManager(this);\r\n    this.contextMetadataManager = new ContextMetadataManager();\r\n\r\n    this.opened = false;\r\n    // this.sortConditionManager = new SortConditionManager();\r\n    // this.filterConditionManager = new FilterConditionManager();\r\n    this.router = this.injector && this.injector.get(Router);\r\n    this.viewModelManager = new ViewModelManager();\r\n    this.contextMetadataBuilder = new ContextMetadataBuilder();\r\n    this.variableParseService = new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]);\r\n\r\n    this.initMessageEvent();\r\n  }\r\n\r\n  /**\r\n   * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @param controllers 前端构件元数据\r\n   */\r\n  public initializeByMetadata(\r\n    formMetadataContent: any,\r\n    stateMachineMetadata: IStateMachine,\r\n    controllers: { [id: string]: CommandController }\r\n  ) {\r\n    this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);\r\n    if (!this.stateMachine) {\r\n      this.stateMachine = this.injector.get(StateMachine, new StateMachine());\r\n    }\r\n    this.formMetadataContent = formMetadataContent;\r\n    this.controllers = controllers;\r\n  }\r\n\r\n  /**\r\n   * Register current AppContext instance to AppContextManager\r\n   */\r\n  public registerToManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.registerAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * Unregister current AppContext instance from AppContextManager\r\n   */\r\n  public unregisterFromManager(frameContext: FrameContext) {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.unregisterAppContext(this);\r\n    // 清理repository及bindingData \r\n    // const frameContexts = this.frameContextManager.getFrameContexts();\r\n    if (frameContext) {\r\n      const repository = frameContext.repository;\r\n      const repositoryName = repository.name;\r\n      if (this.repositoryManager.ifRepositoryExits(repositoryName)) {\r\n        this.repositoryManager.unRegisteRepository(repositoryName);\r\n      }\r\n      if (this.bindingDataManager.ifBindingDataExits(repositoryName)) {\r\n        this.bindingDataManager.unRegisteBindingData(repositoryName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: any): void {\r\n    const repository = frameContext.repository;\r\n    const repositoryName = repository.name;\r\n\r\n    // Repository\r\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\r\n      this.repositoryManager.regRepository(repositoryName, repository);\r\n    }\r\n\r\n    // BindingData\r\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\r\n      let bindingData = null;\r\n      if (this.runMode === RunMode.highSpeed) {\r\n        bindingData = BindingDataFactory.createFromRepository(repository, '/');\r\n        this.bindingDataManager.regBindingData(repositoryName, bindingData);\r\n      }\r\n    }\r\n\r\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\r\n    this.frameContextManager.regFrameContext(frameContext);\r\n  }\r\n\r\n  public regContextMetadata(componentId: string, contextMetadata: IContextMetadata) {\r\n    if (!this.contextMetadataManager.exsit(componentId)) {\r\n      this.contextMetadataManager.register(componentId, contextMetadata);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取整个表单的AppContext\r\n   */\r\n  public getFormAppContext() {\r\n    return this;\r\n  }\r\n  /**\r\n   * 销毁表单\r\n   * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制\r\n   */\r\n  public destory() {\r\n    this.isFormDestoryed = true;\r\n  }\r\n  /**\r\n   * 表单是否已经被销毁\r\n   */\r\n  public get isDestoryed() {\r\n    return this.isFormDestoryed;\r\n  }\r\n  /**\r\n   * 应用id\r\n   */\r\n  public get ApplicationId() {\r\n    if (!!this.applicationId) {\r\n      return this.applicationId;\r\n    }\r\n    this.applicationId = UID.create();\r\n    return this.applicationId;\r\n  }\r\n  public set ApplicationId(appId: string) {\r\n    this.applicationId = appId;\r\n  }\r\n  public get Token() {\r\n    if (!!this.token) {\r\n      return this.token;\r\n    }\r\n    this.token = UID.create();\r\n    return this.token;\r\n  }\r\n  public set Token(token: string) {\r\n    this.token = token;\r\n  }\r\n  // #region 弃用的老方法\r\n\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public registerCommandHandler(frameId: string, component: any) {\r\n    this.frameComponentRefresher.regFrameComponent(frameId, component);\r\n  }\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public refresh() {\r\n    this.frameComponentRefresher.refreshComponents();\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。\r\n   * @deprecated\r\n   */\r\n  public getFrameContext(frameId: string): any {\r\n    return this.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n\r\n  public getContextById(identify: string): any {\r\n    const context = this.frameContextManager.getFrameContextById(identify);\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   */\r\n  public getAllFrameContexts() {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n\r\n  /**\r\n   * 处理行变更\r\n   */\r\n  public handleSelectChange(change: Change, srcFrameContext: any) {\r\n    const force = change.force || false;\r\n    this.frameContexts.forEach((targetFrameContext) => {\r\n      // 相同的FrameCotnext或者Repository不一致的情况下，不同步\r\n      if (targetFrameContext === srcFrameContext\r\n        || targetFrameContext.repository !== srcFrameContext.repository) {\r\n        return;\r\n      }\r\n\r\n      const bindingData = targetFrameContext.bindingData;\r\n      const bindingList: BindingList = bindingData.getValue(change.path);\r\n      const currentId = change.value['id'];\r\n      if (bindingList && bindingList.currentId !== currentId || force) {\r\n\r\n        // 设置当前行，但不对外广播\r\n        bindingList.setCurrentId(currentId, true, false, force);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  private initMessageEvent() {\r\n    if (this.parent && this.parent !== this) {\r\n      let resultTask;\r\n      const messager = MessageManager.getMessager();\r\n      messager.setAppContext(this);\r\n      messager.listner((msg) => {\r\n        const source = msg.sender as Window;\r\n        const data = msg.data as MessageData;\r\n\r\n        const appcontext = messager.getAppContext();\r\n        const allFrameContext = appcontext.frameContextManager.getFrameContextMap();\r\n        if (data.command === 'wf-required-verification') { // 工作流的必填校验\r\n          // 注入ValidationHandler\r\n          const validation = this.injector.get<IValidationHandler>(VALIDATION_HANDLER, null, InjectFlags.Optional);\r\n          if (validation) {\r\n            resultTask = validation.validateAll();\r\n          }\r\n\r\n        } else {\r\n          const command = this.findHandler(allFrameContext, data.command);\r\n          if (command) {\r\n            resultTask = (command as any)(data.arguments);\r\n          }\r\n        }\r\n\r\n        if (resultTask) {\r\n          resultTask.pipe(throwIfEmpty()).subscribe((result) => {\r\n            // 向来源方回传消息\r\n            const retMsg = new MessageBody(new MessageData());\r\n            retMsg.data.result = true; // 目标方法返回值\r\n            retMsg.type = 'message';\r\n            retMsg.target = source;\r\n            messager.send(retMsg);\r\n          }, () => {\r\n            const retMsg = new MessageBody(new MessageData());\r\n            retMsg.data.result = false; // 目标方法返回值\r\n            retMsg.type = 'message';\r\n            retMsg.target = source;\r\n            messager.send(retMsg);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private findHandler(contextMap: Map<string, any>, command: string): any {\r\n    let func;\r\n    const temp = [...contextMap.values()];\r\n    // tslint:disable-next-line: forin\r\n    for (const v in temp) {\r\n      const vm = temp[v].viewModel;\r\n      if (vm && vm.hasOwnProperty(command)) {\r\n        func = vm[command];\r\n        return func;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  public buildRenderViewContext(componentId: string) {\r\n    // 提取视图模型集合\r\n    const viewModels = this.formModule.viewmodels;\r\n    // 提取组件描述集合\r\n    const viewComponents = this.formModule.components;\r\n    // 提取schema节点\r\n    const schema = this.formModule.schemas[0];\r\n    // 查找匹配指定标识的组件节点\r\n    const matchedComponent = viewComponents.find(component => component.id === componentId);\r\n    // 匹配指定组件的视图模型节点\r\n    const matchedViewModel = viewModels.find(viewModel => matchedComponent.viewModel === viewModel.id);\r\n    // 查找匹配视图模型的父节点\r\n    const parentViewModel = viewModels.find(viewModel => viewModel.id === matchedViewModel.parent);\r\n    let parentComponentId = '';\r\n    // 如果匹配上上级视图模型，提上级视图标识\r\n    if (parentViewModel) {\r\n      const parentComponent = viewComponents.find(component => component.viewModel === parentViewModel.id);\r\n      if (parentComponent) {\r\n        parentComponentId = parentComponent.id;\r\n      }\r\n    }\r\n    // 如果存在上级组件，提取器上下文对象。\r\n    // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;\r\n    // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);\r\n    this.buildRenderViewContextRecursively(matchedViewModel, schema);\r\n  }\r\n\r\n  private buildRenderViewContextRecursively(viewModel: IFormViewModel, schema: Schema) {\r\n    const controllers = this.controllers;\r\n    const viewComponents = this.formModule.components;\r\n    const matchedComponent = viewComponents.find(component => component.viewModel === viewModel.id);\r\n    const contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers);\r\n    // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);\r\n    // const commandHandlerExtends: CommandHandlerExtender[] = [];\r\n    // const viewContext = new ViewComponentContext(\r\n    //   contextMetadata,\r\n    //   this,\r\n    //   parent,\r\n    //   this.injector\r\n    // );\r\n    // this.regFrameContext(viewContext);\r\n    // viewContext.init();\r\n\r\n    this.regContextMetadata(matchedComponent.id, contextMetadata);\r\n\r\n    const viewModels = this.formModule.viewmodels;\r\n    const subViewModels = viewModels.filter(subViewModel => subViewModel.parent === viewModel.id);\r\n    if (subViewModels && subViewModels.length) {\r\n      subViewModels.forEach(subViewModel => {\r\n        this.buildRenderViewContextRecursively(subViewModel, schema);\r\n      });\r\n    }\r\n  }\r\n\r\n  public getComponentProviders(componentId: string): any[] {\r\n    const contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);\r\n    const bindingData = new BindingData();\r\n    const form = new Form();\r\n    const namespace = contextMetadata.namespace;\r\n    const repository = this.injector.get(Repository, null) || this.repository;\r\n    const stateMachine = this.stateMachine;\r\n    const uiState = new UIState();\r\n    const viewModel = new ViewModel();\r\n    viewModel.setMetadata(contextMetadata);\r\n    return [\r\n      { provide: FRAME_ID, useValue: componentId },\r\n      { provide: NAMESPACE, useValue: namespace },\r\n      { provide: FrameContext, useClass: FrameContext },\r\n      { provide: AppContext, useValue: this },\r\n      { provide: BindingData, useValue: bindingData },\r\n      { provide: Form, useValue: form },\r\n      { provide: Repository, useValue: repository },\r\n      { provide: StateMachine, useValue: stateMachine },\r\n      { provide: UIState, useValue: uiState },\r\n      { provide: ViewModel, useValue: viewModel },\r\n      {\r\n        provide: VariableParseService, useValue: new VariableParseService([\r\n          new FrameIdVariableParser(),\r\n          new DataVariableParser(),\r\n          new UIStateVariableParser(),\r\n          new StateMachineVariableParser(),\r\n          new CommandVariableParser()\r\n        ])\r\n      }\r\n    ];\r\n  }\r\n\r\n  // private buildCommandHandlers(commandMetadataArray: IFormViewModelCommand[], controllers: { [id: string]: CommandController })\r\n  //   : CommandHandler[] {\r\n  //   const commandHandlers: CommandHandler[] = [];\r\n  //   commandMetadataArray.reduce<CommandHandler[]>((previousValue: CommandHandler[], commandReference: IFormViewModelCommand) => {\r\n  //     const commandName = commandReference.code;\r\n  //     const controllerId = commandReference.cmpId;\r\n  //     const controller = controllers[controllerId];\r\n  //     const method = Object.assign({}, controller.methods[commandReference.handlerName]);\r\n  //     method.params = method.params.map(param => Object.assign({}, param));\r\n  //     if (method.params && method.params.length) {\r\n  //       commandReference.params.reduce<ControllerMethod>((previousMethodValue: ControllerMethod, param: IFormViewModelCommandParam) => {\r\n  //         const methodParam = previousMethodValue.params.find(value => value.name === param.name);\r\n  //         if (methodParam) {\r\n  //           methodParam.expression = param.value;\r\n  //         }\r\n  //         return previousMethodValue;\r\n  //       }, method);\r\n  //     }\r\n  //     const commandHandler = new DynamicCommandHandler(commandName, method);\r\n  //     previousValue.push(commandHandler);\r\n  //     return previousValue;\r\n  //   }, commandHandlers);\r\n  //   return commandHandlers;\r\n  // }\r\n\r\n}\r\n\r\nexport { AppContext };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-30 17:11:37\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:19:01\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { AppContext } from './app_context';\r\n\r\n/**\r\n * FrameContext管理类\r\n */\r\n@Injectable()\r\nclass FrameContextManager {\r\n\r\n  /**\r\n   * FrameContext字典(兼容老表单)\r\n   */\r\n  private frameContextMap: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * FrameContext集合\r\n   */\r\n  private frameContextSet: Set<FrameContext>;\r\n\r\n  /**\r\n   * AppContext\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(appContext: AppContext) {\r\n    this.frameContextMap = new Map<string, FrameContext>();\r\n    this.frameContextSet = new Set<FrameContext>();\r\n    this.appContext = appContext;\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n\r\n    // 如果存在，先删除\r\n    if (this.frameContextMap.has(frameId) === true) {\r\n      const existedFrameContext = this.frameContextMap.get(frameId);\r\n      this.frameContextMap.delete(frameId);\r\n      this.frameContextSet.delete(existedFrameContext);\r\n    }\r\n    frameContext.index = this.frameContextSet.size;\r\n    this.frameContextMap.set(frameId, frameContext);\r\n    this.frameContextSet.add(frameContext);\r\n  }\r\n\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameContextMap.delete(frameId);\r\n    this.frameContextSet.delete(frameContext);\r\n  }\r\n\r\n  /**\r\n   * 获取FrameContextMap\r\n   */\r\n  public getFrameContextMap() {\r\n    return this.frameContextMap;\r\n  }\r\n\r\n  /**\r\n   * 获取全部FrameContext\r\n   */\r\n  public getFrameContexts(): FrameContext[] {\r\n    return Array.from(this.frameContextSet);\r\n  }\r\n  /**\r\n   * 获取组合表单某个表单的所有frameContext\r\n   * @param namespace 命名空间\r\n   */\r\n  public getFrameContextsByNamespace(namespace: string) {\r\n    return Array.from(this.frameContextSet).filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace);\r\n  }\r\n  /**\r\n   * 根据id获取FrameContext\r\n   */\r\n  public getFrameContextById(frameId: string): FrameContext {\r\n    const targetFrameContext = this.frameContextMap.get(frameId);\r\n    if (targetFrameContext) {\r\n      return targetFrameContext;\r\n    }\r\n    return this.getFrameContextFromAllAppContexts(frameId);\r\n  }\r\n\r\n  /**\r\n   * Get the root FrameContext instance\r\n   * @return Return the FrameContext instance whose parent is null, and undefined otherwise.\r\n   */\r\n  public getRootFrameContext(): FrameContext {\r\n    const frameContexts = this.getFrameContexts();\r\n    const rootFrameContext = frameContexts.find((frameContext: FrameContext) => {\r\n      return frameContext.parent === null;\r\n    });\r\n    return rootFrameContext;\r\n  }\r\n\r\n  /**\r\n   * 遍历所有的AppContext查找指定的\r\n   * @summary\r\n   * 1、老表单中所有的frameId均不重复；\r\n   * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；\r\n   * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。\r\n   */\r\n  private getFrameContextFromAllAppContexts(frameId: string): FrameContext {\r\n    if (!this.appContext.appContextManager) {\r\n      return;\r\n    }\r\n    let targetFrameContext: FrameContext;\r\n    const appContexts = this.appContext.appContextManager.getAppContexts();\r\n    appContexts.some((appContext: AppContext) => {\r\n      const frameContextMap = appContext.frameContextManager.getFrameContextMap();\r\n      if (frameContextMap.has(frameId) === true) {\r\n        targetFrameContext = frameContextMap.get(frameId);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return targetFrameContext;\r\n  }\r\n}\r\n\r\nexport { FrameContextManager };\r\n","import { IEmitable } from './types';\r\nimport { Type } from '@angular/core';\r\n\r\nexport class EventBusProxy {\r\n\r\n  constructor(private eventBus: IEmitable, private hostType: Type<any>, private eventTokenValueProvider: () => any) {\r\n  }\r\n\r\n  post(eventName: string, data: any) {\r\n    this.eventBus.post(this.hostType, this.eventTokenValueProvider(), eventName, data);\r\n  }\r\n\r\n  // on(eventName: string, data: any, handler: Function) {\r\n  //   this.eventBus.on(null, this.eventTokenValueProvider(), eventName, (data) => handler(data), this);\r\n  // }\r\n}\r\n\r\n","export enum EventTypeEnum {\r\n    COMPONENT,\r\n    ROUTE\r\n}\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\nexport const NG_DECLARATION = 'NgDeclaration';\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件描述\r\n */\r\nexport interface NgDeclaration {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 事件参数\r\n     */\r\n    params: any;\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    type ?: EventTypeEnum;\r\n}\r\n\r\n// /**\r\n//  * 参数\r\n//  */\r\n// export interface Params {\r\n//     [key: string]: any;\r\n// }\r\n\r\n/**\r\n * NgDeclarationDecorator\r\n * 公开事件装饰器接口\r\n */\r\nexport interface NgDeclarationDecorator {\r\n    (obj?: NgDeclaration): any;\r\n    new(obj?: NgDeclaration): any;\r\n}\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件属性装饰器工厂\r\n */\r\nexport function NgDeclaration(options: NgDeclaration) {\r\n    const decoratorFactory = makePropDecorator(NG_DECLARATION, (obj: NgDeclaration) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame';\r\nimport { NG_DECLARATION, NgDeclaration } from './declaration_decorator';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\n@Injectable()\r\nclass Declaration {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   *  依据定义列表进行初始化\r\n   * @param frameComponent 表单component实例\r\n   * @param ngDeclarations 事件定义列表信息\r\n   */\r\n  public initWithDeclarations(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }): void {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   * 基于事件元数据构建事件\r\n   * @param context 框架上下文\r\n   */\r\n  private bindDeclaration(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();\r\n    if (!ngPublicEventProps) {\r\n      return;\r\n    }\r\n\r\n    Object.keys(ngPublicEventProps).forEach((propertyName: string) => {\r\n      const ngExportEvent: NgDeclaration = ngPublicEventProps[propertyName];\r\n      Object.defineProperty(this, propertyName, {\r\n        value: () => {\r\n\r\n          // 获取命令处理上下文\r\n          const targetContext: FrameContext = context;\r\n\r\n          // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）\r\n          // if (ngExportEvent.frameId) {\r\n          //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);\r\n          // }\r\n\r\n          const emitter = ngExportEvent.token;\r\n          const tokenValue = ngExportEvent.token;\r\n          const eventName = ngExportEvent.name;\r\n          let eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));\r\n          const eventType = ngExportEvent.type;\r\n\r\n          if (!targetContext.eventBus) {\r\n            return;\r\n          }\r\n          const injector = targetContext.injector;\r\n          const variableParseService = injector.get<VariableParseService>(VariableParseService);\r\n\r\n          // 执行参数解析\r\n          setTimeout(() => {\r\n            eventArgs = variableParseService.parse(eventArgs, targetContext);\r\n            const eventSender = targetContext.frameComponent;\r\n            let currentContext = targetContext;\r\n            const eventId = new Date().valueOf();\r\n            if (eventType && eventType === EventTypeEnum.ROUTE) {\r\n              // 事件依次向上冒泡\r\n              while (currentContext) {\r\n                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);\r\n                // currentContext = currentContext.parent;\r\n                currentContext = this.getParentContext(currentContext);\r\n              }\r\n            } else {\r\n              currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);\r\n            }\r\n          }, 0);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取事件定义列表\r\n   * @returns  事件定义\r\n   */\r\n  public getNgPublicEvent() {\r\n    return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);\r\n  }\r\n\r\n  /**\r\n   * 获取父Context\r\n   * @param context 当前上下文\r\n   */\r\n  private getParentContext(context: FrameContext): FrameContext {\r\n\r\n    // 首先查找直接上级FrameContext\r\n    if (context.parent) {\r\n      return context.parent;\r\n    }\r\n\r\n    // 到了AppContext边界，返回上级AppContext的根FrameContext\r\n    const parentAppContext = context.appContext.parent;\r\n    if (parentAppContext) {\r\n      return parentAppContext.frameContextManager.getRootFrameContext();\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { Declaration };\r\n","import { makePropDecorator } from '../../metadata/index';\r\n\r\nexport const NG_SUBSCRIPTION = 'NgSubscription';\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅描述\r\n */\r\nexport interface NgSubscription {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 待订阅事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 参数映射\r\n     */\r\n    paramMapCollection?: ParamMap[];\r\n}\r\n\r\nexport class ParamMap {\r\n    from: string;\r\n    frameId: string;\r\n    to: string;\r\n}\r\n\r\n/**\r\n * NgSubscriptionDecorator\r\n * 事件订阅装饰器接口\r\n */\r\nexport interface NgSubscriptionDecorator {\r\n    (obj?: NgSubscription): any;\r\n    new(obj?: NgSubscription): any;\r\n}\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅属性装饰器工厂\r\n */\r\nexport function NgSubscription(options: NgSubscription) {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n\r\nexport function getNgSubscriptionDecoratorFactory() {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory;\r\n}\r\n","export enum EventPipeType {\r\n    Compile,\r\n    Parsing\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame/index';\r\nimport { UIState } from '../../ui-state/index';\r\nimport { NG_SUBSCRIPTION, NgSubscription, ParamMap } from './subscription_decorator';\r\nimport { IDisposable } from '../../event-bus-new/index';\r\n\r\n@Injectable()\r\nclass Subscription {\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, null);\r\n  }\r\n\r\n\r\n  /**\r\n   *  根据订阅列表进行初始化\r\n   * @param frameComponent \r\n   * @param ngEvents 订阅列表\r\n   * @returns eventPipes\r\n   */\r\n  public initWithSubscriptions(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, ngEvents);\r\n  }\r\n\r\n  private bindSubscription(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngEventHandlerProps = ngEvents ? ngEvents : this.getNgEvents(frameComponent);\r\n    if (!ngEventHandlerProps) {\r\n      return;\r\n    }\r\n\r\n    const eventPipes: IDisposable[] = [];\r\n    Object.keys(ngEventHandlerProps).forEach((propertyName: string) => {\r\n      const ngImportEvent: NgSubscription = ngEventHandlerProps[propertyName];\r\n\r\n      // 获取待订阅方法详情，尝试执行订阅\r\n      const targetContext = context;\r\n\r\n      const receiver = frameComponent;\r\n      const emitter = ngImportEvent.token;\r\n      const tokenValue = ngImportEvent.token;\r\n      const eventName = ngImportEvent.name;\r\n\r\n      const paramMapCollection = ngImportEvent.paramMapCollection;\r\n      const eventPipe = targetContext.eventBus.on(emitter, tokenValue, eventName, receiver,\r\n        (eventArgs) => {\r\n          this.subscriptionHandler(eventArgs, paramMapCollection, targetContext);\r\n\r\n          const eventHandler: Function = frameComponent[eventName];\r\n          if (!eventHandler) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            eventHandler(receiver, eventArgs);\r\n          } catch {\r\n            throw new Error('Error invoking method ' + eventName);\r\n          }\r\n        }\r\n      );\r\n\r\n      eventPipes.push(eventPipe);\r\n    });\r\n\r\n    return eventPipes;\r\n  }\r\n\r\n  /**\r\n   * 获取组件订阅列表\r\n   * @param frameComponent 表单component\r\n   * @returns 组件订阅列表信息\r\n   */\r\n  public getNgEvents(frameComponent: FrameComponent) {\r\n    return MetadataUtil.getPropsMetadatasByName(frameComponent.constructor, NG_SUBSCRIPTION);\r\n  }\r\n\r\n  private subscriptionHandler(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n\r\n    if (!param || !paramMapCollection || paramMapCollection.length <= 0 || !currentFrameContext) {\r\n      return;\r\n    }\r\n\r\n    this.paramMap2UiState(param, paramMapCollection, currentFrameContext);\r\n  }\r\n\r\n  /**\r\n   * 设置paramMap后，将param映射到UISTATE上\r\n   */\r\n  private paramMap2UiState(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n    for (let i = 0; i < paramMapCollection.length; i++) {\r\n      const from = paramMapCollection[i].from;\r\n      const frameId = paramMapCollection[i].frameId;\r\n      const to = paramMapCollection[i].to;\r\n\r\n      if (!from || !frameId || !to) {\r\n        continue;\r\n      }\r\n      const destContext: FrameContext = this.getFrameContext(frameId, currentFrameContext);\r\n      if (destContext == null) {\r\n        continue;\r\n      }\r\n      this.setUiStateProperty(to, param[from], destContext.uiState);\r\n      // this.setUiStateProperty(to, param[from], currentFrameContext.uiState);\r\n    }\r\n  }\r\n\r\n  private getFrameContext(targetFrameContextId: string, currentContext: FrameContext): FrameContext {\r\n    let destContext: FrameContext = null;\r\n    try {\r\n      destContext = currentContext.appContext.getFrameContext(targetFrameContextId);\r\n    } catch {\r\n      throw new Error('Error in Getting FrameContext');\r\n    }\r\n    return destContext;\r\n  }\r\n\r\n  private setUiStateProperty(propertyName: string, propertyValue: string, uiState: UIState) {\r\n    try {\r\n      uiState.setPropertyValue(propertyName, propertyValue);\r\n    } catch {\r\n      throw new Error(\"Error in Setting Property Value of the current UISTATE\" + uiState);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { Subscription };\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport { IDisposable } from './types';\r\nimport { EventTypeEnum } from '../event-mechanism';\r\nimport { EventPipeType } from './event-pipe-type';\r\n\r\nexport class EventPipe implements IDisposable {\r\n  private lastEventId = -1;\r\n  /**\r\n   * 事件对象\r\n   */\r\n  private eventSubject: Subject<any>;\r\n\r\n  /**\r\n   * 订阅对象Map\r\n   * key=订阅所在的FrameComponent\r\n   * value：订阅evetnSubject产生的Subscription对象（rxjs的）\r\n   */\r\n  private subscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * \r\n   */\r\n  private onceSubscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * EventPipe类型，编译类型表单检查是否在同一上下文中，解析类型表单不判断\r\n   */\r\n  public eventPipeType = EventPipeType.Compile; \r\n\r\n  constructor(\r\n    private name: string,\r\n    private tokenValue: string,\r\n    private emitter: string,\r\n    private parentEventPipeList: Array<EventPipe>\r\n  ) {\r\n    this.eventSubject = new Subject<any>();\r\n    this.subscriptionMap = new Map<object, Subscription>();\r\n    this.onceSubscriptionMap = new Map<object, Subscription>();\r\n    if (this.parentEventPipeList) {\r\n      this.parentEventPipeList.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送事件\r\n   */\r\n  post(args: any, sender?: any, eventType?: any, eventId?: number) {\r\n    const eventData = {\r\n      args: args,\r\n      sender: sender,\r\n      eventType,\r\n      eventId\r\n    };\r\n    this.eventSubject.next(eventData);\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  subscribe(eventHandler: (value: any) => void, receiver: object): IDisposable {\r\n\r\n    // 对于弹窗，caller是弹窗中的组件，每次caller不同，但还是会重复注册。\r\n    // 重复订阅检测\r\n    const subscriptionInMap = this.subscriptionMap.get(receiver);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(receiver);\r\n    }\r\n\r\n    const subscription = this.eventSubject.subscribe((eventData: any) => {\r\n      const args = eventData.args;\r\n      const sender = eventData.sender;\r\n      const eventType = eventData.eventType || null;\r\n      const eventId = eventData.eventId || 0;\r\n      if (this.lastEventId >= eventId) {\r\n        return;\r\n      }\r\n      this.lastEventId = eventId;\r\n      // 判断sender和receiver的关系，如果在同一个AppContext或者在在一棵树上，则处理\r\n      // 该判断主要解决SPA模式下，一个页面被打开多次的场景。\r\n      if (!(eventType === EventTypeEnum.ROUTE)) {\r\n        if (this.isInSampeScope(sender, receiver) === false) {\r\n          return;\r\n        }\r\n      }\r\n      eventHandler.call(receiver, args);\r\n    });\r\n\r\n    this.subscriptionMap.set(\r\n      receiver,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  subscribeOnce(eventHandler: (value: any) => void, caller: object): IDisposable {\r\n    const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));\r\n    this.onceSubscriptionMap.set(\r\n      caller,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  unSubscribe(subscriber: object) {\r\n    let subscription = this.subscriptionMap.get(subscriber);\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      subscription = null;\r\n      this.subscriptionMap.delete(subscriber);\r\n    } else {\r\n      subscription = this.onceSubscriptionMap.get(subscriber);\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n        subscription = null;\r\n        this.onceSubscriptionMap.delete(subscriber);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 注销使用once方法注册的订阅。\r\n  unSubscribeForOnce() {\r\n    for (const subscriber of Array.from(this.onceSubscriptionMap.keys())) {\r\n      this.unSubscribe(subscriber);\r\n    }\r\n  }\r\n\r\n  matchEmitterToken(emitter: string, tokenValue: string): boolean {\r\n    if (this.emitter && emitter && this.emitter !== emitter) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  examByTargetToken(target: string, tokenValue: string): boolean {\r\n    if (this.emitter !== target) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  dispose(subscriber: object): void {\r\n    this.unSubscribe(subscriber);\r\n    if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {\r\n      const location = this.parentEventPipeList.findIndex(item => item === this);\r\n      if (location !== -1) {\r\n        this.parentEventPipeList.splice(location, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据caller进行注销\r\n   */\r\n  disposeByCaller(caller: any) {\r\n    const subscriptionInMap = this.subscriptionMap.get(caller);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(caller);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否在同一个上下文中\r\n   * @todo\r\n   * 1、强识别了sender和receiver的结构来判断，不合理；\r\n   * 2、应该声明一个接口来约束结构。\r\n   */\r\n  private isInSampeScope(sender: any, receiver: any): boolean {\r\n    // 用来区分编译类型的表单，还是解析类型的表单\r\n    if (this.eventPipeType === EventPipeType.Parsing) {\r\n      return true;\r\n    }\r\n\r\n    // 兼容老代码，sender不存在时，不进行检测\r\n    if (!sender) {\r\n      return true;\r\n    }\r\n\r\n    // 异常处理场景\r\n    if (sender === receiver) {\r\n      return true;\r\n    }\r\n\r\n    // 判断是否是FrameContext\r\n    if (!sender.context || !sender.context.appContext ||\r\n      !receiver.context || !receiver.context.appContext) {\r\n      return false;\r\n    }\r\n\r\n    const senderAppContext = sender.context.appContext;\r\n    const receiverAppContext = receiver.context.appContext;\r\n\r\n    // 情况1：现状\r\n    // 对于老表单，在模块上注入了一个AppContext；\r\n    // 组合表单中主表单的root-component（被组合的表单的root-componetn上没有注入）上注入了AppContext\r\n    // SPA模式下，如法通过Root AppContext区分，是不是同一个菜单内的事件；\r\n    // 只能判断根组件上的AppContext来判断\r\n    // 判断根AppContext是否一致\r\n    if (senderAppContext === receiverAppContext) {\r\n      return true;\r\n    }\r\n\r\n    // 情况2：注入改造后\r\n    // 如果以后注入关系改造了，模块上的AppContext移除掉\r\n    // 组合表单中每个root-component都拥有一个AppContext;\r\n    // 组合表单中主表单的root-component的AppContext为Root AppContext\r\n    // if (senderAppContext.root === receiverAppContext.root) {\r\n    //   return true;\r\n    // }\r\n\r\n    // 情况3：注入改造后老表单兼容\r\n    // 如果以后注入关系改造了，但产品部没有重新编译;\r\n    // 和情况2类似，不同的是模块上还遗留了一个AppContext；\r\n    // 此时Root Appcontext还是模块上的，如何来判断？\r\n    // 1、考虑通过sender的injector一直网上找，找到模块之前的那个组件injector，从其中拿AppContext来判断；\r\n    // 2、找一个全部重新编译的时机再改造。\r\n\r\n    if ((senderAppContext.useIsoluteEventBus && senderAppContext.isoluteEventBus) ||\r\n      (receiverAppContext.useIsoluteEventBus && receiverAppContext.isoluteEventBus)) {\r\n      // 如果存在独立加载js  那么\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EventBusProxy } from './event-bus-proxy';\r\nimport { IDisposable, IEmitable } from './types';\r\nimport { EventPipe } from './event-pipe';\r\n\r\n@Injectable()\r\nexport class EventBus implements IEmitable {\r\n  private proxyMap: Map<string, EventBusProxy>;\r\n  private eventMap: Map<string, Array<EventPipe>>;\r\n\r\n  constructor() {\r\n    this.proxyMap = new Map<string, EventBusProxy>();\r\n    this.eventMap = new Map<string, Array<EventPipe>>();\r\n  }\r\n\r\n  getProxy(ownerType: any, eventTokenValueProvider: () => any): EventBusProxy {\r\n    const ownerName = ownerType.constructor.typeName || ownerType.constructor.name;\r\n    if (!this.proxyMap.has(ownerName)) {\r\n      this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));\r\n    }\r\n    return this.proxyMap.get(ownerName);\r\n  }\r\n\r\n  /**\r\n   * 发送事件，通知订阅者接收消息。\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  post(emitterType: any | string, tokenValue: string, eventName: string, eventArgs: any, sender?: any, eventType?: any, eventId?: number): void {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return;\r\n    }\r\n\r\n    if (!emitterType) {\r\n      console.error('post方法的参数emitterType不能为空。');\r\n      return;\r\n    }\r\n    let emitter: string;\r\n    if (emitterType instanceof Type) {\r\n      emitter = emitterType.typeName || emitterType.name;\r\n    } else {\r\n      emitter = emitterType;\r\n    }\r\n    if (typeof eventId === 'undefined') {\r\n      eventId = new Date().valueOf();\r\n    }\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(emitter, tokenValue)) {\r\n        eventPipe.post(eventArgs, sender, eventType, eventId);\r\n        eventPipe.unSubscribeForOnce();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  on(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 订阅一次。接收到一次消息之后自动取消订阅\r\n   */\r\n  once(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 发送一个请求事件，获取监听者的响应并处理\r\n   */\r\n  requestFor(target: string, tokenValue: string, requestName: string, requestValue: any, success: (any) => any, fail?: (string) => any) {\r\n    const eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);\r\n    if (eventPipe) {\r\n      this.once(target, tokenValue, requestName, this, (response) => {\r\n        if (response.status === 'success') {\r\n          success(response.data);\r\n        } else {\r\n          if (fail) {\r\n            fail('No target responser listening');\r\n          }\r\n        }\r\n      });\r\n      eventPipe.post({ target: target, token: tokenValue, data: requestValue });\r\n    } else {\r\n      if (fail) {\r\n        fail('No target responser listening.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听一个请求事件，给出响应\r\n   */\r\n  responseOn(responseSubject: string, requestName: string, callback: (any) => any) {\r\n    this.on('RequestSubject', null, requestName, this, (requestObj) => {\r\n      const response = { status: 'fail', data: null };\r\n      if (responseSubject === requestObj.target) {\r\n        response.data = callback(requestObj.data);\r\n        response.status = 'success';\r\n      }\r\n      this.post(requestObj.target, requestObj.token, requestName, response);\r\n    });\r\n  }\r\n\r\n  private getEventPipe(eventName: string, target: string, tokenValue: string) {\r\n    let eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      eventPipeList = new Array<EventPipe>();\r\n      this.eventMap.set(eventName, eventPipeList);\r\n    }\r\n\r\n    // 1、一个事件不允许多个订阅\r\n    // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    // if (!eventPipe) {\r\n    //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n    // }\r\n\r\n    // 2、一个事件允许多个订阅\r\n    const eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n\r\n    return eventPipe;\r\n  }\r\n\r\n  private findExistEventPipe(eventName: string, target: string, tokenValue: string): EventPipe {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return null;\r\n    }\r\n    // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(target, tokenValue)) {\r\n        return eventPipe;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class EventCache {\r\n  private static tokens = new Map();\r\n\r\n  public static setToken(key: string, value: any) {\r\n    EventCache.tokens.set(key, value);\r\n  }\r\n\r\n  public static getToken(key: string) {\r\n    return EventCache.tokens.get(key);\r\n  }\r\n}\r\n\r\nclass RequestSubject { }\r\nclass DataClass { }\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IExceptionHandler } from './types';\r\nexport const EXCEPTION_HANDLER = new InjectionToken<IExceptionHandler>('@farris/devkit ExceptionHandler');","import { Observable } from 'rxjs';\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace Expression {\r\n  /**\r\n   * 表达式对象\r\n   */\r\n  export interface ExpressionObject {\r\n    /**\r\n     * 表达式唯一标识\r\n     */\r\n    id?: string;\r\n    /**\r\n     * 表达式绑定的路径\r\n     */\r\n    path: string;\r\n    /**\r\n     * 表达式绑定类型State|Entity\r\n     */\r\n    bindingType: ExpressionBindingType;\r\n    /**\r\n     * 表达式类型\r\n     */\r\n    type: ExpressionType;\r\n    /**\r\n     * 表达式\r\n     */\r\n    expression: string;\r\n    /**\r\n     * 表达式依赖\r\n     */\r\n    deps: Array<string>;\r\n    /**\r\n     * 表达式namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 表达式计算结果\r\n     */\r\n    result?: any;\r\n    /**\r\n     * 结果作用路径\r\n     */\r\n    effectPaths?: string[],\r\n    /**\r\n     * 提示信息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 提示消息类型\r\n     */\r\n    messageType?: 'error' | 'info' | 'warning';\r\n    /**\r\n     * \r\n     */\r\n    factory?: any;\r\n  }\r\n\r\n  /**\r\n   * 自定义上下文 \r\n   */\r\n  export interface ICustomContext {\r\n    currentRows?: Array<ICurrentRow>,\r\n    contexts?: { [prop: string]: any },\r\n    patch?: { [prop: string]: any }\r\n  }\r\n\r\n  /**\r\n   * 当前行描述\r\n   */\r\n  export interface ICurrentRow {\r\n    bindingPath: string;\r\n    primaryValue: string;\r\n  }\r\n\r\n  /**\r\n   * 表达式赋值器\r\n   * @deprecated deprecated，never use\r\n   */\r\n  export interface Assigner {\r\n    assign(expressionObject: ExpressionObject);\r\n  }\r\n  /**\r\n   * 表达式执行器\r\n   */\r\n  export interface IExecutor {\r\n    compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any;\r\n  }\r\n  /**\r\n   * 表达式绑定字段类型（表达式绑定到实体、UIState?）\r\n   */\r\n  export enum ExpressionBindingType {\r\n    State = 'State',\r\n    Field = 'Field'\r\n  }\r\n  /**\r\n   * 表达式类型\r\n   */\r\n  export enum ExpressionType {\r\n    /**\r\n     * 必填表达式\r\n     */\r\n    Required = 'require',\r\n    /**\r\n     * 只读表达式\r\n     */\r\n    Readonly = 'readonly',\r\n    /**\r\n     * 计算表达式\r\n     */\r\n    Compute = 'compute',\r\n    /**\r\n     * 依赖表达式\r\n     */\r\n    Dependency = 'dependency',\r\n    /**\r\n     * 是否可见\r\n     */\r\n    Visible = 'visible',\r\n    /**\r\n     * 关联表达式\r\n     */\r\n    Relative = 'relative',\r\n    /**\r\n     * 校验表达式\r\n     */\r\n    Validate = 'validate',\r\n    /**\r\n     * 帮助前\r\n     */\r\n    DataPicking = 'dataPicking'\r\n  }\r\n  /**\r\n   * 事件类型\r\n   */\r\n  export enum EventType {\r\n    ValueChanged = 'VALUE_CHANGED',\r\n    SelectionChanged = 'SELECTION_CHANGED',\r\n    Load = 'Load',\r\n    Append = 'Append',\r\n    Remove = 'Remove',\r\n    Update = 'Update',\r\n  }\r\n  export enum EventSource {\r\n    Field = 'Field',\r\n    State = 'State',\r\n    BindingData = 'BindingData',\r\n    Repository = 'Repository'\r\n  }\r\n  /**\r\n   * 事件参数\r\n   */\r\n  export interface EventArgs {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 变更路径\r\n     */\r\n    path: Array<string>;\r\n    /**\r\n     * 变更类型\r\n     */\r\n    type?: EventType;\r\n    /**\r\n     * 变更来源\r\n     */\r\n    source: EventSource;\r\n    /**\r\n     * 变更后的值\r\n     */\r\n    value?: any;\r\n    /**\r\n     * 上下文\r\n     */\r\n    context?: any;\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 事件数据上下文\r\n     */\r\n    entity?: any;\r\n    id?: any;\r\n  }\r\n  /**\r\n   * 监听器\r\n   */\r\n  export interface Listener {\r\n    onEvent: Observable<EventArgs>;\r\n  }\r\n  /**\r\n   * 作用器\r\n   */\r\n  export interface Effector {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 作用\r\n     * @param expressionObject \r\n     */\r\n    effect(path: string, value: any, options: EffectOptions);\r\n  }\r\n  export interface EffectOptions {\r\n    /**\r\n     * 指定行\r\n     */\r\n    path?: string[];\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 消息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 消息提示类型\r\n     */\r\n    messageType?: MessageType | 'error' | 'info' | 'warning';\r\n    /**\r\n     * 表达式id\r\n     */\r\n    expressionId?: string;\r\n  }\r\n  export enum MessageType {\r\n    error = 'error',\r\n    info = 'info',\r\n    warning = 'warning'\r\n  }\r\n  /**\r\n   * 事件处理器\r\n   */\r\n  export interface IEventHandler {\r\n    handleEvent(event: EventArgs, expressionObjects: Expression.ExpressionObject[]);\r\n    filter(event: Expression.EventArgs);\r\n    perform(expressionObject: Expression.ExpressionObject, context: any);\r\n    effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;\r\n  }\r\n  export enum EffectPath {\r\n    currentRow = 0\r\n  }\r\n  /**\r\n   * 表达式校验结果\r\n   */\r\n  export interface IValidateResult {\r\n    expressionId: string;\r\n    path: string[];\r\n    result: any;\r\n  }\r\n  /**\r\n   * 表达式计算上下文构造器选项\r\n   */\r\n  export interface IBuilderOptions {\r\n\r\n  }\r\n  export const MESSAGE = {\r\n    'zh-CHS': {\r\n      require: `请输入'$property'`,\r\n      validate: `'$property'校验不通过`,\r\n      dataPicking: '帮助前表达式校验不通过'\r\n    },\r\n    en: {\r\n      require: `Please input '$property'`,\r\n      validate: `'$property' calibration failed`,\r\n      dataPicking: 'Failed to verify the expression before help'\r\n    },\r\n    'zh-CHT': {\r\n      require: `請輸入'$property'`,\r\n      validate: `'$property'校驗不通過`,\r\n      dataPicking: '幫助前表達式校驗不通過'\r\n    }\r\n  };\r\n  export const DEPENDENCY_SPLITER = '/';\r\n}","import { InjectionToken } from \"@angular/core\";\r\nimport { UserSettings } from \"./types\";\r\n\r\nexport const UserSettingsToken = new InjectionToken<UserSettings>('@farris/devkit UserSettingsToken');","import { InjectionToken } from \"@angular/core\";\r\nimport { IFormExpressionManifestService, IFormManifestService } from \"./types\";\r\n\r\nexport const FORM_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormManifestService>('@farris/form_manifest_service');\r\nexport const FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormExpressionManifestService>('@farris/form_expression_manifest_service');\r\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError, switchMap } from \"rxjs/operators\";\r\nimport { Expression } from './types';\r\nimport { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, IFormExpressionManifestService } from \"../manifest/index\";\r\nimport { Translate, TranslateToken } from \"../i18n/index\";\r\nimport { Repository } from \"../repository/index\";\r\n\r\n@Injectable()\r\nexport class ExpressionRegistry {\r\n  private _expressions: Expression.ExpressionObject[] = null;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN) private formExpressionManifestService: IFormExpressionManifestService,\r\n    @Optional() @Inject(TranslateToken) private translate: Translate\r\n  ) {\r\n  }\r\n  /**\r\n   * 加载表达式文件\r\n   */\r\n  public load(): Observable<Expression.ExpressionObject[]> {\r\n    return this.formExpressionManifestService.load().pipe(\r\n      switchMap((describe: Array<any>) => {\r\n        const expressions: Array<Expression.ExpressionObject> = [];\r\n        const exprs = Array.from(describe);\r\n        exprs.forEach((expr: any) => {\r\n          expr.expressions.forEach((expression: any) => {\r\n            const expressionObject: Expression.ExpressionObject = {\r\n              id: expression.id,\r\n              ns: expr.ns,\r\n              path: expr.path,\r\n              bindingType: expr.type,\r\n              type: expression.type,\r\n              expression: expression.value || expression.expr || '',\r\n              message: expression.message || null,\r\n              messageType: expression.messageType || null,\r\n              deps: []\r\n            };\r\n            if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate || expression.type === Expression.ExpressionType.DataPicking)) {\r\n              if (!expression.message) {\r\n                expressionObject.message = this.getExpressionMessage(expression.type);\r\n              }\r\n              if (!expression.messageType) {\r\n                expressionObject.messageType = 'error';\r\n              }\r\n            }\r\n            if (expressionObject.message) {\r\n              this.transform(expressionObject);\r\n            }\r\n            expressions.push(expressionObject);\r\n          });\r\n        });\r\n        this._expressions = expressions;\r\n        this.cleanSpecialCharacters();\r\n        return of(expressions);\r\n      }),\r\n      catchError((e) => {\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 获取所有表达式\r\n   */\r\n  public get expressions(): Observable<Expression.ExpressionObject[]> {\r\n    if (this._expressions) {\r\n      return of(this._expressions);\r\n    }\r\n    return this.load();\r\n  }\r\n  /**\r\n   * 根据表达式id获取对应的表达式对象\r\n   * @param id 表达式id\r\n   * @returns \r\n   */\r\n  public getExpressionById(id: string): Expression.ExpressionObject {\r\n    if (!this._expressions || this._expressions.length < 1) {\r\n      return null;\r\n    }\r\n    return this._expressions.find((expressionObject: Expression.ExpressionObject) => expressionObject.id === id);\r\n  }\r\n  private getExpressionMessage(expressionType: Expression.ExpressionType, defaultValue?: string) {\r\n    if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required || expressionType === Expression.ExpressionType.DataPicking)) {\r\n      return null;\r\n    }\r\n    if (!this.translate) {\r\n      return defaultValue;\r\n    }\r\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\r\n    return Expression.MESSAGE[currentLanguage][expressionType];\r\n  }\r\n  private transform(expressionObject: Expression.ExpressionObject) {\r\n    if (!this.translate) {\r\n      return;\r\n    }\r\n    if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {\r\n      expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);\r\n    }\r\n  }\r\n  private cleanSpecialCharacters() {\r\n    if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {\r\n      return;\r\n    }\r\n    const repository: Repository<any> = this.injector.get(Repository, null);\r\n    if (!repository) {\r\n      return;\r\n    }\r\n    const entityTypeInfo = repository.entityTypeInfo;\r\n    const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n    this._expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expr = expressionObject.expression;\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            console.warn(`无效的实体表达式:${item}`);\r\n            return;\r\n          }\r\n          // 去数组\r\n          if (/\\[\\d\\]/g.test(item)) {\r\n            const replacer = item.replace(/\\[\\d\\]/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n          // 去星号\r\n          if (/\\*/g.test(item)) {\r\n            const replacer = item.replace(/\\*/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  private replaceAll(originalValue: string, search: string, replacer: string) {\r\n    return originalValue.split(search).join(replacer);\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype Listener = Expression.Listener;\r\n\r\nexport const LISTENER_TOKEN = new InjectionToken<Listener>('@Farris listener');","import { Observable, Subject } from \"rxjs\";\r\nimport { Change } from \"../binding-data/index\";\r\nimport { Modification } from \"../changeset/index\";\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\nimport { Expression } from '../expression/index';\r\nimport { UIStateObservableParam } from \"../ui-state/index\";\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 变更监听器\r\n */\r\nexport abstract class ChangeListener implements Listener {\r\n  protected subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  abstract buildEventPath(change: Change | Modification |UIStateObservableParam): string[];\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo \r\n   * @param results \r\n   * @param paths \r\n   */\r\n  public findEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        paths.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.findEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          results.push(paths);\r\n        }\r\n      });\r\n    } else if (paths && paths.length > 0) {\r\n      results.push(paths);\r\n    }\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from \"@farris/expression-engine\";\r\nimport { Expression } from '../expression/index';\r\n@Injectable()\r\nexport class ExpressionExecutor implements Expression.IExecutor {\r\n  /**\r\n   * 编译执行\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    if (!expressionObject.factory) {\r\n      const expression = new ExpressionEngineExpression(expressionObject.expression, expressionContext);\r\n      expressionObject.factory = expression.compile();\r\n    }\r\n    const expression: ExpressionEngineExpression = expressionObject.factory;\r\n    return expression.eval(expressionContext);\r\n  }\r\n  /**\r\n   * 解析\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public eval(expression: string, context?: { [prop: string]: any }) {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    const expressionEngine = new ExpressionEngine(expressionContext);\r\n    return expressionEngine.eval(expression);\r\n  }\r\n  /**\r\n   * 构造表达式上下文\r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildContext(context: { [prop: string]: any }): ExpressionContext {\r\n    const expressionContext = new ExpressionContext();\r\n    if (context && Object.keys(context).length > 0) {\r\n      Object.keys(context).forEach((key: string) => {\r\n        expressionContext.set(key, context[key]);\r\n      });\r\n    }\r\n    return expressionContext;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\n\r\n/**\r\n * 表达式计算结果\r\n */\r\n@Injectable()\r\nexport class ExpressionResult {\r\n  constructor(private injector: Injector) {\r\n  }\r\n  /**\r\n   * 更新表达式的值\r\n   * @param expressionId 表达式id\r\n   * @param result \r\n   */\r\n  public set(expressionId: string, result: any) {\r\n    this[expressionId] = result;\r\n  }\r\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { BindingData, BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EMPTY, Observable, of } from \"rxjs\";\r\nimport { AppContext } from \"../app/index\";\r\nimport { FrameContext } from \"../frame/index\";\r\nimport { Repository } from \"../repository/index\";\r\nimport { ENTITY_TEMPLATE, ResolveService } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { ExpressionExecutor } from \"./expression_executor\";\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { Expression } from './types';\r\nimport { ViewModel } from \"../view-model/index\";\r\nimport { ExpressionResult } from \"./expression_result\";\r\nimport { IMessageService, INotifyService, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from \"../core/index\";\r\nimport { Entity, EntityList } from \"../entity\";\r\nimport { Translate, TranslateToken } from \"../i18n\";\r\n\r\n@Injectable()\r\nexport class ExpressionManager {\r\n  private frameContext: FrameContext = null;\r\n  constructor(private injector: Injector, private resolveService: ResolveService, private expressionExecutor: ExpressionExecutor, private expressionRegistry: ExpressionRegistry, private expressionResult: ExpressionResult, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n  }\r\n  /**\r\n   * 根据表达式id进行计算\r\n   * @param expressionId 表达式id\r\n   * @param viewModel viewModel\r\n   * @param rowData rowData\r\n   * @returns \r\n   */\r\n  public eval(expressionId: string, viewModel?: ViewModel, rowData?: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const customContext: Expression.ICustomContext = {};\r\n      const bindingPath = viewModel && viewModel.bindingPath || null;\r\n      if (bindingPath && rowData) {\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n        let primaryKey = 'id';\r\n        if (bindingList) {\r\n          primaryKey = bindingList.primaryKey;\r\n        }\r\n        const primaryValue = rowData[primaryKey] || bindingList.currentId;\r\n        if (primaryValue) {\r\n          customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue }];\r\n        }\r\n      }\r\n      let result = this.execute(expressionObject.expression, customContext);\r\n      if (expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        result = result === true ? true : false;\r\n      }\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n      // console.warn('ExpressionManager 执行失败，未获取到表达式!');\r\n    }\r\n    return undefined;\r\n  }\r\n  public validate(expressionId: string, options: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const patch = options && options.patch || null;\r\n      const customContext: Expression.ICustomContext = {};\r\n      if (patch) {\r\n        customContext.patch = patch;\r\n      }\r\n      const currentRow = options.currentRow || null;\r\n      const currentRows = options.currentRows || [];\r\n      if (currentRow) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        customContext.currentRows.push(currentRow);\r\n      }\r\n      if (currentRows && currentRows.length > 0) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        Array.prototype.push.apply(customContext.currentRows, currentRows)\r\n      }\r\n      const result = this.execute(expressionObject.expression, customContext);\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n      console.warn('ExpressionManager 执行失败，未获取到表达式!');\r\n    }\r\n    return undefined;\r\n  }\r\n  /**\r\n   * 帮助前封装\r\n   * @param event \r\n   */\r\n  public onDataPicking(configs: { expressionId: string }) {\r\n    const expressionId = configs && configs.expressionId || null;\r\n    if (!expressionId) {\r\n      console.warn(`ExpressionManager 相关表达式设置错误，没有表达式编号。`);\r\n      return of(true);\r\n    }\r\n    const result = this.eval(expressionId);\r\n    if (!result) {\r\n      const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n      if (!expressionObject) {\r\n        console.warn(`ExpressionManager 无法找到对应的表达式${expressionId}`);\r\n        return of(true);\r\n      }\r\n      const messageType = expressionObject.messageType || Expression.MessageType.warning;\r\n      const message = expressionObject.message;\r\n      if (message) {\r\n        this.notifyService[messageType](message, { hideTitle: true });\r\n      }\r\n      return EMPTY;\r\n    }\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private execute(expression: string, customContext?: Expression.ICustomContext): any {\r\n    const deps = this.resolveService.resolve(expression);\r\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\r\n    const entityContext = this.buildEntityContext(deps, groupDependencies, customContext);\r\n    const stateContext = this.buildStateContext();\r\n    const data = customContext && customContext.contexts || null;\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    const context = {\r\n      [this.entityOriginalNodeCode]: entityContext,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.frameContext.bindingData,\r\n      repository: this.frameContext.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS',\r\n      ...data\r\n    }\r\n    if (!entityContext) {\r\n      return undefined;\r\n    }\r\n    return this.expressionExecutor.eval(expression, context);\r\n  }\r\n  /**\r\n   * 执行表达式（返回可观察对象）\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private executeAsync(expression: string, customContext?: Expression.ICustomContext): Observable<any> {\r\n    const result = this.execute(expression, customContext);\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 构造实体上下文\r\n   * @param deps \r\n   * @param groupDependencies \r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: Expression.ICustomContext) {\r\n\r\n    const currentRows = context && context.currentRows || null;\r\n    const index = deps.findIndex((dep: string) => {\r\n      const isEntityDependency = this.isEntityDependency(dep);\r\n      // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系\r\n      // 表达式依赖了实体\r\n      if (isEntityDependency) {\r\n        const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\r\n        // 是聚合依赖\r\n        if (isGroupDependency) {\r\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\r\n          if (dependencyLength === 1) {\r\n            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。\r\n            return true;\r\n          } else {\r\n            // 聚合了子表字段，只需要传递当前实体\r\n            return false;\r\n          }\r\n        } else {\r\n          // 当前依赖不是聚合，只需要传递当前实体\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    })\r\n    const isGroupdMainEntity = index !== -1;\r\n\r\n    const options = {};\r\n    if (currentRows && currentRows.length > 0) {\r\n      currentRows.forEach((currentRow: Expression.ICurrentRow) => {\r\n        options[currentRow.bindingPath || '/'] = currentRow.primaryValue;\r\n      });\r\n    }\r\n    const entity = this.getEntity(options);\r\n    const patch = context && context.patch || null;\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    if (patch && Object.keys(patch).length > 0) {\r\n      Object.keys(patch).forEach((key: string) => {\r\n        const paths = key.split('/').filter(p => p);\r\n        const value = patch[key];\r\n        this.setValue(entity, paths, value);\r\n      });\r\n    }\r\n    if (isGroupdMainEntity) {\r\n      const collection = this.frameContext.repository.entityCollection.toJSON();\r\n      entity['__type__'] = 'List';\r\n      entity['__items__'] = collection;\r\n    }\r\n    return entity;\r\n  }\r\n  private setValue(target: any, paths: string[], value: any) {\r\n    if (paths.length === 1) {\r\n      target[paths[0]] = value;\r\n    } else {\r\n      const propertyName = paths.pop();\r\n      const result = paths.reduce((object: any, path: string) => {\r\n        return object && object[path];\r\n      }, target);\r\n      result[propertyName] = value;\r\n    }\r\n  }\r\n  /**\r\n   * 是否为实体依赖\r\n   * @param dep \r\n   * @returns \r\n   */\r\n  private isEntityDependency(dep: string) {\r\n    return dep.startsWith(ENTITY_TEMPLATE);\r\n  }\r\n  /**\r\n   * 获取实体\r\n   * @param options \r\n   * @returns \r\n   */\r\n  public getEntity(options: { [bindingPath: string]: string }) {\r\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\r\n    const bindingData = this.frameContext.bindingData;\r\n    const childrenEntityPaths = [];\r\n\r\n    let entity = null;\r\n    if (options['/']) {\r\n      // 修正主表\r\n      entity = this.frameContext.bindingData.list.findById(options['/']);\r\n      if (entity) {\r\n        entity = entity.toJSON();\r\n      }\r\n    } else {\r\n      entity = this.frameContext.bindingData.list.currentItem.toJSON();\r\n    }\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n    entity['__type__'] = 'Entity';\r\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n      return entity;\r\n    }\r\n    // 找到所有子表\r\n    childrenEntityPaths.forEach((paths: string[]) => {\r\n      let row = null;\r\n      if (options && options[paths.join('/')]) {\r\n        const parentPaths = paths.slice(0, 1);\r\n        if (paths.length == 2 && options[parentPaths.join('/')]) {\r\n          const parentRow = options[parentPaths.join('/')];\r\n          // 从从表\r\n          // 需要切换上级表\r\n          row = this.getPropertyValue(entity, parentPaths.concat([parentRow, paths[1], options[paths.join('/')]]));\r\n        } else {\r\n          // 不应该使用bindingData，这样就默认使用了当前行\r\n          const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n          const currentRowId = options[paths.join('/')];\r\n          let currentRow: BindingObject = null;\r\n          if (currentRowId !== bindingList.currentId) {\r\n            currentRow = bindingList.findById(currentRowId);\r\n          } else {\r\n            currentRow = bindingList.currentItem;\r\n          }\r\n          if (currentRow && currentRow.primaryKeyValue) {\r\n            row = currentRow.toJSON();\r\n          }\r\n        }\r\n      } else {\r\n        // 如果上级表已经切换了当前行，那么下级表也应该切换\r\n        const parentTableCurrentRowChanged = options && !!Object.keys(options).find(path => {\r\n          const fullPath = path.split('/').join('/');\r\n          return paths.join('/').startsWith(fullPath);\r\n        }) || false;\r\n        if (parentTableCurrentRowChanged) {\r\n          const primaryValue = options && options['/'] || bindingData.list.currentId;\r\n          const entity = this.frameContext.repository.entityCollection.getEntityById(primaryValue);\r\n          const fullPaths = [];\r\n          const data = paths.reduce((object, path) => {\r\n            fullPaths.push(path);\r\n            const item = object && object[path] as EntityList<Entity>;\r\n            if (item) {\r\n              const currentRowId = options && options[fullPaths.join('/')] || item.items[0] && item.items[0].primaryValue || null;\r\n              if (currentRowId) {\r\n                const currentRow = item.get(currentRowId);\r\n                return currentRow || null;\r\n              }\r\n            }\r\n            return null;\r\n          }, entity) as Entity;\r\n          if (data) {\r\n            row = data.toJSON();\r\n          } else {\r\n            row = {};\r\n          }\r\n        } else {\r\n          row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\r\n        }\r\n      }\r\n      const propertyName = paths.pop();\r\n      let parent = paths.reduce((object: any, path: string) => {\r\n        return object && object[path] || null;\r\n      }, entity);\r\n      const list = parent[propertyName];\r\n      const node: any = { __items__: [], ...row && row || {}, __type__: 'List' };\r\n      node.length = () => node.__items__.length;\r\n      if (list && Array.isArray(list)) {\r\n        node.__items__ = [].concat(list);\r\n      }\r\n      parent[propertyName] = node;\r\n    });\r\n    return entity;\r\n  }\r\n  private getPropertyValue(entity: any, paths: string[]) {\r\n    return paths.reduce((object: any, path: string) => {\r\n      if (object['__type__'] === 'List') {\r\n        return object['__items__'].find(item => item.id === path);\r\n      } else if (Array.isArray(object)) {\r\n        return object.find(item => item.id === path);\r\n      } else {\r\n        return object && object[path];\r\n      }\r\n    }, entity);\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    const repository = this.injector.get(Repository);\r\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext() {\r\n    const result = {};\r\n    if (this.frameContext) {\r\n      const rootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { ExpressionManager } from \"./expression_manager\";;\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { ExpressionResult } from \"./expression_result\"\r\nimport { Expression } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ExpressionResultFactory {\r\n  constructor(private injector: Injector, private expressionRegistry: ExpressionRegistry, private expressionManager: ExpressionManager, private expressionResult: ExpressionResult) {\r\n    this.registeEvent();\r\n  }\r\n  private registeEvent() {\r\n    this.expressionRegistry.expressions.subscribe((expressionObjects: Expression.ExpressionObject[]) => {\r\n      // 加载完表达式之后做一次计算\r\n      expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.deps && expressionObject.deps.length > 0) {\r\n          return;\r\n        }\r\n        const result = this.expressionManager.eval(expressionObject.id);\r\n        this.expressionResult[expressionObject.id] = result;\r\n      });\r\n    });\r\n  }\r\n}","import { Injectable, Injector, Inject } from '@angular/core';\r\n// import { FRAME_ID, NAMESPACE } from '../frame/index';\r\nimport { UIState, UIStateObservableParam } from '../ui-state/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { FRAME_ID, NAMESPACE } from '../frame/tokens';\r\ntype EventArgs = Expression.EventArgs;\r\n/**\r\n * 监听UIState变更\r\n */\r\n@Injectable()\r\nclass UIStateChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace, @Inject(FRAME_ID) private frameId: string, private bindingData: BindingData) {\r\n    super();\r\n    this.registerEvent();\r\n  }\r\n  public buildEventPath(change: UIStateObservableParam): string[] {\r\n    return null;\r\n  }\r\n  private registerEvent() {\r\n    if (this.uiState && this.uiState.changes) {\r\n      this.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          path: [change.field],\r\n          type: Expression.EventType.ValueChanged,\r\n          value: change.value,\r\n          source: Expression.EventSource.State,\r\n          frameId: this.frameId\r\n        };\r\n        // console.log(\"UIStateChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { UIStateChangeListener };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from './types';\r\n\r\nexport const ASSIGNER_TOKEN = new InjectionToken<Expression.Assigner>('@Farris expression assigner');\r\nexport const EVENT_HANDLER_TOKEN = new InjectionToken<Expression.IEventHandler>('@Farris_event_handler');","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Entity } from '../entity';\r\nimport { Repository } from '../repository/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n\r\n@Injectable()\r\nclass RepositoryChangeListener extends ChangeListener {\r\n  private bindingData: BindingData;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  private registerEvent() {\r\n    if (this.repository && this.repository.changes) {\r\n      this.repository.changes.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Field,\r\n        };\r\n        // console.log(\"RepositoryChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n    // repository只监听值变化事件\r\n    if (this.repository && this.repository.entityCollectionChange) {\r\n      this.repository.entityCollectionChange.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Repository,\r\n        };\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 构建事件路径参数\r\n   * @param event event\r\n   * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]\r\n   * @returns \r\n   */\r\n  public buildEventPath(event: Modification): string[] {\r\n    const paths = event.path;\r\n    let result = [];\r\n    if (!paths || paths.length < 1) {\r\n      // 主表新增时path为空\r\n      return result;\r\n    }\r\n    // 过滤掉udt的冒号，关联字段的id\r\n    result = paths.filter((path: string, index: number) => {\r\n      if (index % 2 === 0 && path.includes(':')) {\r\n        if (path === ':') {\r\n          return false;\r\n        }\r\n        const primaryKey = path.split(':')[0];\r\n        if (primaryKey !== this.repository.primaryKey) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    // 移除路径中的id字符串\r\n    // result = paths.map((path: string, index: number) => {\r\n    //   if (path.includes(':') && index % 2 === 0) {\r\n    //     return path.split(':')[1];\r\n    //   }\r\n    //   return path;\r\n    // });\r\n    // 此时result中不应该有冒号\r\n    return result;\r\n  }\r\n  private convertEventType(change: Modification): Expression.EventType {\r\n    let eventType = null;\r\n    if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {\r\n      // eventType = Expression.EventType.Append;\r\n      // 不处理新增\r\n    } else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {\r\n      // eventType = Expression.EventType.Remove;\r\n    } else if (change.type === ModifyType.Load) {\r\n      // eventType = Expression.EventType.Load;\r\n    } else if (change.type === ModifyType.ValueChange) {\r\n      //eventType = Expression.EventType.ValueChanged;\r\n      // 不处理值变化\r\n    } else if (change.type === ModifyType.Update) {\r\n      eventType = Expression.EventType.Update\r\n    }\r\n    return eventType;\r\n  }\r\n}\r\n\r\nexport { RepositoryChangeListener }","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { LISTENER_TOKEN } from './tokens';\r\nimport { Expression } from '../expression/index';\r\ntype Listener = Expression.Listener;\r\n@Injectable()\r\nclass ListenerRegistry {\r\n  constructor(@Optional() @Inject(LISTENER_TOKEN) public listeners: Array<Listener>, @Optional() private injector: Injector) {\r\n  }\r\n}\r\nexport { ListenerRegistry };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, BindingList, Change, ChangeType } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n */\r\n@Injectable()\r\nclass BindingDataChangeListener extends ChangeListener {\r\n  private repository: Repository<any> = null;\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.repository = this.injector.get(Repository, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * 注册值变化事件\r\n   */\r\n  private registerEvent() {\r\n    if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\r\n          let eventType = null;\r\n          if (change.type === ChangeType.Append) {\r\n            eventType = EventType.Append;\r\n          } else if (change.type === ChangeType.ValueChanged) {\r\n            eventType = EventType.ValueChanged;\r\n          } else if (change.type === ChangeType.Remove) {\r\n            eventType = EventType.Remove;\r\n          } else if (change.type === ChangeType.Load) {\r\n            // 主表新增\r\n            if (change.create === true) {\r\n              eventType = EventType.Append;\r\n            } else {\r\n              eventType = EventType.Load;\r\n            }\r\n          } else if (change.type === ChangeType.SelectionChanged) {\r\n            eventType = EventType.SelectionChanged\r\n          }\r\n          const path = this.buildEventPath(change);\r\n          const modification: EventArgs = {\r\n            ns: this.namespace,\r\n            path: path,\r\n            type: eventType,\r\n            source: Expression.EventSource.BindingData,\r\n            value: change.value,\r\n            id: change.id\r\n          };\r\n          // console.log(\"BindingDataChangeListener\", modification);\r\n          this.subject.next(modification);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    const path = change.path;\r\n    const paths = [];\r\n    // if (!path || path.length < 1) {\r\n    //   return paths;\r\n    // }\r\n    const primaryValue = this.bindingData.list.currentItem.primaryKeyValue;\r\n    if (primaryValue) {\r\n      if (!(change.type === ChangeType.Load && change.path.length === 0)) {\r\n        paths.push(`${this.bindingData.list.primaryKey}:${primaryValue}`);\r\n      }\r\n    }\r\n    const currentPath = [];\r\n    for (let index = 0; index < path.length; index++) {\r\n      const propertyName = path[index];\r\n      currentPath.push(propertyName);\r\n      const item = this.bindingData.getValue(currentPath);\r\n      paths.push(propertyName);\r\n      if (item instanceof BindingList) {\r\n        if (currentPath.length < path.length) {\r\n          const bindingList = item as BindingList;\r\n          let currentId = bindingList.currentItem.primaryKeyValue;\r\n          if (index === path.length - 2 && change.id) {\r\n            currentId = change.id;\r\n          }\r\n          paths.push(`${this.bindingData.list.primaryKey}:${currentId}`);\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n}\r\nexport { BindingDataChangeListener };\r\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ListenerRegistry } from './listener_registry';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 监听器\r\n * @description 监听bindingList、UIState变更\r\n */\r\n@Injectable()\r\nclass Listeners {\r\n  private subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  constructor(@Optional() private registry: ListenerRegistry) {\r\n    this.regist();\r\n  }\r\n  private regist() {\r\n    const listeners = this.registry && this.registry.listeners || [];\r\n    if (listeners && listeners.length > 0) {\r\n      listeners.forEach((listener: Listener) => {\r\n        listener.onEvent.subscribe((modification: EventArgs) => {\r\n          this.subject.next(modification);\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { Listeners };\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { Listeners } from \"../listener/index\";\r\nimport { Expression } from \"./types\";\r\n/**\r\n * 事件监听器主要有以下几种类型的事件：\r\n * 1、值变化\r\n * 2、行切换\r\n *    行切换使用场景为需要为数据计算依赖当前行时\r\n * 3、数据加载\r\n */\r\n@Injectable()\r\nexport class ExpressionEventEmitter {\r\n  private onEvent: BehaviorSubject<Array<Expression.EventArgs>>;\r\n  private events: Array<Expression.EventArgs>;\r\n  constructor(private listeners: Listeners) {\r\n    this.events = new Array<Expression.EventArgs>();\r\n    this.listeners.onEvent.subscribe((eventArgs: Expression.EventArgs) => {\r\n      if (this.onEvent && this.onEvent.observers.length > 0) {\r\n        let events = [];\r\n        if (this.events.length > 0) {\r\n          events = [...this.events];\r\n        }\r\n        events.push(eventArgs);\r\n        this.onEvent.next(events);\r\n        this.events = [];\r\n      } else {\r\n        this.events.push(eventArgs);\r\n      }\r\n    });\r\n  }\r\n  public attach(): Observable<Array<Expression.EventArgs>> {\r\n    if (!this.onEvent) {\r\n      this.onEvent = new BehaviorSubject<Array<Expression.EventArgs>>(this.events);\r\n    }\r\n    return this.onEvent.asObservable();\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\nexport const EFFECTOR_TOKEN = new InjectionToken<Expression.Effector>('@farris/effector_token');\r\n\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n/**\r\n * 实体副作用器\r\n * @description 将表达式计算结果赋值给实体属性\r\n */\r\n@Injectable()\r\nexport class RepositoryEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('repository effector 需要指定行信息。');\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      console.error(`找不到id：${rowId}对应的实体！`);\r\n      return;\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== value) {\r\n        object[propName] = value;\r\n      }\r\n    } else {\r\n      console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { UIState } from '../ui-state/index';\r\n\r\n@Injectable()\r\nexport class UIStateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    this.uiState.setPropertyValue(path, value);\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 只读副作用器\r\n */\r\n@Injectable()\r\nexport class ReadonlyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // suprise ?\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 依赖副作用器\r\n * @description 当表达式计算结果为true时，清空字段值\r\n * 当value==true且属性当前值不是null时，设置属性值为null\r\n */\r\n@Injectable()\r\nexport class DependencyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: boolean, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('DependencyEffector 需要指定行信息。');\r\n    }\r\n    if (typeof value !== 'boolean') {\r\n      console.warn(`DependencyEffector 依赖表达式计算结果应该为true/false，当前值为：${value}`);\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      throw new Error(`找不到id：${rowId}对应的实体！`);\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== null && value === true) {\r\n        object[propName] = null;\r\n      }\r\n    } else {\r\n      throw new Error(`[DependencyEffector] 找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n\r\n}","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { EFFECTOR_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class EffectorRegistry {\r\n  constructor(private injector: Injector, @Optional() @Inject(EFFECTOR_TOKEN) public effectors: Array<Expression.Effector>) { }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService } from '../core/index';\r\n\r\n@Injectable()\r\nexport class RelativeEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (value === true && options.message && this.notifyService) {\r\n      const messageType = options.messageType || 'info';\r\n      this.notifyService[messageType](options.message, { hideTitle: true });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService } from '../core/index';\r\nimport { NgFormControl } from '../form/decorators';\r\nimport { RuleType } from '../form/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\n@Injectable()\r\nexport class ValidateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService,\r\n    @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext\r\n  ) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    // const rootViewModel = rootFrameContext.viewModel;\r\n    const expressionId = options.expressionId;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n    }\r\n    if (value === false && options.message) {\r\n      // 更新form错误信息\r\n      // 不是grid，则认为是卡片\r\n      if (!domInfo.isGridComponent) {\r\n        const message = options.message.replace(/\\$property/g, domInfo.propertyName)\r\n        const formErrors = this.buildFormErrors(domPropertyName, message);\r\n        // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      } else {\r\n        // if (expressionId) {\r\n        //   // 增加校验规则\r\n        //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n        // }\r\n      }\r\n      // 不进行汇总展示\r\n      // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);\r\n      // 增加到汇总消息\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      // 更新汇总错误信息\r\n    } else if (value === true) {\r\n      // 移除错误消息\r\n      // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n      if (currentErrors) {\r\n        if (currentErrors.hasOwnProperty('validate')) {\r\n          // require合法，移除require校验提示\r\n          delete currentErrors.validate;\r\n        }\r\n        frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n      } else {\r\n        const formErrors = this.buildFormErrors(domPropertyName, null);\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 通过实体路径获取对应的dom信息\r\n   * @param entityPath \r\n   * @returns \r\n   */\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getVerifyInformations(frameContext: FrameContext) {\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const verifyInformations = rootViewModel.verifyInformations;\r\n    return verifyInformations;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      message = message.replace(/\\$property/g, 'domPropertyName');\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'validate': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n  private buildVerifyInformations(id: string, frameContext: FrameContext, domPropertyName: string, message: string) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    verifyInformations.push({\r\n      id: id,\r\n      namespace: frameContext.namespace,\r\n      targetField: domPropertyName,\r\n      index: verifyInformations.length + 1,\r\n      title: frameContext.form.formGroupName,\r\n      msg: message,\r\n      type: 'error'\r\n    });\r\n    return verifyInformations;\r\n  }\r\n  private removeValidateVerifyInformations(id: string, frameContext: FrameContext) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    return verifyInformations;\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Entity } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NgFormControl, RuleType } from '../form/index';\r\nimport { FrameContext, NAMESPACE } from \"../frame/index\";\r\nimport { Translate, TranslateToken } from '../i18n';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 必填副作用器\r\n * @description 当结算结果为true时设置必填校验，否则删除必填校验\r\n */\r\n@Injectable()\r\nexport class RequiredEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext: FrameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    const pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(p => p));\r\n    const expressionId = options.expressionId;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Require);\r\n    }\r\n    if (value === true) {\r\n      if (options.message) {\r\n        // 更新form错误信息\r\n        // 不是grid，则认为是卡片\r\n        if (!domInfo.isGridComponent) {\r\n          const message = options.message.replace(/\\$property/g, domInfo.propertyName);\r\n          const formErrors = this.buildFormErrors(domPropertyName, message);\r\n          const isValidValue = this.isValidValue(path, pathValue);\r\n          if (!isValidValue) {\r\n            frameContext.form.updateFormErrors(formErrors);\r\n          }\r\n        } else {\r\n          this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);\r\n        }\r\n      }\r\n    } else {\r\n      // 返回非true值时认为非必填\r\n      if (domInfo.isGridComponent) {\r\n        this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);\r\n      } else {\r\n        const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n        if (currentErrors) {\r\n          if (currentErrors.hasOwnProperty('require')) {\r\n            // require合法，移除require校验提示\r\n            delete currentErrors.require;\r\n          }\r\n          frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n        } else {\r\n          const formErrors = this.buildFormErrors(domPropertyName, null);\r\n          frameContext.form.updateFormErrors(formErrors);\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  private updateColumnValidators(frameContext: FrameContext, field: string, datagridColumns: any[][], isRequired: boolean) {\r\n    const frameId = frameContext.frameId;\r\n    const componentRefs = frameContext.appContext.componentManager.get([frameId]) as Map<string, any>;\r\n    if (componentRefs && componentRefs.size > 0) {\r\n      const datagrid = Array.from(componentRefs.values())[0];\r\n      if (datagrid && typeof datagrid.updateColumn === 'function') {\r\n        const columns = datagridColumns.find((array: any[]) => {\r\n          return array.find(item => item.field === field);\r\n        });\r\n        const column = columns && columns.find(item => item.field === field) || null;\r\n        if (column) {\r\n          const validators: any[] = column.validators || [];\r\n          const index = validators.findIndex(item => item.type === 'required');\r\n          if (isRequired) {\r\n            if (index === -1) {\r\n              validators.push({ \"type\": \"required\", \"message\": \"该字段不能为空！\" });\r\n            }\r\n          } else {\r\n            if (index !== -1) {\r\n              validators.splice(index, 1);\r\n            }\r\n          }\r\n          datagrid.updateColumn(field, { validators: [...validators] });\r\n          datagrid.columnsChanged();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean, binding: string, datagridColumns: any[][] } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent,\r\n                binding: ngFormControl.binding,\r\n                datagridColumns: dgColumnInfo\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getDataPropInfo(path: string) {\r\n    if (!path) {\r\n      return null;\r\n    }\r\n    const paths = path.split('/').filter(p => p);\r\n    return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);\r\n  }\r\n  private isValidValue(path: string, value: any) {\r\n    const dataTypeInfo = this.getDataPropInfo(path);\r\n    if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {\r\n      // 多语字段\r\n      const translate = this.injector.get<Translate>(TranslateToken, null);\r\n      const currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      return !!value[currentLanguage];\r\n    } else if (value === null || value === '' || value === undefined) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'require': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\n\r\n@Injectable()\r\nexport class VisibleEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext,\r\n    private repository: Repository<any>) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 由匿名函数接管，ignore\r\n    const paths = path.split('/').filter(p => p);\r\n    const bindingPaths = this.getTablePaths(paths);\r\n    const bindingPath = bindingPaths.join('/');\r\n    // 主表显隐无需处理\r\n    if (bindingPaths && bindingPaths.length > 0) {\r\n      const isGridComponent = this.isGridComponent(bindingPath);\r\n      if (isGridComponent) {\r\n        const datagridComponent = this.getDatagridComponent(bindingPath);\r\n        if (datagridComponent) {\r\n          // 更新列信息\r\n          // datagridComponent.columnsChanged();\r\n          const fieldPaths = this.getPropertyPaths(paths);\r\n          if (fieldPaths) {\r\n            const field = fieldPaths.join('.');\r\n            if (value) {\r\n              datagridComponent.showColumn(field);\r\n            } else {\r\n              datagridComponent.hideColumn(field);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const datagridComponent = this.getDatagridComponent(bindingPath);\r\n      if (datagridComponent) {\r\n        datagridComponent.columnsChanged();\r\n      }\r\n    }\r\n  }\r\n  private getTablePaths(paths: string[]): string[] {\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  private getDatagridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    let result = null;\r\n    if (matchedFrameContexts) {\r\n      matchedFrameContexts.every((frameContext: FrameContext) => {\r\n        const frameId = frameContext.frameId;\r\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\r\n        if (!componentsMap) {\r\n          return true;\r\n        }\r\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\r\n        if (datagridComponent) {\r\n          result = datagridComponent;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private getPropertyPaths(paths: string[]) {\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  private isGridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const frameContext = frameContexts.find((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    if (frameContext) {\r\n      return !!frameContext.viewModel['dataGridColumnsName'];\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}","import { Expression } from '../expression/index';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { EffectorRegistry } from './effector_registry';\r\nimport { RepositoryEffector } from './repository_effector';\r\nimport { UIStateEffector } from './uistate_effector';\r\nimport { ReadonlyEffector } from './readonly_effector';\r\nimport { DependencyEffector } from './dependency_effector';\r\nimport { RelativeEffector } from './relative_effector';\r\nimport { ValidateEffector } from './validate_effector';\r\nimport { RequiredEffector } from './required_effector';\r\nimport { VisibleEffector } from './visible_effector';\r\n// import { Core } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EffectorFactory {\r\n  constructor(private injector: Injector, private effectorRegistry: EffectorRegistry) { }\r\n  public getEffector(expressionObject: Expression.ExpressionObject) {\r\n    const path = expressionObject.path;\r\n    const ns = expressionObject.ns;\r\n    const bindingType = expressionObject.bindingType;\r\n    const type = expressionObject.type;\r\n    const nsEffectors = this.effectorRegistry.effectors.filter((effector: Expression.Effector) => effector.ns == ns);\r\n    // 计算表达式\r\n    if (type === Expression.ExpressionType.Compute) {\r\n      if (bindingType === Expression.ExpressionBindingType.Field) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof RepositoryEffector);\r\n      } else if (bindingType === Expression.ExpressionBindingType.State) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof UIStateEffector);\r\n      } else {\r\n        throw new Error(`不支持的绑定字段类型：${bindingType}`);\r\n      }\r\n    } else if (type === Expression.ExpressionType.Readonly) {\r\n      // 只读表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ReadonlyEffector);\r\n    } else if (type === Expression.ExpressionType.Dependency) {\r\n      // 依赖表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof DependencyEffector);\r\n    } else if (type === Expression.ExpressionType.Relative) {\r\n      // 关联表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RelativeEffector);\r\n    } else if (type === Expression.ExpressionType.Validate) {\r\n      // 校验表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ValidateEffector);\r\n    } else if (type === Expression.ExpressionType.Required) {\r\n      // 必填表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RequiredEffector);\r\n    } else if (type === Expression.ExpressionType.Visible) {\r\n      // 显隐表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof VisibleEffector);\r\n    } else {\r\n      // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { BindingData, BindingList, BindingObject } from '../binding-data/index';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { EffectorFactory } from '../effector/index';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { FrameContext } from '../frame';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { Translate } from '../i18n/translate';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\n\r\n@Injectable()\r\nexport abstract class EventHandler implements Expression.IEventHandler {\r\n  protected frameContext: FrameContext;\r\n  constructor(protected injector: Injector, protected repository: Repository<any>, protected bindingData: BindingData, protected expressionRegistry: ExpressionRegistry, protected effectorFactory: EffectorFactory, protected expressionExecutor: ExpressionExecutor, protected expressionResult: ExpressionResult) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext);\r\n  }\r\n  public expressionObjects: Expression.ExpressionObject[];\r\n\r\n  public handleEvent(event: Expression.EventArgs, expressionObjects: Expression.ExpressionObject[]) {\r\n    event = Object.assign({}, event);\r\n    this.expressionObjects = expressionObjects;\r\n    this.dispatch(event);\r\n  }\r\n\r\n  //#region 抽象函数\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public abstract filter(event: Expression.EventArgs);\r\n  /**\r\n   * 发布事件\r\n   * @param expressionObject 表达式对象\r\n   * @param event 事件\r\n   */\r\n  public abstract dispatch(event: Expression.EventArgs): void;\r\n  //#endregion\r\n\r\n  //#region 属性\r\n\r\n  /**\r\n   * 主表主键值\r\n   */\r\n  protected get primaryValue() {\r\n    return this.bindingData.list.currentItem.primaryKeyValue;\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region 表达式核心\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   * @returns any\r\n   */\r\n  public perform(expressionObject: Expression.ExpressionObject, context: any) {\r\n    return this.expressionExecutor.compile(expressionObject, context);\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);\r\n      return;\r\n    }\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const effectPaths = expressionObject.effectPaths || [];\r\n      if (effectPaths.length > 0) {\r\n        effectPaths.forEach((path: string) => {\r\n          const effectPath = path.split('/');\r\n          const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id };\r\n          effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n        });\r\n      } else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id };\r\n        effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n      }\r\n    } else {\r\n      throw new Error('not supported！');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region util\r\n\r\n  protected isValidateOrRequiredExpression(expressionObject: Expression.ExpressionObject) {\r\n    return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);\r\n  }\r\n  /**\r\n   * 以事件参数为依据构建实体路径\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  protected getEntityPathFromEvent(event: Expression.EventArgs): string[] {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    if (!event || !event.path || event.path.length < 1) {\r\n      return [];\r\n    }\r\n    const paths = event.path;\r\n    return this.getEntityPath(paths);\r\n  }\r\n  /**\r\n   * 获取事件路径中的实体路径\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 构造实体路径\r\n   * @param path path\r\n   * @description 删除路径中的id字段\r\n   * @returns \r\n   */\r\n  protected buildEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 清理事件路径中的id主键标识\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected cleanEventPath(path: string[]) {\r\n    path = path.filter(p => {\r\n      if (p && p !== ':') {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return path.map((item: string) => {\r\n      if (item.includes(':')) {\r\n        return item.split(':')[1];\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  protected getCurrentRowByPaths(paths: string[]): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件路径中指定子表的事件行\r\n   * @param path \r\n   * @param tableCode \r\n   * @returns \r\n   */\r\n  protected getEventId(path: string[], tableCode: string) {\r\n    if (!path || path.length < 1) {\r\n      throw new Error('invalid path!');\r\n    }\r\n    const propertyIndex = path.findIndex(p => p === tableCode);\r\n    if (propertyIndex === -1) {\r\n      return null;\r\n    }\r\n    const idIndex = propertyIndex + 1;\r\n    if (idIndex > path.length - 1) {\r\n      throw new Error('invalid propertyName or path');\r\n    }\r\n    const id = path[idIndex];\r\n    if (id.indexOf(':') === -1) {\r\n      throw new Error('compute error.');\r\n    }\r\n    return id.split(':')[1];\r\n  }\r\n  //#endregion\r\n\r\n\r\n  //#region  构造上下文\r\n\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext(event: Expression.EventArgs) {\r\n    const ns = event.ns;\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const result = {};\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const anonymousFrameContext = frameContexts[0];\r\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件实体\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildEntityContext(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows?: Array<Expression.ICurrentRow>) {\r\n    const expressionBindingType = expressionObject.bindingType;\r\n    if (expressionBindingType === Expression.ExpressionBindingType.Field) {\r\n      const entityTypeInfo = this.repository.entityTypeInfo;\r\n      const childrenEntityPaths = [];\r\n      ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n      // 获取当前行\r\n      const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;\r\n      const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;\r\n      let entity = this.bindingData.list.findById(primaryValue);\r\n      if (!entity) {\r\n        return null;\r\n      }\r\n      const object = entity.toJSON();\r\n      object['__type__'] = 'Entity';\r\n      if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n        return object;\r\n      }\r\n      childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);\r\n      // 找到所有子表\r\n      childrenEntityPaths.forEach((paths: string[]) => {\r\n        const bindingList = this.bindingData.getValue(paths) as BindingList;\r\n        let currentRowId = bindingList.currentId;\r\n        const propertyName = paths[paths.length - 1];\r\n        // parent 为entity或entitylist或null\r\n        const parent = paths.slice(0, paths.length - 1).reduce((object: any, path: string) => {\r\n          return object && object[path] || null;\r\n        }, object);\r\n        if (!parent) {\r\n          return;\r\n        }\r\n        const data = parent;\r\n        let node: any = null;\r\n        if (!currentRowId) {\r\n          // 当前表没有数据\r\n          node = { __items__: [], __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n        } else {\r\n          // 纠正当前行\r\n          if (currentRows && currentRows.length > 0) {\r\n            // 是否指定了当前行\r\n            const userAssignCurrentRow = currentRows.find(row => {\r\n              const bindingPaths = row.bindingPath.split('/').filter(p => p);\r\n              return bindingPaths.join('/') === paths.join('/');\r\n            });\r\n            if (userAssignCurrentRow) {\r\n              currentRowId = userAssignCurrentRow.primaryValue;\r\n            }\r\n          }\r\n          // 子表当前行\r\n          const row = bindingList.findById(currentRowId);\r\n          // 找到子表当前行的上级\r\n          const list = parent[propertyName];\r\n          node = { __items__: [], ...row && row.toJSON() || {}, __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n\r\n          if (list && Array.isArray(list)) {\r\n            node.__items__ = [].concat(list);\r\n          }\r\n        }\r\n        data[propertyName] = node;\r\n      });\r\n      return object;\r\n    } else if (expressionBindingType === Expression.ExpressionBindingType.State) {\r\n      // todo: 支持状态表达式\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 构造表达式计算上下文\r\n   * @param expressionObject 表达式\r\n   * @param event 事件\r\n   * @param entityContext 实体上下文\r\n   * @param currentRows 当前行\r\n   * @returns \r\n   */\r\n  public buildContext(expressionObject: Expression.ExpressionObject, event: Expression.EventArgs, entityContext?: any, currentRows?: Array<Expression.ICurrentRow>): any {\r\n    let context = [];\r\n    if (entityContext) {\r\n      context.push(entityContext);\r\n    } else {\r\n      const entity = this.buildEntityContext(event, expressionObject, currentRows);\r\n      context.push(entity);\r\n    }\r\n    const stateContext = this.buildStateContext(event);\r\n    const entityCode = this.entityOriginalNodeCode;\r\n    let entity = null;\r\n    if (context.length === 1) {\r\n      entity = context.pop();\r\n    } else {\r\n      entity = context[0];\r\n      if (!entity['__type__']) {\r\n        entity['__type__'] = 'Entity';\r\n      }\r\n      entity['__items__'] = context;\r\n    }\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    return {\r\n      [entityCode]: entity,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.bindingData,\r\n      repository: this.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS'\r\n    };\r\n  }\r\n  //#endregion\r\n  /**\r\n   * 构造副作用路径\r\n   * @param event \r\n   * @param expressionObject \r\n   * @returns \r\n   */\r\n  protected buildEffectPath(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): string[] {\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    const primaryValue = event.path[0] && event.path[0].split(':')[1];\r\n    if (!primaryValue) {\r\n      throw new Error('Invalid event path!');\r\n    }\r\n    if (expressionPaths.length === 1) {\r\n      // 主表简单字段\r\n      return [primaryValue, expressionPaths.pop()];\r\n    } else {\r\n      const result = [primaryValue];\r\n      for (let index = 0; index < expressionPaths.length; index++) {\r\n        const propertyName = expressionPaths[index];\r\n        result.push(propertyName);\r\n        const currentPaths = expressionPaths.slice(0, index + 1);\r\n        const propertyInfo: DataPropInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);\r\n        if (propertyInfo.group === 'List') {\r\n          let id = this.getEventId(event.path, propertyInfo.name) || null;\r\n          // 事件和表达式不是同一个表\r\n          if (!id) {\r\n            const bindingList = this.bindingData.getValue(currentPaths) as BindingList;\r\n            if (bindingList) {\r\n              id = bindingList.currentId;\r\n            }\r\n          }\r\n          result.push(id);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  //#region 辅助方法\r\n  protected getPathInfo(path: string): { path: string, propertyName: string, paths: string[], propertyNames: string[] } {\r\n    const paths = path.split('/').filter(p => p);\r\n    // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）\r\n    const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    const propertyName = paths.slice(entityPath.length).join('/');\r\n    return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\r\n  }\r\n  /**\r\n   * get table paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getTablePathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  /**\r\n   * get property paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getPropertyPathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  /**\r\n   * 分析事件和表达式的关系\r\n   */\r\n  protected analysis(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject) {\r\n    const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n    const eventPaths = this.getEntityPath(event.path.slice(0));\r\n    const eventPathInfo = this.getPathInfo(eventPaths.join('/'));\r\n    if (!expressionPathInfo || !eventPathInfo) {\r\n      console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);\r\n      return null;\r\n    }\r\n    const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);\r\n    const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);\r\n    const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);\r\n    const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);\r\n    const result = {\r\n      distance: undefined,\r\n      eventFromChildren: undefined,\r\n      eventFromParent: undefined,\r\n      expressionTablePaths,\r\n      expressionPropertyNames,\r\n      eventTablePaths,\r\n      eventPropertyNames,\r\n      isSameTable: false\r\n    };\r\n    result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);\r\n    if (result.distance === 1) {\r\n      result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));\r\n      result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));\r\n    }\r\n    result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');\r\n    return result;\r\n  }\r\n\r\n  protected buildCurrentRows(tablePaths: string[], fullPaths: string[]) {\r\n    const currentRows = new Array<Expression.ICurrentRow>();\r\n    if (!tablePaths || tablePaths.length < 1) {\r\n      currentRows.push({\r\n        bindingPath: '/',\r\n        primaryValue: fullPaths[0]\r\n      });\r\n    } else {\r\n      const paths = [];\r\n      tablePaths.forEach((path: string, index: number) => {\r\n        if (index === 0) {\r\n          currentRows.push({\r\n            bindingPath: '/',\r\n            primaryValue: fullPaths[0]\r\n          });\r\n        }\r\n        paths.push(path);\r\n        const primaryValue = fullPaths[index * 2 + 2];\r\n        currentRows.push({\r\n          bindingPath: paths.join('/'),\r\n          primaryValue: primaryValue\r\n        });\r\n      });\r\n    }\r\n    return currentRows;\r\n  }\r\n  protected convertBooleanTypeExpressionResult(expressionObject: Expression.ExpressionObject, result: any) {\r\n    if (this.isBooleanTypeExpression(expressionObject)) {\r\n      return result === true ? true : false;\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n  protected isBooleanTypeExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return this.isReadonlyExpression(expressionObject) || this.isVisibleExpression(expressionObject) || this.isValidateExpression(expressionObject) || this.isRequiredExpression(expressionObject) || this.isDependencyExpression(expressionObject);\r\n  }\r\n  private isReadonlyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Readonly || false;\r\n  }\r\n  private isVisibleExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Visible;\r\n  }\r\n  private isValidateExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Validate;\r\n  }\r\n  private isRequiredExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Required;\r\n  }\r\n  private isDependencyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Dependency;\r\n  }\r\n  //#endregion\r\n}","import { Injectable } from '@angular/core';\r\nimport { DataPropInfo } from '../core';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { EventHandler } from './event_handler';\r\n/**\r\n * 实体值变化处理器\r\n */\r\n@Injectable()\r\nexport class EntityValueChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Expression } from \"../expression/index\";\r\n\r\nexport class EffectorManager {\r\n  /**\r\n   * 批量副作用\r\n   * @param effector effector\r\n   * @param expressionObject 表达式\r\n   * @param paths 作用路径\r\n   * @returns \r\n   */\r\n  public static effect(effector: Expression.Effector, expressionObject: Expression.ExpressionObject, paths: any[][]) {\r\n    if (!paths || paths.length < 1) {\r\n      return;\r\n    }\r\n    paths.forEach((path: any[]) => {\r\n      const effectOptions: Expression.EffectOptions = { path, message: expressionObject.message, expressionId: expressionObject.id };\r\n      effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n    });\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Entity, EntityList } from \"../entity/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class StateValueChangedEventHandler extends EventHandler {\r\n\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const changePaths = this.cleanEventPath(event.path);\r\n        changePaths.splice(0, 0, STATE_TEMPLATE);\r\n        const eventPath = changePaths.join('/');\r\n        if (deps.includes(eventPath)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        // const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    const bindingType = expressionObject.bindingType;\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    if (bindingType === Expression.ExpressionBindingType.State) {\r\n      // 如果表达式作用于uistate\r\n      effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n    } else if (bindingType === Expression.ExpressionBindingType.Field) {\r\n      // 表达式作用于实体属性\r\n      const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n      const bindingPaths = expressionPathInfo.paths;\r\n      const entities = this.repository.entityCollection.getAllEntities();\r\n      if (!entities || entities.length < 1 || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n      } else {\r\n        this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, (currentRows: Expression.ICurrentRow[], paths: string[]) => {\r\n          this.output(event, expressionObject, currentRows, effector, [paths])\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  private effectRows(entities: Entity[], bindingPaths: string[], propertyNames: string[], callback: (currentRows: Expression.ICurrentRow[], paths: string[]) => void, currentRows: Expression.ICurrentRow[] = [], prevPaths: string[] = [], paths: string[] = []) {\r\n    if (!bindingPaths || bindingPaths.length < 1) {\r\n      entities.forEach((entity: Entity) => {\r\n        if (!entity || !entity.primaryValue) {\r\n          return;\r\n        }\r\n        const currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);\r\n        const currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);\r\n        callback(currentCurrentRows, currentPaths);\r\n      });\r\n      currentRows.length = 0;\r\n      paths.length = 0;\r\n    } else {\r\n      let flag = false;\r\n      let nextPrevPaths = prevPaths;\r\n      entities.forEach((entity: Entity) => {\r\n        const prop = bindingPaths[0];\r\n        const entityList = entity[prop] as EntityList<Entity>;\r\n        if (!entityList || entityList.count() < 1) {\r\n          // 下级表没有数据\r\n          return;\r\n        }\r\n        currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });\r\n        paths.push(entity.primaryValue);\r\n        paths.push(prop);\r\n        if (flag === false) {\r\n          flag = true;\r\n          nextPrevPaths.push(prop);\r\n        }\r\n        const nextBindingPaths = bindingPaths.slice(1);\r\n        this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths, paths);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): { [prop: string]: any; } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Entity } from \"../entity/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryAddEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryRemoveEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n}","import { EventHandler } from \"./event_handler\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { Injectable } from \"@angular/core\";\r\n@Injectable()\r\nexport class RepositoryLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n          console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class EntityUpdateEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n      // 重新加载实体时不计算计算表达式，只处理只读、必填等\r\n      if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {\r\n        return false;\r\n      }\r\n      const result = this.analysis(event, expressionObject);\r\n      if (!result) {\r\n        return false;\r\n      }\r\n      // 必须是主表表达式\r\n      if (result.expressionTablePaths.length !== 0) {\r\n        return false;\r\n      }\r\n      const index = expressionObject.deps.findIndex((dep: string) => {\r\n        if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n          return false;\r\n        }\r\n        const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n        const depPathInfo = this.getPathInfo(deps.join('/'));\r\n        if (!depPathInfo) {\r\n          return false;\r\n        }\r\n        if (depPathInfo.paths.length !== 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return index === -1 ? false : true;\r\n    });\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n          console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs) {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE, STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataAppendObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // const fullEventPath = event.path || [];\r\n      // event.path like [\"id:7dd77e50-ebed-4639-b483-d12004603640\", \"formEEUR1E1s\"] or undefined or []\r\n      // eventTablePaths like [] or [\"子表s\"]\r\n\r\n      // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方\r\n      // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性\r\n      const groupExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // const eventEntityPath = this.buildEntityPath(event.path);\r\n        // 主表新增\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            // 认为主表新增时不需要处理聚合函数\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表新增\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      const eventTablePaths = this.buildEntityPath(event.path);\r\n      // 事件表中表达式（事件表本身的表达式）\r\n      const relativeExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式\r\n        if (expressionObject.ns !== event.ns) {\r\n          return false;\r\n        }\r\n        const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n        // 过滤掉非当前表的表达式\r\n        if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n          return false;\r\n        }\r\n        // 没有依赖的表达式\r\n        if (!expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return true;\r\n        }\r\n        // 仅依赖State\r\n        const onlyDependOnState = expressionObject.deps.every((dep: string) => dep.startsWith(STATE_TEMPLATE));\r\n        // 仅依赖当前表或上级表\r\n        // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {\r\n        //   if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n        //     return false;\r\n        //   }\r\n        //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);\r\n        //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n        //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;\r\n        // });\r\n        // if (onlyDependOnState || onlyDependOnCurrentTable) {\r\n        //   return true;\r\n        // }\r\n        if (onlyDependOnState) {\r\n          return true;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (result && result.distance === 0 && result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 事件表表达式，但依赖下级表的未计算\r\n        return false;\r\n      });\r\n      return groupExpressions.concat(relativeExpressions);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n          console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n  /**\r\n   * 新增副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      console.warn(`[BindingDataAppendObjectEventHandler][analysis]获取路径信息失败。`);\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 新增场景仅需要计算事件表及事件表上面的表\r\n      if (info.distance === 0) {\r\n        if (!info.isSameTable) {\r\n          return;\r\n        }\r\n        // 表达式和事件在同一个表\r\n        const prevPaths = eventPath.slice(0);\r\n        if (eventPath.length === 1) {\r\n          // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push([bindingObject.primaryKeyValue].concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const path = prevPaths.concat(propertyPaths);\r\n            paths.push(path);\r\n          }\r\n        } else {\r\n          // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push(prevPaths.concat([bindingObject.primaryKeyValue]).concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const bindingList = this.bindingData.getValue(info.eventTablePaths) as BindingList;\r\n            if (bindingList && bindingList.currentId) {\r\n              paths.push(prevPaths.concat(bindingList.currentId).concat(propertyPaths));\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 在过滤时这种情况的应该就排除掉了\r\n          console.warn(`[BindingDataAppendObjectEventHandler][effect_error]`);\r\n          return;\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          console.warn(`[BindingDataAppendObjectEventHandler][effect_error]`);\r\n          return;\r\n        }\r\n      }\r\n      paths.forEach((path: any[]) => {\r\n        const currentRows = this.buildCurrentRows(info.expressionTablePaths, path);\r\n        this.output(event, expressionObject, currentRows, effector, [path]);\r\n      });\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { EffectorManager } from '../effector/effector_manager';\r\nimport { BindingList } from '../binding-data';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { EventHandler } from './event_handler';\r\n\r\n@Injectable()\r\nexport class BindingDataValueChangeEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const eventEntityPaths = this.getEntityPath(event.path);\r\n        eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        return deps.includes(eventEntityPaths.join('/'));\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 输出副作用\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    // 首先计算当前表达式和事件会影响那些路径\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const result = this.analysis(event, expressionObject);\r\n    if (!result) {\r\n      return;\r\n    }\r\n    const eventPaths = this.cleanEventPath(event.path);\r\n    const paths: any[][] = [];\r\n    if (result.distance === 0) {\r\n      // 值变化之后影响到了一个表内字段或影响到了同级表字段\r\n      if (result.isSameTable === false) {\r\n        // 同级表跳过\r\n        console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n        return;\r\n      }\r\n      const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n      const path = prevPaths.concat(result.expressionPropertyNames);\r\n      const currentRows = this.buildCurrentRows(result.eventTablePaths, path);\r\n      paths.push(path);\r\n      this.output(event, expressionObject, currentRows, effector, paths);\r\n    } else {\r\n      if (result.eventFromChildren === true) {\r\n        if (result.distance > 1) {\r\n          return;\r\n        }\r\n        // 下级表值变化影响到了上级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);\r\n        const path = prevPaths.concat(result.expressionPropertyNames);\r\n        paths.push(path);\r\n        const currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);\r\n        this.output(event, expressionObject, currentRows, effector, paths);\r\n      } else if (result.eventFromParent === true) {\r\n        if (result.distance > 1) {\r\n          console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n          return;\r\n        }\r\n        // 上级表值变化影响到了下级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n        // 添加下级表nodecode到路径中\r\n        prevPaths.push(result.expressionTablePaths.slice(0).pop());\r\n        // 遍历子表\r\n        const bindingPaths = result.expressionTablePaths;\r\n        const primaryKeyValue = eventPaths[0];\r\n        if (!primaryKeyValue) {\r\n          return;\r\n        }\r\n        let object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);\r\n        // prevPaths like [1,c,1.1,cc]\r\n        for (let index = 1; index < prevPaths.length; index++) {\r\n          const propertyName = prevPaths[index];\r\n          if (object instanceof EntityList) {\r\n            object = object.get(propertyName);\r\n          } else {\r\n            object = object[propertyName];\r\n          }\r\n        }\r\n        const list = object;\r\n        if (list && list instanceof EntityList) {\r\n          if (list.count() === 0) {\r\n            if (expressionObject.type === Expression.ExpressionType.Visible || expressionObject.type === Expression.ExpressionType.Required) {\r\n              const context = this.buildContext(expressionObject, event);\r\n              const value = this.perform(expressionObject, context);\r\n              if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n                return;\r\n              }\r\n              expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);\r\n              if (expressionObject.id) {\r\n                this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n              }\r\n              super.effect(event, expressionObject);\r\n            }\r\n          } else {\r\n            for (let entity of list) {\r\n              if (entity && entity.primaryValue) {\r\n                const path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);\r\n                const currentRows = this.buildCurrentRows(result.expressionTablePaths, path);\r\n                this.output(event, expressionObject, currentRows, effector, [path]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 跨表\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n      return;\r\n    }\r\n    expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n/**\r\n * 删除数据时需要计算的表达式\r\n * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）\r\n */\r\n@Injectable()\r\nexport class BindingDataRemoveObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // 找到聚合相关表达式\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // event.path like [id:xxxx] or [id:xxxx,子表s]\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        // 主表删除\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表删除\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      return expressions;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 删除副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      console.warn(`[BindingDataRemoveObjectEventHandler][analysis]获取路径信息失败。`);\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 删除场景仅需要计算事件表上面的表\r\n      if (info.distance !== 0) {\r\n        // 表达式和事件不在同一个表，即下级表删除了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 在过滤时这种情况的应该就排除掉了\r\n          console.warn(`[BindingDataRemoveObjectEventHandler][effect_error]`);\r\n          return;\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          console.warn(`[BindingDataRemoveObjectEventHandler][effect_error]`);\r\n          return;\r\n        }\r\n      }\r\n      EffectorManager.effect(effector, expressionObject, paths);\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    // 过滤第一次空load\r\n    if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {\r\n      return null;\r\n    }\r\n    // 数据加载完成后需要计算当前绑定路径下的只读、必填、校验表达式\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        return (result.distance === 0 && result.isSameTable) || (result.eventFromParent && event.path.length === 2); // 当前表或从从表\r\n      });\r\n      return expressions;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n@Injectable()\r\nexport class BindingDataSelectionChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        // 没有依赖的表达式不需要关注\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 不依赖实体的表达式不需要关注\r\n        let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 只关注从表行切换\r\n        if (result.eventTablePaths.length !== 1) {\r\n          return false;\r\n        }\r\n        // 只关注从从表表达式\r\n        if (result.expressionTablePaths.length !== 2) {\r\n          return false;\r\n        }\r\n        // 只关注事件直接下级的表达式，跨表的不需要关注\r\n        if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {\r\n          return false;\r\n        }\r\n        // 从从表表达式需要依赖上级表\r\n        index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  public dispatch(event: Expression.EventArgs): void {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Optional } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { EVENT_HANDLER_TOKEN } from \"../expression/tokens\";\r\nimport { RepositoryAddEntityEventHandler } from \"./repository_add_entity_event_handler\";\r\nimport { RepositoryRemoveEntityEventHandler } from \"./repository_remove_entity_event_handler\";\r\nimport { EntityValueChangedEventHandler } from \"./entity_value_changed_event_handler\";\r\nimport { StateValueChangedEventHandler } from \"./state_value_changed_event_handler\";\r\nimport { EntityUpdateEventHandler } from \"./entity_update_event_handler\";\r\nimport { RepositoryLoadEventHandler } from \"./repository_load_event_handler\";\r\nimport { BindingDataAppendObjectEventHandler } from \"./binding_data_append_object_event_handler\";\r\nimport { BindingDataValueChangeEventHandler } from \"./binding_data_value_change_event_handler\";\r\nimport { BindingDataRemoveObjectEventHandler } from \"./binding_data_remove_object_event_handler\";\r\nimport { BindingDataLoadEventHandler } from \"./binding_data_load_event_handler\";\r\nimport { BindingDataSelectionChangedEventHandler } from \"./binding_data_selection_changed_event_handler\";\r\n\r\n@Injectable()\r\nexport class EventHandlerRegistry {\r\n  constructor(@Optional() @Inject(EVENT_HANDLER_TOKEN) public handlers: Expression.IEventHandler[]) { }\r\n  /**\r\n   * 实体值变化处理器\r\n   */\r\n  public get entityValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityValueChangedEventHandler);\r\n  }\r\n  /**\r\n   * 状态值变化处理器\r\n   */\r\n  public get stateValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof StateValueChangedEventHandler);\r\n  }\r\n  public get repositoryAddEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryAddEntityEventHandler);\r\n  }\r\n  public get repositoryRemoveEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryRemoveEntityEventHandler);\r\n  }\r\n  public get entityUpdateEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityUpdateEventHandler);\r\n  }\r\n  public get repositoryLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryLoadEventHandler);\r\n  }\r\n  public get bindingDataAppendEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataAppendObjectEventHandler);\r\n  }\r\n  public get bindingDataValueChangeEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataValueChangeEventHandler);\r\n  }\r\n  public get bindingDataRemoveObjectEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataRemoveObjectEventHandler);\r\n  }\r\n  public get bindingDataLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataLoadEventHandler);\r\n  }\r\n  public get bindingDataSelectionChangedHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataSelectionChangedEventHandler);\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { ExpressionEventEmitter } from \"./expression_event_emitter\";\r\nimport { Expression } from './types';\r\nimport { ResolverRegistry, ResolveService } from \"../resolver/index\";\r\nimport { EventHandlerRegistry } from \"../event-handler/index\";\r\nimport { Core } from \"../core/index\";\r\n\r\n@Injectable()\r\nexport class ExpressionEngineImpl {\r\n  private expressionObjects: Array<Expression.ExpressionObject> = new Array<Expression.ExpressionObject>();\r\n  constructor(\r\n    private injector: Injector,\r\n    private expressionRegistry: ExpressionRegistry,\r\n    private expressionEventEmitter: ExpressionEventEmitter,\r\n    private resolverRegistry: ResolverRegistry,\r\n    private eventHandlerRegistry: EventHandlerRegistry,\r\n    private resolveService: ResolveService\r\n  ) {\r\n    this.expressionRegistry.expressions.subscribe((exprs: Expression.ExpressionObject[]) => {\r\n      if (exprs && exprs.length > 0) {\r\n        this.expressionObjects = exprs;\r\n        // 解析表达式依赖\r\n        this.resolveDependency();\r\n      }\r\n      this.attachEvent();\r\n    });\r\n  }\r\n\r\n  private attachEvent() {\r\n    this.expressionEventEmitter.attach().subscribe((events: Expression.EventArgs[]) => {\r\n      if (!events || events.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1) {\r\n        return;\r\n      }\r\n      events.forEach((event: Expression.EventArgs) => {\r\n        const handler = this.getEventHandler(event);\r\n        if (handler) {\r\n          handler.handleEvent(event, this.expressionObjects);\r\n        } else {\r\n          Core.warn(`没有对应的事件处理器,event=${event.type}`);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 解析表达式依赖\r\n   * @returns \r\n   */\r\n  private resolveDependency() {\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {\r\n      return;\r\n    }\r\n    this.expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expression = expressionObject.expression;\r\n      const dependencies = this.resolveService.resolve(expression);\r\n      expressionObject.deps = dependencies;\r\n    });\r\n  }\r\n  /**\r\n   * 获取表达式事件处理器\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  private getEventHandler(event: Expression.EventArgs): Expression.IEventHandler {\r\n    if (event.type === Expression.EventType.ValueChanged) {\r\n      // 实体值变化\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;\r\n      } else if (event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.entityValueChangedEventHandler;\r\n      } else if (event.source === Expression.EventSource.State) {\r\n        return this.eventHandlerRegistry.stateValueChangedEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Append) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryAddEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Remove) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Update) {\r\n      if (event.source === Expression.EventSource.Repository) {\r\n        return this.eventHandlerRegistry.entityUpdateEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Load) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryLoadEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataLoadEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.SelectionChanged) {\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n}","import { Injector, Injectable, Optional, SkipSelf, InjectFlags } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';\r\nimport { Context } from '../context/index';\r\nimport { AppContext } from '../app/index';\r\nimport { RouterParamService } from '../misc/index';\r\nimport { FRAME_ID, NAMESPACE } from './tokens';\r\nimport { Change, ChangeType } from '../binding-data/index';\r\nimport { EventBus } from '../event-bus-new/index';\r\nimport { FrameComponent } from './frame_component';\r\nimport { IExceptionHandler } from '../exception/types';\r\nimport { EXCEPTION_HANDLER } from '../exception/tokens';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { Translate } from '../i18n';\r\nimport { UserSettings } from '../i18n/types';\r\nimport { UserSettingsToken } from '../i18n/tokens';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ExpressionEngineImpl } from '../expression/expression_engine_impl';\r\nimport { ExpressionManager } from '../expression/expression_manager';\r\nimport { ExpressionResult } from '../expression/expression_result';\r\nimport { ExpressionResultFactory } from '../expression/expression_result_factory';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser\r\n} from '../variable';\r\nimport { RunMode } from '../core';\r\n\r\n\r\n/**\r\n * 组件上下文\r\n * @description \r\n * # 上下文\r\n * ## Overview\r\n * \r\n * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：\r\n * \r\n * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix-2103/farris/devkit/guide/images/image-20210806204755378.png)\r\n * \r\n * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。\r\n * \r\n * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：\r\n * \r\n * ```typescript\r\n * // 方法1\r\n * const rootFrameContext = this.frameContext.root;\r\n * // 方法2\r\n * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');\r\n * ```\r\n * \r\n * 通常在编写`Web构件`时先引入FrameContext，如：\r\n * \r\n * ```javascript\r\n * import {FrameContext,BindingData,Repository} from '@farris/devkit';\r\n * \r\n * constructor(private frameContext:FrameContext){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.frameContext.bindingData;\r\n *     const repository: Repository = this.frameContext.repository;\r\n * }\r\n * ```\r\n * \r\n * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。\r\n * \r\n * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：\r\n * \r\n * ```typescript\r\n * import {BindingData,Repository,ViewModel} from '@farris/devkit';\r\n * \r\n * constructor(private viewModel:ViewModel){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.viewModel.bindingData;\r\n *     const repository: Repository = this.viewModel.repository;\r\n * }\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用操作\r\n * \r\n * ### 获取当前上下文所属的组件\r\n * \r\n * ```typescript\r\n * this.frameContext.frameComponent;\r\n * ```\r\n * \r\n * ### 获取当前上下文的根上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.root;\r\n * ```\r\n * \r\n * ### 获取当前上下文的appContext\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext;\r\n * ```\r\n * \r\n * ### 获取指定frameId的上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n * ```\r\n * \r\n * ### 获取表单所有上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用属性\r\n * \r\n * ### BindingData \r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))\r\n * \r\n * ### Repository\r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))\r\n * \r\n * ### ViewModel\r\n * \r\n * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。\r\n * \r\n * ### namespace\r\n * \r\n * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。\r\n * \r\n * ### root\r\n * \r\n * 获取整个表单的根上下文\r\n * \r\n * ### uiState\r\n * \r\n * 获取当前组件的变量\r\n * \r\n * ### frameId\r\n * \r\n * 上下文标识。\r\n */\r\n@Injectable()\r\nexport class FrameContext extends Context {\r\n\r\n  public typeName = 'FrameContext';\r\n\r\n  protected isDestoried = false;\r\n\r\n  /**\r\n   * id\r\n   */\r\n  public frameId: string;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  // public injector: Injector;\r\n\r\n  /**\r\n   * 应用上下文\r\n   */\r\n  public appContext: AppContext;\r\n\r\n  /**\r\n   * 根组件上下文\r\n   */\r\n  public root: FrameContext;\r\n\r\n  /**\r\n   * 父ViewModel\r\n   */\r\n  public parent: FrameContext;\r\n\r\n  /**\r\n   * 后代节点\r\n   */\r\n  public children: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 命令总线\r\n   */\r\n  public commandBus: CommandBus;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 数据绑定\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 表单\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 所属组件\r\n   */\r\n  public frameComponent: FrameComponent;\r\n\r\n  /**\r\n   * 异常处理\r\n   */\r\n  public exceptionHandler: IExceptionHandler;\r\n\r\n  /**\r\n   * 表单命名空间\r\n   */\r\n  public namespace: string;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public metadata: IContextMetadata = {\r\n    identify: '',\r\n    namespace: '',\r\n    commands: null,\r\n    form: null,\r\n    formControls: null,\r\n    subForms: null,\r\n    stateMachine: null,\r\n    uiStates: null,\r\n    bindingTo: ''\r\n  };\r\n\r\n  /**\r\n   * 暂停事件抛出\r\n   */\r\n  public suspend: boolean;\r\n  public expressionEngineImpl: ExpressionEngineImpl;\r\n  public expressionManager: ExpressionManager;\r\n  public expressionResult: ExpressionResult;\r\n  /**\r\n   * 索引(从0开始)\r\n   */\r\n  public index: number;\r\n  /**\r\n   * 多语\r\n   */\r\n  public translate: Translate;\r\n  /**\r\n   * 构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(public injector: Injector, @Optional() @SkipSelf() parent: FrameContext) {\r\n    super();\r\n    // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。\r\n    this.appContext = injector.get(AppContext);\r\n    // 确定父子关系\r\n    // 必须对appContext进行判断，原因如下：\r\n    // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；\r\n    // 2、进而导致从RootFrameContext上拿VO变量拿不到。\r\n    if (!parent || parent.appContext !== this.appContext) { // 取消 appContext 的判断\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n    this.frameId = injector.get<string>(FRAME_ID);\r\n    if (this.appContext.contextMetadataManager.exsit(this.frameId)) {\r\n      this.metadata = this.appContext.contextMetadataManager.getContextMetadataByName(this.frameId);\r\n    }\r\n    this.namespace = injector.get(NAMESPACE, null);\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, new BindingData());\r\n    if (!this.appContext.useIsoluteEventBus || (this.appContext.useIsoluteEventBus && !this.appContext.isoluteEventBus)) {\r\n      this.eventBus = this.injector.get(EventBus, null, InjectFlags.Optional);\r\n    } else {\r\n      this.eventBus = this.appContext.isoluteEventBus;\r\n    }\r\n    this.form = this.injector.get<Form>(Form, new Form());\r\n    this.repository = this.injector.get(Repository, this.appContext.repository);\r\n    this.uiState = this.injector.get<UIState>(UIState, new UIState());\r\n    const defaultViewModel = new ViewModel();\r\n    defaultViewModel.setMetadata(this.metadata);\r\n    this.viewModel = this.injector.get<ViewModel>(ViewModel, defaultViewModel);\r\n    this.variableParseService = injector.get<VariableParseService>(VariableParseService, new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]));\r\n    // 注入exceptionHandler\r\n    this.exceptionHandler = injector.get<IExceptionHandler>(EXCEPTION_HANDLER, null, InjectFlags.Optional);\r\n    // 初始化多语服务\r\n    const translate = injector.get<Translate>(TranslateToken, null);\r\n    this.translate = translate;\r\n    TranslateService.setTranslate(translate);\r\n    // 初始化用户配置\r\n    const userSettings = injector.get<UserSettings>(UserSettingsToken, null);\r\n    UserSettingsService.setUserSettings(userSettings);\r\n    this.initializeRepository();\r\n    this.appContext.regFrameContext(this);\r\n  }\r\n\r\n  bindInjector(componentInjector: Injector) {\r\n    this.injector = componentInjector;\r\n  }\r\n\r\n  // #region 初始化\r\n\r\n  /**\r\n   * 初始化\r\n   * @todo:\r\n   * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext\r\n   * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    this.frameComponent = frameComponent;\r\n    this.initializeBindingData();\r\n    this.initializeStateMachine();\r\n    this.initializeUiState();\r\n    this.initializeForm();\r\n    this.initializeCommandBus();\r\n    this.initializeViewModel();\r\n    this.registerExceptionHandler();\r\n    this.initExpression();\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n  public initExpression() {\r\n    this.expressionEngineImpl = this.injector.get<ExpressionEngineImpl>(ExpressionEngineImpl, null);\r\n    this.expressionManager = this.injector.get<ExpressionManager>(ExpressionManager, null);\r\n    const expressionResultFactory = this.injector.get<ExpressionResultFactory>(ExpressionResultFactory, null);\r\n    this.expressionResult = this.injector.get<ExpressionResult>(ExpressionResult, null);\r\n  }\r\n  /**\r\n   * 订阅异常消息\r\n   */\r\n  protected registerExceptionHandler() {\r\n    // tslint:disable: no-string-literal\r\n    const formAppContext = this.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    window[window.location.href] = applicationId;\r\n    if (this.exceptionHandler !== null) {\r\n      const applicationContext = window[applicationId] = window[applicationId] || {};\r\n      if (this.eventBus !== null && this.isRootFrameContext()) {\r\n        applicationContext.isExceptionHandlerExist = true;\r\n        this.exceptionHandler.setContext(this.appContext);\r\n        this.eventBus.on('Exception', '', 'onException', this.getFormAppContext(), (error) => {\r\n          if (this.isDestoried === true) {\r\n            return;\r\n          }\r\n          if (error && error.error) {\r\n            try {\r\n              error.error.__frame_context__ = this;\r\n            } catch { }\r\n          }\r\n          this.exceptionHandler.handle(error);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 获取表单appcontext，即最上层appcontext\r\n   */\r\n  public getFormAppContext() {\r\n    return this.appContext;\r\n  }\r\n  /**\r\n   * 获取frameId\r\n   * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId\r\n   */\r\n  public getFrameId(relativeFrameId: string) {\r\n    if (!relativeFrameId) {\r\n      return this.frameId;\r\n    }\r\n    if (this.namespace && this.namespace.length > 0) {\r\n      return `${this.namespace}_${relativeFrameId}`;\r\n    } else {\r\n      return relativeFrameId;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化Repository\r\n   */\r\n  private initializeRepository() {\r\n\r\n    this.repository.setPaginationConfig(this.repository.paginationInfo);\r\n  }\r\n\r\n  private initializeForm() {\r\n    // 设置Form语言服务\r\n    // this.form.setTranslateService(translateService);\r\n    // 初始化Form，提取FormControl定义，添加FormControl\r\n    // this.form.init(this.bindingData, this.metadata.bindingTo, this);\r\n    // Form\r\n    this.form = this.injector.get<Form>(Form, null);\r\n    if (this.form) {\r\n      // 设置Form语言服务\r\n      this.form.setTranslateService(this.injector.get(TranslateToken, null));\r\n      // 初始化Form，提取FormControl定义，添加FormControl\r\n      const bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;\r\n      this.form.init(this.bindingData, bindingPath, this);\r\n    }\r\n  }\r\n\r\n  private initializeStateMachine() {\r\n    // StateMachine 状态机需要在绑定数据之后加载\r\n    this.stateMachine = this.injector.get<StateMachine>(StateMachine, null);\r\n    if (this.stateMachine) {\r\n      this.stateMachine.initialize(this, this.variableParseService);\r\n    }\r\n  }\r\n\r\n  private initializeCommandBus() {\r\n    const handlerRegistry = this.injector.get<CommandHandlerRegistry>(CommandHandlerRegistry,\r\n      new CommandHandlerRegistry(this.metadata.commandHandlers));\r\n    const extendsRegistry = this.injector.get<CommandHandlerExtenderRegistry>(CommandHandlerExtenderRegistry,\r\n      new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));\r\n    const commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);\r\n    this.commandBus = new CommandBus(commandHandlerFactory);\r\n  }\r\n\r\n  /**\r\n   * 初始化ViewModel\r\n   * @todo\r\n   * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；\r\n   * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；\r\n   */\r\n  private initializeViewModel() {\r\n    if (!this.metadata.bindingTo) {\r\n      this.metadata.bindingTo = this.viewModel.bindingPath;\r\n    }\r\n    this.viewModel.init(this);\r\n    this.regViewModel(this.viewModel);\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化BindingData\r\n   * @summary\r\n   * 老表单：repositoryName为空，复制当前Repository里的数据；\r\n   * 新表单：repositoryName有值，引用全局BindingData里的数据；\r\n   */\r\n  private initializeBindingData() {\r\n    const repositoryName = this.repository.name;\r\n    const isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;\r\n    if (repositoryName && isRunAtHighSpeedMode) {\r\n      const repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);\r\n      this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);\r\n      this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;\r\n      this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n    } else {\r\n      this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if (change.type === ChangeType.GlobalSelectionChanged) {\r\n          this.appContext.handleSelectChange(change, this);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化UIState\r\n   * 合并路由参数到UIState中\r\n   */\r\n  private initializeUiState() {\r\n    const isInFramework = window.location.href.indexOf('platform') > -1;\r\n    const paramTypeTransform = this.injector.get<boolean>(PARAM_TYPE_TRANSFORM_TOKEN, false);\r\n    // 获取UIState\r\n    this.uiState = this.injector.get<UIState>(UIState, null);\r\n    if (!this.uiState) {\r\n      return;\r\n    }\r\n    this.uiState.paramTypeTransform = paramTypeTransform;\r\n    this.uiState.initialize(this);\r\n    // 获取路由参数\r\n    const url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';\r\n    const routerParamService = new RouterParamService();\r\n    const routerParams = routerParamService.getParams(url);\r\n\r\n    // 在UIState为路由参数创建属性\r\n    Object.keys(routerParams).forEach((propName: string) => {\r\n      Object.defineProperty(this.uiState, propName, {\r\n        get: () => {\r\n          return routerParams[propName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册子ViewModel\r\n   * @todo\r\n   * 1、propName写死了\r\n   */\r\n  protected regViewModel(viewModel: ViewModel): void {\r\n    if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {\r\n      this.appContext.viewModelManager.register(viewModel.name, viewModel);\r\n    }\r\n    const className = viewModel.constructor.name;\r\n    const parentContext = this.parent;\r\n    let parentViewModel = null;\r\n    if (parentContext && parentContext.viewModel) {\r\n      parentViewModel = parentContext.viewModel;\r\n    }\r\n    if (!parentViewModel) {\r\n      return;\r\n    }\r\n    // 优先使用生成器生成的name\r\n    const childViewModels = parentViewModel['childViewModels'];\r\n    let viewModelName = null;\r\n    if (childViewModels) {\r\n      const name = viewModel.constructor.name;\r\n      viewModelName = childViewModels[viewModel.name] || childViewModels[name];\r\n    } else if (className.length === 1) {\r\n      const classNameTokens = viewModel.name.split('-').map((nameToken, index) => {\r\n        if (index > 0 && nameToken.length) {\r\n          const pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return pasicalName;\r\n        } else if (index === 0 && nameToken.length) {\r\n          const camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return camelName;\r\n        }\r\n        return nameToken;\r\n      });\r\n      viewModelName = classNameTokens.join('');\r\n    }\r\n    // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则\r\n    if (!viewModelName) {\r\n      viewModelName = className[0].toLowerCase() + className.substring(1, className.length);\r\n    }\r\n    parentViewModel[viewModelName] = viewModel;\r\n    viewModel.bindToParent(parentViewModel);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 检查是否为根FrameContext\r\n   * @summary\r\n   * 检查该FrameContext是不是所在AppContext中的根FrameContext\r\n   */\r\n  public isRootFrameContext() {\r\n    return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);\r\n  }\r\n\r\n  /**\r\n   * 销毁FrameContext\r\n   */\r\n  public destroy() {\r\n    this.appContext.frameContextManager.unregFrameContext(this);\r\n    this.appContext.frameComponentRefresher.unregFrameContext(this);\r\n    this.isDestoried = true;\r\n    // this.bindingData.reset();\r\n    // this.repository.reset();\r\n  }\r\n  /**\r\n   * 通过namespace获取当前表单的root-framecontext(非整个表单)\r\n   * @description\r\n   * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext\r\n   */\r\n  public getVirtualRootFrameContext() {\r\n    let formFrameContext: FrameContext = this;\r\n    let parent = this.parent;\r\n    while (parent) {\r\n      // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext\r\n      if (parent.namespace === this.namespace) {\r\n        formFrameContext = parent;\r\n        parent = parent.parent;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return formFrameContext;\r\n  }\r\n\r\n\r\n  public getContextById(identify: string): any {\r\n    return this.appContext.getContextById(identify);\r\n  }\r\n\r\n  public getViewModel(viewModelName: string): ViewModel {\r\n    const renderAppContext = this.appContext;\r\n    if (renderAppContext) {\r\n      return renderAppContext.viewModelManager.getViewModelByName(viewModelName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public attachViewComponent(viewComponent: FrameComponent) {\r\n    this.frameComponent = viewComponent;\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n\r\n  public invoke(actionPath: string, $event: any) {\r\n    const actionBindingPath = actionPath.split('.');\r\n    const actionName = actionBindingPath[actionBindingPath.length - 1];\r\n    const bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :\r\n      this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);\r\n    if (!bindingViewModel) {\r\n      alert(`未匹配到'${actionPath}'命令的视图模型，请检查事件是否配置正确。`);\r\n    }\r\n    return bindingViewModel[actionName]($event);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-12 14:59:22\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-15 17:26:07\r\n */\r\n\r\nimport { Injector, Injectable, InjectFlags, Optional, ChangeDetectorRef, OnDestroy, ElementRef, Renderer, Renderer2, RendererFactory2, ComponentRef, OnInit } from '@angular/core';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { FrameContext } from './frame_context';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { Subscription, Declaration } from '../event-mechanism/index';\r\nimport { IDisposable, EventPipe } from '../event-bus-new/index';\r\nimport { FRAME_COMPONENT_INIT_HANDLER_TOKEN, onFrameComponentInit } from './tokens';\r\n\r\n\r\n@Injectable()\r\nabstract class FrameComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * 变更检测器\r\n   */\r\n  private cd: ChangeDetectorRef;\r\n\r\n  /**\r\n   * 框架ID\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * 框架上下文\r\n   */\r\n  public context: FrameContext;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  public subscription: Subscription;\r\n\r\n  /**\r\n   * 公开事件\r\n   */\r\n  public declaration: Declaration;\r\n\r\n  /**\r\n   * 该组件订阅的EventPipes\r\n   */\r\n  private eventPipes: IDisposable[];\r\n\r\n  private initialized = false;\r\n  /**\r\n   * 框架构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(protected injector: Injector) {\r\n    this.context = this.injector.get<FrameContext>(FrameContext, null);\r\n    if (this.context) {\r\n      this.initialize();\r\n    }\r\n    // this.context.init(this);\r\n    // this.viewModel = this.context.viewModel;\r\n    // this.cd = this.getChangeDetectorRef();\r\n\r\n    // // 必须先执行context的初始化，然后再初始化Subscription\r\n    // this.initPublicEvent();\r\n\r\n    // this.initSubscription();\r\n\r\n    // this.restComponent();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initialize();\r\n  }\r\n\r\n  private initialize() {\r\n    if (!this.initialized) {\r\n      this.context.init(this);\r\n      this.viewModel = this.context.viewModel;\r\n      this.cd = this.getChangeDetectorRef();\r\n      // 必须先执行context的初始化，然后再初始化Subscription\r\n      this.initPublicEvent();\r\n      this.initSubscription();\r\n      this.restComponent();\r\n      this.onFrameComponentInit();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n  /**\r\n   * 执行组件初始化\r\n   */\r\n  private onFrameComponentInit() {\r\n    const frameComponentInitHandlers = this.injector.get<onFrameComponentInit[]>(FRAME_COMPONENT_INIT_HANDLER_TOKEN, null);\r\n    if (frameComponentInitHandlers && Array.isArray(frameComponentInitHandlers) && frameComponentInitHandlers.length > 0) {\r\n      frameComponentInitHandlers.forEach((handler: onFrameComponentInit) => {\r\n        handler.onComponentInit(this.context);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取变更检测器实例\r\n   * @todo：应该通过注入获取，但注入会引起表单编译。\r\n   */\r\n  private getChangeDetectorRef() {\r\n\r\n    // const cd = this.get<ChangeDetectorRef>(ChangeDetectorRef, null, InjectFlags.Optional);\r\n    const cd = this.injector.get(ChangeDetectorRef, null);\r\n    return cd;\r\n  }\r\n\r\n  /**\r\n   * 将当前组件脱离变更检测树\r\n   */\r\n  public detach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detach();\r\n  }\r\n\r\n  /**\r\n   * 将当前组件重新加入变更检测树\r\n   */\r\n  public reattach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.reattach();\r\n  }\r\n\r\n  /**\r\n   * 对当前组件进行一次变更检查\r\n   */\r\n  public detectChanges() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * 检测ChangeDetection是否有效\r\n   * @todo: Can't be depend on the destroyed property, destroyed.\r\n   */\r\n  private isCdValid() {\r\n    return this.cd && this.cd['destroyed'] === false || false;\r\n  }\r\n\r\n  /**\r\n   * 重置组件状态\r\n   * @todo：AppContext是全局的，\r\n   */\r\n  public restComponent() {\r\n    if (this.context !== this.context.root) {\r\n      return;\r\n    }\r\n    // 1、如果AppContext不是root并且父AppContext也不是root不清理;\r\n    // 2、表单Module里注入了FARRIS_DEVKIT_APP_PROVIDERS里面有一个冗余的AppContext注入\r\n    //    导致所有AppContext的根是该冗余的AppContext，所以要检测parent.parent。\r\n    // 只清理根组件的session\r\n    if (this.context.appContext.parent !== null && this.context.appContext.parent.parent !== null) {\r\n      return;\r\n    }\r\n\r\n    // Repository被注册到全局了，模块依赖注入中的对象，没有重置时机，临时在根组件中进行注销。\r\n    // @todo：应该清理全部repository，目前缺少全局管理所有Repository的地方。\r\n    this.context.repository.reset();\r\n    // 重置组件绑定数据\r\n    this.context.bindingData.reset();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    if (this.context.isRootFrameContext() === true) {\r\n      this.context.appContext.unregisterFromManager(this.context);\r\n    }\r\n\r\n    this.eventPipes.forEach((eventPipe: IDisposable) => {\r\n      (eventPipe as EventPipe).disposeByCaller(this);\r\n    });\r\n\r\n    this.context.destroy();\r\n  }\r\n\r\n  /**\r\n   * 初始化事件订阅\r\n   */\r\n  private initSubscription() {\r\n    this.subscription = this.getSubscription();\r\n    if (!this.subscription) {\r\n      return;\r\n    }\r\n\r\n    this.eventPipes = this.subscription.init(this);\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取component对应的订阅\r\n   * @returns \r\n   */\r\n  public getSubscription() {\r\n    return this.injector.get<Subscription>(Subscription, null);\r\n  }\r\n\r\n  private initPublicEvent() {\r\n\r\n    this.declaration = this.getDeclaration();\r\n    if (!this.declaration) {\r\n      return;\r\n    }\r\n\r\n    this.declaration.init(this);\r\n  }\r\n\r\n  /**\r\n   * 获取当前component对应的declaration\r\n   * @returns \r\n   */\r\n  public getDeclaration() {\r\n    return this.injector.get<Declaration>(Declaration, null);\r\n  }\r\n\r\n  /**\r\n   * 事件触发器，触发事件发布\r\n   * @param eventName 待发布事件\r\n   */\r\n  public trigger(eventName: string) {\r\n    const subscription = this.context.commandBus.executingCommandCount$.subscribe((executingCommandCount: number) => {\r\n      if (executingCommandCount !== 0) {\r\n        return;\r\n      }\r\n      this.innerTrigger(eventName);\r\n\r\n      // @todo\r\n      // subscription存在未undefine的情况，待进一步排查。\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      } else {\r\n        setTimeout(() => {\r\n          if (subscription) {\r\n            subscription.unsubscribe();\r\n          }\r\n        }, 0);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 内部触发变更检测\r\n   */\r\n  private innerTrigger(eventName: string) {\r\n\r\n    // 根据事件名，查找对应的事件处理器\r\n    const eventHandler: any = this.declaration && this.declaration[eventName];\r\n    if (!eventHandler) {\r\n      return;\r\n    }\r\n    // 执行事件\r\n    eventHandler();\r\n  }\r\n\r\n}\r\n\r\nexport { FrameComponent };\r\n","\r\n/**\r\n * 上下文事件\r\n */\r\nclass FrameEvent {\r\n\r\n  /**\r\n   * 事件类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  data?: any;\r\n\r\n  /**\r\n   * 框架id数组\r\n   */\r\n  frameIds?: string[];\r\n}\r\n\r\nexport { FrameEvent };\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { FrameEvent } from './frame_event';\r\n\r\n\r\n/**\r\n * 框架事件总线\r\n */\r\n@Injectable()\r\nclass FrameEventBus {\r\n\r\n  /**\r\n   * @todo 暂不实现对订阅的注销\r\n   */\r\n  private subscriptions: any;\r\n\r\n  /**\r\n   * 事件流\r\n   */\r\n  public events: Subject<FrameEvent> = new Subject<FrameEvent>();\r\n\r\n\r\n  /**\r\n   * 注册事件处理\r\n   */\r\n  on(eventType: string, eventHandler: any, frameId: string) {\r\n    this.events.pipe(filter((event: FrameEvent) => {\r\n      if (event.type !== eventType) {\r\n        return false;\r\n      }\r\n      return !event.frameIds || event.frameIds.indexOf(frameId) > -1;\r\n    })).subscribe(eventHandler);\r\n  }\r\n\r\n  /**\r\n   * 取消事件处理\r\n   */\r\n  off(eventType: string, frameId: string): void {\r\n    throw new Error('暂不实现');\r\n  }\r\n\r\n  /**\r\n   * 触发事件\r\n   */\r\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\r\n    const event: FrameEvent = {\r\n      type: eventType,\r\n      data: eventData,\r\n      frameIds: frameIds\r\n    };\r\n    this.events.next(event);\r\n  }\r\n}\r\n\r\nexport { FrameEventBus };\r\n","/**\r\n * 命令处理器工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { CommandHandler } from './command_handler';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtender } from './command_handler_extender';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\n\r\n/**\r\n * 命令处理器工厂\r\n */\r\n@Injectable()\r\nclass CommandHandlerFactory {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlerRegistry  命令处理注册器\r\n   * @param extenderRegistry 命令处理扩展注册器\r\n   */\r\n  constructor(\r\n    private handlerRegistry: CommandHandlerRegistry,\r\n    private extenderRegistry: CommandHandlerExtenderRegistry,\r\n    private frameContext: FrameContext,\r\n    private variableParseService: VariableParseService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 创建命令处理器\r\n   * @param   commandName 命令名称\r\n   * @returns 对应的命令处理器实例\r\n   */\r\n  public create(commandName: string): CommandHandler {\r\n    const rawHandler = this.handlerRegistry.get(commandName);\r\n    rawHandler.init(this.frameContext, this.variableParseService);\r\n    const extenders = this.extenderRegistry.get(commandName);\r\n\r\n    // 遍历extenders，依次对handler进行扩展\r\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\r\n      return extender.extend(handler);\r\n    }, rawHandler);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerFactory };\r\n","/**\r\n * CommandBus相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Command } from './command';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\n\r\n/**\r\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\r\n */\r\n@Injectable()\r\nclass CommandBus {\r\n\r\n  /**\r\n   * handler工厂\r\n   */\r\n  private handlerFactory: CommandHandlerFactory;\r\n\r\n  /**\r\n   * 正在执行的命令数量流（请勿使用，后果自负）\r\n   */\r\n  public executingCommandCount$: BehaviorSubject<number>;\r\n\r\n  /**\r\n   * 正在执行的命令数量\r\n   */\r\n  private executingCommands: Command[];\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(handlerFactory: CommandHandlerFactory) {\r\n    this.handlerFactory = handlerFactory;\r\n    this.executingCommands = [];\r\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 派发命令\r\n   * @param command 要派发的命令\r\n   */\r\n  public dispatch(command: Command): Observable<any> {\r\n    const commandResult$ = new Subject();\r\n    this.executeCommand(command).subscribe({\r\n      next: (lastTaskResult: any) => {\r\n        commandResult$.next(lastTaskResult);\r\n        commandResult$.complete();\r\n      },\r\n      complete: () => {\r\n        commandResult$.complete();\r\n        this.removeCommandFromExecutingQueue(command);\r\n      },\r\n      error: (error: any) => {\r\n        commandResult$.error(error);\r\n        this.removeCommandFromExecutingQueue(command, !this.is401Error(error));\r\n      }\r\n    });\r\n    return commandResult$;\r\n  }\r\n\r\n  /**\r\n   * 执行命令并返回最后一个任务的执行结果流\r\n   */\r\n  private executeCommand(command: Command): Observable<any> {\r\n    this.addCommandToExecutingQueue(command);\r\n    const commandName = command.name;\r\n    const handler = this.handlerFactory.create(commandName);\r\n    const lastTaskResult$ = handler.execute(command);\r\n    return lastTaskResult$;\r\n  }\r\n\r\n\r\n  /**\r\n   * 添加到执行队列\r\n   */\r\n  private addCommandToExecutingQueue(command: Command) {\r\n    this.executingCommands.push(command);\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 从执行队列中移除\r\n   */\r\n  private removeCommandFromExecutingQueue(command: Command, postOrNot: boolean = true) {\r\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\r\n      return executingCommand !== command;\r\n    });\r\n    if (postOrNot === true) {\r\n      this.executingCommandCount$.next(this.executingCommands.length);\r\n    }\r\n  }\r\n\r\n  private is401Error(error: HttpErrorResponse) {\r\n    // 如果error为空，不认为是401错误\r\n    return error && error.status === 401;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandBus };\r\n","import { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandBus } from './command_bus';\r\n\r\n\r\nexport const COMMAND_PROVIDERS = [\r\n  CommandHandlerRegistry,\r\n  CommandHandlerExtenderRegistry,\r\n  CommandHandlerFactory,\r\n  CommandBus,\r\n];\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { isObservable, of, Subject } from 'rxjs';\r\nimport { CommandContext } from './command_context';\r\nimport { CommandHandler } from './command_handler';\r\nimport {\r\n  ControllerMethod, DeterminingStage, ExecutingStage,\r\n  ForkStage, MethodStage, StageParam\r\n} from './dynamic_command_handler_metadata';\r\n\r\n/**\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *     commandName: 'add1'\r\n * })\r\n * export class add1Handler extends CommandHandler {\r\n *     constructor(\r\n *         public _ListDataService1: ListDataService1,\r\n *         public _StateMachineService1: StateMachineService1\r\n *     ) {\r\n *         super();\r\n *     }\r\n *\r\n *     schedule() {\r\n *         this.addTask('append', (context: CommandContext) => {\r\n *             const args = [];\r\n *             return this.invoke(this._ListDataService1, 'append', args, context);\r\n *         });\r\n *\r\n *         this.addTask('transit', (context: CommandContext) => {\r\n *             const args = [\r\n *                 'Create'\r\n *                     ];\r\n *             return this.invoke(this._StateMachineService1, 'transit', args, context);\r\n *         });\r\n *\r\n *         this.addLink('append', 'transit', `1==1`);\r\n *     }\r\n * }\r\n */\r\n\r\n// const controllerMap = {\r\n//   imports: {\r\n//     ValidationService: '/platform/common/web/@farris/command-services.js',\r\n//     FocusInvalidService: '/platform/common/web/@farris/command-services.js',\r\n//     ChangeItemService: '/platform/common/web/@farris/command-services.js',\r\n//     UIStateService: '/platform/common/web/@farris/command-services.js',\r\n//     StateMachineService: '/platform/common/web/@farris/command-services.js',\r\n//     BindingDataService: '/platform/common/web/@farris/command-services.js',\r\n//     CommandService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityTraversingService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityManipulationService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityAggregationService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityListService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityService: '/platform/common/web/@farris/command-services.js',\r\n//     ListDataService: '/platform/common/web/@farris/command-services.js',\r\n//     TreeDataService: '/platform/common/web/@farris/command-services.js',\r\n//     SubTreeDataService: '/platform/common/web/@farris/command-services.js',\r\n//     CardDataService: '/platform/common/web/@farris/command-services.js',\r\n//     SubListDataService: '/platform/common/web/@farris/command-services.js',\r\n//     RemoveDataService: '/platform/common/web/@farris/command-services.js',\r\n//     SaveDataService: '/platform/common/web/@farris/command-services.js',\r\n//     EditDataService: '/platform/common/web/@farris/command-services.js',\r\n//     FilterConditionDataService: '/platform/common/web/@farris/command-services.js',\r\n//     RemoteSummaryService: '/platform/common/web/@farris/command-services.js',\r\n//     BeActionService: '/platform/common/web/@farris/command-services.js',\r\n//     ApproveService: '/platform/common/web/@farris/command-services.js',\r\n//     PrintService: '/platform/common/web/@farris/command-services.js',\r\n//     AttachmentDataService: '/platform/common/web/@farris/command-services.js',\r\n//     AttachmentService: '/platform/common/web/@farris/command-services.js',\r\n//     FileService: '/platform/common/web/@farris/command-services.js',\r\n//     NavigationMiddlewareService: '/platform/common/web/@farris/command-services.js',\r\n//     GridMiddlewareService: '/platform/common/web/@farris/command-services.js',\r\n//     SidebarService: '/platform/common/web/@farris/command-services.js',\r\n//     FarrisFormService: '/platform/common/web/@farris/command-services.js',\r\n//     DialogService: '/platform/common/web/@farris/command-services.js',\r\n//     NavigationEventService: '/platform/common/web/@farris/command-services.js',\r\n//     NavigationService: '/platform/common/web/@farris/command-services.js',\r\n//     RouterService: '/platform/common/web/@farris/command-services.js',\r\n//     AuthorityService: '/platform/common/web/@farris/command-services.js',\r\n//     EndEditService: '/platform/common/web/@farris/command-services.js',\r\n//     BatchEditDialogService: '/platform/common/web/@farris/command-services.js',\r\n//     BatchEditService: '/platform/common/web/@farris/command-services.js',\r\n//     DiscussionGroupService: '/platform/common/web/@farris/command-services.js',\r\n//     LocalizationService: '/platform/common/web/@farris/command-services.js',\r\n//     DataGridService: '/platform/common/web/@farris/command-services.js',\r\n//     FormAttentionService: '/platform/common/web/@farris/command-services.js',\r\n//   }\r\n// };\r\n\r\ndeclare const System: any;\r\n\r\nexport class DynamicCommandHandler extends CommandHandler {\r\n\r\n  constructor(public commandName: string, private method: ControllerMethod) {\r\n    super();\r\n  }\r\n\r\n  public dynamicInvoke(serviceTocken: string, method: string, args: StageParam[], context: CommandContext) {\r\n    const serviceInstance = context.frameContext.injector.get(serviceTocken, null);\r\n    if (serviceInstance) {\r\n      this.setContextToServiceInstance(serviceInstance, context);\r\n      const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n      const parsedArgs = parsedStageParams.map(param => param.expression);\r\n      // tslint:disable-next-line: ban-types\r\n      const serviceMethod = serviceInstance[method] as Function;\r\n      return serviceMethod.apply(serviceInstance, parsedArgs);\r\n    }\r\n  }\r\n\r\n  public dynamicInvoke2(methodObject: ExecutingStage, context: CommandContext) {\r\n    const { source: serviceUri, service: serviceName, method } = methodObject;\r\n    const args = methodObject.params.map(stageParam => {\r\n      return Object.assign({}, stageParam);\r\n    });\r\n    const result$ = new Subject();\r\n    // const serviceSpecifer = controllerMap.imports[serviceUri] || serviceUri;\r\n    const serviceSpecifer = serviceUri;\r\n    if (serviceSpecifer) {\r\n      System.import(serviceSpecifer)\r\n        .then((serviceModule: any) => {\r\n          const serviceConstructor = serviceModule[serviceName];\r\n          if (serviceConstructor) {\r\n            // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);\r\n            const resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);\r\n            const reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);\r\n            const originalContextInjector = context.frameContext.injector;\r\n            context.frameContext.injector = reflectiveInjector;\r\n            const serviceInstance = reflectiveInjector.get(serviceName, null);\r\n            if (serviceInstance) {\r\n              this.setContextToServiceInstance(serviceInstance, context);\r\n              const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n              const parsedArgs = parsedStageParams.map(param => param.expression);\r\n              // tslint:disable-next-line: ban-types\r\n              const serviceMethod = serviceInstance[method] as Function;\r\n              const serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);\r\n              const result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);\r\n              result$$.subscribe({\r\n                next: (result: any) => {\r\n                  result$.next(result);\r\n                },\r\n                error: (error: any) => {\r\n                  result$.error(error);\r\n                },\r\n                complete: () => {\r\n                  result$.complete();\r\n                  context.frameContext.injector = originalContextInjector;\r\n                },\r\n              });\r\n              // return serviceMethod.apply(serviceInstance, parsedArgs);\r\n            }\r\n          }\r\n        });\r\n    }\r\n    return result$;\r\n  }\r\n\r\n  schedule() {\r\n    this.scheduleStages(this.method.stages, null);\r\n    // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n    //   if (currentStage.type === '0') {\r\n    //     this.addTask(currentStage.name, (context: CommandContext) => {\r\n    //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n    //     });\r\n    //     if (preStage) {\r\n    //       this.addLink(preStage.name, currentStage.name, `1===1`);\r\n    //     }\r\n    //   } else if (currentStage.type === '2') {\r\n\r\n    //   } else {\r\n    //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n    //   }\r\n    //   return currentStage;\r\n    // }, null);\r\n  }\r\n\r\n  scheduleStages(stages: MethodStage[], initialStage: MethodStage) {\r\n    stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n      if (currentStage.type === 'executing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n        });\r\n      } else if (currentStage.type === 'fork') {\r\n        const forkStages = (currentStage as ForkStage).stages;\r\n        forkStages.forEach(forkStage => {\r\n          this.scheduleStages(forkStage.stages, forkStage);\r\n        });\r\n        this.scheduleStages((currentStage as DeterminingStage).stages, currentStage);\r\n      } else if (currentStage.type === 'determing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return of(true);\r\n        });\r\n      } else {\r\n        throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n      }\r\n      if (preStage) {\r\n        const condition = preStage.type === 'determing' ? (preStage as DeterminingStage).condition : `1===1`;\r\n        this.addLink(preStage.name, currentStage.name, condition);\r\n      }\r\n      return currentStage;\r\n    }, initialStage);\r\n  }\r\n\r\n  private loadProvidersFromModule(serviceModule: { [propertyName: string]: any }) {\r\n    const providerArray = [];\r\n    for (const propertyName in serviceModule) {\r\n      if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {\r\n        const propertyValue = serviceModule[propertyName];\r\n        if (this.isInjectableService(propertyValue)) {\r\n          // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;\r\n          const providerName = propertyName;\r\n          providerArray.push({ provide: providerName, useClass: propertyValue });\r\n          providerArray.push(propertyValue);\r\n        }\r\n      }\r\n    }\r\n    const resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);\r\n    return resolvedReflectiveProviders;\r\n  }\r\n\r\n  private isInjectableService(propertyValue: any) {\r\n    let hasInjectableDecorator = false;\r\n    const isFunction = propertyValue instanceof Function;\r\n    if (isFunction && propertyValue.hasOwnProperty('decorators')) {\r\n      const decorators = propertyValue.decorators as any[];\r\n      const injectableDecorators = decorators.filter(decorator => {\r\n        if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {\r\n          return decorator;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    } else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {\r\n      const decorators = propertyValue.__annotations__ as any[];\r\n      const injectableDecorators = decorators.filter(decoratorFactory => {\r\n        if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {\r\n          return decoratorFactory;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    }\r\n    return hasInjectableDecorator;\r\n  }\r\n}\r\n","import { Provider } from '@angular/core';\r\nimport { VARIABLE_PROVIDERS } from './variable/index';\r\nimport { AppContext, AppContextManager } from './app/index';\r\n\r\nimport { RestfulService } from './rest/index';\r\nimport { RouterParamService } from './misc/index';\r\n\r\nimport { COMMAND_PROVIDERS } from './command/index';\r\nimport { FrameContext, FrameEventBus } from './frame/index';\r\nimport { Subscription } from './event-mechanism/index';\r\nimport { EventBus } from './event-bus-new/index';\r\nimport { RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener } from './listener/index';\r\nimport { ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor, ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory } from './expression/index';\r\nimport { RepositoryEffector, UIStateEffector, ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN, DependencyEffector, RelativeEffector, ValidateEffector, RequiredEffector, VisibleEffector } from './effector/index';\r\nimport { EntityDependencyResolver, StateDependencyResolver, ResolverRegistry, CommentDependencyResolver, RESOLVER_TOKEN, ResolveService } from './resolver/index';\r\nimport { RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler, StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler, BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry, BindingDataSelectionChangedEventHandler } from './event-handler/index';\r\n\r\n// --------------------------------------------------------------------------------\r\n// Legacy\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for compatibility.\r\n */\r\nexport const FARRIS_DEVKIT_APP_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  VARIABLE_PROVIDERS,\r\n\r\n  AppContext,\r\n  RouterParamService,\r\n  FrameEventBus,\r\n  AppContextManager\r\n];\r\n\r\n// --------------------------------------------------------------------------------\r\n// Current\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for DevkitModule.\r\n */\r\nexport const FARRIS_DEVKIT_MODULE_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  RouterParamService,\r\n  VARIABLE_PROVIDERS,\r\n  AppContextManager\r\n];\r\n\r\n/**\r\n * Providers for root frame components.\r\n */\r\nexport const FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  AppContext,\r\n];\r\n/**\r\n * 表达式provider\r\n * @description 放置到root-component，整个表单只需要注入一次\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  ListenerRegistry,\r\n  Listeners,\r\n  EffectorRegistry,\r\n  EffectorFactory,\r\n  ExpressionRegistry,\r\n  ExpressionEventEmitter,\r\n  ExpressionExecutor,\r\n  ExpressionManager,\r\n  ExpressionResult,\r\n  ExpressionResultFactory,\r\n  { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true },\r\n  ResolverRegistry,\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true},\r\n  EventHandlerRegistry,\r\n  ExpressionEngineImpl,\r\n  ResolveService\r\n];\r\n/**\r\n * 表达式监听器provider\r\n * @description 放置到每个表单的root上，组合表单root也需要放置\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS: Provider[] = [\r\n  { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true }\r\n];\r\n\r\nexport const FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS: Provider[] = [\r\n  { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RelativeEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true }\r\n];\r\n\r\n/**\r\n * Providers for frame components.\r\n */\r\nexport const FARRIS_DEVKIT_FRAME_PROVIDERS = [\r\n  COMMAND_PROVIDERS,\r\n  FrameContext\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { FARRIS_DEVKIT_MODULE_PROVIDERS } from './providers';\r\n/**\r\n * DevkitModule\r\n */\r\n@NgModule({\r\n  providers: FARRIS_DEVKIT_MODULE_PROVIDERS\r\n})\r\nclass DevkitModule {\r\n}\r\n\r\nexport { DevkitModule };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, Change } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n * @deprecated 已废弃\r\n */\r\n@Injectable()\r\nclass DeprecatedBindingDataChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    return null;\r\n  }\r\n}\r\nexport { DeprecatedBindingDataChangeListener };\r\n","\r\n/**\r\n  * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\r\n  *\r\n  * This function will take an already-encoded URL and encode all the non-URL\r\n  * code points. This function will not encode the \"%\" character unless it is\r\n  * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\r\n  * be encoded as `%25foo`).\r\n  *\r\n  * This encode is meant to be \"safe\" and does not throw errors. It will try as\r\n  * hard as it can to properly encode the given URL, including replacing any raw,\r\n  * unpaired surrogate pairs with the Unicode replacement character prior to\r\n  * encoding.\r\n  *\r\n  * @param {string} url\r\n  * @return {string}\r\n  * @public\r\n  */\r\n\r\n export function encodeUrl(url) {\r\n  const ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\r\n  return String(url)\r\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\r\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\r\n    .replace('#','%23').replace('&','%26')\r\n}"]}