import { Injectable, Optional } from '@angular/core';
import { LoadingService } from '@farris/ui-loading';
import { HideEventService } from './hide-event.service';
import { AppContext } from '@farris/devkit';
// tslint:disable: no-string-literal
/**
 * 加载提示Helper
 * 1、包装@farris/ui的LoadingService；
 * 2、提供针对表单的快捷方法；
 */
class FormLoadingService {
    /**
     * 强制显示，不能隐藏
     */
    /**
     * 构造函数
     * 注入@farris/ui的LoadingService
     */
    constructor(loadingService, hideEventService, applicationContext) {
        this.loadingService = loadingService;
        this.hideEventService = hideEventService;
        this.applicationContext = applicationContext;
        /**
         * 延迟loading定时器
         */
        this.loadingTimerIds = [];
        if (hideEventService) {
            this.hideEventService.hideEvent.subscribe(result => {
                this.hide();
            });
        }
        this.registerService();
    }
    setSuspend(flag) {
        FormLoadingService.isSuspend = flag;
    }
    /**
     * 显示加载中
     */
    show(configOrMessage) {
        if (FormLoadingService.isSuspend === true) {
            return;
        }
        if (this.loadingCmp) {
            this.loadingCmp.close();
            this.loadingCmp = null;
        }
        const loadingConfig = this.buildLoadingConfig(configOrMessage);
        this.loadingCmp = this.loadingService.show(loadingConfig);
        return this.loadingCmp;
    }
    /**
     * 延迟显示Loading
     */
    showLoadingWithDelay(delayTime, configOrMessage) {
        // this.show(configOrMessage);
        const timerId = setTimeout(() => {
            this.show(configOrMessage);
        }, delayTime);
        this.loadingTimerIds.push(timerId);
        return timerId;
    }
    /**
     * 隐藏延迟的Loading
     */
    hideDelayLoading(timerIdToClear) {
        this.clearLoadingTimer(timerIdToClear);
        this.hide();
    }
    /**
     * 构造LoadingConfig
     * @param configOrMessage 配置对象或消息字符串
     */
    buildLoadingConfig(configOrMessage) {
        let loadingConfig;
        if (!!configOrMessage) {
            if (typeof configOrMessage === 'object') {
                loadingConfig = configOrMessage;
            }
            else {
                loadingConfig = { 'message': configOrMessage };
            }
        }
        else {
            loadingConfig = {};
        }
        if (!loadingConfig.hasOwnProperty('delay')) {
            loadingConfig.delay = 0;
        }
        return loadingConfig;
    }
    /**
     * 关闭所有loading
     */
    clearAll() {
        FormLoadingService.isSuspend = false;
        this.loadingService.clearAll();
        this.loadingCmp = null;
        this.clearAllLoadingTimers();
    }
    /**
     * 清空Loading定时器
     */
    clearLoadingTimer(timerIdToClear) {
        clearTimeout(timerIdToClear);
        this.loadingTimerIds = this.loadingTimerIds.filter((timerId) => {
            return timerId !== timerIdToClear;
        });
    }
    /**
     * 清空所有Loading定时器
     */
    clearAllLoadingTimers() {
        this.loadingTimerIds.forEach((timerId) => {
            this.clearLoadingTimer(timerId);
        });
    }
    /**
     * 隐藏加载中
     */
    hide() {
        if (!this.loadingCmp) {
            return;
        }
        if (FormLoadingService.isSuspend === true) {
            return;
        }
        this.loadingCmp.close();
        this.loadingCmp = null;
    }
    /**
     * 注册所有的LoadingService实例
     */
    registerService() {
        const services = window['DEVKIT_LOADING_SERVICE'] || [];
        services.push(this);
        window['DEVKIT_LOADING_SERVICE'] = services;
    }
}
FormLoadingService.isSuspend = false;
FormLoadingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormLoadingService.ctorParameters = () => [
    { type: LoadingService },
    { type: HideEventService, decorators: [{ type: Optional }] },
    { type: AppContext, decorators: [{ type: Optional }] }
];
export { FormLoadingService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1sb2FkaW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZm9ybS1sb2FkaW5nL2Zvcm0tbG9hZGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVksUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQW1DLE1BQU0sb0JBQW9CLENBQUM7QUFDckYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLG9DQUFvQztBQUNwQzs7OztHQUlHO0FBQ0gsTUFDTSxrQkFBa0I7SUFZdEI7O09BRUc7SUFFSDs7O09BR0c7SUFDSCxZQUNVLGNBQThCLEVBQ2xCLGdCQUFrQyxFQUNsQyxrQkFBOEI7UUFGMUMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQ2xCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFZO1FBaEJwRDs7V0FFRztRQUNLLG9CQUFlLEdBQVUsRUFBRSxDQUFDO1FBZWxDLElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQ3ZDLE1BQU0sQ0FBQyxFQUFFO2dCQUNQLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNkLENBQUMsQ0FDRixDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFFekIsQ0FBQztJQUNNLFVBQVUsQ0FBQyxJQUFhO1FBQzdCLGtCQUFrQixDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDdEMsQ0FBQztJQUNEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLGVBQXFCO1FBQy9CLElBQUksa0JBQWtCLENBQUMs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SUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsTUFBTSxRQUFRLEdBQVUsTUFBTSxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9ELFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzlDLENBQUM7O0FBakpjLDRCQUFTLEdBQUcsS0FBSyxDQUFDOztZQUZsQyxVQUFVOzs7O1lBVEYsY0FBYztZQUNkLGdCQUFnQix1QkErQnBCLFFBQVE7WUE5QkosVUFBVSx1QkErQmQsUUFBUTs7QUErSGIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTa2lwU2VsZiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9hZGluZ1NlcnZpY2UsIExvYWRpbmdDb25maWcsIExvYWRpbmdDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWxvYWRpbmcnO1xyXG5pbXBvcnQgeyBIaWRlRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi9oaWRlLWV2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcHBDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuLyoqXHJcbiAqIOWKoOi9veaPkOekukhlbHBlclxyXG4gKiAx44CB5YyF6KOFQGZhcnJpcy91aeeahExvYWRpbmdTZXJ2aWNl77ybXHJcbiAqIDLjgIHmj5Dkvpvpkojlr7nooajljZXnmoTlv6vmjbfmlrnms5XvvJtcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRm9ybUxvYWRpbmdTZXJ2aWNlIHtcclxuICBwcml2YXRlIHN0YXRpYyBpc1N1c3BlbmQgPSBmYWxzZTtcclxuICAvKipcclxuICAgKiDliqDovb3kuK3nu4Tku7blrp7kvotcclxuICAgKi9cclxuICBwcml2YXRlIGxvYWRpbmdDbXA6IExvYWRpbmdDb21wb25lbnQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOW7tui/n2xvYWRpbmflrprml7blmahcclxuICAgKi9cclxuICBwcml2YXRlIGxvYWRpbmdUaW1lcklkczogYW55W10gPSBbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog5by65Yi25pi+56S677yM5LiN6IO96ZqQ6JePXHJcbiAgICovXHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIOazqOWFpUBmYXJyaXMvdWnnmoRMb2FkaW5nU2VydmljZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGhpZGVFdmVudFNlcnZpY2U6IEhpZGVFdmVudFNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGFwcGxpY2F0aW9uQ29udGV4dDogQXBwQ29udGV4dCxcclxuICApIHtcclxuICAgIGlmIChoaWRlRXZlbnRTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMuaGlkZUV2ZW50U2VydmljZS5oaWRlRXZlbnQuc3Vic2NyaWJlKFxyXG4gICAgICAgIHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlZ2lzdGVyU2VydmljZSgpO1xyXG5cclxuICB9XHJcbiAgcHVibGljIHNldFN1c3BlbmQoZmxhZzogYm9vbGVhbikge1xyXG4gICAgRm9ybUxvYWRpbmdTZXJ2aWNlLmlzU3VzcGVuZCA9IGZsYWc7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaYvuekuuWKoOi9veS4rVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzaG93KGNvbmZpZ09yTWVzc2FnZT86IGFueSk6IExvYWRpbmdDb21wb25lbnQge1xyXG4gICAgaWYgKEZvcm1Mb2FkaW5nU2VydmljZS5pc1N1c3BlbmQgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubG9hZGluZ0NtcCkge1xyXG4gICAgICB0aGlzLmxvYWRpbmdDbXAuY2xvc2UoKTtcclxuICAgICAgdGhpcy5sb2FkaW5nQ21wID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsb2FkaW5nQ29uZmlnID0gdGhpcy5idWlsZExvYWRpbmdDb25maWcoY29uZmlnT3JNZXNzYWdlKTtcclxuICAgIHRoaXMubG9hZGluZ0NtcCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdyhsb2FkaW5nQ29uZmlnKTtcclxuICAgIHJldHVybiB0aGlzLmxvYWRpbmdDbXA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlu7bov5/mmL7npLpMb2FkaW5nXHJcbiAgICovXHJcbiAgcHVibGljIHNob3dMb2FkaW5nV2l0aERlbGF5KGRlbGF5VGltZTogbnVtYmVyLCBjb25maWdPck1lc3NhZ2U/OiBhbnkpOiBhbnkge1xyXG4gICAgLy8gdGhpcy5zaG93KGNvbmZpZ09yTWVzc2FnZSk7XHJcbiAgICBjb25zdCB0aW1lcklkID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2hvdyhjb25maWdPck1lc3NhZ2UpO1xyXG4gICAgfSwgZGVsYXlUaW1lKTtcclxuICAgIHRoaXMubG9hZGluZ1RpbWVySWRzLnB1c2godGltZXJJZCk7XHJcbiAgICByZXR1cm4gdGltZXJJZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmakOiXj+W7tui/n+eahExvYWRpbmdcclxuICAgKi9cclxuICBwdWJsaWMgaGlkZURlbGF5TG9hZGluZyh0aW1lcklkVG9DbGVhcjogYW55KSB7XHJcbiAgICB0aGlzLmNsZWFyTG9hZGluZ1RpbWVyKHRpbWVySWRUb0NsZWFyKTtcclxuICAgIHRoaXMuaGlkZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCgTG9hZGluZ0NvbmZpZ1xyXG4gICAqIEBwYXJhbSBjb25maWdPck1lc3NhZ2Ug6YWN572u5a+56LGh5oiW5raI5oGv5a2X56ym5LiyXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZExvYWRpbmdDb25maWcoY29uZmlnT3JNZXNzYWdlOiBhbnkpOiBMb2FkaW5nQ29uZmlnIHtcclxuICAgIGxldCBsb2FkaW5nQ29uZmlnOiBMb2FkaW5nQ29uZmlnO1xyXG4gICAgaWYgKCEhY29uZmlnT3JNZXNzYWdlKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnT3JNZXNzYWdlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGxvYWRpbmdDb25maWcgPSBjb25maWdPck1lc3NhZ2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9hZGluZ0NvbmZpZyA9IHsgJ21lc3NhZ2UnOiBjb25maWdPck1lc3NhZ2UgfTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9hZGluZ0NvbmZpZyA9IHt9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFsb2FkaW5nQ29uZmlnLmhhc093blByb3BlcnR5KCdkZWxheScpKSB7XHJcbiAgICAgIGxvYWRpbmdDb25maWcuZGVsYXkgPSAwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxvYWRpbmdDb25maWc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhbPpl63miYDmnIlsb2FkaW5nXHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFyQWxsKCkge1xyXG4gICAgRm9ybUxvYWRpbmdTZXJ2aWNlLmlzU3VzcGVuZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgdGhpcy5sb2FkaW5nQ21wID0gbnVsbDtcclxuICAgIHRoaXMuY2xlYXJBbGxMb2FkaW5nVGltZXJzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmuIXnqbpMb2FkaW5n5a6a5pe25ZmoXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjbGVhckxvYWRpbmdUaW1lcih0aW1lcklkVG9DbGVhcjogYW55KSB7XHJcbiAgICBjbGVhclRpbWVvdXQodGltZXJJZFRvQ2xlYXIpO1xyXG4gICAgdGhpcy5sb2FkaW5nVGltZXJJZHMgPSB0aGlzLmxvYWRpbmdUaW1lcklkcy5maWx0ZXIoKHRpbWVySWQ6IGFueSkgPT4ge1xyXG4gICAgICByZXR1cm4gdGltZXJJZCAhPT0gdGltZXJJZFRvQ2xlYXI7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa4heepuuaJgOaciUxvYWRpbmflrprml7blmahcclxuICAgKi9cclxuICBwcml2YXRlIGNsZWFyQWxsTG9hZGluZ1RpbWVycygpIHtcclxuICAgIHRoaXMubG9hZGluZ1RpbWVySWRzLmZvckVhY2goKHRpbWVySWQ6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLmNsZWFyTG9hZGluZ1RpbWVyKHRpbWVySWQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpmpDol4/liqDovb3kuK1cclxuICAgKi9cclxuICBwdWJsaWMgaGlkZSgpIHtcclxuICAgIGlmICghdGhpcy5sb2FkaW5nQ21wKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChGb3JtTG9hZGluZ1NlcnZpY2UuaXNTdXNwZW5kID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubG9hZGluZ0NtcC5jbG9zZSgpO1xyXG4gICAgdGhpcy5sb2FkaW5nQ21wID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjOaJgOacieeahExvYWRpbmdTZXJ2aWNl5a6e5L6LXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZWdpc3RlclNlcnZpY2UoKSB7XHJcbiAgICBjb25zdCBzZXJ2aWNlczogYW55W10gPSB3aW5kb3dbJ0RFVktJVF9MT0FESU5HX1NFUlZJQ0UnXSB8fCBbXTtcclxuICAgIHNlcnZpY2VzLnB1c2godGhpcyk7XHJcbiAgICB3aW5kb3dbJ0RFVktJVF9MT0FESU5HX1NFUlZJQ0UnXSA9IHNlcnZpY2VzO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCB7IEZvcm1Mb2FkaW5nU2VydmljZSB9O1xyXG4iXX0=