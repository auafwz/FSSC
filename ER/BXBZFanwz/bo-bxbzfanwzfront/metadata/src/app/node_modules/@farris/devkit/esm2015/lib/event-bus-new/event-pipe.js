import { Subject } from 'rxjs';
import { EventTypeEnum } from '../event-mechanism';
import { EventPipeType } from './event-pipe-type';
export class EventPipe {
    constructor(name, tokenValue, emitter, parentEventPipeList) {
        this.name = name;
        this.tokenValue = tokenValue;
        this.emitter = emitter;
        this.parentEventPipeList = parentEventPipeList;
        this.lastEventId = -1;
        /**
         * EventPipe类型，编译类型表单检查是否在同一上下文中，解析类型表单不判断
         */
        this.eventPipeType = EventPipeType.Compile;
        this.eventSubject = new Subject();
        this.subscriptionMap = new Map();
        this.onceSubscriptionMap = new Map();
        if (this.parentEventPipeList) {
            this.parentEventPipeList.push(this);
        }
    }
    /**
     * 发送事件
     */
    post(args, sender, eventType, eventId) {
        const eventData = {
            args: args,
            sender: sender,
            eventType,
            eventId
        };
        this.eventSubject.next(eventData);
    }
    /**
     * 订阅事件
     */
    subscribe(eventHandler, receiver) {
        // 对于弹窗，caller是弹窗中的组件，每次caller不同，但还是会重复注册。
        // 重复订阅检测
        const subscriptionInMap = this.subscriptionMap.get(receiver);
        if (subscriptionInMap != null) {
            subscriptionInMap.unsubscribe();
            this.subscriptionMap.delete(receiver);
        }
        const subscription = this.eventSubject.subscribe((eventData) => {
            const args = eventData.args;
            const sender = eventData.sender;
            const eventType = eventData.eventType || null;
            const eventId = eventData.eventId || 0;
            if (this.lastEventId >= eventId) {
                return;
            }
            this.lastEventId = eventId;
            // 判断sender和receiver的关系，如果在同一个AppContext或者在在一棵树上，则处理
            // 该判断主要解决SPA模式下，一个页面被打开多次的场景。
            if (!(eventType === EventTypeEnum.ROUTE)) {
                if (this.isInSampeScope(sender, receiver) === false) {
                    return;
                }
            }
            eventHandler.call(receiver, args);
        });
        this.subscriptionMap.set(receiver, subscription);
        return this;
    }
    subscribeOnce(eventHandler, caller) {
        const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));
        this.onceSubscriptionMap.set(caller, subscription);
        return this;
    }
    unSubscribe(subscriber) {
        let subscription = this.subscriptionMap.get(subscriber);
        if (subscription) {
            subscription.unsubscribe();
            subscription = null;
            this.subscriptionMap.delete(subscriber);
        }
        else {
            subscription = this.onceSubscriptionMap.get(subscriber);
            if (subscription) {
                subscription.unsubscribe();
                subscription = null;
                this.onceSubscriptionMap.delete(subscriber);
            }
        }
    }
    // 注销使用once方法注册的订阅。
    unSubscribeForOnce() {
        for (const subscriber of Array.from(this.onceSubscriptionMap.keys())) {
            this.unSubscribe(subscriber);
        }
    }
    matchEmitterToken(emitter, tokenValue) {
        if (this.emitter && emitter && this.emitter !== emitter) {
            return false;
        }
        if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    }
    examByTargetToken(target, tokenValue) {
        if (this.emitter !== target) {
            return false;
        }
        if (this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    }
    dispose(subscriber) {
        this.unSubscribe(subscriber);
        if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {
            const location = this.parentEventPipeList.findIndex(item => item === this);
            if (location !== -1) {
                this.parentEventPipeList.splice(location, 1);
            }
        }
    }
    /**
     * 根据caller进行注销
     */
    disposeByCaller(caller) {
        const subscriptionInMap = this.subscriptionMap.get(caller);
        if (subscriptionInMap != null) {
            subscriptionInMap.unsubscribe();
            this.subscriptionMap.delete(caller);
        }
    }
    /**
     * 检查是否在同一个上下文中
     * @todo
     * 1、强识别了sender和receiver的结构来判断，不合理；
     * 2、应该声明一个接口来约束结构。
     */
    isInSampeScope(sender, receiver) {
        // 用来区分编译类型的表单，还是解析类型的表单
        if (this.eventPipeType === EventPipeType.Parsing) {
            return true;
        }
        // 兼容老代码，sender不存在时，不进行检测
        if (!sender) {
            return true;
        }
        // 异常处理场景
        if (sender === receiver) {
            return true;
        }
        // 判断是否是FrameContext
        if (!sender.context || !sender.context.appContext ||
            !receiver.context || !receiver.context.appContext) {
            return false;
        }
        const senderAppContext = sender.context.appContext;
        const receiverAppContext = receiver.context.appContext;
        // 情况1：现状
        // 对于老表单，在模块上注入了一个AppContext；
        // 组合表单中主表单的root-component（被组合的表单的root-componetn上没有注入）上注入了AppContext
        // SPA模式下，如法通过Root AppContext区分，是不是同一个菜单内的事件；
        // 只能判断根组件上的AppContext来判断
        // 判断根AppContext是否一致
        if (senderAppContext === receiverAppContext) {
            return true;
        }
        // 情况2：注入改造后
        // 如果以后注入关系改造了，模块上的AppContext移除掉
        // 组合表单中每个root-component都拥有一个AppContext;
        // 组合表单中主表单的root-component的AppContext为Root AppContext
        // if (senderAppContext.root === receiverAppContext.root) {
        //   return true;
        // }
        // 情况3：注入改造后老表单兼容
        // 如果以后注入关系改造了，但产品部没有重新编译;
        // 和情况2类似，不同的是模块上还遗留了一个AppContext；
        // 此时Root Appcontext还是模块上的，如何来判断？
        // 1、考虑通过sender的injector一直网上找，找到模块之前的那个组件injector，从其中拿AppContext来判断；
        // 2、找一个全部重新编译的时机再改造。
        if ((senderAppContext.useIsoluteEventBus && senderAppContext.isoluteEventBus) ||
            (receiverAppContext.useIsoluteEventBus && receiverAppContext.isoluteEventBus)) {
            // 如果存在独立加载js  那么
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,